create or replace package body PKG_DB_SUSPENSION
-------------
--  $HeadURL:   BASE_API.PKG_DB_SUSPENSION.PBK  $
-- $Revision:   1.0  $
--   $Author:   skukreja  $
--     $Date:   03 Feb 2014 15:02:16  $
--  2015-06-04  Cheryl Dextradeur  osbilling-1072. In creating a task, set the resume date to today + 7 if blank
--  2015-06-10  Cheryl Dextradeur  osbilling-1072. Took out the creation of a task in sp_resume_policy
--  2015-08-19  Kostya Dubin       osbilling-1231. Modifying sp_suspend_policy and sp_resume_policy - add call of pkg_cs_post_nb.sp_renumber_plcytrx to renumber
--                                                 transaction AFTER the Transaction Effective Date BV is set for the newly created transaction.
-------------
as


-----------------------------------------------------------------------------------------------------------------------------------------------------
--      Package Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------

pkg_name                 constant  system_log.program_name%type               :=   'pkg_db_suspension.';
g_suspension_date                  object_bv_value.business_variable_value%type;
g_resume_date                          object_bv_value.business_variable_value%type;

type t_susp_act_bv_map  is table of business_variable.business_variable_id%type index by pls_integer;
type t_susp_act_val_map is table of number index by pls_integer;
type t_susp_act_name_map is table of varchar2(50) index by pls_integer;

g_susp_act_pol_term_bv_map  t_susp_act_bv_map;
g_susp_act_susp_bv_map  t_susp_act_bv_map;
g_susp_act_name_map t_susp_act_name_map;
-----------------------------------------------------------------------------------------------------------------------------------------------------

     --
     --Get all the Policies where responsible billing account id = in_action_object_id
     --
     cursor billaccount_policy_cur(p_billing_account object.object_id%type)
     is
          select
               *
          from
               dragon_policy dp
          where
               dp.responsible_billing_account = p_billing_account
          --OSPRODUCT-7273
          union
          Select 
               p1.*
          from 
               dragon_policy_term_payer tp, dragon_policy p1, dragon_billingaccount ba
          where 
               tp.payer_billing_account_id = ba.billingaccount_id
          and 
               tp.policy_id = p1.policy_id
          and 
               ba.billingaccount_id = p_billing_account
          and 
               ba.account_type_id = gBillingAcType_Customer
/*          order by
               p1.policy_id desc*/
          ;
     
     --OSPRODUCT-7273
     Cursor c_billing_account(cin_policy_id object.object_id%type) 
     is 
          select 
               responsible_billing_account as billing_account
          from 
               dragon_policy
          where
               policy_id = cin_policy_id
          union
          Select 
               tp.payer_billing_account_id as billing_account
          from 
               dragon_policy_term_payer tp, dragon_billingaccount ba
          where 
               tp.policy_id = cin_policy_id
          and
               tp.payer_billing_account_id = ba.billingaccount_id
          and 
               ba.account_type_id = gBillingAcType_Customer ;


procedure show_version
is
begin
     dbms_output.put_line ('$HeadURL:   BASE_API.PKG_DB_SUSPENSION.PBK  $');
     dbms_output.put_line ('$Revision:   1.0  $');
     dbms_output.put_line ('$Author:   skukreja  $');
     dbms_output.put_line ('$Date:   03 Feb 2014 15:02:16  $');
exception

     when others
     then
          dbms_output.put_line (sqlerrm (sqlcode));

end show_version;

-----------------------------------------------------------------------------------------------------------------------------------------------------

--
--   %NAME
--        sp_create_task
--
--   %USAGE
--        This procedure creates the task for the Billing CSR of the Customer's Billing Account.
--
--
--   %ALGORITHM
--          1.   Get the Primary Billing CSR of the billing account
--          2.   Get the Account Holder Name of the billing accoun
--          3.   Create object of Type TASK ...
--          4.   Holler to session that a new object has been created
--          5.   Get the Current User
--          6.   Set the business variables for Task object. Assign the task to the Primary Billing CSR
--               if exists or to the current user.
--          7.   Update the Task Datamart

--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_task_object_id             Task Object ID
--   %PARAM    in_billing_accnt_id           Billing Account ID
--   %PARAM    in_amount                     The Billing Transaction amount
--
--
--------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_create_task
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_task_object_id                  in             object.object_id%type,    /* Tasked Object ID */
     in_billing_accnt_id                in             object.object_id%type,
     in_task_type                         in               object.object_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_create_task';

     v_primary_billing_csr_id           object.object_id%type;
     --v_underwriter_id                     object.object_id%type;
     v_new_task_id                      object.object_id%type         := null;
     v_current_user_object_id           object.object_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_account_holder_name              object_bv_value.business_variable_value%type;
     v_task_status                         object_bv_value.business_variable_value%type;
     v_task_desc                         object_bv_value.business_variable_value%type;
     v_task_title                         object_bv_value.business_variable_value%type;
     v_datamart_tf                      char(1)                       := 'T';
     v_policy_identifier                object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_task_object_id, 231);
     v_sysdateplus7                     date                          := sysdate + 7;
   --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
   v_task_description_id              integer;
     bv_notedescclob                    constant business_variable.business_variable_id%type := 32344440;
     v_notes_desc                       clob;
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. End

begin


     --
     -- 1. Get the Primary Billing CSR of the billing account
     --

     v_primary_billing_csr_id      :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_billing_accnt_id,
                                                 pkg_db_security_trigger.gbv_BillingAcc_RefPrimaryCSR    -- 31761546

                                             );

     /*v_underwriter_id                :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_task_object_id,
                                                 26590807 --GenericObject - xReference - _Reference_Underwriter6
                                             );*/

     --
     -- 2. Get the Account Holder Name of the billing account
     --

     v_account_holder_name         :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_billing_accnt_id,
                                                 gbv_BillingAcc_AccHldr_Name    --29974846
                                             );

     --
     --   3. Create object of Type NOTE ...
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          pkg_os_wf_task.gObjType_Task,
          null,
          v_new_task_id
     );

     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_new_task_id...'||v_new_task_id
          );

     --
     --   4. Holler to session that a new object has been created
     --

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_constant_bv.gbv_SessionNewObject, -- 210395
          v_new_task_id

     );

     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_new_task_id...'||v_new_task_id
          );

     --
     --   5. Get the Current User
     --

     v_current_user_object_id      :=        pkg_os_wf_session.fn_user_get
                                             (
                                                 in_session_id,
                                                  in_transaction_id
                                             );
     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_current_user_object_id...'||v_current_user_object_id
          );
     --
     -- 6. Set the business variables for Task object
     --
     v_task_status :=      2 ;

     if in_task_object_id = in_billing_accnt_id
     then
          v_task_title :=      'Billing Account ' ||in_billing_accnt_id ||' has been marked as supended.';
     else
          v_task_title :=      'Policy ' ||v_policy_identifier ||' has been marked as supended.';
     end if;

     if in_task_object_id = in_billing_accnt_id
     then
          v_task_desc :=      'Billing Account ' ||in_billing_accnt_id ||' of customer '||v_account_holder_name||' has been marked as suspended. Please set up or mark the billing account as active by the due date ';--||to_char(g_resume_date,'yyyymmddhh24miss');
     else
          v_task_desc :=      'Policy ' ||v_policy_identifier ||' has been marked as suspended. Please set up or mark the policy as active by the due date ';--||to_char(g_resume_date,'yyyymmddhh24miss');
     end if;

     v_bv_table.delete;

     v_bv_table (pkg_os_wf_task.gbv_taskassociatedobject    ).business_variable_value :=  in_task_object_id;
     v_bv_table (pkg_os_constant_bv.gbv_genobjcreator       ).business_variable_value :=  v_current_user_object_id;
     v_bv_table (pkg_os_constant_bv.gbv_genobjcreationdate  ).business_variable_value :=  to_char(sysdate,'yyyymmddhh24miss');
     v_bv_table (gbv_Task_TaskContentType                   ).business_variable_value :=  gTask_content_type_task ;
     v_bv_table (gbv_Task_TaskStatus                        ).business_variable_value :=  v_task_status;
     v_bv_table (gbv_Task_TaskTitle                         ).business_variable_value :=  v_task_title;
     v_bv_table (gbv_Task_TaskDesc                          ).business_variable_value :=  v_task_desc;
     v_bv_table (gbv_Task_TaskCreatedDate                   ).business_variable_value :=  to_char( sysdate , 'yyyymmddhh24miss');
     v_bv_table (gbv_Task_TaskType                          ).business_variable_value :=  in_task_type;
     v_bv_table (gbv_Task_TaskDueDate                       ).business_variable_value :=  NVL(g_resume_date, to_char(v_sysdateplus7,'yyyymmddhh24miss'));
     v_bv_table (gbv_Task_Ref_Assigned_To                   ).business_variable_value :=  nvl(v_primary_billing_csr_id,v_current_user_object_id);
     v_bv_table (pkg_os_constant_bv.gbv_GenObjObjectState   ).business_variable_value :=  pkg_os_constant.gObjState_Alive; --37246; -- SK : Commented for Diary
--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
--GCNA-1631
     --begin
     v_bv_table (gbv_task_taskcontenttype                   ).business_variable_value :=  pkg_os_wf_task.gtaskcontent_note;--gTask_content_type_task ;
     --v_bv_table (gbv_Task_TaskStatus                        ).business_variable_value :=  v_task_status;
     --v_bv_table (gbv_Task_TaskTitle                         ).business_variable_value :=  v_task_title;
     v_bv_table (gbv_task_taskdesc                          ).business_variable_value :=  v_task_desc;

     v_notes_desc := v_task_desc || chr(10);
     pkg_os_long_string.set_long_string(in_session_id,
                                           in_transaction_id,
                                           in_task_object_id,
                                           bv_NoteDescClob, -- notdescription CLOB
                                           v_notes_desc,
                                           v_task_description_id);

     v_bv_table (bv_NoteDescClob                            ).business_variable_value :=  v_task_description_id; --Note Task Description
     v_bv_table (gbv_Task_TaskCreatedDate                   ).business_variable_value :=  to_char( sysdate , 'yyyymmddhh24miss');
     --v_bv_table (gbv_Task_TaskType                          ).business_variable_value :=  in_task_type;
     --v_bv_table (gbv_task_taskduedate                       ).business_variable_value :=  nvl(g_resume_date, to_char(v_sysdateplus7,'yyyymmddhh24miss'));
     --v_bv_table (gbv_Task_Ref_Assigned_To                   ).business_variable_value :=  nvl(v_primary_billing_csr_id,v_current_user_object_id);
     v_bv_table (pkg_os_constant_bv.gbv_GenObjObjectState   ).business_variable_value :=  pkg_os_constant.gObjState_Alive; --37246; -- SK : Commented for Diary
     --GCNA-1631
     --end
     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... added BV...'||v_current_user_object_id
          );
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_task_id,
          v_bv_table
     );


     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.........Created Task Object '||v_new_task_id ||
               ' assigned to: '|| nvl(v_primary_billing_csr_id,v_current_user_object_id)||
               ' with tasked object : ' ||in_task_object_id

          );

     end if;

     --
     -- 7. Update the Task Datamart
     --

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_task_id, v_datamart_tf);

end sp_create_task;
--------------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-13161
procedure sp_policy_billplan_update 
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type    --either term or policy
)
is
     v_procedure_name                   constant  system_log.program_name%type   :=   pkg_name||'sp_policy_billplan_update';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_action_object_type_id            object_type.object_type_id%type;
     v_policy_term_id                   object.object_id%type;
     v_datamart_tf                      char(1) := 'T';
     v_billplan_id                      object.object_id%type;
     v_billplan_update_flag             Char(1) := 'F';
      
begin

     v_action_object_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );
                                
      if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Action object id: '      || in_action_object_id ||
               'Action object type id: ' || v_action_object_type_id
          );

     end if;       
     
     if v_action_object_type_id = gObjType_Policy  then 
        
         v_policy_term_id := pkg_db_functions.fn_get_policy_current_term(in_session_id,in_transaction_id,in_action_object_id);
     else
     
         v_policy_term_id := in_action_object_id;
     end if;
     
     for r_bill_plan in (select pref_bill_plan_id from dragon_policy_term_payer where policy_term_id = v_policy_term_id) loop
         
         v_billplan_id := r_bill_plan.pref_bill_plan_id;
         v_billplan_update_flag := 'T';
         
         if v_billplan_id is not null
         then
               pkg_os_datamart.sp_datamart_update_row (in_session_id, in_transaction_id, v_billplan_id, v_datamart_tf); 
         end if; 
         
     end loop;
     
     if v_billplan_update_flag <> 'T' then
        
        v_billplan_id := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_term_id,
                                 pkg_db_statement.gbv_Ref_Pref_BillPlan_id 
                            );
                            
         if v_billplan_id is not null
         then
               pkg_os_datamart.sp_datamart_update_row (in_session_id, in_transaction_id, v_billplan_id, v_datamart_tf); 
         end if;                   
        
        
     end if;
         
end sp_policy_billplan_update;
-----------------------------------------------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_exchange_query_get
--
--   %USAGE
--        This procedure will be used to get the query to fetch the multiple billing accounts for suspension
--          based on the inputs provided by the user.
--
--
--   %ALGORITHM
--          1. Read the BV's of the suspension object and form the query.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             out_query                        Formed Query.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_exchange_query_get
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     out_query                         out       sys_refcursor
)
is
     v_bv_id                            business_variable.business_variable_id%type := null;
     v_bv_list                          pkg_os_object_io.t_bv_table;
     v_bv_value_tab                     object_variable_value_tt := new object_variable_value_tt();
     v_value                            object_bv_value.business_variable_value%type;
     v_exch_sql_stmt                    varchar2(4000);

begin

     pkg_os_object_io.sp_object_bv_get_all
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_bv_list
          );

     v_bv_id := v_bv_list.first;

     if v_bv_id is not null then

          while v_bv_id is not null loop

               v_value := v_bv_list( v_bv_id ).business_variable_value;

               v_bv_value_tab.extend;

               v_bv_value_tab(v_bv_value_tab.count) :=
                    new object_variable_value_ot
                         (
                              in_action_object_id,
                              v_bv_id,
                              v_value
                         );

               v_bv_id := v_bv_list.next(v_bv_id);

          end loop;
     end if;

     v_exch_sql_stmt := 'Select billingaccount_id from dragon_billingaccount where parent_object_type_id = 12 and account_status = ''Active''' ;
     for i in v_bv_value_tab.first .. v_bv_value_tab.last
     loop
          if v_bv_value_tab(i).business_variable_value is not null
               and
               v_bv_value_tab(i).business_variable_id in (gbv_Suspension_City, gbv_Suspension_State, gbv_Suspension_Zip, gbv_Suspension_Country, gbv_Suspension_Jurisd)
          then
               if  v_bv_value_tab(i).business_variable_id = gbv_Suspension_City  then

                    v_exch_sql_stmt := v_exch_sql_stmt || ' and '|| ' upper(NVL(to_char(ADDRESS_CITY),'' '')) = upper('||''''|| v_bv_value_tab(i).business_variable_value ||''')';

                    elsif v_bv_value_tab(i).business_variable_id = gbv_Suspension_State
                         and v_bv_value_tab(i).business_variable_value != 0 then

                         v_exch_sql_stmt := v_exch_sql_stmt || ' and '|| ' NVL(to_char(ADDRESS_STATE),'' '') = '||''''|| pkg_os_lookup.fn_lookup_list_short_text_get (5050401, v_bv_value_tab(i).business_variable_value) ||'''';

                    elsif v_bv_value_tab(i).business_variable_id = gbv_Suspension_Zip then

                         v_exch_sql_stmt := v_exch_sql_stmt || ' and '|| ' NVL(to_char(ADDRESS_ZIP_CODE),'' '') = '||''''|| v_bv_value_tab(i).business_variable_value ||'''';

                    elsif v_bv_value_tab(i).business_variable_id = gbv_Suspension_Country
                         and v_bv_value_tab(i).business_variable_value != 0 then

                         v_exch_sql_stmt := v_exch_sql_stmt || ' and '|| ' NVL(to_char(ADDRESS_COUNTRY),'' '') = '||''''|| pkg_os_lookup.fn_lookup_list_text_get (50, v_bv_value_tab(i).business_variable_value) ||'''';

                    end if;

               end if;
               v_exch_sql_stmt := rtrim (v_exch_sql_stmt);
     end loop;

     open out_query for v_exch_sql_stmt;

end sp_exchange_query_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_email_customer
--
--   %USAGE
--        This procedure will email the customer when a policy suspended.
--
--   %ALGORITHM
--        1. Get the Customer's primary entity's email address
--        2. if email address is not null, then create a task and send the email
--        3. else exit
--
--   %PARAM    in_session_id                  Session Id
--   %PARAM    in_transaction_id              Transaction id
--   %PARAM    in_action_object_id            Action Object Id
--   %PARAM    io_action_outcome_id           Action outcome Id
--   %PARAM    in_current_date_time           Current date and time
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_email_customer
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type,
     in_current_date_time          in             date default null
)as
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name              constant system_log.program_name%type        := pkg_name||'sp_email_customer';

--     v_email_msg                   email.message%type    := null;
     v_email_msg                   varchar2(4000) := null ;--OSPRODUCT-4636 notification.message%type    := null;   --OSBILLING-6703
     v_email_msg_id                object.object_id%type := null;
     v_policy_trx_id               object.object_id%type := in_action_object_id;
     v_policy_id                   object.object_id%type := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,v_policy_trx_id,pkg_os_constant.gObjType_Policy);
     v_policy_identifier           object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_policy_id, 231);
     v_customer_id                 object.object_id%type;
     v_customer_entity_id          object.object_id%type;
     --OSBILLING-6703 start
     --v_customer_email_addr         email.email_to_address%type;
     --v_customer_email_title        email.email_subject%type;
     v_customer_email_addr         varchar2(2000);
     v_customer_email_title        notification.subject%type;
     --OSBILLING-6703 end
     v_customer_full_name          object_bv_value.business_variable_value%type;
     v_exchange_id                 object_bv_value.business_variable_value%type;



     v_task_object_id              object.object_id%type;
     v_object_cache                pkg_os_object_cache.t_object_cache;

     v_datamart_tf                 char(1):= null;

     v_person_from                 object.object_id%type;

begin

-- There are alternates to this approach, when they are workable (i.e. 'send to' address is configurable in action_result_task),
-- this should be changed
     /*
     v_customer_id                 :=   pkg_os_object_search.fn_object_ultimate_parent_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id
                                        );
     */
     --
     -- instead of ultimate customer get parent of type customer as batch object is the ultimate parent for multiple quote upload workflow...
     --
     v_customer_id   :=   pkg_os_object_search.fn_object_get_parent_of_type
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        pkg_os_constant.gObjType_Customer
                                   );

     v_customer_entity_id          :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_customer_id,
                                             gbv_CustRefPrimaryEntity
                                        );

     v_customer_email_addr         :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            gbv_EntityEmailAddr
                                        );

     v_customer_full_name          :=   pkg_os_object.fn_object_name_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_customer_id
                                        );

     v_customer_email_title        :=   'INFORMATION : Policy ' ||v_policy_identifier;

     --- Send the policy suspension email at the customer's email that we have as an email address

     if v_customer_email_addr is not null
     then

          v_exchange_id                 :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_session_id,
                                                  pkg_os_constant_bv.gbv_SessionExchange
                                             );


         v_email_msg                   :=   '<p>Greetings! Your policy '
                                              ||v_policy_identifier
                                              ||' has been marked for Suspend Billing. Please contact your agent to get the policy activated again.' ;

         -- end if;

          ---
          --- Create task for email and set its BVs
          ---

          -- v_task_object_id              :=   pkg_os_object.fn_object_create_id(pkg_os_wf_task.gobjType_Task);  -- Commented for OSPRODUCT-11052

        -- Added for OSPRODUCT-11052
          pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          pkg_os_wf_task.gObjType_Task,
          null,
          v_task_object_id
     );
	 -- Added for OSPRODUCT-11052

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_task_object_id,
               gbv_Task_EmailToAddr,
               v_customer_email_addr
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_task_object_id,
               gbv_Task_Title,
               v_customer_email_title
          );


          pkg_os_long_string.set_long_string
          (
                 in_session_id,
                 in_transaction_id,
                 v_task_object_id,
                 to_char(pkg_os_wf_task.gbv_TaskDescrCompositeClob),
                 nvl(v_email_msg,'.'),
                 v_email_msg_id
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_task_object_id,
               pkg_os_wf_task.gbv_TaskDescrCompositeClob,
               v_email_msg_id
          );

          --
          -- Set the Person From in case of Policy created through Customer Portal
          --
          v_person_from := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);
          /*v_person_from := nvl
                           (
                                pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_task_object_id,
                                     gbv_TaskPersonFrom
                                ),
                                v_default_user_id
                           );*/

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_task_object_id,
               gbv_TaskPersonFrom,
               v_person_from
          );

          ---
          --- Initiate sending email for the task just created
          ---

          pkg_os_notification.sp_task_email_send  --OSBILLING-6703
          (
               in_session_id,
               in_transaction_id,
               v_object_cache,
               v_task_object_id
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_task_object_id, v_datamart_tf);

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Policy Suspension email has been sent to  '
                    ||v_customer_email_addr
               );
          end if;

     else
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Policy suspension email didn''t reach the expected recepient. '
               );
          end if;

     end if;


exception
     when others
     then
          -- not necessarily an error: just log it and continue.

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log_core
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'SQL error: '
                    ||SQLERRM(SQLCODE)
               );
          end if;

end sp_email_customer;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_suspend_policy
--
--   %USAGE
--        This procedure will be used to mark policy as suspended.
--          This sprocedure will get the current policy term that is active and then will mark it as supeneded.
--
--
--   %ALGORITHM
--          1. Fetch the current active policy term.
--          2. Mark it as suspended.
--          3. Create a new policy transaction as Billing Suspension
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_policy_id                    Policy id
--   %PARAM             in_suspension_obj_id          Suspension object id may be billingaccountsuspension or exchange suspension
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_suspend_policy
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
        in_policy_id                               in              object.object_id%type,
     in_suspension_obj_id              in        object.object_id%type,
        in_action_object_type_id             in               object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as
  v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'sp_suspend_policy';
  v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

  v_datamart_tf                 char   := 'T';
  --v_pol_term_bill_susp_status   object_bv_value.business_variable_value%type;
  v_parent_object_id            object.object_id%type;
  v_policy_term_id              object.object_id%type;
   v_new_policytrxn_id                        object.object_id%type;
  v_susp_Stop_All               lookup_list_value.lookup_enum%type;
v_susp_Stop_All_Billing               lookup_list_value.lookup_enum%type;
     --v_billing_acc_susp_status              object_bv_value.business_variable_value%type;
     v_suspension_type                        object_bv_value.business_variable_value%type;
  v_susp_activity_num         integer;
  v_susp_activities t_susp_act_val_map;

  --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
   v_suspension_type_term                   object_bv_value.business_variable_value%type;--GCNA-2234
   v_object_list                  pkg_os_object.t_object_list;
   v_object_index                 number;
   v_policy_term_id2              object.object_id%type;
   v_billing_acc_trx_set_id       object.object_id%type;
   v_responsible_billing_account  object.object_id%type;
   v_fi_trx_billing_susp_id      object.object_id%type;
   v_billing_susp_pt_id          object.object_id%type;
   v_fi_trx_processing_date      object_bv_value.business_variable_value%type;
   v_policy_trx_effective_date   object_bv_value.business_variable_value%type;
   v_suspended_by                object_bv_value.business_variable_value%type;
   v_resumed_by                  object_bv_value.business_variable_value%type;
begin


     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          pkg_db_functions.gObjType_PolicyTerm,
          v_object_list,
          pkg_db_functions.gbv_PolicyTerm_EffDate ---sort the v_object_list by term effective date
     );
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     --
     --     Get the current policy term to be suspended.
     --

     v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_id
                              );

  if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term to be marked as suspend billing is ' || v_policy_term_id );
  end if;
  

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term suspension status is set to ' || g_pol_term_ba_susp );
  end if;

--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
  --
  --     Get the value of the suspension fields
  --
  v_susp_Stop_All := pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      nvl(in_action_object_id,in_suspension_obj_id),
                      gbv_Susp_Stop_All
                     );
   v_susp_Stop_All_Billing := pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      nvl(in_action_object_id,in_suspension_obj_id),
                      gbv_Susp_Stop_All_Billing
                     );

--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start


  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    nvl(in_action_object_id,in_suspension_obj_id), -- Suspension object id
    gbv_PolSusp_RefCurrSuspPolTerm,--_Reference_Current Suspended Term ,
    v_policy_term_id
  );
 
  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_policy_term_id,
    gbv_PolicyTerm_RefCurrSusp,--_Reference_Term Current Suspension ,
    nvl(in_action_object_id,in_suspension_obj_id) -- Suspension object id
  );
--OSPRODUCT-27925 If only single term then collect here
     if v_object_list.count = 1 
     then
          
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,'Policy is having single term only');
          g_policy_term_cache.extend();
          g_policy_term_cache(g_policy_term_cache.count)  :=  v_policy_term_id;  --collecting all terms
     
     end if;
   
-- PMADEV-550 End
 --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
                if v_object_list.count > 1
               then
                    v_object_index := v_object_list.first;
                    while v_object_index is not null loop
                            v_policy_term_id2   :=    pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_object_list(v_object_index), 211343); -- Policy Term ObjectID

                                 pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_term_id2,
                                   gbv_PolicyTerm_RefCurrSusp,--_Reference_Term Current Suspension ,
                                   nvl(in_action_object_id,in_suspension_obj_id) -- Suspension object id
                              );
                              --OSPRODUCT-27925
                              g_policy_term_cache.extend;
                              g_policy_term_cache(g_policy_term_cache.count)  :=  v_policy_term_id2;--collecting all terms                                 
          --               end if;
                      v_object_index := v_object_list.next(v_object_index);
                    end loop;
               end if;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
  --
  --- update the datamart for this policy term and policy
  --

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_policy_term_id, v_datamart_tf);

     FOR fitem IN (
         select
               d.fitem_id
          from
               dragon_fitem d
          where
               d.policy_id=in_policy_id --OSPRODUCT-12033
               and  
               d.policy_term_id = v_policy_term_id
         )
         loop
             pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, fitem.fitem_id, v_datamart_tf );
         end loop;

     if v_session_control.gLogging_Full then
         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Policy term datamart updated ' );
  end if;

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_policy_id, v_datamart_tf);

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Policy datamart updated ' );
  end if;

     --
     -- Create PolicyTransaction  object under this Policy
     --

  pkg_os_object.sp_object_create
  (
    in_session_id,
    in_transaction_id,
    gObjType_PolicyTransaction,--- PolicyTransaction object type id
    in_policy_id,
    v_new_policytrxn_id
  );

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Policy Transaction Id is : '||v_new_policytrxn_id
          );
     end if;



     --
     -- Set the BV's of the PolicyTransaction Object
     --

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    gbv_PolicyTransactionType, -- Transaction Type
    g_PolicyTrxType_SuspBilling
  );

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    PKG_DB_STMT.gbv_PolicyTrx_EffDate, --PolicyTransaction - Date - Transaction Effective Date
    g_suspension_date
  );

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    gbv_PolicyTransactionComments,
    pkg_os_lookup.fn_lookup_list_text_get(50158 , -- Transaction Type list
                                          g_PolicyTrxType_SuspBilling
                                         )
  );

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    PKG_DB_STMT.gbv_PolicyTrx_ProcessDate,--PolicyTransaction - Date - Transaction Process Date
    to_char(sysdate, pkg_os_constant.DragonDateFormatDefault)--g_suspension_date
  );

  pkg_os_object_io.sp_object_bv_set
  (
     in_session_id,
     in_transaction_id,
     v_new_policytrxn_id, -- policy trxn id
     gbv_PolicyTrx_RefAssocSusp, -- PolicyTransaction - Reference_Associated Suspension
     nvl(in_action_object_id,in_suspension_obj_id)
  );

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Policy transaction type is set to suspend billing transaction');
     end if;

 -- 2017-03-08 Cheryl osbilling-3906 move the set of the status
 --            to after the initialize because it sets the status to 34902 there
  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    gGeneric_object_status, -- Transaction Type
    106-- set the status to processed
  );

    if v_session_control.gLogging_Full then
         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
              '|||||| New Policy transaction status is set to processed');
    end if;

    --OSBILLING-3141 set the common refrences on policy transaction

    pkg_os_policy_transaction.sp_policytx_initialize
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id,
          pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_new_policytrxn_id, pkg_os_constant_bv.gbv_PolicyTranType )
     );


      if v_session_control.gLogging_Full
    then
      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
        --
        '|||||| Renumbering policy transactions...'
        );
    end if;

    pkg_cs_post_nb.sp_renumber_plcytrx ( in_session_id, in_transaction_id,
       --
       in_policy_id
    );
     
     ------------------------------------------------------------
     -----Create PT image reading PD transaction type Table ----OSPRODUCT-12839
     ------------------------------------------------------------
     
     pkg_os_policy_image.sp_policy_image_create
     (
          in_session_id,
          in_transaction_id,
          null,
          v_new_policytrxn_id,
          io_action_outcome_id
     );
     
     
    ------------------------------------------------------------
     --osproduct-606 start policy suspend
    ------------------------------------------------------------
     if in_action_object_type_id = gobjtype_policysuspension then 
     --calculating teh BA under which new BATS will be craeted.
     begin
     select 
        responsible_billing_account 
	 into
		v_responsible_billing_account 
	 from 
		dragon_policy
	 where
		policy_id=in_policy_id;
     exception
     when no_data_found then
     v_responsible_billing_account :=  pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_policy_id,
                                          PKG_DB_ACTION_BILLING.gbv_responsible_billingacct_id --33887946 Policy_Reference_Responsible Billing Account(Calc)
                                      );
     end;
      -- create BATS under this Billing ACcount  
      pkg_db_object.sp_billingacounttrxset_create
             (
                  in_session_id,
                  in_transaction_id,
                  v_responsible_billing_account,
                  g_PolicyTrxType_SuspBilling,
                  101,
                  v_billing_acc_trx_set_id
             );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Created BillingAccountTransactionSet.. Batch Object ID: ' ||
               v_billing_acc_trx_set_id
          );
     end if;

     -- set the BV's
     --
     -- 31866546PolicyTransaction - xReference - _Reference_Associated BillingAccountTransactionSet
     --
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_policytrxn_id, 
               pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,--31866546
               v_billing_acc_trx_set_id
          );
    --
    -- 32502146BillingAccountTransactionSet - xReference - _Reference_Associated Policy Transaction
    --
    pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id, 
               32502146,--
               v_new_policytrxn_id
          );
    --
    -- Create FiTransaction Object under the new BATS
    --
    pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billing_acc_trx_set_id,
               in_fitrx_ref_billing_account    =>  v_responsible_billing_account,
               out_fitransaction_id            =>  v_fi_trx_billing_susp_id,
               in_fitrx_type                   =>  g_PolicyTrxType_Info, -- Informational fitransaction
               in_fitrx_ref_associatedpolicy   =>  in_policy_id,
               in_fitrx_ref_associatedpoltrx   =>  v_new_policytrxn_id,
               in_fitrx_effective_date         =>  g_suspension_date,
               in_fitrx_object_state           =>  37646
          );

     if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... FITransaction ID: ' || v_fi_trx_billing_susp_id
               );

     end if;

     --
     -- Set the FITransaction Status to Processed
     --
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               pkg_os_constant_bv.gbv_GenObjObjectState,
               37646
          );

     --
     -- Set the Processing Date for Withdrawal FI Transaction to Current Date
     --
     v_fi_trx_processing_date :=   to_char
                                        (
                                             pkg_os_time.fn_os_sysdate
                                             (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fi_trx_billing_susp_id
                                             ),
                                        pkg_os_constant.DragonDateFormatDefault
                                        );

     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               29708446,
               v_fi_trx_processing_date
          );

     --
     -- Update the FITransaction Datamart for the Withdrawal Date update transaction
     --
     pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               v_datamart_tf
          );

     pkg_db_object.sp_billingacounttrxset_process
         (
              in_session_id,
              in_transaction_id,
              v_billing_acc_trx_set_id,
              g_PolicyTrxType_ResumeBilling
         );

     pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id,
               v_datamart_tf
          );
          
     --LXPRODUCT-153
     --Call to Document Processing
     pkg_db_object.sp_billing_doc_processing
     (
          in_session_id,
          in_transaction_id,
          v_billing_acc_trx_set_id,    
          io_action_outcome_id
     );
          
     pkg_os_datamart.sp_datamart_update_row
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id,
          v_datamart_tf
     );
     --
     -- osproduct-3492 (set BV 32851048 Susp_Reference_Associated Suspension BATS)
     --
      pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_Susp_associated_susp_bats,
               v_billing_acc_trx_set_id
          );
     --
     -- osproduct-3492 (set BV 32851248	Susp_Reference_Suspended By)
     --    
      v_suspended_by := pkg_os_object_io.fn_object_bv_path_get
                       (
                            in_session_id,
                            in_transaction_id,
                            in_action_object_id,
                            '210356.210086'
                      );
      pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_Susp_suspended_by,
               v_suspended_by
          );

     pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_datamart_tf
          );

      end if;
    ------------------------------------------------------------
    --osproduct-606 end policy suspend
    ------------------------------------------------------------
     
     ------------------------------------------------------------
     -----Create Exoskeleton for PT ----OSPRODUCT-12839
     ------------------------------------------------------------
     
     pkg_os_dxf_exoskeleton.sp_setup_exoskeleton_structure
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id,
          io_action_outcome_id
     );     

     --
     -- update the datamart for this policy transaction
     --

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_policytrxn_id, v_datamart_tf);
  -- Note: this won't work if called from sp_suspend_billing_account as in_action_object_id is passed as null
     --
     -- Email Customer about the suspended policy
     --
     -- UTPRODUCT-4986 Starts. 
     -- Commented the  code for email generation 
     /*
     sp_email_customer
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id
     );
     */
     -- UTPRODUCT-4986 Ends.
	  
     if nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_new_policytrxn_id ,gbv_PolicyTrx_RefCoverages),pkg_db_multipayer.gbv_MultiPayerEnabled_PTP),2) = 1  --OSPRODUCT-13728
     then       
             pkg_db_multipayer.ptppayer_datamart_refresh  --OSPRODUCT-13728
             (
                  in_session_id,
                  in_transaction_id,
                  v_new_policytrxn_id,
                  io_action_outcome_id
             );
     end if;

     if in_action_object_type_id = gobjtype_policysuspension
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

exception when others then
  if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
      '...... An error occured in the suspension process'
      ||SQLERRM);
  end if;

  if in_action_object_type_id = gobjtype_policysuspension then
   io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
  end if;

end sp_suspend_policy;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_suspend_billing_account
--
--   %USAGE
--        This procedure will be used to mark BillingAccount and related policies as suspended.
--
--
--   %ALGORITHM
--          1. Fetch the current active policies related to the billing account.
--          2. Call procedure sp_suspend_policy to mark related policies as supeneded.
--          3. Update the status to suspened and update the related datamart.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_billing_account_id         BillingAccount id
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_suspend_billing_account
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     in_billing_account_id         in        object.object_id%type,
     in_action_object_type_id      in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as
     v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'sp_suspend_billing_account';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                 char   := 'T';
     v_billing_acc_status          object_bv_value.business_variable_value%type;
	 v_billing_acc_susp_trx        object_bv_value.business_variable_value%type;
     v_policy_current_term             object.object_id%type;

	 --OSBILLING-7275 start
     v_billing_acc_trx_set_id      object.object_id%type;
     v_fi_trx_billing_susp_id      object.object_id%type;
     v_billing_susp_pt_id          object.object_id%type;
     v_fi_trx_processing_date      object_bv_value.business_variable_value%type;
     v_policy_trx_effective_date   object_bv_value.business_variable_value%type;
     --OSBILLING-7275 end
     --osproduct-2013
     v_object_copy_excluded_types   pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types   pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list             pkg_os_object_copy.t_object_list;
     v_object_copy_counter          number :=1;
     v_copied_PolSusp_object_id     object.object_id%type;
     v_suspended_by                 object_bv_value.business_variable_value%type;
begin

     --
     --     Get the current status of the billing account id.
     --
     v_billing_acc_status     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billing_account_id,
                                        gbv_BillAcc_Status  -- 210153 Generic Object State
                                   );
     v_billing_acc_susp_trx   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        gbv_Suspension_Trx  --Suspended transactions Bv at suspension level
                                   );

     --OSBILLING-7275 start

	 --OSBILLING-7620 start
     pkg_db_object.sp_billingacounttrxset_create
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          g_PolicyTrxType_SuspBilling,
          101,
          v_billing_acc_trx_set_id
     );
     --
     -- osproduct-3492 (set BV  32851048 Susp_Reference_Associated Suspension BATS )
     --
       pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_Susp_associated_susp_bats,
               v_billing_acc_trx_set_id
          );
     --
     -- osproduct-3492 (set BV  32851248	Susp_Reference_Suspended By )
     --
     v_suspended_by := pkg_os_object_io.fn_object_bv_path_get
                       (
                            in_session_id,
                            in_transaction_id,
                            in_action_object_id,
                            '210356.210086'
                      );
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_Susp_suspended_by,
               v_suspended_by
          );                 

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Created BillingAccountTransactionSet.. Batch Object ID: ' ||
               v_billing_acc_trx_set_id
          );

     end if;
     --OSBILLING-7620 end

	 --
     -- Open cursor to get the billing account id.
     --
     for r_policy in billaccount_policy_cur(in_billing_account_id)
     loop

          if billaccount_policy_cur%NOTFOUND
          then

               Raise_application_error( -20050, 'Error: No data found ' );

          end if;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing account has got : '
                    || billaccount_policy_cur%rowcount
                    ||' policies for suspending'
               );

          end if;

		  --OSBILLING-7275 start
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Policy id  : '
                    || r_policy.policy_id
                    ||' sent for supending'
               );
          end if;
          --OSBILLING-7275 end

          --
          -- Call procedure to mark each of the policy as suspend.
          --

          sp_suspend_policy
          (
               in_session_id,
               in_transaction_id,
               null,
               r_policy.policy_id,
               in_action_object_id,
               in_action_object_type_id,
               io_action_outcome_id
          );


	  --OSBILLING-7275 start
          -- Get the billing suspension policy transaction created for the policy
          v_billing_susp_pt_id :=  pkg_os_object_search.fn_object_with_attribute_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        r_policy.policy_id,
                                        pkg_os_constant.gobjType_PolicyTransaction,
                                        gbv_PolicyTrx_RefAssocSusp,
                                        in_action_object_id
                                   );
          v_policy_trx_effective_date :=pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              v_billing_susp_pt_id,
                                              pkg_os_constant_bv.gbv_PolicyTranEffectiveDate
                                        );
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Suspension PT Id:' || v_billing_susp_pt_id ||
                    '... Transaction effective date: ' || v_policy_trx_effective_date
               );

          end if;

          -- Update associated BATS ID on the PT
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_susp_pt_id, -- policy trxn id
               pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,
               v_billing_acc_trx_set_id
          );

		  --OSBILLING 7458 start, Set the reference from BATS to PT for Suspension
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id,
               pkg_db_late_process.gbv_BillingAccTrxSetRefPolTxn,  --BATS to PT reference
               v_billing_susp_pt_id
          );
          --OSBILLING 7458 end

          -- Create a FITransaction
          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billing_acc_trx_set_id,
               in_fitrx_ref_billing_account    =>  in_billing_account_id,
               out_fitransaction_id            =>  v_fi_trx_billing_susp_id,
               in_fitrx_type                   =>  g_PolicyTrxType_Info, -- Informational fitransaction
               in_fitrx_ref_associatedpolicy   =>  r_policy.policy_id,
               in_fitrx_ref_associatedpoltrx   =>  v_billing_susp_pt_id,
               in_fitrx_effective_date         =>  v_policy_trx_effective_date,
               in_fitrx_object_state           =>  37646
          );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... FITransaction ID: ' || v_fi_trx_billing_susp_id
               );

          end if;

          --
          -- Set the FITransaction Status to Processed
          --
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               pkg_os_constant_bv.gbv_GenObjObjectState,
               37646
          );

           --
          -- Set the Processing Date for Withdrawal FI Transaction to Current Date
          --
          v_fi_trx_processing_date :=   to_char
                                        (
                                             pkg_os_time.fn_os_sysdate
                                             (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fi_trx_billing_susp_id
                                             ),
                                        pkg_os_constant.DragonDateFormatDefault
                                        );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               29708446,
               v_fi_trx_processing_date
          );

          --
          -- Update the FITransaction Datamart for the Withdrawal Date update transaction
          --
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_susp_id,
               v_datamart_tf
          );


          --OSBILLING-7275 end

	 v_policy_current_term:=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        r_policy.policy_id,
                                        gbv_CurrentTermFromRolledDate  --_Reference_Current Term based on Rolled Date
                                   );
           --6624 Setting the suspended Bv at Billing Account Suspension level to Polic Term too.
         pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_policy_current_term,
               gbv_PolicyTerm_SuspTrx,
               v_billing_acc_susp_trx ---setting suspended trx at policy term level
          );
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Policy id  : '
                    || r_policy.policy_id
                    ||' sent for supending'
               );
	  pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Suspension transcations activity id''s- '||v_billing_acc_susp_trx||' are set for Policy Term  : '
                    || v_policy_current_term ||' for policy : '|| r_policy.policy_id
                    ||' sent for supending'
               );
                 pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing account Suspension Object  '||in_action_object_id||' to be copied and Policy Suspension object should be created'
               );
          end if;
 end loop;


   --OSBILLING-7620 start     

     pkg_db_object.sp_billingacounttrxset_process
     (
          in_session_id,
          in_transaction_id,
          v_billing_acc_trx_set_id,
          g_PolicyTrxType_SuspBilling
     );

     --OSBILLING-7620 end
          
     --LXPRODUCT-153
     --Call to Document Processing
     pkg_db_object.sp_billing_doc_processing
     (
          in_session_id,
          in_transaction_id,
          v_billing_acc_trx_set_id,    
          io_action_outcome_id
     );

     if v_billing_acc_status = gBillingAcStatus_Active then

          --
          --     Set the status as suspeneded.
          --
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               gbv_BillAcc_Status,
               37346 ---v_billing_acc_susp_status
          );



     else

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing Account Status is : '
                    || v_billing_acc_status
                    ||'for Billing Account Id:'
                    ||in_billing_account_id
               );

          end if;

     end if;
         --
          -- Set Current Suspension Referercne from BA to this suspension--OSBILLING-3498
          --
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               gbv_BillAcc_CurrSuspension,
               in_action_object_id
          );

          --
          --     Add the BillingAccount record to Datamart
          --
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               v_datamart_tf
          );
     if in_action_object_type_id = gobjtype_billaccsuspension
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;

exception
when NO_DATA_FOUND
then

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '||||||| There are no associated active policies with the billing account id  ::'||in_billing_account_id
          ||SQLERRM||dbms_utility.format_error_backtrace
     );

     if in_action_object_type_id = gobjtype_billaccsuspension
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

     end if;

when others
then

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...... There is some error continuing with suspension. Please have a look at the suspension object ::'||in_action_object_id
          ||SQLERRM||dbms_utility.format_error_backtrace
     );

     io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

end sp_suspend_billing_account;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_suspend_exchange
--
--   %USAGE
--        This procedure will be used to mark BillingAccount and related policies as suspended.
--          This will be used to suspend multiple billing account and their related policies.
--
--
--   %ALGORITHM
--          1. Get the cursor to get the billing accounts to suspend the billing accounts.
--          2. Call procedure sp_suspend_billing_account to mark related BA's and related policies as suspend.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_suspend_exchange
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     in_action_object_type_id          in          object.object_id%type,
     io_action_outcome_id          in out     outcome.outcome_id%type
)
as
     v_procedure_name                       constant system_log.program_name%type     :=pkg_name|| 'sp_suspend_exchange';
     v_session_control                        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_billing_account_id               object.object_id%type;
     type v_ref_cursor is REF CURSOR;
     src_cur                               v_ref_cursor;
     TYPE array_t IS TABLE OF number(38) INDEX BY BINARY_INTEGER;     --OSPRODUCT-1446,modified size
     rec_array                          array_t;

begin


     --
     -- Open cursor to get the billing account id.
     --
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          '||||| Fetching records for suspension.');

     end if;
     sp_exchange_query_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               src_cur
          );

     fetch src_cur bulk collect into rec_array;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          '||||| Query has fetched records:::::'||src_cur%rowcount);

     end if;

     close src_cur;

     for i in 1 .. rec_array.count
     loop
          --if v_billing_acc_status = gBillingAcStatus_Active and v_in_object_type != 24 then
          v_billing_account_id := rec_array(i);

          sp_suspend_billing_account
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_billing_account_id,
                    in_action_object_type_id,
                    io_action_outcome_id
               );

     end loop;

     if in_action_object_type_id = gobjtype_exchsuspension
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
          '...... Some error occured while supending the billing account '||v_billing_account_id || ' and related policies.'
          ||SQLERRM||dbms_utility.format_error_backtrace);

     end if;

     if in_action_object_type_id = gobjtype_exchsuspension
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
     end if;

end sp_suspend_exchange;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_db_suspension
--
--   %USAGE
--        This procedure is the main wrapper procedure that will call teh related suspension procedure.
--
--
--   %ALGORITHM
--          1. Check the object type of the input suspension type.
--          2. Call the related procedure in case manual suspension.
--        3. Mark the supension object to be suspend later in case its suspension date is not for today.
--          4. Update the status of the suspension object and related datamart.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_db_suspension
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as
     v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'sp_db_suspension';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                      char   := 'T';
     v_parent_object_id                 object.object_id%type;
     v_in_object_type                   object.object_id%type;
     v_current_later                    char(1);
     v_suspension_date                  object_bv_value.business_variable_value%type;
     v_current_date                     date;
     v_susp_child_list                  pkg_os_object.t_object_list;
     v_susp_child_list_index            number;
     v_susp_objectState                 object_state.object_state_id%type;
	v_policy_term_id                   object.object_id%type; -- 13161

begin

     --
     --     Get the object type of the suspension object type.
     --
     if v_session_control.gLogging_Full
     then
		 pkg_os_logging.sp_log
		 (
			  in_session_id,
			  in_transaction_id,
			  v_procedure_name,
			  '............ Start of sp_db_suspension'
		 );
	 end if;

     v_in_object_type := pkg_os_object.fn_object_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id
                         );
     --
     --     Get the parent of the in_action_object id as that will decide the level of suspension.
     --

     v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

      pkg_os_datamart.sp_datamart_update_row
					  (
							in_session_id,
							in_transaction_id,
							in_action_object_id,
							v_datamart_tf
					  );

	  if v_in_object_type = gObjType_BillAccSuspension then
		  v_current_date := pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, v_parent_object_id);
	  elsif v_in_object_type = gObjType_PolicySuspension then
		  v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, v_parent_object_id);
	  elsif v_in_object_type = gObjType_ExchSuspension then
		  v_current_date := pkg_db_functions.fn_get_exchange_current_date(in_session_id, in_transaction_id, v_parent_object_id);
	  end if;
     -- OSPRODUCT-27925
     g_policy_term_cache.delete; -- Emptying the policy term cache list
     --
     -- Read the suspension Object.
     --
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Reading the suspension object id ' || in_action_object_id ||
               ' Suspension Type:' || v_in_object_type);

     end if;

     v_suspension_date := pkg_os_object_io.fn_object_bv_get
						   (
								in_session_id,
								in_transaction_id,
								in_action_object_id,
								gbv_Suspension_Eff_Date  -- Policty term status BV
						   );

     /*g_suspension_date     := to_char(
                    trunc(
                      to_date(
                        v_suspension_date,
                        pkg_os_constant.DragonDateFormatDefault
                      )
                    ),
                    pkg_os_constant.DragonDateFormatDefault
                    );*/

     g_suspension_date  := to_char(
									  to_date(
												v_suspension_date,
												pkg_os_constant.DragonDateFormatDefault
									          )
								   ,
									pkg_os_constant.DragonDateFormatDefault
								  );

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Reading the suspension object id ' || in_action_object_id ||
               ' g_suspension_date:' || g_suspension_date);

     end if;

/*  g_resume_date := to_char(
                trunc(
                  to_date(
                   pkg_os_object_io.fn_object_bv_get
                   (
                     in_session_id,
                     in_transaction_id,
                     in_action_object_id,
                     gbv_Suspension_Exp_Date
                   ),
                   pkg_os_constant.DragonDateFormatDefault
                  )
                ),
                pkg_os_constant.DragonDateFormatDefault);*/
     g_resume_date := to_char(
						  to_date(
						   pkg_os_object_io.fn_object_bv_get
						   (
							 in_session_id,
							 in_transaction_id,
							 in_action_object_id,
							 gbv_Suspension_Exp_Date
						   ),
						   pkg_os_constant.DragonDateFormatDefault
						  )
                        ,
                      pkg_os_constant.DragonDateFormatDefault);


     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Reading the suspension object id ' || in_action_object_id ||
               ' g_resume_date:' || g_resume_date);

     end if;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Reading the suspension object id ' || in_action_object_id ||
               ' v_suspension_date:' || v_suspension_date);
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Reading the suspension object id ' || in_action_object_id ||
               ' v_current_date:' || v_current_date);

     end if;

     if trunc(to_date(v_suspension_date,pkg_os_constant.DragonDateFormatDefault)) <= trunc(v_current_date)
     then
          v_current_later :='C'; -- Flag for current suspension
               if v_session_control.gLogging_Full
               then

                     pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '|||||| Suspension Object is marked for suspension now.' );

               end if;
          elsif
               trunc(to_date(v_suspension_date,pkg_os_constant.DragonDateFormatDefault)) > trunc(v_current_date)
          then
               v_current_later :='L'; -- Flag for later suspension

     end if;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| v_current_later: ' || v_current_later);

     end if;
    --osproduct-2013
    --Whether the suspension is C or L, suspend it.
     if v_current_later = 'C' or v_current_later = 'L' then
          if v_in_object_type = gObjType_PolicySuspension
          then
               sp_suspend_policy
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,
                         v_parent_object_id,
                         null,
                         v_in_object_type,
                         io_action_outcome_id
                    );

           elsif v_in_object_type = gObjType_BillAccSuspension
           then
                         sp_suspend_billing_account
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   v_parent_object_id,
                                   v_in_object_type,
                                   io_action_outcome_id
                              );
           elsif v_in_object_type = gObjType_ExchSuspension
           then
                         sp_suspend_exchange
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   v_in_object_type,
                                   io_action_outcome_id
                              );
          end if;
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          --
          -- Changing Object State to Billing Suspended
          --

          pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    54346
               );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '|||||| Object state for the suspension object '|| in_action_object_id
                    ||' is changed to Suspend billing ' );

          end if;
          --
          --- Updating corresponding datamart
          --

          pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_datamart_tf
               );

         --OSPRODUCT-27925
        
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '.....Term count:..  '|| g_policy_term_cache.count );

          end if;
          
          if g_policy_term_cache.count > 0
          then
               
               for v_index in g_policy_term_cache.first .. g_policy_term_cache.last
               loop
                    
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, g_policy_term_cache(v_index), v_datamart_tf);
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                              '.....Datamart updated for the term ID: '||  g_policy_term_cache(v_index) );
                    end if;
                    
               end loop;
               
          end if;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '|||||| Suspension object datamart updated');

          end if;
		  
     end if;

     --
     -- Code to delete the suspension objects that are in created state.
     --
     if v_in_object_type = gObjType_PolicySuspension 
     then
              pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_parent_object_id ,
                            gObjType_PolicySuspension,--3193646
                            v_susp_child_list
                       );

    elsif  v_in_object_type = gObjType_BillAccSuspension  
    then
               pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_parent_object_id ,
                            gObjType_BillAccSuspension,
                            v_susp_child_list
                       );
    end if;       
    if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '|||||| Suspension object count: '||v_susp_child_list.count);

    end if;
    v_susp_child_list_index := v_susp_child_list.first;

     while v_susp_child_list_index is not null
     loop
             v_susp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_susp_child_list(v_susp_child_list_index),
                                          gbv_GenericObj_ObjectState
                                        );
			 if v_session_control.gLogging_Full
			 then

					   pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
							'|||||| Suspension object state: '||v_susp_objectState||
							'..of object : '||v_susp_child_list(v_susp_child_list_index));

			 end if;

			 if v_susp_objectState = 23 
			 then
				 if v_session_control.gLogging_Full 
				 then

						pkg_os_logging.sp_log
						(
							 in_session_id,
							 in_transaction_id,
							 v_procedure_name,
							 'Deleeting object: '||v_susp_child_list(v_susp_child_list_index)||
							 ' as it in in generic craeted state '
						 );
				 end if;
				 pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, null, v_susp_child_list(v_susp_child_list_index), null);
						  pkg_os_datamart.sp_datamart_update_row
					   (
							in_session_id,
							in_transaction_id,
							v_susp_child_list(v_susp_child_list_index),
							v_datamart_tf
					   );
			  end if;
			  v_susp_child_list_index := v_susp_child_list.next(v_susp_child_list_index);

     end loop;   

	if v_in_object_type = gObjType_PolicySuspension --OSPRODUCT-13161  
     then
	
          --Call to Update Billplan datamart                         
          sp_policy_billplan_update(in_session_id,in_transaction_id,v_parent_object_id);
		
     elsif v_in_object_type =  gObjType_BillAccSuspension 
     then
          
          for r_policy in billaccount_policy_cur(v_parent_object_id)
          loop
            
                  if billaccount_policy_cur%NOTFOUND
                  then
            
                       Raise_application_error( -20050, 'Error: No data found ' );
            
                  end if;
                  
                  v_policy_term_id := pkg_db_functions.fn_get_policy_current_term(in_session_id,in_transaction_id,r_policy.policy_id);
                   
                  sp_policy_billplan_update(in_session_id,in_transaction_id,v_policy_term_id);     
                 
          end loop;
 
     end if;
	
exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
          '...... There is some error in suspending billing account and related policies.'
          ||SQLERRM||dbms_utility.format_error_backtrace);

     end if;

          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

end sp_db_suspension;
----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_resume_policy
--
--   %USAGE
--        This procedure will be used to mark policy as resume/active.
--          This procedure will get the current policy term that is suspended and then will mark it as active.
--
--
--   %ALGORITHM
--          1. Fetch the current suspended policy term.
--          2. Mark it as active.
--          3. Create a new policy transaction as Resume Billing.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_resume_policy
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     in_action_object_type_id      in        object.object_id%type, 
     io_action_outcome_id          in out    outcome.outcome_id%type,
     in_object_list                in        pkg_os_object.t_object_list default cast(null as pkg_os_object.t_object_list), --osproduct-3492
     in_current_date               in        date default null
)
as
  v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'sp_resume_policy';
  v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_datamart_tf                 char   := 'T';
  v_pol_term_susp_status     object_bv_value.business_variable_value%type;
  v_parent_object_id            object.object_id%type;
  v_policy_term_id              object.object_id%type;
  v_new_policytrxn_id                        object.object_id%type;
  v_susp_activity_num           number;

     --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
       v_object_list                  pkg_os_object.t_object_list;
       v_object_index                 number;
       v_policy_term_id2              object.object_id%type;
    --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
       v_billing_acc_trx_set_id      object.object_id%type;
       v_fi_trx_billing_resume_id    object.object_id%type;
       v_billing_resume_pt_id        object.object_id%type;
       v_responsible_billing_account object.object_id%type;
       v_fi_trx_processing_date      object_bv_value.business_variable_value%type;
       v_policy_trx_effective_date   object_bv_value.business_variable_value%type;
       in_object_list_index          number;
       v_resumed_by                  object_bv_value.business_variable_value%type;
       v_current_date                date;


begin
     --
     --     Get the current policy term to be suspended.
     --

     --     v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
     --                              (
     --                                   in_session_id,
     --                                   in_transaction_id,
     --                                   in_action_object_id
     --                              );
     --
     --  if v_session_control.gLogging_Full then
     --          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
     --               '|||||| Current policy term to be marked to status resume billing is ' || v_policy_term_id );
     --  end if;

     --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     -- Get the PolicyTerm objects under the policy sorted by effective date
     -- comenting it as part of OSPRODUCT-2499
        /*  pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               pkg_db_functions.gObjType_PolicyTerm,
               v_object_list,
               pkg_db_functions.gbv_PolicyTerm_EffDate ---sort the v_object_list by term effective date
          );

  v_pol_term_susp_status := pkg_os_object_io.fn_object_bv_get
                              (
                                in_session_id,
                                in_transaction_id,
                                v_policy_term_id,
                                gbv_PolicyTerm_Susp_Status
                              );

  if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term suspension status is  ' || v_pol_term_susp_status );
  end if;
*/


     if in_current_date is null 
          then 
               v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_action_object_id);
     else 
               v_current_date := in_current_date;
     end if;
     if v_session_control.gLogging_Full
          then
              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
              '...... v_current_date : '||v_current_date);
     end if;
     --
     -- Create PolicyTransaction  object under this Policy
     --
     pkg_os_object.sp_object_create
    (
         in_session_id,
         in_transaction_id,
         PKG_DB_STMT.gObjType_PolicyTransaction,--- PolicyTransaction object type id
         in_action_object_id,
         v_new_policytrxn_id
    );

     if v_session_control.gLogging_Full
          then
              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
              '...... Policy Transaction Id is : '||v_new_policytrxn_id);
     end if;

  --
  -- Set the BV's of the PolicyTransaction Object
  --

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    PKG_DB_STMT.gbv_PolicyTransactionType, -- Transaction Type
    g_PolicyTrxType_ResumeBilling
  );

      pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id, -- policy trxn id
          gbv_PolicyTransactionComments,
          pkg_os_lookup.fn_lookup_list_text_get(50158 , -- Transaction Type list
                                               g_PolicyTrxType_ResumeBilling)

      ); 

     pkg_os_object_io.sp_object_bv_set
     (  
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id, -- policy trxn id
          PKG_DB_STMT.gbv_PolicyTrx_EffDate, --PolicyTransaction - Date - Transaction Effective Date
          nvl(g_resume_date,to_char(v_current_date, pkg_os_constant.DragonDateFormatDefault))
     );

  pkg_os_object_io.sp_object_bv_set
  (
    in_session_id,
    in_transaction_id,
    v_new_policytrxn_id, -- policy trxn id
    PKG_DB_STMT.gbv_PolicyTrx_ProcessDate,--PolicyTransaction - Date - Transaction Process Date
    to_char(sysdate, pkg_os_constant.DragonDateFormatDefault)--g_resume_date
  );

  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
      '|||||| Policy transaction type is set to Resume billing transaction');
  end if;
  

  --OSBILLING-3141 set the common refrences on policy transaction

    pkg_os_policy_transaction.sp_policytx_initialize
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id,
          pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_new_policytrxn_id, pkg_os_constant_bv.gbv_PolicyTranType )
     );
     
     ------------------------------------------------------------
     -----Create PT image reading PD transaction type Table ----OSPRODUCT-12839
     ------------------------------------------------------------
     
     pkg_os_policy_image.sp_policy_image_create
     (
          in_session_id,
          in_transaction_id,
          null,
          v_new_policytrxn_id,
          io_action_outcome_id
     );
         

     if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Renumbering policy transactions...'
               );
     end if;

      pkg_cs_post_nb.sp_renumber_plcytrx 
      ( 
          in_session_id,
          in_transaction_id,
          in_action_object_id
     );
    ------------------------------------------------------------
     --osproduct-606 start policy resume
    ------------------------------------------------------------
     if   in_action_object_type_id = gobjtype_policysuspension 
          then
               --calculating teh BA under which new BATS will be craeted.
               begin
                    select 
                         responsible_billing_account 
                    into
                         v_responsible_billing_account 
                    from 
                         dragon_policy
                    where
                         policy_id=in_action_object_id;
                    exception

                    when no_data_found then

                    v_responsible_billing_account :=  pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_action_object_id,
                                                            PKG_DB_ACTION_BILLING.gbv_responsible_billingacct_id --33887946 Policy_Reference_Responsible Billing Account(Calc)
                                                       );
               end;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Responsible BA: ' ||v_responsible_billing_account||
               '..for action object id: '||in_action_object_id
          );
     end if;  
      -- create BATS under this Billing ACcount  
     pkg_db_object.sp_billingacounttrxset_create
             (
                  in_session_id,
                  in_transaction_id,
                  v_responsible_billing_account,
                  g_PolicyTrxType_ResumeBilling,
                  101,
                  v_billing_acc_trx_set_id
             );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Created BillingAccountTransactionSet.. Batch Object ID: ' ||
               v_billing_acc_trx_set_id
          );
     end if;

     -- set the BV's
     --
     -- 31866546PolicyTransaction - xReference - _Reference_Associated BillingAccountTransactionSet
     --
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_policytrxn_id, 
               pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,--31866546
               v_billing_acc_trx_set_id
          );
     --
     -- 32502146BillingAccountTransactionSet - xReference - _Reference_Associated Policy Transaction
     --
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id, 
               32502146,--
               v_new_policytrxn_id
          );
     --
     -- Create FiTransaction Object under the new BATS
     --
     pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billing_acc_trx_set_id,
               in_fitrx_ref_billing_account    =>  v_responsible_billing_account,
               out_fitransaction_id            =>  v_fi_trx_billing_resume_id,
               in_fitrx_type                   =>  g_PolicyTrxType_Info, -- Informational fitransaction
               in_fitrx_ref_associatedpolicy   =>  in_action_object_id,
               in_fitrx_ref_associatedpoltrx   =>  v_new_policytrxn_id,
               in_fitrx_effective_date         =>  g_resume_date,
               in_fitrx_object_state           =>  37646
          );

     if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... FITransaction ID: ' || v_fi_trx_billing_resume_id
               );

     end if;

     --
     -- Set the FITransaction Status to Processed
     --
     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               pkg_os_constant_bv.gbv_GenObjObjectState,
               37646
          );

     --
     -- Set the Processing Date for Withdrawal FI Transaction to Current Date
     --
     v_fi_trx_processing_date :=   to_char
                                        (
                                             pkg_os_time.fn_os_sysdate
                                             (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fi_trx_billing_resume_id
                                             ),
                                        pkg_os_constant.DragonDateFormatDefault
                                        );

     pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               29708446,
               v_fi_trx_processing_date
          );

          --
          -- Update the FITransaction Datamart for the Withdrawal Date update transaction
          --
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               v_datamart_tf
          );

          pkg_db_object.sp_billingacounttrxset_process
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id,
               g_PolicyTrxType_ResumeBilling
          );
          
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id,
               v_datamart_tf
          );

          --LXPRODUCT-153
          --Call to Document Processing
          pkg_db_object.sp_billing_doc_processing
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id,    
               io_action_outcome_id
          );

--          pkg_os_datamart.sp_datamart_update_row
--          (
--               in_session_id,
--               in_transaction_id,
--               v_new_policytrxn_id,
--               v_datamart_tf
--          );

     --
     -- osproduct-3492 start
     -- for all the resumed objects set the BV (32851148 Susp_Reference_Associated Resume BATS)
     --
        if in_object_list.count >0 
             then
                  in_object_list_index := in_object_list.first;
                  while in_object_list_index is not null
                       loop
                       pkg_os_object_io.sp_object_bv_set
                        (
                          in_session_id,
                          in_transaction_id,
                          in_object_list(in_object_list_index),
                          gbv_Susp_associate_resume_bats,
                          v_billing_acc_trx_set_id
                        );

                        v_resumed_by := pkg_os_object_io.fn_object_bv_path_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_object_list(in_object_list_index),
                                '210356.210086'
                           );
                        pkg_os_object_io.sp_object_bv_set
                           (
                                in_session_id,
                                in_transaction_id,
                                in_object_list(in_object_list_index),
                                gbv_Susp_resumed_by,
                                v_resumed_by
                              );            
                             -- pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_object_list(in_object_list_index), v_datamart_tf);

                             update
                                  dragon_suspension
                              set
                                  RESUMED_BATS_ID = v_billing_acc_trx_set_id, 
                                  RESUMED_BY = v_resumed_by
                              where 
                                  SUSPENSION_ID =  in_object_list(in_object_list_index);

                          in_object_list_index := in_object_list.next(in_object_list_index);
                         end loop;
           end if;
           --
           -- osproduct-3492 end
           --

    end if;
    ------------------------------------------------------------
     --osproduct-606 end policy resume
    ------------------------------------------------------------
 -- OSBILLING 6624 Setting suspension Bv at policy term level back to 0 because of resuming the policy
--                     pkg_os_object_io.sp_object_bv_set
--                        (
--                          in_session_id,
--                          in_transaction_id,
--                          v_policy_term_id,
--                         gbv_PolicyTerm_SuspTrx,--suspension bv set at policy term level OSBILLING-6624
--                          0
--                        );

--      if v_object_list.count > 0
--     then
--          v_object_index := v_object_list.first;
--          while v_object_index is not null loop
--                  v_policy_term_id2   :=    pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_object_list(v_object_index), 211343); -- Policy Term ObjectID
--                     --6624  while v_susp_activity_num is not null loop (commenting all the code where activity mapping is available)
--                         pkg_os_object_io.sp_object_bv_set
--                         (
--                         in_session_id,
--                         in_transaction_id,
--                         v_policy_term_id2,
--                        gbv_PolicyTerm_SuspTrx, --6624   g_susp_act_pol_term_bv_map(v_susp_activity_num)
--                         null
--                         );
--                       --6624  v_susp_activity_num := g_susp_act_pol_term_bv_map.next(v_susp_activity_num);
--                   --6624 end loop;
--            v_object_index := v_object_list.next(v_object_index);
--          end loop;
--     end if;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     --
     -- Setting up the BV to display the value of the suspension type
     --
--     pkg_os_object_io.sp_object_bv_set
--          (
--                 in_session_id,
--                 in_transaction_id,
--                 v_policy_term_id, -- PolicyTerm id
--                 gbv_PolicyTerm_Bill_Susp_Type,
--                 null
--           );

--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
-- OSPRODUCT-2499 start THE BV IS NOT GETTING SET anyway. so commenting it.
/*      if v_object_list.count > 0
     then
          v_object_index := v_object_list.first;
          while v_object_index is not null loop
                  v_policy_term_id2   :=    pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_object_list(v_object_index), 211343); -- Policy Term ObjectID
                        pkg_os_object_io.sp_object_bv_set
                  (
                          in_session_id,
                       in_transaction_id,
                       v_policy_term_id2,
                       gbv_PolicyTerm_Bill_Susp_Type,
                       null
               );
            v_object_index := v_object_list.next(v_object_index);
          end loop;
     end if;
*/
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     for i in
     (
          select 
               policy_term_id 
          from 
               DRAGON_POLICY_TERM
          where 
               policy_id=in_action_object_id--23929184558
          and 
               trunc(POLICY_TERM_EXP_DATE)>= trunc(v_current_date)
     )
     loop
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               'updating datamart of term: '||i.policy_term_id );

     end if;

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, i.policy_term_id, v_datamart_tf );

     end loop;
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term status is marked as ' || 'Active' );

     end if;

     --
     -- Update the current suspended policy term
     --

     /*pkg_os_object_io.sp_object_bv_set
          (
                 in_session_id,
                 in_transaction_id,
                 in_action_object_id,
                 32233346,--_Reference_Current Suspended Term ,
                 v_policy_term_id
           );*/

     --
     -- update the datamart for this policy transaction, policy term and policy
     --
	
	-- OSPRODUCT-10932
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id, -- policy trxn id
          PKG_DB_STMT.gGeneric_object_status,
          106-- set the status to processed
     );

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
           '|||||| New Policy transaction status is set to processed');
     end if;
     -- end OSPRODUCT-10932
     
     ------------------------------------------------------------
     -----Create Exoskeleton for PT ----OSPRODUCT-12839
     ------------------------------------------------------------
     
     pkg_os_dxf_exoskeleton.sp_setup_exoskeleton_structure
     (
          in_session_id,
          in_transaction_id,
          v_new_policytrxn_id,
          io_action_outcome_id
     );     
     
     
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_policytrxn_id, v_datamart_tf);
     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| PolicyTransaction datamart updated ' );
  end if;

   --  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_policy_term_id, v_datamart_tf);
--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
-- comenting it as part of OSPRODUCT-2499
--      if v_object_list.count > 0
--     then
--          v_object_index := v_object_list.first;
--          while v_object_index is not null loop
--                  v_policy_term_id2   :=    pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_object_list(v_object_index), 211343); -- Policy Term ObjectID
--
--
--
--
--                  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_policy_term_id2, v_datamart_tf);
--            v_object_index := v_object_list.next(v_object_index);
--          end loop;
--     end if;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End

-- OSPRODUCT-2499 start , i dont know why we are updating dragon datamart, so comment below for now.
     /*FOR fitem IN (
         select
               d.fitem_id
          from
               dragon_fitem d
          where
               d.policy_term_id = v_policy_term_id
         )
         loop
             pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, fitem.fitem_id, v_datamart_tf );
--         end loop;

*/
-- OSPRODUCT-2499 start end

     if nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_new_policytrxn_id ,gbv_PolicyTrx_RefCoverages),pkg_db_multipayer.gbv_MultiPayerEnabled_PTP),2) = 1  --OSPRODUCT-13728
     then 
             pkg_db_multipayer.ptppayer_datamart_refresh  --OSPRODUCT-13728
             (
                  in_session_id,
                  in_transaction_id,
                  v_new_policytrxn_id,
                  io_action_outcome_id
             );
     end if;
	 
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_parent_object_id, v_datamart_tf);

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Policy datamart updated: '||v_parent_object_id );
  end if;

  
     if in_action_object_type_id = gobjtype_policysuspension then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
          '...... An error occured in the resume process'
          ||SQLERRM);

     end if;

     if in_action_object_type_id = gobjtype_policysuspension
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

end sp_resume_policy;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_resume_billing_account
--
--   %USAGE
--        This procedure will be used to mark BillingAccount and related policies as active.
--
--
--   %ALGORITHM
--          1. Fetch the current suspende policies related to the billing account.
--          2. Call procedure sp_resume_policy to mark related policies as active.
--          3. Update the status to resume and update the related datamart.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure  sp_resume_billing_account
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     in_action_object_type_id      in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type,
     in_object_list                in        pkg_os_object.t_object_list default cast(null as pkg_os_object.t_object_list) --osproduct-3492
)
as

     v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'sp_resume_billing_account';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                 char   := 'T';
     v_billing_acc_status          object_bv_value.business_variable_value%type;
     v_billing_account_id          object.object_id%type;
     v_object_list                 pkg_os_object.t_object_list;
     v_object_index                number;
     v_current_suspension_state    varchar2(100);
	 --OSBILLING-7275 start
     v_billing_acc_trx_set_id      object.object_id%type;
     v_fi_trx_billing_resume_id    object.object_id%type;
     v_billing_resume_pt_id        object.object_id%type;
     v_fi_trx_processing_date      object_bv_value.business_variable_value%type;
     v_policy_trx_effective_date   object_bv_value.business_variable_value%type;
     v_active_suspension_present   number :=0;
     --OSBILLING-7275 end
     in_object_list_index          number;
     v_resumed_by                  object_bv_value.business_variable_value%type;

begin

     --
     --     Get the current status of the billing account id.
     --
     v_billing_acc_status     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        gbv_BillAcc_Status  -- 210153 Generic Object State
                                   );

     if v_billing_acc_status = 37346 
     then
         -- is the billing account status is suspended, 
         --check the active suspensions. if no suspension exists then mark it as active
         --
         v_active_suspension_present := fn_ba_susp_active_tf         
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_action_object_id
                                        );
         if v_active_suspension_present = 0 then
          -- Set Current Suspension Referercne from BA as Null--OSBILLING-3498
          --
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_BillAcc_CurrSuspension,
               Null
          );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gbv_BillAcc_Status,
               gBillingAcStatus_Active
          );
          --
          --     Add the BillingAccount record to Datamart
          --
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_datamart_tf
          );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing Account Status is : '
                    || v_billing_acc_status
                    ||'for Billing Account Id:'
                    ||in_action_object_id
               );

          end if;
        end if;
     else

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing Account Status is : '
                    || v_billing_acc_status
                    ||'for Billing Account Id:'
                    ||in_action_object_id
               );

          end if;

     end if;



	 --OSBILLING-7620 start
	 pkg_db_object.sp_billingacounttrxset_create
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          g_PolicyTrxType_ResumeBilling,
          101,
          v_billing_acc_trx_set_id
     );

     --
     -- osproduct-3492 start
     -- for all the resumed objects set the BV (32851148 Susp_Reference_Associated Resume BATS)
     --
       if in_object_list.count >0 
             then
                  in_object_list_index := in_object_list.first;
                  while in_object_list_index is not null
                       loop
                       pkg_os_object_io.sp_object_bv_set
                        (
                          in_session_id,
                          in_transaction_id,
                          in_object_list(in_object_list_index),
                          gbv_Susp_associate_resume_bats,
                          v_billing_acc_trx_set_id
                        );
                        v_resumed_by := pkg_os_object_io.fn_object_bv_path_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_object_list(in_object_list_index),
                                '210356.210086'
                           );
                        pkg_os_object_io.sp_object_bv_set
                           (
                                in_session_id,
                                in_transaction_id,
                                in_object_list(in_object_list_index),
                                gbv_Susp_resumed_by,
                                v_resumed_by
                              );            
                       -- pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_object_list(in_object_list_index), v_datamart_tf);
                        update
                                  dragon_suspension
                              set
                                  RESUMED_BATS_ID = v_billing_acc_trx_set_id, 
                                  RESUMED_BY = v_resumed_by
                              where 
                                  SUSPENSION_ID = in_object_list(in_object_list_index);
                       
                       in_object_list_index := in_object_list.next(in_object_list_index);
                       end loop;
        end if;

     --
     -- osproduct-3492 end
     --
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Created BillingAccountTransactionSet.. Batch Object ID: ' ||
               v_billing_acc_trx_set_id
          );

     end if;
	 --OSBILLING-7620 end

     --
     -- Open cursor to get the billing account id.
     --
     for r_policy in billaccount_policy_cur(in_action_object_id)
     loop

          if billaccount_policy_cur%NOTFOUND
          then

               Raise_application_error( -20050, 'Error: No data found ' );

          end if;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing account has got : '
                    || billaccount_policy_cur%rowcount
                    ||' policies for resume'
               );

          end if;

          sp_resume_policy
          (
               in_session_id,
               in_transaction_id,
               r_policy.policy_id,
               in_action_object_type_id,
               io_action_outcome_id
          );

          --PMADEV-1171 Issue 4:
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               r_policy.policy_id,
               gObjType_PolicySuspension,
               v_object_list
          );

          --
          -- Loop through the terms fetched and identify the current term (max effective date less than the policy current date)
          --
     /*
          if v_object_list.count > 0
          then

               v_object_index := v_object_list.first;

               while v_object_index is not null
               loop

                    v_current_suspension_state    :=   pkg_os_object_io.fn_object_bv_path_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_object_list(v_object_index),
                                                            pkg_os_constant_bv.gbv_GenObjObjectState
                                                       );

--                    if v_current_suspension_state = 54346
--                    then
--
--                         pkg_os_object_io.sp_object_bv_set
--                         (
--                              in_session_id,
--                              in_transaction_id,
--                              v_object_list(v_object_index),
--                              pkg_os_constant_bv.gbv_GenObjObjectState,
--                              53146 --- ResumeBilling Status
--                         );
--
--                    end if;

                    v_object_index := v_object_list.next(v_object_index);

               end loop; -- end loop of v_object_index

          end if;
*/
          --PMADEV-1171 Issue 4:
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Policy id  : '
                    || r_policy.policy_id
                    ||' sent for resume'
               );
          end if;
           --OSBILLING-7275 start
            -- Get the billing suspension policy transaction created for the policy
          v_billing_resume_pt_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        r_policy.policy_id,
                                        30618246 -- most recent processed trx
                                    );

          v_policy_trx_effective_date := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_billing_resume_pt_id,
                                              pkg_os_constant_bv.gbv_PolicyTranEffectiveDate
                                         );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Resume PT Id:' || v_billing_resume_pt_id ||
                    '... Transaction effective date: ' || v_policy_trx_effective_date
               );

          end if;

          -- Update associated BATS ID on the PT
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_resume_pt_id, -- policy trxn id
               pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,
               v_billing_acc_trx_set_id
          );

		  --OSBILLING-7458 start , Set the reference from BATS to PT for Resume
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_trx_set_id, -- policy trxn id
               pkg_db_late_process.gbv_BillingAccTrxSetRefPolTxn,
               v_billing_resume_pt_id
          );
          --OSBILLING-7458 End

          -- Create a FITransaction
          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billing_acc_trx_set_id,
               in_fitrx_ref_billing_account    =>  in_action_object_id,
               out_fitransaction_id            =>  v_fi_trx_billing_resume_id,
               in_fitrx_type                   =>  9001, -- Informational fitransaction
               in_fitrx_ref_associatedpolicy   =>  r_policy.policy_id,
               in_fitrx_ref_associatedpoltrx   =>  v_billing_resume_pt_id,
               in_fitrx_effective_date         =>  v_policy_trx_effective_date,
               in_fitrx_object_state           =>  37646
          );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... FITransaction ID: ' || v_fi_trx_billing_resume_id
               );

          end if;

          --
          -- Set the FITransaction Status to Processed
          --
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               pkg_os_constant_bv.gbv_GenObjObjectState,
               37646
          );

          --
          -- Set the Processing Date for Withdrawal FI Transaction to Current Date
          --
          v_fi_trx_processing_date :=   to_char
          (
               pkg_os_time.fn_os_sysdate
               (
                    in_session_id,
                    in_transaction_id,
                    v_fi_trx_billing_resume_id
               ),
               pkg_os_constant.DragonDateFormatDefault
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               29708446,
               v_fi_trx_processing_date
          );

          --
          -- Update the FITransaction Datamart for the Withdrawal Date update transaction
          --
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_billing_resume_id,
               v_datamart_tf
          );


     --OSBILLING-7275 end
     end loop;




	 pkg_db_object.sp_billingacounttrxset_process
     (
          in_session_id,
          in_transaction_id,
          v_billing_acc_trx_set_id,
          g_PolicyTrxType_ResumeBilling
     );
     --OSBILLING-7620 end

     --LXPRODUCT-153
     --Call to Document Processing
     pkg_db_object.sp_billing_doc_processing
     (
          in_session_id,
          in_transaction_id,
          v_billing_acc_trx_set_id,    
          io_action_outcome_id
     );

     if in_action_object_type_id = gobjtype_billaccsuspension
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;

exception
when NO_DATA_FOUND
then

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '||||||| There are no associated suspended policies with the billing account id  ::'||in_action_object_id
     );

when others
then

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '|||||| An error occured during the resume process, please look into the billing account :::'||in_action_object_id
          ||SQLERRM
     );

     if in_action_object_type_id = gobjtype_billaccsuspension
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;

end sp_resume_billing_account;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_resume_exchange
--
--   %USAGE
--        This procedure will be used to mark BillingAccount and related policies as active.
--          based on the user inputs.
--
--   %ALGORITHM
--          1. Get the cursor to get the billing accounts to activate the billing accounts.
--          2. Call procedure sp_suspend_billing_account to mark related BA's and related policies as active.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_action_object_type_id      Suspension object type id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_resume_exchange
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     in_action_object_type_id      in           object.object_id%type,
     io_action_outcome_id          in out     outcome.outcome_id%type
)
as
     v_procedure_name                       constant system_log.program_name%type     :=pkg_name|| 'sp_resume_exchange';
     v_session_control                        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_billing_account_id                object.object_id%type;
     type v_ref_cursor is REF CURSOR;
     src_cur                               v_ref_cursor;
     TYPE array_t IS TABLE OF number(38) INDEX BY BINARY_INTEGER;     ----OSPRODUCT-1446,modified size
     rec_array                          array_t;

     cursor suspension_md_cur
     is
          select
               DB_BILL_SUSP_ATTRIBUTE, DB_BILLING_SUSPENSION_BV_COL
          from
               DB_BILLING_SUSP_FIELD_MA dbs
          where
               DB_BILL_SUSPENSION_TYPE = gObjType_ExchSuspension;

begin


     --
     -- Open cursor to get the billing account id.
     --
     sp_exchange_query_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               src_cur
          );

     fetch src_cur bulk collect into rec_array;

     close src_cur;

     for i in 1 .. rec_array.count
     loop
          --if v_billing_acc_status = gBillingAcStatus_Active and v_in_object_type != 24 then
          v_billing_account_id := rec_array(i);

          sp_resume_billing_account
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_account_id,
                    in_action_object_type_id,
                    io_action_outcome_id
               );

     end loop;


      if in_action_object_type_id = gobjtype_exchsuspension then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
          '...... An error occured in the resume process'
          ||SQLERRM);

     end if;

     if in_action_object_type_id = gobjtype_policysuspension
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

end sp_resume_exchange;

--------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_db_resume
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as
     v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'sp_db_resume';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                           char   := 'F';
     v_billing_account_state_text            varchar2(100);
     v_suspension_obj_id                     object.object_id%type;
     v_new_policytrxn_id                     object.object_id%type;
     v_in_object_type                        object.object_id%type;
     v_suspension_obj_type                   object.object_id%type;
     v_current_later                         char(1);
     v_current_date                          date;
     v_new_policytrxn_id                     object.object_id%type;
     v_PolSusp_child_list                    pkg_os_object.t_object_list;
     v_PolSusp_child_index                   number;
     v_PolSusp_objectState                   object_state.object_state_id%type;
     v_PolSusp_objectState1                  object_state.object_state_id%type;
     v_ref_curr_suspension                   object_state.object_state_id%type;
     v_PolSusp_child_list1                   pkg_os_object.t_object_list;
     v_PolSusp_child_index1                  number;
     v_current_policy_term                   object.object_id%type;
     v_BASusp_Associated_PolSusp             object.object_id%type;
     v_associated_task                       object.object_id%type;
     v_current_ba_suspension_list            pkg_os_object.t_object_list;
     v_current_ba_susp_list_index            number;
     v_BASusp_objectState                    object_state.object_state_id%type;
     v_resume_obj_list                       pkg_os_object.t_object_list;
     v_suspension_date                       date;                   
     v_resume_date                           date;
     v_policy_term_id                        object.object_id%type;  --13161
     v_force_resume_flag                     number    :=   0;   --LXPRODUCT-538
     
begin

     --
     --     Get the object type of the in_object_id ( which would be policy excahnge or billing account) object type.
     --

     v_in_object_type := pkg_os_object.fn_object_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id
                         );

     --
     -- Read the suspension Object.
     --
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
             '|||||| Reading the object id ' || in_action_object_id ||
             ' of object type :' || v_in_object_type ||' for resume.');
  end if;

  if v_in_object_type = gObjType_BillingAccount
  then
    v_current_date := pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, in_action_object_id);
    v_suspension_obj_type := gObjType_BillAccSuspension;
  elsif v_in_object_type = gObjType_Policy   -- Policy object
  then
    v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_action_object_id);
    v_suspension_obj_type := gObjType_PolicySuspension;
  elsif v_in_object_type = gObjType_ExchSuspension -- Exchange Object
  then
    v_current_date := pkg_db_functions.fn_get_exchange_current_date(in_session_id, in_transaction_id,
                   pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id));
    v_suspension_obj_type := gObjType_ExchSuspension;
  end if;



     if v_suspension_obj_type = gObjType_ExchSuspension
          then
               v_suspension_obj_id := in_action_object_id;
    end if;

     if v_suspension_obj_id is null and v_suspension_obj_type = gObjType_ExchSuspension then
         if v_session_control.gLogging_Full then
             pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
             '||||||  skipping as suspense id is null');
    end if;

     elsif v_suspension_obj_type in ( gObjType_ExchSuspension) then
            g_suspension_date := pkg_os_object_io.fn_object_bv_get
                               (
                                 in_session_id,
                                    in_transaction_id,
                                    v_suspension_obj_id,
                                    gbv_Suspension_Eff_Date  -- Policty term status BV
                               );

 

  g_resume_date := to_char(
                  to_date(
                   pkg_os_object_io.fn_object_bv_get
                   (
                     in_session_id,
                     in_transaction_id,
                     v_suspension_obj_id,
                     gbv_Suspension_Exp_Date
                   ),
                   pkg_os_constant.DragonDateFormatDefault
                  )
                ,
                pkg_os_constant.DragonDateFormatDefault);

                 --
                 -- Read the suspension Object.
                 --
                  if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                            '|||||| Read the suspension object id ' || v_suspension_obj_id ||
                            ' Suspension Type:' || v_suspension_obj_type ||' for resume.'
                            ||'v_current_date:'||v_current_date
                            ||'g_resume_date:'||g_resume_date
                            ||'g_suspension_date:'||g_suspension_date);
                  end if;
                  --
                  --     Get the parent of the in_action_object id as that will decide the level of suspension.
                  --

  --v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

  pkg_os_datamart.sp_datamart_update_row
  (
    in_session_id,
    in_transaction_id,
    v_suspension_obj_id,
    v_datamart_tf
  );

  
  -- resume in case the resume date is matured or resume date is equal to suspension date
  if trunc(to_date(g_resume_date,pkg_os_constant.DragonDateFormatDefault)) <= trunc(v_current_date) or
      trunc(to_date(g_resume_date,pkg_os_constant.DragonDateFormatDefault)) = trunc(to_date(g_suspension_date,pkg_os_constant.DragonDateFormatDefault))
  then
          v_current_later :='C'; -- Flag for current suspension
          if v_session_control.gLogging_Full then
                     pkg_os_logging.sp_log
          (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '|||||| Suspension Object is marked for resume.'
          );

      end if;
  elsif to_date(g_resume_date,pkg_os_constant.DragonDateFormatDefault) > trunc(v_current_date)
  then
    v_current_later :='L'; -- Flag for later suspension
  end if;

              if v_current_later = 'C' then
                if v_suspension_obj_type = gObjType_ExchSuspension
                    then
                      sp_resume_exchange
                        (
                          in_session_id,
                          in_transaction_id,
                          in_action_object_id,
                          v_suspension_obj_type,
                          io_action_outcome_id
                        );
                end if;


    --
    -- Changing Object State to Billing Resume
    --

    pkg_os_object_io.sp_object_bv_set
      (
        in_session_id,
        in_transaction_id,
        v_suspension_obj_id,
        pkg_os_constant_bv.gbv_GenObjObjectState,
        53146 --- ResumeBilling Status
      );

    if v_session_control.gLogging_Full
    then

      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
        '|||||| Object state for the suspension object '|| v_suspension_obj_id
        ||' is changed to Resume billing ' );

    end if;
    --
    --- Updating corresponding datamart
    --

    pkg_os_datamart.sp_datamart_update_row
      (
        in_session_id,
        in_transaction_id,
        v_suspension_obj_id,
        v_datamart_tf
      );

    if v_session_control.gLogging_Full
    then

      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
        '|||||| Suspension object datamart updated');

    end if;
    io_action_outcome_id := io_action_outcome_id;--pkg_os_constant.gOutcome_OK;
  end if;


  if v_current_later = 'L' then
    pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        '...... Suspension record saved for resume later'
      );
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;

            end if;
     --
     -- osproduct -2013
     --
     if v_suspension_obj_type in ( gObjType_PolicySuspension) 
	      then
			 --
			 -- Get the current period policy suspension objects
			 --			
				sp_get_active_susp_objects 
					(
						in_session_id,
						in_transaction_id,
						in_action_object_id,
						in_action_object_id,
						v_PolSusp_child_list,
						1
					);
                 if v_session_control.gLogging_Full then 
                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        'Total suspension Objects: '||v_PolSusp_child_list.count
                    );
                 end if; 
                 v_PolSusp_child_index :=v_PolSusp_child_list.first;

                 while v_PolSusp_child_index is not null
                     loop
                          --
                          -- Get the suspension effective and resume date
                          -- Changed below code as part of osproduct-2499
                          --
                         begin
                              select
                                   SUSPENSION_EFFECTIVE_DATE,
                                   SUSPENSION_RESUME_DATE
                              into
                                   v_suspension_date,
                                   v_resume_date
                              from
                                  dragon_suspension
                              where
                                   SUSPENSION_ID = v_PolSusp_child_list(v_PolSusp_child_index);

                              exception

                              when no_data_found then

                              if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '.. Datamart not updated..'
                              );

                              end if;
                         end;

                         if v_suspension_date is null then 
                              v_suspension_date :=  to_date(
                                                            pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_PolSusp_child_list(v_PolSusp_child_index),
                                                                 gbv_Suspension_Eff_Date
                                                            )
                                                            ,pkg_os_constant.DragonDateFormatDefault
                                                           );
                         end if;
                         if v_resume_date is null then 
                              v_resume_date :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_PolSusp_child_list(v_PolSusp_child_index),
                                                            gbv_Suspension_Exp_Date
                                                            ),pkg_os_constant.DragonDateFormatDefault);    
                         end if;                    
                                    --OSPRODUCT-3967
                                     g_suspension_date := to_char(v_suspension_date, pkg_os_constant.DragonDateFormatDefault);
                                     g_resume_date     := to_char(v_resume_date, pkg_os_constant.DragonDateFormatDefault);
                         v_force_resume_flag :=  pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_PolSusp_child_list(v_PolSusp_child_index),
                                                      33782248 -- force Resume
                                                 ); --LXPRODUCT-538
                                                 
                         if v_session_control.gLogging_Full 
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...Resuming date: '      ||trunc(v_resume_date)||
                                   '...v_current_date: '     ||trunc(v_current_date)||
                                   '...suspension date: '    ||trunc(v_suspension_date)||
                                   '...v_suspension_obj_id: '|| v_PolSusp_child_list(v_PolSusp_child_index) ||
                                   ' Force Resume flag : '   || v_force_resume_flag --LXPRODUCT-538
                              );
                         end if;
                    
                         if trunc(v_resume_date) <= trunc(v_current_date)  or
                              trunc(v_resume_date) = trunc(v_suspension_date) or
                              nvl (v_force_resume_flag , 2 ) = 1  --LXPRODUCT-538
                              
                              then
                                      -- storing the list of suspended objects
                                   v_resume_obj_list(v_resume_obj_list.count +1) := v_PolSusp_child_list(v_PolSusp_child_index);

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_PolSusp_child_list(v_PolSusp_child_index),
                                        pkg_os_constant_bv.gbv_GenObjObjectState,
                                        53146 --- ResumeBilling Status
                                   );

                                              --pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_PolSusp_child_list(v_PolSusp_child_index), v_datamart_tf);
                                   update
                                        dragon_suspension
                                   set
                                        OBJECT_STATE = 53146
                                   where 
                                        SUSPENSION_ID =  v_PolSusp_child_list(v_PolSusp_child_index);

                                   v_current_later := 'C';

                                   if v_session_control.gLogging_Full 
                                        then
                                             pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                             '...Resuming Suspension object: '||v_PolSusp_child_list(v_PolSusp_child_index));
                                   end if;
                         end if;

                              v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
                    end loop;

                   if v_current_later = 'C'
                         then
                              pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        '.. calling sp_resume_policy..'
                                   );
                              sp_resume_policy
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   v_suspension_obj_type,
                                   io_action_outcome_id,
                                   v_resume_obj_list,
                                   v_current_date
                              );
                              pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        '..exiting sp_resume_policy..'
                                   );
                         --
                         -- Check the current suspension reference, if the object is resumed,then set the reference to a suspended object
                         --
                         v_current_policy_term := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_action_object_id,-- 58174643570,
                                                       '31844846'--'_Reference_Current Term based on Rolled Date.'
                                                  );                             

                         v_ref_curr_suspension :=  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_current_policy_term,
                                                       '32251446' --_Reference_Current Term based on Rolled Date.
                                                  );
                         begin
                              select
                                   OBJECT_STATE                                    
                              into
                                   v_PolSusp_objectState
                              from
                                   dragon_suspension
                              where
                                   SUSPENSION_ID = v_ref_curr_suspension;

                              exception

                                   when no_data_found then

                                   if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        '.. Datamart not updated..'
                                   );

                                   end if;
                         end;

                         if v_PolSusp_objectState is null then 

                              v_PolSusp_objectState  :=  pkg_os_object_io.fn_object_bv_get
                                                         (
                                                               in_session_id,
                                                               in_transaction_id,
                                                               v_ref_curr_suspension,
                                                               gbv_GenericObj_ObjectState--210153
                                                         );
                         end if;

                         if v_PolSusp_objectState =    53146 --ResumeBilling
                              then
                                   sp_get_active_susp_objects 
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        in_action_object_id,
                                        v_PolSusp_child_list,
                                        1 
                                   );

                                   if v_PolSusp_child_list.count >0
                                        then
                                             v_PolSusp_child_index :=v_PolSusp_child_list.first;
                                             while v_PolSusp_child_index is not null loop
                                             pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_current_policy_term,32251446,v_PolSusp_child_list(v_PolSusp_child_index));
                                             --_Reference_Term Current Suspension is not in DRAGON_POLICY_TERM, so not updating the datamart
                                             --pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_current_policy_term, v_datamart_tf);
                                             v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
                                             end loop;
                                   end if;      

                         end if;
                     end if;
               
     end if;--v_suspension_obj_type = gObjType_PolicySuspension 
     --
     -- osproduct -2013
     --
     if v_suspension_obj_type in ( gObjType_BillAccSuspension) 
	      then
			 --
			 -- Get the current period BA suspension objects
			 --			
				sp_get_active_susp_objects 
					(
						in_session_id,
						in_transaction_id,
						null,
						in_action_object_id,
						v_current_ba_suspension_list,
						2
					);
                 if v_session_control.gLogging_Full then 
                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        'Total suspension Objects: '||v_current_ba_suspension_list.count
                    );
                 end if; 
                 v_current_ba_susp_list_index :=v_current_ba_suspension_list.first;

                 while v_current_ba_susp_list_index is not null
                     loop
                          --
                          -- Get the resume date
                          --
                          begin
                                  select
                                       SUSPENSION_EFFECTIVE_DATE,
                                       SUSPENSION_RESUME_DATE
                                  into
                                       v_suspension_date,
                                       v_resume_date
                                  from
                                       dragon_suspension
                                  where
                                       SUSPENSION_ID =  v_current_ba_suspension_list(v_current_ba_susp_list_index);

                                  exception

                                       when no_data_found then

                                            if v_session_control.gLogging_Full then

                                                 pkg_os_logging.sp_log
                                                 (
                                                      in_session_id, 
                                                      in_transaction_id, 
                                                      v_procedure_name,
                                                      '.. Datamart not updated..'
                                                 );

                                           end if;
                                   end;

                                   if v_suspension_date is null then 
                                        v_suspension_date :=  to_date(
                                                                         pkg_os_object_io.fn_object_bv_get
                                                                         (
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              v_current_ba_suspension_list(v_current_ba_susp_list_index),
                                                                              gbv_Suspension_Eff_Date
                                                                         )
                                                                     ,pkg_os_constant.DragonDateFormatDefault
                                                                     );
                                   end if;
                                   if v_resume_date is null then 
                                        v_resume_date :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                        in_session_id,
                                                                        in_transaction_id,
                                                                        v_current_ba_suspension_list(v_current_ba_susp_list_index),
                                                                        gbv_Suspension_Exp_Date
                                                                   ),pkg_os_constant.DragonDateFormatDefault);    
                                    end if;    

                            if trunc(v_resume_date) <= trunc(v_current_date)  or
                               trunc(v_resume_date) = trunc(v_suspension_date)      
                                then
                                      v_resume_obj_list(v_resume_obj_list.count +1) := v_current_ba_suspension_list(v_current_ba_susp_list_index);
                                      pkg_os_object_io.sp_object_bv_set
                                          (
                                            in_session_id,
                                            in_transaction_id,
                                            v_current_ba_suspension_list(v_current_ba_susp_list_index),
                                            pkg_os_constant_bv.gbv_GenObjObjectState,
                                            53146 --- ResumeBilling Status
                                          );

                                       pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_current_ba_suspension_list(v_current_ba_susp_list_index), v_datamart_tf);
                                        v_current_later := 'C';
                                        if v_session_control.gLogging_Full 
                                            then
                                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                                 '...Resuming Suspension object: '||v_current_ba_suspension_list(v_current_ba_susp_list_index));
                                         end if;
                            end if;
                     v_current_ba_susp_list_index := v_current_ba_suspension_list.next(v_current_ba_susp_list_index);
                     end loop;
                     if v_current_later = 'C'
                          then
                             sp_resume_billing_account
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  v_suspension_obj_type,
                                                  io_action_outcome_id,
                                                  v_resume_obj_list
                                                );
                            --
                            -- Check the current suspension reference, if the object is resumed,then set the reference to a suspended object
                            --
                            -- the below code is just to upadte the current suspension reference with teh latest suspended suspension object. 
                            -- it is not performing any resume job
                              v_ref_curr_suspension :=   pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_action_object_id,
                                                        33914946 --_Reference_Current Billing Account Suspension
                                                    );
                              v_BASusp_objectState  :=  pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_ref_curr_suspension,
                                                        gbv_GenericObj_ObjectState--210153
                                                    );
                                if v_BASusp_objectState = 53146 --ResumeBilling
                                     then
                                         sp_get_active_susp_objects 
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            null,
                                            in_action_object_id,
                                            v_current_ba_suspension_list,
                                            2
                                        );

                                        if v_current_ba_suspension_list.count >0
                                             then
                                                    v_current_ba_susp_list_index :=v_current_ba_suspension_list.first;
                                                    while v_current_ba_susp_list_index is not null loop
                                                    pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,in_action_object_id,33914946,v_current_ba_suspension_list(v_current_ba_susp_list_index));
                                                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_action_object_id, v_datamart_tf);
                                                    v_current_ba_susp_list_index := v_current_ba_suspension_list.next(v_current_ba_susp_list_index);
													end loop;
                                        end if;                                                             
                                end if;
                     end if;
     end if;--v_suspension_obj_type = gObjType_BillAccSuspension 
	
	if v_in_object_type = gObjType_Policy -- LXPRODUCT-307   gObjType_PolicySuspension 
     then
          --Call to Update Billplan datamart                         
          sp_policy_billplan_update(in_session_id,in_transaction_id,in_action_object_id);     --OSPRODUCT-13161  
     elsif  v_in_object_type = gObjType_BillingAccount -- LXPRODUCT-307 gObjType_BillAccSuspension 
     then    
          for r_policy in billaccount_policy_cur(in_action_object_id)
          loop
            
                  if billaccount_policy_cur%NOTFOUND
                  then
            
                       Raise_application_error( -20050, 'Error: No data found ' );
            
                  end if;
                  
                  v_policy_term_id := pkg_db_functions.fn_get_policy_current_term(in_session_id,in_transaction_id,r_policy.policy_id);
                   
                  sp_policy_billplan_update(in_session_id,in_transaction_id,v_policy_term_id);     
                 
          end loop;
          
     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
          '...... There is some error in resume billing account and related policies.'
          ||SQLERRM||dbms_utility.format_error_backtrace);

     end if;

    io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

end sp_db_resume;

-----------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--        fn_db_suspend_policy_trx
--
--   %USAGE
--        This function will be used to check if a transaction is allowed if policy is marked for suspension.
--
--
--   %ALGORITHM
--    1. Check if a transaction is allowed if policy is marked for suspension.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--   %PARAM             in_transaction_type_id        Transaction id i.e. endorsement etc.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
/*
function fn_db_suspend_policy_trx
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
  in_transaction_type_id    in    object.object_id%type
) return number
as

     v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'fn_db_suspend_policy_trx';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                      char   := 'T';
     v_parent_object_id                 object.object_id%type;
  v_trx_cnt            number;
  v_in_object_type            object.object_id%type;
  v_policy_term_id         object.object_id%type;
  v_pol_term_billing_status    object_bv_value.business_variable_value%type;
     v_current_later                    char(1);
  v_suspension_date        object_bv_value.business_variable_value%type;
     v_current_date_dnf                 varchar2(15);

begin

  --
     --     Get the object type of the action object id.
     --

  v_in_object_type := pkg_os_object.fn_object_type_get
          (
            in_session_id,
            in_transaction_id,
            in_action_object_id
          );
  --
     --     Get the parent of the in_action_object id as that will decide the level of suspension.
     --

  v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

     --
     --     Get the current policy term to be suspended.
     --

  v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
            (
              in_session_id,
              in_transaction_id,
              v_parent_object_id
            );

     --
     --     Get the current policy term status.
     --

  v_pol_term_billing_status := pkg_os_object_io.fn_object_bv_get
                 (
                  in_session_id,
                                             in_transaction_id,
                                             v_policy_term_id,
                                             29706146 -- Term Billing Status
                  );

  if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term status is  ' || v_pol_term_billing_status );

     end if;

     if  v_pol_term_billing_status in (54446, 54546,54646, 54746, 54846, 54946, 55146) --and v_policy_id is null then
  then

    select
      count(1)
    into
      v_trx_cnt
    from
      db_billing_susp_trx
    where
      db_bill_suspension_type = gobjtype_policysuspension
    and
      db_policy_susp_trx = in_transaction_type_id;


    return v_trx_cnt;
  else
    return 0;
  end if;

end fn_db_suspend_policy_trx;
*/

function fn_db_suspend_policy_trx
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type,
  in_transaction_type_id    in    object.object_id%type
) return number
as

     v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'fn_db_suspend_policy_trx';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

  v_trx_cnt            number;
  v_policy_id         object.object_id%type;
  v_policy_term_id         object.object_id%type;
  v_stop_uw_trnx          object_bv_value.business_variable_value%type;
  v_pol_term_billing_status    object_bv_value.business_variable_value%type;
v_target_suspension_trx varchar2 (4000);

begin

     --
     --     Get the current policy term to be checked for suspension.
     --
  --v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

  v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
            (
              in_session_id,
              in_transaction_id,
              in_action_object_id
            );

     --
     --     Get the current policy term status.
     --

  v_pol_term_billing_status := pkg_os_object_io.fn_object_bv_get
                 (
                  in_session_id,
                                             in_transaction_id,
                                             v_policy_term_id,
                                             gbv_PolicyTerm_Billing_Status--29706146 -- Term Billing Status
                  );

  if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Current policy term status is  ' || v_pol_term_billing_status );

     end if;

  --
     --     Check if Underwriting transactions for the current policy are allowed
     --

  v_stop_uw_trnx :=        pkg_os_object_io.fn_object_bv_get
                 (
                  in_session_id,
                                             in_transaction_id,
                                             v_policy_term_id, -- Policy ID
                                             gbv_PolicyTerm_Stop_UW_Trnx
                  );

  if v_stop_uw_trnx = 1
     then

     v_trx_cnt := 1;

     return v_trx_cnt;
   else
     return 0;
   end if;

  if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Underwriting Transactions are stopped for policy' || in_action_object_id );

     end if;

end fn_db_suspend_policy_trx;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_db_suspend_billing_trx
--
--   %USAGE
--        This function will be used to check if a transaction is allowed if billing account is marked suspended.
--
--
--   %ALGORITHM
--    1. Check if a transaction is allowed if billing account is marked suspended.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_db_suspend_billing_trx
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type
) return number
as

     v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'fn_db_suspend_billing_trx';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_parent_object_id                 object.object_id%type;
  v_trx_cnt            number;
  v_in_object_type            object.object_id%type;
  v_policy_term_id         object.object_id%type;
  v_billing_acc_status      object_bv_value.business_variable_value%type;
  v_batch_type_id        object.object_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, pkg_db_cashpost.gbv_FITrxSetBatchType);
  v_fitransaction_id        object.object_id%type;
  v_related_policy_id        object.object_id%type;
  v_pol_term_billing_status    object_bv_value.business_variable_value%type;
begin

  --
  -- Get the parent(billingaccount) of in_action_object_id (billingaccounttransactionset)
  --
  if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| susp v_batch_type_id ' || v_batch_type_id||' in_action_object_id '||in_action_object_id );

     end if;

  v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

     --
     --     Get the billing account status.
     --

  v_billing_acc_status := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        v_parent_object_id,
                                        gbv_BillAcc_Status  -- 210153 Generic Object State
              );

     --
     --     If current transaction happening is related to a policy then check if the current policy term is not suspended.
     --

  v_fitransaction_id := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        29743646  -- FITRANSACTION ID
              );

  v_related_policy_id := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        v_fitransaction_id,
                                        29974046 --FITransaction - xReference - _Reference_Action Policy  -- FITRANSACTION ID
              );

  if   v_related_policy_id is not null
  then
      v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                (
                  in_session_id,
                  in_transaction_id,
                  v_related_policy_id
                );

      --
      --     Get the current policy term status.
      --

      v_pol_term_billing_status := pkg_os_object_io.fn_object_bv_get
                     (
                      in_session_id,
                      in_transaction_id,
                      v_policy_term_id,
                      gbv_PolicyTerm_Billing_Status--29706146 -- Term Billing Status
                      );
  end if;
 if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| v_billing_acc_status '||v_billing_acc_status );

     end if;
     if  (v_billing_acc_status in (
              g_bill_acc_uw_latepay,
              g_bill_acc_uw_latepay_cd,
              g_bill_acc_uw_latepay_cd_eft,
              g_bill_acc_uw_credit,
              g_bill_acc_uw_credit_eft,
              g_bill_acc_uw_latepay_eft,
              g_bill_acc_uw_eft,
              g_billingaccount_suspend)
              --OSBilling-1397 : Already declared as constant
             -- g_billingaccount_suspend, 37346)
    or (
      v_related_policy_id is not null
      and
      v_pol_term_billing_status in (g_pol_term_ba_susp,g_pol_term_uw_latepay,g_pol_term_uw_latepay_cd,g_pol_term_uw_latepay_cd_eft,
                  g_pol_term_uw_credit, g_pol_term_uw_credit_eft, g_pol_term_uw_latepay_eft)
       )
    ) and NVL(v_batch_type_id,0) not in (701, 2301, 2101, 2401) --OSBILLING-7286
  then

    select
      count(1)
    into
      v_trx_cnt
    from
      db_billing_susp_trx
    where
      db_bill_suspension_type = gobjtype_billaccsuspension
    and
      db_billing_susp_trx = (select
                   db_trxset_type_id
                 from
                   db_transaction_set_type
                 where
                      db_trxset_enum = v_batch_type_id);
 if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| v_trx_cnt '||v_trx_cnt );

     end if;

    return v_trx_cnt;

  else
      return 0;
  end if;

end fn_db_suspend_billing_trx;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_db_is_policy_suspend
--
--   %USAGE
--        This function will be used to check if this policy is marked supened as a part of billing account suspension or just policy.
--
--
--   %ALGORITHM
--    NA
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_action_object_id           Action Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_db_is_policy_suspend
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id           in        object.object_id%type
) return number
as
  v_parent_customer_id      object.object_id%type;
  v_primary_entity_id        object.object_id%type;
  v_billingaccount_id       object.object_id%type;
  v_pol_term_bill_susp       object_bv_value.business_variable_value%type;
  v_billing_acc_status      object_bv_value.business_variable_value%type;
  v_policy_term_id        object.object_id%type;
  v_action_object_type      object_bv_value.business_variable_value%type;-- OSPRODUCT-1198
  v_ref_producing_agency    object.object_id%type;-- OSPRODUCT-1198
  v_Object_Type             constant business_variable.business_variable_id%type         := 210149; -- OSPRODUCT-1198
begin

  -- OSPRODUCT-1198 changes start 
  -- get object type id (changes w.r.t PMADEV-3889 to calculate billing account of agency billed policy)
        v_action_object_type := pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,--59440717670,
                                        v_Object_Type--210149--object type
                                  );
  -- if action object is policy and it is agency billed, then calculate the billing account from refrence producing agency                       
      if v_action_object_type=24 and  pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,--59440717670,
                                        gbv_Policy_BillingMethod--27372305--object type
                                  )   =2 then 


    --get ref producing agency         
         v_ref_producing_agency := pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,--59440717670,
                                        gbv_Policy_RefProdAgency-- 26590907--_Reference_Producing Agency
                                  );     

   -- get the billing account of the agency billed policy                               
        v_billingaccount_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_ref_producing_agency,gObjType_BillingAccount);

        v_billing_acc_status := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        v_billingaccount_id,
                                        gbv_BillAcc_Status  -- 210153 Generic Object State
              );

       else
  -- OSPRODUCT-1198 changes end   
  --
  -- Get the Master Customer
  --
  v_parent_customer_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

  --
  -- Get the Primary Customer Entity
  --
  v_primary_entity_id := pkg_os_object_io.fn_object_bv_get
               (
                in_session_id,
                in_transaction_id,
                v_parent_customer_id,
                gbv_CustRefPrimaryEntity ---Customer - xReference - _Reference_Primary Entity
               );

  --
  -- Get the billing account associated with the primary customer entity.
  --
  --OSPRODUCT-7273 start
/*  v_billingaccount_id :=      pkg_os_object_search.fn_object_11_child_get
                              (
                                 in_session_id,
                                 in_transaction_id,
                                 v_primary_entity_id,
                                 gObjType_BillingAccount
                              );*/
  for r_ba in c_billing_account(in_action_object_id) loop
       v_billing_acc_status := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    r_ba.billing_account,
                                    gbv_BillAcc_Status  -- 210153 Generic Object State
                               );
       if v_billing_acc_status = gBillingAcStatus_Suspended then
            exit;
       end if;
  end loop;
  --OSPRODUCT-7273 end
 end if;
  --
     --     Get the billing account status.
     --

  --OSPRODUCT-7273
  /*v_billing_acc_status := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        v_billingaccount_id,
                                        gbv_BillAcc_Status  -- 210153 Generic Object State
              );*/

     --
     --     Get the current policy term.
     --

  v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
            (
              in_session_id,
              in_transaction_id,
              in_action_object_id
            );
     --
     --     Get the current policy term status.
     --

  v_pol_term_bill_susp := pkg_os_object_io.fn_object_bv_get
                (
                in_session_id,
                                        in_transaction_id,
                                        v_policy_term_id,
                                        gbv_PolicyTerm_Billing_Susp  -- 210153 Generic Object State
              );

  if v_billing_acc_status <> gBillingAcStatus_Suspended and v_pol_term_bill_susp = 1
  then
    return 1; -- True
  elsif v_billing_acc_status = gBillingAcStatus_Suspended and v_pol_term_bill_susp = 1
  then
    return 0; -- false
  else
    return 0;
  end if;

end fn_db_is_policy_suspend;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_db_is_activity_suspended
--
--   %USAGE
--        This function allows to identify if certain activity is suspended for the policy.
--
--
--   %ALGORITHM
--    NA
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_policy_id           Policy Id
--   %PARAM             in_activity_id         constant which identifies activity, e.g. gSuspend_CreditDisb_Activity
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- osproduct-2013
-- this function will loop in all the suspended policy suspensionsion objects and check for their suspended transactions.
-- if suspended transaction matches with teh in_activity_id, it returns 1(True)
function fn_db_is_activity_suspended
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_id                  in        object.object_id%type,
     in_activity_id                in        integer,
     in_poltrx_date                in        date default null
) return number
as
	 v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'fn_db_is_activity_suspended';
	 v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
	 v_susp_activity_bv            business_variable.business_variable_id%type;
	 v_susp_activity_bv_val        object_bv_value.business_variable_value%type;
	 v_pol_term_bill_susp          object_bv_value.business_variable_value%type;
	 v_policy_term_id              object.object_id%type;
	 v_result                      number := 0;
     v_poltrx_date                 date;
     --OSBILLING-6624 start
	 v_target_suspension_trx       varchar2 (4000);
	 v_target_policy_term          object.object_id%type;
     --osproduct-2013
	 v_suspension_child_list       pkg_os_object.t_object_list;
	 v_suspension_child_index      number;
	 v_suspension_objectState      object_state.object_state_id%type;
	 v_responsible_billing_account object.object_id%type;
     v_current_date                date;
     v_Susp_EffectiveDate          object_bv_value.business_variable_value%type:=null;
     v_Susp_ResumeDate             object_bv_value.business_variable_value%type:=null;
begin
     -- OSPRODUCT-4959 
     -- First check Moratorium Suspensions
     --    
     if  fn_moratorium_suspension_get
         (
              in_session_id,
              in_transaction_id,
              in_policy_id,
              in_activity_id
         ) is not null
     then
          return 1;
     end if;
     
     -- /OSPRODUCT-4959 
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Master policy id: '||in_policy_id
          );

     end if;
	 --
	 -- Get the responsible billing account id 
	 --
	 if in_policy_id is not null   --OSPRODUCT-12258
     then
         select 
            responsible_billing_account 
         into
        	v_responsible_billing_account 
         from 
        	dragon_policy
         where
        	policy_id=in_policy_id;
     end if;    	

     v_poltrx_date := in_poltrx_date;
     v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_policy_id);

      if in_poltrx_date is null then
      v_poltrx_date := v_current_date;
      end if;
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Responsible Billing Account: '||v_responsible_billing_account
          );

     end if;		

     --
	 -- Get the active policy and billing account suspension for the current period
	 --   

		sp_get_active_susp_objects 
					(
						in_session_id,
						in_transaction_id,
						in_policy_id,
						v_responsible_billing_account,
						v_suspension_child_list,
						3
					);

        if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Counts of active Suspension objects for current: '||v_suspension_child_list.count
          );

         end if;

          v_suspension_child_index :=v_suspension_child_list.first;

          while v_suspension_child_index is not null
               loop

					 v_target_suspension_trx:= pkg_os_object_io.fn_object_bv_get
												(
												  in_session_id,
												  in_transaction_id,
												  v_suspension_child_list(v_suspension_child_index),
												  32525248
												);

                     v_Susp_EffectiveDate :=  to_char(
                                               to_date(pkg_os_object_io.fn_object_bv_get
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_suspension_child_list(v_suspension_child_index),
                                                  gbv_Suspension_Eff_Date
                                                 ),
                                                   pkg_os_constant.DragonDateFormatDefault
                                                  ),
                                                pkg_os_constant.DragonDateFormatDefault);
                      v_Susp_ResumeDate  :=  to_char(
                                               to_date(pkg_os_object_io.fn_object_bv_get
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_suspension_child_list(v_suspension_child_index),
                                                  gbv_Suspension_Exp_Date
                                                 ),
                                                   pkg_os_constant.DragonDateFormatDefault
                                                  ),
                                                pkg_os_constant.DragonDateFormatDefault); 
					 if v_session_control.gLogging_Full
					    then

												pkg_os_logging.sp_log
												(
													 in_session_id,
													 in_transaction_id,
													 v_procedure_name,
													 '...In activity id: '|| in_activity_id||
													 '...v_target_suspension_trx: '||v_target_suspension_trx||
                                                     '...Suspension object id: '||v_suspension_child_list(v_suspension_child_index)||
                                                     '...Suspension effective date: '||v_Susp_EffectiveDate||
                                                     '...Current date: '||v_current_date||
                                                     '...Input policy date in case of under writing trx suspension: '||v_poltrx_date||
                                                     '...resume date: '||v_Susp_ResumeDate


												 );
					 end if; 

					 if pkg_os_token.fn_find_in_set ( in_activity_id, v_target_suspension_trx) ='T' and in_activity_id =1 
						then
                             if 

                               trunc(v_poltrx_date) >= trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
                                and 
                                (trunc(v_poltrx_date) <= trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
                                or 
                                v_Susp_ResumeDate is null
                               )
                                  then
                                  return 1;
                             end if;
                    elsif pkg_os_token.fn_find_in_set ( in_activity_id, v_target_suspension_trx) ='T' and in_activity_id =13
                          then
/*                              if trunc(v_current_date) >= trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) 
                                 or  
                               trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault)) = trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))

--                               and 
--                               (trunc(v_current_date) <= trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
--                                or 
--                                v_Susp_ResumeDate is null
--                                )
                                  then
                                  return 1;
                             end if;
                       */   
                       return 1;
					elsif pkg_os_token.fn_find_in_set ( in_activity_id, v_target_suspension_trx) ='T' and in_activity_id not in (1,13) 
                        then
                            if trunc(v_current_date) >= trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
--                               and 
--                               (trunc(v_current_date) <= trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
--                                or 
--                                v_Susp_ResumeDate is null
--                                )
                                  then
                                  return 1;
                             end if;

					 end if;

					 v_suspension_child_index := v_suspension_child_list.next(v_suspension_child_index);
			end loop;

            return 0;              


end fn_db_is_activity_suspended;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_current_susp_id
--
--   %USAGE
--        This function returns the suspended object that needs to be resumed.
--
--   %ALGORITHM
--       1. Get all the supension object of this in_action_bject id  i.e. suspension object id.
--       2. Check if the state is suspend billing then return the suspension id.
--
--   %PARAM     in_session_id              session ID
--   %PARAM     in_transaction_id          transaction ID
--   %PARAM     in_action_object_id        suspension ID
--   %PARAM     in_action_type_id          action object type ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_current_susp_id
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type,
  in_object_type_id      in       object.object_id%type
)
return object.object_id%type
is


     v_procedure_name              constant  system_log.program_name%type       :=   pkg_name||'fn_get_current_susp_id';
     v_session_control             pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     --v_current_term_id             object.object_id%type;
     --v_current_susp_id             object.object_id%type;
     --v_object_index                number;
     --v_count                       number;
     --v_current_policy_date         varchar2(100);
     --v_current_suspension_state    varchar2(100);

     --v_current_suspension          r_suspension;
     --v_rec_null                    r_suspension;
     --v_object_list                 pkg_os_object.t_object_list;

begin



     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               ' |||||| Identifying currrent active suspension ID: ' || in_object_type_id);

     end if;

     --
     -- Get the Policy current date in Dragon Native Format
     --

     --v_current_policy_date := to_char(pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_policy_id ), pkg_os_constant.DragonDateFormatDefault );

     --
     -- Get the Suspension objects under the policy, billing or exchange
     --
     return pkg_os_object_search.fn_object_with_attribute_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          in_object_type_id,
          pkg_os_constant_bv.gbv_GenObjObjectState,
          54346
     );

/*

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          in_object_type_id,
          v_object_list
     );

  if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '...Object ID: ' || in_action_object_id || ' has number of suspension objects: ' || v_object_list.count);

     end if;

     --
     -- Loop through the terms fetched and identify the current term (max effective date less than the policy current date)
     --

     if v_object_list.count > 0
     then

          v_object_index := v_object_list.first;
          v_current_suspension := v_rec_null;

          while v_object_index is not null loop

               v_current_suspension_state := pkg_os_object_io.fn_object_bv_path_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_object_list(v_object_index),
                    pkg_os_constant_bv.gbv_GenObjObjectState
               );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                              '......Object ID: ' || in_action_object_id ||

                              ' has suspension id: '  || v_object_list(v_object_index) ||

                              ' that has got a suspension state : ' || v_current_suspension_state  );

               end if;


               if v_current_suspension_state = 54346
               then
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                              '......Suspension object id : ' || v_object_list(v_object_index) );
                    end if;

                    v_current_suspension.object_id := v_object_list(v_object_index);
        v_current_susp_id := v_current_suspension.object_id;
               end if;

               v_object_index := v_object_list.next(v_object_index);

          end loop; -- end loop of v_object_index

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '......The Given object : ' || in_action_object_id ||

                         '  has got a suspended state suspension id : ' || v_current_susp_id );

          end if;

          return v_current_susp_id;

     else
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '......The Given object : ' || in_action_object_id ||

                         '  hasn''t got any suspended object');

          end if;
      return null;

     end if;
*/
exception
     when others then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Not able to identify the suspension object for the object ID: '
               ||in_action_object_id
               || ' Error: '
               ||sqlerrm (sqlcode)
          );

          return null;

end fn_get_current_susp_id;
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_curr_susp_resume_date
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type
)
return date
as
     v_procedure_name            constant system_log.program_name%type     :='pkg_db_suspension.fn_get_curr_susp_resume_date';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_in_object_type            object.object_id%type;
     v_suspension_obj_type       object.object_id%type;
     v_suspension_obj_id         object.object_id%type;
     --v_last_pol_trx_id           object.object_id%type;
     v_curr_susp_term            object.object_id%type;
     --v_pol_trx_eff_date          date;
     --v_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_curr_policy_date          date;
     --v_pol_term_exp_date         date;
     --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     --v_pol_exp_date              date;
     --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     v_PolSusp_child_list                  pkg_os_object.t_object_list;
     v_PolSusp_child_index                 number;

begin
     v_in_object_type := pkg_os_object.fn_object_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id
                         );
/*     if v_in_object_type = gObjType_BillingAccount
     then
          v_suspension_obj_type := gObjType_BillAccSuspension;
     elsif v_in_object_type = gObjType_Policy   -- Policy object
     then
          v_suspension_obj_type := gObjType_PolicySuspension;
     end if;*/

     -- return current policy date if the policy is cancelled and cancel eff date is matured
     -- or term expiration date is matured
     if (v_in_object_type = gObjType_Policy ) 
     then
          v_curr_policy_date :=    pkg_db_functions.fn_get_policy_current_date
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id
                                   );
          /*v_last_pol_trx_id :=     pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        29614301  --Policy - xReference - _Reference_Last Transaction Processed
                                   );
          v_trx_type_id :=    pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_last_pol_trx_id,
                                   gbv_PolicyTransactionType
                              );
          v_pol_trx_eff_date := to_date(
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_last_pol_trx_id,
                                        gbv_PolicyTrx_EffDate
                                   ), pkg_os_constant.DragonDateFormatDefault);

          v_pol_exp_date :=   to_date(pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   29098106  --Policy - Policy Max Expiration Date (calculated)
                              ), pkg_os_constant.DragonDateFormatDefault) - 1;*/
          
          -- it will give all the suspended policy suspension objects
          sp_get_active_susp_objects
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              in_action_object_id,
              v_PolSusp_child_list,
              1
          );
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Total suspension Objects: '||v_PolSusp_child_list.count
               );
          end if;
          v_PolSusp_child_index :=v_PolSusp_child_list.first;

          while v_PolSusp_child_index is not null
          loop

               v_curr_susp_term :=      pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_PolSusp_child_list(v_PolSusp_child_index), -- All suspension objects will point to the current term so we can use the same code.
                                             gbv_PolSusp_RefCurrSuspPolTerm
                                        );
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'v_curr_susp_term: '||v_curr_susp_term
                    );
               end if;
               g_resume_date :=    to_char(
                                        to_date(
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Exp_Date
                                                  ),
                                                  pkg_os_constant.DragonDateFormatDefault
                                             )
                                        ,
                                        pkg_os_constant.DragonDateFormatDefault
                                        );
               
/*               v_pol_term_exp_date :=   to_date(
                                        pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_curr_susp_term,
                                             gbv_PolicyTermExpDate
                                        ), pkg_os_constant.DragonDateFormatDefault) - 1;*/

               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'g_resume_date: '||trunc(to_date(g_resume_date,pkg_os_constant.DragonDateFormatDefault))||
                         'v_curr_policy_date: '||trunc(v_curr_policy_date)
                    );
               end if;

               if trunc(to_date(g_resume_date,pkg_os_constant.DragonDateFormatDefault)) <= trunc(v_curr_policy_date)
               then
                    return    to_date(pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_PolSusp_child_list(v_PolSusp_child_index),
                                   gbv_Suspension_Exp_Date
                              ), pkg_os_constant.DragonDateFormatDefault);
               end if;
               v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
          end loop;
     end if;
     return null;
end fn_get_curr_susp_resume_date;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_db_susp_placeholder_create
(
    in_session_id                       in             object.object_id%type,
    in_transaction_id                   in             object.object_id%type,
    in_object_cache                     in out         pkg_os_object_cache.t_object_cache,
    in_action_object_id                 in             object.object_id%type,
    io_action_outcome_id                in out         outcome.outcome_id%type
)
is
  v_action_object_type_id    object.object_id%type;
  v_suspension_obj_type_id      object.object_id%type;
  v_procedure_name           constant  system_log.program_name%type       :=   pkg_name||'sp_db_susp_placeholder_create';
  v_session_control          pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
begin

  --
  --     Get the object type of the in_object_id ( which would be policy excahnge or billing account) object type.
  --
  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_procedure_name,
      '...... in_action_object_id is : '||in_action_object_id
    );
  end if;

  v_action_object_type_id := pkg_os_object.fn_object_type_get
                              (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id
                              );
  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_procedure_name,
      '...... v_action_object_type_id is : '||v_action_object_type_id
    );
  end if;

  if v_action_object_type_id = gObjType_BillingAccount
  then
     v_suspension_obj_type_id := gObjType_BillAccSuspension;
  elsif v_action_object_type_id = gObjType_Policy
  then
     v_suspension_obj_type_id := gObjType_PolicySuspension;
  elsif v_action_object_type_id = gObjType_Exchange
  then
     v_suspension_obj_type_id := gObjType_ExchSuspension;
  end if;

  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      gObjType_ExchSuspension,
      '...... v_suspension_obj_type_id is : '||v_suspension_obj_type_id
    );
  end if;

  pkg_base_placeholder.sp_placeholder_create
  (
    in_session_id,
    in_transaction_id,
    in_object_cache,
    in_action_object_id,
    v_suspension_obj_type_id,
    io_action_outcome_id
  );

end sp_db_susp_placeholder_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_susp_days_offset
(
    in_session_id                       in             object.object_id%type,
    in_transaction_id                   in             object.object_id%type,
    in_policy_id                        in             object.object_id%type,
    in_actual_date                      in             date,
    in_activity_id                      in             integer
) return integer
is
  v_susp_activity_bv  business_variable.business_variable_id%type;
  v_susp_activity_tf  object_bv_value.business_variable_value%type;
  v_susp_status       object_bv_value.business_variable_value%type;
  v_susp_eff_date     date;
  v_susp_exp_date     date;
  v_current_term      object.object_id%type;
  v_susp_list         object_tt;
  v_days              integer := 0;
   v_target_suspension_trx varchar2 (4000);
begin
	/*--6624 start
  v_susp_activity_bv := g_susp_act_susp_bv_map(in_activity_id);

  if (v_susp_activity_bv is null) then
    raise no_data_found;
  end if;
*/--6624 end
  v_current_term := pkg_db_functions.fn_get_policy_current_term
                    (
                      in_session_id,
                      in_transaction_id,
                      in_policy_id
                    );

  -- get list of PolicySuspension objects related to the current term
  /*pkg_os_object_search.sp_object_with_attribute_get
  (
    in_session_id,
    in_transaction_id,
    in_policy_id,
    gObjType_PolicySuspension,
    gbv_PolSusp_RefCurrSuspPolTerm,
    v_current_term,
    v_susp_list
  );
  */
  
  v_susp_list      := new object_tt();
  
  --replaced pkg_os_object_search.sp_object_with_attribute_get with datamart under OSPRODUCT-21391
  for susp in (
                     select     --OSPRODUCT-21391 replaced pkg_os_object_search.sp_object_with_attribute_get with select query                                    
                          suspension_id
                     from
                          DRAGON_SUSPENSION
                     where
                         suspension_policy_id = in_policy_id
                     and
                         pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id ,suspension_id,gbv_PolSusp_RefCurrSuspPolTerm) = v_current_term
                 ) loop
          v_susp_list.extend;
          v_susp_list(v_susp_list.count) := new object_ot(susp.suspension_id,3193646,in_policy_id, null);
          
   end loop;

  if (v_susp_list.count > 0 ) then
     for i in 1..v_susp_list.count loop
       v_susp_status := pkg_os_object_io.fn_object_bv_get
                             (
                               in_session_id,
                               in_transaction_id,
                               v_susp_list(i).object_id,
                               pkg_os_constant_bv.gbv_GenObjObjectState
                             );
       v_susp_activity_tf := nvl(pkg_os_object_io.fn_object_bv_get
                             (
                               in_session_id,
                               in_transaction_id,
                               v_susp_list(i).object_id,
                               gbv_Susp_Stop_All
                             ), 0);

       if (v_susp_activity_tf <> 1) then
	-- Osbilling 6624
       --Commenting the exiting activity mapping code and replacing it with new suspension Bv's
--         v_susp_activity_tf := nvl(pkg_os_object_io.fn_object_bv_get
--                               (
--                                 in_session_id,
--                                 in_transaction_id,
--                                 v_susp_list(i).object_id,
--                                 v_susp_activity_bv
--                               ), 0);
            v_target_suspension_trx:= nvl(pkg_os_object_io.fn_object_bv_get
                               (
                                 in_session_id,
                                 in_transaction_id,
                                 v_susp_list(i).object_id,
                                 gbv_Suspension_Trx -- Suspended transactions bv at suspension level
                               ), 0);
             v_susp_activity_tf := case when  pkg_os_token.fn_find_in_set (in_activity_id, v_target_suspension_trx ) ='T'  then  1 else 0 end ;
       end if;
       v_susp_eff_date   :=   to_date
                              (
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_susp_list(i).object_id,
                                        gbv_Suspension_Eff_Date
                                   )
                                   ,pkg_os_constant.DragonDateFormatDefault
                              );

       v_susp_exp_date  :=   to_date
                              (
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_susp_list(i).object_id,
                                        gbv_Suspension_Exp_Date
                                   )
                                   ,pkg_os_constant.DragonDateFormatDefault
                              );

       -- if status of suspension object is ResumeBilling and activity was suspended
       if (v_susp_status = 53146
            and v_susp_activity_tf = 1
            and in_actual_date < v_susp_exp_date) then
          v_days := v_days + trunc(v_susp_exp_date)
                 - greatest(
                    trunc(v_susp_eff_date), trunc(in_actual_date));
       end if;
     end loop;
  end if;

  return v_days;
end;
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_date_with_susp_offset
(
    in_session_id                       in             object.object_id%type,
    in_transaction_id                   in             object.object_id%type,
    in_fitem_id                        in             object.object_id%type,
    in_activity_id                      in             integer
) return date
is
  v_policy_id         object.object_id%type;
  v_date_bv           business_variable.business_variable_id%type;
  v_fitem_date        date;
begin
  if (in_activity_id = gSuspend_LateProcess_Activity) then
    v_date_bv := PKG_DB_STMT.gbv_FItemBillingDueDate;
  elsif (in_activity_id in (gSuspend_WriteOff_Activity, gSuspend_CreditDisb_Activity) ) then
    v_date_bv := 32447331; --Fitem Funds Mvmnt Latest Date
  else
    -- raise error here since other activities are not supported yet
    raise no_data_found;
  end if;

  v_policy_id := pkg_os_object_io.fn_object_bv_get
                 (
                   in_session_id,
                   in_transaction_id,
                   in_fitem_id,
                   PKG_DB_STMT.gbv_FItemRefPolicy
                 );

  v_fitem_date := to_date
                 (
                    pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      in_fitem_id,
                      v_date_bv
                    )
                    ,pkg_os_constant.DragonDateFormatDefault
                 );


  return v_fitem_date + fn_get_susp_days_offset(in_session_id, in_transaction_id, v_policy_id, v_fitem_date, in_activity_id);
end;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_db_policy_trx_suspension
--
--   %USAGE
--        This procedure will be used to mark Policy as Suspended in case of Out Of Sequence transaction, until Rollforward transaction has been completed.
--
--
--   %ALGORITHM

--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_policy_trx_id              Policy Transaction Id
--   %PARAM             in_policy_trx_type_id         Policy Transaction Type Id
--   %PARAM             io_action_outcome_id          Action Outcome.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_db_policy_trx_suspension
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_trx_id              in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
    V_Session_Control              		Pkg_Os_Session.R_Dragon_Session_Control      :=   Pkg_Os_Session.Fn_Session_Control_Get(In_Session_Id, In_Transaction_Id) ;
    v_procedure_name                	constant  system_log.program_name%type       :=   pkg_name||'sp_db_policy_trx_suspension';

     v_suspension_id                	object.object_id%type;
     v_policy_id                    	object.object_id%type;
     v_last_oos_transaction_id      	object.object_id%type;
     v_last_processed_trx_id        	object.object_id%type;
     v_rollsfwd_transaction_id      	object.object_id%type;
     v_policy_trx_type_id           	object.object_id%type;
     v_exchange_suspension_id       	object.object_id%type;

     v_PC_reason_code               	number; --OSBILLING-6798
     v_PT_reason_code               	number; --OSBILLING-6798
     v_Policy_Can_id                	object.object_id%type;
     v_unresolved_rollback_trx_cnt      number;
     -- OSBILLING-7286
     v_InternalSusp_Ind             object_bv_value.business_variable_value%type;

     v_curr_policy_term                 object.object_id%type;--OSBILLING-7390
     v_bv_table                     	pkg_os_object_io.t_bv_table;
     v_policy_current_date              date; 
     v_policy_effective_date            date;
     v_policy_expiration_date           date;
     v_PolSusp_child_list               pkg_os_object.t_object_list;
     v_PolSusp_child_index              number;
     v_PolSusp_objectState              object_state.object_state_id%type;
     v_suspended_trx                    varchar2(400):=null;
     v_Susp_objectState                 object_state.object_state_id%type;
     v_datamart_tf                      char(1) :='T';
     v_bor_initiated_trx_tf             number; -- OSPRODUCT-6799
     v_custom_suspension_tf             char(1) :='F'; -- UTPRODUCT-4564
     v_override_suspnse_activities      object_bv_value.business_variable_value%type; -- UTPRODUCT-4564
     
begin

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     v_bor_initiated_trx_tf := nvl ( pkg_os_object_io.fn_object_bv_get -- OSPRODUCT-6799
                                     (
                                           in_session_id,
                                           in_transaction_id,
                                           in_session_id,
                                           gbv_UserSession_BOR_trx
                                     ), pkg_os_constant_enum.gBoolean_False
                                   );

    v_policy_id := pkg_os_object.fn_object_parent_get
                   (
                        in_session_id,
                        in_transaction_id,
                        in_policy_trx_id
                   );

     v_policy_trx_type_id := pkg_os_object_io.fn_object_bv_get
                             (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_trx_id,
                                     pkg_os_constant_bv.gbv_PolicyTranType
                             );

      --OSBILLING-6798
      v_PT_reason_code :=    pkg_os_object_io.fn_object_bv_get
                             (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_trx_id,
                                    gbv_PolicyTrx_CanReason
                             );

      v_Policy_Can_id :=    pkg_os_object_io.fn_object_bv_get
                             (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_trx_id,
                                     pkg_os_policy_cancellation.gbv_ChildCancellation
                             );

      v_PC_reason_code :=    pkg_os_object_io.fn_object_bv_path_get
                             (
                                     in_session_id,
                                     in_transaction_id,
                                     v_Policy_Can_id,
                                     212185
                             );
     v_last_processed_trx_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id,
                                             pkg_os_constant_bv.gbv_LastProcessedTransaction
                                        );

     -- Get last OOS Transaction ID
     v_last_oos_transaction_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_policy_id,
                                       pkg_os_constant_bv.gbv_LastTrxnResultedInOOS
                                  );

     -- Get referenced Transaction ID which is being rollforwarded
     v_rollsfwd_transaction_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_policy_trx_id,
                                       pkg_os_policy_transaction.gbv_PolicyTrxRollsFwdTrx
                                  );

    -- Get unresolved Rollback Transactions quantity
     v_unresolved_rollback_trx_cnt := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_policy_id,
                                           pkg_os_policy_transaction.gbv_PolicyUnResolvedRolbckTrxn
                                      );
     v_curr_policy_term            :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id,
                                             gbv_CurrentTermFromRolledDate
                                        ); --OSBILLING-7390
     If v_Session_Control.Glogging_Full

     then
       pkg_os_logging.sp_log
       (
         in_session_id,
         in_transaction_id,
         V_Procedure_Name,
         '...... in_policy_trx_id : '||in_policy_trx_id
         ||'v_last_processed_trx_id:'||v_last_processed_trx_id
         ||'v_last_oos_transaction_id:'||v_last_oos_transaction_id
         ||'v_policy_trx_type_id:'||v_policy_trx_type_id
         ||'v_PT_reason_code:'||v_PT_reason_code
         ||'v_PC_reason_code:'||v_PC_reason_code
         ||'v_unresolved_rollback_trx_cnt: '||v_unresolved_rollback_trx_cnt
       );
     end if;
     
     if    v_bor_initiated_trx_tf = pkg_os_constant_enum.gBoolean_False -- OSPRODUCT-6799
                                                           -- for some reason, the True value for the UserSession.BOR Transfer Indicator is 111 (set in some intit rule in an Action Flow).
                                                           -- Billing does not want to carry the True(111) to the package, so analyzing is the BV is not set.
                                                           -- If at some point they set the False to smth different from Ҭ we will have problem.
     then
          v_custom_suspension_tf := pkg_cs_db_functions.fn_override_suspension_tf  -- UTPRODUCT-4564
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_trx_id,
                                    v_policy_trx_type_id
                               );
     
     if ( -- Current transaction is OOS Endorsement --
          v_last_processed_trx_id = v_last_oos_transaction_id
          or
          ( --OSBILLING-6802
          v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Rollback
          and
          nvl(v_unresolved_rollback_trx_cnt,0) <> 0
          )
          or
         (
          v_policy_trx_type_id in (pkg_os_policy_transaction.gPolicyTrxType_CancelInsured, pkg_os_policy_transaction.gPolicyTrxType_CancelNonPay)
          and


          (NVL(v_PT_reason_code,0) = 11   --OSBILLING-6798
          or
          NVL(v_PC_reason_code,0) in(2,6)
          )
          )
        )
             or
                  nvl(v_custom_suspension_tf,'F') = 'T'  -- UTPRODUCT-4564
     then
--         v_suspension_id :=  fn_get_current_susp_id
--                             (
--                                  in_session_id,
--                                  in_transaction_id,
--                                  v_policy_id,
--                                  gObjType_PolicySuspension
--                             );


         -- Create new Suspension Object --
--         if v_suspension_id is null
--         then
      if fn_db_is_activity_suspended(in_session_id,in_transaction_id,v_policy_id,13) <> 1 then 

              sp_db_susp_placeholder_create
              (
                   in_session_id,
                   in_transaction_id,
                   io_object_cache,
                   v_policy_id,
                   io_action_outcome_id
              );

              v_suspension_id := pkg_os_object_search.fn_object_children_of_typ_last
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_policy_id,
                                      gObjType_PolicySuspension
                                 );
			 --UTPRODUCT-1462					 
             PKG_CS_DB_BILLING.sp_suspension_task_create(in_session_id,in_transaction_id,v_suspension_id);
       If v_Session_Control.Glogging_Full

          then
            pkg_os_logging.sp_log
            (
              in_session_id,
              in_transaction_id,
              V_Procedure_Name,
              '...... v_suspension_id : '||v_suspension_id||
              '...... in_policy_trx_id : '||in_policy_trx_id
            );
          end if;

        /*  end if;


         if v_suspension_id is not null
         then
*/
              -- Prepare flags for disbursements, scheduled withdrawals, late process, billing document generation activities suspension on the Policy --
         --     v_bv_table(gbv_Susp_Stop_Credit_Disb).business_variable_value := 1;
       --       v_bv_table(gbv_Susp_Stop_Late_Process).business_variable_value:= 1;
       --       v_bv_table(gbv_Susp_Stop_Invoices).business_variable_value := 1;
         --     v_bv_table(gbv_Susp_Stop_EFTCC_Req).business_variable_value := 1;

               --OSPRODUCT-2012
               --OSPRODUCT-3967 removing trunc
               v_policy_current_date :=      pkg_db_functions.fn_get_policy_current_date( in_session_id,in_transaction_id, v_policy_id ) ;
               v_policy_effective_date :=   to_date(pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_policy_id,
                                                     pkg_os_policy_transaction.gbv_PolicyEffectiveDate
                                                ),pkg_os_constant.DragonDateFormatDefault);
                v_policy_expiration_date :=   to_date(pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_policy_id,
                                                     pkg_os_policy_transaction.gbv_PolicyExpirationDate
                                                ),pkg_os_constant.DragonDateFormatDefault);
                    
                --OSPRODUCT-2012
               v_bv_table(gbv_Susp_Stop_Trx).business_variable_value := '3,12,7,8,9,10,11,13' ;--stop OOS, credit disbursemnt, late Notice, Invoices, EFTCC

                    -- UTPRODUCT-4564 
                    -- Override the Suspension Activity list. 
                    v_override_suspnse_activities := pkg_cs_db_functions.fn_override_suspnse_activities  -- UTPRODUCT-4564
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             in_policy_trx_id,
                                                             v_policy_trx_type_id
                                                        ); 
                    
                    if v_override_suspnse_activities is not null then                                    
                         
                         v_bv_table(gbv_Susp_Stop_Trx).business_variable_value := v_override_suspnse_activities;
                    
                    end if; 
                    -- UTPRODUCT-4564
                         
                if     trunc(v_policy_current_date) <     trunc(v_policy_effective_date)
                   then
                      v_bv_table(gbv_Suspension_Eff_Date).business_variable_value :=to_char(v_policy_effective_date,pkg_os_constant.DragonDateFormatDefault);
                   elsif trunc(v_policy_current_date) >     trunc(v_policy_expiration_date)
                   then
                      v_bv_table(gbv_Suspension_Eff_Date).business_variable_value :=to_char(v_policy_expiration_date,pkg_os_constant.DragonDateFormatDefault);
                   else
                      v_bv_table(gbv_Suspension_Eff_Date).business_variable_value :=to_char(v_policy_current_date,pkg_os_constant.DragonDateFormatDefault);                   
                   end if;  
                   --OSPRODUCT-2012
               v_bv_table(gbv_Suspension_Exp_Date).business_variable_value :=     pkg_os_object_io.fn_object_bv_get
                                                                                                    (
                                                                                                         in_session_id,
                                                                                                         in_transaction_id,
                                                                                                         v_policy_id,
                                                                                                         pkg_os_policy_transaction.gbv_PolicyExpirationDate
                                                                                                    );
               -- OSBILLING-7286
               v_bv_table(gbv_Susp_Internal_Susp_Ind).business_variable_value := 1;



              pkg_os_object_io.sp_object_bv_set
              (
                   in_session_id,
                   in_transaction_id,
                   v_suspension_id,
                   v_bv_table
              );

              -- Suspend --
              sp_db_suspension
              (
                   in_session_id,
                   in_transaction_id,
                   v_suspension_id,
                   io_action_outcome_id
              );

          end if;
     --@keerthi the rollforward transaction reference is not set if there is a discard transaction.
     else -- (v_rollsfwd_transaction_id is not null) -- Current transaction is Rollforward
     --then


          If v_Session_Control.Glogging_Full

          then
            pkg_os_logging.sp_log
            (
              in_session_id,
              in_transaction_id,
              V_Procedure_Name,
              '...... resuming : '||v_policy_id
            );
          end if;

          -- Get unresolved Rollback Transactions quantity
          v_unresolved_rollback_trx_cnt := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                pkg_os_policy_transaction.gbv_PolicyUnResolvedRolbckTrxn
                                           );

          if (v_unresolved_rollback_trx_cnt = 0)
          then

               -- 
               -- get the policy suspension suspended children -OSPRODUCT-3036
               --

               pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_policy_id ,
                            gObjType_PolicySuspension,
                            v_PolSusp_child_list
                       );
                 If v_Session_Control.Glogging_Full

                      then
                        pkg_os_logging.sp_log
                        (
                          in_session_id,
                          in_transaction_id,
                          V_Procedure_Name,
                          '...... v_PolSusp_child_list.count : '||v_PolSusp_child_list.count
                        );
                      end if;
               v_PolSusp_child_index :=v_PolSusp_child_list.first;
               If v_Session_Control.Glogging_Full

                      then
                        pkg_os_logging.sp_log
                        (
                          in_session_id,
                          in_transaction_id,
                          V_Procedure_Name,
                          '...... v_PolSusp_child_index. : '||v_PolSusp_child_index
                        );
                end if;
                while v_PolSusp_child_index is not null
                 loop
                    v_PolSusp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_PolSusp_child_list(v_PolSusp_child_index),
                                          gbv_GenericObj_ObjectState--210153
                                         );
                     v_InternalSusp_Ind :=  Nvl(pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_PolSusp_child_list(v_PolSusp_child_index),
                                        gbv_Susp_Internal_Susp_Ind
                                   ),0);
                     v_suspended_trx    := pkg_os_object_io.fn_object_bv_get
												(
												  in_session_id,
												  in_transaction_id,
												  v_PolSusp_child_list(v_PolSusp_child_index),
												  32525248
												 );
                    If v_Session_Control.Glogging_Full

                      then
                        pkg_os_logging.sp_log
                        (
                          in_session_id,
                          in_transaction_id,
                          V_Procedure_Name,
                          '...... v_PolSusp_objectState. : '||v_PolSusp_child_index||
                          '...v_InternalSusp_Ind: '||v_InternalSusp_Ind||
                          '...v_suspended_trx: '||v_suspended_trx
                        );
                    end if;
                     if v_PolSusp_objectState = 54346 
                     and 
                        v_InternalSusp_Ind =1 
                     and 
                       pkg_os_token.fn_find_in_set ( 13, v_suspended_trx) ='T' 
                         then
                         v_suspension_id:=      v_PolSusp_child_list(v_PolSusp_child_index);
                            If v_Session_Control.Glogging_Full

                              then
                                pkg_os_logging.sp_log
                                (
                                  in_session_id,
                                  in_transaction_id,
                                  V_Procedure_Name,
                                  '...... v_suspension_id : '||v_suspension_id
                                );
                              end if;
                    end if;
                      v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
                end loop;
                --OSPRODUCT-3036 end
--               v_suspension_id :=  fn_get_current_susp_id
--                                   (
--                                        in_session_id,
--                                        in_transaction_id,
--                                        v_policy_id,
--                                        gObjType_PolicySuspension
--                                   );

              -- OSBILLING-7286
               if v_suspension_id  is not null 
               then

                    --@keerthi
                    -- verify that the susepnsion is not created by Moratorium suspension
                    v_exchange_suspension_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_suspension_id,32963064) ;
                    If v_Session_Control.Glogging_Full

                              then
                                pkg_os_logging.sp_log
                                (
                                  in_session_id,
                                  in_transaction_id,
                                  V_Procedure_Name,
                                  '...... v_exchange_suspension_id : '||v_exchange_suspension_id
                                );
                     end if;
                    if v_exchange_suspension_id is null --@keerthi
                    then
                     --OSPRODUCT-3967 removing trunc
                    v_policy_current_date  :=   pkg_db_functions.fn_get_policy_current_date( in_session_id,in_transaction_id, v_policy_id ) ;
                    v_policy_effective_date  :=   to_date(pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_policy_id,
                                                       pkg_os_policy_transaction.gbv_PolicyEffectiveDate
                                                  ),pkg_os_constant.DragonDateFormatDefault);
                    v_policy_expiration_date :=   to_date(pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_policy_id,
                                                     pkg_os_policy_transaction.gbv_PolicyExpirationDate
                                                ),pkg_os_constant.DragonDateFormatDefault);                         
                         
                         
                         If v_Session_Control.Glogging_Full

                              then
                                pkg_os_logging.sp_log
                                (
                                  in_session_id,
                                  in_transaction_id,
                                  V_Procedure_Name,
                                  '...... v_policy_current_date : '||v_policy_current_date||
                                  '...... v_policy_effective_date: '||v_policy_effective_date||
                                  '...... v_policy_expiration_date: '||v_policy_expiration_date
                                );
                         end if;
                        if     trunc(v_policy_current_date) <     trunc(v_policy_effective_date)
                        then                        
                                 -- Set Suspension Expiration Date to Policy Effective Date --
                                  pkg_os_object_io.sp_object_bv_set
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_suspension_id,
                                       gbv_Suspension_Exp_Date,
                                       to_char( v_policy_effective_date, pkg_os_constant.DragonDateFormatDefault)
                                  );          
                                  
                                  pkg_os_object_io.sp_object_bv_set
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_suspension_id,
                                       33782248, -- force Resume
                                       1
                                  ); --LXPRODUCT-538
                                                          

                        elsif  trunc(v_policy_current_date) >     trunc(v_policy_expiration_date)
                        then
                                
                                  pkg_os_object_io.sp_object_bv_set
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_suspension_id,
                                       gbv_Suspension_Exp_Date,
                                       to_char( v_policy_expiration_date, pkg_os_constant.DragonDateFormatDefault)
                                  ); 
                         else
                              -- -- Set Suspension Expiration Date to Policy Current Date --
                              pkg_os_object_io.sp_object_bv_set
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_suspension_id,
                                       gbv_Suspension_Exp_Date,
                                       to_char( v_policy_current_date, pkg_os_constant.DragonDateFormatDefault)
                                  );
                        end if; 
                    --OSPRODUCT-3967
                     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_suspension_id, v_datamart_tf);

                    -- Resume --
                    sp_db_resume
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_id,
                         io_action_outcome_id
                    );
				--UTPRODUCT-1462
                -- get the state of the suspension object, if it is resumed than close the automatic suspension task
               v_Susp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_suspension_id,
                                          gbv_GenericObj_ObjectState--210153
                                         );
               if v_Susp_objectState=53146 then 
                PKG_CS_DB_BILLING.sp_suspension_task_close(in_session_id,in_transaction_id,v_suspension_id);
               end if;
               
               end if;
               end if;
          end if; -- v_unresolved_rollback_transaction_cnt = 0

     end if;
     else    
          -- Skip Suspension creation -- -- OSPRODUCT-6799
          if v_Session_Control.Glogging_Full
          then    
              pkg_os_logging.sp_log
              (
                  in_session_id,
                  in_transaction_id,
                  V_Procedure_Name,
                  '...... This is a BOR initiated transaction, skipping the OOS Suspension transaction creation process.'
              );          
          end if;
     end if;
end sp_db_policy_trx_suspension;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- osproduct-2013
-- this function loops all the policy suspension objects under the policy and returns 1 if  atleast one active suspension is present
-- (any current or future suspension).
function fn_policy_susp_active_tf
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policyterm_id                   in             object.object_id%type,
     in_suspension_type                 in             number default 3  --OSPRODUCT-7294    
)
return number
is


     v_session_control                pkg_os_session.r_dragon_session_control :=  pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                 constant system_log.program_name%type   :=  'pkg_db_suspension.'||'fn_policy_susp_active_tf';
     v_PolSusp_child_list             pkg_os_object.t_object_list;
     v_PolSusp_child_index            number;
     v_PolSusp_objectState            object_state.object_state_id%type;
     v_responsible_billing_account    object.object_id%type;
     v_policyterm_current             object.object_id%type;
     v_policyterm_effective_date      object_bv_value.business_variable_value%type;
     v_Susp_EffectiveDate             object_bv_value.business_variable_value%type:=null;
     v_Susp_ResumeDate                object_bv_value.business_variable_value%type:=null;
     v_policyterm_expiry_date         object_bv_value.business_variable_value%type:=null;
     v_policy_id                      object.object_id%type;
begin


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Policy term id: '||in_policyterm_id
          );

     end if;
     --
     -- get the current term of policy , effective date of the current term
     --


      v_policyterm_effective_date:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          in_policyterm_id,
                                          29705846
                                         );
      v_policyterm_expiry_date:=     pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          in_policyterm_id,
                                          29705946
                                         );  
      v_policy_id:=                  pkg_os_object.fn_object_parent_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          in_policyterm_id
                                          );
     -- OSPRODUCT-4959 
     -- First check Moratorium Suspensions
     --    
     if  fn_moratorium_suspension_get
         (
              in_session_id,
              in_transaction_id,
              v_policy_id,
              in_activity_id => NULL -- at one go, check all possible billing activities (transaction types) that can be suspended by Moratorium. The check is done as of SYSDATE.
         ) is not null
     then
          return 1;
     end if;
     -- /OSPRODUCT-4959   

     --
	 -- Get the responsible billing account id 
	 --
--OSPRODUCT-7273
/*	 select 
        responsible_billing_account 
	 into
		v_responsible_billing_account 
	 from 
		dragon_policy
	 where
		policy_id=v_policy_id;*/


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Responsible Billing Account: '||v_responsible_billing_account||
               '...Current policy term: '||in_policyterm_id||
               '...Curernt policy term effective date: '||v_policyterm_effective_date||
               '...current policy term expiry date:    '||v_policyterm_expiry_date||
               '...master policy id: '||v_policy_id
          );

     end if;	
     if in_suspension_type = 3 then
     for r_ba in c_billing_account(v_policy_id) loop  --OSPRODUCT-7273
          sp_get_active_susp_objects 
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_id,
                                   r_ba.billing_account, --OSPRODUCT-7273
                                   v_PolSusp_child_list,
                                   3
                              );


          if v_session_control.gLogging_Full 
               then
                   pkg_os_logging.sp_log
                       (
                            in_session_id, 
                            in_transaction_id, 
                            v_procedure_name,
                            'Counts of Policy Suspension objects found: '||v_PolSusp_child_list.count
                       );
          end if;


         v_PolSusp_child_index := v_PolSusp_child_list.first;
         while v_PolSusp_child_index is not null
           loop
                            v_Susp_EffectiveDate :=  to_char(
                                                    to_date(pkg_os_object_io.fn_object_bv_get
                                                     (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Eff_Date
                                                      ),
                                                        pkg_os_constant.DragonDateFormatDefault
                                                       ),
                                                     pkg_os_constant.DragonDateFormatDefault);
                           v_Susp_ResumeDate  :=  to_char(
                                                    to_date(pkg_os_object_io.fn_object_bv_get
                                                     (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Exp_Date
                                                      ),
                                                        pkg_os_constant.DragonDateFormatDefault
                                                       ),
                                                     pkg_os_constant.DragonDateFormatDefault);

                         if v_session_control.gLogging_Full then

                           pkg_os_logging.sp_log
                           (
                                in_session_id, 
                                in_transaction_id, 
                                v_procedure_name,
                                'suspension object: '|| v_PolSusp_child_list(v_PolSusp_child_index)||
                                '...effective date: '|| trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))||
                                '...resume date: '|| trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))||
                                '...policy term effective date: '|| trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault))||
                                '...policy term expiry date: '||trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault))
                           );

                      end if;	

             if -- if date policy term effective date is between suspension and resume then the term is suspended.
     --           (trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) <= 
     --                                                trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
     --           and 
     --           (trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) >= 
     --                                                trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
     --            or 
     --            v_Susp_ResumeDate is null
     --            )
     --            )
     --            or 
     --            (
     --            trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) >= 
     --                                                trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
     --           and 
     --           (trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) <= 
     --                                                trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
     --            or 
     --            v_Susp_ResumeDate is null
     --            )
     --            
     --            )
                  (trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) between
                  trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                  or   
                  ( trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault)) between
                    trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                  or 
                  ( (trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) between
                  trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                    and v_Susp_ResumeDate is null
                  )
                 then
                  return 1;
            end if;
            v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
           end loop;
      end loop;
     --OSPRODUCT-7294 start    
     elsif in_suspension_type = 1 then
          sp_get_active_susp_objects 
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_id,
                                   null,--r_ba.billing_account, --OSPRODUCT-7273
                                   v_PolSusp_child_list,
                                   in_suspension_type
                              );
          if v_session_control.gLogging_Full 
               then
                   pkg_os_logging.sp_log
                       (
                            in_session_id, 
                            in_transaction_id, 
                            v_procedure_name,
                            'Counts of Policy Suspension objects found: '||v_PolSusp_child_list.count
                       );
          end if;
         v_PolSusp_child_index := v_PolSusp_child_list.first;
         while v_PolSusp_child_index is not null
           loop
                            v_Susp_EffectiveDate :=  to_char(
                                                    to_date(pkg_os_object_io.fn_object_bv_get
                                                     (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Eff_Date
                                                      ),
                                                        pkg_os_constant.DragonDateFormatDefault
                                                       ),
                                                     pkg_os_constant.DragonDateFormatDefault);
                           v_Susp_ResumeDate  :=  to_char(
                                                    to_date(pkg_os_object_io.fn_object_bv_get
                                                     (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Exp_Date
                                                      ),
                                                        pkg_os_constant.DragonDateFormatDefault
                                                       ),
                                                     pkg_os_constant.DragonDateFormatDefault);
                         if v_session_control.gLogging_Full then
                           pkg_os_logging.sp_log
                           (
                                in_session_id, 
                                in_transaction_id, 
                                v_procedure_name,
                                'suspension object: '|| v_PolSusp_child_list(v_PolSusp_child_index)||
                                '...effective date: '|| trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))||
                                '...resume date: '|| trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))||
                                '...policy term effective date: '|| trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault))||
                                '...policy term expiry date: '||trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault))
                           );
                      end if;	
             if -- if date policy term effective date is between suspension and resume then the term is suspended.
     --           (trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) <= 
     --                                                trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
     --           and 
     --           (trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) >= 
     --                                                trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
     --            or 
     --            v_Susp_ResumeDate is null
     --            )
     --            )
     --            or 
     --            (
     --            trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) >= 
     --                                                trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
     --           and 
     --           (trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) <= 
     --                                                trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
     --            or 
     --            v_Susp_ResumeDate is null
     --            )
     --            
     --            )
                  (trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) between
                  trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                  or   
                  ( trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault)) between
                    trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                  or 
                  ( (trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) between
                  trunc(to_date(v_policyterm_effective_date,pkg_os_constant.DragonDateFormatDefault)) and 
                  trunc(to_date(v_policyterm_expiry_date,pkg_os_constant.DragonDateFormatDefault)) 
                  )
                    and v_Susp_ResumeDate is null
                  )
                 then
                  return 1;
            end if;
            v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
           end loop;
     end if;
     --OSPRODUCT-7294 end
      return 0;

end fn_policy_susp_active_tf;
-- this function loops all the BA suspension objects under the billing account and returns 1 if atleast active suspension is there
-- (any current or future suspension).
function fn_ba_susp_active_tf
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_id                       in             object.object_id%type    
)
return number
is


     v_session_control                pkg_os_session.r_dragon_session_control :=  pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                 constant system_log.program_name%type   :=  'pkg_db_suspension.'||'fn_ba_susp_active_tf';
     v_BASusp_child_list             pkg_os_object.t_object_list;
     v_BASusp_child_index            number;
     v_BASusp_objectState            object_state.object_state_id%type;

begin


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Searching Billing account suspension objects for billing account id: '||in_billing_account_id
          );

     end if;

     pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            in_billing_account_id ,
                            gObjType_BillAccSuspension,
                            v_BASusp_child_list
                       );

     if v_session_control.gLogging_Full 
          then
              pkg_os_logging.sp_log
                  (
                       in_session_id, 
                       in_transaction_id, 
                       v_procedure_name,
                       'Counts of BA Suspension objects found: '||v_BASusp_child_list.count
                  );
     end if;

      v_BASusp_child_index :=v_BASusp_child_list.first;

       while v_BASusp_child_index is not null and v_BASusp_child_list.count>0
            loop

             --get the status of the policy suspension object
                v_BASusp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_BASusp_child_list(v_BASusp_child_index),
                                          gbv_GenericObj_ObjectState--210153
                                         );
                if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'BA Suspension object id: '|| v_BASusp_child_list(v_BASusp_child_index)||
                                             ' has object state: '||v_BASusp_objectState
                                        );
                end if; 

                if v_BASusp_objectState = 54346 then --PolicyBillingAccountSuspended
                 return 1;
                end if;

                 v_BASusp_child_index := v_BASusp_child_list.next(v_BASusp_child_index);
            end loop;

            return 0;
end fn_ba_susp_active_tf;
------------------------------------------------------------------------------------------------------------------------------------------
-- osproduct-2013
-- this function will return True if same type of transaction is suspended for same period(resume date)
function  fn_susp_activity_overlap_tf
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_suspension_object_id            in             object.object_id%type    
)
return number
is
     v_session_control                pkg_os_session.r_dragon_session_control :=  pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                 constant system_log.program_name%type   :=  'pkg_db_suspension.'||'fn_susp_activity_overlap_tf';
     v_susp_child_list                pkg_os_object.t_object_list;
     v_susp_child_list_index          number;
     v_susp_objectState               object_state.object_state_id%type;
     v_master_policy_id               object.object_id%type;
	 v_billing_account_id             object.object_id%type;
     v_suspended_trx                  varchar2(400):=null;
     v_suspended_trx_input_object     varchar2(400):=null;
     g_resume_date                    object_bv_value.business_variable_value%type;
	 g_suspension_effective_date      object_bv_value.business_variable_value%type;
     g_resume_date_input_object       object_bv_value.business_variable_value%type;
	 g_suspension_date_input_object   object_bv_value.business_variable_value%type;
     v_current_date                   date;
     v_in_object_type                 object.object_id%type;
     v_responsible_billing_account    object.object_id%type;
begin
     --
     -- get the object type of the suspension object
     --
     v_in_object_type := pkg_os_object.fn_object_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_suspension_object_id
                         );

     if v_session_control.gLogging_Full 
          then 
                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        'Suspension Object Type: '||v_in_object_type
                    );
     end if; 

	 --
	 -- Get the suspended transactions, effective date and suspension date for the input object
	 --
     v_suspended_trx_input_object := pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          in_suspension_object_id,
                                          32525248
                                         );

     g_resume_date_input_object := to_char(
										  to_date(
										   pkg_os_object_io.fn_object_bv_get
										   (
											 in_session_id,
											 in_transaction_id,
											 in_suspension_object_id,
											 gbv_Suspension_Exp_Date
										   ),
										   pkg_os_constant.DragonDateFormatDefault
										  )
										,
										pkg_os_constant.DragonDateFormatDefault);
     g_suspension_date_input_object  := to_char(
											  to_date(
												pkg_os_object_io.fn_object_bv_get
												      (
														in_session_id,
														in_transaction_id,
														in_suspension_object_id,
														gbv_Suspension_Eff_Date  -- Policty term status BV
													   ),
													pkg_os_constant.DragonDateFormatDefault
												  )
											   ,
												pkg_os_constant.DragonDateFormatDefault
												   );
     if v_session_control.gLogging_Full 
	      then

                pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Suspended transaction of input object: '|| v_suspended_trx_input_object||
                    'Suspension Resume date of input object: '||g_resume_date_input_object||
					'Suspension Effective date of input object '||g_suspension_date_input_object
                  );
     end if;  
	 if  v_in_object_type = gObjType_PolicySuspension
	      then
			v_master_policy_id:=  pkg_os_object_search.fn_object_get_parent_of_type
										(in_session_id, 
                                         in_transaction_id, 
                                         in_suspension_object_id,
                                         gObjType_Policy --24
                                        );
            v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, v_master_policy_id);
             --
             -- Get the responsible billing account id 
             --
             select 
                responsible_billing_account 
             into
                v_responsible_billing_account 
             from 
                dragon_policy
             where
                policy_id=v_master_policy_id;

		if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Policy ID: '||v_master_policy_id

          );

        end if;
		--
		-- Get the Policy Suspension Objects
		--
        sp_get_active_susp_objects 
					(
						in_session_id,
						in_transaction_id,
						v_master_policy_id,
						v_responsible_billing_account,
						v_susp_child_list,
						3
					);
--		pkg_os_object_search.sp_object_children_of_type_get
--                       (
--                            in_session_id,
--                            in_transaction_id,
--                            v_master_policy_id ,
--                            gObjType_PolicySuspension,--3193646
--                            v_susp_child_list
--                       );
		if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Count of policy suspension objects: '||v_susp_child_list.count

          );

        end if;

	 end if;
	 if  v_in_object_type = gObjType_BillAccSuspension
	      then
			v_billing_account_id:=  pkg_os_object_search.fn_object_get_parent_of_type
										(in_session_id, 
                                         in_transaction_id, 
                                         in_suspension_object_id,
                                         gObjType_BillingAccount --2365346
                                        );
	         v_current_date := pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, v_billing_account_id);
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log
              (
                   in_session_id, 
                   in_transaction_id, 
                   v_procedure_name,
                   'Billing Account ID: '||v_billing_account_id||
                   'current date: '||v_current_date

              );

            end if;

		--
		-- Get the Billing Account Suspension objects
		--
		pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_billing_account_id ,
                            gObjType_BillAccSuspension,
                            v_susp_child_list
                       );

		if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Count of billing account suspension objects: '||v_susp_child_list.count

          );

        end if;

	 end if;

     v_susp_child_list_index := v_susp_child_list.first;

     while v_susp_child_list_index is not null
          loop
             v_susp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_susp_child_list(v_susp_child_list_index),
                                          gbv_GenericObj_ObjectState
                                        );
             if v_session_control.gLogging_Full then

                                    pkg_os_logging.sp_log
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_procedure_name,
                                         'Suspension object: '|| v_susp_child_list(v_susp_child_list_index)||
                                         'has object state: '||v_susp_objectState
                                     );
             end if; 

             if v_susp_objectState = 54346
			    and 
				v_susp_child_list(v_susp_child_list_index) <> in_suspension_object_id
 			      then 
                    --
					-- Get the transaction and suspension effective and resume date
					--
					 v_suspended_trx := pkg_os_object_io.fn_object_bv_get
												(
												  in_session_id,
												  in_transaction_id,
												  v_susp_child_list(v_susp_child_list_index),
												  32525248
												 );

					 g_resume_date := to_char(
										  to_date(
										   pkg_os_object_io.fn_object_bv_get
										   (
											 in_session_id,
											 in_transaction_id,
											 v_susp_child_list(v_susp_child_list_index),
											 gbv_Suspension_Exp_Date
										   ),
										   pkg_os_constant.DragonDateFormatDefault
										  )
										,
										pkg_os_constant.DragonDateFormatDefault);

					 g_suspension_effective_date := to_char(
										  to_date(
										   pkg_os_object_io.fn_object_bv_get
										   (
											 in_session_id,
											 in_transaction_id,
											 v_susp_child_list(v_susp_child_list_index),
											 gbv_Suspension_Eff_Date
										   ),
										   pkg_os_constant.DragonDateFormatDefault
										  )
										,
										pkg_os_constant.DragonDateFormatDefault);



					 if v_session_control.gLogging_Full 
					       then
											pkg_os_logging.sp_log
											(
												 in_session_id,
												 in_transaction_id,
												 v_procedure_name,
												 'Suspended transactions: '|| v_suspended_trx||
												 'Resume date: '||g_resume_date||
												 'Suspension effective date: '||g_suspension_effective_date
											 );
					 end if; 
                     if v_suspended_trx in (v_suspended_trx_input_object) 
					   and  
					     nvl(g_resume_date_input_object,trunc(v_current_date)) <= nvl(g_resume_date,trunc(v_current_date))
					   and 
					     nvl(g_suspension_date_input_object,trunc(v_current_date)) >= nvl(g_suspension_effective_date,trunc(v_current_date))    
					      then
							 if v_session_control.gLogging_Full then

													pkg_os_logging.sp_log
													(
														 in_session_id,
														 in_transaction_id,
														 v_procedure_name,
														 'Transaction is already suspended for this period'
													 );
							 end if;
							 return 1;
                     end if;
             end if;
             v_susp_child_list_index := v_susp_child_list.next(v_susp_child_list_index);

          end loop;

          return 0;
end fn_susp_activity_overlap_tf;
-- osproduct-2013
-- this function will return all the suspension objects that are suspended for current period
procedure sp_get_active_susp_objects
(
     in_session_id                      in            object.object_id%type,
     in_transaction_id                  in            object.object_id%type,
     in_policy_id                       in            object.object_id%type default null,
     in_billing_account_id              in            object.object_id%type,
     out_object_list                    in out        pkg_os_object.t_object_list,
     in_type_of_susp_list_required      in            number -- 1-> Policy Suspension | 2-> Billing Account Suspension | 3 -> Both Policy and Billing Account Suspension
)
as

     v_PolSusp_list                    pkg_os_object.t_object_list;
     v_BASusp_list                     pkg_os_object.t_object_list;
     v_list                            pkg_os_object.t_object_list;
     v_session_control                 pkg_os_session.r_dragon_session_control :=  pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                  constant system_log.program_name%type   :=  'pkg_db_suspension.'||'sp_get_active_susp_objects';
     v_Susp_ObjectState                object_state.object_state_id%type := null;
     v_Susp_EffectiveDate              object_bv_value.business_variable_value%type;
	 v_policy_current_date             date;
	 v_BA_current_date                 date;
     v_current_date                    date;
     v_responsible_billing_account     object_bv_value.business_variable_value%type;  
begin

	 if in_type_of_susp_list_required in (1,3) and in_policy_id is not null
          then 
              pkg_os_object_search.sp_object_children_of_type_get
                        (
                              in_session_id,
                              in_transaction_id,
                              in_policy_id ,
                              gObjType_PolicySuspension,
                              v_PolSusp_list
                        );
--              v_policy_current_date :=  trunc(pkg_db_functions.fn_get_policy_current_date
--                                                ( 
--                                                 in_session_id,
--                                                 in_transaction_id, 
--                                                 in_policy_id 
--                                                 )
--                                              );
              if v_session_control.gLogging_Full 
                   then
                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name ,
                              '...Policy ID: '||in_policy_id||
                              '...Count of Policy Suspension Objects: '||v_PolSusp_list.count
--                              '...Policy Current Date: '||v_policy_current_date
                        );

              end if;

	 end if;

	 if in_type_of_susp_list_required in (2,3)
          then
              pkg_os_object_search.sp_object_children_of_type_get
                        (
                              in_session_id,
                              in_transaction_id,
                              in_billing_account_id ,
                              gObjType_BillAccSuspension,
                              v_BASusp_list
                        );
--              v_BA_current_date    :=  trunc(pkg_db_functions.fn_get_billacc_current_date
--                                                ( 
--                                                 in_session_id,
--                                                 in_transaction_id, 
--                                                 in_billing_account_id 
--                                                 )
--                                              );
              if v_session_control.gLogging_Full 
                   then
                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name ,
                              '...Billing Account ID: '||in_billing_account_id||
                              '...Count of Billing Account Suspension Objects: '||v_BASusp_list.count
--                              '...BA Current Date: '||v_BA_current_date
                        );

              end if;

	 end if;	 

	 if in_type_of_susp_list_required in (1,3) and v_PolSusp_list.count > 0
	      then
		       for i in v_PolSusp_list.first .. v_PolSusp_list.last
                      loop
                               v_list(v_list.count + 1 ) := v_PolSusp_list(i); 

                      end loop;
		--		v_current_date := v_policy_current_date;
	 end if;
	 if in_type_of_susp_list_required in (2,3) and v_BASusp_list.count > 0
	      then
		       for i in v_BASusp_list.first .. v_BASusp_list.last
                      loop
                               v_list(v_list.count + 1 ) := v_BASusp_list(i); 

                      end loop;

		--		v_current_date := v_BA_current_date;
	 end if;

--	 if in_type_of_susp_list_required in (1,3)
--	      then
--		       v_current_date := v_policy_current_date;
--	 elsif in_type_of_susp_list_required = 2
--	      then
--		       v_current_date := v_BA_current_date;
--	 end if;

                      if v_session_control.gLogging_Full 
                   then
                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name ,
                              'v_list.count: '||v_list.count
                        );

              end if;

     --
     -- Put the final list into in_object_list after eliminating the future suspensions
     --       
     if v_list.count > 0 then
         for i in v_list.first .. v_list.last  
              loop
                       if v_session_control.gLogging_Full then
                           pkg_os_logging.sp_log
                           (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Getting information for Object ID'||v_list(i)
                            );
                        end if;
                      --
                      -- Finding the object state and the effective date
                      --                  
                      begin
                                  select
                                       OBJECT_STATE                                    
                                  into
                                       v_Susp_ObjectState
                                  from
                                       dragon_suspension
                                  where
                                       SUSPENSION_ID = v_list(i);

                                  exception

                                       when no_data_found then

                                            if v_session_control.gLogging_Full then

                                                 pkg_os_logging.sp_log
                                                 (
                                                      in_session_id, 
                                                      in_transaction_id, 
                                                      v_procedure_name,
                                                      '.. Datamart not updated..'
                                                 );

                                           end if;
                                   end;
                                if v_Susp_ObjectState is null then 
                                  v_Susp_ObjectState :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              v_list(i),
                                                              gbv_GenericObj_ObjectState
                                                             ); 
                            end if;


                       if v_session_control.gLogging_Full then
                           pkg_os_logging.sp_log
                           (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...Object State: '            ||v_Susp_ObjectState

                            );
                        end if;

                        if v_Susp_ObjectState in (54346,37346)--PolicyBillingAccountSuspended,BillingAccountSuspended
                         --  and
                         --  trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault)) <= v_current_date
                                then
                                     --
                                     -- add the suspension object to the output list
                                     --
                                     if v_session_control.gLogging_Full then
                                       pkg_os_logging.sp_log
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_procedure_name,
                                            'Adding : '||v_list(i)||
                                            'to teh output list'
                                        );
                                    end if;
                                     out_object_list(out_object_list.count + 1 ) := v_list(i); 

                        end if;

              end loop;
            else
            null;
            end if;
     if v_session_control.gLogging_Full then 
           pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Total Active Suspension Object count excluding future dated suspension: '||out_object_list.count
            );
     end if;           

end sp_get_active_susp_objects;
-----------------------------------------------------------------------------------------------------------------------------------------------------
function  fn_get_active_susp_reason
(
     in_session_id              in        object.object_id%type,
     in_transaction_id          in        object.object_id%type,
     in_policy_id               in        object.object_id%type,
     in_billingaccount_id       in        object.object_id%type

)
Return Varchar
is
v_procedure_name                   constant system_log.program_name%type     :=pkg_name|| 'fn_get_active_susp_reason';
v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

v_PolSusp_child_list               pkg_os_object.t_object_list;
v_PolSusp_child_index              number;
v_reason                           varchar2(2000);
v_PolSusp_child_unique_list        t_susp_list;   --OSPRODUCT-7342
v_susp_object_id                   object.object_id%type;
begin

    for r_ba in c_billing_account(in_policy_id) loop  --OSPRODUCT-7273
	
        sp_get_active_susp_objects
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_id,
                                   r_ba.billing_account,
                                   v_PolSusp_child_list,
                                   g_susp_type_policy   /* we need to check suspension on both policy and account */
                              );
        if  v_PolSusp_child_list.count>0  --OSPRODUCT-7342
        then
        
            v_PolSusp_child_index :=v_PolSusp_child_list.first; 
            while v_PolSusp_child_index is not null
            Loop
                  
                v_susp_object_id := v_PolSusp_child_list(v_PolSusp_child_index);
                
                if v_PolSusp_child_unique_list.exists(v_susp_object_id)
                then
            
                     if v_session_control.gLogging_Full then
    
                          pkg_os_logging.sp_log
                          (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '......... Suspension object ID already exist in the list : '||v_PolSusp_child_list(v_PolSusp_child_index)
                          );
    
                      end if;
            
                else
                      
                      v_PolSusp_child_unique_list(v_PolSusp_child_list(v_PolSusp_child_index)) := v_PolSusp_child_list(v_PolSusp_child_index);
                      v_reason :=  pkg_os_lookup.fn_lookup_list_text_get(gbv_Susp_StopAllReason_lookup_id,
                                                                              pkg_os_object_io.fn_object_bv_get
                                                                                (
                                                                                  in_session_id,
                                                                                  in_transaction_id,
                                                                                  v_PolSusp_child_list(v_PolSusp_child_index),
                                                                                  gbv_Suspension_StopAllReason
                                                                                 ))||','||V_Reason ;
                end if;
                
                v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);

            end loop;
            
        end if;                
                          
    end loop;
     
return  v_reason;

 if v_session_control.gLogging_Full then
      Pkg_Os_Logging.Sp_Log(In_Session_Id, In_Transaction_Id, V_Procedure_Name,'v_reason='||V_Reason);
 end if;

end;
-----------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------
function fn_moratorium_suspension_get -- OSPRODUCT-4959
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_id                  in        object.object_id%type,
     in_activity_id                in        integer  default NULL,                 -- LOOKUP_LIST(5416348).enum
     in_TrxType_id                 in        integer  default NULL,    -- PD_TRANSACTION_TYPE_ID or DB_TRANSACTION_SET_TYPE.enum-- if in_TrxType_id is not Null - ignore the in_activity_id !!!!
     in_TrxTypeList                in        varchar2 default NULL  --OSPRODUCT-19209
)
return object.object_id%type
as
     v_procedure_name              constant  system_log.program_name%type              := pkg_name|| 'fn_moratorium_suspension_get';
     v_session_control                       pkg_os_session.r_dragon_session_control   := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_action_outcome_id                     outcome.outcome_id%type;
     v_token_table 	                         pkg_os_token.t_string_table;
     v_lookup_text_short                     lookup_list_value.lookup_text_short%type;
     v_transaction_id                        lookup_list_value.lookup_text_short%type;
     v_suspension_id                         object.object_id%type;
     a                                       number := 1;--OSPRODUCT-19209
     v_suspension_exist_tf         			 char := 'F';         --OSPRODUCT-26914     

begin

     if in_TrxType_id is not null -- if in_TrxType_id is not Null - ignore the in_activity_id !!!!
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Transaction Type ID=' || in_TrxType_id
               );
          end if;

          v_token_table(1) := in_TrxType_id;  -- This is a Transaction Type ID and there is no need to CAST from LOOKUP_LIST(5416348).enum
     else
          if in_activity_id is not null
          then
               v_lookup_text_short := pkg_os_lookup.fn_lookup_list_short_text_get
                                      (
                                           gbv_PolBilTrxType_lookup_id,
                                           in_activity_id
                                      );

               if v_lookup_text_short is not null
               then
                    pkg_os_token.sp_tokenize_string(v_lookup_text_short, ',', v_token_table);

               else
                    v_suspension_id := NULL; -- no suspension

                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... ERROR: Activity ID='||in_activity_id || ' is invalid. Moratorium Suspension check is not possible.'||
                         ' Check the LOOKUP_LIST.ID='|| gbv_PolBilTrxType_lookup_id || ' this Activity ID.'
                    );
               end if;
          else
               
               if in_TrxTypeList is null  --OSPRODUCT-19209
               then
                              
                    --v_token_table(1) := NULL; -- at one go, check all possible billing activities (transaction types) that can be suspended by Moratorium. The check is done as of SYSDATE.
                    --OSPRODUCT-15952
                    v_token_table(1) := PKG_DB_CONSTANT.gBillTrxType_PendingCancel; --4212 
                    v_token_table(2) := PKG_DB_OBJECT.gBatchType_ScheduledEFT;  --6001
                    v_token_table(3) := PKG_DB_OBJECT.gBatchType_ScheduledCC;  --6002
               else
                    FOR i IN
                         (
                              SELECT trim(regexp_substr(in_TrxTypeList, '[^,]+', 1, LEVEL)) activity_id
                              FROM dual
                              CONNECT BY LEVEL <= regexp_count(in_TrxTypeList, ',')+1
                         )
                    LOOP
                    
                         v_transaction_id    :=      pkg_os_lookup.fn_lookup_list_short_text_get
                                                     (
                                                          gbv_PolBilTrxType_lookup_id,
                                                          i.activity_id
                                                     );
                                                     
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Transaction IDs =' || v_transaction_id ||
                                   ' Activity ID = ' || i.activity_id
                              );
                         end if;
                         FOR j IN
                         (
                              SELECT trim(regexp_substr(v_transaction_id, '[^,]+', 1, LEVEL)) trx_id
                              FROM dual
                              CONNECT BY LEVEL <= regexp_count(v_transaction_id, ',')+1
                         )
                         LOOP
                         
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Transaction ID now =' || j.trx_id 
                                   );
                              end if;
                         
                              if   j.trx_id = PKG_DB_CONSTANT.gBillTrxType_PendingCancel
                              or
                                   j.trx_id = PKG_DB_OBJECT.gBatchType_ScheduledEFT
                              or
                                   j.trx_id = PKG_DB_OBJECT.gBatchType_ScheduledCC
                              then
                                   v_token_table(a) := j.trx_id;
                                   a    :=   a+1;
                              end if;
                         end loop;
                    END LOOP;
               end if;  

   
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Activity ID is NULL'
                    );
               end if;
          end if;
     end if;

     for i in 1..v_token_table.count
     loop
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Checking if there is an active moratorium suspension for '||
                    case when in_TrxType_id is not null
                         then ' Transaction Type ID=' || in_TrxType_id
                         else ' activity ID='||v_token_table(i)||'-"'||
                              pkg_os_lookup.fn_lookup_list_text_get(gbv_PolBilTrxType_lookup_id, in_activity_id) || ':' ||
                              pkg_os_lookup.fn_lookup_list_text_get (gbv_PD_Trx_Type_lookup_id, v_token_table(i)) ||'"'
                    end ||
                    ', for policy ID=' ||in_policy_id
               );
          end if;

          v_action_outcome_id := pkg_pc_suspension.gOutcome_OK;

          pkg_pc_suspension.sp_object_suspension_check
          (
               in_session_id,
               in_transaction_id,
               in_action_id             => gbv_BillingCheckAction,
               in_action_object_id      => in_policy_id,        -- Billing will pass policy ID only
               in_transaction_type_id   => v_token_table(i),
               in_applicable_domain     => pkg_pc_suspension.genum_ApplicableToBillingDomain,
               in_effective_date        => pkg_db_functions.fn_get_policy_current_date -- OSPRODUCT-5547
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                in_policy_id
                                           ),
               io_suspension_object_id  => v_suspension_id,
               io_action_outcome_id     => v_action_outcome_id
          );

          if v_action_outcome_id = pkg_pc_suspension.gOutcome_PolicySuspended -- 59048
             and
             v_suspension_id is not null
          then
               v_suspension_exist_tf := 'T'; --OSPRODUCT-26914
			   
               if v_session_control.gLogging_Full
               then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Outcome='||v_action_outcome_id||'. Activity suspended. Moratorium Suspension object ID=' || v_suspension_id
                    );
               
               end if;
               
          else
               
               v_suspension_id := NULL;  -- no suspension

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...outcome='||v_action_outcome_id||'. Activity allowed.'
                    );
               end if;
               
          end if;
          
     end loop;

     --OSPRODUCT-26914 start
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Suspension id: '||v_suspension_id
          );
     end if;
     
     if v_suspension_exist_tf = 'T'
     then
          return 1;
     else
          return null;
     end if; 
     --OSPRODUCT-26914 start

end fn_moratorium_suspension_get;

function fn_ba_moratorium_susp_get -- OSPRODUCT-4959
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_billing_account_id         in        object.object_id%type,
     in_activity_id                in        integer  default NULL,                 -- LOOKUP_LIST(5416348).enum
     in_TrxType_id                 in        integer  default NULL,    -- PD_TRANSACTION_TYPE_ID or DB_TRANSACTION_SET_TYPE.enum-- if in_TrxType_id is not Null --ignore the in_activity_id !!!!
     in_TrxTypeList                in        varchar2 default NULL  --OSPRODUCT-19209
)
return object.object_id%type
as
     v_procedure_name              constant  system_log.program_name%type              := pkg_name|| 'fn_ba_moratorium_susp_get';
     v_session_control                       pkg_os_session.r_dragon_session_control   := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_suspension_id                         object.object_id%type;
begin

     for r_policy in billaccount_policy_cur(in_billing_account_id)
     loop

          if billaccount_policy_cur%NOTFOUND
          then

               Raise_application_error( -20050, 'Error: No data found ' );

          end if;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Billing account has got : '
                    || billaccount_policy_cur%rowcount
                    ||' policies for suspending'
               );

          end if;
          --OSBILLING-7275 end

          --
          -- Call procedure to mark each of the policy as suspend.
          --

          v_suspension_id := fn_moratorium_suspension_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   r_policy.policy_id,
                                   in_activity_id,
                                   in_TrxType_id,
                                   in_TrxTypeList --OSPRODUCT-19209
                              );
                              
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Policy ID: ' || r_policy.policy_id
               );

          end if;
                              
          if v_suspension_id is not null then
               exit;
          end if;
          
     end loop;
     
     return v_suspension_id;

end fn_ba_moratorium_susp_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
  --
  --     %NAME
  --            fn_noc_before_suspension_tf
  --
  --     %USAGE
  --        This function returns the rescission flag as true if NOCs were sent before the suspension started but NOIC date is included in the suspension period.
  --     %ALGORITHM
  --           Input Target Cancellation Date will now be checked for Saturday, Sunday and Holiday depending upon the property configured.
  --        If above property is true
  --        then
  --          Input target cancellation date will be recalculated to return the next available date
  --        Else
  --          the input date will be returned
  --
  --
  --     %PARAM     in_session_id              Session ID
  --     %PARAM     in_transaction_id          Transaction ID
  --     %PARAM     in_suspension_trx_id       object.object_id%type
  --     %PARAM     in_input_date               date -- Suspension Effective Date or Event Effective Date
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_noc_before_suspension_tf  -- OSPRODUCT-4959. Moving from PKG_CS_DB_FUNCTIONS
(
     in_session_id                 in       object.object_id%type,
     in_transaction_id             in       object.object_id%type,
     in_policy_id                  in       object.object_id%type,
     in_input_date                 in       date default null
)
return char
is
     v_procedure_name         constant  system_log.program_name%type   :=   pkg_name||'fn_noc_before_suspension_tf';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term                      object.object_id%type;
     v_process_rescission               char(1) := 'F';
     v_term_susp_status                 number;
     v_curr_susp_id                     object.object_id%type;
     v_curr_pend_canc_id                object.object_id%type;
     v_target_canc_date                 date;
     v_pend_cancel_proc_date            date;
     v_PolSusp_child_list               pkg_os_object.t_object_list;
     v_PolSusp_child_index              number;
     v_PolSusp_objectState              object_state.object_state_id%type;
     v_polSusp_effective_date           date;
     v_current_ba_suspension_list       pkg_os_object.t_object_list;
     v_current_ba_susp_list_index       number;
     v_suspended_trx                    varchar2(400):=null;
     v_responsible_billing_account      object.object_id%type;
     
     v_suspension_id                    object.object_id%type;  -- OSPRODUCT-4959
     
     v_term_billing_status              number;  -- OSPRODUCT-5977 
     v_pending_cancel_eff_date          date;  --OSPRODUCT-22113
    
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Evaluating if we want to rescind pending cancellation considering suspension? for policy '||in_policy_id
          );
     end if;

     v_policy_term := pkg_os_object_io.fn_object_bv_get
                      (   
                           in_session_id,
                           in_transaction_id,
                           in_policy_id,
                           pkg_db_billing_modify.gbv_CurrentTermFromRolledDate --Current Term based on rolled date
                      );

     v_term_susp_status := pkg_os_object_io.fn_object_bv_get
                           (    
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_term,
                                 gbv_PolicyTerm_Susp_Status
                           );

     v_curr_pend_canc_id:= pkg_os_object_io.fn_object_bv_get
                           (
                                 in_session_id,
                                 in_transaction_id,
                                 in_policy_id,
                                 pkg_db_late_process.gbv_Ref_CurrPolPendCancel
                           );

     -- OSPRODUCT-22113
     v_pending_cancel_eff_date:= to_date
                               (
                                  pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_curr_pend_canc_id,
                                       gbv_PolicyTrx_EffDate
                                  )
                                  ,pkg_os_constant.DragonDateFormatDefault
                           );

     v_target_canc_date:= to_date
                          (
                             pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_curr_pend_canc_id,
                                  pkg_db_late_process.gbv_PolicyPenCan_TarCanceldate
                             )
                             ,pkg_os_constant.DragonDateFormatDefault
                          );
                          
     v_term_billing_status := pkg_os_object_io.fn_object_bv_get    -- OSPRODUCT-5977
                              (
                                    in_session_id,
                                    in_transaction_id,
                                    v_policy_term,
                                    pkg_db_billing.gbv_PolicyTermBillStatus
                              );                           

     --
     -- Find out the latest pending cancellation and its processed date
     -- If Term Suspension status is suspended and,
     -- Target Cancellation Date is after the Suspension then return 'T' else 'F'
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Term Suspension Status='||v_term_susp_status||
               ', Term Billing status=' ||v_term_billing_status||
               ', Target Cancel Date='||v_target_canc_date||
               ', Pending Cancel Effective Date='||v_pending_cancel_eff_date||
               ', Input Date ='||in_input_date
          );
     end if;

     if v_term_susp_status = g_pol_term_ba_susp --Suspended
        and
        (
           v_target_canc_date is not null -- check only for Cancelled policy
           -- OSPRODUCT-5977           
           or
           v_term_billing_status = g_TermBillingStatus_ReqResc
           -- /OSPRODUCT-5977
        )
     then
          -- OSPRODUCT-4959
          -- First check Moratorium Suspensions
          --
          v_suspension_id := fn_moratorium_suspension_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_policy_id,
                                  in_activity_id => gSuspend_PendCancel_Activity
                             );
                             
          if v_suspension_id is not null -- there is an active moratorium suspension for Pending Cancellation
          then
                -- check if the v_target_canc_date lays between the Moratorium Suspension start and end date
                --
                for c in (select 
                               1 
                          from 
                               dragon_suspension 
                          where 
                               suspension_id = v_suspension_id -- this is PK. only one row will be returned.
                          and
                             (
                               trunc(v_target_canc_date) between trunc(suspension_effective_date) and trunc(suspension_resume_date -1)
                               or
                               trunc(v_pending_cancel_eff_date) between trunc(suspension_effective_date) and trunc(suspension_resume_date -1) --OSPRODUCT-22113
                               or
                               v_term_billing_status = g_TermBillingStatus_ReqResc -- OSPRODUCT-5977
                             )
                          )
                loop
                     v_process_rescission := 'T';
                     return v_process_rescission;                          
                end loop;
          end if;
          -- /OSPRODUCT-4959  
          
/*
          --  Keerthi:  While doing a holistic review found that the functions  fn_noc_before_suspension_tf and fn_canc_before_suspension_tf  
          --            should CHECK ONLY MORATORIUM suspension and NOT MANUAL suspensions to rescind a pending cancellation.
          --            Earlier moratorium suspension was also creating suspension objects so that code was required. 
          --            Commenting out check for MANUAL suspensions
          
          -- get all the policy suspension objects ehose object state is billing suspended,
          -- then calculate their 32176346(effective_date)
          -- compare this effective date instead of the in_input_date
           select 
                responsible_billing_account 
           into
                v_responsible_billing_account 
           from 
                dragon_policy
           where
                policy_id=in_policy_id
           ;
     
           if v_session_control.gLogging_Full 
           then
                pkg_os_logging.sp_log
                (
                     in_session_id, 
                     in_transaction_id, 
                     v_procedure_name,
                     'Responsible Billing Account: '||v_responsible_billing_account
                );
           end if;    

           sp_get_active_susp_objects 
           (
                in_session_id,
                in_transaction_id,
                in_policy_id,
                v_responsible_billing_account,
                v_PolSusp_child_list,
                3
           );

           v_PolSusp_child_index :=v_PolSusp_child_list.first;

           while v_PolSusp_child_index is not null
           loop
                --calculate the effective date
                v_polSusp_effective_date :=  to_date
                                             (
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_PolSusp_child_list(v_PolSusp_child_index),
                                                        gbv_Suspension_Eff_Date--32176346
                                                   ),
                                                   'YYYYMMDDHH24MISS'
                                             );
                                             
                if v_session_control.gLogging_Full
                then
                      pkg_os_logging.sp_log
                      (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
                           'Suspension Effective date'||v_polSusp_effective_date
                      );
                 end if;

                if  trunc(v_target_canc_date) >= trunc(v_polSusp_effective_date)
                then
                     v_process_rescission := 'T';
                     return v_process_rescission;
                end if;

                v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
           end loop;
*/           
     else
          return v_process_rescission;   
     end if;

     return v_process_rescission;

end fn_noc_before_suspension_tf;

-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_canc_before_suspension_tf  -- OSPRODUCT-4959. Moving from PKG_CS_DB_FUNCTIONS
(
     in_session_id           in       object.object_id%type,
     in_transaction_id       in       object.object_id%type,
     in_policy_id            in       object.object_id%type,
     in_input_date           in       date default null

)
return char
is

     v_procedure_name            constant  system_log.program_name%type   :=   pkg_name||'fn_canc_before_suspension_tf';
     v_session_control                     pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
 
     v_policy_term                         object.object_id%type;
     v_process_reinstatement               char(1) := 'F';
     v_term_susp_status                    number;
     v_policy_status                       number;
     v_curr_susp_id                        object.object_id%type;
     v_poltrx_curr_canc_id                 object.object_id%type;
     v_policy_canc_id                      object.object_id%type;
     v_pol_canc_eff_date                   date;
     v_canc_reason_id                      number;
     v_PolSusp_child_list                  pkg_os_object.t_object_list;
     v_PolSusp_child_index                 number;
     v_PolSusp_objectState                 object_state.object_state_id%type;
     v_polSusp_effective_date              date;
     v_responsible_billing_account         object.object_id%type;
     
     v_suspension_id                       object.object_id%type;  -- OSPRODUCT-4959
    
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Evaluating if we want to rescind pending cancellation considering suspension? for policy '||in_policy_id
          );
     end if;

     v_policy_term := pkg_os_object_io.fn_object_bv_get
                      (   
                           in_session_id,
                           in_transaction_id,
                           in_policy_id,
                           pkg_db_billing_modify.gbv_CurrentTermFromRolledDate --Current Term based on rolled date
                      );

     v_term_susp_status := pkg_os_object_io.fn_object_bv_get
                           (    
                                in_session_id,
                                in_transaction_id,
                                v_policy_term,
                                gbv_PolicyTerm_Susp_Status
                           );

     v_policy_status:=    pkg_os_object_io.fn_object_bv_get
                          (   
                               in_session_id,
                               in_transaction_id,
                               in_policy_id,
                               210153
                          );

     if v_policy_status = 73  -- Cancelled
     then
          select
               max(policy_trx_id)
          into
               v_poltrx_curr_canc_id
          from
               dragon_policy_trx
          where
               policy_id = in_policy_id
          and
               policy_trx_type_id = 2
          and
               policy_trx_object_state_id = 106
          ;

          v_pol_canc_eff_date :=  to_date
                                  (
                                       pkg_os_object_io.fn_object_bv_get
                                       (   in_session_id,
                                            in_transaction_id,
                                            v_poltrx_curr_canc_id,
                                            212029
                                       ),
                                       pkg_os_constant.DragonDateFormatDefault
                                  );
                                       
          v_policy_canc_id := pkg_os_object_search.fn_object_11_child_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_poltrx_curr_canc_id,
                                   633
                              );
                              
          v_canc_reason_id := pkg_os_object_io.fn_object_bv_get
                              (    
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_canc_id,
                                   212185
                              );
     end if;

     --
     -- Find out the latest pending cancellation and its processed date
     -- If Term Suspension status is suspended and,
     -- Target Cancellation Date is after the Suspension then return 'T' else 'F'
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Term Suspension Status:'||v_term_susp_status||'Policy Status'||v_policy_status||'Suspension input date'||in_input_date||'v_pol_canc_eff_date'||v_pol_canc_eff_date||'v_canc_reason_id'||v_canc_reason_id
          );
     end if;

     -- new logic as per osproduct-2013
     if v_term_susp_status = g_pol_term_ba_susp -- Suspended
        and 
        v_policy_status  = 73  -- Cancelled
        and
        v_canc_reason_id = 13
     then  
          -- OSPRODUCT-4959
          -- First check Moratorium Suspensions
          --
          v_suspension_id := fn_moratorium_suspension_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_policy_id,
                                  in_activity_id => gSuspend_PendCancel_Activity
                             );
                             
          if v_suspension_id is not null -- there is an active moratorium suspension for Pending Cancellation
          then
                -- check if the v_target_canc_date lays between the Moratorium Suspension start and end date
                --
                for c in (select 
                               1 
                          from 
                               dragon_suspension 
                          where 
                               suspension_id = v_suspension_id -- this is PK. only one row will be returned.
                          and
                               trunc(v_pol_canc_eff_date) between trunc(suspension_effective_date) and trunc(suspension_resume_date -1)
                          )
                loop
                     v_process_reinstatement := 'T';
                     return v_process_reinstatement;                          
                end loop;
          end if;
          -- /OSPRODUCT-4959 

/*
          --  Keerthi:  While doing a holistic review found that the functions  fn_noc_before_suspension_tf and fn_canc_before_suspension_tf  
          --            should CHECK ONLY MORATORIUM suspension and NOT MANUAL suspensions to rescind a pending cancellation.
          --            Earlier moratorium suspension was also creating suspension objects so that code was required. 
          --            Commenting out check for MANUAL suspensions
          
          -- get all the policy suspension objects ehose object state is billing suspended,
          -- then calculate their 32176346(effective_date)
          -- compare this effective date instead of the in_input_date

          select 
               responsible_billing_account 
          into
               v_responsible_billing_account 
          from 
               dragon_policy
          where
               policy_id=in_policy_id
          ;

          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    'Responsible Billing Account: '||v_responsible_billing_account
               );
          end if;     
          
          sp_get_active_susp_objects 
          (
               in_session_id,
               in_transaction_id,
               in_policy_id,
               v_responsible_billing_account,
               v_PolSusp_child_list,
               3
          );

          v_PolSusp_child_index :=v_PolSusp_child_list.first;

          while v_PolSusp_child_index is not null
          loop
               --calculate the effective date
               v_polSusp_effective_date :=  to_date
                                            (
                                                 pkg_os_object_io.fn_object_bv_get
                                                 (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_PolSusp_child_list(v_PolSusp_child_index),
                                                   gbv_Suspension_Eff_Date--32176346
                                                  ),
                                                  'YYYYMMDDHH24MISS'
                                             ); 
                                            
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Suspension Effective date'||v_polSusp_effective_date
                    );
               end if;
               
               if  v_pol_canc_eff_date >= v_polSusp_effective_date 
               then
                   v_process_reinstatement := 'T';
                   return v_process_reinstatement;
               end if;

               v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
          end loop;
*/          
     else
          return v_process_reinstatement;
     end if;--v_term_susp_status = g_pol_term_ba_susp and v_policy_status = 73
     
     return v_process_reinstatement;
     
end fn_canc_before_suspension_tf; 

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_late_process_policy_suspend
--
--   %USAGE
--        This procedure will be used to policy's billing status as suspend for all the activites which are part of db_suspend_resume_set.
--
--
--   %ALGORITHM
--          1. create policysuspension object
--          2. set Reference_Creator - 210150 
--          3.     32427931Suspension - List - Stop All
--                 32428131Suspension - List - Stop All Reason
--                 32619548Suspension - List - Stop Billing
--                 32176246Suspension - Text_100 - Description
--                 32525248Suspension - Set - Suspension Transactions
--                 32176146Suspension - Type
--                 32176346Suspension - Date - Effective Dat
--                 32525348PolicyTerm - Set - Suspension Transactions( bv set for Policy term suspension transaction list)
--          4. call suspend
--          LIOPRODUCT-55
--
--   %PARAM             in_session_id                  Session Id
--   %PARAM             in_transaction_id              Transaction Id
--   %PARAM             in_policy_id                   Policy ID
--   %PARAM             in_policyterm_id               Policy Term ID
--   %PARAM             in_suspend_resume_set_id       ID from db_suspend_resume_set.
--   %PARAM             io_action_outcome_id           Action Outcome.
--LIOPRODUCT-55
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_late_process_policy_suspend

(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_id                  in        object.object_id%type,
     in_policyterm_id              in        object.object_id%type,
     in_suspend_resume_set_id      in        number,
     io_action_outcome_id          in out    outcome.outcome_id%type

)
is

     v_procedure_name                   constant  system_log.program_name%type   :=   pkg_name||'sp_late_process_policy_suspend';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_suspension_id                    object.object_id%type;
     v_suspend_resume_activity_list     varchar2(100);
     v_susp_resume_temp_list            pkg_os_token.t_string_table; --OSPRODUCT-30671
     v_susp_resume_temp_list_index      Number; --OSPRODUCT-30671
     v_proceed_with_susp_tf             BOOLEAN := False; --OSPRODUCT-30671    

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Entering sp_late_process_policy_suspend for policy : '||in_policy_id ||
               ' Policy Term : ' || in_policyterm_id ||
               ' Suspend Resume Set ID : ' || in_suspend_resume_set_id
          );
     end if;
     
     SELECT 
          listagg(DB_ACTIVITY_ENUM_ID,',') WITHIN GROUP (order by DB_ACTIVITY_ENUM_ID) 
     INTO
          v_suspend_resume_activity_list
     FROM 
          DB_SUSPEND_RESUME_SET_VAL 
     WHERE 
          DB_SUSPEND_RESUME_SET_ID = in_suspend_resume_set_id;
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Suspend Resume Activity List : '|| v_suspend_resume_activity_list
          );
     end if;

     --OSPRODUCT-30671

     pkg_os_token.sp_tokenize_string(v_suspend_resume_activity_list, ',' , v_susp_resume_temp_list);
     
     if v_susp_resume_temp_list.count > 0 
     then
          v_susp_resume_temp_list_index := v_susp_resume_temp_list.first; 
          
          while v_susp_resume_temp_list_index is not null 
          loop
               if  pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,in_policy_id,v_susp_resume_temp_list(v_susp_resume_temp_list_index)) <> 1  
               then
                    v_proceed_with_susp_tf := True;
                    
                    if v_session_control.gLogging_Full
                    then
                           pkg_os_logging.sp_log
                           (
                                 in_session_id,
                                 in_transaction_id,
                                 v_procedure_name,
                                 '...Suspend resume activity id : '|| v_susp_resume_temp_list(v_susp_resume_temp_list_index)                                
                           );
                    end if;
                    exit;
               end if;
               
               v_susp_resume_temp_list_index := v_susp_resume_temp_list.next(v_susp_resume_temp_list_index);
               
          end loop;
     end if;
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'activity list count : '||v_susp_resume_temp_list.count
          );
     end if;
     
     if v_proceed_with_susp_tf = True
     then     
          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolicySuspension,
               in_policy_id,
               v_suspension_id
          );
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...PolicySuspension Object Created : '|| v_suspension_id
               );
          end if;	      

          v_bv_table.delete;
          v_bv_table ( pkg_db_object.gbv_GenericObjRefCreator    ).business_variable_value     :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,pkg_db_object.gbv_UserSessionRefSessionUser);          
          v_bv_table ( gbv_Susp_Stop_All                         ).business_variable_value     :=   2;--NO
          v_bv_table ( gbv_Suspension_StopAllReason              ).business_variable_value     :=   3;--3->Other 2->Non Payment
          v_bv_table ( gbv_Susp_Stop_All_Billing                 ).business_variable_value     :=   2;--NO
          v_bv_table ( gbv_Suspension_Desc                       ).business_variable_value     :=   'Late Process Triggered';
          v_bv_table ( gbv_Suspension_Type                       ).business_variable_value     :=   4;--'Late Process Triggered'
          v_bv_table ( gbv_Suspension_Trx                        ).business_variable_value     :=   v_suspend_resume_activity_list;   
          v_bv_table ( gbv_Suspension_Eff_Date                   ).business_variable_value     :=   to_char(pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_policy_id),pkg_os_constant.DragonDateFormatDefault);
  
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_suspension_id,
               v_bv_table
          );
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policyterm_id,
               gbv_PolicyTerm_SuspTrx,
               v_suspend_resume_activity_list
          ); 
     
          sp_db_suspension
          (
               in_session_id,
               in_transaction_id,
               v_suspension_id,
               io_action_outcome_id
          );
     end if; 

end sp_late_process_policy_suspend;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_late_process_policy_resume
--
--   %USAGE
--        This procedure will be used to policy's billing status as suspend for all the activites which are part of db_suspend_resume_set.
--
--
--   %ALGORITHM
--          1. create policysuspension object
--          2. set Reference_Creator - 210150 
--          LIOPRODUCT-55
--
--   %PARAM             in_session_id                  Session Id
--   %PARAM             in_transaction_id              Transaction Id
--   %PARAM             in_policy_id                   Policy ID
--   %PARAM             io_action_outcome_id           Action Outcome.
--LIOPRODUCT-55
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_late_process_policy_resume

(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_id                  in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type

)
is

     v_procedure_name                   constant  system_log.program_name%type   :=   pkg_name||'sp_late_process_policy_resume';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                      char   := 'F';
     v_PolSusp_child_list               pkg_os_object.t_object_list;
     v_PolSusp_child_index              number;
     v_PolSusp_objectState              object_state.object_state_id%type;
     v_ref_curr_suspension              object_state.object_state_id%type;
     v_current_policy_term              object.object_id%type;
     v_resume_obj_list                  pkg_os_object.t_object_list;
     v_suspension_date                  date;                   
     v_resume_date                      date;
     v_suspension_type                  number;
     

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Entering sp_late_process_policy_resume for policy : '||in_policy_id
          );
     end if;
     
     sp_get_active_susp_objects 
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          in_policy_id,
          v_PolSusp_child_list,
          1
     );
     if v_session_control.gLogging_Full 
     then 
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Total suspension Objects: '||v_PolSusp_child_list.count
          );
     end if; 
     v_PolSusp_child_index :=v_PolSusp_child_list.first;

     while v_PolSusp_child_index is not null
     loop
          
          v_suspension_type   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                      in_session_id,
                                      in_transaction_id,
                                      v_PolSusp_child_list(v_PolSusp_child_index),
                                      gbv_Suspension_Type
                                   );
          
          if v_suspension_type = gEnum_LateProcess_SusType
          then
               if v_suspension_date is null 
               then 
                    v_suspension_date   :=   to_date
                                             (
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_PolSusp_child_list(v_PolSusp_child_index),
                                                       gbv_Suspension_Eff_Date
                                                  ),
                                                  pkg_os_constant.DragonDateFormatDefault
                                             );
               end if;
               if v_resume_date is null 
               then 
                    v_resume_date  :=   pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_policy_id);    
               end if;          
               g_suspension_date   :=   to_char(v_suspension_date, pkg_os_constant.DragonDateFormatDefault);
               g_resume_date       :=   to_char(v_resume_date, pkg_os_constant.DragonDateFormatDefault);
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Resuming date: '      ||trunc(v_suspension_date)||
                         '...suspension date: '    ||trunc(v_resume_date)||
                         '...v_suspension_obj_id: '|| v_PolSusp_child_list(v_PolSusp_child_index)
                    );
               end if;
               
               -- storing the list of suspended objects
               v_resume_obj_list(v_resume_obj_list.count +1) := v_PolSusp_child_list(v_PolSusp_child_index);

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_PolSusp_child_list(v_PolSusp_child_index),
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    g_resume_billing--53146
               );
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_PolSusp_child_list(v_PolSusp_child_index),
                    32428531,--resume Reason
                    1--Resume Normal Billing
               );
               begin
                    update
                         dragon_suspension
                    set
                         OBJECT_STATE = g_resume_billing--53146
                    where 
                         SUSPENSION_ID =  v_PolSusp_child_list(v_PolSusp_child_index);
               exception
                    when no_data_found 
                    then
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '.. Datamart not updated for dragon_suspension..'
                         );
                    end if;
               end;
               
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '...Resuming Suspension object: '||v_PolSusp_child_list(v_PolSusp_child_index));
               end if;
          else
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '.. The Suspension is not created by late process ..skipping :' || v_PolSusp_child_list(v_PolSusp_child_index)
                    );
               end if;
          end if;
          v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
     end loop;

     if v_resume_obj_list.count > 0
     then
     
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '.. calling sp_resume_policy..'
               );
          end if;
          sp_resume_policy
          (
               in_session_id,
               in_transaction_id,
               in_policy_id,
               3193646,
               io_action_outcome_id,
               v_resume_obj_list,
               v_resume_date
          );
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '..exiting sp_resume_policy..'
               );
          end if;
          --
          -- Check the current suspension reference, if the object is resumed,then set the reference to a suspended object
          --
          v_current_policy_term    :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_id,
                                             gbv_CurrentTermFromRolledDate--'31844846'
                                        );                             

          v_ref_curr_suspension    :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_current_policy_term,
                                             gbv_PolicyTerm_RefCurrSusp--'32251446'
                                        );
          begin
               select
                    OBJECT_STATE                                    
               into
                    v_PolSusp_objectState
               from
                    dragon_suspension
               where
                    SUSPENSION_ID = v_ref_curr_suspension;
          exception
               when no_data_found 
               then
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '.. Datamart not updated..'
                    );
               end if;
          end;

          if v_PolSusp_objectState is null 
          then 
          v_PolSusp_objectState    :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_ref_curr_suspension,
                                             gbv_GenericObj_ObjectState--210153
                                        );
          end if;

          if v_PolSusp_objectState =    g_resume_billing--53146 
          then
               sp_get_active_susp_objects 
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_id,
                    in_policy_id,
                    v_PolSusp_child_list,
                    1 
               );

               if v_PolSusp_child_list.count >0
               then
                    v_PolSusp_child_index :=v_PolSusp_child_list.first;
                    while v_PolSusp_child_index is not null 
                    loop
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_current_policy_term,
                              32251446,
                              v_PolSusp_child_list(v_PolSusp_child_index)
                         );
                         --_Reference_Term Current Suspension is not in DRAGON_POLICY_TERM, so not updating the datamart
                         v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
                    end loop;
               end if;                     
          end if;
          sp_policy_billplan_update(in_session_id,in_transaction_id,in_policy_id); --OSPRODUCT-14817 
     else
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '.. v_resume_obj_list count is 0..'
               );
          end if;
     end if;
end sp_late_process_policy_resume;

--------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_manual_noic_policy_suspend
--
--   %USAGE
--        This procedure will be used to policy's billing status as suspend for all the activites which are part of db_suspend_resume_set.
--
--
--   %ALGORITHM
--          1. Set following bv for suspension object    
--                 32427931Suspension - List - Stop All
--                 32428131Suspension - List - Stop All Reason
--                 32176146Suspension - Type
--                 32176346Suspension - Date - Effective Dat
--                 32525348PolicyTerm - Set - Suspension Transactions( bv set for Policy term suspension transaction list)
--          4. call suspend
--          LIOPRODUCT-38
--
--   %PARAM             in_session_id                  Session Id
--   %PARAM             in_transaction_id              Transaction Id
--   %PARAM             in_policytrx_id                Policy Transaction ID
--   %PARAM             io_action_outcome_id           Action Outcome.
--LIOPRODUCT-38
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_manual_noic_policy_suspend
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policytrx_id               in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type

)
is

     v_procedure_name                   constant  system_log.program_name%type   :=   pkg_name||'sp_manual_noic_policy_suspend';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


     v_policy_id                        object.object_id%type    :=   pkg_os_object.fn_object_parent_get( in_session_id,in_transaction_id, in_policytrx_id);
     v_policyterm_id                    object.object_id%type    :=   pkg_os_object_io.fn_object_bv_get( in_session_id,in_transaction_id, in_policytrx_id, gbv_PolicyTrx_RefBelongsTo  ) ; 
     v_suspension_id                    object.object_id%type    :=   pkg_os_object_io.fn_object_bv_get( in_session_id,in_transaction_id, in_policytrx_id, gbv_PolicyTrc_SuspCreated  ) ; 
     v_suspend_resume_activity_list     varchar2(100)            :=   pkg_os_object_io.fn_object_bv_get( in_session_id,in_transaction_id, v_suspension_id, gbv_Suspension_Trx  ) ;
     v_Stop_all_Billing                 number                   :=   pkg_os_object_io.fn_object_bv_get( in_session_id,in_transaction_id, v_suspension_id, gbv_Susp_Stop_All_Billing);
     v_bv_table                         pkg_os_object_io.t_bv_table;
     

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Entering sp_manual_noic_policy_suspend for policy : '||v_policy_id ||
               ' Policy Term : ' || v_policyterm_id ||
               ' Policy Transaction ID : ' || in_policytrx_id ||
               ' Suspension object id : ' || v_suspension_id
          );
     end if;
     if v_suspension_id is not null 
     then
     
          v_bv_table.delete;
          v_bv_table ( gbv_Susp_Stop_All                    ).business_variable_value     :=   2;--NO
          v_bv_table ( gbv_Suspension_StopAllReason         ).business_variable_value     :=   3;--3->Other 2->Non Payment
          v_bv_table ( gbv_Suspension_Desc                  ).business_variable_value     :=   'Manual UW NOIC Triggered';
          v_bv_table ( gbv_Suspension_Eff_Date              ).business_variable_value     :=   pkg_os_object_io.fn_object_bv_get( in_session_id,in_transaction_id, in_policytrx_id,  gbv_PolicyTrx_EffDate);
          
          if v_Stop_all_Billing = g_Susp_Stop_All_Billing_T
          then
               v_bv_table ( gbv_Suspension_Trx              ).business_variable_value     :=   g_AllBillingSuspensionTrx;   
          end if;
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_suspension_id,
               v_bv_table
          );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_policyterm_id,
               gbv_PolicyTerm_SuspTrx,
               v_suspend_resume_activity_list
          );     
         
          sp_db_suspension
          (
               in_session_id,
               in_transaction_id,
               v_suspension_id,
               io_action_outcome_id
          );
     else
          io_action_outcome_id :=  22;
     end if;
end sp_manual_noic_policy_suspend;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-11059
--
--   %NAME
--        sp_manual_noic_policy_resume
--
--   %USAGE
--        To be called from the Rescind Pending Cancel flow to resume suspensions created by Cancellation transaction
--
--   %ALGORITHM
--      With the Rescind Pending CX  transaction ID as the context object, find the Current Pending Cx transaction.
--      From the Current Pending Cx transaction find the suspension object created by it.
--      This suspension object should be resumed.
--      Call the sp_resume_policy to resume the suspension
--
--   %PARAM        in_rescind_pending_cx_trx_id    -  Rescind Pending Cancellation transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_manual_noic_policy_resume
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_rescind_pending_cx_trx_id  in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
is
     v_procedure_name                   constant  system_log.program_name%type   :=   pkg_name||'sp_manual_noic_policy_resume';
     v_session_control                  pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_PolSusp_child_list               pkg_os_object.t_object_list;
     v_PolSusp_child_index              number;
     v_PolSusp_objectState              object_state.object_state_id%type;
     v_ref_curr_suspension              object_state.object_state_id%type;
     v_current_policy_term              object.object_id%type;
     v_resume_obj_list                  pkg_os_object.t_object_list;
     v_suspension_date                  date;                   
     v_resume_date                      date;
              
     v_policy_id                        object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_rescind_pending_cx_trx_id);                           
     
     v_CurrPolPendCancel_obj_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get 
                                                                 (
                                                                      in_session_id, 
                                                                      in_transaction_id, 
                                                                      v_policy_id, 
                                                                      pkg_db_constant.gbv_Ref_CurrPolPendCancel
                                                                 );
                                                                 
     v_PendingCancel_trx_id             object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_CurrPolPendCancel_obj_id);
                                                                                                                                       
     v_suspension_id                    object.object_id%type := pkg_os_object_io.fn_object_bv_get -- Suspension Object created by Cancellation transaction
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      v_PendingCancel_trx_id,
                                                                      gbv_PolicyTrc_SuspCreated
                                                                 );      
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Entering sp_manual_noic_policy_resume for Policy ID='||V_policy_id ||
               ', Rescind Pending Cx transaction ID=' || in_rescind_pending_cx_trx_id ||
               ', Current Policy Pending Cancell object ID=' || v_CurrPolPendCancel_obj_id ||
               ', Policy Pending Cancell transasction ID=' || v_PendingCancel_trx_id ||
               ', Suspension ID=' || v_suspension_id               
          );
     end if;
     
     if v_suspension_id is null
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Policy Pending Cancell transasction ID=' || v_PendingCancel_trx_id ||
                    ' did not create any suspension. There is nothing to resume. Terminating the sp_manual_noic_policy_resume.'
               );
          end if;          
     else
          -- Check if v_suspension_id is an 'Active' suspension
                    
          sp_get_active_susp_objects 
          (
               in_session_id,
               in_transaction_id,
               v_policy_id,
               v_policy_id,
               v_PolSusp_child_list,
               1 -- -- 1-> Policy Suspension | 2-> Billing Account Suspension | 3 -> Both Policy and Billing Account Suspension
          );
          
          if v_session_control.gLogging_Full 
          then 
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Suspension Objects count= '||v_PolSusp_child_list.count
               );
          end if; 
          
          v_PolSusp_child_index :=v_PolSusp_child_list.first;

          while v_PolSusp_child_index is not null
          loop                                           
               if v_PolSusp_child_list(v_PolSusp_child_index) = v_suspension_id                
               then
                    -- Here we go. We found the v_suspension_id in the list of active suspensions. 
                    -- Get some personal data for this suspension and add it to the list.
                    --
                    if v_suspension_date is null 
                    then 
                         v_suspension_date   :=   to_date
                                                  (
                                                       pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_PolSusp_child_list(v_PolSusp_child_index),
                                                            gbv_Suspension_Eff_Date
                                                       ),
                                                       pkg_os_constant.DragonDateFormatDefault
                                                  );
                    end if;
                    
                    if v_resume_date is null 
                    then 
                         v_resume_date  :=   pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, v_policy_id);    
                    end if;  
                            
                    g_suspension_date   :=   to_char(v_suspension_date, pkg_os_constant.DragonDateFormatDefault);
                    g_resume_date       :=   to_char(v_resume_date, pkg_os_constant.DragonDateFormatDefault);
                    
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Resuming date= '      ||trunc(v_resume_date)||
                              '...suspension date= '    ||trunc(v_suspension_date)||
                              '...suspension object ID='|| v_PolSusp_child_list(v_PolSusp_child_index)
                         );
                    end if;
                    
                    -- storing the list of suspended objects
                    v_resume_obj_list(v_resume_obj_list.count +1) := v_PolSusp_child_list(v_PolSusp_child_index);

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_PolSusp_child_list(v_PolSusp_child_index),
                         pkg_os_constant_bv.gbv_GenObjObjectState,
                         g_resume_billing
                    );
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_PolSusp_child_list(v_PolSusp_child_index),
                         32428531,--resume Reason
                         1--Resume Normal Billing
                    );
                    begin
                         update
                              dragon_suspension
                         set
                              OBJECT_STATE = g_resume_billing
                         where 
                              SUSPENSION_ID =  v_PolSusp_child_list(v_PolSusp_child_index);
                    exception
                         when no_data_found 
                         then
                         if v_session_control.gLogging_Full 
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '.. Datamart not updated for dragon_suspension..'
                              );
                         end if;
                    end;
                    
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '...Resuming Suspension object: '||v_PolSusp_child_list(v_PolSusp_child_index));
                    end if;
                    
               else
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '.. The Suspension is not created by Cancellation process ..skipping :' || v_PolSusp_child_list(v_PolSusp_child_index)
                         );
                    end if;
               end if;
               
               v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
          end loop;

          if v_resume_obj_list.count > 0
          then          
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '.. calling sp_resume_policy..'
                    );
               end if;
               
               sp_resume_policy
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_id,
                    gObjType_PolicySuspension,
                    io_action_outcome_id,
                    v_resume_obj_list,
                    v_resume_date
               );
               
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '..completed sp_resume_policy..'
                    );
               end if;
               --
               -- Check the current suspension reference, if the object is resumed,then set the reference to a suspended object
               --
               v_current_policy_term    :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_policy_id,
                                                  gbv_CurrentTermFromRolledDate
                                             );                             

               v_ref_curr_suspension    :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_current_policy_term,
                                                  gbv_PolicyTerm_RefCurrSusp
                                             );
               begin
                    select
                         OBJECT_STATE                                    
                    into
                         v_PolSusp_objectState
                    from
                         dragon_suspension
                    where
                         SUSPENSION_ID = v_ref_curr_suspension;
               exception
                    when no_data_found 
                    then
                         if v_session_control.gLogging_Full 
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '.. Datamart not updated..'
                              );
                         end if;
               end;

               if v_PolSusp_objectState is null 
               then 
                    v_PolSusp_objectState    :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_ref_curr_suspension,
                                                       gbv_GenericObj_ObjectState
                                                  );
               end if;

               if v_PolSusp_objectState = g_resume_billing
               then
                    sp_get_active_susp_objects 
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_id,
                         v_policy_id,
                         v_PolSusp_child_list,
                         1 
                    );

                    if v_PolSusp_child_list.count >0
                    then
                         v_PolSusp_child_index :=v_PolSusp_child_list.first;
                         
                         while v_PolSusp_child_index is not null 
                         loop
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_current_policy_term,
                                   gbv_PolicyTerm_RefCurrSusp,
                                   v_PolSusp_child_list(v_PolSusp_child_index)
                              );
                              --_Reference_Term Current Suspension is not in DRAGON_POLICY_TERM, so not updating the datamart
                              v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
                         end loop;
                    end if;                     
               end if;
               sp_policy_billplan_update(in_session_id,in_transaction_id,v_policy_id); --OSPRODUCT-14817              
          else
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '.. v_resume_obj_list count is 0..'
                    );
               end if;
          end if;
     end if; -- v_suspension_id is not null
     
     if io_action_outcome_id is null
     then
          io_action_outcome_id := pkg_os_constant.goutcome_ok; 
     end if;
     
end sp_manual_noic_policy_resume;
-----------------------------------------------------------------------------------------------------------------------------------------------------
/*begin
    g_susp_act_pol_term_bv_map(gSuspend_UW_Tranx_Activity) := gbv_PolicyTerm_Stop_UW_Trnx;
    g_susp_act_pol_term_bv_map(gSuspend_EFTCC_Req_Activity) := gbv_PolicyTerm_Stop_EFT_Req;
    g_susp_act_pol_term_bv_map(gSuspend_CreditDisb_Activity) := gbv_PolicyTerm_Stop_Cred_Disb;
    g_susp_act_pol_term_bv_map(gSuspend_LateNotices_Activity) := gbv_PolicyTerm_Stop_Late_Notce;
    g_susp_act_pol_term_bv_map(gSuspend_LateProcess_Activity) := gbv_PolicyTerm_Stop_Late_Proc;
    g_susp_act_pol_term_bv_map(gSuspend_WriteOff_Activity) := gbv_PolicyTerm_Stop_WriteOff;
    g_susp_act_pol_term_bv_map(gSuspend_Invoices_Activity) := gbv_PolicyTerm_Stop_Invoices;
    --OSBilling-6385
    g_susp_act_pol_term_bv_map(gSuspend_LateNotice1_Activity) := gbv_PolicyTerm_Stop_LateNotce1;
    g_susp_act_pol_term_bv_map(gSuspend_LateNotice2_Activity) := gbv_PolicyTerm_Stop_LateNotce2;
    g_susp_act_pol_term_bv_map(gSuspend_PendCancel_Activity) := gbv_PolicyTerm_Stop_Pend_Canc;
    g_susp_act_pol_term_bv_map(gSuspend_NonPayCancel_Activity) := gbv_PolicyTerm_Stop_NonPayCanc;
    --/OSBilling-6385




    g_susp_act_susp_bv_map(gSuspend_UW_Tranx_Activity) := gbv_Susp_Stop_UW_Tranx;
    g_susp_act_susp_bv_map(gSuspend_EFTCC_Req_Activity) := gbv_Susp_Stop_EFTCC_Req;
    g_susp_act_susp_bv_map(gSuspend_CreditDisb_Activity) := gbv_Susp_Stop_Credit_Disb;
    g_susp_act_susp_bv_map(gSuspend_LateNotices_Activity) := gbv_Susp_Stop_Late_Notice;
    g_susp_act_susp_bv_map(gSuspend_LateProcess_Activity) := gbv_Susp_Stop_Late_Process;
    g_susp_act_susp_bv_map(gSuspend_WriteOff_Activity) := gbv_Susp_Stop_WriteOff;
    g_susp_act_susp_bv_map(gSuspend_Invoices_Activity) := gbv_Susp_Stop_Invoices;
    --OSBilling-6385
    g_susp_act_susp_bv_map(gSuspend_LateNotice1_Activity) := gbv_Susp_Stop_Late_Notice1;
    g_susp_act_susp_bv_map(gSuspend_LateNotice2_Activity) := gbv_Susp_Stop_Late_Notice2;
    g_susp_act_susp_bv_map(gSuspend_PendCancel_Activity) := gbv_Susp_Stop_Pend_Canc;
    g_susp_act_susp_bv_map(gSuspend_NonPayCancel_Activity) := gbv_Susp_Stop_NonPayCanc;
    --/OSBilling-6385



    g_susp_act_name_map(gSuspend_UW_Tranx_Activity) := 'UW Transactions';
    g_susp_act_name_map(gSuspend_EFTCC_Req_Activity) := 'Scheduled Pulls';
    g_susp_act_name_map(gSuspend_CreditDisb_Activity) := 'Credit Disbursement';
    g_susp_act_name_map(gSuspend_LateNotices_Activity) := 'Late Notices';
    g_susp_act_name_map(gSuspend_LateProcess_Activity) := 'Late Process All';--OsBilling-6385 Modified name to Late Process All
    g_susp_act_name_map(gSuspend_WriteOff_Activity) := 'Auto WriteOff';
    g_susp_act_name_map(gSuspend_Invoices_Activity) := 'Invoices';
    --OSBilling-6385
    g_susp_act_name_map(gSuspend_LateNotice1_Activity) := 'Late Notice 1';
    g_susp_act_name_map(gSuspend_LateNotice2_Activity) := 'Late Notice 2';
    g_susp_act_name_map(gSuspend_PendCancel_Activity) := 'Pending Cancellation';
    g_susp_act_name_map(gSuspend_NonPayCancel_Activity) := 'Non Pay Cancellation';
	--/OSBilling-6385
  */
--OSPRODUCT-21567
function fn_db_is_all_billing_suspended
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_id                  in        object.object_id%type,
     in_poltrx_date                in        date default null
) return number
as
     v_procedure_name              constant system_log.program_name%type     :=pkg_name|| 'fn_db_is_all_billing_suspended';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_susp_activity_bv            business_variable.business_variable_id%type;
     v_susp_activity_bv_val        object_bv_value.business_variable_value%type;
     v_pol_term_bill_susp          object_bv_value.business_variable_value%type;
     v_policy_term_id              object.object_id%type;
     v_result                      number := 0;
     v_poltrx_date                 date;
     v_target_suspension_trx       varchar2 (4000);
     v_target_policy_term          object.object_id%type;
     v_suspension_child_list       pkg_os_object.t_object_list;
     v_suspension_child_index      number;
     v_suspension_objectState      object_state.object_state_id%type;
     v_responsible_billing_account object.object_id%type;
     v_current_date                date;
     v_Susp_EffectiveDate          object_bv_value.business_variable_value%type:=null;
     v_Susp_ResumeDate             object_bv_value.business_variable_value%type:=null;
     v_stop_all_billing            number :=0;
begin
    
     -- /OSPRODUCT-4959 
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Master policy id: '||   in_policy_id
          );
     end if;
      --
      -- Get the responsible billing account id 
      --
     if in_policy_id is not null   --OSPRODUCT-12258
     then
         select 
            responsible_billing_account 
         into
           v_responsible_billing_account 
         from 
           dragon_policy
         where
           policy_id=in_policy_id;
     end if;     


     v_current_date := pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, in_policy_id);
     v_poltrx_date  := nvl(in_poltrx_date,v_current_date);

     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Responsible Billing Account: '||v_responsible_billing_account
          );
     end if;      

     --
     -- Get the active policy and billing account suspension for the current period
     --   

     sp_get_active_susp_objects 
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          v_responsible_billing_account,
          v_suspension_child_list,
          1 --type of suspension required =>1 means both policy and billing account
     );

     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Counts of active Suspension objects for current: '||v_suspension_child_list.count
          );
     end if;

     v_suspension_child_index :=v_suspension_child_list.first;

     while v_suspension_child_index is not null
     loop

          v_stop_all_billing       :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_suspension_child_list(v_suspension_child_index),
                                             32619548
                                        );
          
          v_Susp_EffectiveDate     :=   to_char
                                        (
                                             to_date
                                             (
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_suspension_child_list(v_suspension_child_index),
                                                       gbv_Suspension_Eff_Date
                                                  ),
                                                  pkg_os_constant.DragonDateFormatDefault
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        );
          v_Susp_ResumeDate   :=   to_char
                                   (
                                        to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_suspension_child_list(v_suspension_child_index),
                                                  gbv_Suspension_Exp_Date
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        ),
                                        pkg_os_constant.DragonDateFormatDefault
                                   ); 
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...v_target_suspension_trx: '||v_target_suspension_trx||
                    '...Suspension object id: '||v_suspension_child_list(v_suspension_child_index)||
                    '...Suspension effective date: '||v_Susp_EffectiveDate||
                    '...Current date: '||v_current_date||
                    '...Input policy date in case of under writing trx suspension: '||v_poltrx_date||
                    '...resume date: '||v_Susp_ResumeDate
               );
          end if; 
          if   nvl(v_stop_all_billing,0) = 1 and 
               trunc(v_poltrx_date) >= trunc(to_date(v_Susp_EffectiveDate,pkg_os_constant.DragonDateFormatDefault))
               and 
               (
                    trunc(v_poltrx_date) <= trunc(to_date(v_Susp_ResumeDate,pkg_os_constant.DragonDateFormatDefault))
                    or 
                    v_Susp_ResumeDate is null
               )
          then
               return 1;
          end if;
          v_suspension_child_index := v_suspension_child_list.next(v_suspension_child_index);
     end loop;
     return 0;              
end fn_db_is_all_billing_suspended;
end PKG_DB_SUSPENSION;
/
