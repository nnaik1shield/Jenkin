CREATE OR REPLACE PACKAGE BODY PKG_OC_FUNCTIONS IS
----------------------------------------
-- $Workfile:   PKG_OC_FUNCTIONS.PSK  $
-- $Revision: 1 $
--   $Author: nkumar $
--     $Date: 2015-01-14 02:54:24 -0500 (Wed, 14 Jan 2014) $
-----------------------------------------

--------------------------------------------------------------------------------------------------
--   Package Constants ...
--------------------------------------------------------------------------------------------------

pkg_name                         constant  system_log.program_name%type :=   'pkg_oc_functions.';


gDefaultProductID number := 0;
cursor c_getConstraintGroupMemberList
(
     in_constraint_group_id in constraint_group_member.constraint_group_id%type,
     in_filing_id in pd_filing.pd_filing_id%type,
     in_product_id in pd_product.pd_product_id%type,
     in_actor_type_id in actor_type.actor_type_id%type
)
is
     select
          t1.constraint_group_member_id,
          t1.constraint_group_id,
          t1.constraint_group_id||'.'||rownum bind_variable_index,
          t1.tp_bv_transform_type_id,
          t1.pd_product_id,
          t1.business_variable_id,
          t1.expression_id,
          t1.pr_operator_id,
          lower(trim(t2.pr_operator_code)) pr_operator_code,
          t1.external_column_id,
          t1.constant_value,
          rtrim(t1.business_variable_path,pkg_os_constant.bv_path_segmentor) business_variable_path,
          t1.member_sequence,
          nvl(t1.optional_tf,'F') optional_tf,
          trim(t1.default_null_value) default_null_value,
          trim(t1.default_error_value) default_error_value,
          -- nvl(t1.hard_stop_tf,'F') hard_stop_tf,  -- deprecated in OSDRAGON-20819
          included_primary_expression_id,
          rtrim(t1.included_primary_variable_path,pkg_os_constant.bv_path_segmentor) included_primary_variable_path
     from
          constraint_group_member t1,
          pr_operator t2
     where
          t1.constraint_group_id = in_constraint_group_id
     and
          t1.member_sequence is not null
     and
          t1.pr_operator_id = t2.pr_operator_id
     and
          nvl(t1.active_tf,'T') = 'T'
     and
          (    t1.actor_type_set_id is null
               or
               pkg_os_actor.fn_actor_in_set( in_actor_type_id,t1.actor_type_set_id ) = 'T'
          )
     and
          nvl(t1.pd_product_id,gDefaultProductID) in (in_product_id, gDefaultProductID)
     and
          (
               t1.pd_filing_id is null
               or
               t1.pd_filing_id <= in_filing_id
          )
     and
          (
               t1.last_pd_filing_id is null
               or
               t1.last_pd_filing_id >= in_filing_id
          )
     order by
          t1.member_sequence, t1.member_sequence_order
;
type cached_cgm is table of c_getConstraintGroupMemberList%rowtype;
type cached_cgm_list is table of cached_cgm index by varchar2(100);
g_cgm_cache cached_cgm_list;

gOrderByHeader                constant       varchar2(10)   :=   'order by';


gConstantFalse                constant       char(1)   :=   'F';
gConstantTrue                 constant       char(1)   :=   'T';
gConstantComma                constant       char(1)   :=   ',';
gInOperatorCode               constant       char(4)   :=   ' in ';
gOrOperatorCode               constant       char(4)   :=   ' or ';
gDistinctCode                 constant       char(10)  :=   ' distinct ';
gColumnTokenInFunction        constant       char(2)   :=   ':1';














































































--------------------------------------------------------------------------------------------------
function fn_get_predecessor_peer_id
(
      in_session_id        object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_parent_id         object.object_id%type,
      in_child_type_id     object_type.object_type_id%type
)
return number
is
      v_loss_object_list         pkg_os_object.t_object_list;
      v_loss_count               number;
      v_return_loss_object       object.object_id%type;
begin

    -- Get all IncidentLoss objects
    v_loss_object_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
         in_session_id,
         in_transaction_id,
         in_parent_id,
         in_child_type_id,
         v_loss_object_list,
         pkg_os_constant_bv.gbv_GenObjID
    );

    v_loss_count := v_loss_object_list.count;

    if  v_loss_count <= 1  then

        return null;

    else

        v_return_loss_object  := v_loss_object_list ( v_loss_count -1);
        return v_return_loss_object;

    end if;

end fn_get_predecessor_peer_id;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_get_incompleted_tasks_count
--
-- %USAGE
--        It will check the duplicate task which are in incomplete state and return the count
--        of task which are already exist.
--
--  %ALGORITHM
--      1. Extract the task count by checking the action object id as task object id
--      and provide the count of task.

-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--        in_rule_type_id
--        in_pc_coverage_rule_id
--        io_authority_trigger_amount
--        io_authority_check_tf
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function fn_get_incompleted_tasks_count
(

      in_session_id         object.object_id%type,
      in_transaction_id     object.object_id%type,
      in_action_object_id   object.object_id%type
)
return number
is
       v_procedure_name        constant system_log.program_name%type   := pkg_name||'fn_get_incompleted_tasks_count';
       v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
       v_incompleted_task_count  number;

    begin

       select count(task_id) into v_incompleted_task_count
              from Dragon_Task where
         task_object_id = in_action_object_id
         and
         upper(Task_Content_type)= 'TASK'
         and
         task_status_id =gTask_Status_Incomplete ;

         if v_incompleted_task_count is null then

            v_incompleted_task_count := 0;
         end if;

       if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Counting Incomplete Tasks '||
               'Claim Object ID...'||in_action_object_id

          );
       end if;

      return v_incompleted_task_count;

exception when others then

   pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Exception occurs while calculating incomplete task '
          );

          v_incompleted_task_count := 0;
          return v_incompleted_task_count;


end fn_get_incompleted_tasks_count;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_get_least_limit_constraint
--
-- %USAGE
--
--
--  %ALGORITHM
--
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function fn_get_least_limit_constraint
(

      in_session_id         object.object_id%type,
      in_transaction_id     object.object_id%type,
      in_action_object_id       object.object_id%type
)
return number
is
        v_procedure_name        constant system_log.program_name%type   := pkg_name||'fn_get_least_limit_constraint';
        v_coverageConstraintList      pkg_os_object.t_object_list;
        v_coverageConstraint_count    number;
        v_coverageConstraint          object.object_id%type;
        v_min_available_limit         number;--object_bv_value.business_variable_value%type;
        v_relevant_constraint         object.object_id%type;
        v_constraint_available_amt    number;--object_bv_value.business_variable_value%type;
begin

    v_coverageConstraintList.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_action_object_id,
        gObjType_CoverageConstraint,
        v_coverageConstraintList
    );

    v_coverageConstraint_count:= v_coverageConstraintList.count;

    if v_coverageConstraint_count > 0
    then
        v_relevant_constraint:= v_coverageConstraintList(1);

        v_min_available_limit :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_relevant_constraint, 33948146);

        for counter IN 2 .. v_coverageConstraint_count loop

            v_constraint_available_amt := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_coverageConstraintList(counter), 33948146);

            if nvl(v_constraint_available_amt,0) < nvl(v_min_available_limit,0)
            then
                v_relevant_constraint:= v_coverageConstraintList(counter);
                v_min_available_limit := v_constraint_available_amt;
            end if;

         end loop;

    else
        v_relevant_constraint := null;

    end if;

  return v_relevant_constraint;

exception when others then

   pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Exception occurs while calculating constraint with least available limit'
          );

end fn_get_least_limit_constraint;
----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_get_cov_exhausted_amount
--
-- %USAGE
--
--
--  %ALGORITHM
--
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--        in_rule_type_id
--        in_pc_coverage_rule_id
--        io_authority_trigger_amount
--        io_authority_check_tf
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function fn_get_cov_exhausted_amount
(

      in_session_id         object.object_id%type,
      in_transaction_id     object.object_id%type,
      in_action_object_id       object.object_id%type
)
return number
is
       v_procedure_name         constant system_log.program_name%type   := pkg_name||'fn_get_cov_exhausted_amount';
       v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
       v_exhausted_amount           object_bv_value.business_variable_value%type:=0;
       v_where_condition            varchar2(4000);
       v_constraint_group_id        constraint_group.constraint_group_id%type;
       v_final_query                varchar2(4000);
       v_constraint_type            number;
       in_bind_variable_tab          pkg_os_reference_lookup.bind_variable_tab_type;
      return_value_tab              pkg_os_reference_lookup.bind_variable_tab_type;
    begin

       v_final_query := 'select sum(COV_ASSOCIATED_AMOUNT)
              from CLAIM_COVERAGE_STATS';-- where

        v_constraint_type :=      pkg_os_object_io.fn_object_bv_get
                                  (
                                           in_session_id,
                                           in_transaction_id,
                                           in_action_object_id,
                                           33931346
                                  );


  begin
    select constraint_group into v_constraint_group_id from indemnity_constraint_type where indemnity_constraint_type_id =  v_constraint_type;

exception when no_data_found then

   pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||No Constraint Group found for ' || v_constraint_type
          );

          v_exhausted_amount := 0;
          return v_exhausted_amount;
end;

    if v_constraint_group_id is not null then
        in_bind_variable_tab.delete;
         in_bind_variable_tab := fn_get_constraint_grp_bind_tab(
                                            in_session_id,
                                            in_transaction_id,
                                            v_constraint_group_id,
                                            in_action_object_id   );

        v_where_condition := PKG_OS_REFERENCE_LOOKUP.fn_get_lookup_where_clause
              (in_session_id,
               in_transaction_id,
               v_constraint_group_id);

       --Execute the final query only if where consition is present
        if v_where_condition is not null
        then
            v_final_query := v_final_query || ' where ' || v_where_condition;

          --the sp_exec_lookup_value_query will bind the variables depending on the number of bind variables. Max limit is 32 variables
          return_value_tab.delete;
          pkg_os_reference_lookup.sp_exec_lookup_value_query
            (
                 in_session_id ,
                 in_transaction_id ,
                 v_final_query ,
                 in_bind_variable_tab ,
                 return_value_tab
            );

            v_exhausted_amount := return_value_tab(1);
       end if;

     --  if v_session_control.gLogging_Full then
   end if;

      return v_exhausted_amount;

exception when others then

   pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Exception occurs while calculating exhausted amount on the constraint '
          );

          v_exhausted_amount := 0;
          return v_exhausted_amount;


end fn_get_cov_exhausted_amount;


-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_get_cgm_list
(
     in_constraint_group_id   number,
     in_filing_id             number,
     in_product_id            number,
     in_actor_type_id         number,
     in_cgm_cache_index       varchar2
)
as

     v_cgm_list cached_cgm := cached_cgm();

begin

     open c_getConstraintGroupMemberList(in_constraint_group_id, in_filing_id, in_product_id, in_actor_type_id);
     fetch c_getConstraintGroupMemberList bulk collect into v_cgm_list;
     g_cgm_cache(in_cgm_cache_index) := v_cgm_list;
     close c_getConstraintGroupMemberList;

exception
when others
then

     if c_getConstraintGroupMemberList%isopen
     then
          close c_getConstraintGroupMemberList;
     end if;

     raise;

end sp_get_cgm_list;

-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_constraint_grp_bind_tab
(
in_session_id                     object.object_id%type,
in_transaction_id                 object.object_id%type,
in_constraint_group_id                  constraint_group.constraint_group_id%type,
in_object_id                            object.object_id%type
)
return    pkg_os_reference_lookup.bind_variable_tab_type   as
v_procedure_name             constant system_log.program_name%type   := pkg_name||'fn_get_constraint_grp_bind_tab';
return_value                       pkg_os_reference_lookup.bind_variable_tab_type;
in_product_id                      number:=0;
in_filing_id                       number;
v_actor_type_id                    actor_type.actor_type_id%type      := pkg_os_wf_session.fn_actor_type_get( in_session_id,in_transaction_id);
v_cgm_cache_index                varchar2(500)                      :=
                                                                          to_char(in_constraint_group_id)||dot||
                                                                          to_char(in_product_id)||dot||
                                                                          to_char(in_filing_id)||dot||
                                                                          to_char(v_actor_type_id);
v_cgm_list                         cached_cgm                         := cached_cgm();
v_idx                              number;
vConstraintGroupMember             c_getConstraintGroupMemberList%rowtype;
v_bind_index                       number := 0;
v_session_control                pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
v_operator_code                    pr_operator.pr_operator_name%type;
v_item                             varchar2(500);
v_business_variable_id             business_variable.business_variable_id%type;
in_object_cache                    pkg_os_object_cache.t_object_cache;
begin

        sp_get_cgm_list
          (
               in_constraint_group_id,
               null,
               0,
               v_actor_type_id,
               v_cgm_cache_index
          );

          v_cgm_list := g_cgm_cache(v_cgm_cache_index);

     v_idx := v_cgm_list.first;
     while v_idx is not null
     loop

          vConstraintGroupMember := v_cgm_list(v_idx);

          v_bind_index   :=   v_bind_index + 1;

          declare

                    v_context_object_type_id object_type.object_type_id%type;
                    v_bv_object_type_id      object_type.object_type_id%type;
                    v_bv_path_object_type_id object_type.object_type_id%type;

          begin

               -- Validate metadata configuration: context object should have the BV used in constraint group member
               if vConstraintGroupMember.business_variable_path is not null
               then

                    v_bv_path_object_type_id := pkg_os_bv.fn_bv_path_object_type_get( pkg_os_bv.fn_bv_path_first_bv_get( vConstraintGroupMember.business_variable_path ) );

               end if;

               if vConstraintGroupMember.business_variable_id is not null
               then

                    v_bv_object_type_id := pkg_os_bv.fn_bv_path_object_type_get( vConstraintGroupMember.business_variable_id );

               end if;

               if    (v_bv_path_object_type_id is not null and pkg_os_object_search.fn_object_is_type_of_tf ( in_session_id, in_transaction_id, in_object_id, v_bv_path_object_type_id ) = 'F')
                  or (v_bv_object_type_id      is not null and pkg_os_object_search.fn_object_is_type_of_tf ( in_session_id, in_transaction_id, in_object_id, v_bv_object_type_id ) = 'F')
               then

                    v_context_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_object_id );

               end if;

               v_operator_code     :=   ' '||vConstraintGroupMember.pr_operator_code||' ';

               if instr(v_operator_code,gInOperatorCode) = 0
               then

                    v_item    :=   vConstraintGroupMember.constant_value;

                    if vConstraintGroupMember.expression_id is not null
                    then

                         v_item    :=   pkg_os_exp.fn_evaluate_expression
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_object_cache,
                                             in_object_id,
                                             vConstraintGroupMember.expression_id
                                        );

                    elsif vConstraintGroupMember.business_variable_path is not null
                    then

                         v_item    :=   pkg_os_object_cache_io.fn_object_bv_path_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_object_cache,
                                             in_object_id,
                                             vConstraintGroupMember.business_variable_path
                                        );

                    end if;

                    if   vConstraintGroupMember.tp_bv_transform_type_id is not null
                         and
                         vConstraintGroupMember.tp_bv_transform_type_id not in (pkg_os_constant.gXForm_Copy)
                    then

                         v_business_variable_id   :=   vConstraintGroupMember.business_variable_id;


                         if v_business_variable_id is null
                         then

                              v_business_variable_id   :=   pkg_os_bv.fn_bv_path_bv_get(vConstraintGroupMember.business_variable_path);

                         end if;

                         v_item    :=   pkg_os_xformer_extension.fn_get_bv_transform_value
                                        (
                                             in_session_id
                                             ,in_transaction_id,
                                             in_object_id,
                                             vConstraintGroupMember.tp_bv_transform_type_id,   --   in_bv_transform_type_id
                                             null,     --   in_object_bv_transform_id
                                             v_item,   --   in_source_bv_value
                                             null,     --   in_grouped_object_tab    new  object_transform_tt(),
                                             in_product_id,in_filing_id,
                                             null,     --   in_target_bv_id
                                             v_business_variable_id,  --   in_source_bv_id,
                                             null      --   in_source_constant
                                        );

                    end if;

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log_core
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' Object ID    : '                      ||   in_object_id ||
                              '<=return_value('||v_bind_index||')=>'  ||   v_item       ||
                              '<='
                         );

                    end if;

               else --   instr(v_operator_code,gInOperatorCode) > 0 then

                    v_item    :=   pkg_os_reference_lookup.fn_get_child_path_value_list(
                         in_session_id,in_transaction_id,in_object_id,
                         vConstraintGroupMember.bind_variable_index,
                         vConstraintGroupMember.constant_value,
                         vConstraintGroupMember.business_variable_path,
                         vConstraintGroupMember.expression_id,
                         vConstraintGroupMember.tp_bv_transform_type_id,
                         vConstraintGroupMember.included_primary_variable_path,
                         vConstraintGroupMember.included_primary_expression_id
                    );

               end if;

               --
               --   now check the default null value logic
               --
               if   v_item is null
                    and
                    vConstraintGroupMember.default_null_value is not null
               then

                    v_item    :=   vConstraintGroupMember.default_null_value;

               end if;

          exception

               when others then

                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Object ID    : '                      ||   in_object_id ||
                         '<=return_value('||v_bind_index||')=>'  ||   v_item       || '<=',
                         dbms_utility.format_error_backtrace,
                         211015
                    );

                    if vConstraintGroupMember.default_error_value is not null
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' Object ID    : '                      ||   in_object_id ||
                              '. Using default_error_value '          ||
                              '<=return_value('||v_bind_index||')=>'  ||   v_item       || '<='
                         );

                         v_item    :=   vConstraintGroupMember.default_error_value;

                    else

                         pkg_os_logging.sp_log_error
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              sqlerrm||': Object ID    : '                      ||   in_object_id ||
                              '<=return_value('||v_bind_index||')=>'  ||   v_item       || '<=',
                              dbms_utility.format_error_backtrace,
                              211015
                         );

                         raise;  -- propagate the exception -- OSDRAGON-20819

                    end if;

          end;

          return_value(v_bind_index)    :=   v_item;

          v_idx := v_cgm_list.next(v_idx);

     end loop;
return return_value;

end fn_get_constraint_grp_bind_tab;


-----------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_claims_trx_process
(
     in_session_id        in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_billingaccount_trxset_id  in          object.object_id%type,    /* BillingAccountTransactionSet ID */
     io_action_outcome_id          in out      outcome.outcome_id%type
)
is

  v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_claims_trx_process';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_cache                pkg_os_object_cache.t_object_cache;
--     v_fiTrx_state_enum            object.object_id%type                   := pkg_os_object_api.sp_object_children_of_type_get

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Batch ID: '||in_billingaccount_trxset_id ||
      ' by calling pkg_db_object.sp_billing_acct_trx_process.'
          );
      end if;


     pkg_db_object.sp_billing_acct_trx_process
     (
        in_session_id,
        in_transaction_id,
        in_billingaccount_trxset_id,    -- BillingAccountTransactionSet ID
        v_object_cache,
        io_action_outcome_id
     );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_claims_trx_process;

--------------------------------------------------------------------------------------------------
procedure sp_claims_multiplicty_edit
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_relation_bv_id             in             business_variable.business_variable_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_claims_multiplicty_edit';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_list_object_id         object.object_id%type              := in_action_object_id; --pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, in_action_object_id,     pkg_os_constant_bv.gbv_GenObjCurrentList            );
     v_child_object_type_id   object_type.object_type_id%type    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id,        pkg_os_constant_bv.gbv_ListElementObjectType   );
     v_child_list_element_id  object_type.object_type_id%type    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id,        pkg_os_constant_bv.gbv_ListSelectedElement     );
     v_child_object_id        object_type.object_type_id%type    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_child_list_element_id, pkg_os_constant_bv.gbv_ListElementObject       );
     v_parent_object_id       object.object_id%type              := pkg_os_object.fn_object_parent_get                  ( in_session_id, in_transaction_id, v_child_object_id  );
begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Multiplicty Edit: '||
               'Child Object Type ID..'||v_child_object_type_id||
               'Child List Element ID..'||v_child_list_element_id||
               'Child Object ID..'||v_child_object_id||
               'Parent Object ID..'||v_parent_object_id
          );
      end if;

      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_parent_object_id,
               in_relation_bv_id,
               v_child_object_id

      );

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_claims_multiplicty_edit;

--------------------------------------------------------------------------------------------------
procedure sp_incident_add_st
(
     in_session_id        in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out      outcome.outcome_id%type
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_incident_add_st';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     in_incident_type_other   object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, in_action_object_id, 32453146 );
     in_incident_type_name    object_bv_value.business_variable_value%type ;

begin

   -- in_incident_type_other := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, in_action_object_id, 32453146 );
     if in_incident_type_other = 1 then

          in_incident_type_name := pkg_os_object_io.fn_object_bv_get

                                 (
                                     in_session_id,
                                     in_transaction_id,
                                     in_action_object_id,
                                     32402446 ) ;

          insert into oc_incident_type_st ( INCIDENT_TYPE_ID , INCIDENT_TYPE_NAME, ACTIVE_TF , INCIDENT_TYPE_DESC , INCIDENT_TIME_MAND_TF , INCIDENT_PARTY_TYPE_ID , CLAIMANT_MULTIPLICITY_TYPE_ID , INCIDENT_ADDRESS_MAND_TF , ADDRESS_SOURCE_ID , DEFAULT_ADDRESS_SOURCE_ID ) values ( in_action_object_id , in_incident_type_name , 'T' , 'To be Approved' , 'F' , 2 , 3 , 'T' , 3 , 2 );

      end if;

      if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Incident Edit '||
               'Incident object id...'||in_action_object_id||
               'Incident type..'||in_incident_type_other||
               'Incident Type Name..'||in_incident_type_name
          );
      end if;
      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_incident_add_st;

------------------------------------------------------------------------------------------------------

/*procedure sp_add_custom_coverage
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id    in          object.object_id%type,
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_add_custom_coverage';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_lossset_object_id           object.object_id%type := PKG_OS_OBJECT_SEARCH.FN_OBJECT_11_CHILD_GET ( in_session_id , in_transaction_id , in_action_object_id , 3201246 );
     v_loss_object_id              object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_lossset_object_id, 32558546 );
     v_coverage_name_id            object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_lossset_object_id, 32570546 );
     v_coverage_type_name_id       object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_lossset_object_id, 32572446 );
     --v_coverage_type_name_txt      varchar2(100);
     v_claimcoveragetype_object_id object.object_id%type ;
     v_claimcoverage_object_id     object.object_id%type ;
     cursor v_coverage_name_txt_cur is
                                select pc_coverage_name from pc_coverage where  pc_coverage_id = v_coverage_name_id ;
     v_coverage_name_txt           object_bv_value.business_variable_value%type ;
begin

      PKG_OS_OBJECT.SP_OBJECT_CREATE( in_session_id , in_transaction_id , 3335046 , v_loss_object_id , v_claimcoveragetype_object_id );
      PKG_OS_OBJECT_IO.SP_OBJECT_BV_SET( in_session_id , in_transaction_id , v_claimcoveragetype_object_id , 32431046 , v_coverage_type_name_id );
      PKG_OS_OBJECT.SP_OBJECT_CREATE( in_session_id , in_transaction_id , 3335146 , v_claimcoveragetype_object_id , v_claimcoverage_object_id );
      PKG_OS_OBJECT_IO.SP_OBJECT_BV_SET( in_session_id , in_transaction_id , v_claimcoverage_object_id , 32430346 , v_coverage_name_id );
      OPEN v_coverage_name_txt_cur;
      FETCH v_coverage_name_txt_cur into v_coverage_name_txt;
      close v_coverage_name_txt_cur;
      --v_coverage_name_txt := select pc_coverage_name from pc_coverage where  pc_coverage_id = v_coverage_name_id ;
      --v_coverage_type_name_txt := select pc_coverage_type_name from pc_coverage_type where pc_coverage_type_id = v_coverage_type_name_id;
      PKG_OS_OBJECT_IO.SP_OBJECT_BV_SET( in_session_id , in_transaction_id , v_claimcoverage_object_id , 32431146 , v_coverage_name_txt );

      if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Custom Coverage Add '||
               'Action Object ID..'||in_action_object_id||
               'Loss Set Object ID..'||v_lossset_object_id||
               'Loss Object ID..'||v_loss_object_id||
               'Coverage Name ID..'||v_coverage_name_id||
               'Coverage Name Text..'||v_coverage_name_txt||
               'Coverage Type ID..'||v_coverage_type_name_id||
               'Coverage Type Object ID..'||v_claimcoveragetype_object_id||
               'Coverage Name Object ID..'||v_claimcoverage_object_id
          );
      end if;
      io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end sp_add_custom_coverage;*/
------------------------------------------------------------------------------------------------------

function fn_warning_for_policy
(
      in_session_id        object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_action_object_id        object.object_id%type
)
return char
is
       losssetpolicycr_list      pkg_os_object.t_object_list;
       policy_object_list      pkg_os_object.t_object_list;
       type lob_array_t is table of object_bv_value.business_variable_value%type;
       lob_array lob_array_t;
       --type lob_incident_map_list_t is table of number;
       lob_policy object_bv_value.business_variable_value%type;
       flag      number := 0;
       loop_var number := 1;
       v_policy_object_id  object_bv_value.business_variable_value%type;
       TYPE lob_incident_map_list_t IS TABLE OF oc_lob_incident_map%ROWTYPE
       INDEX BY BINARY_INTEGER;
       lob_incident_map_list lob_incident_map_list_t;
       lob_incident_map_list_nomatch lob_incident_map_list_t;
       v_incident_object_id              object.object_id%type := PKG_OS_OBJECT.FN_OBJECT_PARENT_GET( in_session_id , in_transaction_id, in_action_object_id );
       v_incident_type_id                object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_incident_object_id, 32255046 );
       v_customer_object_id              object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_incident_object_id, 32381346 );

begin
       lob_array := lob_array_t();
       PKG_OS_OBJECT_SEARCH.SP_OBJECT_CHILDREN_OF_TYPE_GET ( in_session_id, in_transaction_id, in_action_object_id, 3201746, losssetpolicycr_list);
       lob_array.extend(losssetpolicycr_list.count);
       FOR i IN 1 .. losssetpolicycr_list.count
       LOOP
         v_policy_object_id := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, losssetpolicycr_list(i), 32259346 );
         lob_array(i) := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, v_policy_object_id, 26806004 );
         --DBMS_OUTPUT.put_line('BV_LOB' || to_char(lob_array(i)));
       end loop;
       select * bulk collect into lob_incident_map_list from oc_lob_incident_map where INCIDENT_TYPE_ID = v_incident_type_id and ACTIVE_TF = 'T' ;
       if ( lob_incident_map_list.count is not null and lob_incident_map_list.count <> 0 )then
         FOR j in 1 .. lob_incident_map_list.count
         LOOP
             --DBMS_OUTPUT.put_line('list_LOB' || to_char(lob_incident_map_list(j).lob_id));
             flag := 0;
             FOR k in 1 .. lob_array.count LOOP

               if(lob_incident_map_list(j).lob_id = lob_array(k)) then
                 flag := 1;
                 exit;
               end if;
             end loop;
             if(flag=0) then
             lob_incident_map_list_nomatch( loop_var ) :=  lob_incident_map_list(j);
             loop_var := loop_var + 1;
             --DBMS_OUTPUT.put_line('Unmatched lob' || to_char(lob_incident_map_list(j).lob_id));
             end if;
         end loop;
       end if;
       if (lob_incident_map_list_nomatch.count is not null and lob_incident_map_list_nomatch.count <> 0) then
          PKG_OS_OBJECT_SEARCH.SP_OBJECT_CHILDREN_OF_TYPE_GET ( in_session_id, in_transaction_id, v_customer_object_id, 24, policy_object_list);
          for k in 1 .. policy_object_list.count
          loop
              lob_policy := pkg_os_object_io.fn_object_bv_get( in_session_id , in_transaction_id, policy_object_list(k), 26806004 );
              --DBMS_OUTPUT.put_line('Policy lob' || to_char(lob_policy));
              for l in 1 .. lob_incident_map_list_nomatch.count loop
                if ( lob_incident_map_list_nomatch(l).lob_id = lob_policy ) then
                  --DBMS_OUTPUT.put_line('Policy lob' || to_char(lob_policy));
                  return 'F';
                end if;
              end loop;
          end loop;
        end if;
        return 'T';
end fn_warning_for_policy;


function fn_get_default_adjuster
(
      in_session_id        object.object_id%type,
      in_transaction_id    object.object_id%type
)
return number
is
      v_default_adjuster         number := null;
begin

    -- Get default claims adjuster
    select max(user_id) into v_default_adjuster from DRAGON_USER where ACTOR_TYPE_ID = 16746 AND STATUS_ID = 75 ;


    return v_default_adjuster;

end fn_get_default_adjuster;

--------------------------------------------------------------------------------------------------

procedure sp_bats_process
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_ba_trxset_id        in          object.object_id%type,    /* BillingAccountTransactionSet ID */
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is

     v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_claims_trx_process';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_cache                pkg_os_object_cache.t_object_cache;
     v_current_date                date    :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_ba_trxset_id);
     v_transaction_type            db_transaction_set_type.db_trxset_enum%type;


begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Batch ID: '||in_ba_trxset_id ||
               ' by calling pkg_db_object.sp_billing_acct_trx_process.'
          );
      end if;

     -- call common procedure to process common batch
     pkg_db_object.sp_billing_acct_trx_process
     (
        in_session_id,
        in_transaction_id,
        in_ba_trxset_id,    -- BillingAccountTransactionSet ID
        v_object_cache,
        io_action_outcome_id
     );

      v_transaction_type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ba_trxset_id,29707346);

       if v_session_control.gLogging_Full then
        pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| v_transaction_type '||v_transaction_type

          );
      end if;

  /*   pkg_db_object.sp_billingacounttrxset_process
     (
          in_session_id,
          in_transaction_id,
          in_ba_trxset_id,
          v_transaction_type,
          v_current_date
     );*/

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_bats_process;

--------------------------------------------------------------------------------------------------


procedure sp_disbursement_create
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_ba_trxset_id        in          object.object_id%type,    /* BillingAccountTransactionSet ID */
     io_action_outcome_id   in out      outcome.outcome_id%type,
     in_fitem_id            in          number
)
is

     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_disbursement_create';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_cache                pkg_os_object_cache.t_object_cache;
     v_current_date                date    :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_ba_trxset_id);

     v_selected_list               pkg_os_object.t_object_list;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Updating Disbursement Batch ID: '||in_ba_trxset_id ||
               ' by calling pkg_db_billing_payable.sp_disb_fitrx_create_manual()'
          );
      end if;

     v_selected_list.delete;

     v_selected_list(1) := in_fitem_id;

     -- call billing Sp - create disbursement
     pkg_db_billing_payable.sp_disb_fitrx_create_manual
     (
          in_session_id,
          in_transaction_id,
          in_ba_trxset_id,    -- BillingAccountTransactionSet ID
          v_object_cache,
          io_action_outcome_id,
          v_selected_list
     );

end sp_disbursement_create;

--------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_generate_incident_number
(
      in_session_id       in      object.object_id%type,
      in_transaction_id   in      object.object_id%type,
      in_object_id        in      object.object_id%type,
      out_incident_number in out     varchar2
)
is

v_procedure_name         constant system_log.program_name%type :=  pkg_name||'fn_get_incident_number';

begin

    out_incident_number := 'INC'||SEQ_INCIDENT_NUMBER.nextval;

    exception
       when others then
            pkg_os_logging.sp_log_error
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          sqlerrm
                                       );
       raise;

end sp_generate_incident_number;

--------------------------------------------------------------------------------------------------------------------------------

function get_alphabet
(
    in_number in number
)
return varchar2
is
      v_procedure_name         constant system_log.program_name%type :=  pkg_name||'get_alphabet';
      type alphabet is table of varchar2(5) index by pls_integer;
      alphabets     alphabet;
      remn number;
begin

  for i in 65..90
  loop
        alphabets(i-64) := chr(i);
  end loop;

  remn := mod(in_number,26);

  if in_number/26 <= 1 then
      return alphabets(in_number);
  elsif in_number/26 > 1 and remn <> 0 then
      return alphabets(floor(in_number/26))||alphabets(remn);
  else
      return alphabets(floor((in_number/26)-1))||'Z';
  end if;

end get_alphabet;

--------------------------------------------------------------------------------------------------------------------------------
procedure sp_generate_claim_number
(
      in_session_id             in object.object_id%type,
      in_transaction_id         in object.object_id%type,
      in_object_id              in object.object_id%type,
      in_incidentLossSetId      in object.object_id%type,                        -- Change the variable name acc to naming convention
      in_count_loss_set_claims  number,
      out_claim_number          in out  varchar2
)
is
      v_procedure_name                  constant system_log.program_name%type :=  pkg_name||'sp_generate_claim_number';

      v_parent_incident_id              object.object_id%type;
      v_claim_incident_number           object_bv_value.business_variable_value%type;

      gbv_incident_number               constant number(12) := 32340546;
      gbv_incident_count                constant number(12) :=34186046;
      v_inc_claim_count                 number;

begin

    v_parent_incident_id   := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_incidentLossSetId);

    v_claim_incident_number := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_incident_id,gbv_incident_number);

    v_inc_claim_count := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_parent_incident_id,gbv_incident_count);

    --  out_claim_number := v_claim_incident_number || nvl(get_alphabet( nvl(in_count_loss_set_claims , 0 )) , 'A');
    if(in_count_loss_set_claims<10)
    then
      out_claim_number := 'CL'||substr(v_claim_incident_number,4)||'-0'||in_count_loss_set_claims;
    else
      out_claim_number := 'CL'||substr(v_claim_incident_number,4)||'-'||in_count_loss_set_claims;
    end if;

    exception
       when others then
            pkg_os_logging.sp_log_error
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                sqlerrm
             );
       raise;

end sp_generate_claim_number;
--------------------------------------------------------------------------------------------------
procedure sp_claim_disburse_confirm
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_ba_trxset_id        in          object.object_id%type,    /* Disbursement  BillingAccountTransactionSet ID */
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is
     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_claim_disburse_batch_confirm';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_cache                pkg_os_object_cache.t_object_cache;
     v_current_date                date    :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_ba_trxset_id);
begin
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Create FiChange under Disbursement BillingAccountTransactionSet: '||in_ba_trxset_id ||
               ' by calling pkg_db_billing_payable.sp_disburse_batch_confirm()'
          );
      end if;

      pkg_db_billing_payable.sp_disburse_batch_confirm
         (
              in_session_id,
              in_transaction_id,
              in_billacctrxset_id   => in_ba_trxset_id,
              in_object_cache       => v_object_cache,
              io_action_outcome_id  => io_action_outcome_id,
              in_current_date_time  => v_current_date
         );

      if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Successfully able to create FiChange for disbursement: '
          );
      end if;

end sp_claim_disburse_confirm;
--------------------------------------------------------------------------------------------------

function fn_set_Ref_Primary_Claimant
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_action_object_id  in         object.object_id%type,
    in_priority_type     in         object_bv_value.business_variable_value%type
)
  return number is

      v_procedure_name              constant system_log.program_name%type   := pkg_name||'fn_set_Ref_Primary_Claimant';

      v_incidentLossSet             object.object_id%type := in_action_object_id;
      v_incidentLossList            pkg_os_object.t_object_list;
      v_incidentLoss                object.object_id%type;

      v_incidentLoss_count          number;
      v_ref_primaryClaimant_id      object.object_id%type;

      v_ref_primClaimant_PT         object_bv_value.business_variable_value%type;

      v_ref_claimant_id             object.object_id%type;
      v_current_PartyType           object_bv_value.business_variable_value%type;

      v_priority_type               object_bv_value.business_variable_value%type;
      v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get
                                                                            (in_session_id,in_transaction_id);

begin

  --Check if current primary claimant is null then initialize it with v_ref_claimant_incidentEntity
  --Check the type of primary claimant if it isn't null and isn't primary insured then replace with current v_ref_claimant_incidentEntity
  --given that v_ref_claimant_incidentEntity is primary insured, else don't do anything.

  if(in_priority_type != 1)
    then
      v_priority_type := 2;
     else v_priority_type := 1;
  end if;


    v_incidentLossList.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_action_object_id,
        gObjType_IncidentLoss,
        v_incidentLossList
    );

    v_incidentLoss_count:= v_incidentLossList.count;

    for counter IN 1 .. v_incidentLoss_count loop

        v_incidentLoss    := v_incidentLossList(counter);

        v_ref_claimant_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_incidentloss, gbv_RefClaimant);

        v_current_PartyType:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ref_claimant_id, gbv_InjuredPartyType);

        if (v_ref_primClaimant_PT not in (v_priority_type) and v_current_PartyType in (v_priority_type) OR
            v_ref_primaryClaimant_id is null)
        then

            v_ref_primaryClaimant_id:= v_ref_claimant_id;

            v_ref_primClaimant_PT := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ref_primaryClaimant_id, gbv_InjuredPartyType);

        end if;

   end loop;


   return v_ref_primaryClaimant_id;

end fn_set_Ref_Primary_Claimant;
--------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_cal_claimcoverage_avb_limit
--
-- %USAGE
--        It sets the available limit for a claim coverage, taking into account the different constraints present (aggregate, per-occurrence or --        per-occurrence-per-person).
--
--  %ALGORITHM
--      1.   Calculates the aggregate, per-occurrence and per-occurrence-per-person available limits and return the least available limit.

-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_cal_claimcoverage_avb_limit
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_action_object_id  in         object.object_id%type
)
  return number is

      v_procedure_name              constant system_log.program_name%type   := pkg_name||'fn_cal_claimcoverage_avb_limit';

      v_claimCoverage               object.object_id%type := in_action_object_id;
      v_coverageConstraintList      pkg_os_object.t_object_list;
      v_coverageConstraint_count    number;

      v_coverageConstraint          object.object_id%type;

      v_mainVsSubCoverageFlag       object_bv_value.business_variable_value%type;
      v_memberSCubCovList           pkg_os_object.t_object_list;
      v_memberSubCovCount           number;
      v_child_sub_cov               object.object_id%type;

      v_availableLimit              object_bv_value.business_variable_value%type;
      v_covConsLimit                object_bv_value.business_variable_value%type;
      v_covExhaustedLimit           object_bv_value.business_variable_value%type;
      v_covRecovery                 object_bv_value.business_variable_value%type;

      v_coverageConstraintType      object_bv_value.business_variable_value%type;

     -- v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get

begin

    v_coverageConstraintList.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_action_object_id,
        gObjType_CoverageConstraint,
        v_coverageConstraintList
    );

    v_coverageConstraint_count:= v_coverageConstraintList.count;

    for counter IN 1 .. v_coverageConstraint_count loop

        v_coverageConstraint    := v_coverageConstraintList(counter);

        v_coverageConstraintType:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_coverageConstraint, gbv_CoverageConstraintType);

        if (v_coverageConstraintType in (aggregate_limit))
        then
            -- When aggregate limit is present (10146), calculate the available limit.
            -- Populate the variables with aggregate specific information and accordingly calculate the available limit.

            v_covConsLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_coverageConstraint, gbv_CovConstraintLimit);

            v_covExhaustedLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_AggregateExhlimit);

            v_covRecovery := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_AggregateRec);

            if (v_availableLimit is null OR NVL(v_availableLimit,0.0) > (NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0)) )
              then
                 v_availableLimit := NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0);
            end if;

         end if;

         if (v_coverageConstraintType = PerOccurence_Limit)
          then
          --  Check if per_occurence is present i.e. every type other than aggregate and per occurrence per person.
          --  Populate the variables with per occurrence specific information and accordingly calculate the available limit.

            v_covConsLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_coverageConstraint, gbv_CovConstraintLimit);

            v_covExhaustedLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_PerOccExhlimit);

            v_covRecovery := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_PerOccRec);

            if (v_availableLimit is null OR NVL(v_availableLimit,0.0) > (NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0)) )
              then
                 v_availableLimit := NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0);

            end if;

          end if;


        if (v_coverageConstraintType in (per_occ_per_person_limit))
          then
          --  Check if per_occurence_per_person is present.
          --  Populate the variables with per occurrence per person specific information and accordingly calculate the available limit.

            v_covConsLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_coverageConstraint, gbv_CovConstraintLimit);

            v_covExhaustedLimit := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_PerOccPerPersonExhlimit);

            v_covRecovery := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_PerOccPerPersonRec);

            if (v_availableLimit is null OR NVL(v_availableLimit,0.0) > (NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0)) )
              then
                 v_availableLimit := NVL(v_covConsLimit,0.0) +  NVL(v_covRecovery,0.0) - NVL(v_covExhaustedLimit,0.0);
            end if;

        end if;

   end loop;

   -- Handling for Main Coverage
   v_mainVsSubCoverageFlag := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claimCoverage, gbv_mainVsSubCoverage);

   if v_mainVsSubCoverageFlag = gEnum_MainVsSubCov_Main then

        v_memberSCubCovList.delete;

         pkg_os_object_search.sp_object_children_of_type_get
         (
             in_session_id,
             in_transaction_id,
             v_claimCoverage,
             gObjType_MemeberSubCoverage,
             v_memberSCubCovList
         );

         v_memberSubCovCount:= v_memberSCubCovList.count;


         for i IN 1 ..  v_memberSubCovCount loop

         v_child_sub_cov := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, v_memberSCubCovList(i), gbv_ReferenceSubCoverage );

         v_availableLimit := v_availableLimit - fn_cal_claimcoverage_avb_limit(in_session_id,in_transaction_id,v_child_sub_cov);

        end loop;
   end if;

   return v_availableLimit;

end fn_cal_claimcoverage_avb_limit;

-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_duplicate_task_num
(
      in_session_id              in        object.object_id%type,
      in_transaction_id          in        object.object_id%type,
      in_object_id               in        object.object_id%type,
      in_task_type               in        dragon_task.task_type%type,
      in_task_title              in        dragon_task.task_title%type
)
  return number
  is
     v_procedure_name         system_log.program_name%type := pkg_name||'fn_duplicate_task_num';
     v_session_control               pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_task_count                   integer := 0;

begin

          select
             count(1)
           into
             v_task_count
           from
             dragon_task
           where
             task_object_id = in_object_id
           and
             task_type = in_task_type
           and
             upper(task_title) = upper(in_task_title);
           --and
            -- task_status_id = 2; --Incomplete task status



     return v_task_count;

exception
     when others then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Exception occured '
               ||'  Error Msg: '
               ||sqlerrm
          );

          return v_task_count;

end fn_duplicate_task_num;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_check_existing_DPU
--
-- %USAGE
--
--
--  %ALGORITHM
--        in_action_object_id should be the billingAccount.

-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_check_existing_DPU
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_action_object_id  in         object.object_id%type,
    in_address           in         object.object_id%type
)
  return number is

      v_procedure_name              constant system_log.program_name%type   := pkg_name||'fn_check_existing_DPU';

      v_billingAccount              object.object_id%type := in_action_object_id;
      v_disbursementProfileList     pkg_os_object.t_object_list;
      v_disbursementProfile         object.object_id%type;
      v_disbursementMode            object_bv_value.business_variable_value%type;
      v_disbursementProfile_count   number;

      v_disbursement_address        object.object_id%type;

      v_address_label               varchar2(500);

      v_disbursement_address_label  varchar2(500);

      v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get
                                                                            (in_session_id,in_transaction_id);

begin


    v_address_label:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_address, gbv_object_label);

    dbms_output.put_line(v_address_label);

    v_disbursementProfileList.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_action_object_id,
        gObjType_DPU,
        v_disbursementProfileList
    );

    v_disbursementProfile_count:= v_disbursementProfileList.count;

    for counter IN 1 .. v_disbursementProfile_count loop

        v_disbursementProfile    := v_disbursementProfileList(counter);

        v_disbursementMode := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_disbursementProfile, 31690846);

        v_disbursement_address := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_disbursementProfile, 31691546);

        v_disbursement_address_label := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_disbursement_address, gbv_object_label);

        dbms_output.put_line(v_disbursement_address_label);

        if ( v_address_label = v_disbursement_address_label AND v_disbursementMode = 3)
        then

            return v_disbursementProfile;

        end if;

   end loop;


   return null;

end fn_check_existing_DPU;

-----------------------------------------------------------------------------------------------------------------------------------------------------

---Procedure to update the state, service type and specialty at the vendor level based on the user state, service type and specialty.
---Added in MUSTDEV-2579, OSCLAIMDEV-3972

procedure sp_validate_specialty_stype
(
       in_session_id        in object.object_id%type,
       in_transaction_id    in object.object_id%type,
       in_action_object_id  in object.object_id%type,
       io_action_outcome_id in out outcome.outcome_id%type
)
is
  v_procedure_name              constant system_log.program_name%type := 'sp_validate_specialty_stype';
  v_datamart_tf char:= 'T';
  v_parent_vendor_id object.object_id%type;

  -- for specialty
  v_user_profile_index  number;
  v_vendor_profile_index  number;
  v_user_profile_list pkg_os_object.t_object_list;
  v_vendor_profile_list  pkg_os_object.t_object_list;

  v_user_profile_specialty   object_bv_value.business_variable_value%type;
  v_vendor_profile_specialty object_bv_value.business_variable_value%type;
  v_vendor_specialty object_bv_value.business_variable_value%type;

  gobjtype_dragonuserprofile object_type.object_type_id%type := 3342304;
  gobjtype_partneruserprofile object_type.object_type_id%type := 3342604;
  v_new_vendor_profile object.object_id%type;

  gbv_PartnerConcatSpecialty       constant number := 32580745;
  gbv_GenericProfileSpecialty constant number:=34089246;
  v_profile_matched_tf char(1):='f' ;

  --for service type

  v_user_service_type_index  number;
  v_vendor_service_type_index  number;
  v_user_service_type object_bv_value.business_variable_value%type;
  v_vendor_service_type object_bv_value.business_variable_value%type;

  v_user_service_type_list pkg_os_token.t_string_table;
  v_vendor_service_type_list pkg_os_token.t_string_table;

  gbv_VendorServiceType constant number :=32542945;
  gbv_UserServiceType constant number :=32543445;
  v_service_type_matched_tf char(1):='f' ;

    --for state

  v_user_state_index  number;
  v_vendor_state_index  number;
  v_user_state object_bv_value.business_variable_value%type;
  v_vendor_state object_bv_value.business_variable_value%type;

  v_user_state_list pkg_os_token.t_string_table;
  v_vendor_state_list pkg_os_token.t_string_table;


  gbv_VendorServiceStates constant number :=32574545;
  gbv_UserServiceStates constant number :=32580245;
  v_state_matched_tf char(1):='f' ;

begin

    -- get the parent vendor id
    v_parent_vendor_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

    -- get the child dragonuserprofile object list
    v_user_profile_list.delete;
    pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,in_action_object_id,gobjtype_dragonuserprofile,v_user_profile_list);

    -- get the child partneruserprofile object list
    v_vendor_profile_list.delete;
    pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,v_parent_vendor_id,gobjtype_partneruserprofile,v_vendor_profile_list);

    --get the dragon user service type
    v_user_service_type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id, gbv_UserServiceType);

    --get the vendor service type
    v_vendor_service_type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_vendor_id, gbv_VendorServiceType);

    --Tokenize the dragon user service type
    v_user_service_type_list.delete;
    pkg_os_token.sp_tokenize_string(v_user_service_type,',',v_user_service_type_list);

    --Tokenize the vendor service type
    v_vendor_service_type_list.delete;
    pkg_os_token.sp_tokenize_string(v_vendor_service_type,',',v_vendor_service_type_list);

    --get the dragon user state
    v_user_state := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id, gbv_UserServiceStates);

    --get the vendor state
    v_vendor_state := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_vendor_id, gbv_VendorServiceStates);

    --Tokenize the dragon user state
    v_user_state_list.delete;
    pkg_os_token.sp_tokenize_string(v_user_state,',',v_user_state_list);

    --Tokenize the vendor state
    v_vendor_state_list.delete;
    pkg_os_token.sp_tokenize_string(v_vendor_state,',',v_vendor_state_list);

    --Loop for updating the vendor specialty
    v_user_profile_index := v_user_profile_list.first;

    --To store the updated value of concatenated specialties at the partner level
    v_vendor_specialty:=null;

    while v_user_profile_index is not null loop

        v_profile_matched_tf := 'f';

        v_user_profile_specialty := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_user_profile_list(v_user_profile_index), gbv_GenericProfileSpecialty );

        v_vendor_profile_index :=  v_vendor_profile_list.first;

        while v_vendor_profile_index is not null loop

            v_vendor_profile_specialty := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_vendor_profile_list(v_vendor_profile_index), gbv_GenericProfileSpecialty);

            if (v_user_profile_specialty = v_vendor_profile_specialty) then

                v_profile_matched_tf := 't';

                exit;

            end if;

            v_vendor_profile_index :=  v_vendor_profile_list.next(v_vendor_profile_index);
        end loop;

        if v_profile_matched_tf = 'f' and v_user_profile_specialty is not null then

          -- Create a brand new partnerprofile object and store the value similar to dragonuserprofile
          pkg_os_object_copy.sp_object_duplicate(in_session_id,in_transaction_id,v_user_profile_list(v_user_profile_index),v_new_vendor_profile,'f');

          pkg_os_object.sp_object_parent_set(in_session_id,in_transaction_id,v_new_vendor_profile,v_parent_vendor_id);

          pkg_os_object.sp_object_transmute(in_session_id,in_transaction_id,v_new_vendor_profile,v_parent_vendor_id,gobjtype_partneruserprofile);

          pkg_os_datamart. sp_datamart_update_row(in_session_id,in_transaction_id,v_new_vendor_profile, v_datamart_tf);

          pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name,'Creating partner profile object: ' || v_new_vendor_profile|| ' For the specialty: ' ||v_user_profile_specialty);

          --Add this user profile specialty to the partner concatenated specialty
          if v_vendor_specialty is null then
            v_vendor_specialty :=v_user_profile_specialty;
          else
            v_vendor_specialty := pkg_os_token.fn_concatenate(v_vendor_specialty,',');
            v_vendor_specialty := pkg_os_token.fn_concatenate(v_vendor_specialty,v_user_profile_specialty);
          end if;

        end if;

        v_user_profile_index :=  v_user_profile_list.next(v_user_profile_index);

    end loop;

    --Added in MUSTDEV-5126
    --Loop for updating the BV at the Partner level- Partner Concatenate PartnerProfiles Specialty

    --Set the BV Partner Concatenate PartnerProfiles Specialty as null
    pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_parent_vendor_id,gbv_PartnerConcatSpecialty,null);

    v_vendor_profile_index :=  v_vendor_profile_list.first;

        while v_vendor_profile_index is not null loop

            v_vendor_profile_specialty := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_vendor_profile_list(v_vendor_profile_index), gbv_GenericProfileSpecialty);

      --Add this partner profile specialty to the partner concatenated specialty
            if v_vendor_specialty is null then
                v_vendor_specialty :=v_vendor_profile_specialty;
            else
                v_vendor_specialty := pkg_os_token.fn_concatenate(v_vendor_specialty,',');
                v_vendor_specialty := pkg_os_token.fn_concatenate(v_vendor_specialty,v_vendor_profile_specialty);
            end if;

            v_vendor_profile_index :=  v_vendor_profile_list.next(v_vendor_profile_index);

        end loop;

    -- Update Partner Concatenated Specialty and update datamart
    pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_parent_vendor_id,gbv_PartnerConcatSpecialty,v_vendor_specialty);

    pkg_os_datamart. sp_datamart_update_row(in_session_id,in_transaction_id,v_parent_vendor_id, v_datamart_tf);

    pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name,'Updated value of concatenated partner specialty: ' || v_vendor_specialty);

    --Loop for updating the vendor service type
    v_user_service_type_index := v_user_service_type_list.first;

    while v_user_service_type_index is not null loop

        v_service_type_matched_tf := 'f';

        v_vendor_service_type_index :=  v_vendor_service_type_list.first;

        while v_vendor_service_type_index is not null loop

            if(v_vendor_service_type_list(v_vendor_service_type_index)=v_user_service_type_list(v_user_service_type_index)) then

                v_service_type_matched_tf := 't';

            exit;

            end if;

            v_vendor_service_type_index :=  v_vendor_service_type_list.next(v_vendor_service_type_index);

        end loop;

        if v_service_type_matched_tf = 'f' and v_user_service_type_list(v_user_service_type_index) is not null then

            --Add this service type to the vendor service type
            if v_vendor_service_type is null then
              v_vendor_service_type :=v_user_service_type_list(v_user_service_type_index);
            else
              v_vendor_service_type := pkg_os_token.fn_concatenate(v_vendor_service_type,',');
              v_vendor_service_type := pkg_os_token.fn_concatenate(v_vendor_service_type,v_user_service_type_list(v_user_service_type_index));
            end if;

            pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_parent_vendor_id,gbv_VendorServiceType,v_vendor_service_type);

            pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name,'Updated value of vendor service type: ' || v_vendor_service_type);

            pkg_os_datamart. sp_datamart_update_row(in_session_id,in_transaction_id,v_parent_vendor_id, v_datamart_tf);

        end if;

        v_user_service_type_index := v_user_service_type_list.next(v_user_service_type_index);

    end loop;

    --Start : MUSTDEV-3044 Added by Surabhee

        v_user_state_index := v_user_state_list.first;

        while v_user_state_index is not null loop

          v_state_matched_tf := 'f';

          v_vendor_state_index :=  v_vendor_state_list.first;

            while v_vendor_state_index is not null loop

              if(v_vendor_state_list(v_vendor_state_index)=v_user_state_list(v_user_state_index)) then

                v_state_matched_tf := 't';

              exit;

              end if;

              v_vendor_state_index :=  v_vendor_state_list.next(v_vendor_state_index);

        end loop;

      if v_state_matched_tf = 'f' then

        if v_user_state_list(v_user_state_index) is not null then

          --Add this state to the vendor state
          if v_vendor_state is null then
            v_vendor_state := v_user_state_list(v_user_state_index);
          else
            v_vendor_state := pkg_os_token.fn_concatenate(v_vendor_state,',');
            v_vendor_state := pkg_os_token.fn_concatenate(v_vendor_state,v_user_state_list(v_user_state_index));
          end if;

          pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_parent_vendor_id,gbv_VendorServiceStates,v_vendor_state);

          pkg_os_datamart. sp_datamart_update_row(in_session_id,in_transaction_id,v_parent_vendor_id, v_datamart_tf);

          pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name,'Updated value of vendor states: ' || v_vendor_state);
        end if;
      end if;

      v_user_state_index := v_user_state_list.next(v_user_state_index);

    end loop;

        --end : MUSTDEV-3044

  io_action_outcome_id :=  pkg_os_constant.gOutcome_OK ;

end sp_validate_specialty_stype;

-----------------------------------------------------------------------------------------------------------------------------------------------------

---Generic Procedure to fetch set display value.
---Added by susharma

function fn_tokenize_set_lookup
(
       in_session_id        in object.object_id%type,
       in_transaction_id    in object.object_id%type,
       lookup_list_id       lookup_list_value.lookup_list_id%type,
       set_bv_value         in object_bv_value.business_variable_value%type
)
return varchar2 is
    v_input_list pkg_os_token.t_string_table;

    v_input_list_index  number;

    v_result_value      varchar2(500);

begin

      --Tokenize the set bv's value
      v_input_list.delete;

      pkg_os_token.sp_tokenize_string(set_bv_value,',',v_input_list);

      v_input_list_index := v_input_list.first;

      while v_input_list_index is not null loop

           --fetch the look up value for this list
           --pkg_os_lookup.fn_lookup_list_text_get ( lookup_list_id , to_number(v_input_list(v_input_list_index) )) ;

           v_result_value := pkg_os_token.fn_concatenate(v_result_value,',');
           v_result_value := pkg_os_token.fn_concatenate(v_result_value, pkg_os_lookup.fn_lookup_list_text_get ( lookup_list_id , v_input_list(v_input_list_index) ) );

           v_input_list_index :=  v_input_list.next(v_input_list_index);

          end loop;

return v_result_value;

end fn_tokenize_set_lookup;

-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_tokenize_set_ref_lookup
(
       in_session_id        in object.object_id%type,
       in_transaction_id    in object.object_id%type,
       in_action_object     in object.object_id%type,
       set_bv_id            number,
       set_bv_value         in object_bv_value.business_variable_value%type
       --lookup_list_id       number,

)
return varchar2 is
    v_input_list pkg_os_token.t_string_table;

    v_input_list_index  number;

    v_result_value      varchar2(4000);

    v_list_value varchar2(100);

    v_vendor_profile_list  pkg_os_object.t_object_list;

    gobjtype_partneruserprofile object_type.object_type_id%type := 3342604;

     v_vendor_profile_specialty object_bv_value.business_variable_value%type;
    v_vendor_profile_index  number;

begin

      --Tokenize the set bv's value
      v_input_list.delete;
       v_vendor_profile_list.delete;

      pkg_os_token.sp_tokenize_string(set_bv_value,',',v_input_list);

      v_input_list_index := v_input_list.first;


       if(set_bv_id = 32580745) then--Concatenated speciality on Partner

              --fetch list of child PartnerProfile
              pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,in_action_object,gobjtype_partneruserprofile,v_vendor_profile_list);

              --Iterate PartnerProfiles and fetch each lookup value while concatinating it

          v_vendor_profile_index :=  v_vendor_profile_list.first;

          while v_vendor_profile_index is not null loop

              v_vendor_profile_specialty := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_vendor_profile_list(v_vendor_profile_index), 34089246);


              v_list_value:= pkg_os_reference_lookup.fn_get_lookup_text ( in_session_id, in_transaction_id, v_vendor_profile_list(v_vendor_profile_index), 34089246 , v_vendor_profile_specialty,'T');

              if (v_vendor_profile_index <> 1 ) then
              v_result_value := pkg_os_token.fn_concatenate(v_result_value,',');
              end if;
              v_result_value := pkg_os_token.fn_concatenate(v_result_value,v_list_value);

              v_vendor_profile_index :=  v_vendor_profile_list.next(v_vendor_profile_index);
          end loop;


        end if;
      if (set_bv_id <> 32580745) then

      while v_input_list_index is not null loop

           --fetch the look up value for this list


           v_vendor_profile_specialty:= pkg_os_reference_lookup.fn_get_lookup_text ( in_session_id, in_transaction_id, in_action_object, set_bv_id , v_input_list(v_input_list_index),'T');
           v_result_value := pkg_os_token.fn_concatenate(v_result_value,',');
           v_result_value :=pkg_os_token.fn_concatenate(v_result_value,v_vendor_profile_specialty);

           v_input_list_index :=  v_input_list.next(v_input_list_index);

          end loop;
      end if;
return v_result_value;

end fn_tokenize_set_ref_lookup;

-----------------------------------------------------------------------------------------------------------------------------------------------------



---Function to get the outcome of the claims autocreation loop(ClaimsAutocreationProcessing/ClaimsAutocreationProcessed) based on whether there are any unprocessed claims generated from the current incident, for which the assignment and reserve transactions need to be autocreated.
---Added in OSCLAIMDEV-4038
function fn_claim_creation_loop_outcome
(
      in_session_id             object.object_id%type,
      in_transaction_id         object.object_id%type,
      in_action_object_id       object.object_id%type
)
return number
is
      gobjtype_incidentlossset        object_type.object_type_id%type := 3201246;
      gobjtype_claimtrxregistration   object_type.object_type_id%type := 3395946;    --Registration
      gobjtype_claim                  object_type.object_type_id%type := 32367046;
      gobjtype_incident               object_type.object_type_id%type := 3201046;
      gobjtype_subclaim               object_type.object_type_id%type := 3204946;

      v_claims_list                   pkg_os_object.t_object_list;
      v_child_GenricTransaction_list  pkg_os_object.t_object_list;
      v_sub_claim_list                pkg_os_object.t_object_list;
      v_claims_index                  number;
      v_obj_type                      number;
      v_claim_trx_reg_list            pkg_os_object.t_object_list;
      v_claim_trx_assignment_flag     object_bv_value.business_variable_value%type;
      v_claim_processed_outcome       number;
      v_loss_set_object               object.object_id%type;
      v_claim_trx_registration        object.object_id%type;
      v_function_name                 constant system_log.program_name%type   := pkg_name||'fn_claim_creation_loop_outcome';
      v_session_control               pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


begin

      v_claim_processed_outcome :=74146;

      --
      -- Get all the IncidentLossSet objects
      --
      v_loss_set_object :=  pkg_os_object_search.fn_object_11_child_get
                            (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                gobjtype_incidentlossset
                            );

      if v_loss_set_object is null then
            return v_claim_processed_outcome;
      end if;

      pkg_os_logging.sp_log
      (
          in_session_id,
          in_transaction_id,
          v_function_name,
          'IncidentLossSet '||v_loss_set_object
      );

      --
      -- Get the claims generated from the first IncidentLossSet object
      --

      v_claims_list.delete;

      pkg_os_object_search.sp_object_referencers_get
      (
          in_session_id,
          in_transaction_id,
          v_loss_set_object,
          gobjtype_claim,
          v_claims_list
      );

      if v_session_control.gLogging_Full
      then

         pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_function_name,
              'Claims List count'||v_claims_list.count
          );

      end if;

      v_claims_index :=v_claims_list.first;

      while v_claims_index is not null loop

            v_obj_type  := PKG_OS_OBJECT.fn_object_type_get(in_session_id, in_transaction_id, v_claims_list(v_claims_index));

            if v_obj_type = gobjtype_incident then
        -- The Claim Creation function should never consider the Incident Object for processing.
                if v_session_control.gLogging_Full
                then
                    pkg_os_logging.sp_log
                      (
                          in_session_id,
                          in_transaction_id,
                          v_function_name,
                          'Skipping incident object '||v_claims_list(v_claims_index)
                      );
                end if;

            else

                if v_session_control.gLogging_Full
                then
                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_function_name,
                        'Processing claim : '||v_claims_list(v_claims_index)
                    );
                end if;

                --
                -- Get the claim transaction registration objects.
                --

                v_claim_trx_registration := pkg_os_object_search.fn_object_11_child_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_claims_list(v_claims_index),
                                                  gobjtype_claimtrxregistration
                                             );



                pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'Registration transaction : '||v_claim_trx_registration
                );

                --
                -- Get the GenericTransactionLista
                --
                v_child_GenricTransaction_list.delete;

                pkg_os_object_search.sp_object_children_of_type_get
                (
                      in_session_id,
                      in_transaction_id,
                      v_claim_trx_registration ,
                      3176901,
                      v_child_GenricTransaction_list,
                      pkg_os_constant_bv.gbv_GenObjID
                  );

                pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'Count of assignment transaction child : '||v_child_GenricTransaction_list.count ||
                    'Claim ID : '||v_claims_list(v_claims_index) ||
                    'Claim Index : '||v_claims_index ||
                    'v_claim_trx_registration : ' || v_claim_trx_registration
                );

                if nvl(v_child_GenricTransaction_list.count, 0) = 0  /*and (v_sub_claim_list.count>0 or nvl(v_claim_trx_assignment_flag,0)!=2) */ then

                      pkg_os_logging.sp_log
                      (
                            in_session_id,
                            in_transaction_id,
                            v_function_name,
                            'Out come Claim ID : '||v_claims_list(v_claims_index)
                      );

                      return v_claims_list(v_claims_index);
                end if;

            end if;

            v_claims_index:=v_claims_list.next(v_claims_index);
      end loop;
      --
      --Since no unprocessed claim has been found, return the outcome 'ClaimAutocreationProcessed'
      --
      return v_claim_processed_outcome;

end fn_claim_creation_loop_outcome;

-----------------------------------------------------------------------------------------------------------------------------------------------------


---To implement the following validation prior to the creation of a claim - There should be at least one loss added. If a claim has already been created for this incident, add a new loss or select an additional coverage for an existing loss.
---Added in OSCLAIMDEV-4038
function fn_validate_create_claim
(
      in_session_id        object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_action_object_id         object.object_id%type
)
return char
is
      v_loss_set_object_list         pkg_os_object.t_object_list;
      v_loss_list pkg_os_object.t_object_list;
      v_claim_coverage_type_list pkg_os_object.t_object_list;
      v_claim_coverage_list pkg_os_object.t_object_list;
      gobjtype_incidentlossset object_type.object_type_id%type := 3201246;
      gobjtype_incidentloss object_type.object_type_id%type := 3201546;
      gobjtype_claimcoveragetype object_type.object_type_id%type := 3335046;
      gobjtype_claimcoverage object_type.object_type_id%type := 3335146;
      v_loss_set_object object.object_id%type;
      v_loss_index  number;
      v_claim_coverage_type_index  number;
      v_claim_coverage_index  number;
      v_generate_subclaim_flag object_bv_value.business_variable_value%type;
      v_subclaim_generated_flag object_bv_value.business_variable_value%type;
      v_incident_loss_state object_bv_value.business_variable_value%type;
      v_result char(1);
      v_function_name  constant system_log.program_name%type   := pkg_name||'fn_validate_create_claim';

begin

    v_result:='F';

    -- Get all the IncidentLossSet objects
    v_loss_set_object_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
         in_session_id,
         in_transaction_id,
         in_action_object_id,
         gobjtype_incidentlossset,
         v_loss_set_object_list,
         pkg_os_constant_bv.gbv_GenObjID
    );

    if v_loss_set_object_list.count=0 then
      return v_result;
    end if;

    -- Get the first IncidentLossSet object
    v_loss_set_object :=v_loss_set_object_list(v_loss_set_object_list.first);

    pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_function_name,
               'IncidentLossSet'||v_loss_set_object
          );

    -- Get all the IncidentLoss objects
    v_loss_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
         in_session_id,
         in_transaction_id,
         v_loss_set_object,
         gobjtype_incidentloss,
         v_loss_list,
         pkg_os_constant_bv.gbv_GenObjID
    );

    v_loss_index:=v_loss_list.first;

    while v_loss_index is not null loop

      -- Get the value of the IncidentLoss state
      v_incident_loss_state:=pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_loss_list(v_loss_index), 210153);

      pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_function_name,
               'Processing loss : '||v_loss_list(v_loss_index)|| ' Loss State : '||v_incident_loss_state
          );

      -- If one or more IncidentLoss objects are present in GenericCreated state, then return 'T' because claim can be created or merged.
      if v_incident_loss_state=23 OR v_incident_loss_state=75  then
        v_result :='T';
        return v_result;
      end if;

      --Get all the claim coverage type objects
      v_claim_coverage_type_list.delete;
      pkg_os_object_search.sp_object_children_of_type_get
      (
         in_session_id,
         in_transaction_id,
         v_loss_list(v_loss_index),
         gobjtype_claimcoveragetype,
         v_claim_coverage_type_list,
         pkg_os_constant_bv.gbv_GenObjID
      );

      v_claim_coverage_type_index:=v_claim_coverage_type_list.first;

      while v_claim_coverage_type_index is not null loop

        --Get all the claim coverage objects
        v_claim_coverage_list.delete;
        pkg_os_object_search.sp_object_children_of_type_get
        (
         in_session_id,
         in_transaction_id,
         v_claim_coverage_type_list(v_claim_coverage_type_index),
         gobjtype_claimcoverage,
         v_claim_coverage_list,
         pkg_os_constant_bv.gbv_GenObjID
        );

        v_claim_coverage_index:=v_claim_coverage_list.first;

        while v_claim_coverage_index is not null loop

         -- Get the Generate Subclaim flag and the Subclaim generated flag to check whether any new coverages are selected. If yes, then return 'T' because this coverage can be created/merged in a claim.
          v_generate_subclaim_flag:=pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_claim_coverage_list(v_claim_coverage_index), 32463646);

          v_subclaim_generated_flag:=pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_claim_coverage_list(v_claim_coverage_index), 34121246);

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_function_name,
               'Generate Subclaim Flag : '||v_generate_subclaim_flag || ' Subclaim Generated Flag : ' ||v_subclaim_generated_flag
          );

         --If user had checked the Generate SubClaim check box and SubClaim has not been generate for this coverage, then return 'T'
         --To implement the Alternate Flow-2 (Addition of more losses) of the use case, the coverage selection needs to be re-entrant. The user cannot un-check any previously selected coverage but additional coverage can be selected. Additional losses too can be added after the claim generation.
          if v_generate_subclaim_flag is not null and v_subclaim_generated_flag is null then
            v_result:='T';
            return v_result;
          end if;
          v_claim_coverage_index:=v_claim_coverage_list.next(v_claim_coverage_index);
        end loop;
        v_claim_coverage_type_index:=v_claim_coverage_type_list.next(v_claim_coverage_type_index);
      end loop;
      v_loss_index:=v_loss_list.next(v_loss_index);
    end loop;

    --Since no unprocessed loss or coverage has been found, return 'F'
    return v_result;

    end fn_validate_create_claim;
-----------------------------------------------------------------------------------------------------------------------------------------------------

---Procedure to set multiple vendor child for the parent vendor

procedure sp_set_multiple_child
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_object_id         in         object.object_id%type,
    io_outcome_id        in out     outcome. outcome_id%type
)
is
    v_procedure_name varchar2(100) := 'sp_set_multiple_child';
    v_child_vendor_list    pkg_os_token.t_string_table;
    v_child_vendor_index   number;
    v_selected_vendor       object_bv_value.business_variable_value%type;
    v_list_select_object_id object.object_id%type;
  v_datamart_tf char:= 'T';

begin
    v_list_select_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_object_id, '210356.211681');

    v_selected_vendor := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_select_object_id,31814434);

    pkg_os_token.sp_tokenize_string(v_selected_vendor,',',v_child_vendor_list);

    v_child_vendor_index := v_child_vendor_list.first;

    while v_child_vendor_index is not null loop

       pkg_os_object.sp_object_parent_set(in_session_id,in_transaction_id,v_child_vendor_list(v_child_vendor_index),in_object_id);

     pkg_os_datamart. sp_datamart_update_row(in_session_id,in_transaction_id,v_child_vendor_list(v_child_vendor_index), v_datamart_tf);

       v_child_vendor_index := v_child_vendor_list.next(v_child_vendor_index);

    end loop;

    io_outcome_id := pkg_os_constant.gOutcome_OK;

exception when others then

   pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name, sqlerrm);

end sp_set_multiple_child;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- To set or reset catastrophe references to related claims
procedure sp_set_selected_references
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_object_id         in         object.object_id%type,
    in_exec_mode         in         char,                                     -- S to set references and R to reset the references
    io_outcome_id        in out     outcome.outcome_id%type
)
is
    v_procedure_name             varchar2(100) := 'sp_set_selected_references';
    v_selected_claim_list        pkg_os_token.t_string_table;
    v_selected_claim_index       number;
    v_selected_claims            object_bv_value.business_variable_value%type;
    v_list_selected_object_id    object.object_id%type;
    v_ref_object_id              object.object_id%type;                        -- Holds the object ID which will be set as the reference
    v_disassociation_reason      object_bv_value.business_variable_value%type; -- It should be set to null when setting the reference
    v_current_object_type_id     object.object_id%type;                        -- Current object type claim or catastrophe
    v_datamart_tf                char(1):= 'T';
    v_searched_object_type_id    object_type.object_type_id%type;
    v_claim_id                   object.object_id%type;

begin
    v_current_object_type_id  := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_object_id);

    v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_object_id, '210356.211681');

    v_selected_claims := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_selected_object_id,31814434);

    pkg_os_token.sp_tokenize_string(v_selected_claims,',',v_selected_claim_list);

    v_selected_claim_index := v_selected_claim_list.first;

    if in_exec_mode = 'S' then

       if v_current_object_type_id = pkg_oc_functions.gObjType_Claim then

          v_ref_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_object_id,pkg_oc_functions.gbv_ClaimRefCatastrophe);

       else

          v_ref_object_id := in_object_id;

       end if;
       v_disassociation_reason := '';

    elsif in_exec_mode = 'R' then

      v_disassociation_reason := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_object_id,pkg_oc_functions.gbv_ClaimDisassociationReason);

      v_ref_object_id := null;

    end if;


    v_searched_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_selected_claim_list(1) );

  while v_selected_claim_index is not null loop











      if v_searched_object_type_id = pkg_oc_functions.gObjType_Claim then


         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_selected_claim_list(v_selected_claim_index),pkg_oc_functions.gbv_ClaimRefCatastrophe,v_ref_object_id);

         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_selected_claim_list(v_selected_claim_index),pkg_oc_functions.gbv_ClaimDisassociationReason,v_disassociation_reason);

         pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_selected_claim_list(v_selected_claim_index), v_datamart_tf);

       elsif v_searched_object_type_id = pkg_oc_functions.gObjType_ClaimBusinessDup then

          v_claim_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_selected_claim_list(v_selected_claim_index),pkg_oc_functions.gbv_ClaimBusinessDupRef);

          pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_claim_id,pkg_oc_functions.gbv_ClaimRefCatastrophe,v_ref_object_id);

        pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_claim_id,pkg_oc_functions.gbv_ClaimDisassociationReason,v_disassociation_reason);

          pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_claim_id, v_datamart_tf);

       end if;

       v_selected_claim_index := v_selected_claim_list.next(v_selected_claim_index);

    end loop;

    io_outcome_id := pkg_os_constant.gOutcome_OK;

exception when others then

   pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_procedure_name, sqlerrm);

end sp_set_selected_references;

----------------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_claims_vendor_evaluation
(
  in_session_id     in object.object_id%type,
  in_transaction_id in object.object_id%type,
  in_task_object_id in object.object_id%type,
  io_outcome_id     in out outcome.outcome_id%type

)is

     cursor c_user_feedback_detail (in_context_obj_type_id in object_type.object_type_id%type, in_task_category in number)
     is
         select
              *
             from feedback_user_detail
             where
                  context_object = in_context_obj_type_id
                  And
                  active_tf = 'T'
                  and
                  (in_task_category is null
                   or
                   task_sub_category = in_task_category);

     v_procedure_name              constant system_log.program_name%type := 'sp_claims_vendor_evaluation';

     gbv_TaskAssociatedObjectBvId  constant number := 22046205;
     gbv_TaskSubCatgoryBvId        constant number := 31997001;
     gbv_FeedbackAssocUserId       constant number := 34105946;
     gbv_FeedbackAssocObjectId     constant number := 34105846;
     gbv_FeedbackAssocTaskId       constant number := 34106146;
     gbv_FeedbackServiceTypeId     constant number := 34105046;
     gbv_FeedbackProviderId        constant number := 34106046;
     gbv_TaskAssignedToId          constant number := 21863802;
     gbv_FeedbackReferTaskId       constant number := 34106246;

     gObjectType_Feedback_Statistic constant number := 3392046;
     gObjectType_Feedback           constant number := 3392146;


     v_task_associated_object_id   object.object_id%type;
     v_task_category               object_bv_value.business_variable_value%type;
     v_md_record_count             number :=0;
     v_feedback_stat_object_id     object.object_id%type;
     v_feedback_object_id          object.object_id%type;
     v_user_id_for_feedback        object.object_id%type;
     v_task_assigned_to            object.object_id%type;
     v_task_object_type_id      object_type.object_type_id%type;



begin

    if (in_task_object_id is null) then

       pkg_os_logging.sp_log
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 'Input task object is nulll..'
            );
        raise no_data_found;

    end if;

    v_task_associated_object_id := pkg_os_object_io.fn_object_bv_get
                                   (
                                       in_session_id,
                                       in_transaction_id,
                                       in_task_object_id,
                                       gbv_TaskAssociatedObjectBvId
                                    );

    v_task_category := pkg_os_object_io.fn_object_bv_get
                       (
                           in_session_id,
                           in_transaction_id,
                           in_task_object_id,
                           gbv_TaskSubCatgoryBvId
                        );

     v_task_assigned_to := pkg_os_object_io.fn_object_bv_get
                           (
                               in_session_id,
                               in_transaction_id,
                               in_task_object_id,
                               gbv_TaskAssignedToId
                            );

      v_task_object_type_id := pkg_os_object.fn_object_type_get
                                  (
                                    in_session_id,
                                    in_transaction_id,
                                    v_task_associated_object_id
                                  );

      pkg_os_logging.sp_log
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 'Start creating feedback obejct for following details..'||
                 ' Task Object Id..'||in_task_object_id||
                 ' Task Associated Object Id..'||v_task_associated_object_id||
                 ' Task Category Id..'||v_task_category||
                 ' Task Associated Object Type Id..'||v_task_object_type_id
            );

      for r_user_feedback_detail in c_user_feedback_detail(v_task_object_type_id,v_task_category)
      loop
          v_md_record_count := v_md_record_count+1;


                pkg_os_logging.sp_log
                (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     'Inside cursor'||v_md_record_count
                      ||' and v_md_record_count'||v_md_record_count

                 );

          if (v_md_record_count = 1)then

               v_user_id_for_feedback := pkg_os_object_io.fn_object_bv_path_get
                                         (
                                               in_session_id,
                                               in_transaction_id,
                                               v_task_associated_object_id,
                                               r_user_feedback_detail.assign_user_bv_path
                                          );
               v_feedback_stat_object_id := pkg_os_object_search.fn_object_11_child_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_user_id_for_feedback,
                                                  gObjectType_Feedback_Statistic
                                            );

                pkg_os_logging.sp_log
                (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     'Start creating feedback objec for user ..'||v_user_id_for_feedback
                      ||' and FeedbackStatistic Object'||v_feedback_stat_object_id

                 );

               if(v_feedback_stat_object_id is null )then
                  -- Create new brand new feedback statistic object, it mean it is first feedback of the user

                  pkg_os_object.sp_object_create
                  (
                       in_session_id,
                       in_transaction_id,
                       gObjectType_Feedback_Statistic,
                       v_user_id_for_feedback,
                       v_feedback_stat_object_id

                   );
               end if;

               -- Next step create feedback object and set required BV
                pkg_os_object.sp_object_create
                (
                     in_session_id,
                     in_transaction_id,
                     gObjectType_Feedback,
                     v_feedback_stat_object_id,
                     v_feedback_object_id
                 );

                /*
                * Set the reference from Feedback object to DragonUser/Entity object,
                * for which user has to provide the feedback.
                */
                 pkg_os_object_io.sp_object_bv_set
                 (
                      in_session_id,
                      in_transaction_id,
                      v_feedback_object_id,
                      gbv_FeedbackAssocUserId,
                      v_user_id_for_feedback
                 );

                /*
                * Set a reference from Feedback object to task associated object on which user has performed the service.
                */

                pkg_os_object_io.sp_object_bv_set
                 (
                      in_session_id,
                      in_transaction_id,
                      v_feedback_object_id,
                      gbv_FeedbackAssocObjectId,
                      v_task_associated_object_id
                 );

                /*
                * Set a reference from Feedback object to task object. As task object is triggering action for feedback.
                */

                pkg_os_object_io.sp_object_bv_set
                 (
                      in_session_id,
                      in_transaction_id,
                      v_feedback_object_id,
                      gbv_FeedbackAssocTaskId,
                      in_task_object_id
                 );

                /*
                * Set a reference from Feedback object to DragonUser object.provider the feedback.
                */
                pkg_os_object_io.sp_object_bv_set
                 (
                      in_session_id,
                      in_transaction_id,
                      v_feedback_object_id,
                      gbv_FeedbackProviderId,
                      v_task_assigned_to
                 );

                /*
                * Set a reference from Task object to feedback object as back reference for workflow navigation.
                */
                pkg_os_object_io.sp_object_bv_set
                 (
                      in_session_id,
                      in_transaction_id,
                      in_task_object_id,
                      gbv_FeedbackReferTaskId,
                      v_feedback_object_id
                 );

          else

              pkg_os_logging.sp_log_error
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   'FEEDBACK_USER_DETAIL have multiple entry for the combination of object id..'||v_task_associated_object_id
                   ||' and task category Id..'||v_task_category
               );

          end if;

      end loop;

exception when others then

    pkg_os_logging.sp_log_error
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           'Error encounter while creating new feedback obejct..'||sqlerrm
       );

end sp_claims_vendor_evaluation;


-----------------------------------------------------------------------------------------------------------------------------------------------------

---Added in MUSTDEV-5126
---This function can be used to calculate the aggregate rating of a vendor/user or dynamic calculation of the average rating based on the filters (Child, User,Service Type, Specialty) applied on the performance evaluation tab.

function fn_calculate_average_rating
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_action_object_id  in         object.object_id%type,
    in_vendor_id         in         object.object_id%type,
    in_user_id           in         object.object_id%type,
    in_service_type_id   in         number,
    in_specialty_id      in         number
)
return float
is
    v_function_name varchar2(100) := pkg_name||' fn_calculate_average_rating';
    v_average_rating float:=null;
    v_parent_object_id object.object_id%type;

    v_feedback_stats_list pkg_os_object.t_object_list;
    v_feedback_stats_index number;
    gobjtype_feedbackstats object_type.object_type_id%type := 3392046;

begin
    v_parent_object_id:=nvl(in_vendor_id,in_action_object_id);

    pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_function_name,'Calculating the average rating for the following combination - Vendor : ' || v_parent_object_id || ' ,User : '|| in_user_id|| ' ,Service Type: '||in_service_type_id || ' and, Specialty: '||in_specialty_id);

    /*Algorithm for dynamic average rating calculation -

    1. If a user is specified, then get the feedback statistics object under this user.

    2. If a user is not specified, then get the list of ALL the feedback statistics objects in the vendor hierarchy using recursive search.

    3. Get all the child feedback records for the qualified feedback statistics object/objects.

    4. If the service type and/or specialty values are specified, then use them to further filter the feedback records by comparing them with the target columns - FEEDBACK_SERVICE_TYPE and FEEDBACK_SPECIALTY.

    5. Finally, return the rounded average of the FEEDBACK_RATING of the qualified feedback records.
    */

    if in_user_id is not null then
      v_parent_object_id:=in_user_id;
    end if;

    v_feedback_stats_list.delete;
    pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,v_parent_object_id,gobjtype_feedbackstats,v_feedback_stats_list,null);

    pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_function_name,'Count of the feedback statistics objects which will be used for the average rating calculation : ' ||v_feedback_stats_list.count);

    --Query the FEEDBACK table for dynamic average rating calculation as per the above algorithm -
    select round(avg(feedback_rating),2) into v_average_rating from feedback where feedback_parent_feedbackstats in (select * from table(v_feedback_stats_list)) and (nvl(in_service_type_id,0)=0 or in_service_type_id=FEEDBACK_SERVICE_TYPE) and (nvl(in_specialty_id,0)=0 or in_specialty_id=FEEDBACK_SPECIALTY);

    pkg_os_logging.sp_log (in_session_id,in_transaction_id,v_function_name,'Average Rating : ' ||v_average_rating);

    return v_average_rating;

  end fn_calculate_average_rating;


-----------------------------------------------------------------------------------------------------------------------------------------------------

---Added in MUSTDEV-5412
---This procedure is used to create the Vendor Evaluation tasks during the Claim Closure Transaction, for all the processed 'Assigned Vendor' transactions in the Claim.

procedure sp_create_vendor_eval_tasks
(
      in_session_id         in  object.object_id%type,
      in_transaction_id     in  object.object_id%type,
      in_action_object_id   in  object.object_id%type,
      io_outcome_id         in out outcome.outcome_id%type
) is
      v_procedure_name            constant system_log.program_name%type := 'sp_create_vendor_evaluation_tasks';
      v_parent_claim_id           object.object_id%type;
      v_claim_trx_service_index   number;
      v_claim_trx_service_list    pkg_os_object.t_object_list;
      v_claim_trx_service_state   object_bv_value.business_variable_value%type;
      v_processed_state_id        constant number   :=106;
      v_ok_outcome_id             constant number   :=22;
      v_action_id                 constant number   :=1104864;

      gobjtype_claimtrxservice object_type.object_type_id%type := 3337046;
      gbv_ObjectStateBvId  constant number := 210153;


begin
      --Get the parent claim object
      v_parent_claim_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

      pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        ' Start creating Vendor Evaultion task for Claim Id..'||v_parent_claim_id
      );

      --Get the child Claim Transaction Service object list
      v_claim_trx_service_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
          in_session_id,
          in_transaction_id,
          v_parent_claim_id,
          gobjtype_claimtrxservice,
          v_claim_trx_service_list
      );

      --Loop for creating the vendor evaluation tasks for each processed Claim Transaction Service object
      v_claim_trx_service_index :=v_claim_trx_service_list.first;

      while v_claim_trx_service_index is not null loop

          --Get the value of the ClaimTransactionService object state
          v_claim_trx_service_state:=pkg_os_object_io.fn_object_bv_get
          (
              in_session_id,
              in_transaction_id,
              v_claim_trx_service_list(v_claim_trx_service_index),
              gbv_ObjectStateBvId
          );

          --Create the Vendor Evaluation task only for processed ClaimTransactionService objects
          if v_claim_trx_service_state = v_processed_state_id then

              pkg_os_wf_task.sp_action_result_tasks
              (
                  in_session_id,
                  in_transaction_id,
                  v_action_id,
                  v_ok_outcome_id,
                  v_claim_trx_service_list(v_claim_trx_service_index)
              );

              pkg_os_logging.sp_log
              (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,'
                  Creating Vendor Evaluation Task for the ClaimTransactionService object - ' ||v_claim_trx_service_list(v_claim_trx_service_index)
              );
          end if;

          v_claim_trx_service_index:=v_claim_trx_service_list.next(v_claim_trx_service_index);

    end loop;

    io_outcome_id := pkg_os_constant.gOutcome_OK;
exception when others then

    pkg_os_logging.sp_log_error
    (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        'Error while creating a task for Vendor Evaluation..'||sqlerrm
    );

end sp_create_vendor_eval_tasks;
-----------------------------------------------------------------------------------------------------------------------------------------------------

---Added in OSCLAIMDEV-4251, MUSTDEV-776
---This procedure is used to create the the child ClaimantMedicareDetails objects under ClaimsTransactionEdit.
---The number of child objects depends on the number of claimants for which Bodily Injury main coverage is selected.

procedure sp_create_medicare_objects
(
      in_session_id         in  object.object_id%type,
      in_transaction_id     in  object.object_id%type,
      in_action_object_id   in  object.object_id%type,
      io_outcome_id         in out outcome.outcome_id%type
) is
      v_procedure_name            constant system_log.program_name%type := 'sp_create_medicare_objects';
      v_parent_claim_id           object.object_id%type;
      v_parent_incident_id        object.object_id%type;
      v_medicare_object_id        object.object_id%type;
      v_ref_claimant_object_id    object.object_id%type;
      v_ref_medicare_entity_id    object.object_id%type;
      v_financial_category_type_id object.object_id%type;

      v_sub_claim_list    pkg_os_object.t_object_list;
      v_loss_type   object_bv_value.business_variable_value%type;
      v_bi_loss_type        constant number   :=246;
      v_indemnity_category_type constant number :=10046;

      type incident_entity_t is table of number;
      incident_entity_list incident_entity_t;
      unique_incident_entity_list incident_entity_t;

      v_list_index   number:=1;

      gobjtype_subclaim object_type.object_type_id%type := 3204946;
      gobjtype_medicaredetails object_type.object_type_id%type := 3396746;
      gobjtype_incidententity object_type.object_type_id%type := 3200746;
      gbv_LossTypeBvPath  varchar(50)  := '32387846.32483746';
      gbv_IncidentBvPath  varchar(50)  := '32387846.32256446.32253246';
      gbv_RefClaimantBvPath  varchar(50)  := '32387846.32462846';
      gbv_RefMedicareEntityBvId constant number := 34188346;
      gbv_RefMedicareProviderBvId constant number :=34190646;
      gbv_FinCategoryBvId constant number :=33933046;

begin
      --Get the parent claim object
      v_parent_claim_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

      pkg_os_logging.sp_log
      (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          ' Processing the ClaimTransactionEdit object..'||in_action_object_id||
          ' , child of the claim object..' ||v_parent_claim_id ||
          ' , to check whether the child ClaimantMedicareDetails objects need to be created.'
      );

      --Get the child Subclaim list
      v_sub_claim_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
          in_session_id,
          in_transaction_id,
          v_parent_claim_id,
          gobjtype_subclaim,
          v_sub_claim_list
      );

      incident_entity_list:=incident_entity_t();

      incident_entity_list.extend(v_sub_claim_list.count);

      --Loop for storing the Incident Entities corresponding to the subclaims of indemnity category and associated with BI Loss
      for i in 1..v_sub_claim_list.count loop

          --Get the type of loss from the reference IncidentLoss object
          v_loss_type :=pkg_os_object_io.fn_object_bv_path_get
          (
             in_session_id,
             in_transaction_id,
             v_sub_claim_list(i),
             gbv_LossTypeBvPath
           );

           --Get the Financial Category type (Indemnity/Defense/Expense) from the subclaim
           v_financial_category_type_id :=pkg_os_object_io.fn_object_bv_get
           (
             in_session_id,
             in_transaction_id,
             v_sub_claim_list(i),
             gbv_FinCategoryBvId
           );

           --Store the Incident Entity only for subclaims of indemnity category and associated with BI Loss
           if v_loss_type = v_bi_loss_type and nvl(v_financial_category_type_id,v_indemnity_category_type)=v_indemnity_category_type then

              --Get the referenced SubClaim->Generated_IncidentLoss->IncidentEntity object
              v_ref_claimant_object_id :=pkg_os_object_io.fn_object_bv_path_get
              (
                in_session_id,
                in_transaction_id,
                v_sub_claim_list(i),
                gbv_RefClaimantBvPath
              );

              incident_entity_list(v_list_index):=v_ref_claimant_object_id ;

              v_list_index :=v_list_index+1;

           else

              incident_entity_list.trim;

           end if;

       end loop;

       --Store the unique Incident Entities in another array. Create the ClaimantMedicareDetails objects for the unique incident entities
       unique_incident_entity_list:=set(incident_entity_list);

       --Iterate over the list of Unique Entities and create ClaimantMedicareDetails object for each of them
       for i in unique_incident_entity_list.first..unique_incident_entity_list.last loop

        -- Get the parent incident object
        v_parent_incident_id :=pkg_os_object_io.fn_object_bv_path_get
        (
          in_session_id,
          in_transaction_id,
          unique_incident_entity_list(i),
          gbv_IncidentBvPath
        );

        -- Create the ClaimantMedicareDetails object and set a reference from it to the SubClaim->Generated_IncidentLoss->IncidentEntity object
        pkg_os_object.sp_object_create
        (
          in_session_id,
          in_transaction_id,
          gobjtype_medicaredetails,
          in_action_object_id,
          v_medicare_object_id
        );

        pkg_os_object_io.sp_object_bv_set
        (
          in_session_id,
          in_transaction_id,
          v_medicare_object_id,
          gbv_RefMedicareEntityBvId,
          unique_incident_entity_list(i)
        );

        --Create the IncidentEntity Reference Medicare Provider Entity if it is not created yet
        v_ref_medicare_entity_id :=pkg_os_object_io.fn_object_bv_get
          (
            in_session_id,
            in_transaction_id,
            unique_incident_entity_list(i),
            gbv_RefMedicareProviderBvId
          );

        if v_ref_medicare_entity_id is null then
          pkg_os_object.sp_object_create
          (
            in_session_id,
            in_transaction_id,
            gobjtype_incidententity,
            v_parent_incident_id,
            v_ref_medicare_entity_id
          );

          --Set a reference from the Incident Entity id to the Reference Medicare Provider Entity
          pkg_os_object_io.sp_object_bv_set
          (
            in_session_id,
            in_transaction_id,
            unique_incident_entity_list(i),
            gbv_RefMedicareProviderBvId,
            v_ref_medicare_entity_id
          );
        end if;

        pkg_os_logging.sp_log
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,'
          Created the ClaimantMedicareDetails object..' || v_medicare_object_id ||
          ' , and set the reference medicare entity as..'|| unique_incident_entity_list(i)
        );
    end loop;

    io_outcome_id := pkg_os_constant.gOutcome_OK;

exception when others then

    pkg_os_logging.sp_log_error
    (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        'Error while creating the medicare object(s)..'||sqlerrm
    );

end sp_create_medicare_objects;

--------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------
/* procedure sp_group_user_association
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_group_user_association';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_dragon_user_id         object.object_id%type:=in_action_object_id;
     v_child_object_id        object.object_id%type;
     v_datamart_tf            char(1):='T';
     v_service_group_id       object.object_id%type:=pkg_os_object_io.fn_object_bv_get(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_session_id,
                                                  PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest
               );
     v_selected_user_list         pkg_os_token.t_string_table;
     v_selected_user_index        number;
     v_selected_user     object_bv_value.business_variable_value%type;
     v_list_selected_object_id object.object_id%type;


    begin

    v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_action_object_id, gbv_path_ListOfElement);

    v_selected_user := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_selected_object_id,PKG_OS_CONSTANT_BV.gbv_ListObjectsSelected);

    pkg_os_token.sp_tokenize_string(v_selected_user,',',v_selected_user_list);

    v_selected_user_index := v_selected_user_list.first;

    While v_selected_user_index is not null LOOP

                v_child_object_id:=null;
         if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '||||||  sp_group_user_association: '||
                         'in_action_object_id..'||in_action_object_id||
                         'v_dragon_user..'||v_dragon_user_id||
                         'v_service_group_id..'||v_service_group_id||
                         'in_action_id..'||in_action_id
                    );
          end if;

          pkg_os_object.sp_object_create_child_of_type
          (
               in_session_id,
               in_transaction_id,
               v_selected_user_list(v_selected_user_index),
               gbv_ServiceGroupMemeber,
               v_child_object_id
           );

          pkg_os_object_io.sp_object_bv_set
          (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         gbv_ServiceGroupRef,
                         v_service_group_id
          );

          pkg_os_datamart.sp_datamart_update_row
                         (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         v_datamart_tf);

            pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         gbv_ObjectState,
                         75
           );

           if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '||||||  sp_group_user_association completed: '||
                         'in_action_object_id..'||in_action_object_id||
                         'v_dragon_user..'||v_dragon_user_id||
                         'v_service_group_id..'||v_service_group_id||
                         'in_action_id..'||in_action_id
                    );
          end if;

          v_selected_user_index := v_selected_user_list.next(v_selected_user_index);

          END LOOP;

           io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception when others then
           pkg_os_logging.sp_log_error
           (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Error while associating the user with group ..'||sqlerrm
            );

end sp_group_user_association;


 --------------------------------------------------------------------------------------------------
procedure sp_group_user_dissociation
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_group_user_dissociation';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_dragon_user_id              object.object_id%type:=in_action_object_id;
     v_child_object_id             object.object_id%type;
     v_datamart_tf                 char(1):='T';
     v_service_group_member_id     object.object_id%type;
     v_service_group_id            object.object_id%type:=pkg_os_object_io.fn_object_bv_get(
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_session_id,
                                                            PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest
               );
     v_selected_user_list          pkg_os_token.t_string_table;
     v_selected_user_index         number;
     v_selected_user               object_bv_value.business_variable_value%type;
     v_list_selected_object_id     object.object_id%type;


    begin

    v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_action_object_id, gbv_path_ListOfElement);

    v_selected_user := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_selected_object_id,PKG_OS_CONSTANT_BV.gbv_ListObjectsSelected);

    pkg_os_token.sp_tokenize_string(v_selected_user,',',v_selected_user_list);

    v_selected_user_index := v_selected_user_list.first;

    While v_selected_user_index is not null LOOP

         if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '||||||  sp_group_user_dissociation: '||
                              'in_action_object_id..'||in_action_object_id||
                              'v_dragon_user..'||v_dragon_user_id||
                              'v_service_group_id..'||v_service_group_id||
                              'in_action_id..'||in_action_id
                         );
          end if;

           v_service_group_member_id:=pkg_os_object_search.fn_object_with_attribute_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_selected_user_list(v_selected_user_index),
                         gbv_ServiceGroupMemeber,
                         gbv_ServiceGroupRef,
                         v_service_group_id

                    );

             if v_session_control.gLogging_Full then
                     pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '||||||  sp_group_user_dissociation: '||
                              'v_service_group_member_id..'||v_service_group_member_id
                         );
             end if;
           pkg_os_object.sp_object_delete(
               in_session_id,
               in_transaction_id,
               v_dragon_user_id,
               v_service_group_member_id,
               gbv_ServiceGroupMemeber
               );



          pkg_os_datamart.sp_datamart_update_row
                         (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         v_datamart_tf);

             if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '||||||  sp_group_user_dissociation completed: '||
                         'in_action_object_id..'||in_action_object_id||
                         'v_dragon_user..'||v_dragon_user_id||
                         'v_service_group_id..'||v_service_group_id||
                         'in_action_id..'||in_action_id
                    );
              end if;
          v_selected_user_index := v_selected_user_list.next(v_selected_user_index);

          END LOOP;

           io_action_outcome_id := pkg_os_constant.gOutcome_OK;
 exception when others then
           pkg_os_logging.sp_log_error
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Error while dissociating the user with group ..'||sqlerrm
                   );

 end sp_group_user_dissociation;
 */
 ---------------------
 procedure sp_group_user_association
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_group_user_association';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_dragon_user_id         object.object_id%type:=in_action_object_id;
     v_service_group_member_type_id  object_type.object_type_id%type := 2358346;
     v_child_object_id    object.object_id%type;
     gbv_ServiceGroupRefBvId constant number := 29618746;
     v_datamart_tf           char(1):='T';
     v_service_group_id         object.object_id%type:=pkg_os_object_io.fn_object_bv_get(
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    28987309
               );



    begin
--         if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||  sp_group_user_association: '||
               'in_action_object_id..'||in_action_object_id||
               'v_dragon_user..'||v_dragon_user_id||
               'v_service_group_id..'||v_service_group_id||
               'in_action_id..'||in_action_id
          );

          pkg_os_object.sp_object_create_child_of_type
          (
               in_session_id,
               in_transaction_id,
               v_dragon_user_id,
               v_service_group_member_type_id,
               v_child_object_id
               );

          pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         gbv_ServiceGroupRefBvId,
                         v_service_group_id
           );

            pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         gbv_ObjectState,
                         75
           );

          pkg_os_datamart.sp_datamart_update_row
                         (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         v_datamart_tf);

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||  sp_group_user_association completed: '||
               'in_action_object_id..'||in_action_object_id||
               'v_dragon_user..'||v_dragon_user_id||
               'v_service_group_id..'||v_service_group_id||
               'in_action_id..'||in_action_id
          );

           io_action_outcome_id := pkg_os_constant.gOutcome_OK;
exception when others then
           pkg_os_logging.sp_log_error
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                 'Error while associating the user with group ..'||sqlerrm
                   );

end sp_group_user_association;


--------------------------------------------------------------------------------------------------
procedure sp_group_user_dissociation
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_group_user_dissociation';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_dragon_user_id         object.object_id%type:=in_action_object_id;
     v_service_group_member_type_id  object_type.object_type_id%type := 2358346;
     v_child_object_id    object.object_id%type;
     gbv_ServiceGroupRefBvId constant number := 29618746;
     v_datamart_tf           char(1):='T';
     v_service_group_member_id  object.object_id%type;
     v_service_group_id         object.object_id%type:=pkg_os_object_io.fn_object_bv_get(
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    28987309
               );



    begin
--         if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||  sp_group_user_association: '||
               'in_action_object_id..'||in_action_object_id||
               'v_dragon_user..'||v_dragon_user_id||
               'v_service_group_id..'||v_service_group_id||
               'in_action_id..'||in_action_id
          );


           v_service_group_member_id:=pkg_os_object_search.fn_object_with_attribute_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_dragon_user_id,
                         v_service_group_member_type_id,
                         gbv_ServiceGroupRefBvId,
                         v_service_group_id

                    );

           pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||||||  sp_group_user_association: '||
                    'v_service_group_member_id..'||v_service_group_member_id
               );

           pkg_os_object.sp_object_delete(
               in_session_id,
               in_transaction_id,
               v_dragon_user_id,
               v_service_group_member_id,
               v_service_group_member_type_id
               );

          pkg_os_datamart.sp_datamart_update_row
                         (
                         in_session_id,
                         in_transaction_id,
                         v_child_object_id,
                         v_datamart_tf);

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||  sp_group_user_association completed: '||
               'in_action_object_id..'||in_action_object_id||
               'v_dragon_user..'||v_dragon_user_id||
               'v_service_group_id..'||v_service_group_id||
               'in_action_id..'||in_action_id
          );

           io_action_outcome_id := pkg_os_constant.gOutcome_OK;
exception when others then
           pkg_os_logging.sp_log_error
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Error while dissociating the user with group ..'||sqlerrm
                   );

end sp_group_user_dissociation;

----------------------------------------------------------------------------------------------------
--This funtion validate the assigned object those are assign to queue.
 function fn_validate_queue_assignment
    (
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_current_user_id            in             object.object_id%type,
     in_action_object_id           in             object.object_id%type
    )
    return char
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_validate_queue_assignment';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_child_object_id             object.object_id%type;
     v_datamart_tf                 char(1):='T';
     v_assigned_user_id            object.object_id%type:=null;
     v_selected_object_list        pkg_os_token.t_string_table;
     v_selected_object_index       number;
     v_selected_object             object_bv_value.business_variable_value%type;
     v_list_selected_object_id     object.object_id%type;


    begin

         v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_action_object_id, gbv_path_ListOfElement);

         v_selected_object := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_selected_object_id,PKG_OS_CONSTANT_BV.gbv_ListObjectsSelected);

         pkg_os_token.sp_tokenize_string(v_selected_object,',',v_selected_object_list);

         v_selected_object_index := v_selected_object_list.first;

         While v_selected_object_index is not null LOOP

               v_child_object_id:=null;


               v_assigned_user_id  :=pkg_os_object_io.fn_object_bv_get
                                       (
                                        in_session_id,
                                        in_transaction_id,
                                        v_selected_object_list(v_selected_object_index),
                                        gbv_assigned_user
                                       );

               if v_assigned_user_id = in_current_user_id
               then
                    return 'T';
               end if;

               v_selected_object_index := v_selected_object_list.next(v_selected_object_index);

               END LOOP;

          return 'F';

          exception when others then
                pkg_os_logging.sp_log_error
                (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       'Error while validating the user ..'||sqlerrm
                 );
          end fn_validate_queue_assignment;

----------------------------------------------------------------------------------------------------
--This funtion validate the assigned object those are assign to current user.
function fn_validate_assign_to_me
    (
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_current_user_id            in             object.object_id%type,
     in_action_object_id           in             object.object_id%type
    )
    return char
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_validate_assign_to_me';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_child_object_id             object.object_id%type;
     v_datamart_tf                 char(1):='T';
     v_assigned_user_id            object.object_id%type:=null;
     v_selected_object_list        pkg_os_token.t_string_table;
     v_selected_object_index       number;
     v_selected_object             object_bv_value.business_variable_value%type;
     v_list_selected_object_id     object.object_id%type;


    begin

         v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_action_object_id, gbv_path_ListOfElement);

         v_selected_object := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_list_selected_object_id,PKG_OS_CONSTANT_BV.gbv_ListObjectsSelected);

         pkg_os_token.sp_tokenize_string(v_selected_object,',',v_selected_object_list);

         v_selected_object_index := v_selected_object_list.first;

         While v_selected_object_index is not null LOOP

              v_child_object_id:=null;

              v_assigned_user_id  :=pkg_os_object_io.fn_object_bv_get
                                       (
                                             in_session_id,
                                             in_transaction_id,
                                             v_selected_object_list(v_selected_object_index),
                                             gbv_assigned_user
                                        );

               if v_assigned_user_id is not null and v_assigned_user_id <>0
               then

                    return 'T';
               end if;


               v_selected_object_index := v_selected_object_list.next(v_selected_object_index);

               END LOOP;
          return 'F';

          exception when others then
                pkg_os_logging.sp_log_error
                (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       'Error while validating the user ..'||sqlerrm
                 );
          end fn_validate_assign_to_me;
---------------------------------------------------------------------------------------------------
procedure sp_process_erp_coverage
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_incident_policyCR_id       in             object.object_id%type,
     in_identified_pt_id           in             object.object_id%type,
     io_policy_trx_id              in out         object.object_id%type
)
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_process_erp_coverage';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_applicable_trx_id           object.object_id%type := null;

begin

     if v_session_control.gLogging_Full
       then

           pkg_os_logging .sp_log(in_session_id, in_transaction_id, v_procedure_name, 'Executing custom ERP processing.');

       end if;

     -- io_policy_trx_id := 12312312414;

exception when others then
      pkg_os_logging.sp_log_error
      (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             'Executing custom ERP processing..'||sqlerrm
       );

end  sp_process_erp_coverage;

---------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------
--This function validate if a CTP is associated with any policy or not.
function fn_validate_disb_prf_disable
    (
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type
    )
return char
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_validate_disb_prf_disable';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_DPU_count                   number;


begin

     select
          count (disb_profile_id)
          into
          v_DPU_count
     from
          dragon_disb_profile
     where
          ctf_object_id = in_action_object_id
     AND
          policy_number is not null ;


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Count of disb prof usage linked to policy for cash transfer prof id: '||
               in_action_object_id ||
               ' ...is : '||
               v_DPU_count

          );
      end if;

     if v_DPU_count > 0
     then
        return 'F';
     end if;

     return 'T';

     exception when others then
           pkg_os_logging.sp_log_error
           (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Error while counting the number of disb prof usage linked to policy for this cash transfer prof..'||sqlerrm
            );

end fn_validate_disb_prf_disable;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_claimtrx_billing_int
--
-- %USAGE
--        This procedure is used to process the BillingAccountTransactionSets created against ClaimTransactions.
--        BATS are processed again two claim transactions: Payment and Payment-In (Recovery). The Payment-In transaction
--        only has an Ad-hoc Journal BATS to be processed, where as the Payment transaction deals with Ad-Hoc
--        as well as disbursement BATS.
--
--  %ALGORITHM
--      1. Extract the ClaimTransaction Type
--      2. If the transaction is of type Payment or Recovery, then extract and process the Adhoc BATS. For PaymentIn Trasnction use the Recovery Adhoc Journal BATS to get details
--      3. If the transaction is of type Payment or Payment In, then extract the Disbursement BATS and
--      then create,confirm, process the BATS.
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_object_id
--        in_rule_type_id
--        in_pc_coverage_rule_id
--        io_authority_trigger_amount
--        io_authority_check_tf
--
--------------------------------------------------------------------------------------------------

procedure sp_claimtrx_billing_int
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     v_claimTrx_object_id   in          object.object_id%type,
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is

     v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_claimtrx_billing_int';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_cache                pkg_os_object_cache.t_object_cache;
     v_current_date                date    :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, v_claimTrx_object_id);
     v_transaction_type            db_transaction_set_type.db_trxset_enum%type;
     v_claimTrx_type               business_variable.business_variable_id%type;
     v_disburse_type               business_variable.business_variable_id%type;
     v_fiTrx_list                  pkg_os_object.t_object_list;
     v_fitem                       object.object_id%type;
     v_fitrx                       object.object_id%type;
     v_ba_trxset_adhoc             object.object_id%type;
     v_disb_BATs                   object.object_id%type;
     v_fiTrx_list_index            number;
     in_billing_account_id         object.object_id%type;
     v_billing_acc_parent_id   object.object_id%type;
     v_ctf_object_id               object.object_id%type;
     v_newDisburseProfileUsage     object.object_id%type;
     v_recordOnly_Flag             business_variable.business_variable_id%type;
     v_char                        char;
     v_claimRecoveryTrx_object_id   object.object_id%type;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing Claim Transaction ID'
          );
      end if;

        -- Get the details of transaction type and other revelant flag like payment status, record only transaction
        v_claimTrx_type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                       in_transaction_id,
                                                       v_claimTrx_object_id,
                                                       gbv_claimTrx_type_id);

        v_recordOnly_Flag := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                        in_transaction_id,
                                                        v_claimTrx_object_id,
                                                        gbv_record_only_flag_id);

    -- Check the BillingAccount detail for payment, recovery and paymentin Transactions
    if (v_claimTrx_type = gEnum_ClaimTrxType_Payment
        or v_claimTrx_type = gEnum_ClaimTrxType_PayIn
        or v_claimTrx_type =  gEnum_ClaimTrxType_Recovery)
    then

    -- There is no adhoc journal BATS for PaymentIN, so taking details of Disbursment BATS
    if ( v_claimTrx_type = gEnum_ClaimTrxType_PayIn  ) Then

        -- Get the parent recovery transaction
        v_claimRecoveryTrx_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_claimTrx_object_id,
                                                            gbv_Ref_PaymentInRefRecovery);

        --Get the Adhoc Journal BATS : BV ID: 32511046;
        v_ba_trxset_adhoc := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_claimRecoveryTrx_object_id,
                                                            gbv_RefAdhocBATS);

    else
        --Get the Adhoc Journal BATS : BV ID: 32511046;
        v_ba_trxset_adhoc := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_claimTrx_object_id,
                                                            gbv_RefAdhocBATS);
    End if;

    --OSPRODUCT-11572 start
      in_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                  in_transaction_id,
                                                                  v_ba_trxset_adhoc);

      v_billing_acc_parent_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                    in_transaction_id,
                                                                    in_billing_account_id);

      if v_billing_acc_parent_id is null
      then

        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    ' Billing Account Parent is null, transaction cannot be processed for account                                              id: ' ||
                                    in_billing_account_id);

        raise no_data_found;

      end if;
  --OSPRODUCT-11572 end

    -- 1. Process the Adhoc Journal. This is needed for both Payment and Recovery transactions.
    if v_ba_trxset_adhoc is not null  and ( v_claimTrx_type = gEnum_ClaimTrxType_Payment  or v_claimTrx_type =  gEnum_ClaimTrxType_Recovery)
    then

        -- Process the ADhoc Journal BATS
        sp_bats_process(in_session_id,
                             in_transaction_id,
                             v_ba_trxset_adhoc,
                             io_action_outcome_id);

        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                                in_transaction_id,
                                                v_ba_trxset_adhoc,
                                                v_char);

    end if;

  v_disburse_type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                             in_transaction_id,
                             v_claimTrx_object_id,
                             gbv_PaymentDisbType);


    -- 2. Process the Disbursment BATS  for Payment (Disbursed) and PaymentIn transaction
    if (v_claimTrx_type = gEnum_ClaimTrxType_Payment and v_disburse_type = gEnum_PaymentDisbursed)
    or (  v_claimTrx_type = gEnum_ClaimTrxType_PayIn )
  then

        v_disb_BATs := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                         in_transaction_id,
                                                         v_claimTrx_object_id,
                                                         gbv_RefDisbBATS);

        in_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                    in_transaction_id,
                                                                    v_disb_BATs);

        --OSPRODUCT-11572 start
        v_billing_acc_parent_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_billing_account_id);

        if v_billing_acc_parent_id is null
        then

            pkg_os_logging.sp_log_error(in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' Billing Account Parent is null, transaction cannot be processed for account                                              id:  ' ||
                                        in_billing_account_id);

            raise no_data_found;

        end if;
        --OSPRODUCT-11572 end

        -- Creating Cash Transfer profile and disbursment profile usage objects for disbursement
        v_ctf_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                               in_transaction_id,
                                                               v_disb_BATs,
                                                               gbv_Ref_associatedProfile); --32828640

        pkg_db_profiles.sp_create_dpu_for_customer(in_session_id,
                                                   in_transaction_id,
                                                   in_billing_account_id,
                                                   null,
                                                   v_ctf_object_id,
                                                   null,
                                                   v_newDisburseProfileUsage);

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                v_disb_BATs,
                                                gbv_Ref_DisbBatchUsingProfile, --31711146
                                                v_newDisburseProfileUsage);

        pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                            in_transaction_id,
                                                            v_ba_trxset_adhoc,
                                                            gObjectType_FITransaction, --2365046
                                                            v_fiTrx_list);

            pkg_os_logging.sp_log
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '|||||| Processing Claim Transaction ID: ' || v_claimTrx_object_id
                  );

            v_fiTrx_list_index :=v_fiTrx_list.first;

            v_fitrx := v_fiTrx_list(v_fiTrx_list_index);


        -- Get the associated FIITems from FITransaction under BATS object to create the FIChange object and process the BATS
        v_fitem := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                        in_transaction_id,
                                                        v_fitrx,
                                                        gbv_Ref_AssociatedFItem); --31689946


        pkg_oc_functions.sp_disbursement_create(in_session_id,
                                                    in_transaction_id,
                                                    v_disb_BATs,
                                                    io_action_outcome_id,
                                                    v_fitem);

        pkg_oc_functions.sp_claim_disburse_confirm(in_session_id,
                                                       in_transaction_id,
                                                       v_disb_BATs,
                                                       io_action_outcome_id);

        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                                in_transaction_id,
                                                v_disb_BATs,
                                                v_char);

    end if;

    pkg_os_datamart.sp_datamart_update_row(in_session_id,
                        in_transaction_id,
                        in_billing_account_id,
                        v_char);

    end if;

    -- Process the Disburesement BATS for the record only transactions
    if ((v_claimTrx_type = gEnum_ClaimTrxType_Payment or v_claimTrx_type = gEnum_ClaimTrxType_PayIn
        or v_claimTrx_type =  gEnum_ClaimTrxType_Recovery ) and v_recordOnly_Flag is not null)
    then

        --Get the Adhoc Journal BATS : BV ID: 32511046;
        v_ba_trxset_adhoc := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_claimTrx_object_id,
                                                            gbv_RefAdhocBATS);
        -- Disbursment batch BV ID: 34063246
        v_disb_BATs := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                         in_transaction_id,
                                                         v_claimTrx_object_id,
                                                         gbv_RefDisbBATS);

        -- Set the type, status and udpate the datamart for Adhoc BATS
        if v_ba_trxset_adhoc is not null then
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,  v_ba_trxset_adhoc, gbv_FITrxSetType, gEnum_Adhoc_FITrxSetType);
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,  v_ba_trxset_adhoc, gbv_ObjectState, gEnum_BATS_ProcessedState);
            pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                                    in_transaction_id,
                                                    v_ba_trxset_adhoc,
                                                    v_char);
        end if;

        if v_disb_BATs is not null then
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,  v_disb_BATs, gbv_FITrxSetType, gEnum_Disb_FITrxSetType);
          --pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,  v_disb_BATs, gbv_ObjectState, gEnum_BATS_ProcessedState);

                pkg_db_object.sp_billing_acct_trx_process
                (
                in_session_id,
                in_transaction_id,
                v_disb_BATs  ,
                v_object_cache,
                io_action_outcome_id
                );


        end if;

    end If;
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_claimtrx_billing_int;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_validate_claims_referral
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is

     v_procedure_name              varchar2(100) := 'sp_validate_claims_referral';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_claim_id                    object.object_id%type;
     v_insight_detail_list         pkg_os_object.t_object_list;
     v_insight_detail_index        number := 0;
     v_fraud_alert_list            pkg_os_object.t_object_list;
     v_fraud_alert_index           number;
     gObjType_InsightDetails       constant number := 3371148;
     gObjType_FraudAlert           constant number := 3375648;
     v_insight_sequence            varchar2(100);
     v_prior_insight_count         Number := 0;
begin

     if v_session_control.gLogging_Full
     then

        pkg_os_logging .sp_log(in_session_id, in_transaction_id, v_procedure_name, 'Executing custom referral processing.');

     end if;

     v_claim_id := pkg_os_object_search.fn_object_get_parent_of_type( in_session_id, in_transaction_id, in_action_object_id, gObjType_Claim );

     v_insight_detail_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_InsightDetails,
          v_insight_detail_list
     );

     if v_session_control.gLogging_Full
     then

        pkg_os_logging .sp_log
        (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Input object id.'||in_action_object_id||
              ' Claim Id.'||v_claim_id ||
              ' Count of Insight Detail.'||v_insight_detail_list.count
         );

     end if;

     v_insight_detail_index := v_insight_detail_list.first;

     while v_insight_detail_index is not null
     loop
          v_insight_sequence := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_insight_detail_list(v_insight_detail_index),
                                     32926448
                                );
          if v_session_control.gLogging_Full
          then

               pkg_os_logging .sp_log
               (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   'Sequence Number.'||v_insight_sequence
               );

          end if;

          begin

              select count(*) into v_prior_insight_count
              from dragon_insight_request
              where parent_claim_id = v_claim_id
              and insight_detail_seq like trim(v_insight_sequence);

          exception when no_data_found then

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging .sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        'Inside Exception.'
                    );

               end if;

               pkg_os_underwrite.sp_underwrite_boolean_plan
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_id,
                    v_insight_detail_list(v_insight_detail_index),
                    pkg_os_constant_enum.gUWRuleType_SecurityTrigger,
                    null,
                    io_action_outcome_id,
                    v_insight_detail_list(v_insight_detail_index)
               );

          end;

          if NVL(v_prior_insight_count,0) = 1
          then

               pkg_os_underwrite.sp_underwrite_boolean_plan
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_id,
                    v_insight_detail_list(v_insight_detail_index),
                    pkg_os_constant_enum.gUWRuleType_SecurityTrigger,
                    null,
                    io_action_outcome_id,
                    v_insight_detail_list(v_insight_detail_index)
               );

         end if;

         v_insight_detail_index := v_insight_detail_list.next(v_insight_detail_index);
     end loop;

     -- step 2 create referral for fraudAlert object.
     v_fraud_alert_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_claim_id,
          gObjType_FraudAlert,
          v_fraud_alert_list
     );

      pkg_os_logging .sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Fraud object count .'||v_fraud_alert_list.count
          );

     v_fraud_alert_index := v_fraud_alert_list.first;

     while v_fraud_alert_index is not null
     loop

           pkg_os_logging .sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Inside while index .'||v_fraud_alert_index
              || 'Fraud Alert object '||v_fraud_alert_list(v_fraud_alert_index)
          );

          pkg_os_underwrite.sp_underwrite_boolean_plan
          (
               in_session_id,
               in_transaction_id,
               in_action_id,
               v_fraud_alert_list(v_fraud_alert_index),
               pkg_os_constant_enum.gUWRuleType_SecurityTrigger,
               null,
               io_action_outcome_id,
               v_fraud_alert_list(v_fraud_alert_index)
          );

         v_fraud_alert_index := v_fraud_alert_list.next(v_fraud_alert_index);

     end loop;

exception when others then

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          'Executing custom referral processing..'||sqlerrm
     );

end;
-----------------------------------------------------------------------------------------------------------------------------------------------------



function fn_get_subclaimCR
(
      in_session_id           in  object.object_id%type,
      in_transaction_id       in  object.object_id%type,
      in_coverage_set_trx     in  object.object_id%type,
      in_cov_category_flag    in  object.object_id%type
)
return number
is
      v_membersubclaim_trx_CR_list          pkg_os_object.t_object_list;
      v_membersubcoverageCR_index           Number;
      v_ref_subclaimTrx_id                  object.object_id%type;
      v_parent_subclaim_id                  object.object_id%type;
      v_coverage_category_id                object_bv_value.business_variable_value%type;
      v_return_tf                           char(1) := 'T';

      gbv_ref_defense_id            constant number := 33010448;
      gbv_ref_expense_id            constant number := 33010348;
      gObjectType_CovSetSubTrxCR    constant number := 3398246;
      gbv_ref_subclaimTrx           constant number := 34202246;
      gbv_subclaim_covcategory      constant number := 33933046;

begin

     v_membersubclaim_trx_CR_list.delete;
       v_membersubcoverageCR_index := null;

       pkg_os_object_search.sp_object_children_of_type_get
       (
        in_session_id,
        in_transaction_id,
        in_coverage_set_trx,
        gObjectType_CovSetSubTrxCR,
        v_membersubclaim_trx_CR_list
       );

         v_membersubcoverageCR_index := v_membersubclaim_trx_CR_list.first;


       while v_membersubcoverageCR_index is not null loop
             --SYS.dbms_output.put_line('id = ' || v_membersubclaim_trx_CR_list(v_membersubcoverageCR_index));
             --Get the reference SubClaimTransaction
             v_ref_subclaimTrx_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,
                                          v_membersubclaim_trx_CR_list(v_membersubcoverageCR_index),gbv_ref_subclaimTrx);

             v_parent_subclaim_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ref_subclaimTrx_id);

             v_coverage_category_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, v_parent_subclaim_id, gbv_subclaim_covcategory);
             --SYS.dbms_output.put_line('v_coverage_category_id = '||v_coverage_category_id || 'v_cov_category_flag = '|| in_cov_category_flag );
            if (v_coverage_category_id = 10146) and (in_cov_category_flag = 1)
          then
            return v_membersubclaim_trx_CR_list(v_membersubcoverageCR_index);

            elsif (v_coverage_category_id = 10246) and (in_cov_category_flag = 2)
             then
            return v_membersubclaim_trx_CR_list(v_membersubcoverageCR_index);
         end if;

         v_membersubcoverageCR_index := v_membersubclaim_trx_CR_list.next(v_membersubcoverageCR_index);

       end loop;
return null;
end;



------------------------------------------------------------------------------------------------------------------------------------------------------
/*procedure sp_generate_incident_number
(
      in_session_id       in      object.object_id%type,
      in_transaction_id   in      object.object_id%type,
      in_object_id        in      object.object_id%type,
      out_incident_number in out     varchar2
)
is

v_procedure_name         constant system_log.program_name%type :=  pkg_name||'fn_get_incident_number';

begin

    out_incident_number := 'INC' || substr(in_object_id, 2, 8);

    exception
       when others then
            pkg_os_logging.sp_log_error
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          sqlerrm
                                       );
       raise;

end sp_generate_incident_number;
*/

-------------------------------------------------------------------------------------------------------
/*
procedure sp_generate_claim_number
(
      in_session_id             in object.object_id%type,
      in_transaction_id         in object.object_id%type,
      in_object_id              in object.object_id%type,

      out_claim_number          in out  varchar2
)
is

v_procedure_name         constant system_log.program_name%type :=  pkg_name||'sp_generate_claim_number';

begin

    out_claim_number := 'CL-' || substr(in_object_id, 1, length(in_object_id)- 2);

    exception
       when others then
            pkg_os_logging.sp_log_error
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          sqlerrm
                                       );
       raise;

end sp_generate_claim_number;
*/
-------------------------------------------------------------------------------------------------------

function fn_validate_reserve_referral
(
      in_session_id              in   object.object_id%type,
      in_transaction_id          in   object.object_id%type,
      in_claim_trx_reserve_id    in   object.object_id%type
)
return char
is

      v_claim_trx_member_list              pkg_os_object.t_object_list;
      v_claim_trx_member_index             number;
      v_coverage_set_member_list           pkg_os_object.t_object_list;
      v_coverage_set_member_index          number;
      v_membersubcoverage_list             pkg_os_object.t_object_list;
      v_membersubcoverage_index            Number;

      v_pc_coverage_id                     object_bv_value.business_variable_value%type;
      lob_available_aggregate_limit        object_bv_value.business_variable_value%type;
      lob_available_per_claim_limit        object_bv_value.business_variable_value%type;
      v_coverage_set_trx                   object.object_id%type;
      v_covered_coverage_set               object.object_id%type;
      v_ref_subcoverage_id                 object.object_id%type;
      v_current_subclaim_trx_id            object.object_id%type;
      v_subcoverage_subclaim_trx_id        object.object_id%type;
      v_parent_subclaim_id                 object.object_id%type;
      v_applied_coverage_id                object.object_id%type;
      v_cov_available_occ_limit            object_bv_value.business_variable_value%type;
      v_cov_available_agg_limit            object_bv_value.business_variable_value%type;
      v_subclaim_status                    object_bv_value.business_variable_value%type;
      v_cov_financial_category             object_bv_value.business_variable_value%type;
      v_cov_insurance_line                 object_bv_value.business_variable_value%type;
      v_cov_set_insurance_line             object_bv_value.business_variable_value%type;

      coverageChangeInReserve               float   := 0.0;
      coverageTotalReserve                  float   := 0.0;
      priorCoverageReserve                  float   := 0.0;
      v_lob_total_reserve                   float   := 0.0;
      v_lob_trx_total_reserve               float   := 0.0;

      coverage_property_list                t_cov_property_list  := gnull_cov_prop_list;
      lob_total_reserve_list                t_lob_cov_list  := gnull_lob_cov_list;
      v_retrun_tf                           char(1) := 'T';
      v_erodes_limits                       char(1) := 'T';
      gbvPath_CovInsuranceLine              varchar2(100) := '34224046.34114646.26806004';
      gbvPath_CovSetInsuranceLine           varchar2(100) := '34201546.26806004';

      lob_aggregate_limit                  object_bv_value.business_variable_value%type;
      lob_per_claim_limit                  object_bv_value.business_variable_value%type;

begin
     --
     -- Get the child ClaimTransactionMember under inout ClaimTransactionReserve
     --
      v_claim_trx_member_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
          in_session_id,
          in_transaction_id,
          in_claim_trx_reserve_id,
          gObjType_ClaimTrxMember,
          v_claim_trx_member_list
      );

     v_claim_trx_member_index := v_claim_trx_member_list.first;

     while v_claim_trx_member_index is not null loop

          -- Get the refering SubClaimTransactionReserve
          v_current_subclaim_trx_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_claim_trx_member_list(v_claim_trx_member_index),
                                            gbv_RefSubClaimTrx
                                        );

          -- Get the parent SubClaim object
          v_parent_subclaim_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_current_subclaim_trx_id);

          -- Get the SubCLaim Status.
          v_subclaim_status := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_subclaim_id,gbv_ObjectState);

          -- Get Applied coverage id (ClaimCoverage object id)
          v_applied_coverage_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_subclaim_id,gbv_AppliedCoverage);

          --Get the Coverage Financial category
          v_cov_financial_category := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_applied_coverage_id,gbv_CovFinancialCategory);

          -- Get pc coverage id
          v_pc_coverage_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_applied_coverage_id,gbv_Coverage_Id);

          -- Coverage Issocaited to Insurance line.
          v_cov_insurance_line := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_applied_coverage_id,gbvPath_CovInsuranceLine);


          --Coverage Change in Reserve
          coverageChangeInReserve := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_current_subclaim_trx_id,gbv_subclaimtrxActlChangeInRsv);

          --
          -- Prepare a lits to store TotalReserve per LOB
          --
          begin

          if v_cov_insurance_line is not null then

                v_lob_total_reserve :=  lob_total_reserve_list(v_cov_insurance_line).lob_total_reserve;

          end if;
          exception when no_data_found
          then
              v_lob_total_reserve := 0.0;
          end;

          --
          -- Prepare a table to type which store the lob wise reserve change in current transaction
          --


             --Check if the erodes policy limit on the coverage is false, then do not consider it for validation i.e. consider its impact as zero on the limits.
            begin
            select erodes_policy_limit into v_erodes_limits from claim_coverage_stats where coverage_id = v_pc_coverage_id  and coverage_category = v_cov_financial_category and claim_transaction_id = in_claim_trx_reserve_id and claim_coverage_status = 1;

            exception when others
          then
              pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              'fn_validate_reserve_referral',
              'Exception in fetching the claim_coverage_stats record for the transaction id:: '+in_claim_trx_reserve_id +' and Coverage Id:: '+ v_pc_coverage_id );

          end;

            if(v_erodes_limits = 'T')
            then
              lob_total_reserve_list(v_cov_insurance_line).lob_total_reserve := v_lob_total_reserve +coverageChangeInReserve;
            end if;

          --
          -- Prepare a list of CoverageTotalReserve
          --
          begin

          if v_pc_coverage_id is not null then
                priorCoverageReserve :=  coverage_property_list(v_pc_coverage_id).cov_total_reserve;
          end if;
          exception when no_data_found
          then
              priorCoverageReserve := 0;
          end;

          --Get the amount on the Claim coverage
          coverageTotalReserve := NVL(priorCoverageReserve,0) + coverageChangeInReserve;

          -- Get the Coverage Occurance Limit
          v_cov_available_occ_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_applied_coverage_id,gbv_CoverageAvailableLimit);

          -- Get the Coverage Available Limit
          v_cov_available_agg_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_applied_coverage_id,gbv_CoveAggAvailableLimit);

         -- Get the child MemberSubCoverage and add it to coverage available limit
          v_membersubcoverage_list.delete;
          v_membersubcoverage_index := null;

          pkg_os_object_search.sp_object_children_of_type_get
          (
              in_session_id,
              in_transaction_id,
              v_applied_coverage_id,
              gObjectType_MemberSubCov,
              v_membersubcoverage_list
          );

          v_membersubcoverage_index := v_membersubcoverage_list.first;

          --loop will execute only if membersubcoverages are present i.e. if its a main coverage.
          while v_membersubcoverage_index is not null loop

              v_ref_subcoverage_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_membersubcoverage_list(v_membersubcoverage_index),gbv_AssociatedSubCoverage);

              v_subcoverage_subclaim_trx_id := fn_get_subclaim_trx_of_cov( in_session_id, in_transaction_id,  v_ref_subcoverage_id,  in_claim_trx_reserve_id );

              -- Keep adding the sub coverage amounts
              coverageTotalReserve := coverageTotalReserve + nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_subcoverage_subclaim_trx_id,gbv_subclaimtrxActlChangeInRsv), 0);

              v_membersubcoverage_index := v_membersubcoverage_list.next(v_membersubcoverage_index);

          end loop;

          coverage_property_list(v_pc_coverage_id).coverage_id := v_pc_coverage_id;
          coverage_property_list(v_pc_coverage_id).cov_total_reserve := coverageTotalReserve;
          coverage_property_list(v_pc_coverage_id).cov_available_occ_limit := v_cov_available_occ_limit;

          -- Validate if any one of the coverage limit is less than change in reserve then retrun false.
          --
/*           if (coverageTotalReserve != 0 AND coverageTotalReserve > v_cov_available_occ_limit)  AND
              v_cov_financial_category = gEnum_FinancialCat_Indemnity AND v_subclaim_status not in ( 36246, 46846)
           then

                 v_retrun_tf := 'F';

                return  v_retrun_tf;

           end if;
*/
           v_claim_trx_member_index := v_claim_trx_member_list.next(v_claim_trx_member_index);
     end loop;

     --
     -- Now validate if total change in Reserve under LOB Aggregate Limit/ LOB per claim limit.
     -- Get the ClaimTransactionCoverageSetMember child list
     --

     v_coverage_set_member_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
          in_session_id,
          in_transaction_id,
          in_claim_trx_reserve_id,
          gObjType_ClaimTrxCovSetMember,
          v_coverage_set_member_list
      );

     v_coverage_set_member_index := v_coverage_set_member_list.first;

     while v_coverage_set_member_index is not null loop

            -- Get reference CoverageSetTransaction
            v_coverage_set_trx := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_coverage_set_member_list(v_coverage_set_member_index),
                                        gbv_RefCoverageSetTransaction
                                    );

            -- Get Parent CoveredCoverageSet
            v_covered_coverage_set := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_coverage_set_trx);

            -- Get LOB Aggregate Limit
            lob_available_aggregate_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_covered_coverage_set,gbv_LOBAvailableAggLimit);

            -- Get LOB Per Claim Limmit
            lob_available_per_claim_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_covered_coverage_set,gbv_LOBAvailablePerClaimLimit);

            lob_aggregate_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_covered_coverage_set,gbv_LOBAggLimit);

            lob_per_claim_limit := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_covered_coverage_set,gbv_LOBPerOccLimit);

            -- Get Insurance line from CoveredCoverageSet
            v_cov_set_insurance_line := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_covered_coverage_set,gbvPath_CovSetInsuranceLine);

            begin
                v_lob_trx_total_reserve := lob_total_reserve_list(v_cov_set_insurance_line).lob_total_reserve;

            exception when others
            then
                v_lob_trx_total_reserve := 0.0;
            end;
            --
            -- Validate if Lob level reserve is greator than LOB Aggregate and Per Claim Limit.
            --

           if (v_retrun_tf = 'T'
               And
              ((lob_aggregate_limit is not null AND lob_aggregate_limit != 0  AND v_lob_trx_total_reserve> lob_available_aggregate_limit)
              OR (lob_per_claim_limit is not null AND lob_per_claim_limit != 0 AND v_lob_trx_total_reserve > lob_available_per_claim_limit  )))

            then

                v_retrun_tf := 'F';
                exit;

            end if;

            v_coverage_set_member_index := v_coverage_set_member_list.next(v_coverage_set_member_index);

     end loop;

    return v_retrun_tf;
exception when others then

     pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              'fn_validate_reserve_referral',
              '11. Exception :  '+ sqlerrm);

    return null;

end;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_subclaim_trx_of_cov
(
      in_session_id           in  object.object_id%type,
      in_transaction_id       in  object.object_id%type,
      in_claim_coverage_id    in  object.object_id%type,
      in_claim_trx_id    in  object.object_id%type
)
return char
is
      v_child_claim_trx_member_list     pkg_os_object.t_object_list;
      v_child_claim_trx_member_index    Number;
      v_subclaim_trx_id                    object.object_id%type;
      v_parent_subclaim_id                 object.object_id%type;
      v_applied_coverage_id                object.object_id%type;

begin

      v_child_claim_trx_member_list.delete;
      v_child_claim_trx_member_index := null;

      pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_claim_trx_id,
        gObjType_ClaimTrxMember,
        v_child_claim_trx_member_list
    );

      v_child_claim_trx_member_index := v_child_claim_trx_member_list.first;

       while v_child_claim_trx_member_index is not null loop

             v_subclaim_trx_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_child_claim_trx_member_list(v_child_claim_trx_member_index),gbv_RefSubClaimTrx);

             v_parent_subclaim_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_subclaim_trx_id);

             v_applied_coverage_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_parent_subclaim_id,gbv_AppliedCoverage);


             if(v_applied_coverage_id = in_claim_coverage_id)
             then

              return v_subclaim_trx_id;

             end if;

          v_child_claim_trx_member_index := v_child_claim_trx_member_list.next(v_child_claim_trx_member_index);

      end loop;

      return null;

end;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_validate_profile_trx
(
     in_session_id          in  object.object_id%type,
     in_transaction_id      in  object.object_id%type,
   in_object_id     in  object.object_id%type,
     in_claim_object_id     in  object.object_id%type
) return char
is
begin

  for i in (Select claim_trx_id from dragon_claim_trx where claim_id = in_claim_object_id
        and claim_trx_type_id = 5 and claim_trx_object_state_id in (60048, 60248))
  loop
    if pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, i.claim_trx_id, '34063246.32828640') = in_object_id
    then
      return 'T';
    end if;
  end loop;

return 'F';

exception when others then raise;

end fn_validate_profile_trx;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_total_insured_count
(
  in_session_id     in  object.object_id%type,
  in_transaction_id     in  object.object_id%type,
  in_object_id      in  object.object_id%type,
  in_incident_object_id   in  object.object_id%type
)
return number

is
    v_function_name                 constant system_log.program_name%type := pkg_name || 'fn_validate_duplicate_insured';
  v_child_incidentEntity_list   pkg_os_object.t_object_list;
  v_child_incidentEntity_index  number;
  gObjectType_incidentEntity    constant number := 3200746;
  v_insured_id          constant number := 72046;
  v_insured_count         number := 0;

begin

  v_child_incidentEntity_list.delete;
  v_child_incidentEntity_index := null;

  pkg_os_object_search.sp_object_children_of_type_get
  ( in_session_id,
    in_transaction_id,
    in_incident_object_id,
    gObjectType_incidentEntity,
    v_child_incidentEntity_list
  );

  v_child_incidentEntity_index := v_child_incidentEntity_list.first;

  while v_child_incidentEntity_index is not null
  loop

        pkg_os_logging.sp_log
    (   in_session_id,
            in_transaction_id,
            v_function_name,
            '... IncidentEntity Role ID: ' || nvl(pkg_os_object_io.fn_object_bv_path_get
      (
        in_session_id,
        in_transaction_id,
        v_child_incidentEntity_list(v_child_incidentEntity_index),
        '32325746'
      ),0)
    );

    if nvl(pkg_os_object_io.fn_object_bv_path_get     -- IncidentEntity with Role as Insured(id: 72046)
      (
        in_session_id,
        in_transaction_id,
        v_child_incidentEntity_list(v_child_incidentEntity_index),
        '32325746'
      ),0) = v_insured_id

      and

            (
                 pkg_os_object_io.fn_object_bv_path_get     -- IncidentEntity with Object state as Active
                (
                    in_session_id,
                    in_transaction_id,
                    v_child_incidentEntity_list(v_child_incidentEntity_index),
                    '210153'
                ) = 75

              and v_child_incidentEntity_list(v_child_incidentEntity_index) != in_object_id   --Excluding Current IncidentEntity
            )
    then
      v_insured_count := v_insured_count + 1;

    end if;

        pkg_os_logging.sp_log
    (   in_session_id,
            in_transaction_id,
            v_function_name,
            '... IncidentEntity_id: ' || v_child_incidentEntity_list(v_child_incidentEntity_index)
            || '   Insured Count= ' || v_insured_count
    );

    v_child_incidentEntity_index := v_child_incidentEntity_list.next(v_child_incidentEntity_index);

  end loop;

return v_insured_count;

exception when others then raise;

end fn_total_insured_count;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_parent_coverage
(
      in_session_id             in    object.object_id%type,
      in_transaction_id         in    object.object_id%type,
      in_coverage_object_id     in    object.object_id%type

)return number
is
    v_reference_member_list     pkg_os_object.t_object_list;
    v_reference_member_index    number;
    v_coverage_name             PC_COVERAGE.PC_COVERAGE_NAME%type; --OSPRODUCT-25818
    v_parent_coverage_id        number := null;

    v_coverage_type             object_bv_value.business_variable_value%type;


begin

    v_coverage_type := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_coverage_object_id,gbv_Main_Sub_Cov_Type);

    -- Validate if the ClaimCoverage type is sub coverage.
    if v_coverage_type is not null and v_coverage_type = 2 then

       v_reference_member_list.delete;

       pkg_os_object_search.sp_object_referencers_get
        (
            in_session_id,
            in_transaction_id,
            in_coverage_object_id,
            gbv_Reference_main_cov,
            v_reference_member_list
        );


        v_reference_member_index := v_reference_member_list.first;

        while                    v_reference_member_index is not null loop

             v_parent_coverage_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_reference_member_list(v_reference_member_index));

             if v_parent_coverage_id is not null
             then

                exit;

             end if;

             v_reference_member_index := v_reference_member_list.next(v_reference_member_index);
          end loop;

      end if;

 return v_parent_coverage_id ;

end fn_get_parent_coverage;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

--OSPRODUCT-13057
procedure sp_tasktype_close (
    in_session_id         IN   object.object_id%TYPE,
    in_transaction_id     IN   object.object_id%TYPE,
    in_action_object_id      IN   object.object_id%TYPE

)

IS
    v_procedure_name         constant system_log.program_name%type :=  'pkg_name '||'fn_tasktype_close';
    v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    in_tasktype_id          dragon_task.task_type_id%TYPE := 30748;

    sql_stmt                VARCHAR2(1000);

    v_count                 NUMBER;
    V_DATAMART_TF           CHAR;
   -- TYPE vtask_ids IS TABLE OF dragon_task.task_id%type;
   -- v_task_ids vtask_ids;
    v_object_list                 pkg_os_object.t_object_list                  := pkg_os_object.gnull_object_list;
    v_object_index NUMBER;
    v_current_object_id object.object_id%type;
  v_sessionuser_id  object.object_id%type              := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);
    in_claimobject_id   object.object_id%type                                 := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id,32379046);
    cursor c_task_parent_object (in_object_id object.object_id%type)
     is
          select
               *
          from
               dragon_task
          where
               task_object_parent_id = in_object_id
               and task_type_id = in_tasktype_id
               and Task_assigned_to_id = v_sessionuser_id
               and task_status_id in (42346,2);



BEGIN
    sql_stmt := 'SELECT count(1) FROM dragon_task where task_type_id = :in_tasktype_id
                  and task_status_id in (42346,2) and Task_assigned_to_id = :v_sessionuser_id ';
    EXECUTE IMMEDIATE sql_stmt
    INTO v_count
        USING in_tasktype_id,v_sessionuser_id;

    -- If no task is present then we will exit for the procedure
    IF v_count <= 0 THEN

  if v_session_control.gLogging_Full then
                                 pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' .... Task is not available for update ' );
  end if;

    ELSE

    -- ClaimTransactionAssignment object
         pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_claimobject_id,
                         3336746,
                         v_object_list
                    );
         -- If no ClaimTransactionAssignment object present for currect claim we will exit from procedure
        if v_object_list.count <= 0 then

           if v_session_control.gLogging_Full then
                                 pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' .... Task is not available for claim object ' || in_claimobject_id || ' of Task Type 30748' );
        end if;
        else
            v_object_index := v_object_list.first;
            WHILE ( v_object_index IS NOT NULL )
            LOOP

                v_current_object_id := v_object_list( v_object_index );

                for r_task_object in c_task_parent_object(v_current_object_id)
                    loop
                    begin

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_TaskStatus,   pkg_os_wf_task.gTaskStatus_Complete );

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_TaskCompletedDate, to_char(sysdate, pkg_os_constant.DragonDateFormatDefault) );

                             --
                             -- Set Task Completed By to Session User
                             --

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_Task_CompletedBy,  v_sessionuser_id );

                        exception
                                            when others then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             ' ...... Unable to update task:'||   r_task_object.task_id   ||
                                             ' to complete.'
                                        );
                    end;

          if v_session_control.gLogging_Full then
                     pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' ...... Updated task:'||   r_task_object.task_id   ||
                         ':Completion Date:' || to_char(sysdate, pkg_os_constant.DragonDateFormatDefault)
                    );

          end if;

                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         r_task_object.task_id,
                         v_datamart_tf
                    );
                    end loop;



                v_object_index := v_object_list.next(v_object_index);



            END LOOP;




        END IF;
        END IF;



END sp_tasktype_close;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_is_comp_cover_obj_tf
(
      in_session_id           in    object.object_id%type,
      in_transaction_id     in    object.object_id%type,
      in_coverage_id          in    object.object_id%type
)return char
is
    v_coverage_prop_tf        char(1) := 'F';

begin
     select compare_covered_object_tf
            into v_coverage_prop_tf
     from oc_coverage_property
     where coverage_id = in_coverage_id;

     return v_coverage_prop_tf;
exception when no_data_found
then
   return v_coverage_prop_tf;
end fn_is_comp_cover_obj_tf;

----------------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-27920
function fn_incident_related_catid
(
      in_session_id           in    object.object_id%type,
      in_transaction_id     in    object.object_id%type,
      in_incident_type_id          in    object.object_id%type
)return number
is
     v_related_cat_id      object.object_id%type ;

begin
     select RELATED_CATASTROPHE_TYPE
            into v_related_cat_id
     from oc_incident_type
     where INCIDENT_TYPE_ID = in_incident_type_id;

     if v_related_cat_id is null then
    v_related_cat_id :=0;
      return v_related_cat_id;
      else
    return v_related_cat_id;
   end if;

exception when no_data_found
then

  v_related_cat_id := 0;
          return v_related_cat_id;

end fn_incident_related_catid;

------------------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-13230
--OSPRODUCT-12733
function fn_duplicate_task_num1
(
      in_session_id              in        object.object_id%type,
      in_transaction_id          in        object.object_id%type,
      in_object_id               in        object.object_id%type,
      in_task_type_id            in        dragon_task.task_type_id%type,
      in_task_title              in        dragon_task.task_title%type
)
  return number
  is
     v_procedure_name         system_log.program_name%type := pkg_name||'fn_duplicate_task_num';
     v_session_control               pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_task_count                   integer := 0;
     Parent_object_id               object.object_id%type;

begin

        -- Parent claim object ID
        Parent_object_id := PKG_OS_OBJECT_SEARCH.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_object_id,3203646);
          select
             count(1)
           into
             v_task_count
           from
             dragon_task
           where
           --  task_object_id = in_object_id
           --and
             task_type_id = in_task_type_id
           and
              task_object_parent_id = Parent_object_id
           -- and  upper(task_title) = upper(in_task_title);
           and task_status_id = 2; --Incomplete task status

     return v_task_count;

exception
     when others then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Exception occured '
               ||'  Error Msg: '
               ||sqlerrm
          );

          return v_task_count;

end fn_duplicate_task_num1;
-----------------------------------------------------------------------------------------------------------------------------------------------------

--OSPRODUCT-13230
PROCEDURE sp_tasktypeid_38748_close (
    in_session_id         IN   object.object_id%TYPE,
    in_transaction_id     IN   object.object_id%TYPE,
    in_action_object_id   IN   object.object_id%TYPE
) IS
    v_procedure_name         constant system_log.program_name%type :=  'pkg_name '||'fn_tasktype_close';

    v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id
    );
    in_tasktype_id        dragon_task.task_type_id%TYPE := 38748;
    sql_stmt              VARCHAR2(1000);
    v_count               NUMBER;
    v_datamart_tf         CHAR;

    v_object_list         pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;

    v_object_index        NUMBER;

    v_current_object_id   object.object_id%TYPE;
    v_sessionuser_id      object.object_id%TYPE := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);
    in_claimobject_id     object.object_id%TYPE := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id
    , 32379046);
    disposition_status    NUMBER;
    status_counter        NUMBER;

    CURSOR c_task_parent_object (
        in_claimobject_id object.object_id%TYPE
    ) IS
    SELECT
        *
    FROM
        dragon_task
    WHERE
        task_object_parent_id = in_claimobject_id
        AND task_type_id = in_tasktype_id
        AND task_status_id IN (
            42346,
            2
        );

BEGIN
sql_stmt := 'SELECT count(1) FROM dragon_task where task_type_id = :in_tasktype_id
                  and task_status_id in (42346,2) and task_object_parent_id = :in_claimobject_id ';
EXECUTE IMMEDIATE sql_stmt
INTO v_count
    USING in_tasktype_id, in_claimobject_id;

    -- If no task is present then we will exit for the procedure
IF v_count <= 0 THEN

    IF v_session_control.glogging_full THEN
        pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name, ' .... Task is not available for update ');
    END IF;

ELSE
        -- Counter is used to check none of the Subclaim Disposition status is in HOLD or Contested
        status_counter := 0;

         -- ClaimTransactionMember object
        pkg_os_object_search.sp_object_children_of_type_get(in_session_id, in_transaction_id, in_action_object_id, 3331846, v_object_list
        );

        v_object_index := v_object_list.first;
        WHILE ( v_object_index IS NOT NULL )
        LOOP
            -- Setting to default for each loop
            disposition_status := 0;
            -- Getting Subclaim Disposition Status value

            disposition_status := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, v_object_list(v_object_index), '32379746.32522746');
            -- Status id 57446 On Hold & 67446 Contested

            IF (disposition_status = 57446 or disposition_status = 67446)
            THEN
                status_counter := status_counter + 1;
            END IF;

            EXIT WHEN status_counter >= 1;
            v_object_index := v_object_list.next(v_object_index);
        END LOOP;

        IF status_counter = 0 THEN

            FOR r_task_object IN c_task_parent_object(in_claimobject_id)
            LOOP
            BEGIN
                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_taskstatus
                , pkg_os_wf_task.gtaskstatus_complete);

                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_taskcompleteddate
                , to_char(sysdate, pkg_os_constant.dragondateformatdefault));

                                                           --
                                                           -- Set Task Completed By to Session User
                                                           --

                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_task_object.task_id, pkg_os_wf_task.gbv_task_completedby
                , v_sessionuser_id);

            EXCEPTION
            WHEN OTHERS THEN
                pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name, ' ...... Unable to update task:'
                                                                                          || r_task_object.task_id
                                                                                          || ' to complete.');
            END;

            -- Datamart Update
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_task_object.task_id, v_datamart_tf);

            IF v_session_control.glogging_full THEN
                pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name, ' ...... Updated task:'
                                                                                      || r_task_object.task_id
                                                                                      || ':Completion Date:'
                                                                                      || to_char(sysdate, pkg_os_constant.dragondateformatdefault
                                                                                      ));

            END IF;
            END loop;
        END IF;

END IF;


END sp_tasktypeid_38748_close;

--------------------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-12733
function fn_duplicatetask_usingtaskid
(
      in_session_id              in        object.object_id%type,
      in_transaction_id          in        object.object_id%type,
      in_object_id               in        object.object_id%type,
      in_task_type_id            in      task_type.TASK_TYPE_ID%type
)
  return number
  is
     v_procedure_name         system_log.program_name%type := pkg_name||'fn_duplicatetask_usingtaskid';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_task_count                   integer := 0;

begin

          select
             count(1)
           into
             v_task_count
           from
             dragon_task
           where
             task_object_id = in_object_id
           and
             TASK_TYPE_ID = in_task_type_id
           and
            task_status_id in (2,42346) ;
           --and
            -- task_status_id = 2; --Incomplete task status



     return v_task_count;

exception
     when others then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Exception occured '
               ||'  Error Msg: '
               ||sqlerrm
          );

          return v_task_count;

end fn_duplicatetask_usingtaskid;

---------------------------------------------------------------------------------------------------------------
procedure sp_billingaccount_datamart_update
(
    in_session_id                   in object.object_id%type,
    in_transaction_id               in object.object_id%type,
    in_billingaccount_object_id     in object.object_id%type
)
as

    v_DisbProfile_id            object.object_id%type;
    v_StatementProfile_id       object.object_id%type;
    v_datamart_tf               char(1) := 'T';
    v_object_index              number;
    v_DisbProfile_object_list         pkg_os_object.t_object_list;
    v_StatementProfile_object_list    pkg_os_object.t_object_list;

Begin
      -- Update BillingAccount Datamart
     pkg_os_datamart.sp_datamart_update_row
        (
             in_session_id,
             in_transaction_id,
             in_billingaccount_object_id,
             v_datamart_tf
        );


      -- Update DisbursementProfileUsage (Child of BillingAccount) Datamart
       v_DisbProfile_object_list.delete;

       pkg_os_object_search.sp_object_children_of_type_get
      (
           in_session_id,
           in_transaction_id,
           in_billingaccount_object_id,
           gObjType_DisbursmentProfileusage,
           v_DisbProfile_object_list
      );

      v_object_index := v_DisbProfile_object_list.first;

      while v_object_index is not null loop

        v_DisbProfile_id := v_DisbProfile_object_list(v_object_index);

         pkg_os_datamart.sp_datamart_update_row
            (
                 in_session_id,
                 in_transaction_id,
                 v_DisbProfile_id,
                 v_datamart_tf
            );

            v_object_index := v_DisbProfile_object_list.next( v_object_index );

        end loop;

      -- Update StatementProfile (Child of BillingAccount) Datamart
       v_StatementProfile_object_list.delete;

       pkg_os_object_search.sp_object_children_of_type_get
      (
           in_session_id,
           in_transaction_id,
           in_billingaccount_object_id,
           gObjType_StatementProfile,
           v_StatementProfile_object_list
      );

      v_object_index := v_StatementProfile_object_list.first;

      while v_object_index is not null loop

        v_StatementProfile_id := v_StatementProfile_object_list(v_object_index);

         pkg_os_datamart.sp_datamart_update_row
            (
                 in_session_id,
                 in_transaction_id,
                 v_StatementProfile_id,
                 v_datamart_tf
            );

            v_object_index := v_StatementProfile_object_list.next( v_object_index );

        end loop;
end sp_billingaccount_datamart_update;
---------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_get_lobs_associated_with_claim
--
-- %USAGE
--        This function is used to concatinate lobs of the policy associated with the claim.

--
--  %ALGORITHM
--      1. Iterate over the policies(i.e. IncidentLossSetCoveringPolicyCR) associated to the incident
--      2. Identify the policy associated to the claim for which the BV- PolicyAssociatedToClaimFlag(id:34113346) is set 'True'
--      3. Iterate over the LOBs of the policy & concatinate into a string.

-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_object_id        'IncidentLossSet' object id is passed as an input
--
--------------------------------------------------------------------------------------------------

function fn_get_lobs_associated_with_claim
(
    in_session_id         in object.object_id%type,
    in_transaction_id     in object.object_id%type,
    in_object_id      in object.object_id%type
) return varchar2
as

  v_lob_names             varchar2(500);
  v_lob_text        varchar2(500);
  v_lob_list        pkg_os_object.t_object_list;
  v_lob_list_index      number;
  v_lob_id                number;
  v_policy_list       pkg_os_object.t_object_list;
  v_policy_list_index     number;
  v_policy_id             number;

begin

-- Iterates over the policies associated to the incident
    v_policy_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get ( in_session_id,
                                                            in_transaction_id,
                                                            in_object_id,
                                                            gObjectType_IncidentLossSetCoveringPolicyCR,
                                                            v_policy_list
                                                            );

-- Identify the policy associated to the claim

  v_policy_list_index := v_policy_list.first;

      while v_policy_list_index is not null
        loop
      if 1 = nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                   in_transaction_id,
                                  v_policy_list(v_policy_list_index),
                                    gbv_PolicyAssociatedToClaimFlag
                                ) , 0)

      then
                v_policy_id := v_policy_list(v_policy_list_index);
                exit;
            end if;

      v_policy_list_index := v_policy_list.next(v_policy_list_index);

    end loop;

-- Iterates over the LOBs for the policy
    v_lob_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get ( in_session_id,
                                                            in_transaction_id,
                                                            v_policy_id,
                                                            gObjectType_IncidentLossSetCoveringLOBCR,
                                                            v_lob_list
                                                            );



  v_lob_list_index := v_lob_list.first;

      while v_lob_list_index is not null
        loop

      if 1 = nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                   in_transaction_id,
                                  v_lob_list(v_lob_list_index),
                                    gbv_LOBSelectionFlag
                                ) , 0)

      then

      v_lob_id := nvl(pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                        in_transaction_id,
                                  v_lob_list(v_lob_list_index),
                                  gbv_PolicyInsuranceLine
                                  ) , 0);
      if v_lob_id != 0
      then
         v_lob_text := pkg_os_lookup.fn_lookup_list_text_get( gList_InsuranceLine , v_lob_id );
      end if;

          if v_lob_names is null
        then
        v_lob_names := v_lob_text;
          else
        v_lob_names := Concat(Concat(v_lob_names , ', ') , v_lob_text);

        end if;
      end if;

      v_lob_list_index := v_lob_list.next(v_lob_list_index);

    end loop;

return v_lob_names;

end fn_get_lobs_associated_with_claim;
----------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_check_duplicate_task
(
    in_object_id      in object.object_id%type,
    in_task_description   varchar2
) return char
as
    v_duplicate_count     number;
begin

    select count(*) into v_duplicate_count from dragon_task where task_object_id= in_object_id
            and instr(task_short_description, in_task_description)>0;

    if v_duplicate_count > 0
        then return 'T';
    end if;

 return 'F';
end fn_check_duplicate_task;

----------------------------------------------------------------------------------------------------------------------------------------------------------------function fn_is_object_locked_tf
function fn_is_object_locked_tf
(
      in_session_id         in    object.object_id%type,
      in_transaction_id     in    object.object_id%type,
      in_object_id          in    object.object_id%type
) return char
as
    v_lock_count     number;
begin

    select count(*) into v_lock_count from wf_tmp_object_lock where object_id = in_object_id;

    if v_lock_count > 0
        then return 'T';
    end if;

 return 'F';
end fn_is_object_locked_tf;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_process_custom_bor
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_claim_id                   in             object.object_id%type
)
is
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_process_custom_bor';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_claim_registration_trx_id           object.object_id%type := null;
     v_integration_obj                object.object_id%type := null;
     v_child_proc_directive           object.object_id%type := null;

     v_object_cache               pkg_os_object_cache.t_object_cache;
     v_message_list               pkg_os_message.t_message_list;
     v_action_outcome_id          outcome.outcome_id%type := 22;


begin

if v_session_control.gLogging_Full
       then

           pkg_os_logging .sp_log(in_session_id, in_transaction_id, v_procedure_name, 'Executing custom BOR processing.');

       end if;

       v_claim_registration_trx_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_claim_id, 33166764);

       pkg_os_object.sp_object_create
                  (
                       in_session_id,
                       in_transaction_id,
                       3343508, --ISR Object Type
                       null,
                       v_integration_obj
                   );

         v_child_proc_directive:= pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_integration_obj, 32513508);--child processing directive bv

      --execute the initilization done through designer
      --initialize Service Operation Label
      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_integration_obj,
               32510508,
               'transactionNotification'
      );

       --initialize Reference Request Object
      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_integration_obj,
               32514508,
               v_claim_registration_trx_id
      );
       --initialize Integration Service Request ID on Child Processing Directive
      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_child_proc_directive,
               32522808,
               v_integration_obj
      );

      --initialize Directive Name on Child Processing Directive
      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_child_proc_directive,
               32511808,
               'payloadType'
      );

      --initialize Directive Value on Child Processing Directive
      pkg_os_object_io.sp_object_bv_set
      (
               in_session_id,
               in_transaction_id,
               v_child_proc_directive,
               32511908,
               'Claims'
      );

    /*
    Commenting this out, as these changes were done for the client
    changes were releated to some one of the issue related to Reference setting for BOR.
    Verifing the BOR implementation in product, if required then we can make necessary changes.

      pkg_os_dap.sp_prepare_dap_job_submission
          (
               in_session_id,
               in_transaction_id,
               v_object_cache,
               v_message_list,
               v_action_outcome_id,
               1401967,--action id
               v_integration_obj
          );
*/
exception when others then
      pkg_os_logging.sp_log_error
      (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             'Executing custom Claims BOR processing..'||sqlerrm
       );

end  sp_process_custom_bor;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function fn_update_customeraddress
(

       in_session_id        in                object.object_id%type,
       in_transaction_id    in                object.object_id%type,
       in_incident_id       in                object.object_id%type,
       in_submissionaddress in                object.object_id%type

) return number
is

     v_object_table                      pkg_os_object.t_object_list;

     v_object_index                      number;
     --v_object_table_index                   number;
     v_return_value                         number := 0;
     v_submissionaddress_ObjectLabel                  varchar2(500);
     v_incidentaddress_ObjectLabel                    varchar2(500);



begin
    v_submissionaddress_ObjectLabel := null;
    v_submissionaddress_ObjectLabel := pkg_os_object_io.fn_object_bv_path_get
                                          (
                                          in_session_id,
                                          in_transaction_id,
                                          in_submissionaddress,
                                          '32441346.211882'    --Incident._Reference_Generated from._Reference_Approx Address.ObjectLabel
                                          );
     pkg_os_object_search.sp_object_children_of_type_get
     (
         in_session_id,
         in_transaction_id ,
         in_incident_id ,
         3200646, --IncidentAddress
         v_object_table
     );

     v_object_index   :=  v_object_table.first;

     while v_object_index is not null
     loop
        v_incidentaddress_ObjectLabel:= null;

       v_incidentaddress_ObjectLabel := pkg_os_object_io.fn_object_bv_get
                (
                     in_session_id,
                     in_transaction_id,
                     v_object_table(v_object_index),
                     211882  --ObjectLabel

                );

       if v_submissionaddress_ObjectLabel = v_incidentaddress_ObjectLabel then

            v_return_value := v_object_table(v_object_index);
            return v_return_value;
       end if;
       v_object_index := v_object_table.next( v_object_index );


      end loop;


return pkg_os_object_io.fn_object_bv_path_get
                                          (
                                          in_session_id,
                                          in_transaction_id,
                                          in_incident_id,
                                          '32253846.211343'    --Incident._Reference_Location.ObjectID
                                          );

end fn_update_customeraddress;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_claimtrx_bats_reversal
--
-- %USAGE
--        This procedure is used to update the status of the BillingAccountTransactionSets created against Financial ClaimTransactions.
--        Cancel Payment: Any payment that is not disbursed can be cancelled
--              The Adhoc BATS is in processed state and Disbursement BATS is in "Request Sent To AP" state
--              The payment status is "In progress", So, both Adhoc Journal and Disbursement BATS should be reversed.
--        Rejected Payment: Any payment in
--              The Adhoc BATS is in processed state and Disbursement BATS is in "Request Sent To AP" state
--              The payment status is "In progress", So, both Adhoc Journal and Disbursement BATS should be reversed.
--        Backed Out Payment:
--              Both Adhoc Journal and Disbursement BATS are processed.
--              The payment is already disbursed. There is no meaning of creating reversal BATS.
--              No Action performed here. The user should initiate a recovery transaction.
--
--        PaymentIn and Recovery:
--              Respective BATS are Processed.
--              currently, there is no scenario where no reversal bats are required for recovery or payment in a transaction.
--
--  %ALGORITHM
--      1. Extract the ClaimTransaction Type
--      2. Get the status of the Transaction.
--      3. Get the associated BATS based on transaction type and status, as mentioned below
--      4. Call a procedure to create and process the reversal BATS.
--
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_claimTrx_object_id
--        io_action_outcome_id
--------------------------------------------------------------------------------------------------

procedure sp_claimtrx_bats_reversal
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_claimTrx_object_id   in          object.object_id%type,
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is

     v_procedure_name           constant system_log.program_name%type       := pkg_name||'.sp_claimtrx_bats_reversal';
     v_session_control          pkg_os_session.r_dragon_session_control     := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_claimTrx_type            business_variable.business_variable_id%type;
     v_ba_trxset_adhoc          object.object_id%type;
     v_disb_BATs                object.object_id%type;
     v_claimTrx_object_state    lookup_list_value.lookup_enum%type;
     v_claimTrx_object_id       object.object_id%type;
     v_billing_account_id       object.object_id%type;
     v_billing_acc_parent_id    object.object_id%type;
begin

    v_claimTrx_object_id := in_claimTrx_object_id;

    -- Get the transaction type and transaction state to get the BATS details
    v_claimTrx_type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                           in_transaction_id,
                           v_claimTrx_object_id,
                           gbv_claimTrx_type_id);

    v_claimTrx_object_state := pkg_os_object_io.fn_object_bv_get(in_session_id,
                           in_transaction_id,
                           v_claimTrx_object_id,
                           gbv_ObjectState);

    pkg_os_logging.sp_log
    (
       in_session_id,
       in_transaction_id,
       v_procedure_name,
       '|||||| Updating status of BATS associated with Claim Transaction ID' || v_claimTrx_object_id ||
       ' Claim Transaction type ID: ' || v_claimTrx_type ||
       ' Object State: ' || v_claimTrx_object_state
    );


    -- Rollback ADhoc Journal BATS for the Payment in Rejected or Cancelled state
    if (v_claimTrx_type = gEnum_ClaimTrxType_Payment  and
        v_claimTrx_object_state in (gEnum_ClaimTrx_RejectedState,gEnum_ClaimTrx_CanceledState ))
    then

        --Get the Adhoc Journal BATS : BV ID: 32511046;
        v_ba_trxset_adhoc := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_claimTrx_object_id,
                                                            gbv_RefAdhocBATS);
        if v_ba_trxset_adhoc is not null then

        v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                              in_transaction_id,
                                                              v_ba_trxset_adhoc);

        v_billing_acc_parent_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                    in_transaction_id,
                                                                    v_billing_account_id);

        if v_billing_acc_parent_id is null
        then

        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    ' Billing Account Parent is null, Reveral transaction cannot be processed for claim transaction id: ' ||
                                    in_claimTrx_object_id);

        raise no_data_found;

        end if;


        if v_ba_trxset_adhoc is not null then

            --Create and process Reversal BATS
            sp_claim_process_reversal_BATS (
                   in_session_id,
                   in_transaction_id,
                   v_ba_trxset_adhoc,
                   io_action_outcome_id
              );

        end if;

        v_disb_BATs := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                     in_transaction_id,
                                                     v_claimTrx_object_id,
                                                     gbv_RefDisbBATS);


        v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                          in_transaction_id,
                                                          v_disb_BATs);

        v_billing_acc_parent_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                in_transaction_id,
                                                                v_billing_account_id);

        if v_billing_acc_parent_id is null
        then

            pkg_os_logging.sp_log_error(in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' Billing Account Parent is null, Reveral transaction cannot be processed for claim transaction id: ' ||
                                        in_claimTrx_object_id);

            raise no_data_found;

        end if;

        if v_disb_BATs is not null then
             --Create and process Reversal BATS
              sp_claim_process_reversal_BATS
              (
                   in_session_id,
                   in_transaction_id,
                   v_disb_BATs,
                   io_action_outcome_id
              );
        end if;
    end if;
    end if;

   io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_claimtrx_bats_reversal;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_claim_process_reversal_BATS
--
-- %USAGE
--        This procedure is used to create and process the reversal BillingAccountTransactionSets against BATS of any
--        financial transaction that needs to be reversed.
--
--  %ALGORITHM
--          This procedure acts as a wrapper to call the billing reversal code
--          1. If BATS id is not null then proceed with point 2 and 3
--          2. Create a reversal BATS using the billing procedure
--          3. Process the reversal BATS using the billing procedure
--          4. If BATS id is null, then raise error and send an outcome "User Input Invalid"
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_bats_object_id
--        io_action_outcome_id
--------------------------------------------------------------------------------------------------

procedure sp_claim_process_reversal_BATS
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_bats_object_id      in          object.object_id%type,
     io_action_outcome_id   in out      outcome.outcome_id%type
)
is

     v_procedure_name         constant system_log.program_name%type   := pkg_name||'.sp_claim_process_reversal_BATS';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
begin

    -- In case of null batsID, raise error and send an outcome, "User input invalid"
    if in_bats_object_id is null
    then

        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'Input BATS object is nulll..'
                                    );

       io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

       raise no_data_found;
    end if;


    if in_bats_object_id is not null then

        --Create and process Reversal BATS
        pkg_db_reversal.sp_transaction_reversal
        (
            in_session_id,
            in_transaction_id,
            in_bats_object_id,
            io_action_outcome_id
        );


        pkg_db_reversal.sp_reversal_process
        (
            in_session_id,
            in_transaction_id,
            in_bats_object_id,
            io_action_outcome_id
        );

        pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Reversal BATS Created for BATS: ' || in_bats_object_id
          );

    end if;

end sp_claim_process_reversal_BATS;
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-- Author : mdighe
-- This method calculates the service_group zipcode bv based the zipcodes configured on service_territory.
function fn_calc_service_group_zipcode
(
     in_session_id          in          object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_service_group_id    in          object.object_id%type
)
return varchar2
is

     v_procedure_name                      constant system_log.program_name%type   := pkg_name||'.sp_calc_service_group_zipcode';
     v_service_group_zipcode               varchar2(4000):='';
     v_service_group_territory_list        pkg_os_object.t_object_list;
     v_service_group_territory_count       number;
     v_service_group_territory             object.object_id%type;
     v_reference_territory_serviced        object.object_id%type;
     v_service_territory_zipcode           varchar2(500);
     counter                               number:=0;
     v_distinct_svc_group_zipcode          varchar2(4000):='';

     -- This cursor finds the distinct list of zipcodes
     cursor distinct_zip_code_cursor is
     (
            SELECT distinct REGEXP_SUBSTR(v_service_group_zipcode, '[^,]+', 1, LEVEL) AS zipcode
            FROM dual
            CONNECT BY REGEXP_SUBSTR(v_service_group_zipcode, '[^,]+', 1, LEVEL) IS NOT NULL
     );


begin

    -- In case of null in_service_group_id, raise error and send an outcome, "User input invalid"
    if in_service_group_id is null
    then

        pkg_os_logging.sp_log_error
        (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             'in_service_group_id object is nulll..'
         );
       raise no_data_found;
    end if;


    --Get the chidren of service_group of type ServiceTerritoryGroup
    pkg_os_object_search.sp_object_children_of_type_get
    (
         in_session_id,
         in_transaction_id,
         in_service_group_id,
         gObjType_ServiceGroupTerritory,
         v_service_group_territory_list
    );

    v_service_group_territory_count := v_service_group_territory_list.count;

    for counter IN 1 .. v_service_group_territory_count loop

        v_service_group_territory := v_service_group_territory_list(counter);

        -- Get the service_territory associated with the service_territory_group
        v_reference_territory_serviced :=  pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_service_group_territory,
                                              gbv_reference_territory_serviced
                                         );

        -- Get the zipcode that was configured for the service_territroy from the UI
        v_service_territory_zipcode :=  pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_reference_territory_serviced,
                                              gbv_service_territory_zipcode
                                         );

        v_service_group_zipcode :=  v_service_group_zipcode || v_service_territory_zipcode || ',';

    end loop;

    -- This line to done only to remove the extra comma at the end of the zipcode string
    v_service_group_zipcode := substr(v_service_group_zipcode, 0, length(v_service_group_zipcode)-1);

    pkg_os_logging.sp_log
    (
         in_session_id,
         in_transaction_id,
         v_procedure_name,
         'v_service_group_zipcode: ' || v_service_group_zipcode
    );

    dbms_output.put_line('v_service_group_zipcode: '|| v_service_group_zipcode);

    -- Get the distinct zipcodes
    for zip_code_item in distinct_zip_code_cursor loop
        counter := counter + 1;
        v_distinct_svc_group_zipcode:= v_distinct_svc_group_zipcode || zip_code_item.zipcode || ',';
    end loop;

  -- This line to done only to remove the extra comma at the end of the zipcode string
  v_distinct_svc_group_zipcode := substr(v_distinct_svc_group_zipcode, 0, length(v_distinct_svc_group_zipcode)-1);

  pkg_os_logging.sp_log
  (
       in_session_id,
       in_transaction_id,
       v_procedure_name,
       'v_distinct_svc_group_zipcode: ' || v_distinct_svc_group_zipcode
  );

  return v_distinct_svc_group_zipcode;

end fn_calc_service_group_zipcode;


------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_incident_datamart_update
--
--     %USAGE
--          Update Incident, IncidentLoss, IncidentAsset, IncidentAddress and IncidentEntity datamart for the given Incident Object
--          This is used for DB action with Native Command 'CSUpdateIncidentDatamart' where Action Object type is 'Incident'
--
--     %ALGORITHM
--        Get the list of IncidentAddress, IncidentEntity, IncidentAsset, IncidentLoss and Incident object for the given Incident Object and update the datamart
--
--
--     %PARAM            in_session_id                 in object.object_id%type,
--     %PARAM            in_transaction_id             in object.object_id%type,
--     %PARAM            in_object_id                  in object.object_id%type, -- Incident Object ID
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_incident_datamart_update
(
    in_session_id         in object.object_id%type,
    in_transaction_id     in object.object_id%type,
    in_object_id          in object.object_id%type
)
as
    v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_incident_datamart_update';
    vObjtype_IncidentAddress    constant    object_type.object_type_id%type        := 3200646;
    vObjtype_IncidentEntity     constant    object_type.object_type_id%type        := 3200746;
    vObjtype_IncidentAsset      constant    object_type.object_type_id%type        := 3201146;
    vObjtype_IncidentLoss       constant    object_type.object_type_id%type        := 3201546;

    v_update_datamart_tf        CHAR(1)      := 'T';
    v_incident_address_list     pkg_os_object.t_object_list;
    v_incident_entity_list      pkg_os_object.t_object_list;
    v_incident_asset_list       pkg_os_object.t_object_list;
    v_incident_loss_list        pkg_os_object.t_object_list;

begin

    -- Empty the list
    v_incident_address_list.delete;
    v_incident_entity_list.delete;
    v_incident_asset_list.delete;
    v_incident_loss_list.delete;

    -- Get all the IncidentAddress for the Incident
    pkg_os_object_search.sp_object_children_of_type_get (
                            in_session_id,
                            in_transaction_id,
                            in_object_id,
                            vObjtype_IncidentAddress,
                            v_incident_address_list,
                            pkg_os_constant_bv.gbv_genobjid
                            );

    for i in 1..nvl(v_incident_address_list.last,0)
    loop
      pkg_os_datamart.sp_datamart_update_row
        (
            in_session_id,
            in_transaction_id,
            v_incident_address_list(i),
            v_update_datamart_tf);
    end loop;

    -- Get all the IncidentEntity for the Incident
      pkg_os_object_search.sp_object_children_of_type_get (
                            in_session_id,
                            in_transaction_id,
                            in_object_id,
                            vObjtype_IncidentEntity,
                            v_incident_entity_list,
                            pkg_os_constant_bv.gbv_genobjid
                            );

    for i in 1..nvl(v_incident_entity_list.last,0)
    loop
      pkg_os_datamart.sp_datamart_update_row
        (
            in_session_id,
            in_transaction_id,
            v_incident_entity_list(i),
            v_update_datamart_tf);
    end loop;

    -- Get all the IncidentAsset for the Incident
    pkg_os_object_search.sp_object_children_of_type_get (
                            in_session_id,
                            in_transaction_id,
                            in_object_id,
                            vObjtype_IncidentAsset,
                            v_incident_asset_list,
                            pkg_os_constant_bv.gbv_genobjid
                            );

    for i in 1..nvl(v_incident_asset_list.last,0)
    loop
      pkg_os_datamart.sp_datamart_update_row
        (
            in_session_id,
            in_transaction_id,
            v_incident_asset_list(i),
            v_update_datamart_tf);
    end loop;

    -- Get all the IncidentLoss for the Incident
    pkg_os_object_search.sp_object_children_of_type_get (
                        in_session_id,
                        in_transaction_id,
                        in_object_id,
                        vObjtype_IncidentLoss,
                        v_incident_loss_list,
                        pkg_os_constant_bv.gbv_genobjid
                        );

    for i in 1..nvl(v_incident_loss_list.last,0)
    loop
      pkg_os_datamart.sp_datamart_update_row
        (
            in_session_id,
            in_transaction_id,
            v_incident_loss_list(i),
            v_update_datamart_tf);
    end loop;

    -- Update incidnet Datamart
    pkg_os_datamart.sp_datamart_update_row
    (
        in_session_id,
        in_transaction_id,
        in_object_id,
        v_update_datamart_tf
    );

end sp_incident_datamart_update;
-------------------------------------------------------------------------------------------------------

-- This procedure is responsible for refreshing the datamart dragon_queue_grp_asgmt_cr.
-- Algorithm:
-- Get the list of children (of type QueueGroupAssignmentCriteria) of parent in_queue_definition_id
-- for each child, call the update datamart procedure
procedure sp_QueueGrpAsgmtCri_DM_Update
(
    in_session_id              in object.object_id%type,
    in_transaction_id          in object.object_id%type,
    in_queue_definition_id     in object.object_id%type
)
as
    v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_incident_datamart_update';
    vObjtype_QueueGroupAssignmentCriteria   constant    object_type.object_type_id%type        := 3365808;
    v_object_index              number;
    v_update_datamart_tf        CHAR(1)      := 'T';
    v_QueueGroupAsgmtCriteria_list     pkg_os_object.t_object_list;
    v_QueueGroupAsgmtCriteria_id object.object_id%type;

begin

      pkg_os_logging.sp_log
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           'Updating QueueGroupAssignmentCriteria datamart: for queue definition:: ' || in_queue_definition_id
      );

      -- Update DisbursementProfileUsage (Child of BillingAccount) Datamart
      v_QueueGroupAsgmtCriteria_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
           in_session_id,
           in_transaction_id,
           in_queue_definition_id,
           vObjtype_QueueGroupAssignmentCriteria,
           v_QueueGroupAsgmtCriteria_list
      );

      v_object_index := v_QueueGroupAsgmtCriteria_list.first;

      while v_object_index is not null loop

            v_QueueGroupAsgmtCriteria_id := v_QueueGroupAsgmtCriteria_list(v_object_index);

            pkg_os_logging.sp_log
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 'MD-Logging :: Updating datamart for v_QueueGroupAsgmtCriteria_id :: ' || v_QueueGroupAsgmtCriteria_id
            );

            pkg_os_datamart.sp_datamart_update_row
            (
                 in_session_id,
                 in_transaction_id,
                 v_QueueGroupAsgmtCriteria_id,
                 v_update_datamart_tf
            );

            v_object_index := v_QueueGroupAsgmtCriteria_list.next( v_object_index );

      end loop;

end sp_QueueGrpAsgmtCri_DM_Update;
-------------------------------------------------------------------------------------------------------
procedure sp_QueueGrpAsgmtCri_Refresh
(
    in_session_id              in object.object_id%type,
    in_transaction_id          in object.object_id%type,
    in_queue_definition_id     in object.object_id%type
)
is
    v_procedure_name      constant system_log.program_name%type   := pkg_name||'sp_incident_datamart_update';
    vObjtype_QueueGroupAssignmentCriteria   constant    object_type.object_type_id%type        := 3365808;
    vBv_serviceGroup constant number(12) := 32616508;
    v_object_index              number;
    v_update_datamart_tf        CHAR(1)      := 'T';
    v_QueueGroupAsgmtCriteria_list     pkg_os_object.t_object_list;
    v_QueueGroupAsgmtCriteria_id object.object_id%type;
    v_servicegroup_id object.object_id%type;
    v_service_group_zipcode               varchar2(4000):='';


begin
      pkg_os_logging.sp_log
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           'Refreshing the list of QueueGroupAssignmentCriteria on UI: for queue definition:: ' || in_queue_definition_id
      );

      -- Update DisbursementProfileUsage (Child of BillingAccount) Datamart
      v_QueueGroupAsgmtCriteria_list.delete;

      pkg_os_object_search.sp_object_children_of_type_get
      (
           in_session_id,
           in_transaction_id,
           in_queue_definition_id,
           vObjtype_QueueGroupAssignmentCriteria,
           v_QueueGroupAsgmtCriteria_list
      );

      v_object_index := v_QueueGroupAsgmtCriteria_list.first;

      while v_object_index is not null loop

            v_QueueGroupAsgmtCriteria_id := v_QueueGroupAsgmtCriteria_list(v_object_index);

            pkg_os_logging.sp_log
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 'MD-Logging :: Refreshing the v_QueueGroupAsgmtCriteria_id :: ' || v_QueueGroupAsgmtCriteria_id
            );

            v_servicegroup_id := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_QueueGroupAsgmtCriteria_id,
                                      vBv_serviceGroup
                                 );

            if v_servicegroup_id is not null then
                v_service_group_zipcode := pkg_oc_functions.fn_calc_service_group_zipcode
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_servicegroup_id
                                          );

                if v_service_group_zipcode is not null then
                    -- updating 325880083365808QueueGroupAssignmentCriteria.Criteria Value Text
                    pkg_os_object_io.sp_object_bv_set
                    (
                             in_session_id,
                             in_transaction_id,
                             v_QueueGroupAsgmtCriteria_id,
                             32588008,
                             v_service_group_zipcode

                    );


                end if;
            end if;
            v_object_index := v_QueueGroupAsgmtCriteria_list.next( v_object_index );
      end loop;
end sp_QueueGrpAsgmtCri_Refresh;

function fn_set_catastrophe_claim_vendor
(
    in_session_id        in         object.object_id%type,
    in_transaction_id    in         object.object_id%type,
    in_action_object_id  in         object.object_id%type
)
  return number is

    v_function_name              constant system_log.program_name%type := pkg_name||'fn_set_catastrophe_claim_vendor';
    v_list_selected_object_id      object.object_id%type;
    v_selected_claims                object_bv_value.business_variable_value%type;
    v_selected_claim_list            pkg_os_token.t_string_table;
    v_selected_claim_index           number;
    v_assigned_catastrophe           object.object_id%type;
    v_cat_assigned_vendor            object.object_id%type;
    v_selected_catastrophe_vendor_id object.object_id%type;
    v_claimTrxService_object_list    pkg_os_object.t_object_list;
    v_cts_assigned_vendor            object.object_id%type;
        v_is_cat_vendor_assigned_tf      char(1) := 'F';

begin

  v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, '210356.211681');
  pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_function_name,
      'v_list_selected_object_id : '|| v_list_selected_object_id
    );

    v_selected_claims := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_list_selected_object_id, 31814434);
    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_function_name,
      'v_selected_claims : ' || v_selected_claims
    );

  pkg_os_token.sp_tokenize_string(v_selected_claims, ',', v_selected_claim_list);

  v_selected_claim_index := v_selected_claim_list.first;
    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_function_name,
      'v_selected_claim_index : ' || v_selected_claim_list.count
    );

  v_selected_catastrophe_vendor_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, pkg_oc_functions.gbv_ClaimRefVednor);

  while v_selected_claim_index is not null loop
        v_is_cat_vendor_assigned_tf := 'F' ;
        pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_function_name,
      'v_selected_claim_index: ' || v_selected_claim_index || 'Claim: ' ||v_selected_claim_list(v_selected_claim_index)
    );
    v_assigned_catastrophe := pkg_os_object_io.fn_object_bv_get
                 (
                    in_session_id,
                    in_transaction_id,
                    v_selected_claim_list(v_selected_claim_index),
                    34181846
                 );

    v_cat_assigned_vendor := pkg_os_object_io.fn_object_bv_get
             (
                in_session_id,
                in_transaction_id,
                v_assigned_catastrophe,
                35747148
             );

        pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_cat_assigned_vendor : ' || v_cat_assigned_vendor || '|| v_assigned_catastrophe : ' || v_assigned_catastrophe
      );

    -- Get all ClaimTrxService objects
    v_claimTrxService_object_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
      (
         in_session_id,
         in_transaction_id,
         v_selected_claim_list(v_selected_claim_index),
         3337046,
         v_claimTrxService_object_list
      );

        pkg_os_logging.sp_log
        (
            in_session_id,
            in_transaction_id,
            v_function_name,
            'Before : ' || v_is_cat_vendor_assigned_tf
        );
    FOR i IN 1 .. v_claimTrxService_object_list.count
      LOOP
      v_cts_assigned_vendor := pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id, v_claimTrxService_object_list(i), 32551745);
            pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'Vendor Comparision v_cat_assigned_vendor : ' || v_cat_assigned_vendor || '=' || v_cts_assigned_vendor
                );
      if v_cat_assigned_vendor = v_cts_assigned_vendor then
                v_is_cat_vendor_assigned_tf := 'T';
                exit;
      end if;
    end loop;
        pkg_os_logging.sp_log
        (
            in_session_id,
            in_transaction_id,
            v_function_name,
            'After : ' || v_is_cat_vendor_assigned_tf
        );

        if v_is_cat_vendor_assigned_tf = 'F' and v_selected_claim_list(v_selected_claim_index) is not null then
            pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'Assign Vendor to Claim : ' || v_selected_claim_list(v_selected_claim_index)
                );

            return v_selected_claim_list(v_selected_claim_index);
            -- return 267248;
        end if;

    v_selected_claim_index := v_selected_claim_list.next(v_selected_claim_index);
    end loop;

   return 267148;

end fn_set_catastrophe_claim_vendor;
------------------------------------------------

function fn_set_catastrophe_claim_vendor_outcome
(
    in_session_id        in object.object_id%type,
    in_transaction_id    in object.object_id%type,
    in_action_object_id  in object.object_id%type
)
  return number is

    v_function_name         constant system_log.program_name%type := pkg_name||'fn_set_catastrophe_claim_vendor_ouutcome';
    v_list_selected_object_id   object.object_id%type;
    v_selected_claims           object_bv_value.business_variable_value%type;
    v_selected_claim_list       pkg_os_token.t_string_table;
    v_selected_claim_index      number;
    v_index_to_return           number;
    v_cat_assigned_vendor       object.object_id%type;
    v_is_cat_vendor_assigned_tf object.object_id%type;
    v_searched_object_type_id   object_type.object_type_id%type;

begin

  v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, 35907248);

  v_searched_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_list_selected_object_id);
    pkg_os_logging.sp_log
    (
        in_session_id,
        in_transaction_id,
        v_function_name,
        ' Session Id: '|| in_session_id ||
        ' in_transaction_id: '|| in_transaction_id ||
        ' in_action_object_id: '|| in_action_object_id ||
        ' v_list_selected_object_id: '|| v_list_selected_object_id
    );

    if v_searched_object_type_id = 345 then
    pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_list_selected_object_id : '|| v_list_selected_object_id
      );

    v_selected_claims := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_list_selected_object_id, 31814434);

    pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_selected_claims : ' || v_selected_claims
      );

    v_selected_claim_list.delete;

    pkg_os_token.sp_tokenize_string(v_selected_claims, ',', v_selected_claim_list);

    v_selected_claim_index := v_selected_claim_list.first;

    pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_selected_claim_index First : ' || v_selected_claim_list.first
      );

    while v_selected_claim_index is not null loop
      pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_selected_claim_index: ' || v_selected_claim_index || ' Claim: ' ||v_selected_claim_list(v_selected_claim_index)
      );

            v_is_cat_vendor_assigned_tf := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_selected_claim_list(v_selected_claim_index), 36336148);
                  pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_function_name,
        'v_is_cat_vendor_assigned_tf: ' || v_is_cat_vendor_assigned_tf
      );
      if v_is_cat_vendor_assigned_tf = 2 and v_selected_claim_list(v_selected_claim_index) is not null then
        pkg_os_logging.sp_log
          (
            in_session_id,
            in_transaction_id,
            v_function_name,
            'Returning claim to set vendor: ' || v_selected_claim_list(v_selected_claim_index)
          );
                v_index_to_return := v_selected_claim_index;
                return v_selected_claim_list(v_index_to_return);
      else
        v_selected_claim_index := v_selected_claim_list.next(v_selected_claim_index);
        pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_function_name,
                        'Next claim in loop: ' || v_selected_claim_list.next(v_selected_claim_index)
                    );
      end if;
    end loop;
  end if;
   return 267148;

end fn_set_catastrophe_claim_vendor_outcome;

----------------------------------------------------
procedure sp_reset_bulk_vendor_assignment_flag
(
    in_session_id        in     object.object_id%type,
    in_transaction_id    in     object.object_id%type,
    in_action_object_id  in     object.object_id%type,
    io_action_outcome_id in out outcome.outcome_id%type
)
  is
    v_procedure_name      constant system_log.program_name%type := pkg_name||'sp_reset_bulk_vendor_assignment_flag';
    v_list_selected_object_id   object.object_id%type;
    v_selected_claims           object_bv_value.business_variable_value%type;
    v_selected_claim_list       pkg_os_token.t_string_table;
    v_selected_claim_index      number;
    v_claim                     object.object_id%type;
    v_catastrophe_id            object.object_id%type;
    v_datamart_tf               char:= 'T';
    v_searched_object_type_id   object_type.object_type_id%type;

begin
        v_catastrophe_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, '210356.34085846.34113246');
        pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_selected_claims,
        'v_catastrophe_id--->: ' || v_catastrophe_id
      );
        v_list_selected_object_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, v_catastrophe_id, 35907248);
                pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_selected_claims,
        'v_list_selected_object_id--->: ' || v_list_selected_object_id
      );
    v_selected_claims := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_list_selected_object_id, 31814434);
        pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_selected_claims,
        'v_selected_claims--->: ' || v_selected_claims
      );
    v_selected_claim_list.delete;

    pkg_os_token.sp_tokenize_string(v_selected_claims, ',', v_selected_claim_list);

    v_selected_claim_index := v_selected_claim_list.first;

    while v_selected_claim_index is not null loop
            v_claim := v_selected_claim_list(v_selected_claim_index);
            pkg_os_logging.sp_log
      (
        in_session_id,
        in_transaction_id,
        v_selected_claims,
        'v_claim--->: ' || v_claim
      );
            pkg_os_object_io.sp_object_bv_set
                        (
                            in_session_id,
                            in_transaction_id,
                            v_claim,
                            36336148,
                            2
                        );

            pkg_os_datamart.sp_datamart_update_row
                        (
                            in_session_id,
                            in_transaction_id,
                            v_claim,
                            v_datamart_tf
                        );

      v_selected_claim_index := v_selected_claim_list.next(v_selected_claim_index);
    end loop;
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end sp_reset_bulk_vendor_assignment_flag;

---------------------------------------------------
procedure sp_set_iso_claim_search_request_bv
(
    in_session_id          in          object.object_id%type,
    in_transaction_id      in          object.object_id%type,
    in_object_id           in          object.object_id%type,
    io_action_outcome_id   in out      outcome.outcome_id%type
)
is
    v_procedure_name      varchar2(100) := 'sp_set_iso_claim_search_request_bv';
    v_incidentLoss_list   pkg_os_object.t_object_list;
    gobjtype_incidentLoss object_type.object_type_id%type := 3201546;
    v_incidentLoss_index  number;
    v_claim               object.object_id%type;
    v_datamart_tf         char:= 'T';
begin
    v_incidentLoss_list.delete;
    pkg_os_object_search.sp_object_children_of_type_get
                            (
                                in_session_id,
                                in_transaction_id,
                                in_object_id,
                                gobjtype_incidentLoss,
                                v_incidentLoss_list
                            );

    v_incidentLoss_index :=v_incidentLoss_list.first;

    WHILE v_incidentLoss_index IS NOT null LOOP

        v_claim := pkg_os_object_io.fn_object_bv_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        v_incidentLoss_list(v_incidentLoss_index),
                                        32536048
                                    );

        pkg_os_object_io.sp_object_bv_set
                        (
                            in_session_id,
                            in_transaction_id,
                            v_claim,
                            35951248,
                            0
                        );

    pkg_os_datamart.sp_datamart_update_row
                    (
                        in_session_id,
                        in_transaction_id,
                        v_claim,
                        v_datamart_tf
                    );

        v_incidentLoss_index := v_incidentLoss_list.next(v_incidentLoss_index);
    END LOOP;

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
END sp_set_iso_claim_search_request_bv;
--------------------------------------------------
function fn_get_claim_for_iso_claim_search
(
    in_session_id        in object.object_id%type,
    in_transaction_id    in object.object_id%type,
    in_action_object_id  in object.object_id%type
)
return number is
    v_function_name                         varchar2(100) := 'fn_get_claim_for_iso_claim_search';
    v_incidentLoss_list                     pkg_os_object.t_object_list;
    gobjtype_incidentLoss                   object_type.object_type_id%type := 3201546;
    v_incidentLoss_index                    number;
    v_claim                                 object.object_id%type;
    v_policy_transaction                    object.object_id%type;
    v_policy                                object.object_id%type;
    v_is_iso_claim_search_request_triggered object_bv_value.business_variable_value%type;
    v_claim_status                          object_bv_value.business_variable_value%type;
    v_datamart_tf                           char:= 'T';
    v_iso_claimsearch_enabled_for_lob_tf    char:= 'F';
begin
    v_incidentLoss_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
                            (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                gobjtype_incidentLoss,
                                v_incidentLoss_list
                            );

    v_incidentLoss_index := v_incidentLoss_list.first;

    WHILE v_incidentLoss_index IS NOT null LOOP

        v_claim := pkg_os_object_io.fn_object_bv_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        v_incidentLoss_list(v_incidentLoss_index),
                                        32536048
                                    );
        IF v_claim IS NOT NULL THEN
            v_is_iso_claim_search_request_triggered := pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_claim,
                                            35951248
                                        );

            v_policy_transaction := pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_claim,
                                            33907246
                                        );

            v_policy := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_policy_transaction);

            v_iso_claimsearch_enabled_for_lob_tf := NVL(pkg_os_product.fn_product_property_get( v_policy , 116148 ), 'F');

            v_claim_status := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_claim, gbv_ObjectState);

            IF v_is_iso_claim_search_request_triggered = 1 OR
                v_claim_status IN (gEnum_Claim_ClosedState, gEnum_Claim_WithdrawnState) OR
                v_iso_claimsearch_enabled_for_lob_tf = 'F'
                THEN
                pkg_os_logging.sp_log
                                (
                                    in_session_id,
                                    in_transaction_id,
                                    v_function_name,
                                    'Condition false for claim: '|| v_claim
                                );
            ELSE
                pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'Returning Claim to trigger ISO Claim Search Request : '|| v_claim
                );
                return v_claim;
            END IF;
        END IF;
        v_incidentLoss_index := v_incidentLoss_list.next(v_incidentLoss_index);
    END LOOP;

    pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_function_name,
                'Finally returning Ok outcome'
            );

    return pkg_os_constant.gOutcome_OK;

END fn_get_claim_for_iso_claim_search;
--------------------------------------------------------------------------------
function is_incident_entity_belongs_to_claim
(
      in_session_id         in object.object_id%type,
      in_transaction_id     in object.object_id%type,
      in_incident_entity_id in object.object_id%type,
      in_claim_id           in object.object_id%type,
      in_incident_id        in object.object_id%type
)
return char
IS
    v_function_name              varchar2(100) := 'is_incident_entity_belongs_to_claim';
    v_incident_loss_list         pkg_os_object.t_object_list;
    v_incident_loss_id           object.object_id%type;
    v_incident_loss_index        number;
    v_retrun_tf                  char(1) := 'F';
    v_incident_loss_ref_claim    object_bv_value.business_variable_value%type;
    v_incident_loss_ref_entity   object_bv_value.business_variable_value%type;
    v_incident_entity_party_role object_bv_value.business_variable_value%type;
    v_verisk_party_role_code_id  integer := 12646;

BEGIN
-- First, we get the list of incident-losses, 
-- fetch the reference_claim and reference_incident_entity for each incident-loss, 
-- If reference_claim and reference_incident_entity matches with the passed parameters (in_claim_id, and in_incident_entity_id) then
-- this incident-loss belongs to the passed claim_id and hence return true. 

    v_incident_loss_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_incident_id,
        gobjtype_incidentLoss,
        v_incident_loss_list
    );

    v_incident_loss_index := v_incident_loss_list.first;

    while v_incident_loss_index IS NOT NULL
    LOOP
        v_incident_loss_ref_claim := pkg_os_object_io.fn_object_bv_get(
                                        in_session_id,
                                        in_transaction_id,
                                        v_incident_loss_list(v_incident_loss_index),
                                        32536048 -- IncidentLoss - xReference - _Reference_Referred Claim
                                    );

        v_incident_loss_ref_entity := pkg_os_object_io.fn_object_bv_get(
                                in_session_id,
                                in_transaction_id,
                                v_incident_loss_list(v_incident_loss_index),
                                32462846 -- IncidentLoss - xReference - _Reference_Claimant
                            );

        IF
            v_incident_loss_ref_claim = in_claim_id AND
            v_incident_loss_ref_entity = in_incident_entity_id
        THEN
            v_retrun_tf := 'T';
            return v_retrun_tf;
        END IF;

        v_incident_loss_index := v_incident_loss_list.next(v_incident_loss_index);
    END LOOP;
    
-- If any claimant role entity comes again, then we are skipping it intentionally. 
--And keeping all other entities for the transformation.

    v_incident_entity_party_role := pkg_os_object_io.fn_object_bv_get(
                        in_session_id,
                        in_transaction_id,
                        in_incident_entity_id,
                        32325746 -- IncidentEntity - List - Incident Entity Party Role
                    );

    SELECT
        ENUM INTO v_verisk_party_role_code_id
    FROM
        OC_PARTY_TYPE
    WHERE
        ENUM = v_incident_entity_party_role;

    pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_function_name,
                    'v_verisk_party_role_code_id: '|| v_verisk_party_role_code_id
                );

    IF v_verisk_party_role_code_id <> 12646 THEN
        v_retrun_tf := 'T';
    END IF;

    return v_retrun_tf;

END is_incident_entity_belongs_to_claim;
--------------------------------------------------------------------------------

/***
Algorithm: 
1. check the party type for the given incident entity. 
2. If this incident entity is an Insured and has reported
some loss then the party role code should be returned as 'CI' 
3. Else return the party role code that is configured in oc_party_type table. 
*/
function get_verisk_party_role_cd
(
      in_session_id         in object.object_id%type,
      in_transaction_id     in object.object_id%type,
      in_incident_entity_id in object.object_id%type,
      in_claim_id           in object.object_id%type,
      in_incident_id        in object.object_id%type
)
return varchar2
IS
    v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    v_function_name              varchar2(100) := 'get_verisk_party_role_cd';
    v_incident_loss_list         pkg_os_object.t_object_list;
    v_incident_loss_index        number;
    v_incident_loss_ref_claim    object_bv_value.business_variable_value%type;
    v_incident_loss_ref_entity   object_bv_value.business_variable_value%type;
    v_incident_entity_party_role object_bv_value.business_variable_value%type;
    v_verisk_party_role_code_id  integer := 24948;
    v_verisk_party_role_cd       varchar2(10):='';

BEGIN
  
    if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_function_name,
               'Finding third-party role code for Incident-Entity: ' || 
               in_incident_entity_id || ', in_claim_id: '|| in_claim_id ||
               ', in_incident_id: ' || in_incident_id
          );
    end if;

    v_incident_entity_party_role := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_incident_entity_id,
                                         gbv_IncidentEntityPartyRole
                                    );
                                    
    v_incident_loss_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_incident_id,
        gobjtype_incidentLoss,
        v_incident_loss_list
    );

    v_incident_loss_index := v_incident_loss_list.first;

    -- 72046 : Party Type is 'Insured'
    if v_incident_entity_party_role = 72046 then 
        while v_incident_loss_index IS NOT NULL
        LOOP
            v_incident_loss_ref_claim := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_incident_loss_list(v_incident_loss_index),
                                              gbv_IncidentLossReferredClaim
                                         );

            v_incident_loss_ref_entity := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_incident_loss_list(v_incident_loss_index),
                                               gbv_IncidentLossReferredClaimant  
                                          );

            IF
                v_incident_loss_ref_claim = in_claim_id AND
                
                v_incident_loss_ref_entity = in_incident_entity_id 
                
            THEN
                v_verisk_party_role_cd := 'CI';
                return v_verisk_party_role_cd;
            END IF;

            v_incident_loss_index := v_incident_loss_list.next(v_incident_loss_index);
            
        END LOOP;
    end if;
    
    SELECT
        tp.THIRD_PARTY_ROLE_CODE INTO v_verisk_party_role_code_id
    FROM
        OC_PARTY_TYPE oc,
        third_party_role_code tp
    WHERE
        oc.ENUM = v_incident_entity_party_role and
        oc.THIRD_PARTY_ROLE_CODE = tp.id;

    return v_verisk_party_role_cd;

END get_verisk_party_role_cd;
--------------------------------------------------------------------------------
function get_ref_tpr_incident_entity
(
      in_session_id           in object.object_id%type,
      in_transaction_id       in object.object_id%type,
      in_tpr_incident_id      in object.object_id%type,
      in_tpr_incident_loss_id in object.object_id%type
)
return number
IS
    v_function_name                             varchar2(100) := 'get_ref_tpr_incident_entity';
    v_tpr_incident_entity_list                  pkg_os_object.t_object_list;
    v_tpr_incident_entity_index                 number;
    v_tpr_incident_loss_ref_claimant            object_bv_value.business_variable_value%type;
    v_tpr_incident_entity_ref_incident_entity   object_bv_value.business_variable_value%type;
    v_tpr_incident_loss_ref_tpr_incident_entity integer := 0;

BEGIN

    v_tpr_incident_entity_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_tpr_incident_id,
        4219748, -- ThirdPartyReportIncidentEntity object type
        v_tpr_incident_entity_list
    );

    v_tpr_incident_entity_index := v_tpr_incident_entity_list.first;

    v_tpr_incident_loss_ref_claimant := pkg_os_object_io.fn_object_bv_path_get(
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_tpr_incident_loss_id,
                                                            '35458048.32462846');

    while v_tpr_incident_entity_index IS NOT NULL
    LOOP
        v_tpr_incident_entity_ref_incident_entity := pkg_os_object_io.fn_object_bv_get(
                                        in_session_id,
                                        in_transaction_id,
                                        v_tpr_incident_entity_list(v_tpr_incident_entity_index),
                                        36025648 -- ThirdPartyReportIncidentEntity - xReference - _Reference_ThirdPartyReportIncidentEntity_Refers_to_IncidentEntity
                                    );

        IF
            v_tpr_incident_entity_ref_incident_entity = v_tpr_incident_loss_ref_claimant
        THEN
            v_tpr_incident_loss_ref_tpr_incident_entity := v_tpr_incident_entity_list(v_tpr_incident_entity_index);
            exit;
        END IF;

        v_tpr_incident_entity_index := v_tpr_incident_entity_list.next(v_tpr_incident_entity_index);
    END LOOP;

    return v_tpr_incident_loss_ref_tpr_incident_entity;

END get_ref_tpr_incident_entity;
--------------------------------------------------------------------------------
function get_ref_tpr_incident_loss_belongs_to_tpr_sub_claim
(
      in_session_id           in object.object_id%type,
      in_transaction_id       in object.object_id%type,
      in_tpr_incident_id      in object.object_id%type,
      in_tpr_sub_claim_id     in object.object_id%type
)
return number
IS
    v_function_name                       varchar2(100) := 'get_ref_tpr_incident_loss_belongs_to_tpr_claims_payment';
    v_tpr_incident_loss_list              pkg_os_object.t_object_list;
    v_tpr_incident_loss_index             number;
    v_tpr_sub_claim_ref_incident_loss     object_bv_value.business_variable_value%type;
    v_tpr_incident_loss_ref_incident_loss object_bv_value.business_variable_value%type;
    v_tpr_sub_claim_ref_tpr_incident_loss integer := 0;

BEGIN

    v_tpr_incident_loss_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_tpr_incident_id,
        4087948, -- ThirdPartyReportIncidentLoss object type
        v_tpr_incident_loss_list
    );

    v_tpr_incident_loss_index := v_tpr_incident_loss_list.first;

    v_tpr_sub_claim_ref_incident_loss := pkg_os_object_io.fn_object_bv_path_get(
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_tpr_sub_claim_id,
                                                            '35457048.32387846');

    while v_tpr_incident_loss_index IS NOT NULL
    LOOP
        v_tpr_incident_loss_ref_incident_loss := pkg_os_object_io.fn_object_bv_get(
                                    in_session_id,
                                    in_transaction_id,
                                    v_tpr_incident_loss_list(v_tpr_incident_loss_index),
                                    35458048 -- ThirdPartyReportIncidentLoss - xReference - _Reference_TPRIncidentLoss_Refers_to_IncidentLoss
                                    );
        IF
            v_tpr_incident_loss_ref_incident_loss = v_tpr_sub_claim_ref_incident_loss
        THEN
            v_tpr_sub_claim_ref_tpr_incident_loss := v_tpr_incident_loss_list(v_tpr_incident_loss_index);
            exit;
        END IF;

        v_tpr_incident_loss_index := v_tpr_incident_loss_list.next(v_tpr_incident_loss_index);
    END LOOP;

    return v_tpr_sub_claim_ref_tpr_incident_loss;

END get_ref_tpr_incident_loss_belongs_to_tpr_sub_claim;
--------------------------------------------------------------------------------
function fn_is_first_disbursed_payment
(
      in_claim_id               in object.object_id%type,
      in_claim_trx_financial_id in object.object_id%type
)
return char
IS
    v_function_name                      varchar2(100) := 'is_first_disbursed_payment';
    v_retrun_tf                          char(1) := 'F';
    v_first_disbursed_payment_trx_time   integer := 0;
    v_current_disbursed_payment_trx_time integer := 0;
BEGIN

    SELECT
        MIN(obv.business_variable_value) INTO v_first_disbursed_payment_trx_time
    FROM
             object obj
        INNER JOIN object_bv_value obv on obv.object_id = obj.object_id and obv.business_variable_id = 32971148
    WHERE
            obj.object_type_id = 3336846 -- object type of ClaimTransactionFinancial
        AND obj.parent_object_id = in_claim_id
        AND obj.object_state_id = 60148 -- object state of Disbusred
        AND (select business_variable_value from object_bv_value where object_id = obj.object_id and business_variable_id = 34226846) = 1
        AND (select business_variable_value from object_bv_value where object_id = obj.object_id and business_variable_id = 32465146) IN (5, 8046);

    SELECT
        business_variable_value INTO v_current_disbursed_payment_trx_time
    FROM
        object_bv_value
    WHERE
            object_id = in_claim_trx_financial_id
        AND business_variable_id = 32971148;

    IF v_first_disbursed_payment_trx_time = v_current_disbursed_payment_trx_time THEN
        v_retrun_tf := 'T';
    END IF;

    return v_retrun_tf;

END fn_is_first_disbursed_payment;
--------------------------------------------------------------------------------
function fn_get_probable_incurred_amt_for_tpr_incident_loss
(
      in_session_id             in object.object_id%type,
      in_transaction_id         in object.object_id%type,
      in_incident_loss_id       in object.object_id%type,
      in_claim_id               in object.object_id%type
)
return number
IS
    v_function_name                              varchar2(100) := 'fn_get_probable_incurred_amt_for_tpr_incident_loss';
    v_sub_claim_list                             pkg_os_object.t_object_list;
    v_sub_claim_index                            number;
    v_sub_claim_coverage_category_id             integer := 0;
    v_sub_claim_ref_generated_from_incident_loss object_bv_value.business_variable_value%type;
    v_probable_incurred_amount                   integer := 0;
BEGIN
    v_sub_claim_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_claim_id,
        3204946, -- SubClaim object type
        v_sub_claim_list
    );

    v_sub_claim_index := v_sub_claim_list.first;

    while v_sub_claim_index IS NOT NULL
    LOOP
        v_sub_claim_coverage_category_id := pkg_os_object_io.fn_object_bv_get(
                                    in_session_id,
                                    in_transaction_id,
                                    v_sub_claim_list(v_sub_claim_index),
                                    33933046 -- SubClaim Coverage Category
                                    );
        v_sub_claim_ref_generated_from_incident_loss := pkg_os_object_io.fn_object_bv_get(
                                                in_session_id,
                                                in_transaction_id,
                                                v_sub_claim_list(v_sub_claim_index),
                                                32387846 -- SubClaim - xReference - _Reference_Generated from Loss
                                                );
        IF
            v_sub_claim_coverage_category_id = 10046 AND -- Condition to filter Indemnity type coverages
            v_sub_claim_ref_generated_from_incident_loss = in_incident_loss_id
        THEN
            v_probable_incurred_amount := v_probable_incurred_amount + pkg_os_object_io.fn_object_bv_get(
                                                                                            in_session_id,
                                                                                            in_transaction_id,
                                                                                            v_sub_claim_list(v_sub_claim_index),
                                                                                            32375246 -- Calculated SubClaim Total Incurred Amount
                                                                                        );
        END IF;

        v_sub_claim_index := v_sub_claim_list.next(v_sub_claim_index);
    END LOOP;

    return v_probable_incurred_amount;
END fn_get_probable_incurred_amt_for_tpr_incident_loss;
--------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        fn_get_numeric_limit_from_text
--
-- %USAGE
--        This function is used to extract the numeric value from the string value selected in the policy

--
--  %ALGORITHM
--    1. Keep only the numeric values, '.' and '/'. Remove all other characters.
--    2. Remove '.' if present at the end of the string.
--    3. Now, if the remaing value is null then consider the numeric limit as NULL.
--    4. if value contains / then set the aggregate and per occurrence limit bv.
--      The limit before / is per occurrence while the value after / is aggregate
--      and return the per occurrence limit/ aggregate limit based on input.
--    5. Else Return the numeric value left after removing all other characters.
--
--      Note: In this Function, executions are not handled intentionally.
--          This method will be used in defining the
--              PC coverage type attribute and PC attribute.
--            If there is any error in defining the limit we are expecting system to throw a splat and OS team can fix it instead of showing null/0 amount.
--
-- %PARAMS
--        in_session_id
--        in_transaction_id
--        in_limit_text        Claim Coverage Limit selected in policy
--        in_limit_type         1- Numeric value, 2- Per Occurence Limit, 3- Aggregate Limit. default 1
--
--------------------------------------------------------------------------------------------------

function fn_get_numeric_limit_from_text
(
      in_session_id      object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_limit_text          varchar2,
      in_limit_type          numeric default 1
)
return number
IS
    v_function_name                 constant system_log.program_name%type   := pkg_name||' fn_get_numeric_limit_from_text';
    v_numeric_limit                 number := 0;
    v_refined_limit                 varchar2(500);
    v_peroccurence_limit_text       varchar2(500);
    v_aggregate_limit_text          varchar2(500);
    v_peroccurence_limit            number;
    v_aggregate_limit               number;
    v_pos_limit_seperator           number;
BEGIN
    -- return 0.0 if limit is not null
    if (in_limit_text is null) then
        return v_numeric_limit;
    end if;

    --1. Keep only the numeric values, '.' and '/'. Remove all other characters.
    v_refined_limit := regexp_replace(in_limit_text, '[^0-9/. ]', '');

    if (v_refined_limit is null or length(v_refined_limit) < 1)then
        return v_numeric_limit;
    End if;

    --    2. Remove '.' if present at the end of the string.
    if (substr(v_refined_limit, -1) = '.')then
        v_refined_limit := substr(v_refined_limit, 0, length(v_refined_limit)-1);
    --    3. Now, if the remaing value is null then consider the numeric limit as NULL.
        if v_refined_limit is null or length(v_refined_limit) < 1 then
            return v_numeric_limit;
        end if;
    end if;

    v_pos_limit_seperator := INSTR(v_refined_limit, '/');
    if(v_pos_limit_seperator is not null and v_pos_limit_seperator > 0) then
        --    4. if value contains / then set the aggregate and per occurrence limit bv.
        --      The limit before / is per occurrence while the value after / is aggregate
        --      and return the per occurrence limit/ aggregate limit based on input.
        v_peroccurence_limit_text  := substr(v_refined_limit, 0, v_pos_limit_seperator-1);
        v_aggregate_limit_text  := substr(v_refined_limit,  v_pos_limit_seperator+1);
        v_peroccurence_limit    := TO_NUMBER(v_peroccurence_limit_text);
        v_aggregate_limit       := TO_NUMBER(v_aggregate_limit_text);
    else
         -- 5. Else Return the numeric value left after removing all other characters.
        v_numeric_limit   := TO_NUMBER(v_refined_limit);

    end if;

    -- return the limit based on expected limit type
    If in_limit_type = 2 then
        v_numeric_limit := v_peroccurence_limit;
    elsif in_limit_type = 3 then
        v_numeric_limit := v_aggregate_limit;
    end if;

    -- Return the numeric Limit
    return v_numeric_limit;

END fn_get_numeric_limit_from_text;

--------------------------------------------------------------------------------
function fn_get_perOccurence_limit_from_text
(
      in_session_id      object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_limit_text          varchar2
)
return number
IS

BEGIN
    Return fn_get_numeric_limit_from_text(in_session_id, in_transaction_id,in_limit_text, 2 );
end fn_get_perOccurence_limit_from_text;
--------------------------------------------------------------------------------
function fn_get_aggregate_limit_from_text
(
      in_session_id      object.object_id%type,
      in_transaction_id    object.object_id%type,
      in_limit_text          varchar2
)
return number
IS
BEGIN
    Return fn_get_numeric_limit_from_text(in_session_id, in_transaction_id,in_limit_text, 3 );
end fn_get_aggregate_limit_from_text;
--------------------------------------------------------------------------------
function fn_cat_related_incident_id
(
      in_session_id           in    object.object_id%type,
      in_transaction_id     in    object.object_id%type,
      in_cat_type_id          in    object.object_id%type
)return varchar2
is
     v_incident_type_id      varchar2(500) ;

begin
     select listagg(INCIDENT_TYPE_ID, ',')
            into v_incident_type_id
     from oc_incident_type
     where RELATED_CATASTROPHE_TYPE = in_cat_type_id;

      if v_incident_type_id is null then
    v_incident_type_id :=0;
      return v_incident_type_id;
      else
    return v_incident_type_id;
   end if;

exception when no_data_found
then

  v_incident_type_id := 0;
          return v_incident_type_id;

end fn_cat_related_incident_id;


--------------------------------------------------------------------------------    
/*
 * This function is used to find the correct parent ACORD_Claim_Search_ClaimInvestigationAddRq_AdjusterParty object 
 * for the ACORD_Claim_Search_AdjusterParty_AdjusterPartyInfo object which is used in the transformations.
 */
function fn_get_parent_AdjusterParty_for_AdjusterPartyInfo
(
      in_session_id                 object.object_id%type,
      in_transaction_id             object.object_id%type,
      in_ClaimInvestigationAddRq_id object.object_id%type,
      in_AdjusterPartyInfo_id       object.object_id%type
)
return number
IS
    v_function_name                         varchar2(100) := 'fn_get_parent_AdjusterParty_for_AdjusterPartyInfo';
    v_AdjusterParty_list                    pkg_os_object.t_object_list;
    v_AdjusterParty_index                   number;
    v_AdjusterPartyInfo_ref_SubClaim        object_bv_value.business_variable_value%type;
    v_SubClaim_ref_SubClaimOwner            object_bv_value.business_variable_value%type;
    v_AdjusterParty_ref_DragonUser          object_bv_value.business_variable_value%type;
    v_parent_AdjusterParty integer          := 0;

BEGIN

    v_AdjusterPartyInfo_ref_SubClaim := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            in_AdjusterPartyInfo_id,
                                            gbv_Reference_Maps_to
                                        );

    v_SubClaim_ref_SubClaimOwner := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            v_AdjusterPartyInfo_ref_SubClaim,
                                            gbv_Reference_Subclaim_Owner
                                        );

    v_AdjusterParty_list.delete;

    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_AdjusterParty objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_AdjusterParty,
        v_AdjusterParty_list
    );

    v_AdjusterParty_index := v_AdjusterParty_list.first;

    while v_AdjusterParty_index IS NOT NULL
    LOOP
        v_AdjusterParty_ref_DragonUser := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            v_AdjusterParty_list(v_AdjusterParty_index),
                                            gbv_Reference_Maps_to
                                        );
        IF
            v_AdjusterParty_ref_DragonUser = v_SubClaim_ref_SubClaimOwner
        THEN
            v_parent_AdjusterParty := v_AdjusterParty_list(v_AdjusterParty_index);
            exit;
        END IF;

        v_AdjusterParty_index := v_AdjusterParty_list.next(v_AdjusterParty_index);
    END LOOP;

    return v_parent_AdjusterParty;

END fn_get_parent_AdjusterParty_for_AdjusterPartyInfo;
--------------------------------------------------------------------------------
/*
 * This function is used to find the correct parent ACORD_Claim_Search_AdjusterParty_Communications object 
 * for the ACORD_Claim_Search_PhoneInfo and ACORD_Claim_Search_EmailInfo object which is used in the transformations.
 */
function fn_get_parent_AdjusterParty_Communications_for_PhoneAndEmail
(
    in_session_id                   object.object_id%type,
    in_transaction_id               object.object_id%type,
    in_ClaimInvestigationAddRq_id   object.object_id%type,
    in_object_id                    object.object_id%type
)
return number
IS
    v_function_name                 varchar2(100) := 'fn_get_parent_AdjusterParty_Communications_for_PhoneAndEmail';
    v_AdjusterParty_list            pkg_os_object.t_object_list;
    v_AdjusterParty_index           number;
    v_parent_DragonUser             object_bv_value.business_variable_value%type;
    v_AdjusterParty_ref_DragonUser  object_bv_value.business_variable_value%type;
    v_child_communications integer  := 0;

BEGIN
    v_parent_DragonUser := pkg_os_object_search.fn_object_get_parent_of_type(
                                                in_session_id,
                                                in_transaction_id,
                                                in_object_id,
                                                gObjectType_DragonUser
                                            );

    v_AdjusterParty_list.delete;

    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_AdjusterParty objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_AdjusterParty,
        v_AdjusterParty_list
    );

    v_AdjusterParty_index := v_AdjusterParty_list.first;

    while v_AdjusterParty_index IS NOT NULL
    LOOP
        v_AdjusterParty_ref_DragonUser := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            v_AdjusterParty_list(v_AdjusterParty_index),
                                            gbv_Reference_Maps_to
                                        );
        IF
            v_AdjusterParty_ref_DragonUser = v_parent_DragonUser
        THEN
            v_child_communications := pkg_os_object_io.fn_object_bv_path_get
                                                        (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_AdjusterParty_list(v_AdjusterParty_index),
                                                            '35646848.35643448'
                                                        );
            exit;
        END IF;

        v_AdjusterParty_index := v_AdjusterParty_list.next(v_AdjusterParty_index);
    END LOOP;

    return v_child_communications;

END fn_get_parent_AdjusterParty_Communications_for_PhoneAndEmail;
--------------------------------------------------------------------------------
/*
 * This function is used to find the correct parent ACORD_Claim_Search_ClaimsParty object 
 * for ACORD_Claim_Search_ClaimsParty_ClaimsInjuredInfo object which is used in the transformations.
 */
function fn_get_parent_ClaimsParty_for_ClaimsInjuredInfo
(
      in_session_id                 object.object_id%type,
      in_transaction_id             object.object_id%type,
      in_ClaimInvestigationAddRq_id object.object_id%type,
      in_ClaimsInjuredInfo_id       object.object_id%type
)
return number
IS
    v_function_name                         varchar2(100) := 'fn_get_parent_ClaimsParty_for_ClaimsInjuredInfo';
    v_ClaimsParty_list                      pkg_os_object.t_object_list;
    v_ClaimsParty_index                     number;
    v_ClaimsInjuredInfo_ref_IncidentLoss    object_bv_value.business_variable_value%type;
    v_IncidentLoss_ref_IncidentEntity       object_bv_value.business_variable_value%type;
    v_ClaimsParty_ref_IncidentEntity        object_bv_value.business_variable_value%type;
    v_parent_ClaimsParty integer            := 0;

BEGIN

    v_ClaimsInjuredInfo_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            in_ClaimsInjuredInfo_id,
                                            gbv_Reference_Maps_to
                                        );

    v_IncidentLoss_ref_IncidentEntity := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            v_ClaimsInjuredInfo_ref_IncidentLoss,
                                            gbv_RefClaimant
                                        );

    v_ClaimsParty_list.delete;

    -- Get the list of ACORD_Claim_Search_ClaimsParty objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimsParty,
        v_ClaimsParty_list
    );

    v_ClaimsParty_index := v_ClaimsParty_list.first;

    while v_ClaimsParty_index IS NOT NULL
    LOOP
        v_ClaimsParty_ref_IncidentEntity := pkg_os_object_io.fn_object_bv_get(
                                            in_session_id,
                                            in_transaction_id,
                                            v_ClaimsParty_list(v_ClaimsParty_index),
                                            gbv_Reference_Maps_to
                                        );
        IF
            v_ClaimsParty_ref_IncidentEntity = v_IncidentLoss_ref_IncidentEntity
        THEN
            v_parent_ClaimsParty := v_ClaimsParty_list(v_ClaimsParty_index);
            exit;
        END IF;

        v_ClaimsParty_index := v_ClaimsParty_list.next(v_ClaimsParty_index);
    END LOOP;

    return v_parent_ClaimsParty;

END fn_get_parent_ClaimsParty_for_ClaimsInjuredInfo;
--------------------------------------------------------------------------------
/*
 * This function is used to find the reference ACORD_Claim_Search_ClaimsParty_ClaimsInjuredInfo object 
 * for the ACORD_Claim_Search_ClaimsOccurrence_ProbableIncurredAmt and ACORD_Claim_Search_AdjusterParty_AdjusterPartyInfo
 * object which is used in the transformations.
 */
function fn_get_reference_ClaimsInjuredInfo
(
    in_session_id                   object.object_id%type,
    in_transaction_id               object.object_id%type,
    in_ClaimInvestigationAddRq_id   object.object_id%type,
    in_IncidentLoss_id              object.object_id%type
)
return number
IS
    v_function_name                         varchar2(100) := 'fn_get_reference_ClaimsInjuredInfo';
    v_ClaimsParty_list                      pkg_os_object.t_object_list;
    v_ClaimsParty_index                     number;
    v_ClaimsInjuredInfo_list                pkg_os_object.t_object_list;
    v_ClaimsInjuredInfo_index               number;
    v_ClaimsInjuredInfo_ref_IncidentLoss    object_bv_value.business_variable_value%type;
    v_parent_ClaimsInjuredInfo integer      := 0;

BEGIN

    v_ClaimsParty_list.delete;
    
    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_ClaimsParty objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_ClaimsParty,
        v_ClaimsParty_list
    );

    v_ClaimsParty_index := v_ClaimsParty_list.first;

    WHILE v_ClaimsParty_index IS NOT NULL
    LOOP
        v_ClaimsInjuredInfo_list.delete;

        -- Get the list of ACORD_Claim_Search_ClaimsParty_ClaimsInjuredInfo objects
        pkg_os_object_search.sp_object_children_of_type_get
        (
            in_session_id,
            in_transaction_id,
            in_ClaimInvestigationAddRq_id,
            gObjectType_ACORD_Claim_Search_ClaimsParty_ClaimsInjuredInfo,
            v_ClaimsInjuredInfo_list
        );

        v_ClaimsInjuredInfo_index := v_ClaimsInjuredInfo_list.first;

        WHILE v_ClaimsInjuredInfo_list IS NOT NULL
        LOOP
            v_ClaimsInjuredInfo_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                                in_session_id,
                                                in_transaction_id,
                                                v_ClaimsInjuredInfo_list(v_ClaimsInjuredInfo_index),
                                                gbv_Reference_Maps_to
                                            );

            IF
                v_ClaimsInjuredInfo_ref_IncidentLoss = in_IncidentLoss_id
            THEN
                v_parent_ClaimsInjuredInfo := v_ClaimsInjuredInfo_list(v_ClaimsInjuredInfo_index);
                EXIT;
            END IF;

            v_ClaimsInjuredInfo_index := v_ClaimsInjuredInfo_list.next(v_ClaimsInjuredInfo_index);
        END LOOP;

        v_ClaimsParty_index := v_ClaimsParty_list.next(v_ClaimsParty_index);
    END LOOP;

    return v_parent_ClaimsInjuredInfo;

END fn_get_reference_ClaimsInjuredInfo;
--------------------------------------------------------------------------------
/*
 * This function is used to find the reference ACORD_Claim_Search_ClaimInvestigationAddRq_PropertyLossInfo object 
 * for the ACORD_Claim_Search_ClaimsOccurrence_ProbableIncurredAmt and ACORD_Claim_Search_AdjusterParty_AdjusterPartyInfo
 * object which is used in the transformations.
 */
function fn_get_reference_PropertyLossInfo
(
    in_session_id                   object.object_id%type,
    in_transaction_id               object.object_id%type,
    in_ClaimInvestigationAddRq_id   object.object_id%type,
    in_IncidentLoss_id              object.object_id%type
)
return number
IS
    v_function_name                         varchar2(100) := 'fn_get_reference_PropertyLossInfo';
    v_PropertyLossInfo_list                 pkg_os_object.t_object_list;
    v_PropertyLossInfo_index                number;
    v_PropertyLossInfo_ref_IncidentLoss     object_bv_value.business_variable_value%type;
    v_parent_PropertyLossInfo integer       := 0;

BEGIN

    v_PropertyLossInfo_list.delete;
    
    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_PropertyLossInfo objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_PropertyLossInfo,
        v_PropertyLossInfo_list
    );

    v_PropertyLossInfo_index := v_PropertyLossInfo_list.first;

    WHILE v_PropertyLossInfo_index IS NOT NULL
    LOOP
        v_PropertyLossInfo_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                                in_session_id,
                                                in_transaction_id,
                                                v_PropertyLossInfo_list(v_PropertyLossInfo_index),
                                                gbv_Reference_Maps_to
                                            );

        IF
            v_PropertyLossInfo_ref_IncidentLoss = in_IncidentLoss_id
        THEN
            v_parent_PropertyLossInfo := v_PropertyLossInfo_list(v_PropertyLossInfo_index);
            EXIT;
        END IF;

        v_PropertyLossInfo_index := v_PropertyLossInfo_list.next(v_PropertyLossInfo_index);
    END LOOP;

    return v_parent_PropertyLossInfo;

END fn_get_reference_PropertyLossInfo;
--------------------------------------------------------------------------------
/*
 * This function is used to find the reference ACORD_Claim_Search_ClaimInvestigationAddRq_AutoLossInfo object 
 * for the ACORD_Claim_Search_ClaimsOccurrence_ProbableIncurredAmt and ACORD_Claim_Search_AdjusterParty_AdjusterPartyInfo
 * object which is used in the transformations.
 */
function fn_get_reference_AutoLossInfo
(
    in_session_id                   object.object_id%type,
    in_transaction_id               object.object_id%type,
    in_ClaimInvestigationAddRq_id   object.object_id%type,
    in_IncidentLoss_id              object.object_id%type
)
return number
IS
    v_function_name                     varchar2(100) := 'fn_get_reference_AutoLossInfo';
    v_AutoLossInfo_list                 pkg_os_object.t_object_list;
    v_AutoLossInfo_index                number;
    v_AutoLossInfo_ref_IncidentLoss     object_bv_value.business_variable_value%type;
    v_parent_AutoLossInfo integer       := 0;

BEGIN

    v_AutoLossInfo_list.delete;

    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_AutoLossInfo objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_AutoLossInfo,
        v_AutoLossInfo_list
    );

    v_AutoLossInfo_index := v_AutoLossInfo_list.first;

    WHILE v_AutoLossInfo_index IS NOT NULL
    LOOP
        v_AutoLossInfo_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                                in_session_id,
                                                in_transaction_id,
                                                v_AutoLossInfo_list(v_AutoLossInfo_index),
                                                gbv_Reference_Maps_to
                                            );

        IF
            v_AutoLossInfo_ref_IncidentLoss = in_IncidentLoss_id
        THEN
            v_parent_AutoLossInfo := v_AutoLossInfo_list(v_AutoLossInfo_index);
            EXIT;
        END IF;

        v_AutoLossInfo_index := v_AutoLossInfo_list.next(v_AutoLossInfo_index);
    END LOOP;

    return v_parent_AutoLossInfo;

END fn_get_reference_AutoLossInfo;
--------------------------------------------------------------------------------
/*
 * This function is used to find the reference ACORD_Claim_Search_ClaimInvestigationAddRq_ClaimsParty object 
 * for the various ACORD dictionary objects which is used in the transformations.
 */
function fn_get_reference_ClaimsParty
(
    in_session_id                   object.object_id%type,
    in_transaction_id               object.object_id%type,
    in_ClaimInvestigationAddRq_id   object.object_id%type,
    in_IncidentLoss_id              object.object_id%type
)
return number
IS
    v_function_name                     varchar2(100) := 'fn_get_reference_ClaimsParty';
    v_ClaimsParty_list                  pkg_os_object.t_object_list;
    v_ClaimsParty_index                 number;
    v_ClaimsPayment_ref_IncidentLoss    object_bv_value.business_variable_value%type;
    v_IncidentLoss_ref_IncidentEntity   object_bv_value.business_variable_value%type;
    v_ClaimsParty_ref_IncidentEntity    object_bv_value.business_variable_value%type;
    v_ref_ClaimsParty integer           := 0;

BEGIN

    v_IncidentLoss_ref_IncidentEntity := pkg_os_object_io.fn_object_bv_get(
                                        in_session_id,
                                        in_transaction_id,
                                        in_IncidentLoss_id,
                                        gbv_RefClaimant
                                    );

    v_ClaimsParty_list.delete;

    -- Get the list of ACORD_Claim_Search_ClaimInvestigationAddRq_ClaimsParty objects
    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimInvestigationAddRq_ClaimsParty,
        v_ClaimsParty_list
    );

    v_ClaimsParty_index := v_ClaimsParty_list.first;

    WHILE v_ClaimsParty_index IS NOT NULL
    LOOP
        v_ClaimsParty_ref_IncidentEntity := pkg_os_object_io.fn_object_bv_get(
                                                in_session_id,
                                                in_transaction_id,
                                                v_ClaimsParty_list(v_ClaimsParty_index),
                                                gbv_Reference_Maps_to
                                            );

        IF
            v_ClaimsParty_ref_IncidentEntity = v_IncidentLoss_ref_IncidentEntity
        THEN
            v_ref_ClaimsParty := v_ClaimsParty_list(v_ClaimsParty_index);
            EXIT;
        END IF;

        v_ClaimsParty_index := v_ClaimsParty_list.next(v_ClaimsParty_index);
    END LOOP;

    return v_ref_ClaimsParty;

END fn_get_reference_ClaimsParty;
--------------------------------------------------------------------------------
function fn_get_parent_For_ClaimsPaymentCovInfo
(
      in_session_id                                 object.object_id%type,
      in_transaction_id                             object.object_id%type,
      in_ClaimInvestigationAddRq_id                 object.object_id%type,
      in_ACORD_Claim_Search_ClaimsPaymentCovInfo    object.object_id%type
)
return number
IS
    v_function_name                     varchar2(100) := 'fn_get_parent_For_ClaimsPaymentCovInfo';
    v_Acord_ClaimsPayment_list          pkg_os_object.t_object_list;
    v_ClaimsPayment_index               number;
    v_claimsPaymentCovInfo_ref_subclaim object_bv_value.business_variable_value%type;
    v_subclaim_ref_IncidentLoss         object_bv_value.business_variable_value%type;
    v_ClaimsPayment_ref_IncidentLoss    object_bv_value.business_variable_value%type;
    v_ClaimsPayment_TypeCd_obj          object_bv_value.business_variable_value%type;
    v_ClaimsPayment_TypeCd              object_bv_value.business_variable_value%type;
    v_parent_ClaimsPayment integer      := 0;
    v_claimsPaymentCovInfo_codetype     object_bv_value.business_variable_value%type;

BEGIN

    -- Get 36562248GenericObject - Text_50 - ClaimsPaymentCovInfo_Type 
    
    v_claimsPaymentCovInfo_codetype := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_ACORD_Claim_Search_ClaimsPaymentCovInfo,
                                            gbv_ClaimsPaymentCovInfo_Type
                                       );  
    
    v_claimsPaymentCovInfo_ref_subclaim := pkg_os_object_io.fn_object_bv_get
                                           (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_ACORD_Claim_Search_ClaimsPaymentCovInfo,
                                                  gbv_Reference_Maps_to
                                           );                                      
                                            
    -- Find the IncidentLoss of this subclaim and then compare it with acord_claimspayment's 
    --referenced incidentloss. If they are same then we can make the later the parent of first.
    
    v_subclaim_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get
                                   (
                                         in_session_id,
                                         in_transaction_id,
                                         v_claimsPaymentCovInfo_ref_subclaim,
                                         gbv_Reference_Generated_from_Loss
                                   );

    v_Acord_ClaimsPayment_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimsPayment,
        v_Acord_ClaimsPayment_list
    );

    v_ClaimsPayment_index := v_Acord_ClaimsPayment_list.first;

    while v_ClaimsPayment_index IS NOT NULL
    LOOP
        v_ClaimsPayment_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                              in_session_id,
                                              in_transaction_id,
                                              v_Acord_ClaimsPayment_list(v_ClaimsPayment_index),
                                              gbv_Reference_Maps_to
                                            );

        IF
            v_ClaimsPayment_ref_IncidentLoss = v_subclaim_ref_IncidentLoss
        THEN
          v_ClaimsPayment_TypeCd_obj := pkg_os_object_search.fn_object_11_child_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_Acord_ClaimsPayment_list(v_ClaimsPayment_index),
                                            gObjectType_ACORD_Claim_Search_ClaimsPayment_PaymentTypeCd
                                        );

          v_ClaimsPayment_TypeCd := 'TotalPayment'; -- defaulting this payment type cd

          if v_ClaimsPayment_TypeCd_obj is not null 
            then 
            
               v_ClaimsPayment_TypeCd := pkg_os_object_io.fn_object_bv_get
                                         (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_ClaimsPayment_TypeCd_obj,
                                                  gbv_PaymentTypeCd
                                         );
           end if;

           IF trim(v_ClaimsPayment_TypeCd) = trim(v_claimsPaymentCovInfo_codetype) 
             then
               v_parent_ClaimsPayment := v_Acord_ClaimsPayment_list(v_ClaimsPayment_index);
               exit;
           end IF;
        END IF;

        v_ClaimsPayment_index := v_Acord_ClaimsPayment_list.next(v_ClaimsPayment_index);
    END LOOP;

    return v_parent_ClaimsPayment;

END fn_get_parent_For_ClaimsPaymentCovInfo;
--------------------------------------------------------------------------------

function fn_get_parent_For_ClaimsPayment_totalPaymentAmount
(
      in_session_id                                 object.object_id%type,
      in_transaction_id                             object.object_id%type,
      in_ClaimInvestigationAddRq_id                 object.object_id%type,
      in_ACORD_Claim_Search_TotalPaymentAmount    object.object_id%type
)
return number
IS
    v_function_name                     varchar2(100) := 'fn_get_parent_For_ClaimsPayment_totalPaymentAmount';
    v_Acord_ClaimsPayment_list          pkg_os_object.t_object_list;
    v_ClaimsPayment_index               number;
    v_TotalPaymentAmount_ref_IncidentLoss         object_bv_value.business_variable_value%type;
    v_ClaimsPayment_ref_IncidentLoss    object_bv_value.business_variable_value%type;
    v_ClaimsPayment_TypeCd_obj          object_bv_value.business_variable_value%type;
    v_ClaimsPayment_TypeCd              object_bv_value.business_variable_value%type;
    v_parent_ClaimsPayment integer      := 0;
    v_claimsPaymentTotalPaymentAmount_codetype     object_bv_value.business_variable_value%type;

BEGIN

    -- Get 36562248GenericObject - Text_50 - ClaimsPaymentCovInfo_Type 
    
    v_claimsPaymentTotalPaymentAmount_codetype := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      in_ACORD_Claim_Search_TotalPaymentAmount,
                                                      gbv_ClaimsPaymentCovInfo_Type
                                                 );  
    
    v_TotalPaymentAmount_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get
                                             (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_ACORD_Claim_Search_TotalPaymentAmount,
                                                    gbv_Reference_Maps_to
                                             );                                      
                                            
    v_Acord_ClaimsPayment_list.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        in_ClaimInvestigationAddRq_id,
        gObjectType_ACORD_Claim_Search_ClaimsPayment,
        v_Acord_ClaimsPayment_list
    );

    v_ClaimsPayment_index := v_Acord_ClaimsPayment_list.first;

    while v_ClaimsPayment_index IS NOT NULL
    LOOP
        v_ClaimsPayment_ref_IncidentLoss := pkg_os_object_io.fn_object_bv_get(
                                              in_session_id,
                                              in_transaction_id,
                                              v_Acord_ClaimsPayment_list(v_ClaimsPayment_index),
                                              gbv_Reference_Maps_to
                                            );

        IF
            v_ClaimsPayment_ref_IncidentLoss = v_TotalPaymentAmount_ref_IncidentLoss
        THEN
          v_ClaimsPayment_TypeCd_obj := pkg_os_object_search.fn_object_11_child_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_Acord_ClaimsPayment_list(v_ClaimsPayment_index),
                                            gObjectType_ACORD_Claim_Search_ClaimsPayment_PaymentTypeCd
                                        );

          v_ClaimsPayment_TypeCd := 'TotalPayment'; -- defaulting this payment type cd

          if v_ClaimsPayment_TypeCd_obj is not null 
            then 
            
               v_ClaimsPayment_TypeCd := pkg_os_object_io.fn_object_bv_get
                                         (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_ClaimsPayment_TypeCd_obj,
                                                  gbv_PaymentTypeCd
                                         );
           end if;

           IF trim(v_ClaimsPayment_TypeCd) = trim(v_claimsPaymentTotalPaymentAmount_codetype) 
             then
               v_parent_ClaimsPayment := v_Acord_ClaimsPayment_list(v_ClaimsPayment_index);
               exit;
           end IF;
        END IF;

        v_ClaimsPayment_index := v_Acord_ClaimsPayment_list.next(v_ClaimsPayment_index);
    END LOOP;

    return v_parent_ClaimsPayment;

END fn_get_parent_For_ClaimsPayment_totalPaymentAmount;



end pkg_oc_functions;
/
