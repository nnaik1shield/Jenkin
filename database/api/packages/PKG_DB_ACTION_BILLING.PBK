CREATE OR REPLACE PACKAGE BODY PKG_DB_ACTION_BILLING
-------------
-- $HeadURL: http://oscsvn01/svnrepos/OneShield/coresrc/branches/CORE_4.30.2.DEV9/_database/api/PKG_DB_ACTION_BILLING.PBK $
-- $Revision: 711 $
--   $Author: kdubin $
--     $Date: 2013-11-12 11:18:34 -0500 (Tue, 12 Nov 2013) $
-------------
as

-----------------------------------------------------------------------------------------------------------------------------------------------------
--   Package Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------
 pkg_name       constant            system_log.program_name%type := 'pkg_db_action_billing.';

---------------------------------------------------------------------------------------------------

procedure show_version
is
begin

     dbms_output.put_line('$HeadURL: http://oscsvn01/svnrepos/OneShield/coresrc/branches/CORE_4.30.2.DEV9/_database/api/PKG_DB_ACTION_BILLING.PBK $');
     dbms_output.put_line('$Revision: 711 $');
     dbms_output.put_line('$Author: kdubin $');
     dbms_output.put_line('$Date: 2013-11-12 11:18:34 -0500 (Tue, 12 Nov 2013) $');

exception
    when others then
          dbms_output.put_line(sqlerrm(sqlcode));

end show_version;

--------------------------------------------------------------------------------
--
--  SP_EXECUTE_ACTION_BILLING
--
--  Based on the Dragon Billing native action name, call the specific procedure that the string represents ...
--
--------------------------------------------------------------------------------

procedure sp_execute_action_billing
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_object_cache               in out    pkg_os_object_cache.t_object_cache,
     io_message_list               in out    pkg_os_message.t_message_list,
     in_action_id                  in        action.action_id%type,
     in_action_object_id           in        object.object_id%type,
     in_action_object_type_id      in        object_type.object_type_id%type,
     in_native_command_name        in        varchar2,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as

     v_procedure_name              system_log.program_name%type       := pkg_name||'sp_execute_action_billing';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_current_date_time      date                                  := pkg_os_time.fn_os_sysdate(in_session_id,in_transaction_id,in_action_object_id);
     v_current_payer_date_time     date;-- UTPRODUCT-3925														 
      v_sid number;
begin
if in_native_command_name = 'DBAutoCashTransferTryCreate'
  then

          /*pkg_db_auto_withdrawal.sp_auto_transfer_try_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               sysdate
          );*/

          pkg_db_auto_funds_transfer.sp_auto_transfer_try_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               sysdate,
      io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBAutoCashTransferTryTestUpdate'
     then

     /*  pkg_db_auto_withdrawal.sp_auto_withdraw_try_test
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               sysdate,
               io_action_outcome_id
          );*/
io_action_outcome_id := pkg_os_constant.gOutcome_OK;
/*  elsif in_native_command_name = 'DBPolicyWithdrawalSchedule'
     then

          pkg_db_auto_withdrawal.sp_policy_auto_withdrawal
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               sysdate
          );

               -- OSBILLING-844
          pkg_db_auto_funds_transfer.sp_policy_auto_withdrawal
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    sysdate,
                    io_action_outcome_id
               );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;*/
     elsif in_native_command_name = 'DBObjectAssociateActors'
     then

          pkg_db_actor.sp_object_actor_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_action_id,
			   io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreateStatementProfile' ---'DBCreateStatementProfile'
     then

          -- @@@VG To the best of my knowledge is this not being used. Also it has a confrere, namely
          -- DBCreateStatementProfile which looks identical.

            declare
             io_stmt_profile_object_id     object.object_id%type := null;
            begin
          pkg_db_stmt_profile.sp_create_statement_profile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               io_stmt_profile_object_id
          );

        end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      elsif in_native_command_name = 'CSCreatePaymentProfileUsage'
      then

          declare
               v_paymentprofileusage_id      object.object_id%type;
          begin

          pkg_cs_profiles.sp_create_paymentprofusage
          (
               in_session_id,
               in_transaction_id,
            in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_paymentprofileusage_id
          );

          end;

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

        elsif in_native_command_name = 'CSInitCTPSelectedCCID'
      then

         begin

          pkg_cs_profiles.sp_obtain_cc_profile_id
          (
                 in_session_id ,
                in_transaction_id,
                 in_object_cache,
                 in_action_object_id,
                 io_action_outcome_id
          );

          end;

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

       elsif in_native_command_name = 'CSRestorePaymentProfileUsageShownProfile'
      then



          pkg_cs_profiles.sp_restore_ppu_shown_ctp
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );



        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSBillingSetBatchProcessed'

     then

          pkg_db_cashpost.sp_set_batch_processed

          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
                v_current_date_time


          );

     elsif in_native_command_name = 'CSPolicyAutoDisbursement'
     then

          -- OSPRODUCT-3575
          pkg_db_billing_payable.sp_disburse_multipayer_policy
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               in_object_cache,
               io_action_outcome_id
          );
          -- OSPRODUCT-3575

     elsif in_native_command_name = 'CSPolicyAutomatedWriteOff'
     then

          pkg_db_write_off.sp_auto_write_off_policy
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
/*  -------------------------------------------------------------------------------------------

  -- Added for OSBILLING -61 Native commands for billing suspension
     -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBBillingAccSuspension'
     then

          pkg_db_object_sk.sp_suspend_billing_account
          (
               in_session_id,
               in_transaction_id,
               in_action_id,
               in_action_object_id,
               io_action_outcome_id
          );
          */

     elsif in_native_command_name = 'DBSuspension'
          then

          pkg_db_suspension.sp_db_suspension
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     /*elsif in_native_command_name = 'DBBillingAccSuspension'
          then

          pkg_db_suspension.sp_db_suspension_wrapper
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );  */
     elsif in_native_command_name = 'DBNoicSuspension'
          then
          
          pkg_db_suspension.sp_manual_noic_policy_suspend
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );--LIOPRODUCT-38
		  
     elsif in_native_command_name = 'DBBillingResume'
          then

          pkg_db_suspension.sp_db_resume
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBSuspensionPlaceholder'
     then

          declare

               v_action_object_type_id               object.object_id%type;
               v_suspension_obj_type_id           object.object_id%type;
               gObjType_BillAccSuspension            constant object_type.object_type_id%type                     := 3193546;
               gObjType_PolicySuspension             constant object_type.object_type_id%type                     := 3193646;
               gObjType_BillingAccount               constant object_type.object_type_id%type                     := 2365346;
          begin

               --
               --     Get the object type of the in_object_id ( which would be policy excahnge or billing account) object type.
               --

               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         'ACTION_CUSTOM',
                         '...... in_action_object_id is : '||in_action_object_id
                    );

               v_action_object_type_id := pkg_os_object.fn_object_type_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id
                                               );
               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         'ACTION_CUSTOM',
                         '...... v_action_object_type_id is : '||v_action_object_type_id
                    );

              if v_action_object_type_id = gobjtype_billingaccount
               then
                    v_suspension_obj_type_id := gobjtype_billaccsuspension;
               elsif v_action_object_type_id = 24   -- Policy object
               then
                    v_suspension_obj_type_id := gobjtype_policysuspension;
               elsif v_action_object_type_id = 343 -- Exchange Object
               then
                    v_suspension_obj_type_id := gobjtype_policysuspension;
               end if;

               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         'ACTION_CUSTOM',
                         '...... v_suspension_obj_type_id is : '||v_suspension_obj_type_id
                    );

               pkg_base_placeholder.sp_placeholder_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_cache,
                    in_action_object_id,
                    v_suspension_obj_type_id,
                    io_action_outcome_id
               );

          end;

     -------------------------------------------------------------------------------------------

     elsif in_native_command_name = 'DBBillingTransactionBatchProcess'
     then

          ---- Checking if this transaction type set is marked as suspended
          if   pkg_db_suspension.fn_db_suspend_billing_trx
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id    -- BillingAccountTransactionSet ID
               ) = 0
          then

               pkg_db_object.sp_billing_acct_trx_process
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,    -- BillingAccountTransactionSet ID
                    in_object_cache,
                    io_action_outcome_id
               );

-- OSBILLING-3884               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          else

               io_action_outcome_id := 48446;

          end if;

          elsif in_native_command_name = 'DBGLFeedPreProcessing'
     then

          pkg_db_auto_funds_transfer.sp_pre_GLFeed_export
          (
               in_session_id,
               in_transaction_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      elsif in_native_command_name = 'DBGLFeedPostProcessing'
     then

          pkg_db_auto_funds_transfer.sp_post_GLFeed_export
          (
               in_session_id,
               in_transaction_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSBankInfoSearch'
     then


          declare

          v_bank_id            object_bv_value.business_variable_value%type:=pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_action_object_id, 32088040 );
          v_transit_number           object_bv_value.business_variable_value%type:=pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_action_object_id, 32088140 );
          v_flag               boolean;
          begin

          v_flag:=pkg_cs_profiles.fn_is_bank_info_present( in_session_id,
               in_transaction_id,in_action_object_id,v_bank_id,v_transit_number);
          if(v_flag)
          then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          else
          io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
          end if;
          end;

     elsif in_native_command_name = 'CSBankInfoInsert'
     then

          pkg_cs_profiles.sp_insert_bank_info
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
      elsif in_native_command_name = 'CSBankInfoRefresh'
     then
--OSBILLING-4374
                declare
               v_customerprofile_id                      object.object_id%type;
               v_action_object_type_id                   object.object_id%type;

               begin

 v_action_object_type_id := pkg_os_object.fn_object_type_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id
                                               );
               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         'Refresh Bank_Info',
                         '...... v_action_object_type_id is : '||v_action_object_type_id
                    );
              if v_action_object_type_id = 2384446
               then
            v_customerprofile_id := in_action_object_id;
            dbms_output.put_line('v_customerprofile_id='||v_customerprofile_id);
               elsif v_action_object_type_id = 2276904   -- PolicyTransactionPolicy
               then
--OSBILLING-4374
            v_customerprofile_id := pkg_os_object_io.fn_object_bv_path_get(0,
                                                                    0,
                                                                    in_action_object_id,
                                                                    '28555404.33993646');   --OSBILLING-4374
--                                                                    '28555404.29604909.29253414.29704646.30023846.211343'); --OSBILLING-4374
                                                                    dbms_output.put_line('v_customerprofile_id='||v_customerprofile_id);
          --OSBILLING-6054 start
          elsif v_action_object_type_id = 310 then --UserSession
              v_customerprofile_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_action_object_id,
                                                                      2364876);
          --OSBILLING-6054 end
           end if;
          pkg_cs_profiles.sp_refresh_bank_info
          (
               in_session_id,
               in_transaction_id,
               v_customerprofile_id

          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          end;


     -----------------------------------------------------------------------
     --
     -- Native command to see if this is a suspend billing transaction(OSBILLING-61)
     --
     elsif in_native_command_name = 'DBSuspendTrnxCheck'
     then

     ---- Checking if this transaction type set is marked as suspended
          if pkg_db_suspension.fn_db_suspend_billing_trx
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id    -- BillingAccountTransactionSet ID
               ) = 0
          then
               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          else
               io_action_outcome_id := 48446;
        end if;
/* elsif in_native_command_name = 'CSPolicyUpdateBillingPrimaryCSR'
     then

          pkg_db_object.sp_set_policy_primary_csr
          (
               in_session_id  ,
               in_transaction_id ,
               in_action_id ,
               in_action_object_id,    --BillingAccount_id
               io_action_outcome_id
          );

          end if;*/


elsif in_native_command_name = 'CSCheckEntityPlaceholder'
    then
        pkg_db_customer_portal.sp_check_entity_placeholder
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
elsif in_native_command_name = 'CSPolicyAdvanceDate'
     then

          pkg_db_nightly_process.sp_policy_date_advance
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSBillAccountAdvanceDate'
     then

          pkg_db_nightly_process.sp_billaccount_date_advance
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSExchangeAdvanceDate'
     then

          pkg_db_nightly_process.sp_exchange_date_advance
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     ---------------------------------------------------------
     --   Dragon Billing Native Command section starts
     ---------------------------------------------------------

     elsif in_native_command_name = 'CSCustomerSessionLogin'
    then

        pkg_db_customer_portal.sp_authenticate_customer
        (
               in_session_id,
               in_transaction_id,
            in_object_cache,
                io_message_list,
               in_action_id,
               in_action_object_id,
               in_action_object_type_id,
               io_action_outcome_id,
            v_current_date_time
        );

    elsif in_native_command_name = 'CSRenewAsQuote'
    then
      --OSBILLING-3141
       PKG_CS_POST_NB.sp_create_renewal_as_quote
        (
              in_session_id,
              in_transaction_id,
              in_action_id,
              in_action_object_id
        );
        io_action_outcome_id := pkg_os_constant.gOutcome_RewriteQuote;


     elsif in_native_command_name = 'CSPolicyImagePaymentScheduleCreate'
     then
          declare
               v_chosen_payment_plan_id        object.object_id%type;
               gbv_PolicyRefChosenPlan       constant business_variable.business_variable_id%type        :=   212021;

          begin
               --OSBILLING-7831
               v_current_date_time := nvl(
                                               pkg_db_functions.fn_get_processed_date
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id
                                               ), v_current_date_time
                                          );
               v_chosen_payment_plan_id :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  gbv_PolicyRefChosenPlan
                                             );

               pkg_db_payplan_modify.sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_os_constant.gBoolean_True,
                    v_chosen_payment_plan_id ,
                    v_current_date_time,
                    null,
                    io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end;


     elsif in_native_command_name = 'DBBAAccountScheduleGenerate'
     then
          -- get object type of passed on object id
          declare

          v_obj_type_id      object_type.object_type_id%type;

          begin
               v_obj_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_Session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );
               case
                    when v_obj_type_id = 345 then

                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_Session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   30169701
                              )
                         );

                    else
                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id
                         );

               end case;

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBBAAccountScheduleGenerateModBillPlan'
     then
          -- get object type of passed on object id
          declare

          v_obj_type_id      object_type.object_type_id%type;

          begin
               v_obj_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_Session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );
               case
                    when v_obj_type_id = 345 then

                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_Session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   30169701
                              )
                         );

                    else
                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id,
                              'F',
                              'T'
                         );

               end case;

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBBAAccountScheduleGenerateModPayPlan'
     then
          -- get object type of passed on object id
          declare

          v_obj_type_id      object_type.object_type_id%type;

          begin
               v_obj_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_Session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );
               case
                    when v_obj_type_id = 345 then

                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_Session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   30169701
                              )
                         );

                    else
                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id,
                              'T'
                         );

               end case;

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBBAAccountScheduleGenerateModBillPlanPayPlan'
     then
          -- get object type of passed on object id
          declare

          v_obj_type_id      object_type.object_type_id%type;

          begin
               v_obj_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_Session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );
               case
                    when v_obj_type_id = 345 then

                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_Session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   30169701
                              )
                         );

                    else
                         pkg_db_payplan_modify.sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id,
                              'T',
                              'T'
                         );

               end case;

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSPolicyImagePreferredWithdrawDateSet'
     then

          pkg_cs_db_payplan.sp_set_pref_withdraw_date
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSPolicyTransactionPaymentScheduleCleanse'
     then
          --OSBILLING-7831
          v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id
                                         ), v_current_date_time
                                    );
          pkg_db_payplan_modify.sp_schedule_payment_cleanse
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSBillingAcctTrxSetTrxCreate'
     then

          /*pkg_db_cashpost.sp_cashpost_trx_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache,
               v_current_date_time
          );*/

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  /*   elsif in_native_command_name = 'DBBillingAccSuspension'
     then

          pkg_db_object_sk.sp_suspend_billing_account
          (
               in_session_id,
               in_transaction_id,
               in_action_id,
               in_action_object_id,
               io_action_outcome_id
          );  */


     elsif in_native_command_name = 'CSFITransactionOLAPRefresh'
     then

          pkg_db_cashpost.sp_fitransaction_olap_refresh
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               io_message_list,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSBillingSetSinglePayment'
     then

          pkg_db_cashpost.sp_set_single_payment
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

/*
     elsif in_native_command_name = 'CSBillingSetBatchProcessed'
     then

          pkg_db_cashpost.sp_set_batch_processed
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );*/



     elsif in_native_command_name = 'CSBillingAcctTrxSetReferenceSet'
     then

          pkg_db_cashpost.sp_add_placeholder_trx
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );

     elsif in_native_command_name  = 'CSGBUnapplyCash'
          then

        pkg_db_reversal.sp_reverse_cash_apply
        (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id

        );

     elsif in_native_command_name = 'CSBillingAcctTrxSetTrxDelete'
     then

          pkg_db_cashpost.sp_trx_delete_multiple
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );

          --io_action_outcome_id := pkg_os_constant.gOutcome_OK;

--------------------------------------------------------------------------------

     elsif in_native_command_name = 'CSBillingAccountAutomatedWriteOff'
     then

          pkg_db_write_off.sp_auto_write_off
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );

     elsif in_native_command_name = 'CSBillingAcctTrxSetFitemsTotal'
     then

          pkg_db_write_off.sp_selected_fitems_total
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

          --OSBILLING-6791
          elsif in_native_command_name = 'DBBillingPartneAutoTransferCash'
     then

          pkg_db_reconciliation.sp_auto_unassociate_cash
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSCashTransferGenerateTransaction'
     then

          pkg_db_cash_transfer.sp_create_cash_transfer_trx
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSValidateCashTransferProcess'
     then

          pkg_db_cash_transfer.sp_validate_cash_transfer
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );



     elsif in_native_command_name = 'CSBillingAcctTrxSetCreateFitransactions' then

          pkg_db_write_off.sp_create_fitransactions(in_session_id,
                                                    in_transaction_id,
                                                    in_object_cache,
                                                    in_action_object_id,
                                                    io_action_outcome_id,
                                                    v_current_date_time);

     elsif in_native_command_name = 'CSBillingAcctTrxSetManualWriteOff'
     then

          pkg_db_write_off.sp_manual_write_off
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

elsif in_native_command_name = 'DBBillingAcctTrxSetCalculateWriteOff'--osbilling-755
     then

          pkg_db_write_off.sp_calculate_write_off_amt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
     elsif in_native_command_name = 'CSLateProcessFitemsWriteOff'
     then

          declare
             --  v_policy_id         object.object_id%type                        := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

          begin
               pkg_db_write_off.sp_late_process_fitem_writeoff
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                   -- v_policy_id,
                    io_action_outcome_id,
                    v_current_date_time
               );
          end;


     /*elsif in_native_command_name = 'CSBillingAcctManualCashApplyTrxProcess'
     then

          pkg_db_cashpost.sp_manualcashapp_trx_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );*/


     elsif in_native_command_name = 'CSPolicyImageFinancialTrxGenerate'
     then

          /*pkg_db_billing.sp_financial_trx_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );*/
          
          --OSBILLING-7829
          v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id
                                         ), v_current_date_time
                                    );
          pkg_db_billing_modify.sp_financial_trx_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSPolicyImageChangePayplanProcess'
     then
/*
          pkg_db_billing.sp_change_payplan_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          ); */

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSBillingAcctDisbursePayablesValidate'
     then
      -- OSBILLING-675
      -- replace sp_disburse_fitems_create with sp_disburse_fitrx_create
      --
      /*
          pkg_db_billing_payable.sp_disburse_fitems_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );
       */
       /*
          pkg_db_billing_payable.sp_disburse_fitrx_create
          (
               in_session_id,
               in_transaction_id,
               in_billAccTRXset_id       => in_action_object_id,
               in_object_cache           => in_object_cache,
               io_action_outcome_id      => io_action_outcome_id
               -- in_current_date_time      => v_current_date_time
          );
        */

          pkg_db_billing_payable.sp_disb_fitrx_create_manual
          (
              in_session_id,
              in_transaction_id,
              in_billAccTRXset_id       => in_action_object_id,
              in_object_cache           => in_object_cache,
              io_action_outcome_id      => io_action_outcome_id
           );

     elsif in_native_command_name = 'CSCashPostDisbursePayablesValidate'
     then
          /*
          -- OSBILLING-675
          -- replace sp_disb_fitems_create_cashpost with sp_disb_fitrx_create_cashpost

          pkg_db_billing_payable.sp_disb_fitems_create_cashpost
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );
          */
          pkg_db_billing_payable.sp_disb_fitrx_create_cashpost
          (
               in_session_id,
               in_transaction_id,
               in_billAccTRXset_id       => in_action_object_id,
               io_action_outcome_id      => io_action_outcome_id
          );

     elsif in_native_command_name = 'DBStatementDisbursePayablesValidate'
     then

          pkg_db_billing_payable.sp_disb_fitrx_create_stmt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSBillingAcctDisbursePayablesConfirm'
     then
      -- OSBILLING-675
      -- replace sp_disburse_fitems with sp_disburse_batch_process
      --
      /*
          pkg_db_billing_payable.sp_disburse_fitems
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );
      */
       pkg_db_billing_payable.sp_disburse_batch_process
         (
              in_session_id,
              in_transaction_id,
              in_billAccTRXset_id   => in_action_object_id,
              in_object_cache       => in_object_cache,
              io_action_outcome_id  => io_action_outcome_id
         );

     elsif in_native_command_name = 'DBBillingAcctDisbursePayablesSecurityQueue'
     then
      -- OSBILLING-675
      -- replace sp_disburse_payables_confirm with sp_disburse_batch_confirm_
      --
       /*
          pkg_db_billing_payable.sp_disburse_payables_confirm
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );
       */
        pkg_db_billing_payable.sp_disburse_batch_confirm
         (
              in_session_id,
              in_transaction_id,
              in_billacctrxset_id   => in_action_object_id,
              in_object_cache       => in_object_cache,
              io_action_outcome_id  => io_action_outcome_id,
              in_current_date_time  => v_current_date_time
         );
     elsif in_native_command_name = 'CSBillingAccountDisbursePayables'
     then

          pkg_db_billing_payable.sp_disburse_payable_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSAutoDisbursement'
     then

          pkg_db_billing_payable.sp_auto_disburse
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSReProcessDisbursement'
     then

          pkg_db_billing_payable.sp_reprocess_disbursement
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'DBBillingAcctAutoCommissionDisburse'
     then

          /*pkg_cs_db_payable.sp_auto_commission_disburse
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               in_object_cache,
               io_action_outcome_id
          );*/

          pkg_db_billing_payable.sp_auto_disburse_payables_tf
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               io_action_outcome_id

          );

     elsif in_native_command_name = 'CSReProcessManualWriteOff'
     then

          pkg_db_write_off.sp_manual_write_off_reprocess
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

elsif in_native_command_name = 'CSPolicyTransactionPaymentCashPost'
     then

          pkg_db_cashpost.sp_payment_cash_post
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
              in_object_cache,
               io_action_outcome_id,
            v_current_date_time
          );


     elsif in_native_command_name = 'DBTimeZoneDateRoll'
     then

          pkg_db_nightly_process.sp_timezone_date_map
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );



     elsif in_native_command_name = 'CSPolicyNightlyProcess'
     then

          declare

               v_policy_date  date;

          begin

               v_policy_date  := pkg_db_functions.fn_get_policy_current_date(in_session_id,in_transaction_id,in_action_object_id);

               pkg_db_nightly_process.sp_policy_nightly_process
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_id,
                    in_action_object_id,
                    v_policy_date
               );

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSPolicyAsOfDateEarnedPremium'
     then

          declare
               v_asof_date          date;
               --v_embed_object_id     number(12);
                  v_embed_object_id   object.object_id%type; --OSBILLING-7502

          begin

               -- Get child EmbeddedReport and get the As of Date
               -- OneShieldReference2357046EmbeddedReport
               v_embed_object_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_session_id, 2357046);
               v_asof_date := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_embed_object_id, 32005246);

               pkg_db_nightly_process.sp_policy_nightly_process
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_id,
                    in_action_object_id,
                    v_asof_date
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          end;

     /*elsif in_native_command_name = 'CSPolicyAgingStatusUpdate'
     then

          pkg_db_nightly_process.sp_update_aging_status
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;*/

     -- OSBILLING-2155 avlasov 04/28/2016
     elsif in_native_command_name = 'DBBATrxSetAgingStatusUpdate'
     then
       declare
         v_object_type_id              object_type.OBJECT_TYPE_ID%type;
         v_object_id                   object.object_id%type;
       begin
         v_object_type_id := pkg_os_object.fn_object_type_get (in_session_id, in_transaction_id, in_action_object_id);

         if v_object_type_id = pkg_os_constant.gobjType_PolicyTransaction then
           v_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id,31866546); --get Associated BillingAccountTransactionSet

         else --Object Type BATrxSet
           v_object_id := in_action_object_id;--Object Type BATrxSet
         end if;

         if v_object_id is not null then
           pkg_db_nightly_process.sp_update_aging_status
            (
               in_session_id,
               in_transaction_id,
               v_object_id
            );
         end if;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
       end;

     elsif in_native_command_name = 'CSBillingAccountAgingStatusUpdate'
     then

          pkg_db_nightly_process.sp_billacc_update_aging_status
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSPolicyLateProcess'
     then

          pkg_db_late_process.sp_late_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSPolicyLateFee'
     then

          declare
               v_policy_id         object.object_id%type                        := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

          begin
               pkg_db_late_process.sp_late_fee
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_policy_id,
                    io_action_outcome_id
               );
          end;


     elsif in_native_command_name = 'DBPolicyLateNoticeRollup'
     then

          declare
               v_policy_id         object.object_id%type                        := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);
--2017-01-25 Cheryl osbilling-3588 - changed BV

               v_res_billing_acc   object.object_id%type  := pkg_os_object_io.fn_object_bv_get
                         (in_session_id,in_transaction_id,v_policy_id,gbv_responsible_billingacct_id );


          begin

          -- OSBILLING-2860
            /*   pkg_db_late_process.sp_account_statement_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_policy_id,
                    io_action_outcome_id,
                    v_current_date_time
               );*/
                pkg_os_logging.sp_log
                (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     '|||||| XXX Policy Transaction ID '||in_action_object_id
                     ||' v_policy_id'||v_policy_id
                     || 'Billing Account ID' || v_res_billing_acc
                );

               pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
               (
                    in_session_id,
                    in_transaction_id,
                    v_res_billing_acc,
                    5146,
                    401,
                    io_action_outcome_id,
                    null,
                    v_policy_id,
                    in_action_object_id,
                    v_current_date_time
               );
         end;


     elsif in_native_command_name = 'OSBillingAcctTrxSetRefreshRecon' -- Refresh reconciliation roll-ups associated with a Billing Transaction Set.
     then

          pkg_db_reconciliation.sp_bill_trx_set_rec_refresh
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'OSBillingAcctTrxSetValidateRecon' -- Validate reconciliation roll-ups associated with a Billing Transaction Set.
     then

          pkg_db_reconciliation.sp_bill_trx_set_rec_validate
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'OSBillingReconRollupResolveConflict' -- Resove conflicts between roll-ups having same financials
     then

          pkg_db_reconciliation.sp_rollup_resolve_conflict
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'OSBillingAcctTrxSetRefreshReconAssociate' -- Associate selected Refresh reconciliation roll-ups associated with a Billing Transaction Set.
     then

          pkg_db_reconciliation.sp_associate_refresh_recon
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id
          );

/*     elsif in_native_command_name = 'OSBillingAcctTrxSetFITrxCreate' -- Create FITransaction Objects from ReconciliationRollup Objects
     then

          pkg_db_partner_recon.sp_bill_trx_set_fi_trx_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
            v_current_date_time
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;*/

     elsif in_native_command_name = 'OSPolicyTransactionInvoiceRollupCreate' -- Create Invoice Rollup Objects
     then

          pkg_db_stmt_policy.sp_policy_trx_invoice_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );

         -- io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     ----------------------------------BILLING CASHAPPLY----------------------------------------------

     elsif in_native_command_name = 'DBManualCashAppValidateCash'
     then

    pkg_db_cash_apply.sp_manualcashapp_validate_amt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,    -- BillingAccountTransactionSet
               in_object_cache,
               io_action_outcome_id
          );
















     elsif in_native_command_name = 'DBBillingAcctManualCashApplyTrxGenerate'
     then

           declare

               v_fitransaction_id       object.object_id%type;
               v_fitem_type_id          number;
               v_fitem_id               object.object_id%type;
               v_cash_fitem_id          object.object_id%type;
               v_fichange_list          pkg_os_object.t_object_list;
               v_index                  number;
               v_batch_type             number;

          begin

               v_batch_type   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        29707346
                                   );

               v_fitransaction_id := pkg_os_object_search.fn_child_object_get(in_session_id, in_transaction_id, in_action_object_id, 2365046, 29708346, 603);

               -- Get all fichange for fitransaction
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitransaction_id,
                    2365146,
                    v_fichange_list
               );

               v_index :=  v_fichange_list.first;

               while (v_index is not null)
               loop

                    v_fitem_id          :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_fichange_list(v_index),
                                                  29704046
                                             );

                    v_fitem_type_id     :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_fitem_id,
                                                  29710046
                                             );

                    if v_fitem_type_id = 246
                    then

                         v_cash_fitem_id := v_fitem_id;

                    end if;

                    v_index := v_fichange_list.next(v_index);

               end loop;

               if v_batch_type in (1001,601) -- Auto Cash Apply, Single Payment

               then

                    pkg_db_cash_apply.sp_manualcashapp_rollup_create
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,          -- BillingAccountTransactionSet
                         in_object_cache,
                         io_action_outcome_id,
                         v_current_date_time,
                         v_cash_fitem_id
                    );

               else

                    pkg_db_cash_apply.sp_manualcashapp_rollup_create
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,          -- BillingAccountTransactionSet
                         in_object_cache,
                         io_action_outcome_id
                    );

               end if;

          end;
     /**OSBILLING-931/930*/


     elsif in_native_command_name = 'DBBillingAcctTrxSetRollupCashApply'
     then

          pkg_db_cash_apply.sp_rollup_cash_apply
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSBillingSetMailFlag'
     then

          pkg_cs_db_billing.sp_set_mail_flag
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBSetPartnerRollupMemberAmount'
     then

          pkg_db_cash_apply.sp_manualcashapp_setrollupamt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
      v_current_date_time
          );

     elsif in_native_command_name = 'DBManualCashAppRefreshRollupBalance'
     then

          pkg_db_cash_apply.sp_manualcashapp_refresh_amt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,    -- BillingAccountTransactionSet
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'DBAgencyManualCashApply'
     then

       --OSBILLING-4271
          Pkg_Db_Cash_Apply.sp_rollup_cash_apply
        (
             in_session_id            =>        in_session_id,
             in_transaction_id        =>        in_transaction_id,
             in_billing_trx_set_id    =>        in_action_object_id,
             in_object_cache          =>        in_object_cache,
             io_action_outcome_id     =>   io_action_outcome_id,
             in_validate_tf            =>   'F'
        );

     elsif in_native_command_name = 'DBAgencySelectedItemsCashApply'
     then

          pkg_db_cash_apply.sp_selected_items_cash_apply
          (
                in_session_id,
                in_transaction_id,
                in_action_object_id,    -- BillingAccountTransactionSet
                in_object_cache,
                io_action_outcome_id

          );

  elsif in_native_command_name = 'DBBillingAccountCashApply' -- Billing Account view - Cash Apply
     then

          declare
               v_billing_acc_id     object.object_id%type;
    begin

               -- Get the parent Billing Account object id of BillingAccountTransactionSet object
               v_billing_acc_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

      pkg_db_cash_apply.sp_cashprof_apply_duetype
      (
        in_session_id,
        in_transaction_id,
        v_billing_acc_id,
        in_action_object_id,  --in_billing_trx_set_id
        io_action_outcome_id
      );

          end;


     elsif in_native_command_name = 'DBVanillaCashApply'
     then

          pkg_db_cash_apply.sp_vanilla_cash_apply
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBPolicyAutoCashApply'
     then    -- To be fixed, used in Nightly Process



          pkg_db_cash_apply.sp_policy_auto_cash_apply
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'DBCreateStatementProfile'
     then

          declare

               io_stmt_profile_object_id     object.object_id%type := null;

          begin

               pkg_db_stmt_profile.sp_create_statement_profile
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id,
                    io_stmt_profile_object_id
               );

          end;

     elsif in_native_command_name = 'DBPolicyTransactionInvoiceRollupCreate'
     then

          pkg_db_stmt_policy.sp_policy_trx_invoice_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'DBBillingGenerateInvoice'
     then

          pkg_db_stmt.sp_generate_invoice
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache,
               v_current_date_time
          );

--UTPRODUCT2-5  
     elsif in_native_command_name = 'DBdBilledAcctStmt'
     then
          declare

               v_billing_account_id     object.object_id%type;

          begin
               
               v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);
               pkg_db_stmt_account.sp_directbill_statement_create
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_account_id,
                    io_action_outcome_id,
                    in_action_object_id
               );
          
          end;
          
     --UTPRODUCT2-14
     elsif in_native_command_name = 'DBdBilledAdhocAcctStmt'
     then
         pkg_db_stmt_account.sp_adhoc_statement_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );
        
     elsif in_native_command_name = 'DBBillingGenerateAccountInvoice'
     then

          pkg_db_stmt_account.sp_acc_invoice_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );


     --UTPRODUCT-301
      elsif in_native_command_name = 'DBBillPlanGenerateCommoninvoice'
     then

          pkg_db_stmt_policy.sp_bill_plan_create_invoice --UTPRODUCT-1074
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );


     --OSBILLING-3307
     elsif in_native_command_name = 'DBBillingPartnerGenerateStatementDAP'
     then
          pkg_db_stmt_partner.sp_partner_stmt_create
          (
               in_session_id,
               in_transaction_id,


               in_action_object_id,-- billingaccounttrxset
               io_action_outcome_id
          );



   --Added for Agency statement processing (OSBILLING-607)
      elsif in_native_command_name = 'DBBillingPartnerProcessStatement'
     then

          pkg_db_stmt_partner.sp_partner_stmt_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

          );
     /*elsif in_native_command_name = 'CSBillingPartnerStatementAddTrx' ---'DBBillingPartnerStatementAddTrx'
     then

          pkg_db_partner_statement.sp_statement_add_rollup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );*/
     elsif in_native_command_name = 'DBBillingPartnerStatementAddTrx'
     then

          pkg_db_stmt_partner.sp_partner_account_stmt_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

          );

     elsif in_native_command_name = 'DBPolicyTrxNextInvoiceCreateDateSet'
     then

          pkg_db_stmt_date.sp_set_next_invoice_date
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
--AccBill
--OSBILLING-6669, commented below
     /*elsif in_native_command_name = 'DBAcctNextInvoiceCreateDateSet'
     then

          pkg_db_stmt_date.sp_set_acct_next_invc_date
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );*/
--AccBill
     elsif in_native_command_name = 'AdhocReceivable'
     then

          pkg_db_adhoc_journal.sp_create_adhoc_journal
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id ,
               v_current_date_time,
               io_action_outcome_id
           );

      elsif in_native_command_name = 'AdhocJournalReprocess'
      then

          pkg_db_adhoc_journal.sp_create_adhoc_reprocess
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id ,
               v_current_date_time,
               io_action_outcome_id
           );

     elsif in_native_command_name = 'DBBillingAccTrxSetNextInvoiceCreateDateSet'
     then

          pkg_db_stmt_account.sp_set_next_invoice_date_acc
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBPolicyTransactionAdhocInvoice'
     then

          pkg_db_stmt.sp_policy_trx_adhoc_invoice
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );


     elsif in_native_command_name = 'DBBillingAccountAdhocInvoice'
     then

          pkg_db_stmt.sp_billingacct_adhoc_invoice
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
     -- OSPRODUCT-23105 - Kiran
     elsif in_native_command_name = 'DBBATrxSetAdhocInvoiceTaskClose'
     then

          pkg_db_stmt.sp_billingacct_trxset_adhoc_task_close
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id               
          );
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
    -- OSPRODUCT-23105 - Kiran  
  ----------------------------------------------------------------------------------------------------------------


     elsif in_native_command_name = 'CSStoreAddressChange'
     then
        pkg_db_customer_portal.sp_log_address_activity
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCheckPlaceholder'
    then
        pkg_db_customer_portal.sp_check_placeholder
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSEmailCustomer'
    then
        pkg_db_customer_portal.sp_email_customer
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    -- this native command shall be removed after the demo.
    elsif in_native_command_name = 'CSCustomerPaymentProfilePlaceholderCreate'
    then
        pkg_db_customer_portal.sp_create_paymentprofile
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

elsif in_native_command_name = 'CSObjectUsageSetPrefProfile'
         then
        pkg_db_customer_portal.sp_set_pref_profile
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
                v_current_date_time
          );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
elsif in_native_command_name = 'CSObjectExpire'
    then
        pkg_db_customer_portal.sp_single_object_expire
        (
               in_session_id,
                in_transaction_id,
                in_action_id,
                in_action_object_id,
                io_action_outcome_id
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCheckEmailPlaceholder'
    then
        pkg_db_customer_portal.sp_check_email_placeholder
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCheckPhoneNumberPlaceholder'
    then
        pkg_db_customer_portal.sp_check_phnnmbr_placeholder
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

-------------------------------------------------------------
-- Begin Billing Integration Native Commands
-------------------------------------------------------------
     elsif in_native_command_name = 'DBPolicyWithdrawalSchedule'
     then

            pkg_db_auto_funds_transfer.sp_billacc_auto_withdrawal
            (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
            );

     elsif in_native_command_name = 'DBAutoFundsTransferTryCreate'
     then
          declare
             v_batch_posted_date     date := to_date
                                               (pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, 29707646 ),
                                                pkg_os_constant.DragonDateFormatDefault); --get Batch posted date as current date
          begin

            pkg_db_auto_funds_transfer.sp_auto_transfer_try_create
            (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_batch_posted_date, --sysdate,
               io_action_outcome_id
            );

          end;

     elsif in_native_command_name = 'DBAutoFundsTransferTryUpdate'
     then

          pkg_db_payment_gateway_upd.sp_db_response_upd
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
-------------------------------------------------------------
-- End Billing Integration Native Commands
-------------------------------------------------------------
-------------------------------------------------------------
-- Begin Billing Sheduled Disbursement Integration Native Commands
-------------------------------------------------------------
     elsif in_native_command_name = 'DBAutoDisbRequestTryCreate'
     then
       pkg_db_auto_funds_transfer.sp_auto_disbreqtry_create
       (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
       );

     elsif in_native_command_name = 'DBSchedDisbResponse'
     then
       pkg_db_auto_funds_transfer.sp_auto_disb_resp
       (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
     -- Arun OSPRODUCT-532 - Start    
     elsif in_native_command_name = 'DBAutoTryUpdateStatus'
     then

          pkg_db_auto_funds_transfer.sp_auto_try_update_status
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
      -- Arun OSPRODUCT-532 - End     
-------------------------------------------------------------
-- End Billing Sheduled Disbursement Integration Native Commands
-------------------------------------------------------------

elsif in_native_command_name = 'CSPaymentScheduleCreate'
      then

          pkg_db_payplan_modify.sp_restore_payment_schedule
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

--#MP
   elsif in_native_command_name = 'CSPaymentScheduleCreateForMultipayer'
     then
          declare
               v_ptp_payer_id            object.object_id%type := in_action_object_id;      -- Action object is PolicyTransactionPolicyPayer

               v_payer_entity_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_ptp_payer_id,
                                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                  );

               v_ptp_id                  object.object_id%type := pkg_os_object_search.fn_object_get_parent_of_type
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_ptp_payer_id,
                                                                       pkg_os_constant.gobjType_Policy
                                                                  );
          begin
               pkg_db_payplan_modify.sp_restore_payment_schedule
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id => v_ptp_id,
                    in_payer_entity_id  => v_payer_entity_id
               );

               pkg_db_payplan_modify.sp_payment_schedule_update
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id     => v_ptp_id,
                    in_payer_entity_id     => v_payer_entity_id,
                    io_action_outcome_id   => io_action_outcome_id
               );
          end;
--#MP
elsif in_native_command_name = 'CSCreateDisbursementProfPlaceholder'
    then

        pkg_db_profile.sp_create_disbprof_placeholder
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSSynchronizePaymentProfileUsage'
    then

        pkg_cs_profiles.sp_synchronize_ppu
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSReplacePPUWithCC'
     then

        pkg_cs_profiles.sp_replace_ppu_with_exist_prof
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             'CC',
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSReplacePPUWithEFT'
     then

        pkg_cs_profiles.sp_replace_ppu_with_exist_prof
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             'EFT',
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
      elsif in_native_command_name = 'CSReplacePPUWithNewCC'
     then

        pkg_cs_profiles.sp_replace_ppu_with_new_prof
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             'CC',
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

        elsif in_native_command_name = 'CSReplacePPUWithNewEFT'
     then

        pkg_cs_profiles.sp_replace_ppu_with_new_prof
        (
             in_session_id,
             in_transaction_id,
             in_action_object_id,
             'EFT',
             io_action_outcome_id
        ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCreateBrokerMultipleProfile'
    then

        /*declare
             io_stmt_profile_object_id     object.object_id%type := null;
             in_profile_type_id            object.object_id%type := 63; -- Broker object type
             in_is_it_customer_profile_tf  char :='F';
        begin

          pkg_cs_profiles.sp_create_multiple_profiles
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id, --Billing account
               in_profile_type_id,
               in_is_it_customer_profile_tf,
               io_action_outcome_id,
               io_stmt_profile_object_id
          );

        end;*/

          pkg_db_profiles.sp_partner_setup_new_profiles
             (
                  in_session_id,
                  in_transaction_id,
                  in_action_object_id,
                  io_action_outcome_id
             );


        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  elsif in_native_command_name = 'CSCreateDragonUserAdd'
     then

        pkg_db_profile.sp_check_add_placeholder
        (
             in_session_id,
             in_transaction_id    ,
             in_action_object_id  ,
             io_action_outcome_id
         ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreatePartnerrAdd'
     then

        pkg_db_profile.sp_check_partadd_placeholder
        (
             in_session_id,
             in_transaction_id    ,
             in_action_object_id  ,
             io_action_outcome_id
         ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
elsif in_native_command_name = 'CSCreatePartnerrEmail'
     then

        pkg_db_profile.sp_check_partemail_placeholder
        (
             in_session_id,
             in_transaction_id    ,
             in_action_object_id  ,
             io_action_outcome_id
         ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreateCustomerrAdd'
     then

        pkg_db_profile.sp_check_custadd_placeholder
        (
             in_session_id,
             in_transaction_id    ,
             in_action_object_id  ,
             io_action_outcome_id
         ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreateCustomerEntityRef'
     then

        pkg_db_profile.sp_display_deliveryprof_ba
        (
             in_session_id,
             in_transaction_id    ,
             in_action_object_id  ,
             io_action_outcome_id
         ) ;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
elsif in_native_command_name = 'CSDocDeliveryInstrctnCreate'
then

/* PKG_DB_PROFILE_TEST_INSTR.sp_set_doc_delivery_instrctn
(
     in_session_id ,
     in_transaction_id ,
     in_action_object_id ,
     io_action_outcome_id
);*/

             io_action_outcome_id := pkg_os_constant.gOutcome_OK;

elsif in_native_command_name = 'CSDocDeliveryInstrctnCreateNew'
then
 /*
 pkg_os_logging.sp_log
                     (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,

                          'in_action_object_id:'         || in_action_object_id);
 PKG_DB_PROFILE.sp_set_doc_delivery_instrctn
(
     in_session_id ,
     in_transaction_id ,
     in_action_object_id ,
     io_action_outcome_id
);
*/
             io_action_outcome_id := pkg_os_constant.gOutcome_OK;



     elsif in_native_command_name = 'CSObjectDocumentSendInvoice'
   then

               pkg_db_profile.sp_invoice_email_send
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSPartnerDeliveryProfleDefltSet'
   then

                pkg_db_profile.sp_create_delvry_pref
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_db_profile.gObjType_PDeliveryProfile,
                    pkg_db_profile.gbv_Refererence_entity_partner,
                    pkg_db_profile.gbv_PDelivery_Mode_Path,
                    pkg_db_profile.gbv_PDeliveryEmail_Mode_Path,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSDragonUserDeliveryProfleDefltSet'
   then

                pkg_db_profile.sp_create_delvry_pref
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_db_profile.gObjType_DUDeliveryProfile,
                    pkg_db_profile.gbv_Related_Entity_DragonUser,
                    pkg_db_profile.gbv_DU_DeliveryMail_Mode_Path,
                    pkg_db_profile.gbv_DU_Deliveryemail_Mode_Path,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSDeliveryProfileDefaultSet'
   then

               pkg_db_profile.sp_get_deliveryprofile_map
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCustomerEmailPlachldr'
   then

               pkg_db_profile.sp_check_custemail_placeholder
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;
elsif in_native_command_name = 'CSSetDefaultDelPref'
 then

          pkg_db_profile.sp_set_default_del_pref
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCreateNewDelProf'
  then

          pkg_db_profile.sp_create_new_del_pref
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCreateNewDocDelProf'
  then

          pkg_db_profile.sp_new_doc_delivery_profile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreateDeliveryModePlchldr'
   then

             pkg_db_profile.sp_create_del_mod_plchldr
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSPDPTransmuteToPolicy'
      then

          pkg_db_profile.sp_move_policydelpref_to_pol
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCustomerMulPayTrx'
     then
          pkg_db_cashpost.sp_create_fitrx_cust_mul_pay
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCustomerPayment'
     then
          pkg_db_cashpost.sp_verify_FItrx
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSPolicyImageModPaymentScheduleGenerate'
     then
          --OSBILLING-7831
          v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id
                                         ), v_current_date_time
                                    );

          pkg_db_payplan_modify.sp_payment_mod_sched_generate
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
      v_current_date_time,
      null
          );
     elsif in_native_command_name = 'CSPurgePaymentSchedule'
    then

    declare
     v_mod_payplan_id    object.object_id%type;
     v_payment_count     number;

    begin

          v_mod_payplan_id    :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        31906646
                                   );

          pkg_db_payplan_modify.sp_purge_scheduled_payments
          (
               in_session_id,
               in_transaction_id,
               v_mod_payplan_id,
               v_payment_count
          );

     end;
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSPolicyImageUpdatePaymentSchedule'
     then

          pkg_db_payplan_modify.sp_payment_schedule_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSPolicyImagePaymentScheduleUpdate'
     then

          pkg_db_payplan_modify.sp_payment_schedule_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
/*
     elsif in_native_command_name  = 'CSGBCreatePayplanSchedules'
     then

         pkg_db_payplan_modify.sp_gb_payment_schedules_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
*/

     elsif in_native_command_name  = 'DBPolicyImageCreateBillingAccounts'
     then

         pkg_db_object.sp_create_billing_accounts
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
          
          
     --UTPRODUCT2-3
          
     elsif in_native_command_name  = 'DBAddToAccountStatement'
     then

         pkg_db_stmt.sp_update_invoice_pref
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               2,
               io_action_outcome_id
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;          
          
     elsif in_native_command_name  = 'DBRemoveFromAccountStatement'
     then

         pkg_db_stmt.sp_update_invoice_pref
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               1,
               io_action_outcome_id
          );  
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;      
           
 elsif in_native_command_name = 'RefundDatamart'
     then
       declare
       v_session_control            pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name        constant system_log.program_name%type   :=   'test_datamart_update_refund_batch';
     v_object_list        pkg_os_object.t_object_list;


     v_target_BATRXSET_id object_type.object_type_id%type;
     V_target_FITransaction_id         object_type.object_type_id%type;
     v_FITransaction_id               object_type.object_type_id%type;
     v_datamart_tf                      char(1)                                 := 'T';
     v_current_date                     date    :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_action_object_id);
     v_fitem_id             object.object_id%type;

       begin
       io_action_outcome_id     :=     pkg_os_constant.gOutcome_OK;
       v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
          in_session_id,
          in_transaction_id,
          in_action_object_id, --in_session_id,
          2365046, --gObjectType_EOCSchedule,
          v_object_list
     );
     if v_object_list.count > 0 then

     for i in 1..v_object_list.count
       loop

         v_FITransaction_id := v_object_list(i);
         V_target_FITransaction_id :=pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                       in_transaction_id,
                                                                         v_FITransaction_id,
                                                                       32367876);
        v_target_BATRXSET_id:=pkg_os_object_search.fn_object_get_parent_of_type(
                                                                        in_session_id   ,
                                                                        in_transaction_id ,
                                                                        V_target_FITransaction_id   ,
                                                                        2365946
                                                                        )     ;



        pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_target_BATRXSET_id,pkg_db_object.gbv_BillAccTrxSet_ProcessDate,  to_char(v_current_date, pkg_os_constant.dragondateformatdefault ));

        pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id, V_target_FITransaction_id, pkg_os_constant_bv.gbv_GenObjObjectState, pkg_db_object.gfitrxstatus_processed);


        pkg_os_datamart.sp_datamart_update_row(1,1, v_target_BATRXSET_id , v_datamart_tf);
        pkg_os_datamart.sp_datamart_update_row(1,1, V_target_FITransaction_id , v_datamart_tf);
           if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '..............v_FITransaction_id '||v_FITransaction_id||
                                   '..............V_target_FITransaction_id '||V_target_FITransaction_id
                                   || '.............. v_target_BATRXSET_id '|| v_target_BATRXSET_id
                              );

                         end if;

     end loop;
      end if;
      end;
       io_action_outcome_id     :=     pkg_os_constant.gOutcome_OK;
		-- OSPRODUCT-7572
		elsif in_native_command_name = 'CSBillingAcctTrxSetReversalCancel'
		then
            
			declare
            
                 v_FITrxSetBatchType number := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id,29707346);
                 
			begin

				/*pkg_db_reverse_apply.sp_reverse_cash_apply
				(
					in_session_id,
					in_transaction_id,
					in_action_object_id,
					io_action_outcome_id,
					v_current_date_time
				);*/
				
				pkg_db_reversal.sp_transaction_reversal
				(
					in_session_id,
					in_transaction_id,
					in_action_object_id,
					io_action_outcome_id
				);

				pkg_db_reversal.sp_reversal_process
				(
					in_session_id,
					in_transaction_id,
					in_action_object_id,
					io_action_outcome_id
				);

				if v_FITrxSetBatchType = 2401
				then

					pkg_db_reverse_apply.sp_reverse_dependent_cashtxfr
					(

						in_session_id,
						in_transaction_id,
						in_action_object_id,
						io_action_outcome_id,
						v_current_date_time
					);

				end if;

			end;
     -- end -- OSPRODUCT-7572
     elsif in_native_command_name = 'CSBillingAcctTrxSetReversal'
     then
            
            declare
            
                    v_FITrxSetBatchType number := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id,29707346);
            begin

               pkg_db_reverse_apply.sp_reverse_cash_apply
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id,
                    v_current_date_time
               );

               if v_FITrxSetBatchType = 2401
               then

                    pkg_db_reverse_apply.sp_reverse_dependent_cashtxfr
                    (

                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,
                         io_action_outcome_id,
                         v_current_date_time
                    );

               end if;

          end;


     elsif in_native_command_name = 'CSPaymentCheckRelatedCashApply'
     then

          pkg_db_reversal.sp_check_related_applies
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSPaymentRelatedCashApplyReversal'
     then

          pkg_db_reversal.sp_reverse_pay_related_applies
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time

          );

     elsif in_native_command_name = 'CSPaymentDependentBatchesReversal'
     then

          pkg_db_reversal.sp_reverse_pay_dependencies
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time,
               'T'
          );

     elsif in_native_command_name = 'CSPaymentCheckDependentBatches'
     then

          pkg_db_reversal.sp_check_payment_dependencies
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSGetAppliedCashToPolicyMaps'
     then

          pkg_db_reversal.sp_get_affected_policies
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     elsif in_native_command_name = 'CSReversePayment'
     then

          pkg_db_reversal.sp_reverse_payment
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
elsif in_native_command_name = 'DBManualCreditAppValidateCredit'
   then

    pkg_db_credit_apply.sp_creditapp_validate_amt
      (
         in_session_id,
         in_transaction_id,
         in_action_object_id,          -- BillingAccountTransactionSet
         in_object_cache,
         io_action_outcome_id
      );
-- 2016-05-11  Cheryl osbilling-1734 - add credit apply to nightly process

elsif in_native_command_name = 'DBPolicyNPAutoCreditApply'
   then

    pkg_db_credit_apply.sp_policy_np_auto_credit_apply
      (
         in_session_id,
         in_transaction_id,
         in_action_object_id,         --policy id
         v_current_date_time,
         io_action_outcome_id
      );
      --OSBILLING-6873
      elsif in_native_command_name = 'DBBANPAutoCreditApply'
   then

    pkg_db_credit_apply.sp_ba_np_auto_credit_apply
      (
         in_session_id,
         in_transaction_id,
         in_action_object_id,         --policy id
         v_current_date_time,
         io_action_outcome_id
      );


  elsif in_native_command_name = 'DBBillingAcctManualCreditApplyTrxGenerate'
   then

    declare

      v_fitransaction_id       object.object_id%type;
      v_fitem_type_id          number;
      v_fitem_id               object.object_id%type;
      v_cash_fitem_id          object.object_id%type;
      v_fichange_list          pkg_os_object.t_object_list;
      v_index                  number;
      v_batch_type             number;

    begin

      v_batch_type   :=  pkg_os_object_io.fn_object_bv_get
                  (
                  in_session_id,
                  in_transaction_id,
                  in_action_object_id,
                  29707346
                  );

      v_fitransaction_id := pkg_os_object_search.fn_child_object_get(in_session_id, in_transaction_id, in_action_object_id, 2365046, 29708346, 603);

      -- Get all fichange for fitransaction
      pkg_os_object_search.sp_object_children_of_type_get
      (
        in_session_id,
        in_transaction_id,
        v_fitransaction_id,
        2365146,
        v_fichange_list
      );

      v_index :=  v_fichange_list.first;

      while (v_index is not null)
      loop

        v_fitem_id          :=   pkg_os_object_io.fn_object_bv_get
                     (
                        in_session_id,
                        in_transaction_id,
                        v_fichange_list(v_index),
                        29704046
                     );

        v_fitem_type_id     :=   pkg_os_object_io.fn_object_bv_get
                     (
                        in_session_id,
                        in_transaction_id,
                        v_fitem_id,
                        29710046
                     );

        if v_fitem_type_id = 246
        then

           v_cash_fitem_id := v_fitem_id;

        end if;

        v_index := v_fichange_list.next(v_index);

      end loop;
     if v_batch_type = 1001 -- Auto Cash Apply

    then

        pkg_db_cash_apply.sp_manualcashapp_rollup_create
        (
           in_session_id,
           in_transaction_id,
           in_action_object_id,          -- BillingAccountTransactionSet
           in_object_cache,
           io_action_outcome_id,
           v_current_date_time,
           v_cash_fitem_id
        );

      else

        pkg_db_credit_apply.sp_creditapp_rollup_create
        (
           in_session_id,
           in_transaction_id,
           in_action_object_id,          -- BillingAccountTransactionSet
           in_object_cache,
           io_action_outcome_id
        );

      end if;

    end;


   elsif in_native_command_name = 'DBBillingAcctManualApplyTrxGenerateCashPost'
     then

          pkg_db_cash_apply.sp_manualapp_cashpost_rollup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,          -- BillingAccountTransactionSet
               in_object_cache,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'CSBillingAcctTrxSetUpdateActionDelta'
     then

          pkg_cs_db_cash_apply.sp_updt_actiondlta
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,          -- BillingAccountTransactionSet
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     /*elsif in_native_command_name = 'CSBillingUpdateSubledger'
     then

          pkg_cs_db_cash_apply.sp_update_subledger_record
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,          -- BillingAccountTransactionSet or PolicyTransaction
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;*/

  elsif in_native_command_name = 'DBAutoCreditApply'
   then

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     --OSBILLING-6161 - Start
      declare
          v_ba_trx_id   object.object_id%type;
          v_action_object_type_id               object.object_id%type;

      begin
        v_action_object_type_id := pkg_os_object.fn_object_type_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        in_action_object_id
                                    );

         if v_action_object_type_id = pkg_db_object.gObjType_BillingAccountTrxSet
         then

              v_ba_trx_id := in_action_object_id;

          else
              v_ba_trx_id    :=   pkg_os_object_io.fn_object_bv_get
                                  (
                                     in_session_id,
                                     in_transaction_id,
                                     in_action_object_id,
                                     pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                  );
          end if;
           pkg_db_credit_apply.sp_auto_credit_apply
           (
             in_session_id,
             in_transaction_id,
             v_ba_trx_id,
             io_action_outcome_id
           );
      end;
--OSBILLING-6161 - end
--OSPRODUCT-2431 start
     elsif in_native_command_name = 'DBRewriteAutoCreditApply'
     then

          declare

--               v_policy_id                     object.object_id%type;
--               v_prior_policy_id               object.object_id%type;
               v_ba_trx_id                     object.object_id%type;
               v_prior_cancel_trans_id         object.object_id%type;    

          begin

--               v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

               /*v_prior_policy_id :=  pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               32651648   -- Policy - xReference - _Reference_BORd Policy 
                                          );*/   
--               v_prior_policy_id :=  pkg_os_object_io.fn_object_bv_path_get
--                                          (
--                                               in_session_id,
--                                               in_transaction_id,
--                                               v_policy_id,
--                                               '29606209.32656148'
--                                          );
--               v_prior_cancel_trans_id   :=  pkg_os_object_io.fn_object_bv_get
--                                          (
--                                               in_session_id,
--                                               in_transaction_id,
--                                               in_action_object_id,
--                                               22605205   -- Policy - xReference - _Reference_Last Transaction Processed
--                                          );   
--                                       
--               v_ba_trx_id    :=   pkg_os_object_io.fn_object_bv_get
--                                   (
--                                      in_session_id,
--                                      in_transaction_id,
--                                      v_prior_cancel_trans_id,
--                                      pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
--                                   );
--
--               pkg_db_credit_apply.sp_auto_credit_apply
--               (
--                    in_session_id,
--                    in_transaction_id,
--                    v_ba_trx_id,
--                    io_action_outcome_id
--               );

--               v_ba_trx_id    :=   pkg_os_object_io.fn_object_bv_get
--                                   (
--                                      in_session_id,
--                                      in_transaction_id,
--                                      in_action_object_id,
--                                      pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
--                                   );
--
--               pkg_db_credit_apply.sp_auto_credit_apply
--               (
--                    in_session_id,
--                    in_transaction_id,
--                    v_ba_trx_id,
--                    io_action_outcome_id
--               );

                                           v_ba_trx_id:=  pkg_os_object_io.fn_object_bv_path_get(
                                                                               in_session_id,
                                                                               in_transaction_id,
                                                                               in_action_object_id,
                                                                               --'29606209.32656148'
                                                                               '28555504.32752248.28555404.31866546');

                                               pkg_db_credit_apply.sp_auto_credit_apply(
                                                                                                                in_session_id,
                                                                                                                in_transaction_id,
                                                                                                                v_ba_trx_id,
                                                                                                                io_action_outcome_id
                                                                                                               );

                                               v_ba_trx_id    :=   pkg_os_object_io.fn_object_bv_get
                                                                   (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_action_object_id,
                                                                      pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                                   );

                                                --Call auto credit apply for re-write
                                               pkg_db_credit_apply.sp_auto_credit_apply
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_ba_trx_id,
                                                    io_action_outcome_id
                                               );

          end;
--OSPRODUCT-2431 end
  elsif in_native_command_name = 'DBBillingAcctTrxSetRollupCreditApply'
  then

    pkg_db_credit_apply.sp_rollup_credit_apply
    (
       in_session_id,
       in_transaction_id,
       in_action_object_id,
       in_object_cache,
       io_action_outcome_id,
       v_current_date_time
    );
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  elsif in_native_command_name = 'DBBillingAcctTrxSetReconCreditApply'
  then

    pkg_db_credit_apply.sp_agencyrecon_credit_apply
    (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          v_current_date_time
    );

 elsif in_native_command_name = 'DBBillingManualCashSpread'
     then

          PKG_DB_CASH_APPLY.sp_ManualCashSpread
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

  elsif in_native_command_name = 'DBBillingCashSpreadClearAll'
     then

          PKG_DB_CASH_APPLY.sp_cashspread_clearAll
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

 elsif in_native_command_name = 'DBBillingManualSpreadBalance'
     then

          PKG_DB_CASH_APPLY.sp_manualspreadbalance
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

 elsif in_native_command_name = 'DBBillingAutoCashDefaultSpread'
     then

      PKG_DB_CASH_APPLY.sp_autodefaultspread
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );


 elsif in_native_command_name = 'DBBillingAutoSpreadBalance'
     then

          PKG_DB_CASH_APPLY.sp_autospreadbalance
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

  elsif in_native_command_name = 'DBReconCreditSelectedDelete'
  then

    pkg_db_credit_apply.sp_selected_credits_clear
    (
          in_session_id,
          in_transaction_id,
          in_action_object_id

    );
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  elsif in_native_command_name = 'DBBillingAcctTrxSetReconPolicyCreditApply'
  then

        pkg_db_credit_apply.sp_auto_credit_apply
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
         );

    elsif in_native_command_name = 'CSSetPartnerRollupMemberAmount' then

      pkg_db_cash_apply.sp_manualcashapp_setrollupamt
      (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          v_current_date_time
      );

     elsif in_native_command_name = 'DBDeclineDisbursement'
   then

    PKG_DB_BILLING_PAYABLE.sp_decline_disbursement
    (
       in_session_id,
       in_transaction_id,
       in_action_object_id,
       io_action_outcome_id
    );
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'DBDeclineDisbursement'
   then

    PKG_DB_BILLING_PAYABLE.sp_decline_disbursement
    (
       in_session_id,
       in_transaction_id,
       in_action_object_id,
       io_action_outcome_id
    );
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
       
     elsif in_native_command_name = 'CSSetProfileToActivePolicies'
     then
        pkg_cs_profiles.sp_set_prfl_to_active_policies
        (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
        );
     elsif in_native_command_name = 'DBBillingAcctTrxSetAssignAssociatedPolicy'
     then
          pkg_db_auto_funds_transfer.sp_get_associated_policy
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id          -- BillingAccountTransactionSet
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
       --OSBILLING-764 starts



       elsif in_native_command_name = 'CSBillingReconRollupsCreate' -- Create reconciliation roll-ups associated with a Billing Transaction Set.
     then

          pkg_db_reconciliation.sp_bill_trx_set_rec_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
       -- osbilling-906 Cheryl  2016-04-08
/*       elsif in_native_command_name = 'DBBillingFitemAgingStatusUpdate' -- updates the aging status for each fitem
         then

          pkg_db_nightly_process.sp_financial_aging_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;  */

      -- OSBILLING-2155 avlasov 04/28/2016
      elsif in_native_command_name = 'DBPolicyAgingStatusUpdate'
      then
        pkg_db_nightly_process.sp_update_aging_status
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               null,                  --OSPRODUCT-13562
               null,                  --OSPRODUCT-13562
               io_action_outcome_id   --OSPRODUCT-13562
          );
        --io_action_outcome_id := pkg_os_constant.gOutcome_OK;    --OSPRODUCT-13562

         elsif in_native_command_name = 'DBPolicyCashCreditApply'
     then

          pkg_db_credit_apply.sp_policy_np_credit_handling
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,
               io_action_outcome_id
          );
        elsif in_native_command_name = 'CSAssociateCash'
     then

          pkg_db_reconciliation.sp_associate_cash_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache,
               v_current_date_time
          );
        elsif in_native_command_name = 'CSAssociateCashToRecon'
     then

          pkg_db_reconciliation.sp_associate_cash_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache,
               v_current_date_time,
               'T'
          );

     elsif in_native_command_name = 'CSReconStatementReconcilable'
     then

          pkg_db_reconciliation.sp_statement_reconcilable
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );


     elsif in_native_command_name = 'CSReconRollupMemberReconcilable'
     then

          pkg_db_reconciliation.sp_rollup_member_reconcilable
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSReconResetAmount'
     then

          pkg_db_reconciliation.sp_reset_rollup_amount
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );

     --OSBILLING-829
      elsif in_native_command_name = 'DBAgencyReconAddTransaction'
      then
              pkg_db_reconciliation.sp_add_selected_transactions
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,          -- AgencyReconcialliationrollup Object
                    in_object_cache,
                    io_action_outcome_id
               );

     elsif in_native_command_name = 'DBAgencyReconPayAmount'
     then

          pkg_db_reconciliation.sp_set_agent_amount
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
       --OSBILLING-764 ends

       elsif in_native_command_name = 'DBAgencyReconSetReference'
      then
              pkg_db_reconciliation.sp_set_ref_to_null
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id

                );
               io_action_outcome_id := pkg_os_constant.gOutcome_OK;
           --OSPRODUCT-397
     elsif in_native_command_name='DBUpdPrtnrReconRollupDatamart' then
     
             PKG_DB_RECONCILIATION.sp_update_PartnerReconRollup
              ( 
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id
             );
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     --OSBILLING-400 starts
     elsif in_native_command_name  = 'DBSearchCreateGL'
     then

      pkg_db_gl_transaction.sp_search_gl_entries
      (
          in_session_id,
          in_transaction_id,
          in_action_object_id
      );
      -- ADDED BY Kdubin
      -- reason : ... Error acquiring next action - Completed action: 1144446 Outcome:41 Exchange:1218 State:39846 Actor:8205 Context Action:983846 Context Object:92602499556
      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      elsif in_native_command_name  = 'CSPolicyTrxGLCreate'
      then

        pkg_db_gl_transaction.sp_policy_transaction_gl
        (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id

        );
        --OSBILLING-400 ends

        elsif in_native_command_name  = 'DBIdentifyUnBookedTransaction'
      then

       pkg_db_reconciliation.sp_identify_unbooked_trxs
        (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id

        );
      elsif in_native_command_name  = 'DBAddToUnBookedTransaction'
      then

                pkg_db_reconciliation.sp_add_selected_transactions
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,          -- AgencyReconcialliationrollup Object
                    in_object_cache,
                    io_action_outcome_id,
                    'T'
               );
      elsif in_native_command_name  = 'DBAgentTaskCreate'
      then

                pkg_db_reconciliation.sp_create_agent_task
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id ,         -- AgencyReconcialliationrollup Object
                    io_action_outcome_id
               );
      elsif in_native_command_name  = 'DBAgentTaskClose'
      then

              pkg_db_reconciliation.sp_agent_task_close
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id ,         -- AgencyReconcialliationrollup Object
                    io_action_outcome_id
               );

     elsif in_native_command_name = 'DBPolicyNOICBatchCreate'
     then
       -- OSBILLING-2860
/*
          declare
               v_policy_id         object.object_id%type    :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

          begin
               pkg_db_late_process.sp_noic_batch_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_policy_id,
                    io_action_outcome_id
               );*/


          declare
               v_policy_id         object.object_id%type                        := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);
  -- 2017-01-25 Cheryl osbilling-3588
               v_res_billing_acc   object.object_id%type    := pkg_os_object_io.fn_object_bv_get
                         (in_session_id,in_transaction_id,v_policy_id,gbv_responsible_billingacct_id );


          begin
            pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| XXX Policy Transaction ID '||in_action_object_id
               ||' v_policy_id'||v_policy_id
               || 'Billing Account ID' || v_res_billing_acc
          );
               pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
               (
                    in_session_id,
                    in_transaction_id,
                    v_res_billing_acc,
                    4212,
                    401,
                    io_action_outcome_id,
                    null,

                    v_policy_id,
                    in_action_object_id,
                    v_current_date_time
               );
          end;

     elsif in_native_command_name = 'DBPolicyRescindNOICBatchCreate'
     then

          declare
               v_policy_id         object.object_id%type    :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

          begin
               pkg_db_late_process.sp_rescind_noic_batch_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_policy_id,
                    io_action_outcome_id
               );
          end;

     elsif in_native_command_name = 'DBPolicyAutoCancelHold'
     then

          pkg_db_late_process.sp_policy_auto_cancel_hold
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBPolicyAutoCancelHoldRemove'
     then

          pkg_db_late_process.sp_pol_auto_cancel_hold_remove
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id
          );


      elsif in_native_command_name = 'DBFitrxDeleteCheck'
      then
          pkg_db_billing_payable.sp_delete_fitrx_check
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );

      --OSBILLING-7263 start
      elsif in_native_command_name = 'DBdiscardBillAccTrxSet'
      then

          pkg_db_billing_payable.sp_discard_billacctrxset
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );
      --OSBILLING-7263 end

      elsif in_native_command_name = 'LFBillingAccCreate'
      then
          pkg_base_life_billing.sp_create_billing_accounts
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

           );
    elsif in_native_command_name = 'CSLFPolicyTrxFinancialTrxGenerate'
     then
          declare
               v_billing_account_id object.object_id%type;
               v_master_policy_id   object.object_id%type;
          begin
               v_master_policy_id            :=   pkg_os_object_search.fn_object_get_parent_of_type
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  pkg_os_constant.gObjType_Policy
                                             );

              v_billing_account_id   :=      pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_master_policy_id,
                                                  32666846
                                             );
              --OSBILLING-7829
              v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id
                                         ), v_current_date_time
                                    );
               --
               -- call pkg_db_billing_modify.sp_financial_trx_create to generate Batch, FITrx, FIChange and FItem objects.
               --
               pkg_db_billing_modify.sp_financial_trx_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id,
                    v_current_date_time,
                    v_billing_account_id
               );
          end;


     elsif in_native_command_name = 'CSPaymentWithdrawalUpdate'
      then

          pkg_db_payplan_modify.sp_payment_withdrawal_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


       elsif in_native_command_name = 'DBPaymentWithdrawalReset'
      then

          declare
               v_policy_image_id   object.object_id%type;
          begin
               v_policy_image_id            :=  pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  pkg_db_payplan_modify.gbv_PolicyTrxRefCoverages
                                             );

               pkg_cs_db_payplan.sp_set_schd_withdraw_date
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_image_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          end;
      elsif in_native_command_name = 'CSPaymentWithdrawalProcess'
      then

          pkg_db_payplan_modify.sp_payment_withdrawal_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               'T'
          );

          io_action_outcome_id := pkg_os_constant.goutcome_ok;

      elsif in_native_command_name = 'CSBAPaymentWithdrawalUpdate'
      then

          pkg_db_payplan_modify.sp_ba_payment_withdrawal_upd
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
			   io_message_list, --OSPRODUCT-30875
               io_action_outcome_id
          );

      /*elsif in_native_command_name = 'CSBAChangePayPlanInitiate'
      then

          pkg_db_payplan_modify.sp_ba_change_payplan_init
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_action_outcome_id
          );*/

      elsif in_native_command_name = 'DBBAChangePayPlanProcess'
      then

          pkg_db_payplan_modify.sp_ba_change_payplan_process
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_message_list, /*OSPRODUCT-3877*/
               io_action_outcome_id
          );

      elsif in_native_command_name = 'DBCopyAccountPayplan'
      then

          pkg_db_payplan_modify.sp_copy_account_payplan
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_action_outcome_id
          );


      elsif in_native_command_name = 'DBBAChangePayPlanTrxSetup'
     then

          pkg_db_payplan_modify.sp_ba_change_payplan_trx_setup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_message_list,
               io_action_outcome_id
          );


     -- Initiate the account level change pay plan transaction
     elsif in_native_command_name = 'DBBAChangePayPlanInitiate'
     then

          declare

               v_policy_object_list             pkg_os_token.t_string_table;

               v_billing_account_id             object.object_id%type;
               v_selected_policy                object_bv_value.business_variable_value%type;

          begin

               v_billing_account_id := pkg_os_object.fn_object_parent_get
                                      (
                                            in_session_id,
                                            in_transaction_id,
                                            in_action_object_id
                                      );

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Billing Account ' || v_billing_account_id
               );

               v_selected_policy := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_billing_account_id,
                                          34228046 -- List Selected Objects
                                     );

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'v_selected_policy ' || v_selected_policy
               );

               pkg_os_token.sp_tokenize_string(v_selected_policy, ',' , v_policy_object_list);

               pkg_db_payplan_modify.sp_ba_change_payplan_init
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_policy_object_list,
                    in_object_cache,
                    io_message_list, /*OSPRODUCT-3877*/
                    io_action_outcome_id
               );

          end;

     elsif in_native_command_name = 'CSBAPaymentWithdrawalProcess'
     then

          pkg_db_payplan_modify.sp_ba_pmnt_withdrawal_process
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_action_outcome_id
          );

      elsif in_native_command_name = 'CSBAPaymentWithdrawalExit'
      then

          pkg_db_payplan_modify.sp_ba_pmnt_withdrawal_exit
          (
               in_session_id,
               in_transaction_id ,
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      elsif in_native_command_name = 'DBFundsReceiptImportObjectTransform'
      then

          pkg_db_auto_funds_transfer.sp_import_funds_receipt
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               io_message_list,
               in_action_id,
               in_action_object_id,
               io_action_outcome_id
          );

      elsif in_native_command_name = 'DBBillingAutoInitialSpread'
      then

          declare
               v_cash_fitem_id          object.object_id%type;
          begin

                    v_cash_fitem_id          :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  31758246
                                             );


                    pkg_db_cash_apply.sp_autoapply_initial_spread
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,          -- BillingAccountTransactionSet
                         io_action_outcome_id,
                         null,
                         v_cash_fitem_id
                    );

          end;

      elsif in_native_command_name = 'DBBillingAcctInstallCreate'
      then

         pkg_db_billing_modify.sp_billaccinstallment_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );


     -- GCNA -1260 New native command implemented for Refreshing Rollups
     elsif in_native_command_name = 'OSRefreshCustomerRollups'

     then

          pkg_db_cash_apply.sp_man_cashapp_refresh_rollups
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     -- GCNA -1260 Checking Available Balance for Billing Txn Set Batch
     elsif in_native_command_name = 'OSCheckAvailableAmount'
     then

          pkg_db_cash_apply.sp_check_available_amount
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
     elsif in_native_command_name = 'DBFbBatchControlUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_control_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBSchedResponseFailure'
     then
          declare
             v_batch_posted_date     date := to_date
                                               (pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, 29707646 ),
                                                pkg_os_constant.dragondateformatdefault); --get Batch posted date as current date
          begin

          pkg_db_auto_funds_transfer.sp_auto_withdraw_failure
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_current_date_time,--v_batch_posted_date,
               io_action_outcome_id
          );

          end;

      elsif in_native_command_name = 'DBAgencyReconExclude'
      then

          pkg_db_reconciliation.sp_exclude_recon_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

      elsif in_native_command_name = 'DBReconExcludeRemain'
      then

          pkg_db_reconciliation.sp_exclude_remain_recon_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

      elsif in_native_command_name = 'DBAgencyReconValidateSelection'
      then

          pkg_db_reconciliation.sp_validate_selected_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );

      elsif in_native_command_name = 'DBBillngAcctSuspenseDisbursmntItemValidate'
      then

          pkg_db_billing_payable.sp_suspense_disbrs_item_search
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );
     elsif in_native_command_name = 'DBBillingAcctSuspenseDisbursmntFiTrxCreate'
     then
          pkg_db_billing_payable.sp_suspense_disbrs_trx_create
          (
              in_session_id,
              in_transaction_id,
              in_billAccTRXset_id       => in_action_object_id,
              in_object_cache           => in_object_cache,
              io_action_outcome_id      => io_action_outcome_id
           );


     elsif in_native_command_name = 'DBAssociatedBaTrxSetGet'
     then

          --pkg_db_reversal_kr_wip.sp_transaction_reversal
          pkg_db_reversal.sp_transaction_reversal
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBReversalProcess'
     then

          --pkg_db_reversal_kr_wip.sp_reversal_process
          pkg_db_reversal.sp_reversal_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBDishReversalProcess'
     then

          --pkg_db_reversal_kr_wip.sp_reversal_process
          pkg_db_reversal.sp_reversal_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time,
               'T' -- Dish
          );

     elsif in_native_command_name = 'DBPolicyPayableEarning'
     then          --OSPRODUCT-6139 starts
          
 
                    pkg_db_billing_payable.sp_set_payables_wrapper
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,
                         io_action_outcome_id
                    );
             
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
          
     elsif in_native_command_name = 'DBBillingAccountAgingUpdate'
     then

          pkg_db_nightly_process.sp_agent_update_aging_status
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBOnDemandBillingAccountDAP'
     then
         pkg_os_dap.sp_prepare_dap_job_submission
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               io_message_list,
               io_action_outcome_id,
               1292046,
               in_action_object_id
          );

            io_action_outcome_id := pkg_os_constant.goutcome_ok;

     elsif in_native_command_name = 'DBBillingAccountAsyncDatamartUpdate'
     then
          pkg_db_object.sp_async_ba_datamart_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
           elsif in_native_command_name = 'DBGBAssetItemCreate'
     then

          PKG_DB_OBJECT.sp_GbAssetItem_Create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id

          );
           io_action_outcome_id := pkg_os_constant.goutcome_ok;


     elsif in_native_command_name = 'DBFundsReceiptProcessObjectTransform'
     then

          pkg_db_auto_funds_transfer.sp_funds_receipt_process
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               io_message_list,
               in_action_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBPaymentBatchProcess'
     then

          pkg_db_cashpost.sp_fitrx_payment_batch_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache
          );

     elsif in_native_command_name = 'DBAccountRollUpGenerate'
     then

           --OSBILLING-3232
           pkg_db_stmt_acct_rollup.sp_account_rollup_stmt
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id
           );

     elsif in_native_command_name = 'DBPolicyStatutoryAgeing'
     then

           --OSBILLING-3232
          pkg_db_statutory_ageing.sp_policy_statutory_ageing
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id
           );
           io_action_outcome_id := pkg_os_constant.goutcome_ok;

     elsif in_native_command_name = 'DBPartnerStatutoryAgeing'
     then

           --OSBILLING-3232
          pkg_db_statutory_ageing.sp_partner_statutory_ageing
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id
           );
           io_action_outcome_id := pkg_os_constant.goutcome_ok;

     elsif in_native_command_name = 'DBCustomerStatutoryAgeing'
     then

           --OSBILLING-3232
          pkg_db_statutory_ageing.sp_accnt_cash_stat_ageing
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id

           );
           io_action_outcome_id := pkg_os_constant.goutcome_ok;

     elsif in_native_command_name = 'DBBatchPaymentProcess'
     then

                pkg_db_cashpost.sp_batch_payment_process
                (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id,
                    in_object_cache

                );

     elsif in_native_command_name = 'DBValidateCommissionAttributes'
     then

          pkg_db_payplan_modify.sp_validate_comm_attribute
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

     elsif in_native_command_name = 'DBModifyCommissionElements'
     then

          pkg_db_payplan_modify.sp_modify_comm_elements
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
     -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'CSPTPPayerPaymentScheduleCreate'
     then
            --VAULTDEV-6645
          declare
               v_chosen_payment_plan_id        object.object_id%type;
               v_modified_payment_plan_id      object.object_id%type;
               v_policy_image_id               object.object_id%type;
               v_policy_transaction_id         object.object_id%type;
               v_modifying_payment_plan        char(1);
               v_payment_plan_id               object.object_id%type;
               v_new_term                      number;
               v_transaction_type_id           number;
          begin
                v_chosen_payment_plan_id :=  pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id, -- expect this to be a PolicyTransactionPolicyPayer
                                                  PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_ChosenPayPlan
                                             );

                v_modified_payment_plan_id :=  pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id, -- expect this to be a PolicyTransactionPolicyPayer
                                                  32967024
                                             );

                v_policy_image_id        := pkg_os_object.fn_object_parent_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_action_object_id    -- expect this to be a PolicyTransactionPolicyPayer
                                            );

               --OSPRODUCT-2424
                v_policy_transaction_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_policy_image_id );
                v_transaction_type_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
                v_new_term := pkg_db_payplan_modify.fn_trx_starts_new_term(v_transaction_type_id);                    

               if v_modified_payment_plan_id is null or v_chosen_payment_plan_id = v_modified_payment_plan_id
               then
                    --
                    --   Either I'm generating a payment plan for the first time, or I have not changed the payment plan ...
                    --

                    v_modifying_payment_plan := 'F';
                    v_payment_plan_id := v_chosen_payment_plan_id;
                    v_policy_transaction_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_policy_image_id );
                    v_transaction_type_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
                    --OSPRODUCT-2424
                    --v_new_term := pkg_db_payplan_modify.fn_trx_starts_new_term(v_transaction_type_id);                    
               else
                    v_modifying_payment_plan := 'T';
                    v_payment_plan_id := v_modified_payment_plan_id;
                    --OSPRODUCT-2424
                    --v_new_term := pkg_os_constant.gBoolean_True;

               end if;
               --OSBILLING-7831
               v_current_date_time := nvl(
                                              pkg_db_functions.fn_get_processed_date
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_policy_image_id -- PRODUCT-3926
                                              ), v_current_date_time
                                         );
               -- utproduct-3925                          
               if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
                         
               then
                    v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                             (
                                                                  in_session_id,
                                                                  in_transaction_id,
                                                                 in_action_object_id,
                                                                 pkg_db_constant.gbv_payer_process_date
                                                             ),pkg_os_constant.DragonDateFormatDefault);  
                    if v_current_payer_date_time is not null
                         then
                            v_current_date_time :=  v_current_payer_date_time;
                    end if;  
                                                    
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_current_date_time on PTPPayer:'||in_action_object_id
                    ||' HC: is : '||v_current_date_time
               );                                                                        
                                                                            
               end if;                           
               if v_modifying_payment_plan = 'F' then
                    pkg_db_payplan_modify.sp_restore_payment_schedule
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_image_id,
                         in_action_object_id
                    );                  
               end if;

               pkg_db_payplan_modify.sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_image_id,
                    v_new_term,
                    v_payment_plan_id ,
                    v_current_date_time,
                    null,
                    in_change_payplan=> v_modifying_payment_plan,
                    io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          end;
     -------------------------------------------------------------------------------------------
     --OSPRODUCT-2567
     elsif in_native_command_name = 'DBPTPPayerPaymentScheduleCreate'
     then
           PKG_DB_MULTIPAYER.sp_ptp_payer_payment_schedule_create
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id
           );
     -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBPolicyImageCreatePayers' -- #MP
     then
          PKG_DB_MULTIPAYER.sp_policy_image_payer_create
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,  -- expect this to be a PolicyTransactionPolicy
               io_action_outcome_id
          );
     -------------------------------------------------------------------------------------------
     -- OSPRODUCT-18769
     elsif in_native_command_name = 'DBChangePayerTypeFailure' -- #MP
     then
          PKG_DB_MULTIPAYER.sp_change_payer_type_failure
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );          
      -------------------------------------------------------------------------------------------
      elsif in_native_command_name = 'DBPolicyTermCreatePayers' -- #MP
      then
           PKG_DB_MULTIPAYER.sp_policy_term_payer_create
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,  -- expect this to be a PolicyTerm
                io_action_outcome_id
           );
      -------------------------------------------------------------------------------------------

      elsif in_native_command_name = 'CSMultipayerDefaultSpreadStub' -- OSBILLING-5145
      then
         Pkg_Cs_Db_Payplan.sp_update_default_spread_stub
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
     -------------------------------------------------------------------------------------------


     elsif in_native_command_name = 'DBBillingGenerateInvoiceForMultipayer' -- #MP
     then

          pkg_db_multipayer_stmt.sp_invoice_generate_mp
          (
               in_session_id,
               in_transaction_id,
               in_policy_id          => in_action_object_id,
               io_action_outcome_id  => io_action_outcome_id
          );
      -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBPolicyPayableEarningForMultipayer'   -- #MP
     then
          declare
               v_policy_term_payer_id    object.object_id%type := in_action_object_id;

               v_policy_id               object.object_id%type := pkg_os_object_search.fn_object_get_parent_of_type
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_policy_term_payer_id,
                                                                       pkg_os_constant.gobjType_Policy
                                                                  );
          begin
               pkg_db_billing_payable.sp_set_payables_amount
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_id               => v_policy_id,
                   -- in_booking_process_tf      => 'F', --OSPRODUCT-2085
                   -- in_invoicing_process_tf    => 'T', --OSPRODUCT-2085
                   -- in_clerance_process_tf     => 'T', --OSPRODUCT-2085
                    io_action_outcome_id       => io_action_outcome_id,
                    in_policy_transaction_id   => null,
                    in_billingacounttrxset_id  => null,
                    in_policy_term_payer_id    => v_policy_term_payer_id
               );
          end;
      -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBPolicyStatutoryAgeingForMultipayer' -- #MP
     then
          declare
               v_policy_term_payer_id    object.object_id%type := in_action_object_id;

               v_payer_entity_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_policy_term_payer_id,
                                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                  );

               v_policy_id               object.object_id%type := pkg_os_object_search.fn_object_get_parent_of_type
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_policy_term_payer_id,
                                                                       pkg_os_constant.gobjType_Policy
                                                                  );
          begin
                pkg_db_statutory_ageing.sp_policy_statutory_ageing
                (
                     in_session_id,
                     in_transaction_id,
                     in_policy_id               => v_policy_id,
                     io_action_outcome_id       => io_action_outcome_id,
                     in_current_date_time       => null,

                     in_payer_entity_id         => v_payer_entity_id
                );

                io_action_outcome_id := pkg_os_constant.goutcome_ok;
          end;
      -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'CSPolicyAutoDisbursementForMultipayer' -- #MP
     then
          declare
              v_policy_term_payer_id    object.object_id%type := in_action_object_id;

               v_payer_entity_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_policy_term_payer_id,
                                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                  );

               v_policy_id               object.object_id%type := pkg_os_object_search.fn_object_get_parent_of_type
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_policy_term_payer_id,
                                                                       pkg_os_constant.gobjType_Policy
                                                                  );
                                                                  
               -- OSPRODUCT-3575
               v_payer_billingaccount_id object.object_id%type; 
               -- #MP
               v_payer_rec                        pkg_db_multipayer.r_payer;
               v_inv_multipayer_mode              boolean;
               v_policy_term_id                   object.object_id%type;
               -- /#MP
               -- OSPRODUCT-3575 
                                                             
          begin
               -- OSPRODUCT-3575
               v_policy_term_id   := pkg_db_functions.fn_get_policy_current_term
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id
                                        );
          
               PKG_DB_MULTIPAYER.sp_payer_validate
               (
                    in_session_id,
                    in_transaction_id,
                    in_payer_entity_id       => v_payer_entity_id,
                    io_payer_rec             => v_payer_rec,                  -- the payer recored will be taken from Policy Term.
                    io_inv_multipayer_mode   => v_inv_multipayer_mode,
                    in_policy_id             => v_policy_id,
                    in_policy_term_id        => v_policy_term_id
               );
               
               if v_inv_multipayer_mode
               then
                    -- Multi payer specific logic
                    --
                    v_payer_billingaccount_id := v_payer_rec.PayerBillingAccount_id;
                                   
               end if;
               -- OSPRODUCT-3575                                       
                                   
               if v_payer_billingaccount_id is not null -- OSPRODUCT-3575
               then  
               
                    pkg_db_billing_payable.sp_auto_disburse_policy

                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_id            => v_policy_id,
                         in_current_date_time    => v_current_date_time,
                         in_object_cache         => in_object_cache,
                         io_action_outcome_id    => io_action_outcome_id,
                         in_payer_bilingAccount_id    => v_payer_billingaccount_id -- OSPRODUCT-3575
                    );
                
               end if;  -- OSPRODUCT-3575   
          end;
      -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBOnDemandPolicyPTDSeTDAP'  -- DDWIDEV-222
     then
         pkg_os_dap.sp_prepare_dap_job_submission
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               io_message_list,
               io_action_outcome_id,
               1079532,                   -- AL_ScheduledPolicyPaidThroughDateSet_Job
               in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.goutcome_ok;

      elsif in_native_command_name = 'DBPolImageMonthlyPaymentScheduleCreate'  -- DDWIDEV-222
      then
          pkg_cs_db_payplan.sp_monthly_schedule_create
           (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
            );

            io_action_outcome_id := pkg_os_constant.goutcome_ok;
     elsif in_native_command_name = 'DBPolicyPaidThroughDateSet' -- DDWIDEV-222
     then
          pkg_cs_db_billing.sp_policy_paid_thru_date_set
           (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
            );
            io_action_outcome_id := pkg_os_constant.goutcome_ok;
      -------------------------------------------------------------------------------------------
 --2017-11-16 Cheryl osbilling-3633 - update datamart
      elsif in_native_command_name = 'DBBillingAccountPolicyDatamart'
      then
       declare
          v_session_control                 pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
          v_procedure_name                  constant system_log.program_name%type   :=   'datamart_BA_Policy';
          v_object_list                     pkg_os_object.t_object_list;

          v_target_BillingAccount_id        object_type.object_type_id%type;
          v_Policy_id                       object_type.object_type_id%type;
          v_datamart_tf                     char(1)                                 := 'T';
          v_Customer_id                     object.object_id%type;

          begin

            v_target_BillingAccount_id := pkg_os_object_search.fn_object_11_child_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id, -- pases in customer entity type 205
                                             gObjType_BillingAccount
                                        )  ;
             pkg_os_datamart.sp_datamart_update_row
             (in_session_id,
             in_transaction_id,
             v_target_BillingAccount_id ,
             v_datamart_tf
             );

             if v_session_control.gLogging_Full
             then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..............Updated Billing account datamart '||v_target_BillingAccount_id
                    );

             end if;


             v_object_list.delete;
             v_Customer_id := pkg_os_object.fn_object_parent_get
                                            (in_session_id,
                                            in_transaction_id,
                                            in_action_object_id);

             pkg_os_object_search.sp_object_children_of_type_get
             (
             in_session_id,
             in_transaction_id,
             v_Customer_id,
             gObjType_Policy,
             v_object_list
             );

             if v_object_list.count > 0 then

               for i in 1..v_object_list.count
                 loop

                   v_Policy_id := v_object_list(i);

                   pkg_os_datamart.sp_datamart_update_row
                   (in_session_id,
                   in_transaction_id,
                   v_Policy_id ,
                   v_datamart_tf
                   );

                   if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..............Updated policy datamart '||v_Policy_id
                         );

                   end if;

               end loop;
            end if;
         end;
            io_action_outcome_id     :=     pkg_os_constant.gOutcome_OK;

        elsif in_native_command_name = 'DBReconStatementDiscard'--OSBILLING-4389
        then


          pkg_db_cashpost.sp_trx_delete_recon_stmt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               1201,
               io_action_outcome_id,
               in_action_object_id,
               'T'
          );

      elsif in_native_command_name = 'DBDishReversalProcessOveride' -- DDWIDEV-316
     then

            declare
                  v_overrideAmt number;
            begin
                  v_overrideAmt := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_action_object_id,pkg_db_auto_funds_transfer.gbv_BTS_OverrideAmount);
                  --pkg_db_reversal_kr_wip.sp_reversal_process
                  pkg_db_reversal.sp_reversal_process
                  (
                     in_session_id,
                     in_transaction_id,
                     in_action_object_id,
                     io_action_outcome_id,
                     v_current_date_time,
                     'T', -- Dish
                     v_overrideAmt
                  );
         end;

     elsif in_native_command_name = 'DBEFTDishonorInstallReset' -- DDWIDEV-316
     then
          pkg_db_auto_funds_transfer.sp_eft_dish_install_reset
           (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
            );


     elsif in_native_command_name = 'DBCreateCCExpiryNotice'--OSBILLING-4847
     then
          pkg_db_auto_funds_transfer.sp_wrapper_cc_expiry_notice
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache
          );---- UTXPRODUCT-809
          
          /*pkg_db_auto_funds_transfer.sp_cc_expiry_notice_create
          (
               in_session_id,
               in_transaction_id,
               sysdate,
               in_action_object_id,
               io_action_outcome_id
          );*/---- UTXPRODUCT-809
      -------------------------------------------------------------------------------------------

    elsif in_native_command_name = 'DBEFTDishonorValidate' -- DDWIDEV-316
     then
          pkg_db_auto_funds_transfer.sp_eft_dish_validate
           (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
            );

      -------------------------------------------------------------------------------------------

     elsif in_native_command_name = 'DBReconMatchAllRollup'
        then

          pkg_db_reconciliation.sp_match_all_rollup
           (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

            );

           io_action_outcome_id     :=     pkg_os_constant.gOutcome_OK   ;


--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start

    elsif in_native_command_name = 'CSCreateDisbursementReference'
    then

          PKG_CS_PROFILES.sp_create_disbursement_profile
          (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id
          );

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSAgencyCashApply'
     then

            io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSCashTransferProcessTransaction'
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSPolicyTransactionCashApply'
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'DBPolicyTransactionCashApply'
     then          -- Deprecated ?

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSAssociateStatements'
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSBillingAccountTrxSetCashApply' -- Single Payment Batch Cash Apply
     then

          declare

               v_billing_account_id     object.object_id%type;

          begin

               v_billing_account_id :=  pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id,
                                             pkg_db_billing_modify.gObjType_BillingAccount
                                        );


          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'DBBillingAccountTrxSetCashApply' -- Single Payment Batch Cash Apply
     then          -- Deprecated ?

          declare

               v_billing_account_id     object.object_id%type;

          begin

               v_billing_account_id :=      pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id,
                                             pkg_db_billing_modify.gObjType_BillingAccount
                                        );

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'OSBillingAcctTrxSetCreateRecon' -- Create reconciliation roll-ups associated with a Billing Transaction Set.
     then

          pkg_db_reconciliation.sp_bill_trx_set_rec_create
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id,
              v_current_date_time
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'DBAgencyBillingAcctTrxSetReconcile' -- Create reconciliation roll-ups associated with a Billing Transaction Set.
     then


          pkg_db_reconciliation.sp_bill_trx_set_rec_create
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id,
              v_current_date_time
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'DBAgencyReconAssociateCash'
     then

          pkg_db_reconciliation.sp_associate_cash_items
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               in_object_cache,
               v_current_date_time
          );


     elsif in_native_command_name = 'CSBillingAccountGenerateStatement' ---'DBBillingAccountGenerateStatement'
     then

          pkg_db_statement.sp_account_statement_create

          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
            v_current_date_time
          );
          

     elsif in_native_command_name = 'DBChkReceiptRequestTryCreate'
     then
         pkg_db_auto_funds_transfer.sp_receipt_request_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBChkReceiptBatchControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               1,
               1
         );


     elsif in_native_command_name = 'DBChkReceiptResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
         );


     elsif in_native_command_name = 'DBSchedWithdReversalRequestCreate'
     then

         pkg_db_auto_funds_transfer.sp_withd_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedWithdReversalControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,

               3,
               2
         );


     elsif in_native_command_name = 'DBSchedWithdReversalResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedEFTWithdRevRequestCreate'
     then
         pkg_db_auto_funds_transfer.sp_withd_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedEFTWithdRevControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               3,
               3
         );


      elsif in_native_command_name = 'DBSchedEFTWithdRevResponse'
     then
         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedChqWithdRevRequestCreate'
     then

         pkg_db_auto_funds_transfer.sp_withd_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
         );


     elsif in_native_command_name = 'DBSchedChqWithdRevControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,

               in_action_object_id,

               io_action_outcome_id,
               3,
               1
         );


      elsif in_native_command_name = 'DBSchedChqWithdRevResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,

               in_action_object_id,

               io_action_outcome_id
         );


      elsif in_native_command_name = 'DBSchedEFTDisbRevRequestCreate'
     then

         pkg_db_auto_funds_transfer.sp_disb_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedEFTDisbRevControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               4,
               3
         );

     --GCNA-2549 starts here
     elsif in_native_command_name = 'DBSchedEFTBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               3,
               1,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBSchedCCBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               2,
               1,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBSchedChqBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               1,
               1,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBSchedEFTDisbBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               3,
               2,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBSchedCCDisbBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               2,
               2,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'DBSchedChqDisbBatchStatusUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_update_disc
          (
               in_session_id,
               in_transaction_id,
               1,
               2,
               io_action_outcome_id
          );
     ----GCNA-2549 ends here
     -------------------------

     elsif in_native_command_name = 'DBSchedEFTDisbRevResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


      elsif in_native_command_name = 'DBSchedCCDisbRevRequestCreate'
     then

         pkg_db_auto_funds_transfer.sp_disb_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


     elsif in_native_command_name = 'DBSchedCCDisbRevControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,

               4,
               2
         );


     elsif in_native_command_name = 'DBSchedCCDisbRevResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );


      elsif in_native_command_name = 'DBSchedChqDisbRevRequestCreate'
     then

         pkg_db_auto_funds_transfer.sp_disb_rev_req_try_create
         (
               in_session_id,
               in_transaction_id,

               in_action_object_id,
               io_action_outcome_id
         );


     elsif in_native_command_name = 'DBSchedChqDisbRevControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,

               4,
               1
         );


     elsif in_native_command_name = 'DBSchedChqDisbRevResponse'
     then

         pkg_db_auto_funds_transfer.sp_receipt_try_response
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id

         );

     /* OSBILLING-7023 */
      elsif in_native_command_name = 'DBChequeDisbRequestTryCreate'
     then


       pkg_db_auto_funds_transfer.sp_chequedisbreqtry_create
       (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
       );
    /* OSBILLING-7023 */

     elsif in_native_command_name = 'DBSchedCheqDisbControlUpdate'
     then

         pkg_db_auto_funds_transfer.sp_fb_batch_control_update
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               2,
               1
         );


     elsif in_native_command_name = 'DBChequeDisbResponse'
     then

       pkg_db_auto_funds_transfer.sp_cheque_disb_try_response
       (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
       );


     elsif in_native_command_name = 'DBChequeDisbFailure'
     then

       pkg_db_auto_funds_transfer.sp_cheque_disb_try_failure
       (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
       );


     elsif in_native_command_name = 'DBPolicyTransactionAdhocInvoice'
     then

          pkg_db_statement.sp_policy_trx_adhoc_invoice
          (
               in_session_id,
               in_transaction_id,
               in_object_cache,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );


     elsif in_native_command_name = 'CSPolicyChangePaymentSchedule'
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSAutoCashApplyCashPost'
     then

          declare

               v_billing_account_id     object.object_id%type := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_action_object_id );
               v_fitransaction_id       object.object_id%type;
               v_fitem_type_id          number;
               v_fitem_id               object.object_id%type;
               v_cash_fitem_id          object.object_id%type;
               v_fichange_list          pkg_os_object.t_object_list;
               v_index                  number;

          begin

               v_fitransaction_id := pkg_os_object_search.fn_child_object_get(in_session_id, in_transaction_id, in_action_object_id, 2365046, 29708346, 603);

               -- Get all fichange for fitransaction
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitransaction_id,
                    2365146,
                    v_fichange_list
               );

               v_index :=  v_fichange_list.first;


               while (v_index is not null)
               loop

                    v_fitem_id          :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_fichange_list(v_index),
                                                  29704046

                                             );

                    v_fitem_type_id     :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_fitem_id,
                                                  29710046
                                             );

                    if v_fitem_type_id = 246
                    then

                         v_cash_fitem_id := v_fitem_id;

                    end if;

                    v_index := v_fichange_list.next(v_index);

               end loop;


               pkg_db_cash_apply.sp_auto_cash_apply_cashpost
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_account_id,
                    in_action_object_id,
                    v_cash_fitem_id,
                    io_action_outcome_id
               );

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          end;


     elsif in_native_command_name = 'DBPolicyFinalRemBatchCreate'
     then

          declare
               v_policy_id         object.object_id%type    :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

          begin
               pkg_db_late_process.sp_finalrem_batch_create
               (
                    in_session_id,
                    in_transaction_id,


                    in_action_object_id,
                    v_policy_id,
                    io_action_outcome_id
               );

          end;


     elsif in_native_command_name = 'DBBillingAcctTrxSetPLRRetroCreditApply'
     then

        pkg_db_credit_apply.sp_auto_credit_apply
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time,
               'T'
         );


     elsif in_native_command_name = 'DBBillingDeferredPremDateModify'
     then

        pkg_db_billing_modify.sp_bill_deferred_prem_upd
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
         );


     elsif in_native_command_name = 'DBSchedCCBatchControlUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_control_update
          (

               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               1,
               2
          );


     elsif in_native_command_name = 'DBSchedEFTBatchControlUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_control_update


          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               1,
               3
          );


     elsif in_native_command_name = 'DBDisbCCBatchControlUpdate'
     then

          pkg_db_auto_funds_transfer.sp_fb_batch_control_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               2,
               2
          );


     --GCNA-2604
     elsif in_native_command_name = 'CCWithDBBatchMatchCount'
     then

          pkg_db_auto_funds_transfer.sp_async_batch_count
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               106040
          );

     elsif in_native_command_name = 'EFTWithDBBatchMatchCount'
     then

          pkg_db_auto_funds_transfer.sp_async_batch_count
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               162640
          );


     elsif in_native_command_name = 'ChqWithDBBatchMatchCount'
     then

          pkg_db_auto_funds_transfer.sp_async_batch_count
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               166440

          );


     elsif in_native_command_name = 'CCDisbRevDBBatchMatchCount'
     then

          pkg_db_auto_funds_transfer.sp_async_batch_count
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               184640
          );


     elsif in_native_command_name = 'CCDisbDBBatchMatchCount'
     then

     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          160440
     );


     elsif in_native_command_name = 'CCWithRevDBBatchMatchCount'
     then

     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          172440
     );


     elsif in_native_command_name = 'ChqDisbRevDBBatchMatchCount'
     then

     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          190640
     );


     elsif in_native_command_name = 'ChqDisbDBBatchMatchCount'
     then

     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          180540
     );

     elsif in_native_command_name = 'ChqWithRevDBBatchMatchCount'
     then


     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          186640
     );

     elsif in_native_command_name = 'EFTDisbRevDBBatchMatchCount'
     then


     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          182840
     );


     elsif in_native_command_name = 'EFTDisbDBBatchMatchCount'
     then


     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          162940
     );


     elsif in_native_command_name = 'EFTWithRevDBBatchMatchCount'
     then


     pkg_db_auto_funds_transfer.sp_async_batch_count
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          io_action_outcome_id,
          174640
     );


     elsif in_native_command_name = 'DBBatchInWait'
     then


          pkg_db_auto_funds_transfer.sp_batch_in_sleep
          (
               in_session_id,
               in_transaction_id,
               200,--wait duration in seconds

               io_action_outcome_id

          );
      --GCNA-2604 Ends here


     elsif in_native_command_name = 'DBDisbEFTBatchControlUpdate'
     then


          pkg_db_auto_funds_transfer.sp_fb_batch_control_update
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               2,
               3
          );

    --GCNA-2696: Set the profile end date

    elsif in_native_command_name = 'DBSetPrflEndDate'
    then

      pkg_cs_profiles.sp_set_prfl_end_date
      (
        in_session_id,
        in_transaction_id,
        in_action_object_id,
        io_action_outcome_id
      );


     elsif in_native_command_name = 'OSBillingAcctTrxSetReconcile' -- Link reconciliation roll-ups with transactions that represent line items in a partner statement.
     then

          pkg_db_reconciliation.sp_bill_trx_set_reconcile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
            v_current_date_time
          );


          io_action_outcome_id := pkg_os_constant.gOutcome_OK;


--OSBILLING-3833 - Merged GCNA code in BaseDEV. End

     elsif in_native_command_name = 'DBBillingTrxPostProcess'
      then
          declare
               v_billing_acc_id                    Object.Object_Id%type;
          begin

               v_billing_acc_id          := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);

               pkg_db_object.sp_billing_trx_post_processing
                    (
                     in_session_id,
                     in_transaction_id,
                     v_billing_acc_id,
                     in_action_object_id,
                     io_action_outcome_id
                  );

                  io_action_outcome_id     :=     pkg_os_constant.gOutcome_OK;

          end ;
     -------------------------------------------------------------------------------------------
    --OSBILLING-5200 - Populate GTT - Start
     elsif in_native_command_name = 'DBPopulateBillingAccountGTT'
     then
          /*v_sid := userenv('SID');
          --empty GTT
          delete gtt_ba_transaction_history where session_id = v_sid;
           --Insert new billing_account_id
          insert into gtt_ba_transaction_history (billing_account_id, session_id)
          values (in_action_object_id, v_sid);*/

          pkg_db_object.sp_load_gtt_trx_hist(in_session_id,in_transaction_id,in_action_object_id);

          io_action_outcome_id  := pkg_os_constant.gOutcome_OK;
          --OSBILLING-5200 - Populate GTT - End
    
     elsif in_native_command_name = 'DBPopulateRelatedBillingAccountGTT'
     then

          pkg_db_object.sp_load_gtt_rel_trx_hist(in_session_id,in_transaction_id,in_action_object_id);

          io_action_outcome_id  := pkg_os_constant.gOutcome_OK;
     --------------------------------------------------------------------------------------------
    elsif in_native_command_name = 'DBPaymentBatchPostProcess' -- DDWIDEV-1001
       then
          PKG_DB_CASHPOST.sp_fitrx_batch_post_process
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
                  in_object_cache,
               io_action_outcome_id
          );


     elsif in_native_command_name = 'CSPolicyImagePaymentScheduleCreateMultipayer' -- OSBILLING-5379
     then
          declare
               v_chosen_payment_plan_id        object.object_id%type;
               v_payer_entity_id               object.object_id%type;
               gbv_PolicyRefChosenPlan       constant business_variable.business_variable_id%type        :=   212021;

               v_object_list               pkg_os_object.t_object_list;
               v_idx                       binary_integer;

          begin

          v_object_list.delete;

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_Id              =>    in_session_id,
               in_transaction_id          =>    in_transaction_id,
               in_object_id               =>    in_action_object_id,
               in_child_object_type_id    =>    pkg_db_multipayer.gObjType_PTPPayer,
               in_object_list             =>    v_object_list,
               in_exclude_object_id       =>    null,
               in_exclude_object_type_id  =>     pkg_db_multipayer.gObjType_PolicyTerm -- KD: in my unit tests PolicyTerm resides under the PTP. Term has Payers that are type of PTPPayer. Need to exclude them.
          );
          --OSBILLING-7831
          v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id
                                         ), v_current_date_time
                                    );

          v_idx := v_object_list.first;


          while v_idx is not null
          loop
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Generating schedule for  Payer ID:'||v_object_list(v_idx)
                    );
               end if;
                v_chosen_payment_plan_id :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_object_list(v_idx),
                                                  pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan -- 32705024
                                             );


               v_payer_entity_id       :=  pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                      v_object_list(v_idx),
                                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                  );

																	 -- UTPRODUCT-3925
	

                    if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_action_object_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
                         then
                               v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                                       (
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                           v_object_list(v_idx),
                                                                           pkg_db_constant.gbv_payer_process_date
                                                                       ),pkg_os_constant.DragonDateFormatDefault);  
                              if v_current_payer_date_time is not null
                                   then
                                      v_current_date_time :=  v_current_payer_date_time;
                              end if; 
                    
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   'ACTION_CUSTOM',
                                   '...... v_current_date_time on PTPPayer:'||v_object_list(v_idx)
                                   ||' HC: is : '||v_current_date_time
                              );                                                                        
                     end if;                                                                                              
                    
               pkg_db_payplan_modify.sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_os_constant.gBoolean_True,
                    v_chosen_payment_plan_id ,
                    v_current_date_time,
                    null,
                    io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
               );
            /*   pkg_db_payplan_modify.sp_payment_schedule_update
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id     => in_action_object_id,
                    in_payer_entity_id     => v_payer_entity_id,
                    io_action_outcome_id   => io_action_outcome_id
               );*/

               v_idx := v_object_list.next(v_idx);
          end loop;

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end;


    -------------------------------------------------------------------------------------------
     --  For all the payers having a chosen pay plan
     -------------------------------------------------------------------------------------------
     elsif in_native_command_name = 'DBPTPAllPayersScheduleCreate'
     then

          declare --  Delete existing PolicyTransactionPolicyPayer object first to make this script re-runable....

               v_payer_list                    pkg_os_object.t_object_list;
               v_payer_index                   integer;
               v_chosen_payment_plan_id        object.object_id%type;

          begin

               v_payer_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id, -- Policy Image
                    pkg_db_multipayer.gObjType_PTPPayer,
                    v_payer_list,
                    null,
                    pkg_db_multipayer.gObjType_PolicyTerm -- KD: in my unit tests PolicyTerm resides under the PTP. Term has Payers that are type of PTPPayer. Need to exclude them.
               );

               --OSBILLING-7831
               v_current_date_time := nvl(
                                              pkg_db_functions.fn_get_processed_date
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_action_object_id
                                              ), v_current_date_time
                                         );

               v_payer_index := v_payer_list.first;

               while v_payer_index is not null
               loop

                    v_chosen_payment_plan_id := null;

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Calling the Schedule Generation for PolicyTransactionPolicyPayer Object ID:'||v_payer_list(v_payer_index)
                         );
                    end if;

                    v_chosen_payment_plan_id :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_payer_list(v_payer_index), -- expect this to be a PolicyTransactionPolicyPayer
                                                       PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_ChosenPayPlan
                                                  );

                    if v_chosen_payment_plan_id is not null
                    then

                    -- UTPRODUCT-3925
                    if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_action_object_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
                         then
                          v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                      v_payer_list(v_payer_index), 
                                                                      pkg_db_constant.gbv_payer_process_date
                                                                  ),pkg_os_constant.DragonDateFormatDefault);  
                         if v_current_payer_date_time is not null
                              then
                                 v_current_date_time :=  v_current_payer_date_time;
                         end if;  
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              'ACTION_CUSTOM',
                              '...... v_current_date_time on PTPPayer:'||v_payer_list(v_payer_index)
                              ||' HC: is : '||v_current_date_time
                         );                                                                   
                    end if; 
                         pkg_db_payplan_modify.sp_payment_schedule_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id, -- Policy Image
                              pkg_os_constant.gBoolean_True,
                              v_chosen_payment_plan_id ,
                              v_current_date_time,
                              null,
                              io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
                         );

                    else

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Skipped PolicyTransactionPolicyPayer Object ID:'||v_payer_list(v_payer_index)||
                                   ' as the Chosen Payment Plan for the payer is not set'
                              );
                         end if;

                    end if;

                    v_payer_index := v_payer_list.next(v_payer_index);

               end loop;

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          end; -- DBPTPAllPayersScheduleCreate
    --VAULTDEV-8585
     -------------------------------------------------------------------------------------------
    elsif in_native_command_name = 'DBCreateBillPlanPlaceholder' then


         declare
         
               v_multipayer_enabled_tf         char(1); 

         begin

              v_multipayer_enabled_tf := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id,
                                              pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                                         );

              if nvl(v_multipayer_enabled_tf, 2) = 2 then -- single payer

                   pkg_db_payment_arrangement.sp_billplan_create_placeholder
                   (
                        in_session_id,
                        in_transaction_id,
                        in_action_object_id,
                        in_object_cache,
                        io_action_outcome_id
                   ); 

              else
                   
                   declare
                        v_payer_valid_tf char(1) := null;
                   begin
              
                        for v_payer_rec in (select ptp_payer_id from dragon_ptp_payer where ptp_id = in_action_object_id) loop
                             
                             -- [RR] Saw issue with bill plan placeholder 
                             -- Multiple bill plan placeholder is being displayed in the drop down during new biill plan setup of financial institution
                             -- Steps to reproduce: 1. Create an MP policy with financial institution 2. Create PNBT and change the morgagee payer so that it is not valid
                             -- fix :- call sp_billplan_create_placeholder only if the payer is valid       
                             v_payer_valid_tf := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id, 
                                                       in_transaction_id, 
                                                       v_payer_rec.ptp_payer_id, 
                                                       32993324
                                                  );
                                                       
                             if v_payer_valid_tf = 1 then

                                  pkg_db_payment_arrangement.sp_billplan_create_placeholder
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_payer_rec.ptp_payer_id,
                                       in_object_cache,
                                       io_action_outcome_id,
                                       'T' -- OSPRODUCT-2908
                                  );
                                  
                             end if;
                                  
                        end loop;

                   end ;

              end if;

              io_action_outcome_id := pkg_os_constant.gOutcome_OK;

         end;

    elsif in_native_command_name = 'DBCreateBillPlan' then
                                
         pkg_db_payment_arrangement.sp_bill_plan_create
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,               
              io_action_outcome_id
                   
         );


    elsif in_native_command_name = 'DBUpdateBillPlan' then

         pkg_db_payment_arrangement.sp_bill_plan_update
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
         );

    elsif in_native_command_name = 'CSAssociateSelectedPolicyToProfile'
    then
         declare
              v_customer_id             object.object_id%type;
              v_policy_id               object.object_id%type;
              v_ctf_id                  object.object_id%type := null;
              v_payment_mode            object_bv_value.business_variable_value%type;
              v_cc_payment_type         object_bv_value.business_variable_value%type;
              v_eft_payment_type        object_bv_value.business_variable_value%type;
              v_object_list             pkg_os_object.t_object_list;
              v_billing_account_id      object.object_id%type;
              v_primary_entity_id       object.object_id%type;
              v_pay_profile_id          object.object_id%type;
              v_policy_trx_id           object.object_id%type;
         begin

              v_customer_id        := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, pkg_os_constant.gObjType_Customer);
              v_policy_trx_id      := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);
              v_policy_id          := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, v_policy_trx_id, pkg_os_constant.gObjType_Policy);
              v_primary_entity_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_customer_id, pkg_db_payment_arrangement.gbv_Ref_CustPrimaryEntity);

              -- Billing Account ID
              v_billing_account_id := pkg_os_object_search.fn_object_11_child_get (in_session_id, in_transaction_id, v_primary_entity_id, pkg_db_payment_arrangement.gObjType_BillingAccount);

              v_payment_mode := pkg_os_object_io.fn_object_bv_get
                                (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id,
                                   211929
                                ); -- Bill me/CC/EFT

              v_cc_payment_type := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id,
                                              pkg_cs_profiles.gbv_Payment_profile_for_CC
                                         );

              v_eft_payment_type := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_action_object_id,
                                         pkg_cs_profiles.gbv_PaymentProfileForEFT
                                    );

              -- Get the preferred payment profile of the Billing Account
              v_pay_profile_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_billing_account_id,
                                         30744446
                                    );

              v_ctf_id := pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               v_pay_profile_id,
                               30013046
                          );

              -- OSBILLING-7233
              pkg_cs_profiles.sp_associate_policy_to_profile
              (
                    in_session_id,
                    in_transaction_id,
                    in_object_cache ,
                    v_customer_id,
                    io_action_outcome_id,
                    'F',
                    v_policy_id,
                    v_ctf_id,
                    'T'
              );
         end;

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSCreateIntermediaryEFTProfile'
      then

          PKG_CS_PROFILES.sp_create_intermediary_prof
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;


     elsif in_native_command_name = 'CSCreateClaimsBrokerMultipleProfile'
    then
        declare
             in_profile_type_id            object.object_id%type := 63; -- Broker object type
        begin

          pkg_cs_profiles.sp_create_cl_multiple_prfl
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id, --Billing account
               in_profile_type_id,
               io_action_outcome_id
          );

        end;

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSCreateNewClaimDisbursementProfile'
    then
          PKG_DB_PROFILES.sp_cl_create_new_prfl
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'CSCleanCTPPlaceholder'
    then
          PKG_DB_PROFILES.sp_cl_clear_CTP_plchldr
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'DBSetPaymentDetailsForPTP' then

         pkg_db_payment_arrangement.sp_set_billplan_detail_to_ptp
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
         );


    elsif in_native_command_name = 'DBSetModPaymentDetailsForPTP' then

         pkg_db_payment_arrangement.sp_set_billplan_detail_to_ptp
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id,
              'T'
         );

    elsif in_native_command_name = 'DBUpdateBillPlanProfileAttrDAP' then

         pkg_db_profiles.sp_future_dated_profile_upd
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id
         );
         
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;


    elsif in_native_command_name = 'SetMemberPaidAmount' then
        declare
             v_bill_acct_trx_set_id          object.object_id%type;
        begin
             v_bill_acct_trx_set_id := pkg_os_object.fn_object_parent_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id
                                        );
             pkg_db_cash_apply.sp_recon_amount_spread
             (
                   in_session_id           => in_session_id,
                   in_transaction_id       => in_transaction_id,
                   in_bill_acct_trx_set_id => v_bill_acct_trx_set_id,
                   in_recon_object_id      => in_action_object_id,
                   io_action_outcome_id    => io_action_outcome_id
             );
        end;

    elsif in_native_command_name = 'DBPolicyImageSetBillPlanEnableFlag' then

          pkg_db_payment_arrangement.sp_set_billplan_enable_flag
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );

    elsif in_native_command_name = 'DBSetBillPlanDetailsForPTPPayer' then

         pkg_db_payment_arrangement.sp_billplan_detail_to_ptppayer
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
         );
         
    elsif in_native_command_name = 'DBSetModBillPlanDetailsForPTPPayer' then
         
         --OSPRODUCT-2281         
         declare
         
              v_mod_bill_plan      object.object_id%type;
              -- Get the current Bill Plan
              
         begin
              
              v_mod_bill_plan := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_action_object_id,
                                         pkg_db_payment_arrangement.gbv_Ref_PTPayerModBillPlan
                                    );
                                    
              if v_mod_bill_plan is not null then                                    

                   pkg_db_payment_arrangement.sp_billplan_detail_to_ptppayer
                   (
                        in_session_id,
                        in_transaction_id,
                        in_action_object_id,
                        io_action_outcome_id,
                        'T'
                   );
                   
              else
                   
                   pkg_db_payment_arrangement.sp_billplan_detail_to_ptppayer
                   (
                        in_session_id,
                        in_transaction_id,
                        in_action_object_id,
                        io_action_outcome_id
                   );
                   
              end if;
              
         end;
 -- Arun OSPRODUCT-532 - Start  - Modified the Native command DBCreateNachaString to DBCreateTryFileString -- Start
 elsif in_native_command_name = 'DBCreateTryFileString' -- XXXXEV-1469
     then
           pkg_db_auto_funds_transfer.sp_create_try_file_string
            (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
           );

 -- Arun OSPRODUCT-532 - End  
 

    elsif in_native_command_name = 'DBCashAutoApplyPath'
    then

               pkg_db_cash_apply.sp_cash_auto_apply_path
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );


     elsif in_native_command_name = 'DbmsSchedulerProcessBatch'
       then
         pkg_db_dap.run_batch
               (
                    in_user_session_id => in_session_id,
                 in_transaction_id => in_transaction_id,
                 out_outcome_id => io_action_outcome_id
             );
     elsif in_native_command_name = 'DBReverseWriteOff' -- XXXDEV-1469
     then
        declare
               v_billing_acc_id                    Object.Object_Id%type;

        begin

               v_billing_acc_id          := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);
                   pkg_cs_db_reversal.sp_reverse_writeoff
                         (
                            in_session_id,
                            in_transaction_id,
                              v_billing_acc_id,
                            io_action_outcome_id
                         );
         end;
	    
     elsif in_native_command_name = 'DBCalcDateofInterest'
     then
               
          -- OSPRODUCT-14577
          pkg_db_date_of_interest.sp_recalc_date_of_interest
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               1
          );
               
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    elsif in_native_command_name = 'DBCreateProfilePlaceholders' then
          
          declare
          
               v_action_object_type_id   object_type.object_type_id%type;
               v_mppayer_list            pkg_db_multipayer.t_payer_tab;
               v_payer_index             number;
               v_bill_plan_enable_tf     char(1);
               v_multipayer_enable_tf    char(1);
               v_payer_account_type      object_bv_value.business_variable_value%type;
           
          begin
               
               v_action_object_type_id := pkg_os_object.fn_object_type_get 
                                          (
                                               in_session_id, 
                                               in_transaction_id,
                                               in_action_object_id
                                          );
                                          
               if v_action_object_type_id = pkg_os_constant.gobjType_PolicyTrxPolicy then
                                          
                    v_bill_plan_enable_tf := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  pkg_db_payment_arrangement.gbv_PTPBillPlanEnabledTF
                                             );
                                             
                    v_multipayer_enable_tf := pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_action_object_id,
                                                   pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                                              );
               
                    if nvl(v_multipayer_enable_tf, pkg_db_constant.g_No) = pkg_db_constant.g_No
                       or
                       ( v_multipayer_enable_tf = pkg_db_constant.g_Yes and nvl(v_bill_plan_enable_tf, pkg_db_constant.g_No) = pkg_db_constant.g_No )
                    then
          
                         pkg_db_profiles.sp_create_profile_placeholder
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id,
                              in_object_cache,
                              io_action_outcome_id
                         );
                         
                    else
                         
                         pkg_db_multipayer.sp_ptp_payers_get
                         (
                              in_session_id         => in_session_id,
                              in_transaction_id     => in_transaction_id,
                              in_ptp_object_id      => in_action_object_id,
                              io_payer_list         => v_mppayer_list,           -- indexed by chosen pay plan ID
                              in_print_list         => 'Y',
                              in_index_by           => pkg_db_multipayer.g_PayerGet_idx_BilingAccount
                         );
                         
                         v_payer_index := v_mppayer_list.first;
                         
                         while v_payer_index is not null loop
                              
                              v_payer_account_type := pkg_os_object_io.fn_object_bv_get
                                                      ( 
                                                           in_session_id,
                                                           in_transaction_id,
                                                           v_mppayer_list(v_payer_index).PayerBillingAccount_id, 
                                                           pkg_db_billing_modify.gbv_BillingAccountType
                                                      );
                                                      
                              if v_payer_account_type = pkg_db_constant.gBillingAcType_Customer then
                              
                                   pkg_db_profiles.sp_create_profile_placeholder
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_mppayer_list(v_payer_index).PTPayer_object_id,
                                        in_object_cache,
                                        io_action_outcome_id
                                   );
                                   
                              end if;
                              
                              v_payer_index := v_mppayer_list.next (v_payer_index);
                              
                         end loop;
                    
                    end if;
                         
               else
                         
                    pkg_db_profiles.sp_create_profile_placeholder
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,
                         in_object_cache,
                         io_action_outcome_id
                    );                         
                    
               end if;
          
          end;
          
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     
     elsif in_native_command_name = 'CSCashTransferProfileCreateCheque' then

          /*pkg_cs_profiles.sp_create_RefCTFCheque
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );*/

          pkg_db_profiles.sp_create_profile_placeholder
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          
     elsif in_native_command_name = 'DBCreateDownPaymentCTFPlaceholder' then
          
          -- UTPRODUCT-3984
          pkg_db_profiles.sp_create_profile_placeholder
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               in_object_cache,
               io_action_outcome_id,
               in_down_payment_prf_tf => 'T'
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     
     elsif in_native_command_name = 'CSCashTransferProfileCreate'
     then
          pkg_db_customer_portal.sp_create_cashtransferprofile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
               v_current_date_time
          );
          
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          
     elsif in_native_command_name = 'CSCreateDisbursementProfile'
     then
          
          declare
          
          io_stmt_profile_object_id     object.object_id%type := null;
          --in_profile_type_id            object.object_id%type := 2366446; -- Customer object type
          --in_is_it_customer_profile_tf  char :='T';
          --OSPRODUCT-3698 start
          v_ultimate_parent_id          object.object_id%type := null;
          v_primary_entity_id           object.object_id%type := null;
          v_billing_account_id          object.object_id%type := null;
          --OSPRODUCT-3698 end
          begin

               /*pkg_cs_profiles.sp_create_disb_prof
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    in_profile_type_id,
                    in_is_it_customer_profile_tf,
                    io_action_outcome_id,
                    io_stmt_profile_object_id
               );*/
               --
               -- Get the Billing Account of the customer
               -- Get the parent of Object Type Customer
               --
               --OSPRODUCT-3698 start
               v_ultimate_parent_id := pkg_os_object_search.fn_object_get_parent_of_type
                                       (
                                            in_session_id ,
                                            in_transaction_id ,
                                            in_action_object_id,
                                            pkg_os_wf_task.gobjType_ParentCustomer
                                       );


               --
               -- Get the ref primary entity
               --
               v_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_ultimate_parent_id,
                                           pkg_db_profiles.gbv_CustRefPrimaryEntity
                                      );


               --
               -- Get the Child object of Type Billing Account
               --
               v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_primary_entity_id ,
                                            pkg_db_profiles.gObjType_BillingAccount --- object type id of Billing Account
                                       );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Customer: ' || v_ultimate_parent_id ||
                         'Customer Entity: ' || v_primary_entity_id ||
                         'Billing Account: ' || v_billing_account_id

                    );

               end if;
               --OSPRODUCT-3698 end

               pkg_db_profiles.sp_create_dpu_for_customer
               (
                    in_session_id,
                    in_transaction_id,
--                    in_action_object_id,  --OSPRODUCT-3698
                    v_billing_account_id,  --OSPRODUCT-3698
                    null,
                    null,
                    null,
                    io_stmt_profile_object_id
               );

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     
     elsif in_native_command_name = 'CSCreateDUserDisbursementProfile' then    
          
          declare
          
          io_stmt_profile_object_id     object.object_id%type := null;
          in_profile_type_id            object.object_id%type := 309; -- Dragon User object type
          in_is_it_customer_profile_tf  char :='F';
          
          begin

               pkg_cs_profiles.sp_create_disb_prof
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    in_profile_type_id,
                    in_is_it_customer_profile_tf,
                    io_action_outcome_id,
                    io_stmt_profile_object_id
               );

          end;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
        
     elsif in_native_command_name = 'CSProfileUsageUpdateCreate' then
                
           declare
           
                v_pt_trx            object.object_id%type;
                v_action_object_id  object.object_id%type;
                
           begin

                if pkg_os_object.fn_object_type_get (in_session_id, in_transaction_id, in_action_object_id) <> pkg_os_constant.gobjType_PolicyTransaction then

                     v_pt_trx := pkg_os_object_search.fn_object_get_parent_of_type
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_action_object_id,
                                      pkg_os_constant.gobjType_PolicyTransaction
                                 );
                                 
                     v_action_object_id := in_action_object_id;

                else

                     v_pt_trx := in_action_object_id;
                     
                     v_action_object_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_pt_trx,
                                                212318
                                           );
                     

                end if;

                /*pkg_cs_profiles.sp_prf_usag_updt_create
                (
                     in_session_id,
                     in_transaction_id,
                     v_action_object_id,
                     io_action_outcome_id
                );*/
                
                pkg_db_profiles.sp_policy_prf_setup_nb_pnbt
                (
                     in_session_id,
                     in_transaction_id,
                     v_pt_trx,
                     v_action_object_id,
                     io_action_outcome_id
                );

           end;

      elsif in_native_command_name = 'CSProfileUsageUpdatePNBTCreate'
      then
           
           /*pkg_cs_profiles.sp_prf_usag_updt_pnbt_create
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,
                io_action_outcome_id
           );*/
           
           declare
           
                v_pt_trx            object.object_id%type;
                v_action_object_id  object.object_id%type;
                
           begin

                if pkg_os_object.fn_object_type_get (in_session_id, in_transaction_id, in_action_object_id) <> pkg_os_constant.gobjType_PolicyTransaction then

                     v_pt_trx := pkg_os_object_search.fn_object_get_parent_of_type
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_action_object_id,
                                      pkg_os_constant.gobjType_PolicyTransaction
                                 );
                                 
                     v_action_object_id := in_action_object_id;

                else

                     v_pt_trx := in_action_object_id;
                     
                     v_action_object_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_pt_trx,
                                                212318
                                           );
                     

                end if;
                
                pkg_db_profiles.sp_policy_prf_setup_nb_pnbt
                (
                     in_session_id,
                     in_transaction_id,
                     v_pt_trx,
                     v_action_object_id,
                     io_action_outcome_id
                );

           end;
          
     elsif in_native_command_name = 'CSCashTransferProfileNew'
     then
          
          /*pkg_cs_profiles.sp_create_new_Profile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id,
                v_current_date_time
          );*/
          
          pkg_db_profiles.sp_ba_profile_setup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
          
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     elsif in_native_command_name = 'CSAssociatePolicyToProfile'
     then
          
          /*pkg_cs_profiles.sp_associate_policy_to_profile
          (
               in_session_id,
               in_transaction_id,
               in_object_cache ,
               in_action_object_id,
               io_action_outcome_id
          );*/
          
          pkg_db_profiles.sp_ba_assoc_policy_prf_setup
          (
               in_session_id,
               in_transaction_id,     
               in_action_object_id,     
               io_action_outcome_id,
               'T'
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
          

    -- Merged from Hiscox osbilling-5959
    -- OSBILLING-6807
    elsif in_native_command_name = 'CSAssociateAllPolicyToProfile'
    then
         
         /*-- OSBILLING-7233
         pkg_cs_profiles.sp_associate_policy_to_profile
         (
               in_session_id,
               in_transaction_id,
               in_object_cache ,
               in_action_object_id,
               io_action_outcome_id,
               'T'
         );*/
         
         pkg_db_profiles.sp_ba_assoc_policy_prf_setup
         (
              in_session_id,
              in_transaction_id,     
              in_action_object_id,     
              io_action_outcome_id,
              'F'
         );

    --OSBILLING-6807
    elsif in_native_command_name = 'CSAssociateProfileToAssoPolicies'
    then
         
         pkg_db_profiles.sp_asso_pols_to_new_profile
         (
               in_session_id,
               in_transaction_id,
               in_object_cache ,
               in_action_object_id,
               io_action_outcome_id

         );
         
    --native command to initialise fitransaction object based on single payment existing credit card info entered
    elsif in_native_command_name = 'CSInitFITransactionBasedOnSelectedCC' then
         
         /*declare
         
         v_selected_cash_transfer_id object.object_id%type;

         begin
              
              v_selected_cash_transfer_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                  in_transaction_id,
                                                                  in_action_object_id,
                                                                  '210356.211681.210133.210135');

             pkg_cs_profiles.sp_init_fitrx_with_ctf
             (
                 in_session_id ,
                 in_transaction_id,
                 in_action_object_id,
                 v_selected_cash_transfer_id,
                 io_action_outcome_id
             );
             
             io_action_outcome_id := pkg_os_constant.gOutcome_OK;

         end;*/
         
         pkg_db_profiles.sp_single_pmnt_profile_setup
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
         );
                  
    --native command to create cash transfer profile object based on single payment new credit card info entered
    elsif in_native_command_name = 'CSCashTransferProfileBasedOnCCCreate' then
         
         /*declare
         
               v_new_cash_transfer_profile_id object.object_id%type;


         begin

         pkg_cs_profiles.sp_create_ctp_init_with_cc
         (
              in_session_id ,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id ,
              v_new_cash_transfer_profile_id
         );

         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
         
         end;*/
         
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;


    --native command to create cash transfer profile object based on single payment new eft info entered
    elsif in_native_command_name = 'CSCashTransferProfileBasedOnCeftreate' then
         
         /*declare
         
               v_new_cash_transfer_profile_id object.object_id%type;
               
         begin

         pkg_cs_profiles.sp_create_ctp_init_with_eft
         (
            in_session_id ,
            in_transaction_id,
            in_action_object_id,
            io_action_outcome_id ,
            v_new_cash_transfer_profile_id
         );
         
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
         
         end;*/
         
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
         
    --native command to initialise fitransaction object based on single payment existing eft info entered
    elsif in_native_command_name = 'CSInitFITransactionBasedOnSelectedeft' then
         
         
         /*declare
         
               v_selected_cash_transfer_id object.object_id%type;

         begin
              
              v_selected_cash_transfer_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                  in_transaction_id,
                                                                  in_action_object_id,
                                                                  '210356.211681.210133.210135');

              pkg_cs_profiles.sp_init_fitrx_with_eft
              (
                   in_session_id ,
                   in_transaction_id,
                   in_action_object_id,
                   v_selected_cash_transfer_id,
                   io_action_outcome_id
              );
              
              io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          end;*/
          
         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          
    elsif in_native_command_name = 'DBAssociateNBProfileToBillingAccount' then
         
         declare
         v_ultimate_customer_id object.object_id%type;
         v_primary_entity_id    object.object_id%type;
         v_billing_account_id   object.object_id%type;         
         begin
              
              v_ultimate_customer_id := pkg_os_object_search.fn_object_ultimate_parent_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id
                                        );

              -- Get the Primary Customer Entity
              v_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_ultimate_customer_id,
                                           pkg_db_constant.gbv_CustRefPrimaryEntity
                                      );

              -- Get the 1-1 child of the Primary Customer Entity of type Billing Account
              v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_primary_entity_id,
                                            pkg_db_constant.gObjType_BillingAccount
                                       );
         
              pkg_db_profiles.sp_ba_prf_setup_nb_pnbt
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_billing_account_id,  
                    io_action_outcome_id
               );
               
         end;
         
         io_action_outcome_id := pkg_os_constant.goutcome_ok;
         
    -- OSBILLING-7586 start
    elsif in_native_command_name = 'DBInactivateProfileAll' then
     
         /*pkg_cs_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               'T',
               in_object_cache ,
               io_action_outcome_id
         );*/
         
         /*pkg_cs_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_action_outcome_id
         );*/
         
         pkg_db_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               io_action_outcome_id
         );

    elsif in_native_command_name = 'DBInactivateProfilePortal'  /* 2286 */
    then
        
        declare 
        
            v_billing_account_id object.object_id%type;
        
        begin
        
            v_billing_Account_id := pkg_os_object_search.fn_object_get_parent_of_type
                       (
                            in_session_id,
                            in_transaction_id,
                            in_action_object_id,
                            pkg_db_constant.gObjType_BillingAccount
                       );
		    
            pkg_db_profiles.sp_inactivate_profile
            (
                  in_session_id,
                  in_transaction_id ,
                  v_billing_Account_id,
                  io_action_outcome_id,
                  in_action_object_id               
            );
         
         end;

    elsif in_native_command_name = 'DBInactivateProfileSelected' -- Use DBInactivateProfileAll
    then
         /*pkg_cs_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               'F',
               in_object_cache ,
               io_action_outcome_id
         );
         */
         /*pkg_cs_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               in_object_cache ,
               io_action_outcome_id
         );*/
         
         pkg_db_profiles.sp_inactivate_profile
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id,
               io_action_outcome_id
         );
		 
	-- OSPRODUCT-2839
    elsif in_native_command_name = 'DBSetReinstateIntallmentBalAmount'
    then

         pkg_db_payplan_modify.sp_set_inst_reinstate_balance
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id -- PT ID
         );

         io_action_outcome_id := pkg_os_constant.goutcome_ok;


     -- UTPRODUCT-1433
    elsif in_native_command_name = 'DBSetEnableBillPlanSystemAttribute'
    then         

         pkg_db_payment_arrangement.sp_set_bill_plan_attribute
         (
               in_session_id,
               in_transaction_id ,
               in_action_object_id -- exchange ID
         );
         
         io_action_outcome_id := pkg_os_constant.goutcome_ok;
         
    elsif in_native_command_name = 'DBReinstateCashApply' --OSPRODUCT-2923
    then


         pkg_db_cash_apply.sp_policy_auto_cash_apply
         (
				   in_session_id,
				   in_transaction_id,
				   pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id),
				   io_action_outcome_id,
				   v_current_date_time
         );

         io_action_outcome_id := 22;     


    elsif in_native_command_name = 'DBCurrentAdHocInvoicePolicyTrxDelete' /*OSPRODUCT-2679*/
    then

         pkg_db_functions.sp_delete_invoice_transaction
         (
               in_session_id,
               in_transaction_id,
               in_action_object_id
         );

         io_action_outcome_id := pkg_os_constant.goutcome_ok;

	  --UTPRODUCT-1342 start
     elsif in_native_command_name = 'DBSchCCProcessRespCheck'
     then

        pkg_db_billing.sp_sch_cc_response_exists
        (
          in_session_id,
          in_transaction_id,
          in_action_object_id ,
          io_action_outcome_id
        );

     --UTPRODUCT-1342 end

     elsif in_native_command_name = 'DBResumeBilling'   --OSPRODUCT-3341
     then
        -- Suspense or Resume Policy in case of OOS Endorsement processing
                     pkg_db_suspension.sp_db_policy_trx_suspension
                     (
                          in_session_id,
                          in_transaction_id,
                          in_action_object_id,
                          in_object_cache,
                          io_action_outcome_id
                     );

    --OSPRODUCT-4487 end
     elsif in_native_command_name = 'DBRemoveExpiredCardDetails' 
     then
          -- To be complaint with regulatory authoroties
          -- Expired card details should be removed

          PKG_DB_PROFILES.sp_remove_expired_card_details
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id
          );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      --OSPRODUCT-4811
      elsif in_native_command_name = 'DBCreatePayerDefaultScheudule'
      then

          declare
               v_chosen_payment_plan_id        object.object_id%type;
               v_payer_entity_id               object.object_id%type;
               gbv_PolicyRefChosenPlan         constant business_variable.business_variable_id%type        :=   212021;
               v_object_list                   pkg_os_object.t_object_list;
               v_idx                           binary_integer;
          begin
               v_object_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_Id              =>    in_session_id,
                    in_transaction_id          =>    in_transaction_id,
                    in_object_id               =>    in_action_object_id,
                    in_child_object_type_id    =>    pkg_db_multipayer.gObjType_PTPPayer,
                    in_object_list             =>    v_object_list,
                    in_exclude_object_id       =>    null,
                    in_exclude_object_type_id  =>     pkg_db_multipayer.gObjType_PolicyTerm 
               );

               v_current_date_time := nvl(
                                              pkg_db_functions.fn_get_processed_date
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_action_object_id
                                              ), v_current_date_time
                                         );

               v_idx := v_object_list.first;


               while v_idx is not null
               loop

                    v_chosen_payment_plan_id :=  pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                                 );
                    
                    v_payer_entity_id        :=  pkg_os_object_io.fn_object_bv_get
                                                 (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_object_list(v_idx),
                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                  );

                    if v_chosen_payment_plan_id is not null then
                         -- UTPRODUCT-3925
                         if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_action_object_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
                         then
                              v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                                       (
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                           v_object_list(v_idx),
                                                                           pkg_db_constant.gbv_payer_process_date
                                                                       ),pkg_os_constant.DragonDateFormatDefault);  
                              if v_current_payer_date_time is not null
                                   then
                                      v_current_date_time :=  v_current_payer_date_time;
                              end if; 
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              'ACTION_CUSTOM',
                              '...... v_current_date_time on PTPPayer:'||v_object_list(v_idx)
                              ||' HC: is : '||v_current_date_time
                         );                                                                        
                                                                       
                         end if; 

                         pkg_db_payplan_modify.sp_payment_schedule_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              in_action_object_id,
                              pkg_os_constant.gBoolean_True,
                              v_chosen_payment_plan_id ,
                              v_current_date_time,
                              null,
                              io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
                         );
                    
                    end if;

                    v_idx := v_object_list.next(v_idx);

               end loop;

               io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          end;
          elsif in_native_command_name = 'DBBankInfoRefresh' then

               pkg_db_profiles.sp_bank_info(
                                               in_session_id,
                                               in_transaction_id,
                                               in_action_object_id
                                            );

           io_action_outcome_id := pkg_os_constant.gOutcome_OK;
		   
         elsif in_native_command_name = 'DBSetPreferredProfile' then  -- UTPRODUCT-3629
               pkg_op_utilities.sp_set_preferred_profile (
                                          in_session_id,
                                          in_transaction_id,
                                          in_action_object_id,
                                          io_action_outcome_id
                                         );
          io_action_outcome_id := pkg_os_constant.gOutcome_OK; 
		
		-- OSPRODUCT-3015
		elsif in_native_command_name = 'DBBAChangePayPlanExit'
		then

			pkg_db_payplan_modify.sp_ba_change_payplan_exit
			(
				in_session_id,
				in_transaction_id ,
				in_action_object_id,
				io_action_outcome_id
			);

     elsif in_native_command_name = 'DBInactivateAdhocProfile' --3985
     then
          
          pkg_db_profiles.sp_inactivate_adhoc_profile
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id, -- PTP ID
               io_action_outcome_id
          );
		
	-- OSPRODUCT-10484
     elsif in_native_command_name = 'DBGetLockForBANewBillPlan'
     then
          
          pkg_db_payment_arrangement.sp_set_ba_lock
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
      elsif in_native_command_name = 'DBResumePolicy' 
      then  
         -- UTPRODUCT-4369 
         declare 
         
               v_policy_id  object.object_id%type; 
            
         begin    
         
              v_policy_id :=  pkg_os_object.fn_object_parent_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_action_object_id
                               );    
                                            
              pkg_db_suspension.sp_late_process_policy_resume
              (
                    in_session_id,
                    in_transaction_id,
                    v_policy_id, 
                    io_action_outcome_id
               );
          
          end;
          
          -- OSPRODUCT-11059
          --
          pkg_db_suspension.sp_manual_noic_policy_resume
          (
                in_session_id,
                in_transaction_id,
                in_action_object_id, -- Rescind Pending Cx Transaction ID
                io_action_outcome_id
          );                     
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;  
		  
     elsif in_native_command_name = 'DBResyncFininstAccountToPartner'
     then
          --OSPRODUCT-11365
          pkg_db_object.sp_sync_fininst_acc_to_partner
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id
          );
          
      elsif in_native_command_name = 'DBSchWithdrwReqValidate' 
      then  
      declare
        v_return_value         	char;
	  begin
         
         v_return_value := pkg_db_auto_funds_transfer.fn_validate_withdrwreq_tf
                           (
                                 in_session_id,
                                 in_transaction_id ,
                                 in_action_object_id -- PT ID
                           );
         
         if v_return_value = 'T'
         then
             io_action_outcome_id := pkg_os_constant.goutcome_ok;  
         else
            io_action_outcome_id := pkg_db_auto_funds_transfer.gOutcome_AutoTryNotFound;
         end if;
         
        end;
      
        elsif in_native_command_name = 'DBSchWithdrwReqDiscard' 
        then  
     
             pkg_db_auto_funds_transfer.sp_discard_withdrwreqtry
              (
                   in_session_id,
                   in_transaction_id,
                   in_action_object_id,
                   v_current_date_time,
                   io_action_outcome_id
              );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
		
	elsif in_native_command_name = 'DBCreateDisbursementProfile' then
          
           --OSPRODUCT-2439
          pkg_db_profiles.sp_disbursement_profile_setup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id => io_action_outcome_id
          );
		  
     --OSPRODUCT-9915 added below command
     elsif in_native_command_name = 'DBRefreshPTPPayerDM' then

          pkg_db_multipayer.ptppayer_datamart_refresh
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               io_action_outcome_id => io_action_outcome_id
          );
		
	-- OSPRODUCT-8769
	elsif in_native_command_name = 'DBBALastUpdDateDMUpdate' then
          
          pkg_db_object.sp_ba_lastupdatedate_dm_upd
          (
               in_session_id,
               in_transaction_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
          
     elsif in_native_command_name = 'DBFitemLastUpdDateDMUpdate' then
          
          pkg_db_object.sp_fitem_lastupdatedate_dm_upd
          (
               in_session_id,
               in_transaction_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
          
     elsif in_native_command_name = 'DBFichangeLastUpdDateDMUpdate' then
          
          pkg_db_object.sp_fic_lastupdatedate_dm_upd
          (
               in_session_id,
               in_transaction_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
     
     elsif in_native_command_name = 'DBFiTrxLastUpdDateDMUpdate' then
          
          pkg_db_object.sp_fitrx_lastupdatedate_dm_upd
          (
               in_session_id,
               in_transaction_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
     
     elsif in_native_command_name = 'DBBATrxSetLastUpdDateDMUpdate' then
          
          pkg_db_object.sp_bats_lastupdatedate_dm_upd
          (
               in_session_id,
               in_transaction_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
	
	-- end OSPRODUCT-8769
	
	-- OSPRODUCT-10253
     elsif in_native_command_name = 'DBPolicyTransactionSetDownPmntAmt' then
          
          pkg_db_equity_calculation.sp_ptp_set_down_pmnt_amt
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
		
	-- OSPRODUCT-10253
     elsif in_native_command_name = 'DBTrxStatPerDayFactor' then        
          
          pkg_db_equity_calculation.sp_stats_per_day_factor_insert 
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );
          
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
          
     --OSPRODUCT-13644
     elsif in_native_command_name = 'DBPolicyBillPlanUpdate' then
          
          declare
               v_policy_term       object.object_type_id%type;
               v_char              char := 'T';
          begin     
               v_policy_term  :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id,'29728801');
               
               for r_installment in (select installment_id from DRAGON_SCHEDULED_INSTALLMENT where 
                                        POLICY_TERM_ID = nvl(v_policy_term,0) )
               loop
                    if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,r_installment.INSTALLMENT_ID,31212946) = 3 --supressed
                    then
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,r_installment.INSTALLMENT_ID,31212946,null);
                         --update datamart installmenmt
                         pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,r_installment.INSTALLMENT_ID,v_char);
                    end if;
               end loop;
               --NID
               PKG_DB_STMT_DATE.sp_set_next_invoice_date
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               PKG_DB_SUSPENSION.sp_policy_billplan_update
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_term --either term or policy
               );
               
               io_action_outcome_id := pkg_os_constant.goutcome_ok;          
          end; 
	 elsif in_native_command_name = 'DBCleanupProfilePlaceholders' then
           
           pkg_db_profiles.sp_cleanup_profile_placeholder   
            (
                 in_session_id,
                 in_transaction_id,
                 in_action_object_id,
                 io_action_outcome_id,
                 'F'
            );
            
            io_action_outcome_id := pkg_os_constant.goutcome_ok;
     
     elsif in_native_command_name = 'DBCleanupDownPmntProfilePlaceholders' then
     
            pkg_db_profiles.sp_cleanup_profile_placeholder   
            (
                 in_session_id,
                 in_transaction_id,
                 in_action_object_id,
                 io_action_outcome_id,
                 'T'
            );
            
            io_action_outcome_id := pkg_os_constant.goutcome_ok;
			
     elsif in_native_command_name = 'DBCleanupAdhocJournal' then --OSPRODUCT-16699

          pkg_db_adhoc_journal.sp_adhoc_journal_cleanup
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id
          );            
          io_action_outcome_id := pkg_os_constant.goutcome_ok;

     elsif in_native_command_name = 'CSUpdateClaimTrxBATSStatus'
      then

         pkg_oc_functions.sp_claimtrx_bats_reversal
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id ,
              io_action_outcome_id
          );
        io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          
      -- OSPRODUCT-20551 Start
      elsif in_native_command_name = 'CSPolicyTermCreatePayersPNPBProcessWF'
      then
      
           PKG_DB_MULTIPAYER.sp_policy_term_payer_create
           (
                in_session_id,
                in_transaction_id,
                in_action_object_id,  -- expect this to be a PolicyTerm
                io_action_outcome_id
           );

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          -- OSPRODUCT-20551 End        
          
     --LXPRODUCT-520 
     elsif in_native_command_name = 'DBDocProcessing' then 
         pkg_db_object.sp_billing_doc_processing
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
         );
         
         io_action_outcome_id := pkg_os_constant.goutcome_ok;
     --LXPRODUCT-520 
	 
	 --OSPRODUCT-25867
     elsif in_native_command_name = 'DBUpdateDisbAddress' then 
          
          pkg_db_profiles.sp_syncup_disb_prf_address
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              io_action_outcome_id
          );
         
          io_action_outcome_id := pkg_os_constant.goutcome_ok;
      elsif in_native_command_name = 'DBTprCheckPopulateStaging' then

          pkg_db_auto_funds_process.sp_disb_resp_imp_stg
          (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              in_action_id,
              io_action_outcome_id
          );

          io_action_outcome_id := pkg_os_constant.goutcome_ok;
     end if;
	 

end sp_execute_action_billing;

end PKG_DB_ACTION_BILLING;
/
