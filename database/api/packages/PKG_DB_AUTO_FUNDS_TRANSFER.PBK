create or replace package body pkg_db_auto_funds_transfer
-------------
-- $Workfile:   PKG_DB_AUTO_FUNDS_TRANSFER.PBK  $
-- $Revision: 46864 $
--   $Author: kdubin@OSHQ.ONESHIELD.COM $

--     $Date: 2016-12-28 12:08:43 +0200 (??N?, 28 ?????? 2016) $
-------------
as

pkg_name  constant  system_log.program_name%type := 'pkg_db_auto_funds_transfer.';

-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_sched_withdrawal_date
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_id                       in             object.object_id%type,
     in_current_date                                   in                      date,
     in_policy_pay_mode_id                          in                      number
)
return date
is

     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'fn_get_sched_withdrawal_date';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_date                                           date;
     v_add_days                    number;

begin

 --get fullfilment days from corresponding property
 if in_policy_pay_mode_id = 3 --EFT
 then
    v_add_days := to_number(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_policy_id, 13340));
 elsif in_policy_pay_mode_id = 2 --CC
 then
    v_add_days := to_number(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_policy_id, 13440));
 else
    v_add_days := 0;
end if;

    --if current day = Friday and value from property = 0  then add 1 extra day
    --if ( upper(trim(to_char(in_current_date, 'Day'))) = 'FRIDAY' And NVL(v_add_days,0) = 0 )
    --then
    --    v_add_days := v_add_days  + 1;
    --end if;

v_date := pkg_base_calendar.fn_add_business_days( in_session_id, in_transaction_id, in_policy_id, in_current_date, v_add_days );

return v_date;
exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while executing Auto Withdrawal sp_create_task procedure. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end fn_get_sched_withdrawal_date;

--GCNA-947
procedure sp_create_task
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_task_object_id                  in             object.object_id%type,    /* Tasked Object ID */
     in_billing_accnt_id                in             object.object_id%type,
     in_task_type                                    in                object.object_id%type,
     in_task_title                      in             object_bv_value.business_variable_value%type,
     in_task_desc                       in             object_bv_value.business_variable_value%type
)

as

     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_create_task';

     v_primary_billing_csr_id           object.object_id%type;
     v_new_task_id                      object.object_id%type         := null;
     v_current_user_object_id           object.object_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_account_holder_name              object_bv_value.business_variable_value%type;
     v_task_description_id              long_string.long_string_id%type              := null;
     v_datamart_tf                      char(1)                       := 'T';

begin

     -- 1. Get the Primary Billing CSR of the billing account
     v_primary_billing_csr_id      :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,

                                                 in_billing_accnt_id,
                                                 pkg_db_security_trigger.gbv_BillingAcc_RefPrimaryCSR    -- 31761546

                                             );
     if v_session_control.glogging_full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_primary_billing_csr_id...'||v_primary_billing_csr_id
          );
     end if;

     -- 2. Get the Account Holder Name of the billing account
     v_account_holder_name         :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_billing_accnt_id,
                                                 pkg_db_functions.gbv_BillingAcc_AccHldr_Name    --29974846

                                             );
     if v_session_control.glogging_full
     then
      pkg_os_logging.sp_log
      (
         in_session_id,
         in_transaction_id,
                  v_procedure_name,
         '...... v_account_holder_name...'||v_account_holder_name
      );
     end if;

     --   3. Create object of Type NOTE ...
     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          pkg_os_wf_task.gObjType_Task,
          null,
          v_new_task_id
     );

     if v_session_control.glogging_full
     then
      pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_new_task_id...'||v_new_task_id
          );
     end if;

     --   4. Holler to session that a new object has been created
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_constant_bv.gbv_SessionNewObject, -- 210395
          v_new_task_id
     );

     if v_session_control.glogging_full
     then
      pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_new_task_id...'||v_new_task_id
          );
     end if;

     --   5. Get the Current User
     v_current_user_object_id      :=        pkg_os_wf_session.fn_user_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id
                                             );

     if v_session_control.glogging_full
     then
      pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_current_user_object_id...'||v_current_user_object_id
          );
     end if;

     -- 6. Set the business variables for Task object
     v_bv_table.delete;

     pkg_os_long_string.set_long_string
                              (
                                     in_session_id,
                                     in_transaction_id,
                                     v_new_task_id,
                                     to_char(27499104),
                                     in_task_desc,
                                     v_task_description_id
                              );

     v_bv_table (pkg_os_wf_task.gbv_taskassociatedobject    ).business_variable_value :=  in_task_object_id;
     v_bv_table (pkg_os_constant_bv.gbv_genobjcreator       ).business_variable_value :=  v_current_user_object_id;
     v_bv_table (pkg_os_constant_bv.gbv_genobjcreationdate  ).business_variable_value :=  to_char(sysdate,'yyyymmddhh24miss');
     v_bv_table (pkg_os_wf_task.gbv_taskcontenttype         ).business_variable_value :=  pkg_os_wf_task.gtaskcontent_task ;
     v_bv_table (pkg_os_wf_task.gbv_taskstatus              ).business_variable_value :=  pkg_os_wf_task.gtaskstatus_incomplete;
     v_bv_table (pkg_os_wf_task.gbv_tasktitle               ).business_variable_value :=  in_task_title;
     v_bv_table (pkg_os_wf_task.gbv_taskdescription         ).business_variable_value :=  in_task_desc;
     v_bv_table (pkg_os_wf_task.gbv_TaskCreatedDate         ).business_variable_value :=  to_char( sysdate , 'yyyymmddhh24miss');
     v_bv_table (pkg_os_wf_task.gbv_TaskType                ).business_variable_value :=  in_task_type;
     v_bv_table (pkg_os_wf_task.gbv_taskduedate             ).business_variable_value :=  to_char( sysdate , 'yyyymmddhh24miss');
     v_bv_table (pkg_os_wf_task.gbv_TaskAssignedTo          ).business_variable_value :=  nvl(v_primary_billing_csr_id,v_current_user_object_id);
     v_bv_table (pkg_os_constant_bv.gbv_genobjobjectstate   ).business_variable_value :=  pkg_os_constant.gobjstate_alive; --37246; -- SK : Commented for Diary
     v_bv_table (pkg_os_wf_task.gbv_TaskDescrCompositeClob  ).business_variable_value :=  v_task_description_id;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_task_id,
          v_bv_table
     );

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.........Created Task Object '||v_new_task_id ||
               ' assigned to: '|| nvl(v_primary_billing_csr_id,v_current_user_object_id)||
               ' with tasked object : ' ||in_task_object_id
          );

     end if;

     --Update the Task Datamart
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_task_id, v_datamart_tf);
exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while executing Auto Withdrawal sp_create_task procedure. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_create_task;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_transfer_process
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     in_current_date                    in             date,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_transfer_process';
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    v_fitem_id                             object.object_id%type;
    v_most_rcnt_invoice                 object.object_id%type;
    v_current_date_time                       date := pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_auto_transfer_bts_id);
    v_fitrx_eff_date                    date;
    v_update                            char := 'T';

    v_billing_account_id                object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id);

cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            status_enum = gState_BTS_InProcess
        order by
            fitransaction_id;

begin

     for r_fitransaction in c_fitransaction
     loop
          v_fitrx_eff_date := to_date( pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            r_fitransaction.fitransaction_id,
                                            29709246  --get FITrx effective date
                                        ),
                                        pkg_os_constant.DragonDateFormatDefault);

          pkg_db_cashpost.sp_fitransaction_process
          (
               in_session_id            =>   in_session_id,
               in_transaction_id        =>   in_transaction_id,
               in_fitransaction_id      =>   r_fitransaction.fitransaction_id,
               in_batrxset_id           =>   in_auto_transfer_bts_id,
               in_billing_acc_id        =>   v_billing_account_id,
               out_fitem_id             =>   v_fitem_id,
               in_effective_date        =>   to_char(v_fitrx_eff_date, pkg_os_constant.DragonDateFormatDefault )
          );

     if v_session_control.glogging_full
    then

        pkg_os_logging.sp_log
        (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Processed FITransaction ID: '
                ||r_fitransaction.fitransaction_id||
                ' FItem was created: '
                ||v_fitem_id
        );
    end if;

    v_most_rcnt_invoice := pkg_os_object_io.fn_object_bv_path_get
                                (
                                    in_session_id,
                                    in_transaction_id,
                                    v_fitem_id,
                                    '29721246.29899946'
                                );

    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_fitem_id, pkg_db_cash_apply.gbv_FitemRefTargetPolicyTxn, v_most_rcnt_invoice );

    --Update FItransaction Datamart
    pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_fitem_id, v_update );

    pkg_db_cash_apply.sp_auto_cash_apply_cashpost
    (
        in_session_id,
        in_transaction_id,
        v_billing_account_id,
        in_auto_transfer_bts_id,
        v_fitem_id,
        io_action_outcome_id
    );

    if v_session_control.glogging_full
    then

        pkg_os_logging.sp_log
        (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '... Processed Auto Cash Apply for FITransaction ID: '
            ||r_fitransaction.fitransaction_id
        );

    end if;

          --Update FItransaction Datamart
          pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

     end loop;

      pkg_db_cashpost.sp_set_batch_processed
    (
        in_session_id,
        in_transaction_id,
        in_auto_transfer_bts_id,
        io_action_outcome_id,
        v_current_date_time
    );

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_auto_transfer_bts_id, pkg_os_constant_bv.gbv_genobjobjectstate, 39846 ); --set Processed status
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_auto_transfer_bts_id, pkg_db_cashpost.gbv_BillAccTrxSet_ProcessDate, to_char(in_current_date, pkg_os_constant.dragondateformatdefault) ); --set Process Date
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_auto_transfer_bts_id, pkg_db_object.gbv_FITrxSet_AccntingPeriod, pkg_db_functions.fn_get_fitransset_acct_prd(in_session_id,in_transaction_id,in_auto_transfer_bts_id));

  pkg_db_gl_transaction.sp_search_gl_entries
  (
      in_session_id ,
      in_transaction_id ,
      in_auto_transfer_bts_id
  );

  pkg_cs_db_dxf_exoskeleton.sp_create_exoskeleton
  (
      in_session_id,
      in_transaction_id,
      in_auto_transfer_bts_id,
      io_action_outcome_id
  );

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while executing Auto Withdrawal process procedure. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_auto_transfer_process;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_policy_auto_withdrawal
--
--   %USAGE
--        This is used in the case when a policy has an automatic cash withdrawal method such as Debit-Card associated with
--        it, and we wish to schedule a withdrawal associated with a term payment schedule.
--
--        Note that this use-case is different when we are doing account bill, and the withdrawals run on a schedule dictated by the billing account's
--        payment profile and frequency.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_id                        Policy Image Id
--   %PARAM    in_current_date                     The current date
--   %PARAM    in_advance_days                     The days before the scheduled withdrawal date we should create the auto-withdrawal object.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_policy_auto_withdrawal
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_id                       in             object.object_id%type,
     in_current_date                    in             date,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_advance_days                    in             number default 0
) as

      v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_auto_withdrawal';
      v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

      v_policy_term_id                   object.object_id%type;
      v_billing_account_id               object.object_id%type;
      v_installment_id                   object.object_id%type;

      v_policy_payment_mode              integer;
      v_billing_due_date                 date;
      v_balance                          float := 0;
      --v_invoiced_tf                      number;
      v_auto_withdrawal_bts_id           object.object_id%type;
      v_auto_withdrawal_bt_id            object.object_id%type;
      v_current_date                     date;

      v_account_level_due                float := 0;
      v_total_due                        float := 0;
      v_batch_type                       integer;
      v_batch_payment_mode               integer;
      v_batch_posted_date                object_bv_value.business_variable_value%type;
      v_external_batch_no                object_bv_value.business_variable_value%type;
      v_fitrx_payment_mode               integer;

      v_withdr_req_list                  object_tt;
      v_withdr_req_list2                 pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;  --OSPRODUCT-8537
      v_withdr_req_index                 number;
      v_withdr_req_index2                number; --OSPRODUCT-8537
      v_pymntsch_withdrawal_date         date;
      v_withdr_req_inst_id               object.object_id%type;
      v_payment_profile                  object.object_id%type;
      v_cash_profile                     object.object_id%type;
      v_withdr_req_id                    object.object_id%type;
      v_req_payment_mode_id              object_bv_value.business_variable_value%type;
      v_req_cash_profile                 object.object_id%type;
      v_payment_mode_id                  object_bv_value.business_variable_value%type;
      v_req_withdrw_acc                  char := 'F';
      v_total_num_items                  number :=0;   -- ddwidev-450
      v_req_fitrx_id                     object.object_id%type;
      v_entered_by                       varchar2(100) := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_session_id, '210086.211882');

      v_schd_withdrw_id                  object.object_id%type;
      v_schd_try_task_status             char := 'F';
      v_cc_expired                       char := 'T';
      v_cc_expiration_month              object_bv_value.business_variable_value%type;
      v_cc_expiration_year               object_bv_value.business_variable_value%type;
      v_cc_exp_task_num                  number;
      v_add_days                         number;
      v_auto_policy_susp                 number;
      v_term_bill_status_id              number;
      v_term_Suspend_status_id           number;  -- OSPRODUCT-10713
      v_prev_try_id                      object.object_id%type;
      v_prev_try_state                   object_state.object_state_id%type;
      v_update                           char := 'T';
	v_pol_tot_writeoff_amount          number;  -- DDWIDEV-654
    v_prop_incl_writeoff_amt           pd_property.pd_property_value%type  :=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_policy_id , gPDProp_incl_writeoff_amt );  -- DDWIDEV-654
      v_prop_cashPostOnAcct_TF           pd_property.pd_property_value%type  :=  nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_policy_id,gPDProp_CashPostOnAccount_TF),'F');
      v_prop_multipleBATS_TF             pd_property.pd_property_value%type  :=  nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_policy_id,gPDProp_oneormultipleBATS),'T');  --OSPRODUCT-8537
      v_bats_amount                      float :=0;--OSPRODUCT-10810
      v_exp_cc_prop                      pd_property.pd_property_value%type  :=  nvl(pkg_os_product.fn_product_property_get(in_policy_id,19448),0); --OSPRODUCT-12663
      v_prop_includePastDuesWith_TF      pd_property.pd_property_value%type  :=  nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_policy_id,13848),'F');  --OSPRODUCT-26258
	   
	   /*ADDED new parameter in_policy_id under OSPRODUCT-1764 */
      cursor c_installment
      is
          select
               *
          from
               dragon_scheduled_installment
          where
               policy_id = in_policy_id
          and
               pkg_db_functions.fn_get_installment_balance_amt(in_session_id, in_transaction_id, installment_id,in_policy_id) > 0
          and
               withdrawal_date is not null
          and
               ( ( withdrawal_retry_date is null and  TRUNC(withdrawal_date)       <= trunc(in_current_date)
               and pkg_db_functions.fn_get_installment_balance_amt(in_session_id, in_transaction_id, installment_id,in_policy_id) > 0
               and ( withdrawal_request is null or (v_prop_includePastDuesWith_TF = 'T' and  withdrawal_request is not null))--OSPRODUCT-26258
               )
                  or
                  ( trunc(withdrawal_retry_date ) = trunc(in_current_date) and pkg_db_functions.fn_get_installment_balance_amt(in_session_id, in_transaction_id, installment_id,in_policy_id) > 0 
                  and withdrawal_request is null )
                )
          AND
               decode
               ( 
                    nvl(pkg_os_product.fn_product_property_get(in_session_id,in_transaction_id,POLICY_ID,76148) , 'F' )
                    ,'T'
                    ,nvl(INVOICE_FLAG,0)
                    ,1
               ) = 1 -- UTXPRODUCT-806
          order by
               withdrawal_date;

begin

      if v_session_control.gLogging_Full
      then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Generating an automated policy related withdrawal for PolicyID:'||in_policy_id||' using CurrentDate:'||in_current_date );

      end if;

      v_policy_term_id := pkg_db_functions.fn_get_policy_current_term(in_session_id,in_transaction_id,in_policy_id);

      if v_policy_term_id is null
      then
            pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine a Policy-Term associated with PolicyID:'||in_policy_id||' using CurrentDate:'||in_current_date );

            io_action_outcome_id := gOutcome_NoRecordFound;
      end if;

      
      v_auto_policy_susp := pkg_db_suspension.fn_db_is_activity_suspended
                          (
                            in_session_id,
                            in_transaction_id,
                            in_policy_id,
                            pkg_db_suspension.gSuspend_EFTCC_Req_Activity
                          );

      v_term_bill_status_id :=  pkg_os_object_io.fn_object_bv_get
                            (
                                in_session_id,
                                in_transaction_id,
                                v_policy_term_id,
                                gbv_PolicyTerm_BillingStatus
                            );

      -- OSPRODUCT-10713                      
      v_term_Suspend_status_id := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id, 
                                      in_transaction_id,
                                      v_policy_term_id, 
                                      gbv_PolicyTermSuspensionStatus
                                 );                      
                            
      if v_session_control.gLogging_Full
      then
          pkg_os_logging.sp_log
          ( 
               in_session_id, 
               in_transaction_id, 
               v_procedure_name, 
               '... PolicyTermID: '||v_policy_term_id || 
               ' Term Suspension Status: '|| v_term_Suspend_status_id||
               ' Term Billing Status:' || v_term_bill_status_id ||
               ' Auto Policy Suspense ' || v_auto_policy_susp ||
               ' outcome: ' ||io_action_outcome_id
          );
      end if;  
      -- OSPRODUCT-10713                    

     if v_policy_term_id is not null and                                 --  Policy Term is not null 
     ((nvl(v_term_Suspend_status_id,0) not in (gState_PolicyTermBASusp)) --  Policy is not suspended
     or
     ( nvl(v_term_Suspend_status_id,0)  in (gState_PolicyTermBASusp)     --  Policy is suspended
     and nvl(v_auto_policy_susp,0) <> 1)                                 --  If Activity is valid to process. 
     )-- OSPRODUCT-10713
     then
            --UTPRODUCT-2934 billing account and profile info should be fetched from Installment
            /*-- get Billing Account
            v_billing_account_id     := pkg_os_object_io.fn_object_bv_path_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_policy_id,
                                      '212027.31866546.29713046'
                                 );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... BillingAccountID:'||v_billing_account_id );

            end if;

            if (v_billing_account_id is null)
            then
                  -- get Billing Account
                  v_billing_account_id     := pkg_os_object_io.fn_object_bv_path_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_policy_id,
                                                 '26590007.31866546.29713046'
                                            );
            end if;

            v_payment_profile        := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_policy_term_id,
                                                  gbv_PaymentProfile_ProfileUsed
                                             );

            v_cash_profile           :=  pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payment_profile,
                                                  gbv_PaymentProfile_ProfileUsed
                                             );

            v_payment_mode_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cash_profile, gbv_cashTrfProf_PymtMode );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... BillingAccountID:'||v_billing_account_id||' Cash profile ID: '||v_cash_profile||
                                        ' Payment mode: '||v_payment_mode_id );

            end if;
            */

																			 
				

          v_current_date := fn_get_sched_withdrawal_date(in_session_id, in_transaction_id, in_policy_id, in_current_date, v_payment_mode_id);

                           
          -- DDWIDEV-654
          -- Get value for the business variable 'Policy Total Write Off Amount(34066246)'
          --
          v_pol_tot_writeoff_amount := 0;

          --
          -- Logic to Include Write-off Amount for EFT CC Withdrawals if PD property has 'T'.
          --
          if v_prop_incl_writeoff_amt = 'T' then
               v_pol_tot_writeoff_amount := abs(
                                                 nvl(
                                                       pkg_os_object_io.fn_object_bv_get
                                                       (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         in_policy_id,
                                                         gbv_PolicyTotalWriteOffAmount   -- DDWIDEV-654
                                                       ),
                                                       0)
                                                    );
          end if;
          -- DDWIDEV-654
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Policy ID: '||in_policy_id ||
                    ':write-Off Amount: '||in_policy_id||
                    ':Include Write-off Amount for EFT CC Withdrawals:' ||v_prop_incl_writeoff_amt||
                    ':Policy Writeoff Amount:' || v_pol_tot_writeoff_amount
               );

          end if;

         for r_installment in c_installment
         loop

               v_installment_id := r_installment.installment_id;
               v_billing_account_id :=  r_installment.billing_account_id;  
               if r_installment.payer_id is not null then
                                             
                    v_payment_profile        := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         r_installment.payer_id,
                         pkg_db_profiles.gbv_TermPayerPrefPayProf --UTPRODUCT-3271
                    );
               else 
                    v_payment_profile        := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_term_id,
                         gbv_PolicyTerm_PrefPaymentProf
                    );
               end if;

               v_cash_profile           :=  pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_payment_profile,
                    gbv_PaymentProfile_ProfileUsed
               );

               v_payment_mode_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cash_profile, gbv_cashTrfProf_PymtMode );

               if v_session_control.gLogging_Full
               then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... BillingAccountID:'||v_billing_account_id||' Cash profile ID: '||v_cash_profile||
               ' Payment mode: '||v_payment_mode_id );

               end if;
                                        
                                        
               if (v_cash_profile is not null and v_payment_mode_id is not null)
               then
                    
                    -- UTPRODUCT-4339
                    if v_payment_mode_id in ( gPolicyPaymentMode_CC , gpolicypaymentMode_EFT) then
                       				  

                    if v_payment_mode_id = gPolicyPaymentMode_CC
                    then
                        v_cc_expiration_month :=  trim(to_char(pkg_os_object_io.fn_object_bv_get
                                                     (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_cash_profile,
                                                          gbv_CashTransferProf_CCMonth

                                                      ),'00')
                                                 );

                        v_cc_expiration_year :=   pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_cash_profile,
                                                    gbv_CashTransferProf_CCYear
                                               );

                        if ( to_char(v_current_date, 'YYYYMM') <= concat(v_cc_expiration_year,v_cc_expiration_month) )
                        then
                              v_cc_expired := 'F';

                        else
                              v_cc_expired := 'T';

                        end if;

                        if v_session_control.gLogging_Full

                        then

                              pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, ' CC expired: '||v_cc_expired || ' CC exp month and year: '||concat(v_cc_expiration_month,v_cc_expiration_year) );

                        end if;
						 

													
					  

																																	 

						 

																																	   
					  
					  
								  
																									
					  
												   

					  
																									   
					  
														  
														  
															   
																								  
																  
																				 
																					 
																				
																												 
																   
																   
																
                    end if;

                    if v_session_control.gLogging_Full
                    then

                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, ' Using Date: '||v_current_date );
						  
											
												
											   
																
																   
																											  
																					 
						   

                    end if;

														  
							

																			   

                    if (v_payment_mode_id <> gPolicyPaymentMode_CC or (v_payment_mode_id = gPolicyPaymentMode_CC and (v_cc_expired = 'F' or v_exp_cc_prop = 1)))  --OSPRODUCT-12663
                    then
																	  
																						
																							
																						   
																									  
																	   
                         v_schd_withdrw_id := null;
								  

                         v_schd_withdrw_id := pkg_os_object_io.fn_object_bv_get
                                                                (
                                                                     in_session_id,
                                                                     in_transaction_id,
                                                                     v_installment_id,
                                                                     gbv_SchPymtInst_LastSchWithd
                                                                );
                         if v_schd_withdrw_id is not null
                         then
															  
																		   
																			   
																		   
																									 
															   

                               v_prev_try_id := pkg_os_object_io.fn_object_bv_path_get
                                                        (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_schd_withdrw_id,
                                                        gbv_BATS_CurrentAutoTransfTry --'29743646.32886840' --ref current fitransaction --_Reference_Current Receipt Request Try
                                                        );

                               v_prev_try_state := pkg_os_object_io.fn_object_bv_get
                                                        (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_prev_try_id,
                                                        pkg_os_constant_bv.gbv_genobjobjectstate
                                                        );

                               if nvl(v_prev_try_state,gState_Try_Rejected) = gState_Try_Rejected
                               then
														
																		  
											  
														   
											   
																				  
											 
																					
											 
																							

                                     v_schd_try_task_status := 'F';
										

                                     select
                                           decode(count(1),0,'T','F')
                                               into
                                               v_schd_try_task_status
                                     from
                                           dragon_task
                                     where
                                           task_object_id = v_schd_withdrw_id
                                     and
                                           task_type_id = gTask_SchFundTransfer
                                     and
                                           task_status_id  in ( 2,42346 ); -- In Complete, overdue--UTPRODUCT-4359

                               elsif v_prev_try_state in ( gState_Try_Resolved,gState_Try_Successful) --Previous Try Status = Resolved
                               then

                                     v_schd_try_task_status := 'T';

                               else --Previous Try Status = Failed or other

                                     v_schd_try_task_status := 'F';

                               end if;
								  

                         end if;
										   
															  
																  
																 
																					  
																								
																			 
											

                         if v_session_control.gLogging_Full
                         then

                               pkg_os_logging.sp_log
                                     (
                                           in_session_id,
                                           in_transaction_id,
                                           v_procedure_name,
                                           'Try object ID: '||v_schd_withdrw_id||
                                           ' Try Task Status : '||v_schd_try_task_status ||
                                           ' CC expired: '||v_cc_expired
                                     );

                         end if;
												   
																	  
																		  
																		 
																														  
												   

                         --in case if for this installment previously was created Request need to check if Task raised during response failure for Try object is Completed
                         --also for CC payment method CC should be expired
                         if (v_schd_withdrw_id is null or (v_schd_withdrw_id is not null and v_schd_try_task_status = 'T'))
                         then
                               if v_session_control.gLogging_Full
                               then

                                       pkg_os_logging.sp_log
                                             (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_procedure_name,
                                                   '......... Looping installment ID: '||r_installment.installment_id
                                            );

                               end if;
																		 
																						  
																							  
																							 
																										 

                               -- UTPRODUCT-2934: Instead of BV get, should we get it from cursor?
                               --get Withdrawal Date of PolicyTermScheduledPaymentInstallment
                               v_pymntsch_withdrawal_date  := trunc(to_date(

																   
																 
                                                                   pkg_os_object_io.fn_object_bv_get
                                                                   (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_installment_id,
                                                                       gbv_TermSchPymtInstl_WithDate
																	   
																											

                                                                   ),
                                                                   pkg_os_constant.dragondateformatdefault));

                               v_billing_due_date :=   to_date
                                                           (
                                                                pkg_os_object_io.fn_object_bv_get
                                                               (
                                                                     in_session_id,
                                                                     in_transaction_id,
                                                                     v_installment_id,
                                                                     gbv_TermSchPayment_BillingDue
                                                                ),
                                                                pkg_os_constant.DragonDateFormatDefault

                                                           );

                               if v_session_control.gLogging_Full
                               then

                                     pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, ' Withdrawal Date: '||v_pymntsch_withdrawal_date||' Billing Due Date: '||v_billing_due_date );
														 

                               end if;
																					 
										   
															  
																  
																	 
																	   
																	   
																															
																 
											

                               v_withdr_req_list      := new object_tt();
                               v_withdr_req_id := 0;

                               if v_session_control.gLogging_Full
                                    then
                                          pkg_os_logging.sp_log
                                          ( 
                                             in_session_id, 
                                             in_transaction_id, 
                                             v_procedure_name, 
                                            ' v_prop_multipleBATS_TF: '||v_prop_multipleBATS_TF
                                            ||' v_billing_account_id: '||v_billing_account_id
                                            ||' in_session_id: '||in_session_id
                                            ||' in_transaction_id: '||in_transaction_id
                                          );
                               end if; 

                               if v_prop_multipleBATS_TF = 'T'  --OSPRODUCT-8537 Create one ( F)  or individual BATRX ( T)  for missed instalments 
                                    then
                                          -- get the children of type BillingTransactionSet under current Billing Account with appropriate withdrawal date
                                          /*pkg_os_object_search.sp_object_with_attribute_get
                                                (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_billing_account_id,
                                                      gObjType_BillingTrxSet,
                                                      gbv_BTS_WithdrawalDate,
                                                      to_char(v_pymntsch_withdrawal_date,pkg_os_constant.dragondateformatdefault),
                                                      v_withdr_req_list
                                                );
                                            */
                                          --replaced pkg_os_object_search.sp_object_with_attribute_get with datamart under OSPRODUCT-21391
                                            for bats in (
                                                            select
                                                                   billingaccounttrxset_id
                                                            from
                                                                  dragon_billingaccounttrxset
                                                            where
                                                                 parent_billing_account_id = v_billing_account_id
                                                            and
                                                                 pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id ,billingaccounttrxset_id,gbv_BTS_WithdrawalDate) = to_char(v_pymntsch_withdrawal_date,pkg_os_constant.dragondateformatdefault)
                                                         ) loop
                                                  v_withdr_req_list.extend;
                                                  v_withdr_req_list(v_withdr_req_list.count) := new object_ot(bats.billingaccounttrxset_id,2365946,v_billing_account_id, null);

                                            end loop;
                               else           
                                            select 
                                                   billingaccounttrxset_id
                                            bulk collect into 
                                                   v_withdr_req_list2
                                            from 
                                                  dragon_billingaccounttrxset
                                            where 
                                                 parent_billing_account_id=v_billing_account_id
                                            and 
                                                 batch_status_id=39946 --In-Process
                                            and 
                                                 session_id=in_session_id
                                            and 
                                                 transaction_id=in_transaction_id;
                                            
                                            if v_session_control.gLogging_Full
                                            then    
                                                pkg_os_logging.sp_log
                                                               ( 
                                                                  in_session_id, 
                                                                  in_transaction_id, 
                                                                  v_procedure_name, 
                                                                  ' Count of matching BATS '||v_withdr_req_list2.count
                                                                );
                                            end if;                 
    
                                            v_withdr_req_index2 := v_withdr_req_list2.first;
                                            
                                            while v_withdr_req_index2 is not null
                                              loop
                                                  v_withdr_req_list.extend;
                                                  v_withdr_req_list(v_withdr_req_list.count) := new     object_ot(v_withdr_req_list2(v_withdr_req_index2),2365946,v_billing_account_id, null);
                       
                                                  v_withdr_req_index2 := v_withdr_req_list2.next(v_withdr_req_index2);
                            
                                              end loop; 
                                                
                               end if;

                               v_withdr_req_index := v_withdr_req_list.first;
											  

                               --loop through billing account installment objects
                               while v_withdr_req_index is not null
                               loop

                                     if ( pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_withdr_req_list( v_withdr_req_index ).object_id, pkg_os_constant_bv.gbv_genobjobjectstate ) = gstate_bts_inprocess ) --check if Request is In Process
                                     then

                                           v_req_cash_profile     := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_withdr_req_list( v_withdr_req_index ).object_id, 32828640 ); --get associated cash profile
													
																		   
															 
																				
																					
																				   
																													
																											 
															  
													   

                                           v_req_payment_mode_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_req_cash_profile, gbv_cashTrfProf_PymtMode ); --get payment mode id

                                           if v_session_control.gLogging_Full
                                           then
                                                 pkg_os_logging.sp_log
                                                       (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_procedure_name,
                                                             ' Request Cash Profile ID: '||v_req_cash_profile||
                                                             ' Payment Mode ID: '||v_req_payment_mode_id
                                                       );
                                           end if;

																																													  
																 
																
                                           v_req_withdrw_acc  := 'F';
                                                                    
                                           CASE
                                           WHEN  v_payment_mode_id = gPolicyPaymentMode_EFT
                                           THEN
                                                 begin
                                                       if (
																										   
															   
																																													 
																																																				
															   
																																												   
																																																		  
															   
																																													
																																																			
															 
																
																						   
																   
														  
															 
														   
                                                             v_payment_mode_id = v_req_payment_mode_id
																
																						   
																   
														  
														 

                                                       And  fn_check_cash_profile(in_session_id,in_transaction_id,v_cash_profile,v_req_cash_profile,gPolicyPaymentMode_EFT) = 'T'
                                                           )
                                                       then
                                                             v_req_withdrw_acc := 'T';
                                                       end if;
                                                 end;
                                           WHEN v_payment_mode_id = gPolicyPaymentMode_CC
                                           THEN
                                                                    
                                                 begin
                                                       if (
                                                             v_payment_mode_id = v_req_payment_mode_id
                                                       And
                                                             pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_profile,gbv_cashTrfProf_CCTokenNumber )
                                                                   = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_req_cash_profile,gbv_cashTrfProf_CCTokenNumber ) --Token number
                                                       And
                                                             pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_profile,gbv_CashTransferProf_CCYear )
                                                                   = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_req_cash_profile,gbv_CashTransferProf_CCYear ) --Exp Year
                                                       And
                                                             pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_profile,gbv_CashTransferProf_CCMonth )
                                                                   = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_req_cash_profile,gbv_CashTransferProf_CCMonth ) --Exp Month
                                                       )
                                                       then
                                                             v_req_withdrw_acc := 'T';
                                                       end if;
                                                 end;
                                           ELSE --Cheque
                                                 begin
                                                       if ( v_payment_mode_id = v_req_payment_mode_id ) --if it's cheque payment mode then combining
                                                       then
                                                             v_req_withdrw_acc := 'F';
                                                       end if;
                                                 end;
                                           END case;

                                           if (v_req_withdrw_acc = 'T')
                                           then
																																				  
																																  
																					 
																									  
																										  
																										
																											   
																												 
																									
																					  

                                                 v_withdr_req_id := v_withdr_req_list( v_withdr_req_index ).object_id; --we have the same withdrawal date and payment method, so no need to create new object
                                                 v_req_fitrx_id := 0;
                                                 --get FITransaction child of this Request that has reference to current Policy if such exist
                                                 v_req_fitrx_id          := pkg_os_object_search.fn_object_with_attribute_get
                                                                               (
                                                                                   in_session_id,
                                                                                   in_transaction_id,
                                                                                   v_withdr_req_id,
                                                                                   gObjType_FITransaction,
                                                                                   gbv_FITrxRefActionPolicy,
                                                                                   in_policy_id
                                                                               );

                                                 if v_session_control.gLogging_Full
                                                 then
                                                       pkg_os_logging.sp_log
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_procedure_name,
                                                             '... Found Request object that suits: '
                                                             ||v_withdr_req_id
                                                         );

                                                end if;
														  
																				 
															 
																				
																					
																				   
																													   
																				  
															  
															 

                                                 if nvl(v_req_fitrx_id,0) <> 0
                                                 then
                                                       pkg_os_logging.sp_log
                                                       (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_procedure_name,
                                                             '... Found Request FITransaction object that suits: '
                                                             ||v_req_fitrx_id
                                                       );
                                                 end if;

                                                 exit;
                                           end if; -- end of v_req_withdrw_acc='T'
                                     end if; -- end of bats status = inprocess

                                     v_withdr_req_index := v_withdr_req_list.next( v_withdr_req_index );

										
																						  
											  
													 
																										   
																										   
																								 
                               end loop;
																						
											  
													 
																										
																										  
																											

                               CASE
                                     WHEN  v_payment_mode_id = gPolicyPaymentMode_EFT
                                     THEN
                                           begin
                                                  v_batch_type         := gBTSType_Sched_Direct_Debit;
                                                  v_batch_payment_mode := gBTSPayMode_EFTDirectDebit ;
                                                  v_fitrx_payment_mode := gFITrxPayType_EFT;
                                           end;
                                     WHEN v_payment_mode_id = gPolicyPaymentMode_CC
                                     THEN
                                           begin
                                                  v_batch_type         := gBTSType_Scheduled_CC_DC;
                                                  v_batch_payment_mode := gBTSPaymentMode_CreditCard;
                                                  v_fitrx_payment_mode := gFITrxPaymentType_CreditCard;
													
											 

                                           end;
                                     ELSE --for cheque payment type
                                           begin
                                                  v_batch_type         := gBTSType_Scheduled_CC_DC;
                                                  v_batch_payment_mode := gBTSPaymentMode_CreditCard;
                                                  v_fitrx_payment_mode := gFITrxPaymentType_CreditCard;
                                           end;
                               END CASE;
																			
																	  
												  

                               --create new ScheduledWithdrawalRequest object if we haven't found existing one
                               if ( nvl( v_withdr_req_id,0 ) = 0 And v_pymntsch_withdrawal_date is not null)
                               then
                                     pkg_os_object.sp_object_create
                                           (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  gObjType_BillingTrxSet,
                                                  v_billing_account_id,
                                                  v_withdr_req_id
                                           );

                                     if v_session_control.gLogging_Full
                                     then
                                            pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Created Scheduled Withdrawal FITransactionSetID:'||v_withdr_req_id );

                                     end if;
																		   
												 
																	 
																		 
																	   
																			  
																																  
												  

                                     --set Withdrawal Date
                                     pkg_os_object_io.sp_object_bv_set
                                           (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_withdr_req_id,
                                                  gbv_BTS_WithdrawalDate,
                                                  to_char(v_pymntsch_withdrawal_date,pkg_os_constant.dragondateformatdefault)
                                           );

															
																		   
												 
																	 
																		 
																	   
																				
																	 
												  

                                     --set Cash Profile
                                     pkg_os_object_io.sp_object_bv_set
                                           (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_withdr_req_id,
                                                  gbv_BATrx_RefAsscProfile,
                                                  v_cash_profile
                                           );

																				
																																				

                                     --Update installment before proceeding
                                     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_installment_id, v_update );
															
																
											  
															
											   
																						 
											 
																							 

                                     --v_total_due := r_installment.balance_amount;
                                     select
                                           sum(balance)
                                           into v_total_due
                                     from
                                           dragon_fitem
                                     where
                                           billing_account_id = v_billing_account_id
                                     and
                                           installment_id= r_installment.installment_id;

                                     v_batch_posted_date := to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault  );
                                     v_external_batch_no := 'Batch'||v_batch_posted_date;

                                     v_total_due         := nvl(v_total_due,0) + nvl(v_pol_tot_writeoff_amount,0); -- DDWIDEV-654
																						
											

                                     --
                                     --   Now decorate the scheduled withdrawal ...
                                     --
																																									
																																							
																																													
																																										  
																																											  
																																							 

                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, pkg_os_constant_bv.gbv_GenObjObjectState,  gState_BTS_InProcess );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Type, v_batch_type );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_External_Batch_ID, v_external_batch_no );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_Amount, v_total_due );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_NumItems, 1 );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Entry_Method, gBTSEntry_Scheduled_Process );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Date_Posted, v_batch_posted_date);
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Payment_Mode, v_batch_payment_mode  );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_auto_cash_apply, 1 );

                                     -- Set Batch Entry Type
                                     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_withdr_req_id, pkg_db_object.gbv_fitrxset_entrytype, pkg_db_cash_apply.gBatchEntryMethod_System);

                                     -- Set Batch Entered By
                                     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_withdr_req_id, pkg_db_cash_apply.gbv_fitrxsetenteredby, v_entered_by);

																		
												 
																	 
																		 
																			  
																	   
																	 
												  

                                     pkg_os_object.sp_object_create
                                           (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  gObjType_FITransaction,
                                                  v_withdr_req_id,
                                                  v_req_fitrx_id
                                           );

																			
											  

                                     if v_session_control.gLogging_Full
                                     then

                                            pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Created Withdrawal FITransactionID:'||v_req_fitrx_id );
                                     end if;
											

                                     --
																																											
                                     -- Now set the BVs for FITransaction
                                     --
																		   
												
																																											  
																																														
																																												   
												 

                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, pkg_os_constant_bv.gbv_GenObjObjectState, gFITrxStatus_Identified );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransactionType, gFITrxType_CashPost );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransaction_EffDate, to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault  ) );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransaction_GLDate, to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault  ) );
                                     if v_prop_cashPostOnAcct_TF = 'F'
                                       then
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrxRefActionPolicy, in_policy_id );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, pkg_db_cashpost.gbv_FITrxRefPolicy, in_policy_id );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_AssocPolicyTerm, v_policy_term_id );
                                     end if;

                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_PaymentType, v_fitrx_payment_mode );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_AssociatedAccount, v_billing_account_id );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_Amount, v_total_due );
                                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_CurrentTransaction, v_req_fitrx_id );

                               elsif ( nvl( v_withdr_req_id,0 ) <> 0 ) --if there is already exist Request object
                                 then

                                     --v_req_fitrx_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_CurrentTransaction);
                                     v_req_fitrx_id := pkg_os_object_search.fn_object_with_attribute_get    --OSPRODUCT-4207  
                                                                               (
                                                                                   in_session_id,
                                                                                   in_transaction_id,
                                                                                   v_withdr_req_id,
                                                                                   gObjType_FITransaction,
                                                                                   gbv_FITrxRefActionPolicy,
                                                                                   in_policy_id
                                                                               );
                                     if ( nvl( v_req_fitrx_id,0 ) <> 0 ) --if there is already exist FITransaction object
                                     then
                                           v_balance    :=     pkg_os_object_io.fn_object_bv_get
                                                                         (
                                                                             in_session_id,
                                                                             in_transaction_id,
                                                                             v_req_fitrx_id,
                                                                             gbv_FITrx_Amount
                                                                         );
                                           pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Old balance: '||v_balance||' for FITrx: '||v_req_fitrx_id );

                                           pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_installment_id, v_update );

                                           v_balance := v_balance + r_installment.balance_amount;

                                           pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... New balance: '||v_balance||' for FITrx: '||v_req_fitrx_id );

                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_Amount, v_balance );

                                                v_bats_amount := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_Amount)+r_installment.balance_amount;  
                                                pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_Amount, v_bats_amount ); -- OSPRODUCT-10810																																																			
                                     else


                                           pkg_os_object.sp_object_create
                                                 (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       gObjType_FITransaction,
                                                       v_withdr_req_id,
                                                       v_req_fitrx_id
                                                 );

                                           if v_session_control.gLogging_Full
                                           then
                                                 pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Created Withdrawal FITransactionID:'||v_req_fitrx_id );

                                           end if;


                                           pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_installment_id, v_update );

                                           --v_balance                :=     r_installment.balance_amount;
                                           select
                                                 sum(balance)
                                                 into v_balance
                                           from
                                                 dragon_fitem
                                           where
                                                 billing_account_id = v_billing_account_id
                                           and
                                                 installment_id= r_installment.installment_id;


                                           v_total_num_items      :=      NVL(pkg_os_object_io.fn_object_bv_get
                                                                                     (
                                                                                         in_session_id,
                                                                                         in_transaction_id,
                                                                                         v_withdr_req_id,
                                                                                         gbv_bts_total_numitems
                                                                                     ), 1);


                                           v_total_num_items := v_total_num_items + 1;

                                           --
                                           -- Now set the BVs for FITransaction
                                           --


                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, pkg_os_constant_bv.gbv_GenObjObjectState,gFITrxStatus_Identified );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransactionType, gFITrxType_CashPost );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransaction_EffDate, to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault  ) );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITransaction_GLDate, to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault  ) );
                                           if v_prop_cashPostOnAcct_TF = 'F'
                                            then
                                                 pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrxRefActionPolicy, in_policy_id );
                                                 pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, pkg_db_cashpost.gbv_FITrxRefPolicy, in_policy_id );
                                                 pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_AssocPolicyTerm, v_policy_term_id );
                                           end if;
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_PaymentType, v_fitrx_payment_mode );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_AssociatedAccount, v_billing_account_id );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_req_fitrx_id, gbv_FITrx_Amount, v_balance );
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_NumItems, v_total_num_items );
										   v_bats_amount := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_Amount)+v_balance;  
                                           pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_Total_Amount, v_bats_amount ); -- OSPRODUCT-10810
                                           --pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_withdr_req_id, gbv_BTS_CurrentTransaction, v_req_fitrx_id );
                                           pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_withdr_req_id, v_update );


                                     end if; --if there is already exist FITransaction object

                               end if; -- end of  v_withdr_req_id,0 ) = 0

                               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_installment_id, gbv_TermSchPayment_WithBTS, v_withdr_req_id );

                               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_req_fitrx_id, v_update );
                               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_withdr_req_id, v_update );
                               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_installment_id, v_update );
                               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_account_id, v_update );


                         else

                               pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '...... There is a previous try with ID: ' || v_schd_withdrw_id ||' that resulted in an error and is not resolved.');

                         end if;--if (v_schd_withdrw_id is null or (v_schd_withdrw_id is not null and v_schd_try_task_status = 'T'))

                         --
                         -- DDWIDEV-654
                         -- Reset to ZERO so that system can add write off amount once.
                         --
                         v_pol_tot_writeoff_amount := 0;

															
                    else

                        pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '...... Credit Card used in cash profile ID: ' || v_cash_profile || ' is expired. Please check CC details.' );

                        io_action_outcome_id := gOutcome_PaymentProfExp;
                        return;

                    end if;--end of if (v_payment_mode_id <> 2 or (v_payment_mode_id = 2 and v_cc_expired = 'F'))

               else
                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... payment mode is Billme. So, no scheduled batch is created'
                              );

                         end if;
                         
                    end if;  
                    -- end UTPRODUCT-4339   
                         
               else
                    io_action_outcome_id := gOutcome_NoRecordFound;
                    return;
               end if; --if (v_cash_profile is not null and v_payment_mode_id is not null)         

					  
																																													

         end loop; -- end of installment loop
                            
          if (v_installment_id is null)

          then
                pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '...... No suitable installment found for policy ID: ' || in_policy_id );

                io_action_outcome_id := gOutcome_NoRecordFound;
                return;

          else
                io_action_outcome_id := pkg_os_constant.goutcome_ok;

          end if;


      else
            io_action_outcome_id := gOutcome_NoRecordFound;
      end if; -- if v_policy_term_id is not null

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Policy Account Auto Withdrawal process. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_policy_auto_withdrawal;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_transfer_try_create
--
--   %USAGE
--        For a given auto-withdrawal object, try to execute the auto-withdrawal. This involves getting details of the preferred cash-transfer profile
--        and creating a request in the cash-transfer request table. The request table is then used to create a message to the payment gateway.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    in_manual_try_id                    If the user wants to manually create a try object, principally to use a different cash-transfer profile, that object's ID would be passed in here.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_transfer_try_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     in_current_date                    in             date,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_manual_try_id                   in             object.object_id%type default null
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_transfer_try_create';
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    v_BTS_type                          lookup_list_value.lookup_enum%type;
    v_policy_id                         object.object_id%type;
    v_billing_account_id                object.object_id%type;
    v_cash_xfer_objusage_id             object.object_id%type;
    v_cash_xfer_profile_id              object.object_id%type;
    v_current_try_id                    object.object_id%type;
    v_current_try_state                 object_state.object_state_id%type;
    v_try_id                            object.object_id%type := in_manual_try_id;
    v_try_type                          lookup_list_value.lookup_enum%type;
    v_try_amount                        object_bv_value.business_variable_value%type;
    v_fitem_id                          object.object_id%type;
    v_most_rcnt_invoice                 object.object_id%type;
    v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
    v_current_date_time                 date := pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_auto_transfer_bts_id);
    v_fitrx_eff_date                    date;
    v_update                            char := 'T';
    v_consolidatedTry_SchFunds_tf       object_bv_value.business_variable_value%type;

    cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            status_enum = gFITrxStatus_Identified
        order by
            fitransaction_id;

    --GCNA-947
    cursor c_installment(in_policy_id object.object_id%type)
      is
        select
          *
        from
          dragon_scheduled_installment
        where
          withdrawal_request = in_auto_transfer_bts_id
        and
          policy_id = in_policy_id;

    cursor c_fitransaction_adhoc
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            fitransaction_type_id = 603
        order by
            fitransaction_id;

begin

      v_billing_account_id          := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id);
      v_BTS_type                    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BTS_Type  );
      v_consolidatedTry_SchFunds_tf := nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gPd_Property_ConsolidateTry_TF),'F');

      pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '|| Schedule AutoTransfer try create process Initiated ||' ||
                  ' bats Id is ' || in_auto_transfer_bts_id ||
                  ' Property Consolidated Try for Sch funds ' ||
                   v_consolidatedTry_SchFunds_tf ||
                   ' Bats Type id is ' ||
                   v_BTS_type
            );

      if v_BTS_type = gBTSType_SinglePayment
      then

            for r_fitransaction_adhoc in c_fitransaction_adhoc
            loop
                  v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction_adhoc.fitransaction_id, gbv_FITrx_RefCurrentTry );

                  if v_current_try_id is not null then

                        v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

                  end if;

                  if (v_current_try_id is null) or ( v_current_try_state = gState_Try_Resolved or nvl(v_current_try_state,0) = gState_Try_Invalidated) then

                        pkg_os_object.sp_object_create

                        (
                              in_session_id,
                              in_transaction_id,
                              gObjType_Auto_Transfer_Try,
                              in_auto_transfer_bts_id,
                              v_try_id
                        );

                        v_cash_xfer_profile_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATrx_RefAsscProfile ); --get CashTransferProfile from Request
                        v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction_adhoc.fitransaction_id, gbv_FITrx_Amount );

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_RefCTProfileUsed, v_cash_xfer_profile_id ); --Associate cash-transfer profile
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_AssFITransaction, r_fitransaction_adhoc.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction_adhoc.fitransaction_id, gbv_FITrx_RefCurrentTry, v_try_id);
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_trx_type, gTry_TrxType_Withdrwal );

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry, v_try_id);

                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction_adhoc.fitransaction_id, v_update );

                  end if;

            end loop;

                  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
                  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

                  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
      else

            if v_session_control.gLogging_Full
            then
                  pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Trying Automated Cash Transfer Transaction Set:'||in_auto_transfer_bts_id||' BTS Type:'||v_BTS_type||' PolicyID:'||v_policy_id );
            end if;

            if v_BTS_type not in ( gBTSType_Sched_Direct_Debit, gBTSType_Scheduled_CC_DC, gBTSType_Disbursement ) then

                pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... The type of BillingTransactionSet Type:'||v_BTS_type||' is not supported for auto transfer tries.' );
                raise no_data_found;

            end if;

            if v_BTS_type in ( gBTSType_Sched_Direct_Debit, gBTSType_Scheduled_CC_DC ) then

                  --If this is a Manual Try, then get the Cash Transfer Profile from the Try itself.
                  if v_try_id is not null then

                        v_cash_xfer_profile_id :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_try_id, gbv_Try_RefCTProfileUsed );

                  end if;

                  if v_cash_xfer_profile_id is not null then

                        if v_session_control.gLogging_Full
                        then
                              pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Using user-associated cash-transfer profile associated with pre-existing try object - Cash Transfer Profile ID:'||v_cash_xfer_profile_id );
                        end if;

                  else

                        -- Get the Active Payment Profile from the Account
                        v_cash_xfer_profile_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATrx_RefAsscProfile ); --get CashTransferProfile from Request


                        if v_session_control.gLogging_Full
                        then
                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Using Request to get the Cash Transfer Profile ID:'||v_cash_xfer_profile_id );

                        end if;

                  end if;

            end if; -- end of gBTSType_Scheduled_CC_DC

            --Ensure that there is a cash-transfer profile, otherwise, no point proceeding ...
            if v_cash_xfer_profile_id is null then

                  pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to find a valid cash-transfer profile for creating a new try for BTS-ID:'||in_auto_transfer_bts_id );

                  io_action_outcome_id := goutcome_norecordfound;
            else

                    v_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATS_CurrentAutoTransfTry);

                    v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Try exists a new try for BTS-ID:'||v_try_id || '::State '|| v_current_try_state );  --OSPRODUCT-2833

                    --   Unless this is a manually initiated try, create a new try object ...
                    for r_fitransaction in c_fitransaction   --OSPRODUCT-8537 moved the loop out
                    loop

                    if (nvl(v_consolidatedTry_SchFunds_tf,'F') = 'F' or(v_try_id is null) or  ( nvl(v_current_try_state,0) = gState_Try_Invalidated))then

                        

                              pkg_os_object.sp_object_create
                              (
                                      in_session_id,
                                      in_transaction_id,
                                      gObjType_Auto_Transfer_Try,
                                      in_auto_transfer_bts_id,
                                      v_try_id
                              );

                              --Associate cash-transfer profile ...
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_RefCTProfileUsed, v_cash_xfer_profile_id );

                              --Associate FITransaction
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_AssFITransaction, r_fitransaction.fitransaction_id );
                                                           
                              v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );
                  else        

                              v_try_amount    :=  nvl(v_try_amount,0) +  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

                  end if;
                              --Associate Try to FITransaction
                   pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_RefCurrentTry, v_try_id);

                              if v_session_control.glogging_full
                              then

                                    pkg_os_logging.sp_log
                                    (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          '... Created try object ID: '
                                          ||v_try_id||
                                          ' for FITransaction ID: '
                                          ||r_fitransaction.fitransaction_id
                                    );
                              end if;

                              --GCNA-947
                              v_policy_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_fitrxrefactionpolicy );

                              --run aging status update for policy
                              pkg_db_nightly_process.sp_update_aging_status
                              (
                                    in_session_id,
                                    in_transaction_id,
                                    v_policy_id
                              );

                              for r_installment in c_installment(v_policy_id)
                              loop
                                    --set Original Scheduled Request reference
                                    if (pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, r_installment.installment_id, gbv_SchPymtInst_LastSchWithd) is null)
                                    then
                                          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_installment.installment_id, gbv_SchPymtInst_CurrSchWithd, in_auto_transfer_bts_id );
                                    end if;

                                    --set Last Scheduled Withdrawal Request reference
                                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_installment.installment_id, gbv_SchPymtInst_LastSchWithd, in_auto_transfer_bts_id );

                              end loop;

                              --Set the type ...
                              if v_BTS_type in ( gBTSType_Sched_Direct_Debit, gBTSType_Scheduled_CC_DC ) then

                                    v_try_type := gTry_TrxType_Withdrwal;

                              end if;



                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_CashAppplyLevel, 1 ); --set invoice cash apply level

                              --pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, 32431831, 2 ); --set cash apply sub level

                              case v_bts_type
                              when gBTSType_Sched_Direct_Debit
                              then
                                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_CashSubCategEnum, gFITrxPayType_EFT ); --set Cash Sub-category for EFT
                              when gBTSType_Scheduled_CC_DC
                              then
                                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_CashSubCategEnum, gFITrx_CashSubCat_CreditCard ); --set Cash Sub-category for CC  --UTPRODUCT-5016
                              else
                                    if v_session_control.glogging_full
                                    then
                                          pkg_os_logging.sp_log
                                          (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          '... Undefined Scheduled Withdrawal Request type: ' ||
                                          v_bts_type
                                          );
                                    end if;
                              end case;

                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_trx_type, v_try_type );
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

                              --setting the reference Bats to Current Auto Transfer Try
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry, v_try_id);

                              if v_session_control.gLogging_Full
                              then
                                    pkg_os_logging.sp_log
                                    (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          '... Auto Try create with following details' ||
                                          ' bats Id is ' || in_auto_transfer_bts_id ||
                                          ' Try ID  ' ||v_try_id ||
                                          ' Amount is  ' ||v_try_amount
                                    );
                              end if;

                              -- Update the Try Datamart
                              pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

                              --Update FItransaction Datamart
                              pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

  
				              --Update Scheduled Withdrawal Request Datamart
                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );  
				  
                    end loop;

                   if nvl(v_consolidatedTry_SchFunds_tf,'F') = 'T'   --OSPRODUCT-8537
                   then

                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

                     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

                  end if; -- if v_try_id is null then

                  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

            end if; -- if v_cash_xfer__id is null then

      end if;

exception

     when others
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Auto Withdrawal Try creation process. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_auto_transfer_try_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_transfer_try_update
--
--   %USAGE
--        This is used to update the Try Object with the Try Response.
--        This proc is used by MT code to update the Try BVs
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--   %PARAM    in_try_status_success               This is 1 for Success and 2 for Failure
--   %PARAM    in_try_status_reason_code          This is a Code which specifies the reason for failure.
--   %PARAM    in_try_status_reason_desc          This describes in more detail the reason for failure.
--     %PARAM    in_current_date                    The current date - this is used for timestamping the recording of success or failure.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_withdraw_try_update
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                          in             object.object_id%type,
     in_try_status_id                   in             number,
     in_try_status_reason_desc          in             varchar2,
     in_processed_date                  in             date
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_auto_withdraw_try_update';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     --v_auto_transfer_bts_id             object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_try_id);
     v_reason_code                      char(1);

     --
     --   Datamart update ...
     --

     v_update                           char;

begin

     if in_try_status_id = gState_Try_Validated
     then

          v_reason_code := 'G';

     else

          v_reason_code := 'R';

     end if;

     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ConfResponseCode, v_reason_code );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ConfirmationDate, to_char( in_processed_date, pkg_os_constant.DragonDateFormatDefault  ) );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, in_try_status_id );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ConfResponseMsg, in_try_status_reason_desc );


     --
     -- Update the Try Datamart
     --

     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_try_id, v_update );


exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while updating the Try ID: '
               ||in_try_id||', for Scheduled Funds Confirmation process. '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_auto_withdraw_try_update;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_withdraw_try_test
--
--   %USAGE
--        In the lack of a functioning interface with a payment gateway, this procedure is used to simulate success and failure of automated cash-transfer tries.
--        Scheduled Fund Request Confirmation
--
--   %ALGORITHM
--        This mimics a response to a Try. If fails any try whose object-id (minus suffix) is divisible by three. and marks the others as successful.
--          This allows us to test the workflows which correspond to successful tries as well as that for unsuccessful tries.
--
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--     %PARAM    in_current_date                    The current date - this is used for timestamping the recording of success or failure.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_withdraw_try_test
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                              in               object.object_id%type,
     in_current_date                    in             date,
     io_outcome_id                         in out          outcome.outcome_id%type
) as

     v_result                              number;

begin

     --
     --     Check to see whether the Try Object ID is divisible by 3.
     --
     select mod(((in_try_id - mod(in_try_id,100))/100), 3 ) into v_result  from dual;

     if v_result = 0
     then

          io_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

          sp_auto_withdraw_try_update
          (
               in_session_id,
               in_transaction_id,
               in_try_id,
               gState_Try_Invalidated,
               'Account has been closed',
               sysdate
          );

     else
          io_outcome_id := pkg_os_constant.gOutcome_OK;

          sp_auto_withdraw_try_update
          (
               in_session_id,
               in_transaction_id,
               in_try_id,
               gState_Try_Validated,
               null,
               sysdate
          );

     end if;


end sp_auto_withdraw_try_test;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_funds_receipt
--
--   %USAGE
--        In the lack of a functioning interface with a payment gateway, this procedure is used to simulate success and failure of automated cash-transfer tries.
--        Funds Receipt
--
--   %ALGORITHM
--        This mimics a response to a Try. If fails any try whose object-id (minus suffix) is divisible by three. and marks the others as successful.
--          This allows us to test the workflows which correspond to successful tries as well as that for unsuccessful tries.
--
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--     %PARAM    in_current_date                    The current date - this is used for timestamping the recording of success or failure.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_funds_receipt
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                              in               object.object_id%type,
     in_current_date                    in             date,
     io_outcome_id                         in out          outcome.outcome_id%type
) as

     v_result                              number;

     --
     --   Datamart update ...
     --

     v_update                           char;

begin

     --
     --     Check to see whether the Try Object ID is divisible by 2.
     --
     select mod(((in_try_id - mod(in_try_id,100))/100), 2 ) into v_result  from dual;

     if v_result = 0
     then

          io_outcome_id := pkg_os_constant.gOutcome_OK;

          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Successful );

          --
          -- Update the Try Datamart
          --

          pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_try_id, v_update );



     else

          io_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

     end if;


end sp_auto_funds_receipt;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disburse_try_test
--
--   %USAGE
--        In the lack of a functioning interface with a payment gateway, this procedure is used to simulate success and failure of automated cash-transfer tries.
--        Disbursement Request Confirmation
--
--   %ALGORITHM
--        This mimics a response to a Try. If fails any try whose object-id (minus suffix) is divisible by three. and marks the others as successful.
--          This allows us to test the workflows which correspond to successful tries as well as that for unsuccessful tries.
--
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--     %PARAM    in_current_date                    The current date - this is used for timestamping the recording of success or failure.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_disburse_try_test
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                              in               object.object_id%type,
     in_current_date                    in             date,
     io_outcome_id                         in out          outcome.outcome_id%type
) as

     v_result                              number;

begin

     --
     --     Check to see whether the Try Object ID is divisible by 3.
     --
     select mod(((in_try_id - mod(in_try_id,100))/100), 3 ) into v_result  from dual;

     if v_result = 0
     then

          io_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

          --updated below invocation for reason code addition in the payment response- OSBILLING-581
          sp_auto_disburse_try_update
          (
               in_session_id,
               in_transaction_id,
               in_try_id,
               gState_Try_Invalidated,
               sysdate,
               sysdate,
               null,
               null,
               null
          );

     else
          io_outcome_id := pkg_os_constant.gOutcome_OK;

          --updated below invocation for reason code addition in the payment response- OSBILLING-581
          sp_auto_disburse_try_update
          (
               in_session_id,
               in_transaction_id,
               in_try_id,
               gState_Try_Validated,
               sysdate,
               sysdate,
               null,
               null,
               null
          );

     end if;


end sp_auto_disburse_try_test;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disburse_try_update
--
--   %USAGE
--        To update the Try based on mock Disbursement Confirmation
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--   %PARAM    in_try_status_success               This is 1 for Success and 2 for Failure
--   %PARAM    in_try_status_reason_code          This is a Code which specifies the reason for failure.
--   %PARAM    in_try_status_reason_desc          This describes in more detail the reason for failure.
--     %PARAM    in_current_date                    The current date - this is used for timestamping the recording of success or failure.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_disburse_try_update
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                          in             object.object_id%type,
     in_try_recon_status                in             number,
     in_transaction_date                in             date,
     in_recon_clear_date                in             date,
     in_cheque_eft_number               in             number,
     in_description                     in             varchar2,
     in_try_reason_code                 in             varchar2 default null
)

as

     v_procedure_name  constant        system_log.program_name%type := pkg_name||'sp_auto_disburse_try_update';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_auto_transfer_bts_id             object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_try_id);
     v_recon_status_id                  number := 0;

     --
     --   Datamart update ...
     --

     v_update                           char;

begin

     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_TransactionDate, to_char( in_transaction_date, pkg_os_constant.DragonDateFormatDefault  ) );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ReconClearDate, to_char( in_recon_clear_date, pkg_os_constant.DragonDateFormatDefault  ) );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, in_try_recon_status );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ChequeEFTNumber, in_cheque_eft_number );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_Description, in_description );

     if in_try_recon_status = 53946 -- Failed
       then
         v_recon_status_id := 2;  -- Rejected
     end if;

     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_ReconStatus, v_recon_status_id );
     --added below line for reason code addition in the payment response- OSBILLING-581
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, gbv_Try_Reason_code, in_try_reason_code );
     --
     -- Update the Try and BTS Datamarts
     --

     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_try_id, v_update );
     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_auto_transfer_bts_id, v_update );


end sp_auto_disburse_try_update;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_import_funds_receipt
--
--   %USAGE
--        This procedure is used to import EFT and CHQ records from Funds Receipt file
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_object_cache                    Object Chache
--   %PARAM    io_message_list                    Message List
--   %PARAM    in_action_id                       Action ID
--   %PARAM    in_user_session_id                 User Session ID
--   %PARAM    io_action_outcome_id               Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_import_funds_receipt
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_object_cache               in out    pkg_os_object_cache.t_object_cache,
     io_message_list               in out    pkg_os_message.t_message_list,
     in_action_id                  in        action.action_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type)
as

     v_procedure_name                   constant system_log.program_name%type := pkg_name||'sp_import_funds_receipt';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_job_id                           object.object_id%type;
     v_object_id                        object.object_id%type;

     v_billing_account_id               object.object_id%type;
     v_policy_id                        object.object_id%type;
     v_target_billing_account_id        object.object_id%type;
     v_EFT_billing_trx_set_id           object.object_id%type;
     v_CHQ_billing_trx_set_id           object.object_id%type;
     v_DISCHQ_billing_trx_set_id        object.object_id%type;
     v_EFT_count                        number := 0;
     v_CHQ_count                        number := 0;
     v_DISCHQ_count                     number := 0;
     v_EFT_total_amount                 number := 0;
     v_CHQ_total_amount                 number := 0;
     v_DISCHQ_total_amount              number := 0;
     v_update                           char(1) := 'T';
     v_amount                           number := 0;
     v_BATrxs_list                      pkg_os_object.t_object_list;

     v_entered_by                       varchar2(100) := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');

     cursor c_funds
     is
     select
          fr.dragon_object_id,
          fr.source_account_number,
          fr.policy_number,
          fr.amount,
          fr.source_amount
     from
          db_funds_receipt fr, db_batch_control bc
     where
          fr.session_id = in_session_id
          and
          bc.session_id = in_session_id
          and
          fr.file_identifier = bc.file_identifier
          and
          bc.validation_status = 'SUCCESS';


     cursor c_receipts_EFT
     is
     select
          fr.file_identifier,
          count(fr.amount) as Rcpt_Count,
          sum(nvl(fr.amount,0))as Rcpt_Amount
     from
          DB_FUNDS_RECEIPT fr, db_batch_control bc
     where
          fr.session_id = in_session_id
          and
          bc.session_id = in_session_id
          and
          fr.file_identifier = bc.file_identifier
          and
          bc.validation_status = 'SUCCESS'
          and
          fr.transaction_type = 'EFT'
     group by
          fr.file_identifier;


     cursor c_receipts_CHQ
     is
     select
          fr.file_identifier,
          count(nvl(amount,(-1)* pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,in_transaction_id,source_amount))) as CHQ_Count,
          sum(NVL(amount,(-1)* pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,in_transaction_id,source_amount))) as CHQ_Amount
     from
          DB_FUNDS_RECEIPT fr, db_batch_control bc
     where
          fr.session_id = in_session_id
          and
          bc.session_id = in_session_id
          and
          fr.file_identifier = bc.file_identifier
          and
          bc.validation_status = 'SUCCESS'
          and
          transaction_type in ('CHQ','CHECKPAY')
     group by
          fr.file_identifier;



     cursor c_cheq_Dish
     is
     select
          fr.file_identifier,
          count(fr.amount) as cheq_Dish_Count,
          sum(nvl(fr.amount,0))as cheq_Dish_Amount
     from
          DB_FUNDS_RECEIPT fr, db_batch_control bc
     where
          fr.session_id = in_session_id
          and
          bc.session_id = in_session_id
          and
          fr.file_identifier = bc.file_identifier
          and
          bc.validation_status = 'SUCCESS'
          and
          fr.transaction_type = 'DISCHQ'
     group by
          fr.file_identifier;




begin

     -- OneShieldReference ObjectAsynchronousAction >> Asynchronous Job ID
     v_job_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, '210356.30253401.265063010.310.2202901');

     -- OneShieldReference Partner >> _Child_BillingAccount
     --v_billing_account_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_session_id,'210090.21814301.32031319.29704646310.343.63.63');
     v_billing_account_id := in_action_object_id;

     if v_session_control.glogging_full
     then

        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Job ID: '||v_job_id || ' Financial Inst Billing Account ID: ' || v_billing_account_id );

     end if;

     for r_receipt in c_receipts_EFT loop

        if r_receipt.rcpt_count > 0
        then
          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_BillingTrxSet,
               v_billing_account_id,
               v_EFT_billing_trx_set_id
          );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Created EFT Payment Batch:'||v_EFT_billing_trx_set_id );

          end if;

          --
          -- Now set the BVs for the EFT Batch
          --

          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_InProcess);
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_BTS_Type, gBTSType_EFTPaymentBatch );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_BTS_Total_Amount, r_receipt.rcpt_amount);
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_BTS_Total_NumItems, r_receipt.rcpt_count);
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_BTS_Entry_Method, gBTSEntry_Import );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_BTS_Payment_Mode, gBTSPaymentMode_EFTOnline  );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, gbv_FITrxSetEnteredby, v_entered_by );

          --
          -- Updated the BTS Datamart
          --
          pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_EFT_billing_trx_set_id, v_update );

          -- Update all the EFT records that are related to current file_number with Billing Account and EFT Batch ID
          update
               DB_FUNDS_RECEIPT
          set
               BILLING_ACCOUNT_ID = v_billing_account_id,
               billing_acc_trx_set_id = v_eft_billing_trx_set_id
          where
               TRANSACTION_TYPE = 'EFT'
          and
               session_id = in_session_id
          and
               file_identifier = r_receipt.file_identifier;

          v_BATrxs_list(v_BATrxs_list.count + 1) := v_EFT_billing_trx_set_id;

        end if;

     end loop; -- EFT

     --
     -- Need to do the same for CHQ
     --
     for r_cheq in c_receipts_CHQ loop

         if r_cheq.chq_count > 0
         then

            pkg_os_object.sp_object_create
            (
               in_session_id,
               in_transaction_id,
               gObjType_BillingTrxSet,
               v_billing_account_id,
               v_CHQ_billing_trx_set_id
            );

            if v_session_control.gLogging_Full
            then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Created Cheque Payment Batch:'||v_CHQ_billing_trx_set_id );

            end if;

          --
          -- Now set the BVs for the CHQ Batch
          --

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_InProcess);
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_BTS_Type, gBTSType_CHQPaymentBatch );
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_BTS_Total_Amount, r_cheq.chq_amount );
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_BTS_Total_NumItems, r_cheq.chq_count );
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_BTS_Entry_Method, gBTSEntry_Import );
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_FITrxSetEnteredby, v_entered_by  );
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, gbv_BTS_Payment_Mode, gBTSPaymentMode_CHQ  );

          --
          -- Updated the BTS Datamart
          --
            pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_CHQ_billing_trx_set_id, v_update );

          -- Update all the CHQ records that are related to current file_number with Billing Account and CHQ Batch ID

            update
                 DB_FUNDS_RECEIPT
            set
                 BILLING_ACCOUNT_ID = v_billing_account_id,
                 BILLING_ACC_TRX_SET_ID = v_CHQ_billing_trx_set_id
            where
                 TRANSACTION_TYPE in ('CHQ', 'CHECKPAY')
            and
                 session_id = in_session_id
            and
                 file_identifier = r_cheq.file_identifier;

            v_BATrxs_list(v_BATrxs_list.count + 1) := v_CHQ_billing_trx_set_id;
         end if;

     end loop; -- CHQ

     --
     -- Need to do the same for DISCHQ (Dishonoured Cheques)
     --
     for r_dis_chq in  c_cheq_Dish loop

         if  r_dis_chq.cheq_dish_count > 0
         then

             pkg_os_object.sp_object_create
             (
               in_session_id,
               in_transaction_id,
               gObjType_BillingTrxSet,
               v_billing_account_id,
               v_DISCHQ_billing_trx_set_id
             );

             if v_session_control.gLogging_Full
             then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Created Dishonoured Cheque Payment Batch:'||v_DISCHQ_billing_trx_set_id );

             end if;

          --
          -- Now set the BVs for the DISCHQ Batch
          --

             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_InProcess );
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, gbv_BTS_Type, gBTSType_DISCHQPaymentBatch );
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, gbv_BTS_Total_Amount, r_dis_chq.cheq_dish_amount );
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, gbv_BTS_Total_NumItems, r_dis_chq.cheq_dish_count );
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, gbv_BTS_Entry_Method, gBTSEntry_Import );
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, gbv_FITrxSetEnteredby, v_entered_by  );

          --
          -- Updated the BTS Datamart
          --
             pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_DISCHQ_billing_trx_set_id, v_update );

          -- Update all the DISCHQ records that are related to current file_number with Billing Account and Dishonoured CHQ Batch ID

             update
                    DB_FUNDS_RECEIPT
             set
                    BILLING_ACCOUNT_ID = v_billing_account_id,
                    BILLING_ACC_TRX_SET_ID = v_DISCHQ_billing_trx_set_id
             where
                    TRANSACTION_TYPE = 'DISCHQ'
             and
                    session_id = in_session_id
             and
                    file_identifier = r_dis_chq.file_identifier;

              v_BATrxs_list(v_BATrxs_list.count + 1) := v_DISCHQ_billing_trx_set_id;

         end if;

     end loop; -- DISCHQ (Dishonoured Cheques)


     --
     -- Call the Import Transformation
     --

     -- Now call the transformation

     for x in c_funds
     loop

         v_policy_id                  := null;
         v_target_billing_account_id  := null;
         v_amount := 0;

         if (x.amount is null and x.source_amount is not null)
         then

            v_amount := to_number(trim(trailing '-' from x.source_amount));

         end if;

         --search for policy, if both Account and Policy are not null
         if x.source_account_number  is not null and x.policy_number is not null
         then
            begin

                  select
                    policy_id,
                              RESPONSIBLE_BILLING_ACCOUNT --billing_account_number
                  into
                    v_policy_id,
                              v_target_billing_account_id
                  from
                    dragon_policy
                  where
                    policy_number = to_char(x.source_account_number) || ' ' || to_char(x.policy_number)
                  and
                    rownum = 1;

             exception
                  when no_data_found then
                    pkg_os_logging.sp_log
                      (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Policy not found for Customer Account Number: '|| x.source_account_number
                          ||' and Policy Number: '||x.policy_number
                      );
             end;

          elsif x.source_account_number  is not null
          then
             begin

                  select
                    external_customer_number
                  into
                    v_target_billing_account_id
                  from
                    dragon_customer
                  where
                    external_customer_number = to_char(x.source_account_number)
                  and
                    rownum = 1;

             exception
                  when no_data_found then
                    pkg_os_logging.sp_log
                      (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Could not find Billing Account for Customer Account Number: '|| x.source_account_number
                      );
             end;
          end if;

          --if source account number is not null and customer billing account was not found try to search agency
          if x.source_account_number is not null and v_target_billing_account_id is null
          then
             begin

                  select
                    ba.billingaccount_id
                  into
                    v_target_billing_account_id
                  from
                    dragon_partner dp,
                    dragon_billingaccount ba
                  where
                    ba.partner_object_id = dp.partner_id
                  and
                    dp.partner_agency_code = to_char(x.source_account_number)
                  and
                    rownum = 1;

             exception
                  when no_data_found then
                    pkg_os_logging.sp_log
                      (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Could not find Agency Billing Account for Agency Number: '|| x.source_account_number
                      );
             end;
          end if;

          --updated data in DB_FUNDS_RECEIPT table
          update
                db_funds_receipt
          set
                policy_object_id             = v_policy_id,
                target_billing_account_id = v_target_billing_account_id,
                amount                    = nvl(amount,v_amount),
                transaction_state_id      = 38146 --In Process
          where
                dragon_object_id  = x.dragon_object_id;

          pkg_os_object.sp_object_create(in_session_id,in_transaction_id,v_FundsImportObject,null,v_object_id,x.DRAGON_OBJECT_ID);

          if v_session_control.gLogging_Full
          then

             pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Object used in transformation: ' || v_object_id);

          end if;

          pkg_os_xformer.sp_object_transform
          (
                    in_session_id,
                    in_transaction_id,
                    in_object_cache,
                    io_message_list,
                    in_action_id,
                    x.DRAGON_OBJECT_ID,
                    v_FundsImportObject,
                    io_action_outcome_id
          );

     end loop;

     if v_BATrxs_list.count < 1
     then

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... No record found in GB_FUNDS_RECEIPT table for EFT or CHQ or DISCHQ');

          end if;

          io_action_outcome_id := gOutcome_NoRecordFound;

     end if;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Receipt Import process. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_import_funds_receipt;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_funds_receipt_process
--
--   %USAGE
--        This procedure is used to import records from Funds Receipt file
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_object_cache                    Object Chache
--   %PARAM    io_message_list                    Message List
--   %PARAM    in_action_id                       Action ID
--   %PARAM    in_action_object_id                Action Object ID
--   %PARAM    io_action_outcome_id               Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_funds_receipt_process
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_object_cache               in out    pkg_os_object_cache.t_object_cache,
     io_message_list               in out    pkg_os_message.t_message_list,
     in_action_id                  in        action.action_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as

     v_procedure_name                   constant system_log.program_name%type := pkg_name||'sp_funds_receipt_process';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_job_id                           number;--object.object_id%type;
     v_object_id                        object.object_id%type;

     v_billing_account_id               object.object_id%type;
     v_fin_inst_account_id                          object.object_id%type;
     v_fin_inst_ult_parent_id           object.object_id%type;
     v_billing_trx_set_id               object.object_id%type;
     v_policy_id                        object.object_id%type;
     v_target_billing_account_id        object.object_id%type;
     v_account_type                     varchar2(100);
     v_fitransaction_id                 object.object_id%type;
     v_count                               number  := 0;
     v_total_amount                        number  := 0;
     v_update                           char(1) := 'T';
     v_amount                           number;
     v_source_amount                    varchar2(50);

     v_trx_state_id                     number;
     v_transaction_type                 object_bv_value.business_variable_value%type;
     v_batch_type_id                                   number;
     v_payment_mode_id                                 number;
     v_source_account                   varchar2(50);
     v_policy_number                    varchar2(50);
     v_policy_sub_number                varchar2(10);
     v_lock_status                      char(1) := 'F';
     v_search_string                    varchar2(100);
     v_policy_with_accno_tf             varchar2(1);
     v_invoice_number                   varchar2(50);
     v_entered_by                       varchar2(100) := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
     v_async_batch_id                   object.object_id%type;
     v_dap_param                        object.object_id%type;
     v_eoc_id                           object.object_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)                                 := 'T';
   
begin



     select

          TRANSACTION_STATE_ID,
          JOB_ID,
          TRANSACTION_TYPE,
          AMOUNT,
          SOURCE_AMOUNT,
          SOURCE_ACCOUNT_NUMBER,
          POLICY_NUMBER,
          POLICY_SUB_NUMBER,
          FITRANSACTION_ID,
          billing_acc_trx_set_id,
      POLICY_WITH_ACCNO_TF,
          INVOICE_NUMBER
     into

          v_trx_state_id,
          v_job_id,
          v_transaction_type,
          v_amount,
          v_source_amount,
          v_source_account,
          v_policy_number,
          v_policy_sub_number,
          v_fitransaction_id,
          v_billing_trx_set_id,
      v_policy_with_accno_tf,
          v_invoice_number 
     from
          DB_FUNDS_RECEIPT
     where
          DRAGON_OBJECT_ID = in_action_object_id;
   
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     v_eoc_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id , 27938205 );
     v_dap_param :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_eoc_id , 30061901 );
     v_async_batch_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_dap_param , 32047699 );

     if nvl(v_billing_trx_set_id,0) <> 0
     then
          if v_trx_state_id is null
          then

               v_policy_id                  := null;
               v_target_billing_account_id  := null;

               if (v_amount is null and v_source_amount is not null)
               then
                    v_amount := pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,in_transaction_id,v_source_amount);
               end if;

               v_search_string := '';
         
         -- Start  UTPRODUCT-1035
                if v_invoice_number is not null 
               then 
                 begin
                   if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Invoice No ' || v_invoice_number                            
                              );
                         end if;
                 end;
               elsif v_source_account  is not null and v_policy_number is not null
               then
                    begin
                      
                      v_search_string :=  to_char(v_policy_number) || to_char(v_policy_sub_number);
                      
                      --This is to suport backward comaptibility - such as in case of PMA
                      if v_policy_with_accno_tf is null or v_policy_with_accno_tf ='T'
                        then
                           if v_policy_sub_number is not null
                           then
                                v_search_string := to_char(v_source_account) || ' ' || to_char(v_policy_number) || to_char(v_policy_sub_number);

                           else
                                v_search_string := to_char(v_source_account) || ' ' || to_char(v_policy_number);
                           end if;
                       end if;
                         
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Found both Account Number '||v_source_account ||
                              ' and Policy Number in file ' || v_policy_number                              
                              );
                         end if;
                         
                         select
                              policy_id,
                              responsible_billing_account -- billing_account_number

                         into
                              v_policy_id,
                              v_target_billing_account_id

                         from
                              dragon_policy

                         where
                              policy_number = v_search_string;
                              
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Searched for policy using search string '|| v_search_string ||
                              ' Policy ID is  '||v_policy_id ||
                              ' and responsible_billing_account in file ' || v_target_billing_account_id ||                             
                              '.. Will search on basis of account number');
                         end if;
                         
                              
                         -- If Policy_ID does not exist , then search for customer
                         if v_policy_with_accno_tf ='F'
                           then
                             
                             if v_policy_id is null
                               then 
                                 
                                  select
                                               bc.billingaccount_id,
                                               bc.account_type
                                  into
                                               v_target_billing_account_id,
                                               v_account_type
                                  from
                                               DRAGON_BILLINGACCOUNT  bc
                                  where
                                               bc.account_number = to_char(v_source_account);
                                               
                                  if v_session_control.gLogging_Full
                                  then
                                      pkg_os_logging.sp_log
                                      (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      'As policy id is null,  Searched for account number -- billingaccount_id is  '||v_target_billing_account_id ||
                                      ' and account type is ' || v_account_type );
                                   end if;                             
                              end if;
                         end if;
                    exception
                         when no_data_found then
                              pkg_os_logging.sp_log

                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Policy not found for Customer Account Number: '|| v_source_account
                                   ||' and Policy Number: '||v_policy_number

                              );
                         when too_many_rows then
                              pkg_os_logging.sp_log_error
                                (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... More than one records found in the dragon_policy for Policy Number '|| v_search_string
                                );
                              raise;
                    end;
               elsif v_policy_number is not null and v_source_account is null
               then
                    begin
                      
                         v_search_string :=  to_char(v_policy_number) || to_char(v_policy_sub_number);
                        
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Searching on basis of policy and sub number ' ||  v_search_string                           
                              );
                         end if;
                         
                         select
                              policy_id,
                              responsible_billing_account -- billing_account_number

                         into
                              v_policy_id,
                              v_target_billing_account_id

                         from
                              dragon_policy

                         where
                              policy_number = v_search_string;
                              
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Searched for policy -- Policy ID is  '||v_policy_id ||
                              ' and responsible_billing_account is ' || v_target_billing_account_id                              
                              );
                         end if;
                         
                              
                         
                exception
                     when no_data_found then
                          pkg_os_logging.sp_log
                          (
                               in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               '... Policy notfound '||v_policy_number

                          );
                     when too_many_rows then
                          pkg_os_logging.sp_log_error
                            (
                               in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               '... More than one records found in the dragon_policy for Policy Number '|| v_search_string
                            );
                          raise;
                end;
               elsif v_source_account is not null
               then

                    begin
                         --if source account number is not null try to customer OR agency/broker
                         select
                              bc.billingaccount_id,
                              bc.account_type
                         into
                              v_target_billing_account_id,
                              v_account_type
                         from
                              DRAGON_BILLINGACCOUNT  bc
                         where
                              bc.account_number = to_char(v_source_account);


                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Found Billing Account '||v_target_billing_account_id ||
                              ' for an account type ' || v_account_type ||
                              ' (Account Number(external customer or agent/broker id)='||to_char(v_source_account)||')'
                              );
                         end if;

                    exception
                         when no_data_found then
                             pkg_os_logging.sp_log

                               (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '... Could not find Billing Account for Legacy ID (external customer or agent/broker id): '|| v_source_account



                               );

                         when too_many_rows then
                             pkg_os_logging.sp_log_error
                               (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '... More than one records found in the dragon_billingaccount for Legacy ID (external customer or agent/broker id) '|| to_char(v_source_account)
                               );


                             raise;

                    end;


               end if; 

               --END UTPRODUCT-1035


               --
               -- Updating data in DB_FUNDS_RECEIPT table
               --

               update
                    db_funds_receipt
               set
                    policy_object_id               = v_policy_id,
                    target_billing_account_id      = v_target_billing_account_id,
                    amount                         = nvl(amount,v_amount),
                    processing_async_batch_id      = v_async_batch_id
               where
                    dragon_object_id               = in_action_object_id;



               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    v_FundsImportObject,
                    null,
                    v_object_id,
                    in_action_object_id
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Object used in transformation: ' || v_object_id
                    );
               end if;

               pkg_os_xformer.sp_object_transform
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_cache,
                    io_message_list,
                    in_action_id,
                    in_action_object_id,
                    v_FundsImportObject,
                    io_action_outcome_id
               );

               v_fitransaction_id :=    pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_session_id,
                                             pkg_os_constant_bv.gbv_SessionNewObject
                                        );
               update
                    db_funds_receipt

               set
                    transaction_state_id  = pkg_db_cashpost.gFITrxStatus_InProcess, --In Process
                    fitransaction_id      = v_fitransaction_id
               where
                    dragon_object_id  = in_action_object_id;

          
		      else
                    if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Dragon Object Id  '||in_action_object_id ||
                                   ' and Transaction State is Null  ' || io_action_outcome_id                              
                              );
                    end if;
          end if;
		  
		  --Start UTPRODUCT-1911
          if (v_source_amount = 0 or v_source_amount is null)
             then
                    io_action_outcome_id := 58948;
                    
                      -- Update the source FItrnsaction
                     v_bv_table.delete;

                     v_bv_table ( pkg_os_constant_bv.gbv_GenObjObjectState     ).business_variable_value   := pkg_db_cashpost.gFITrxStatus_Processed;
                     v_bv_table ( pkg_db_cashpost.gbv_FITransaction_RefBillAcc                 ).business_variable_value   := v_target_billing_account_id;
                     v_bv_table ( pkg_db_cashpost.gbv_FITransaction_ProcessDate                ).business_variable_value   := to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_fitransaction_id), pkg_os_constant.DragonDateFormatDefault );

                     pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          v_fitransaction_id,
                          v_bv_table
                     );

                    pkg_os_datamart.sp_datamart_update_row (in_session_id,in_transaction_id, v_fitransaction_id , v_datamart_tf);
                         
                    update
                      db_funds_receipt
                    set
                       transaction_state_id  = pkg_db_cashpost.gFITrxStatus_Processed
                    where
                       dragon_object_id  = in_action_object_id;
                   
                    if v_session_control.gLogging_Full
                    then

                      pkg_os_logging.sp_log
                      (
                      in_session_id,
                      in_transaction_id,
                      v_procedure_name,
                      '...... Either v_source_amount is null or 0, so single payment will not be processed for : ' ||in_action_object_id
                      );
                      
                    end if;
          end if;
			--end UTPRODUCT-1911

     else
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
          
          pkg_os_logging.sp_log_error

               (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Receipt process. Billing Account Transaction Set ID is null'
               ||'  Error Msg: '
               ||sqlerrm
          );





     end if;


  /*   if io_action_outcome_id is null
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;*/

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_constant_bv.gbv_SessionObjectOfInterest,
          v_fitransaction_id
     );
exception

     when others
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Receipt process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end sp_funds_receipt_process;

----------------------------------------------------------------------------------------
-- package to update DB_FB_BATCH_CONTROL table for financial Bridge
----------------------------------------------------------------------------------------
procedure sp_fb_batch_control_update
(
     in_session_id                 in      object.object_id%type,
     in_transaction_id             in      object.object_id%type,
     in_user_session_id            in      object.object_id%type,
     io_action_outcome_id          in out  nocopy  outcome.outcome_id%type,
     in_try_type_id                in      lookup_list_value.lookup_enum%type default null,
     in_pay_mode_id                in      lookup_list_value.lookup_enum%type default null
)as
     v_procedure_name               constant system_log.program_name%type := pkg_name||'sp_fb_batch_control_update';
     v_session_control              pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_update                       char := 'T';
     accountNo                      number;
     numRows                        number;
     amount                         number;
     in_try_obj_id                  object.object_id%type;
     v_async_batch_id               object.object_id%type;
     v_batch_pay_method             object_bv_value.business_variable_value%type;
     v_count                        number := 0;

     cursor c_get_batch
     is
     select distinct batch_id
      from
      db_fb_transaction_staging stg,
      dragon_fund_trans_req_try try
      where
        try.schd_fund_req_try_id = stg.request_id
      and
        try.TRY_STATUS_ID = 56046   --OSPRODUCT-502:renamed column
      and
        (in_try_type_id is null or try.try_type_id = in_try_type_id)
      and
        (in_pay_mode_id is null or try.payment_mode_id = in_pay_mode_id);

     cursor db_fb_batch (v_batch_id object.object_id%type)
     is
     select
            count(*) as num, sum(AMOUNT) as amount
     from
            DB_FB_TRANSACTION_STAGING
     where BATCH_ID = v_batch_id;

     cursor c_try (v_batch_id object.object_id%type)
     is
     select schd_fund_req_try_id
      from
      dragon_fund_trans_req_try try,
      db_fb_transaction_staging stg
      where
        try.schd_fund_req_try_id = stg.request_id
      and
        stg.batch_id = v_batch_id
      and
        try.TRY_STATUS_ID = 56046;  --OSPRODUCT-502:renamed column

begin

     for r_get_batch in c_get_batch
     loop

      if v_session_control.gLogging_Full
      then

        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Batch ID: '||r_get_batch.batch_id);

      end if;

      numRows := 0;
      for batch in db_fb_batch (r_get_batch.batch_id)
      loop
         if  batch.num > 0
         then
             numRows := batch.num;
             amount := batch.amount;
         end if;
      end loop; --end db_fb_batch loop

      for r_try in c_try (r_get_batch.batch_id)
      loop

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, 53546 ); --set Dispatched status

        --Update datamart for try objects
        pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );

      end loop;

      v_batch_pay_method := '';
      if in_try_type_id is not null and in_pay_mode_id is not null
      then
        case
        when in_try_type_id in (1,3)
        then
          v_batch_pay_method := 'Receipt';
        when in_try_type_id in (2,4)
        then
          v_batch_pay_method := 'Payment';
        end case;

        case in_pay_mode_id
        when 1
        then
          v_batch_pay_method := 'Cheque ' || v_batch_pay_method;
        when 2
        then
          v_batch_pay_method := 'Credit Card ' || v_batch_pay_method;
        when 3
        then
          v_batch_pay_method := 'EFT ' || v_batch_pay_method;
        end case;
      end if;

     -- if at least one row exist
      if numRows is not null
      then
         select count(1) into v_count from DB_FB_BATCH_CONTROL where BATCH_ID =  r_get_batch.batch_id;

         if v_count <> 0 then

            update DB_FB_BATCH_CONTROL set
              TRX_COUNT             = numRows,
              LAST_UPDATED_DATE     = sysdate,
              TOTAL_AMOUNT          = amount,
              BATCH_STATUS          = 'R',
              BATCH_PAYMENT_METHOD  = v_batch_pay_method
              where batch_id = r_get_batch.batch_id;

         else

         insert into DB_FB_BATCH_CONTROL


                  (
                          BATCH_ID,
                          TRX_COUNT,
                          CREATION_DATE,
                          LAST_UPDATED_DATE,
                          TOTAL_AMOUNT,
                          BATCH_STATUS,
                          BATCH_PAYMENT_METHOD
                          )
                  values
                          (
                          r_get_batch.batch_id,
                          numRows,
                          sysdate,
                          sysdate,
                          amount,
                          'R',
                          v_batch_pay_method
                          );

         end if;

      end if;

     end loop; --end  c_get_batch loop

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Receipt Import process. '
               ||'  Error Msg: '
               ||sqlerrm
          );
end sp_fb_batch_control_update;
-------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disb_postprocess
--
--   %USAGE
--
--   This SP will update the Auto Try object if response received is decline
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    in_dishonor_code                    Dishonor Code
--   %PARAM    io_action_outcome_id               Action Outcome Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_disb_postprocess
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_disb_bts_id                in             object.object_id%type,
     in_dishonor_code                   in             object_bv_value.business_variable_value%type,
     in_batch_status                    in             object_bv_value.business_variable_value%type,
     in_batch_try_id                    in             object_bv_value.business_variable_value%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as
      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disb_postprocess';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

      v_policy_map_id                     object.object_id%type;
      v_reversal_trx_id                   object.object_id%type;
      v_policy_trx_id                     object.object_id%type;
      v_policy_id                         object.object_id%type;
      v_current_date_time                 date;

      v_req_err_flag                      char;
      v_req_err_message                   object_bv_value.business_variable_value%type;
      v_currSchReqTry_id                  object.object_id%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_resp_status                       object_bv_value.business_variable_value%type;

      v_payment_mode_id                   object_bv_value.business_variable_value%type;
      v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      v_cc_approval_code                  object_bv_value.business_variable_value%type;
      v_cheque_number                     object_bv_value.business_variable_value%type;
      in_object_cache                     pkg_os_object_cache.t_object_cache;
      v_assoc_fitem                       object.object_id%type;
      v_payment_mode1_try_id              object_bv_value.business_variable_value%type;
      v_related_fitransaction_id          object.object_id%type;
      v_batch_max_auto_id                 object.object_id%type;
      v_new_try_status_id                 business_variable.business_variable_id%type;
      v_dishonor_code                     object_bv_value.business_variable_value%type;
      v_dishonor_code_inner               object_bv_value.business_variable_value%type;
      v_cash_xfer_objusage_id             object.object_id%type;
      v_cash_xfer_profile_mode            lookup_list_value.lookup_enum%type;
      v_cash_xfer_profile_id              object.object_id%type;
      v_webService_integration_TF         object_bv_value.business_variable_value%type;
      --v_file_integration_TF               object_bv_value.business_variable_value%type;
       v_retry_count                       number;

      cursor c_try
          is
              select
                     *
                from
                     dragon_fund_trans_req_try
                where
                     BILLINGACCOUNTTRXSET_ID = in_auto_disb_bts_id;  --OSPRODUCT-502:renamed column


begin

      v_webService_integration_TF :=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id,gPd_Property_WebService_TF);
      --v_file_integration_TF       :=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id,gPd_Property_FileService_TF);

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '||| Post processing of Schedule Disbursement Response started ||| '||
                  'Trx datastage status '||v_resp_status ||
                  ' web service T/F ' || v_webService_integration_TF ||
                  ' in batch id ' || in_batch_try_id
            );

      end if;

      if in_batch_status = 'E'
      then
            if v_webService_integration_TF = 'F' then
                  v_new_try_status_id := gState_Try_Failed;
            end if;
      else
            if v_webService_integration_TF = 'T' /*or v_file_integration_TF = 'T'*/ then
                  v_new_try_status_id := gState_Try_Successful;
            else
                  v_new_try_status_id := gState_Try_Rejected;
            end if;
      end if;

      if v_webService_integration_TF ='F'
       then

            if v_session_control.gLogging_Full
            then
                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Custom client Implementation when service call is not web service'|| in_batch_status
                  );
            end if;

            for r_try in c_try
            loop

                        --set Failed or Rejected status for Try object
                        pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, v_new_try_status_id);
                        --update Try datamart
                        pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );

            end loop;

            if (  in_batch_status = 'E' )
            then
                  select
                        distinct max(stg.request_transaction_id)
                        into
                        v_batch_max_auto_id
                  from
                        db_fb_transaction_staging stg
                  where
                        stg.batch_id = in_batch_try_id;

                  update
                        db_fb_transaction_staging
                  set
                        oneshield_status = 'Rejected',
                        LAST_UPDATED_DATE = sysdate
                  where
                        request_transaction_id = in_auto_disb_bts_id;
            end if;

      else
            if v_session_control.gLogging_Full
            then
                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Custom client Implementation when service call is web service'||in_batch_status
                  );
            end if;

            if in_batch_status = 'R'
             then
                  v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_disb_bts_id,gbv_BATS_CurrentAutoTransfTry);

                  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_currSchReqTry_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Invalidated);

                  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_currSchReqTry_id, v_update );

                  v_retry_count := NVL(pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_auto_disb_bts_id,

                                             32524648
                                        ),0);
                  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_auto_disb_bts_id,32524648, v_retry_count+1);

                  if v_session_control.gLogging_Full
                  then
                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... v_retry_count'||v_retry_count
                        );
                  end if;
             end if;
      end if; --  end if of v_webService_integration_TF

      if in_batch_status = 'E' and ( v_batch_max_auto_id = in_auto_disb_bts_id or /*(*/v_webService_integration_TF ='T' /*or v_file_integration_TF = 'T' )*/ )
      then
            --Set Session object of interest reference to DAP batch object id (1 email should be sent for the whole batch)
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id,  PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest, in_batch_try_id );

            if v_webService_integration_TF = 'F'
            then
                  --set Email outcome
                  io_action_outcome_id := gOutcome_Email;
            else
                  io_action_outcome_id := gOutcome_ServiceDown;
            end if;

      else
            io_action_outcome_id := gOutcome_Declined;

      end if;


      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '||| Post processing of Schedule Disbursement Response Completed |||'||
                  'Trx datastage status '||v_resp_status ||
                  ' in disb bats id  ' || in_auto_disb_bts_id ||
                  ' outcome  ' || io_action_outcome_id
            );

      end if;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception Post processing of Schedule Disbursement Response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_withdraw_postprocess
--
--   %USAGE
--
--   This SP will update the Auto Try object if response received is decline
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    in_dishonor_code                    Dishonor Code
--   %PARAM    in_batch_status                     Batch Status
--   %PARAM    in_batch_try_id                     Batch id or current Try id
--   %PARAM    io_action_outcome_id               Action Outcome Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_withdraw_postprocess
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     in_current_date                    in             date,
     in_dishonor_code                   in             object_bv_value.business_variable_value%type,
     in_batch_status                    in             object_bv_value.business_variable_value%type,
     in_batch_try_id                    in             object.object_id%type,
     io_action_outcome_id               in  out nocopy outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_withdraw_postprocess';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_update                            char := 'T';
      v_batch_max_auto_id                 object.object_id%type;
      v_new_try_status_id                 business_variable.business_variable_id%type;
      v_webService_integration_TF         object_bv_value.business_variable_value%type;
      v_payment_plan_md_row               payment_plan%rowtype;
      v_next_withdrawal_retry_date        date;
      v_preferred_withdrawal_day          integer :=27;
      v_payment_mode_id                   number;
      v_pmt_cash_prfl_id                  object.object_id%type;
      v_retry_count                       number;
      v_currSchReqTry_id                  object.object_id%type;

     cursor c_installment
          is
               select
                    *
               from
                    dragon_scheduled_installment
               where
                    withdrawal_request = in_auto_transfer_bts_id;

     cursor c_try
         is
             select
                    *
               from
                    dragon_fund_trans_req_try
               where
                    BILLINGACCOUNTTRXSET_ID = in_auto_transfer_bts_id;  --OSPRODUCT-502:renamed column

begin

      v_webService_integration_TF :=  NVL(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id,gPd_Property_WebService_TF),'F');

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '||| Post Processing of withdrawal response started ||| ' ||
                     ' Integration WebService T/F ==> '  || v_webService_integration_TF ||
                     ' For Bats ID ==> ' || in_auto_transfer_bts_id ||
                     ' Batch Status ==> ' || in_batch_status
                  );

      end if;

      if in_batch_status = 'E'
      then
            if v_webService_integration_TF = 'F' then
                   v_new_try_status_id := gState_Try_Failed;
            end if;
      else
            if v_webService_integration_TF ='F' then
                   v_new_try_status_id := gState_Try_Rejected;
            else
                   v_new_try_status_id := gState_Try_Successful;
            end if;
      end if;

      if v_webService_integration_TF ='F'
       then

            /*
              Client Implementation here
               Reversal Code handling
               Installment Update with new date/Amount
               Set this gbv_TermSchPayment_WithBTS to null for installment
            */
            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                     (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name, '...Custom Client Implementation starts when Integration is not Web Service based' ||
                           ' Auto Try state  ==> '  || v_new_try_status_id ||
                           ' For Bats ID ==> ' || in_auto_transfer_bts_id ||
                           ' batch Status ==> ' || in_batch_status
                        );

            end if;

            for r_try in c_try
            loop

                  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, v_new_try_status_id);

                  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );

            end loop;

            if in_batch_status = 'E'
            then
                  select
                        distinct max(stg.request_transaction_id)
                        into v_batch_max_auto_id
                  from
                        db_fb_transaction_staging stg
                  where
                        stg.batch_id = in_batch_try_id;

                  update
                        db_fb_transaction_staging
                  set
                        oneshield_status = 'Rejected',
                        LAST_UPDATED_DATE = sysdate
                  where
                        request_transaction_id = in_auto_transfer_bts_id;
            end if;

      else

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '...Custom Client Implementation starts when implementation is Web Service based' ||
                     ' Integration WebService T/F ==>'  || v_webService_integration_TF ||
                     ' For Bats ID ==> ' || in_auto_transfer_bts_id ||
                     ' batch Status ==> ' || in_batch_status ||
                     ' Current Try id ==>' || in_batch_try_id
                  );

            end if;


            if  in_batch_status = 'R'
            then

                 v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry);


                  for r_installment in c_installment
                  loop
                        v_next_withdrawal_retry_date :=  fn_get_retry_withdrawal_date
                                                         (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 r_installment.installment_id,
                                                                 in_auto_transfer_bts_id,
                                                                 in_dishonor_code
                                                          );







                        if v_next_withdrawal_retry_date is not null
                            then

                             --Clear withdrawal request field
                             pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_TermSchPayment_WithBTS, null);

                        end if;
                             v_retry_count             :=  NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_installment.installment_id,gbv_TermSchPymtInstl_retrycnt ),0);
                             pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id,gbv_TermSchPymtInstl_retrycnt, v_retry_count+1);


                             -- set try date
                             pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_TermSchPayment_RetryDate,to_char(v_next_withdrawal_retry_date,pkg_os_constant.DragonDateFormatDefault));
                             --Update installment datamart
                             pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_installment.installment_id, v_update );


                  end loop;

                  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_currSchReqTry_id, pkg_os_constant_bv.gbv_genobjobjectstate, v_new_try_status_id);

                  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_currSchReqTry_id, v_update );

                      -- Arun - MUSTDEV-23027 - Start
                  pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          in_auto_transfer_bts_id,
                          gbv_BTS_WithdrwalRetryDate,
                          to_char(v_next_withdrawal_retry_date,pkg_os_constant.DragonDateFormatDefault)
                     );

                  pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          in_auto_transfer_bts_id,
                          gbv_BTS_CCWithdrawal_AuthCode,
                          in_dishonor_code
                     );

                  pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          in_auto_transfer_bts_id,
                          gbv_BTS_CCWithdrawal_ApprDate,
                          to_char(in_current_date,pkg_os_constant.dragondateformatdefault)
                     );

                  -- Arun - MUSTDEV-23027 - End



            end if;

      end if; -- end of v_webService_integration_TF ='F'


      if ( in_batch_status = 'E' and  ( v_batch_max_auto_id = in_auto_transfer_bts_id or  v_webService_integration_TF ='T'))
      then

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest, in_batch_try_id );

            if v_webService_integration_TF ='F' then
                  io_action_outcome_id := gOutcome_Email;
            else
                  io_action_outcome_id := gOutcome_ServiceDown;
            end if;
      else


            -- bats update
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );

            io_action_outcome_id := gOutcome_Declined ;
      end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '||| Post Processing of withdrawal response completed ||| ' ||
                     ' Integration WebService T/F ==> '  || v_webService_integration_TF ||
                     ' For Bats ID ==> ' || in_auto_transfer_bts_id ||
                     ' Outcome id ==> ' || io_action_outcome_id
                  );

      end if;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception during post processing of withdrawal response'
               ||'  Error Msg: '
               ||sqlerrm
          );

end ;

-----------------------------------------------------------------------------------------------------------------------------------------------------(OSBILLING-7154,slash removed)

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_withdraw_failure
--
--   %USAGE
--
--
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    io_action_outcome_id               Action Outcome Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_withdraw_failure
(
      in_session_id                       in             object.object_id%type,
      in_transaction_id                   in             object.object_id%type,
      in_auto_transfer_bts_id             in             object.object_id%type,
      in_current_date                     in             date,
      io_action_outcome_id                in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name                    constant        system_log.program_name%type := pkg_name||'sp_auto_withdraw_failure';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_count                             number :=0;
      v_resp_code                         object_bv_value.business_variable_value%type;
      v_resp_msg                          object_bv_value.business_variable_value%type;
      v_currSchReqTry_id                  object.object_id%type;
      v_webService_integration_TF         object_bv_value.business_variable_value%type;
      -- Arun - MUSTDEV-19074 - Start
      v_approval_status                   object_bv_value.business_variable_value%type;
      -- Arun - MUSTDEV-19074 - End
begin

      v_webService_integration_TF :=  nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id,gPd_Property_WebService_TF),'F');

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '| Evaluating Withdrawal Response started ' ||
                     ' Integration WebService T/F '  || v_webService_integration_TF ||
                     ' For Bats ID ' || in_auto_transfer_bts_id
                  );

      end if;

      begin

            select
                  count(1)
                  into v_count
            from
                  db_fb_transaction_staging stg,
                  db_fb_batch_control ct
            where
                   ct.batch_id = stg.batch_id
            and
                   request_transaction_id = in_auto_transfer_bts_id;

      exception
            when others
            then
                  v_count :=0;
      end;

      -- check if records exist in staging table or Web Service integration property is false
      if v_count > 0  or v_webService_integration_TF = 'F'
      then
            sp_auto_withdraw_resp_tab
            (
                   in_session_id,
                   in_transaction_id,
                   in_auto_transfer_bts_id,
                   in_current_date,
                   io_action_outcome_id
            );

      else

            v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry);

            v_resp_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_AutoTransfTry_RespnseCode);

            v_resp_msg := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_AutoTransfTry_RespnseMsg);
            /*-- Arun - MUSTDEV-19074 - Start
            v_approval_status := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id, gbv_AutoTransfTry_ApprStatus    ); -- 33059164
            -- Arun - MUSTDEV-19074 - End*/

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '|||| Evaluating withdrawal Response |||| ' ||
                        ' WebService call ' || v_webService_integration_TF ||
                        ' Current Try Object is  ' || v_currSchReqTry_id      ||
                        ' Response Code is ' ||   v_resp_code ||
                        ' Response Message is ' ||  v_resp_msg ||
                        ' Approval Status is ' ||  v_approval_status
                  );

            end if;

            sp_auto_withdraw_resp_web
                (
                   in_session_id,
                   in_transaction_id,
                   in_auto_transfer_bts_id,
                   in_current_date,
                   v_resp_code,
                   v_resp_msg,
                   v_currSchReqTry_id,
                   --v_approval_status, -- Arun - MUSTDEV-19074
                   io_action_outcome_id
                );
      end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '| Evaluation of Withdrawal Response completed ' ||
                     ' Integration WebService T/F '  || v_webService_integration_TF ||
                     ' For Bats ID ' || in_auto_transfer_bts_id ||
                     ' Outcome ID : ' || io_action_outcome_id
                  );

      end if;

exception
      when others
      then

            pkg_os_logging.sp_log_error
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...... Exception while calling sp_auto_withdraw_failure. '
                  ||'  Error Msg: '
                  ||sqlerrm
            );

end sp_auto_withdraw_failure;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_billacc_auto_withdrawal
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billacc_id                      in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_billacc_auto_withdrawal';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_auto_policy_susp                 number;
     v_policy_term_id                   object.object_id%type;
     v_term_bill_status_id              number;
     v_auto_withdrawal_flag             char(1); --OSPRODUCT-862
     
     cursor c_policy
     is
          select
               --OSPRODUCT-8670 Using BV get for Policy_current_date instead of DM column
               distinct 
               dp.policy_id,pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, dp.policy_id) policy_current_date--, di.withdrawal_date, di.installment_id
          from
               dragon_scheduled_installment di,
               dragon_policy dp
          where
               di.policy_id    = dp.policy_id
          and
               dp.responsible_billing_account     = in_billacc_id
               --and
               --dp.policy_object_state_id       not in (gState_PolicyCancelled)  --OSPRODUCT-862
          and
               dp.billing_method_id            = gBillingMethodDirect
          and
               -- NVL( dp.current_payment_mode,0) in (0,gPolicyPaymentMode_CC,gPolicyPaymentMode_EFT) -- 2: Credit Card 3: ACH/EFT
               pkg_os_object_io.fn_object_bv_path_get ( in_session_id, in_transaction_id, di.pref_bill_plan_id, '34204646.30010546')  in (2,3)  -- UTPRODUCT-4339
          AND
               ( 
                    (
                         di.withdrawal_retry_date is null and  TRUNC(di.withdrawal_date)       <= trunc(greatest(pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, dp.policy_id),sysdate)) --OSPRODUCT-8670
                    )
               or
               ( 
                    trunc(di.withdrawal_retry_date ) <= trunc(greatest(pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, dp.policy_id),sysdate)) ) --OSPRODUCT-8670
               )
          AND 
               di.withdrawal_date  IS NOT NULL
          and 
               pkg_db_functions.fn_get_installment_balance_amt(in_session_id, in_transaction_id, di.installment_id,dp.policy_id) > 0 
               and (di.withdrawal_request is null or (nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,dp.policy_id,13848),'F') = 'T' and  di.withdrawal_request is not null)) /*OSPRODUCT-1764, OSPRODUCT-26258 */
          AND
               decode
               ( 
                    nvl(pkg_os_product.fn_product_property_get(in_session_id,in_transaction_id,dp.POLICY_ID,76148) , 'F' )
                    ,'T'
                    ,nvl(INVOICE_FLAG,0)
                    ,1
               ) = 1 -- UTXPRODUCT-806
          ;

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Generating an automated withdrawals for Billing Account: '|| in_billacc_id );
     end if;

     for r_policy in c_policy
     loop
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Looping Policy ID: '||r_policy.policy_id );
          end if;
          --OSPRODUCT-862 start
          v_auto_withdrawal_flag := pkg_cs_db_auto_funds_transfer.fn_get_valid_auto_withdrawal(in_session_id, in_transaction_id, r_policy.policy_id);

          if nvl(v_auto_withdrawal_flag, 'T') = 'T'
          then
               --OSPRODUCT-862 end
               v_auto_policy_susp  :=   pkg_db_suspension.fn_db_is_activity_suspended
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             r_policy.policy_id,
                                             pkg_db_suspension.gSuspend_EFTCC_Req_Activity
                                        );

               v_policy_term_id    :=   pkg_db_functions.fn_get_policy_current_term
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             r_policy.policy_id
                                        );

               v_term_bill_status_id    :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_policy_term_id,
                                                  gbv_PolicyTerm_BillingStatus
                                             );

               --MUSTDEV-29665
               --if ( v_policy_term_id is not null and nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_term_id, gbv_PolicyTermSuspensionStatus),0) not in (gState_PolicyTermBASusp) ) --Policy Term is not null and Policy is not suspended
               if ( v_policy_term_id is not null and v_auto_policy_susp <> 1) --Policy Term is not null and Policy is not suspended
               then
                    sp_policy_auto_withdrawal
                    (
                         in_session_id,
                         in_transaction_id,
                         r_policy.policy_id,
                         GREATEST(r_policy.policy_current_date, sysdate),
                         io_action_outcome_id
                    );
               else
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Policy ID: '||r_policy.policy_id || ' has suspension for Auto Withdrawal Transactions, so skipping it.' );
                    end if;
               end if;
          end if;  --OSPRODUCT-862
     end loop;
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Billing Account Auto Withdrawal process. '
               ||'  Error Msg: '  ||sqlerrm
          );

end sp_billacc_auto_withdrawal;

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_auto_disbreqtry_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disbreqtry_create';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_BTS_type                          lookup_list_value.lookup_enum%type;
      v_billing_account_id                object.object_id%type;
      v_cash_xfer_profile_id              object.object_id%type;
      v_cash_xfer_objusage_id             object.object_id%type;
      v_cash_xfer_prof_exp_date           date;
      v_cash_xfer_profile_mode            lookup_list_value.lookup_enum%type;
      v_try_id                            object.object_id%type;
      v_try_amount                        object_bv_value.business_variable_value%type;
      v_state                             object_state.object_state_id%type;
      c_try_count                         numeric;
      c_try_task_status_id                numeric;
      v_try_type                          lookup_list_value.lookup_enum%type;
      v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      in_object_cache                     pkg_os_object_cache.t_object_cache;
      io_action_outcome_id1               outcome.outcome_id%type;

      v_current_try_id                    object.object_id%type;
      v_current_try_state                 object_state.object_state_id%type;
      v_consolidatedTry_SchFunds_tf       object_bv_value.business_variable_value%type;
      v_most_recent_fiTransaction_id      object.object_id%type;
      v_webService_integration_TF         object_bv_value.business_variable_value%type;
      v_update                            char := 'T';

      cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
      and
              fitransaction_type_id = 901
        order by
            fitransaction_id;

      cursor c_ftry
      is
        select
            *
        from
            dragon_fund_trans_req_try
        where
            BILLINGACCOUNTTRXSET_ID = in_auto_transfer_bts_id;  --OSPRODUCT-502:renamed column

begin

      v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id);
      v_BTS_type     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BTS_Type  );
      c_try_count := pkg_os_object.fn_object_children_count_get(in_auto_transfer_bts_id, gObjType_Auto_Transfer_Try);
      v_consolidatedTry_SchFunds_tf := nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_auto_transfer_bts_id, gPd_Property_ConsolidateTry_TF),'F');
      v_webService_integration_TF :=  NVL(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_auto_transfer_bts_id,gPd_Property_WebService_TF),'F');

      pkg_os_logging.sp_log
      (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '... Disbursement AutoTransfer try create process Initiated...' ||
            ' bats Id is ' || in_auto_transfer_bts_id ||
            ' Property Consolidated Try for Sch funds ' ||
             v_consolidatedTry_SchFunds_tf ||
             ' Bats Type id is ' ||
             v_bts_type ||
             ' Try Count is ' ||
             c_try_count
      );

      if v_BTS_type in ( gBTSType_Disbursement ) then

            v_cash_xfer_objusage_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BTS_DisbursementProfile );
            v_cash_xfer_profile_id   :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_objusage_id, gbv_DisProfUsageRefProfile );--get CashTransferProfile from BillingAccountTransactionSet

            if v_cash_xfer_profile_id is null
            then

                  v_cash_xfer_objusage_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_billing_account_id, gbv_BillingAccDisburseProfile );
                  v_cash_xfer_profile_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_objusage_id, gbv_DisProfUsageRefProfile );--get default CashTransferProfile from BillingAccount

            end if;

            v_cash_xfer_profile_mode := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_profile_id, gbv_cashTrfProf_PymtMode );
            v_cash_xfer_prof_exp_date := to_date(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_profile_id, gbv_cashTrfProf_ProfStopDate ) , 'YYYYMMDDHH24MISS');

            if (v_cash_xfer_prof_exp_date is not null) and (nvl(c_try_count, 0) = 0) and v_cash_xfer_profile_mode <> gPolicyPaymentMode_Check then --- OSPRODUCT-11750 added mode condition

                  if to_date(v_cash_xfer_prof_exp_date) < to_date(pkg_db_functions.fn_get_billacc_current_date( in_session_id, in_transaction_id, v_billing_account_id)) then

                        if v_webService_integration_TF ='F' then

                              v_state := gState_Try_Failed;

                        else
                              v_state := gState_Try_Requested;

                        end if;

                  else

                        v_state := gState_Try_Requested;

                  end if;

                   io_action_outcome_id := gOutcome_PaymentProfExp;
                   return;

            else

                  v_state := gState_Try_Requested;

            end if;

      end if;
      if v_session_control.glogging_full then
            pkg_os_logging.sp_log
                  (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... v_cash_xfer_profile_id' ||v_cash_xfer_profile_id
                              ||'v_cash_xfer_profile_mode '|| v_cash_xfer_profile_mode
                              ||'c_try_count:'||c_try_count
                  );
            end if;

      if (v_cash_xfer_profile_id is not null) and (v_cash_xfer_profile_mode in (gPolicyPaymentMode_CC, gPolicyPaymentMode_EFT, gPolicyPaymentMode_Check)) and (nvl(c_try_count, 0) = 0) then


            if v_session_control.glogging_full then
                      pkg_os_logging.sp_log
                            (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name, '... Beginning of creation  a new try objects for BTS-ID:' ||in_auto_transfer_bts_id ||
                                        'Property v_consolidatedTry_SchFunds_tf ' || v_consolidatedTry_SchFunds_tf
                            );
            end if;

            for r_fitransaction in c_fitransaction
            loop

                  v_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATS_CurrentAutoTransfTry);

                  v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );
                    --   Unless this is a manually initiated try, create a new try object ...
                    --  if (v_try_id is null) or  (v_current_try_state = gState_Try_Invalidated) then

                  if ( nvl(v_consolidatedTry_SchFunds_tf,'F') = 'F' or  v_try_id is null or nvl(v_current_try_state,0) = gState_Try_Invalidated )
                  then
                        pkg_os_object.sp_object_create
                        (
                              in_session_id,
                              in_transaction_id,
                              gObjType_Auto_Transfer_Try,
                              in_auto_transfer_bts_id,
                              v_try_id
                        );

                        v_try_amount    :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_AssFITransaction, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_RefCTProfileUsed, v_cash_xfer_profile_id );            -- Auto_Transfer_Try - xReference - _Reference_Cash Transfer Profile used

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_RefCurrentTry, v_try_id);

                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_trx_type, gTry_TrxType_Refund );
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, v_state );
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );
                        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry, v_try_id);

                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

                        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );
                  else
                        v_try_amount    :=  nvl(v_try_amount,0) +  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

                  end if ;

            end loop;

            if nvl(v_consolidatedTry_SchFunds_tf,'F') = 'T'
            then

                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

                     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

            end if;

      elsif (v_cash_xfer_profile_id is not null) and (v_cash_xfer_profile_mode in (gPolicyPaymentMode_CC, gPolicyPaymentMode_EFT, gPolicyPaymentMode_Check)) and (nvl(c_try_count, 0) <> 0) then

            for r_fitransaction in c_fitransaction
            loop
                   v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_RefCurrentTry );

                   if v_current_try_id is not null then

                           v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState);

                   --UTPRODUCT-1609 start
                   else
							v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState);
                   --UTPRODUCT-1609 end
				   end if;
                               if v_session_control.glogging_full then
                      pkg_os_logging.sp_log
                            (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name, '...v_current_try_id' || v_current_try_id
                                        ||'v_current_try_state:'||v_current_try_state
                            );
                             end if;

                   --if (v_current_try_state = gState_Try_Resolved or  v_current_try_state = gState_Try_Invalidated) then
                    --UTPRODUCT-1609 commented above if and added below if condition
                    
                     if (v_current_try_state = gState_Try_Resolved or  v_current_try_state = gState_Try_Invalidated or  nvl(v_consolidatedTry_SchFunds_tf,'F') = 'F' or  v_try_id is null) then 
                 

                            pkg_os_object.sp_object_create
                                    (
                                          in_session_id,
                                          in_transaction_id,
                                          gObjType_Auto_Transfer_Try,
                                          in_auto_transfer_bts_id,
                                          v_try_id
                                    );

                              v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_AssFITransaction, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_RefCTProfileUsed, v_cash_xfer_profile_id );            -- Auto_Transfer_Try - xReference - _Reference_Cash Transfer Profile used
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_RefCurrentTry, v_try_id);
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_try_trx_type, gTry_TrxType_Refund );

                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry, v_try_id);

                              pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

                              pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );
							  
					 --UTPRODUCT-1609 start
                       else 
                        v_try_amount    :=  nvl(v_try_amount,0) +  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );
                    --UTPRODUCT-1609 end 		  

                   end if;

            end loop;
			
			
            --UTPRODUCT-1609 start
            if nvl(v_consolidatedTry_SchFunds_tf,'F') = 'T'
            then

                     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

                     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

            end if; 
            --UTPRODUCT-1609 end

            pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
            pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

      else

            pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to find a valid cash-transfer profile for creating a new try for BTS-ID:'||in_auto_transfer_bts_id );

            if io_action_outcome_id is null then
                io_action_outcome_id := goutcome_norecordfound;
                return;
            end if;

      end if;

      if v_cash_xfer_profile_mode in (gPolicyPaymentMode_Check, gPolicyPaymentMode_EFT)  
      then
           pkg_cs_db_auto_funds_transfer.sp_auto_checknum_generate(in_session_id,in_transaction_id,in_auto_transfer_bts_id);
      
      end if;

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Scheduled Disbursement Request Try creation process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end sp_auto_disbreqtry_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disb_resp
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_auto_disb_bts_id                Bats ID
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_disb_resp
(
      in_session_id                       in             object.object_id%type,
      in_transaction_id                   in             object.object_id%type,
      in_auto_disb_bts_id                 in             object.object_id%type,
      io_action_outcome_id                in out nocopy  outcome.outcome_id%type
) as

     v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disb_resp';
     v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_webService_integration_TF         object_bv_value.business_variable_value%type;
     --v_file_integration_TF               object_bv_value.business_variable_value%type;--OSPRODUCT-953
     v_count                             number :=0;
     v_resp_code                         object_bv_value.business_variable_value%type;
     v_resp_msg                          object_bv_value.business_variable_value%type;
     v_currFITransaction_id              object.object_id%type;
     v_currSchReqTry_id                  object.object_id%type;
     -- Arun - MUSTDEV-19074 - Start
     v_approval_status                   object_bv_value.business_variable_value%type;
     -- Arun - MUSTDEV-19074 - End
     v_profileused                       object.object_id%type;--OSPRODUCT-953
     v_mode                              object_bv_value.business_variable_value%type;--OSPRODUCT-953
	 v_OptimisticFlag_TF                 pd_property.pd_property_value%type;--UTPRODUCT-853
	 --OSPRODUCT-1558 start
     v_batchstatus_codes                    db_receipt_reversal_codes.batch_status%type;
     v_disbursement_status               object_bv_value.business_variable_value%type;   --OSPRODUCT-6417
     --OSPRODUCT-1558 end
     v_update                            char := 'T';

begin
     
     --OSPRODUCT-6417
     v_disbursement_status        := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_disb_bts_id,pkg_os_constant_bv.gbv_genobjobjectstate);
     
     if NVL(v_disbursement_status,0)= gState_BTS_Processed 
     then
           if v_session_control.gLogging_Full
           then

                 pkg_os_logging.sp_log
                    (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name, '| Disbursement batch ( ' || in_auto_disb_bts_id||
                          ') is already processed. So, a note should be created to inform the same.'
                     );

           end if; 
           
           v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_disb_bts_id,gbv_BATS_CurrentAutoTransfTry);
          
           if v_currSchReqTry_id is not null then
                
                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_currSchReqTry_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Successful);

                pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_currSchReqTry_id, v_update );
           
                sp_update_fund_receipt_res(in_session_id, in_transaction_id, in_auto_disb_bts_id, io_action_outcome_id );

           end if;
                
           io_action_outcome_id := gOutcome_LockboxDuplicateRec; 
           return;            
     
     end if;
     
     v_webService_integration_TF := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_auto_disb_bts_id,gPd_Property_WebService_TF);
      --v_file_integration_TF       :=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_auto_disb_bts_id,gPd_Property_FileService_TF);--OSPRODUCT-953

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '| Evaluating Disbursement Response | ' ||
                     ' Integration WebService T/F '  || v_webService_integration_TF ||
                     ' For Bats ID ' || in_auto_disb_bts_id
                  );

      end if;

          --UTPRODUCT-853 Start
      v_OptimisticFlag_TF :=   pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id,gPDProp_OptimisticFlag);
      
       if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, 
                     '|||Evaluated Optimistic Flag for check status Update' ||
                     'v_OptimisticFlag_TF=' || v_OptimisticFlag_TF ||
                     ' For Bats ID ' || in_auto_disb_bts_id
                  );

      end if;
      
      if v_OptimisticFlag_TF = 'T'
      then
           pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_auto_disb_bts_id,
                         gbv_Batx_CheckStatus, 
                         gBATrxSet_CheckStatus_Clear
                    ); 
      end if;
      
     
     --UTPRODUCT-853 End
	  
	  begin
        select count(1)
          into
            v_count
          from
            db_fb_transaction_staging stg,
            db_fb_batch_control ct,
            dragon_fund_trans_req_try try
          where
            ct.batch_id = stg.batch_id
            AND stg.request_transaction_id  = try.BILLINGACCOUNTTRXSET_ID  --OSPRODUCT-502:renamed column
          and
            request_transaction_id = in_auto_disb_bts_id
          and
            rownum <= 1;

      exception
       when others then
            v_count :=0 ;

      end;

      if v_count > 0  or (nvl(v_webService_integration_TF,'F') = 'F' /*and nvl(v_file_integration_TF,'F') = 'F'*/)--OSPRODUCT-953
      then

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... Schedule Disbursement Response starts for bats id  '||in_auto_disb_bts_id

                        );
            end if;

            sp_auto_disb_resp_tab
                  (
                        in_session_id,
                        in_transaction_id,
                        in_auto_disb_bts_id,
                        io_action_outcome_id
                  );

      else

            v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_disb_bts_id,gbv_BATS_CurrentAutoTransfTry);
             --OSPRODUCT-6032 brought it up as v_mode is required to fetch batch status
          v_profileused :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_Try_RefCTProfileUsed);
          v_mode        :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_profileused,gbv_cashTrfProf_PymtMode);
            
            v_resp_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_AutoTransfTry_RespnseCode);
            v_resp_msg := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_AutoTransfTry_RespnseMsg);
            /*-- Arun - MUSTDEV-19074 - Start
            v_approval_status := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,gbv_AutoTransfTry_ApprStatus   ); -- 33059164
            -- Arun - MUSTDEV-19074 - End*/
            --OSPRODUCT-953
            if v_resp_code is null
            then
                begin
                   --OSPRODUCT-6417  
                   select
                       REASON_CODE_SELF_ABBREV
                   into
                         v_resp_code
                   from
                         db_funds_receipt
                   where
                         AUTO_TRANSFER_TRY_ID = v_currSchReqTry_id
                   and   
                         dragon_object_id= 
                         	(
                              select max(dragon_object_id) 
                              from db_funds_receipt 
                              where  auto_transfer_try_id =v_currSchReqTry_id
                              )   ;    
                exception when others
                then
                     v_resp_code:= null;
                end;

            end if;
			
		--OSPRODUCT-1558 start
        
         if v_session_control.gLogging_Full
          then

            pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, 
                    'Calculated response code from receipt table '|| v_resp_code
                    || 'profile used:'||v_profileused
                    ||'v_mode:'||v_mode --OSPRODUCT-6032
                    ||'for try id ' ||v_currSchReqTry_id
                 );
       
		end if; 
       begin
          select BATCH_STATUS into v_batchstatus_codes
          from db_receipt_reversal_codes  rr
          where codepost = v_resp_code
          and rr.payment_type_id=v_mode; --OSPRODUCT-6032
       
       exception  
          when others then
               v_batchstatus_codes := null;
       end;
        
        if v_session_control.gLogging_Full
          then

            pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, 
                    'Retrieved batch status from reversal_code table '|| v_batchstatus_codes
                    ||'for try id ' ||v_currSchReqTry_id
                 );

          end if;
       if v_batchstatus_codes is not null 
       then
            
       --OSPRODUCT-1558 end

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,v_currSchReqTry_id,gbv_AutoTransfTry_RespnseCode, v_resp_code);


            
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id,in_auto_disb_bts_id,gbv_BATrx_RefAsscProfile, v_profileused);
            --OSPRODUCT-953
            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '| Evaluating Disbursement Response | ' ||
                        'WebService call ' || v_webService_integration_TF ||
                        ' Current Try Object is  ' || v_currSchReqTry_id      ||
                        ' Current FiTransaction OBject is ' || v_currFITransaction_id ||
                        ' Response Code is ' ||   v_resp_code ||
                        ' Response Message is ' ||  v_resp_msg ||
                        ' Approval Status is ' ||  v_approval_status||
                        ' profile used '||v_profileused||
                        ' profile mode '||v_mode
                  );

            end if;

            if nvl(v_mode,0) in (1,3)--OSPRODUCT-953
            then
                sp_auto_disb_resp_file--OSPRODUCT-953
                    (
                       in_session_id,
                       in_transaction_id,
                       in_auto_disb_bts_id,
                       v_resp_code,
                       v_resp_msg,
                       v_currSchReqTry_id,
                       io_action_outcome_id
                    );
            else

            sp_auto_disb_resp_web
                (
                   in_session_id,
                   in_transaction_id,
                   in_auto_disb_bts_id,
                   v_resp_code,
                   v_resp_msg,
                   v_currSchReqTry_id,
                       --v_approval_status, --HISCUP-1307
                   io_action_outcome_id
                );
            end if;
		  
     --OSPRODUCT-1558 start
     else 
          io_action_outcome_id := gOutcome_InvalidResponseCode;
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, 
                     'Invalid response code, outcome modified to '|| io_action_outcome_id
                );

          end if;
     end if;   
     --OSPRODUCT-1558 end	


      end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name, '| Evaluation of Disbursement Response completed | ' ||
                     'io_action_outcome_id '  || io_action_outcome_id
                  );

      end if;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Disbursement Response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_auto_disb_resp;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_receipt_request_try_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_receipt_request_try_create';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    gObjType_Auto_Transfer_Try          object_type.object_type_id%type := 3194146;
    gbv_Try_Type                        business_variable.business_variable_id%type := 32180146;
    gbv_Associated_Fitrx                business_variable.business_variable_id%type := 32857540;
    gbv_Current_Req_Try                 business_variable.business_variable_id%type := 32886840;
    v_billing_account_id                object.object_id%type;
    v_current_try_id                    object.object_id%type;
    v_current_try_state                 object_state.object_state_id%type;
    v_try_id                            object.object_id%type;
    v_try_amount                        object_bv_value.business_variable_value%type;
    v_update                            char := 'T';

    cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            fitransaction_type_id = 603
        order by
            fitransaction_id;

begin

  v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id);

  for r_fitransaction in c_fitransaction
    loop
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try );

      if v_current_try_id is not null then

        v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

      end if;

      if (v_current_try_id is null) or (v_current_try_state = 52940) then

        pkg_os_object.sp_object_create
        (
          in_session_id,
          in_transaction_id,
          gObjType_Auto_Transfer_Try,
          in_auto_transfer_bts_id,
          v_try_id
        );

        v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Associated_Fitrx, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try, v_try_id);
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_Type, 1 );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

        --Update FItransaction Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

      end if;

    end loop;

  --Update BillingAccountTransactionSet Datamart
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Receipt Request Try Create process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_receipt_request_try_create;

procedure sp_receipt_try_response
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     v_batch_id                         in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_receipt_try_response';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    v_billing_account_id                object.object_id%type;
    v_batch_status                      char(1);

    --   Datamart update ...
    v_update                            char := 'T';

    cursor c_frequest
      is
        select
          *
        from
          db_fb_transaction_staging
        where
          batch_ID = v_batch_id;

    cursor c_frequest_r
      is
        select
          *
        from
          db_fb_transaction_staging
        where
          batch_ID = v_batch_id
          and upper(datastage_status) = upper('Rejected');
begin

  select
    batch_status
  into
    v_batch_status
  from
    db_fb_batch_control
  where
    batch_id = v_batch_id;

  if upper(v_batch_status) = 'E' then
    update db_fb_transaction_staging
        set
        oneshield_status = 'Rejected',
        LAST_UPDATED_DATE = sysdate
        where
        batch_ID = v_batch_id;

    for r_request in c_frequest
      loop
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_request.REQUEST_ID, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Failed);

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_request.REQUEST_ID, v_update );
      end loop;

  else

    update db_fb_transaction_staging
        set
        oneshield_status = 'Rejected',
        LAST_UPDATED_DATE = sysdate
        where
        batch_ID = v_batch_id
        and upper(datastage_status) = upper('Rejected');

    for r_request in c_frequest_r
      loop
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_request.REQUEST_ID, pkg_os_constant_bv.gbv_GenObjObjectState, 53540); --set Rejected status

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_request.REQUEST_ID, v_update );
      end loop;
  end if;
    --Mark the batch as 'discard' if it is in 'error' state.
   /*  sp_fb_batch_update_disc
     (
          in_session_id,
          in_transaction_id,
          v_batch_id,
          io_action_outcome_id
     );*/
/*
    update DB_FB_BATCH_CONTROL
        set
        Batch_status = 'E'
        where
        BATCH_ID = v_batch_id;
*/
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Receipt Try Response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_receipt_try_response;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_withd_rev_req_try_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_withd_rev_req_try_create';--sp_withdrawal_reversal_request_try_create'; OSPRODUCT-4975
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    gObjType_Auto_Transfer_Try          object_type.object_type_id%type := 3194146;
    gbv_Try_Type                        business_variable.business_variable_id%type := 32180146;
    gbv_Associated_Fitrx                business_variable.business_variable_id%type := 32857540;
    gbv_Current_Req_Try                 business_variable.business_variable_id%type := 32886840;
    v_billing_account_id                object.object_id%type;
    v_current_try_id                    object.object_id%type;
    v_current_try_state                 object_state.object_state_id%type;
    v_try_id                            object.object_id%type;
    v_try_amount                        object_bv_value.business_variable_value%type;

    --   Datamart update ...
    v_update                            char := 'T';

    cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            fitransaction_type_id = 301
        order by
            fitransaction_id;

begin
  for r_fitransaction in c_fitransaction
    loop
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try );

      if v_current_try_id is not null then

        v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

      end if;

      if (v_current_try_id is null) or (v_current_try_state = 52940)--gState_Try_Failed)
      then

        pkg_os_object.sp_object_create
        (
          in_session_id,
          in_transaction_id,
          gObjType_Auto_Transfer_Try,
          in_auto_transfer_bts_id,
          v_try_id
        );

        v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Associated_Fitrx, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try, v_try_id);
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_Type, 3 );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, -1 * v_try_amount );

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

        --Update FItransaction Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

      end if;

    end loop;

  --Update BillingAccountTransactionSet Datamart
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Receipt Request Try Create process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_withd_rev_req_try_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_chequedisbreqtry_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_chequedisbreqtry_create';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
    v_try_id                            object.object_id%type;
    v_try_amount                        object_bv_value.business_variable_value%type;
    v_current_try_id                    object.object_id%type;
    v_current_try_state                 object_state.object_state_id%type;
    v_optimistic_flag_tf                            char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
    in_object_cache                     pkg_os_object_cache.t_object_cache;
    io_action_outcome_id1               outcome.outcome_id%type;

    gObjType_Auto_Transfer_Try          object_type.object_type_id%type := 3194146;
    gbv_try_type                        business_variable.business_variable_id%type := 32180146;
    gbv_Current_Req_Try                 business_variable.business_variable_id%type := 32886840;

    --   Datamart update ...
    v_update                            char := 'T';

    cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            status_enum = 38146
        order by
            fitransaction_id;


begin

  --Update BillingAccountTransactionSet Datamart
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  for r_fitransaction in c_fitransaction
      loop
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try );

      if v_current_try_id is not null then

        v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

      end if;

      if (v_current_try_id is null) or (v_current_try_state = 52940) then

                    pkg_os_object.sp_object_create
                    (
            in_session_id,
            in_transaction_id,
            gObjType_Auto_Transfer_Try,
            in_auto_transfer_bts_id,
            v_try_id
                    );

        v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, 32857540, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try, v_try_id);
--        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, 32179746, v_cash_xfer_profile_id );            -- Auto_Transfer_Try - xReference - _Reference_Cash Transfer Profile used

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_Type, 2 );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, v_try_amount );

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

        --Update FItransaction Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

        end if;

      end loop;

    if (v_optimistic_flag_tf = 'T' )
    then
              pkg_db_billing_payable.sp_disburse_batch_process
                (
                     in_session_id,
                     in_transaction_id,
                     in_auto_transfer_bts_id,
                     in_object_cache,
                     io_action_outcome_id1
                );

                    pkg_db_gl_transaction.sp_search_gl_entries
                    (
                        in_session_id ,
                        in_transaction_id ,
                        in_auto_transfer_bts_id
                    );

                    pkg_cs_db_dxf_exoskeleton.sp_create_exoskeleton
                    (
                        in_session_id,
                        in_transaction_id,
                        in_auto_transfer_bts_id,
                        io_action_outcome_id1
                    );
    end if;


exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Receipt Request Try Create process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_chequedisbreqtry_create;

procedure sp_cheque_disb_try_response
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     v_batch_id                         in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_cheque_disb_try_response';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    v_related_fitransaction_id          object.object_id%type;

    --   Datamart update ...
    v_update                            char := 'T';

    cursor c_frequest
      is
        select
          *
        from
          db_fb_transaction_staging
        where
          batch_ID = v_batch_id
          and upper(datastage_status) = 'ACCEPTED';

begin

    for r_request in c_frequest
      loop
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_request.REQUEST_ID, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Successful);

        v_related_fitransaction_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, r_request.request_id, 32857540);  --Auto_Transfer_Try - xReference - _Reference_Associated FITransaction

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_related_fitransaction_id, 29754746, to_char(r_request.cheque_number));

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_request.REQUEST_ID, v_update );
      end loop;

    update db_fb_transaction_staging
        set
        oneshield_status = 'Accepted',
        LAST_UPDATED_DATE = sysdate
        where
        batch_ID = v_batch_id
        and upper(datastage_status) = 'ACCEPTED';

io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling sp_cheque_disb_try_response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_cheque_disb_try_response;

procedure sp_cheque_disb_try_failure
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_disb_bts_id                in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_cheque_disb_try_failure';--'sp_auto_disb_request_try_create'; OSPRODUCT-4975
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    v_payment_mode_id                   object_bv_value.business_variable_value%type;
    v_policy_id                         object.object_id%type;
    v_current_date_time                           date;
    v_reversal_trx_id                                   object.object_id%type;
    v_assoc_fitem                       object.object_id%type;

    --   Datamart update ...
    v_update                            char := 'T';

cursor c_try
    is
        select
               *
          from
               dragon_fund_trans_req_try
          where
               BILLINGACCOUNTTRXSET_ID = in_auto_disb_bts_id;  ----OSPRODUCT-502:renamed column

cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_disb_bts_id
        order by
            fitransaction_id;

begin

  v_payment_mode_id  := pkg_os_object_io.fn_object_bv_path_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_auto_disb_bts_id,
                                      '32828640.30010546'
                                 );

  v_policy_id := pkg_os_object_io.fn_object_bv_path_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_auto_disb_bts_id,
                                      '29703546.29721146'
                                 );

  v_current_date_time := pkg_db_functions.fn_get_policy_current_date
                              (
                                in_session_id,
                                in_transaction_id,
                                v_policy_id
                              );

     pkg_db_reverse_apply.sp_reverse_cash_apply
          (
               in_session_id,
               in_transaction_id,
               in_auto_disb_bts_id,
               io_action_outcome_id,
               v_current_date_time
          );

     --get reversal trx ID from in_auto_disb_bts_id
     v_reversal_trx_id := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_auto_disb_bts_id,
                                      31756446
                                 );

     --call pkg_db_gl_transaction.sp_search_gl_entries
     pkg_db_gl_transaction.sp_search_gl_entries
      (
          in_session_id ,
          in_transaction_id ,
          v_reversal_trx_id
      );

    --create DXF exoskeleton
     pkg_cs_db_dxf_exoskeleton.sp_create_exoskeleton
     (
      in_session_id,
      in_transaction_id,
      v_reversal_trx_id,
      io_action_outcome_id
     );

     --set mail flag
     pkg_cs_db_billing.sp_set_mail_flag
     (
      in_session_id,
      in_transaction_id,
      v_reversal_trx_id,
      io_action_outcome_id
     );

  for r_try in c_try
  loop
    --set Rolledback status for Try object
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, 53946);
    --update Try datamart
    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );
  end loop;

  for r_fitransaction in c_fitransaction
  loop
    --get associated FItem that was disbursed
    v_assoc_fitem := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, 31689946);
    --set refence to Reversed Sched Disbursement
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_assoc_fitem, 32884540, in_auto_disb_bts_id);
  end loop;

  update db_fb_transaction_staging
        set
        oneshield_status = 'Rejected',
        LAST_UPDATED_DATE = sysdate
        where
        request_transaction_id = in_auto_disb_bts_id;

io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               --'...... Exception while calling sp_cheque_disb_try_response process. '
               '...... Exception while calling sp_cheque_disb_try_failure process. '  --OSPRODUCT-4975
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_cheque_disb_try_failure;

procedure sp_disb_rev_req_try_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

    v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_disb_rev_req_try_create';
    v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    gObjType_Auto_Transfer_Try          object_type.object_type_id%type := 3194146;
    gbv_Try_Type                        business_variable.business_variable_id%type := 32180146;
    gbv_Associated_Fitrx                business_variable.business_variable_id%type := 32857540;
    gbv_Current_Req_Try                 business_variable.business_variable_id%type := 32886840;

    v_cash_xfer_profile_id              object.object_id%type;
    v_cash_xfer_objusage_id             object.object_id%type;
    v_disb_original_batch_id                  object.object_id%type;
    v_billing_account_id                object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id);
    v_current_try_id                    object.object_id%type;
    v_current_try_state                 object_state.object_state_id%type;
    v_try_id                            object.object_id%type;
    v_try_amount                        object_bv_value.business_variable_value%type;

    v_update                            char := 'T';

    cursor c_fitransaction
      is
        select
            *
        from
            dragon_fitransaction
        where
            batch_ref_no = in_auto_transfer_bts_id
        and
            fitransaction_type_id = 1101 --Disbursement Reversal FITrx
        order by
            fitransaction_id;

begin

  v_disb_original_batch_id  :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, 31756346 ); -- get original Disbursement batch object id

  v_cash_xfer_objusage_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_disb_original_batch_id, gbv_bts_disbursementprofile );
  v_cash_xfer_profile_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_objusage_id, gbv_DisProfUsageRefProfile );--get CashTransferProfile from BillingAccountTransactionSet

  if v_cash_xfer_profile_id is null
  then

    v_cash_xfer_objusage_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_billing_account_id, gbv_BillingAccDisburseProfile );
    v_cash_xfer_profile_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_objusage_id, gbv_DisProfUsageRefProfile );--get default CashTransferProfile from BillingAccount

  end if;

  for r_fitransaction in c_fitransaction
    loop
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try );

      if v_current_try_id is not null then

        v_current_try_state := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_current_try_id, pkg_os_constant_bv.gbv_GenObjObjectState );

      end if;

      if (v_current_try_id is null) or (v_current_try_state = 52940)--gState_Try_Failed)
      then

        pkg_os_object.sp_object_create
        (
          in_session_id,
          in_transaction_id,
          gObjType_Auto_Transfer_Try,
          in_auto_transfer_bts_id,
          v_try_id
        );

        v_try_amount    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_FITrx_Amount );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Associated_Fitrx, r_fitransaction.fitransaction_id );  -- Auto_Transfer_Try - xReference - _Reference_Associated FITransaction
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, gbv_Current_Req_Try, v_try_id);
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_Type, 4 );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, 32179746, v_cash_xfer_profile_id );

        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Requested );
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_try_id, gbv_Try_ReconciledAmount, -1 * v_try_amount );

        -- Update the Try Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_try_id, v_update );

        --Update FItransaction Datamart
        pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_fitransaction.fitransaction_id, v_update );

      end if;

    end loop;

  --Update BillingAccountTransactionSet Datamart
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
  pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling sp_disb_rev_req_try_create. '
               ||'  Error Msg: '
               ||sqlerrm
          );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_disb_rev_req_try_create;

function fn_get_batch_error_message
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_batch_id                        in             object.object_id%type
)
return varchar2
is

     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'fn_get_batch_error_message';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_batch_errror                object_bv_value.business_variable_value%type;

begin

  select distinct (error_message)
    into
      v_batch_errror
    from
      db_fb_batch_control
    where
      batch_id = in_batch_id;

  return v_batch_errror;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling fn_get_batch_error_message. '
               ||'  Error Msg: '
               ||sqlerrm
          );

    return null;

end fn_get_batch_error_message;

--GCNA-1739 : created new function to get the original try
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_original_try
--
--   %USAGE
--        This function is created to get the Original Auto Transfer Try against which new Auto Transfer Try has been created when
--        a transaction is reversed.
--
--   %ALGORITHM
--        1.Retrieve the Try ID from the input parameter.
--        2.Now extract the batch id from the try id.This is the reversal batch id.
--        3.Now extract the original batch id from the reversal batch id.
--        4.Extract the policy no and amount from both the original and reversal batches.
--        5.Compare them and return the reversal try id.
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_try_id                              Try Object ID
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_original_try
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                          in             object.object_id%type
)
return number
is
     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'fn_get_original_try';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_return_try_id               number;
     v_original_batch_id           object.object_id%type;
     v_reversal_batch_id           object.object_id%type;
     v_reversal_policy_no          object_bv_value.business_variable_value%type;
     v_reversal_try_amt            number;
     v_assc_fitransaction          object_bv_value.business_variable_value%type;
     v_assc_action_policy          object_bv_value.business_variable_value%type;
     v_billing_acc_id              object_bv_value.business_variable_value%type;
     v_trx_type                    object_bv_value.business_variable_value%type;
     v_account_type                object_bv_value.business_variable_value%type;
     v_rev_assc_fitransaction      object_bv_value.business_variable_value%type;
     v_rev_assc_fitem              object_bv_value.business_variable_value%type;
     v_assc_fitem                  object_bv_value.business_variable_value%type;


     cursor c_orig_tx_details
     is
          Select
               policy_no,
               (amount)*-1 as amt,
               request_id
          from
               DB_FB_TRANSACTION_STAGING
          where
               request_transaction_id =  trunc(v_original_batch_id);

begin



     v_reversal_batch_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id,in_try_id );
     --GCNA-1843: Get Billing Account ID and Accoutn Type attribute.
     v_billing_acc_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id,v_reversal_batch_id );

     v_account_type := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_acc_id,
                                        gbv_ba_acc_type  -- Account Type
                                   );

     v_trx_type := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_try_id,
                                        gbv_try_trx_type-- Transaction Type
                                   );

     v_reversal_try_amt       :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_try_id,
                                        gbv_Try_ReconciledAmount-- Transaction Amount
                                   );
     --GCNA:1826 : Modified the BV
     v_assc_fitransaction     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_try_id,
                                        gbv_try_AssFITransaction --Associated FI Transaction
                                   );

    v_assc_fitem              :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_assc_fitransaction,
                                        gbv_assc_fitem--Associated FItem
                                   );

     v_assc_action_policy     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_assc_fitransaction,
                                        gbv_FITrxRefActionPolicy -- _Reference - Action Policy
                                   );

     v_reversal_policy_no     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_assc_action_policy,
                                        gbv_Policy_No -- _Reference -Policy No
                                   );

     v_original_batch_id      :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_reversal_batch_id,
                                        gbv_FITrx_OriginalBatch -- _Reference_FITrxSet Created by FITrxSet(Cash Transfer)
                                   );

     if v_session_control.glogging_full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Reversal Details: v_reversal_batch_id'||v_reversal_batch_id
               ||'v_reversal_try_amt :' ||v_reversal_try_amt
               ||'v_assc_fitransaction: '||v_assc_fitransaction
               ||'v_assc_action_policy :'||v_assc_action_policy
               ||'v_reversal_policy_no:'||v_reversal_policy_no
               ||'Original Tx Details: v_original_batch_id'|| v_original_batch_id
          );


     end if;
    /* dbms_output.put_line('Reversal Details: v_reversal_batch_id'||v_reversal_batch_id
               ||'v_reversal_try_amt :' ||v_reversal_try_amt
               ||'v_assc_fitransaction: '||v_assc_fitransaction
               ||'v_assc_action_policy :'||v_assc_action_policy
               ||'v_reversal_policy_no:'||v_reversal_policy_no
               ||'Original Tx Details: v_original_batch_id'|| v_original_batch_id);*/

     if v_original_batch_id is not null then

          for r_orig_tx_details in c_orig_tx_details
          loop
              --       dbms_output.put_line('r_orig_tx_details.policy_no:'||r_orig_tx_details.policy_no||'r_orig_tx_details.amt:'||r_orig_tx_details.amt||'r_orig_tx_details.request_id:'||r_orig_tx_details.request_id);

               if (v_reversal_policy_no = r_orig_tx_details.policy_no and v_reversal_try_amt = r_orig_tx_details.amt)
                    then

                          v_return_try_id := r_orig_tx_details.request_id;

                          v_rev_assc_fitransaction     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_return_try_id,
                                        gbv_try_AssFITransaction --Associated FI Transaction
                                   );

                          v_rev_assc_fitem              :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_rev_assc_fitransaction,
                                        gbv_assc_fitem--Associated FItem
                                   );

                              if v_assc_fitem = v_rev_assc_fitem
                              then
                                        exit;
                              end if;

               -- GCNA-1843 : Added below condition to handle Broker Account Types
               elsif (v_account_type = gbv_acct_type_broker and v_reversal_try_amt = r_orig_tx_details.amt)
                    then
                         v_return_try_id := r_orig_tx_details.request_id;

                         v_rev_assc_fitransaction     :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_return_try_id,
                                   gbv_try_AssFITransaction --Associated FI Transaction
                              );

                         v_rev_assc_fitem              :=  pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_rev_assc_fitransaction,
                                   gbv_assc_fitem--Associated FItem
                              );

                              if v_assc_fitem = v_rev_assc_fitem
                              then
                                        exit;
                              end if;
               end if;

          end loop;

     end if;

     return v_return_try_id;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling fn_get_original_try . '
               ||'  Error Msg: '
               ||sqlerrm
          );

     return null;

end fn_get_original_try;


---------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_async_batch_exists
--
--   %USAGE
--        This function is created to verify that if any batch of the input batch type is already running.
--
--   %ALGORITHM
--        This function queries the async_batch table to derive the status of the batch.
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_async_batch_type_id             Async Batch Type ID
--
--
--------------------------------------------------------------------------------------------------------------
function fn_async_batch_exists(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_async_batch_type_id             in             number
)
return varchar2
 is

     v_procedure_name              constant  system_log.program_name%type   :=   'fn_async_batch_exists';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_count                       number;

begin

   Select count(1) into v_count from async_batch
   where asynch_batch_type_id = in_async_batch_type_id and async_batch_status in (1,2);

   if v_count = 0
   then
     return 'T';
   else
     return 'F';
   end if;

end fn_async_batch_exists;
-----------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_cc_expiry_notice_create
--
--   %USAGE
--        This procedure creates the expiry notice transaction under the respective billing account.
--
--   %ALGORITHM
--        1. Create Billing Account Trx Set object under the associated Billing Account for CC Expiry Notice.
--        2. Create an FItransaction of type Credit Card Expiry under this BATrxSet.
--        3. Set the required BV's and update datamart
--        4. Update the flag expiry_notice_sent to 'T'
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_bats_id                         BATS ID
--
--
--------------------------------------------------------------------------------------------------------------
procedure sp_cc_expiry_notice_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_current_date                    in             date,
     in_bats_id                   in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

     v_procedure_name                      constant  system_log.program_name%type := pkg_name||'sp_cc_expiry_notice_create';
     v_session_control                       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_billing_account_id                    object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_bats_id);
     v_cc_exp_billing_trx_set_id           object.object_id%type;
     v_cc_expiry_fitrx_id                  object.object_id%type;
     v_policy_id                       object.object_id%type;
     v_pay_flag_tf                           object_bv_value.business_variable_value%type;
     v_disb_flag_tf                          object_bv_value.business_variable_value%type;
     v_update                                char := 'T';
     v_batch_type                            integer;
     v_batch_posted_date                     object_bv_value.business_variable_value%type;
     v_batch_processing_date                 object_bv_value.business_variable_value%type;
     v_external_batch_no                     object_bv_value.business_variable_value%type;
     v_entered_by                            varchar2(100) := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_session_id, '210086.211882');
     v_cc_expiry_month                       integer;
     v_cc_expiry_year                        integer;
     v_pay_prfl_usage                        object.object_id%type;
     v_disb_prfl_usage                       object.object_id%type;
     v_cashtrnsfr_prfl_id            object.object_id%type;

     cursor c_prfl(in_cashtrnsfr_prfl_id object.object_id%type)
     is

          Select
               count(1) as cnt,
               dpp.POLICY_ID ,
               dpp.PAY_PROFILE_ID as prfl_id
          FROM
               DRAGON_PAY_PROFILE dpp
          JOIN
               DRAGON_POLICY dpol
          ON
               dpp.POLICY_ID = dpol.POLICY_ID

          WHERE
               dpp.CTF_OBJECT_ID = in_cashtrnsfr_prfl_id
          group by
               dpp.PAY_PROFILE_ID, dpp.POLICY_ID
          union
          Select
               count(*) as cnt,
               ddp.POLICY_ID ,
               ddp.DISB_PROFILE_ID as prfl_id
          FROM
               DRAGON_DISB_PROFILE ddp
          JOIN
               DRAGON_POLICY dpol
          ON
               ddp.POLICY_ID = dpol.POLICY_ID
          WHERE
               ddp.CTF_OBJECT_ID = in_cashtrnsfr_prfl_id
          group by
               ddp.DISB_PROFILE_ID, ddp.POLICY_ID
          ;
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Process Credit Card Expiry Notice for Billing Transaction ID: '||in_bats_id
          );

     end if;

     --Get Cash transfer Profile associated with BATS
     v_cashtrnsfr_prfl_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_bats_id ,gbv_BATrx_RefAsscProfile  );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Cash Transfer Profile :'|| v_cashtrnsfr_prfl_id  );
     end if;

     --Get the policy id
     --v_policy_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cashtrnsfr_prfl_id ,32374746  );


     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Policy ID :'|| v_policy_id  );
     end if;

     --v_batch_type := gbv_CC_Expiry_Notice;

     v_batch_posted_date := to_char( in_current_date, pkg_os_constant.DragonDateFormatDefault);

     v_external_batch_no := 'Batch'||v_batch_posted_date;

     v_cc_expiry_month := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cashtrnsfr_prfl_id , gbv_CTF_CC_Exp_Month );

     v_cc_expiry_year := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cashtrnsfr_prfl_id , gbv_CTF_CC_Exp_Year );

     v_batch_processing_date := to_char(pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_bats_id ), pkg_os_constant.DragonDateFormatDefault );

     --Set BV's for Billing Account Transaction Set Created
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_InProcess );
     -- pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BTS_Type, v_batch_type );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BTS_External_Batch_ID, v_external_batch_no );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, pkg_db_cash_apply.gbv_fitrxsetenteredby, v_entered_by);
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BTS_Date_Posted, v_batch_posted_date);
     --pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_curr_tx_effective_date, v_batch_posted_date); --UTXPRODUCT-809
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BTS_Date_Processed, v_batch_processing_date);
     -- pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BATrx_RefAsscProfile,in_cash_trnsfer_prfl_id );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, pkg_db_object.gbv_FITrxSet_AccntingPeriod, pkg_db_functions.fn_get_fitransset_acct_prd(in_session_id,in_transaction_id,in_bats_id));


     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... CC Expiry Notice Billing Account Transaction Set with ID:'||in_bats_id );
     end if;

     for r_prfl in c_prfl(v_cashtrnsfr_prfl_id)
     loop

          v_policy_id := r_prfl.POLICY_ID;


          if (in_bats_id is not null)
          then
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_FITransaction,
                    in_bats_id,
                    v_cc_expiry_fitrx_id
               );

          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '......... Created CC Expiry Notice FITransaction with ID:'||v_cc_expiry_fitrx_id );
          end if;

          --Set BV's for the newly created FITransaction
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITransactionType, gFITrxType_CCExpiry );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrx_AssociatedAccount, v_billing_account_id );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrxRefActionPolicy, v_policy_id );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrxRefAssocPolicy, v_policy_id );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrxPaymentPrfl,v_cashtrnsfr_prfl_id );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrx_Exp_Month,v_cc_expiry_month);
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITrx_Exp_Year, v_cc_expiry_year);
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, gbv_FITransaction_EffDate, v_batch_posted_date);

          if r_prfl.cnt = 1
          then
               --Set the current transaction reference of BATrxSet with the CC Expiry FITransaction ID
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, gbv_BTS_CurrentTransaction, v_cc_expiry_fitrx_id );
          end if;

          --Set cc_expiry_notice_sent flag to True

          if(pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, r_prfl.prfl_id) = gObjType_PaymentPrflUsage )
          then
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_prfl.prfl_id, gbv_Pay_CCExpNoticeSent, 'T' );--Set Notice sent flag to T for payment profile
               --Update Payment Profile Usage datamart
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_prfl.prfl_id, v_update );

          elsif (pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, r_prfl.prfl_id) = gObjType_DisbPrflUsage )
          then
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_prfl.prfl_id, gbv_Disb_CCExpNoticeSent, 'T' );--Set Notice sent flag to T for disb profile
               --Update Disb Profile Usage datamart
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_prfl.prfl_id, v_update );
          end if;
     end loop;

     --Mark the batch as procesed
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_bats_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_Processed );

     --Update Billing Account Transaction Set datamart
     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_bats_id, v_update );
     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_account_id, v_update );

     --Update FItransaction datamart
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_cc_expiry_fitrx_id, v_update );

     --GCNA-2416: Set mail flag
     pkg_cs_db_billing.sp_set_mail_flag (in_session_id, in_transaction_id, in_bats_id, io_action_outcome_id);
     --Update Billing Account Transaction Set datamart
     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_bats_id, v_update );


     /*--Create Object Document under Billing Account Transaction Set
     --UTXPRODUCT-809 start
     pkg_os_product_document.sp_policy_doc_objects_create
     (
     in_session_id,
     in_transaction_id,
     1127464,
     in_bats_id,
     pkg_os_object_io.fn_object_bv_get(in_session_id,
     in_transaction_id,
     v_cashtrnsfr_prfl_id,
     pkg_os_policy_transaction.gbv_PolicyTrxType),
     io_action_outcome_id
     );

     --Create Exoskeleton objects for Billing Account Transaction Set
     pkg_cs_db_dxf_exoskeleton.sp_create_exoskeleton
     (
     in_session_id,
     in_transaction_id,
     in_bats_id,
     io_action_outcome_id
     );*/
     --UTXPRODUCT-809 end
          
     -- set newly created billing ac trx set as object_of_interest in session for usage in Common payload integration
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_session_id, 28987309, in_bats_id );

     --Set Outcome
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Credit Card expiry Notice Create process.'
               ||'  Error Msg: '||sqlerrm
          );
          io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
end sp_cc_expiry_notice_create;

----------------------------------------------------------------------------------------------------------------
procedure sp_get_associated_policy
(
          in_session_id                 in             object.object_id%type,
          in_transaction_id             in             object.object_id%type,
          in_billing_account_trx_set_id     in             object.object_id%type
)
as

       v_fitransaction_list                       pkg_os_object.t_object_list;
        v_fitransaction_inner_list                 pkg_os_object.t_object_list;
        v_associated_policy_id                     object.object_id%type ;
        v_associated_policy_id_inner               object.object_id%type ;
        v_associated_policy_id_temp               object.object_id%type ;
        v_fitransaction_id                         object.object_id%type ;
        v_fitransaction_id_inner                   object.object_id%type ;
        v_fitransaction_index                      number;
        v_fitransaction_inner_index                number;
        v_is_different                             boolean     := false;
begin

            pkg_os_object_search.sp_object_children_of_type_get
            (
                  in_session_id,
                  in_transaction_id,
                  in_billing_account_trx_set_id,
                  gObjType_FiTransaction, --- FITRANSACTION OBJECT TYPE (OBJECT TYPE ID)
                  v_fitransaction_list
            );
        v_fitransaction_inner_list := v_fitransaction_list;
              v_fitransaction_index      := v_fitransaction_list.first;
        while v_fitransaction_index is not null
          loop
              v_fitransaction_id  :=   v_fitransaction_list(v_fitransaction_index);

              v_associated_policy_id   :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fitransaction_id,
                                             gbv_FITrxRefAssocPolicy
                                        );

              if v_associated_policy_id is not null
              then
                v_associated_policy_id_temp := v_associated_policy_id;
                v_fitransaction_inner_index      := v_fitransaction_inner_list.first;
                while v_fitransaction_inner_index is not null
                  loop
                  v_fitransaction_id_inner  :=   v_fitransaction_inner_list(v_fitransaction_inner_index);

                  if v_fitransaction_id_inner is not null
                    then
                    v_associated_policy_id_inner   :=   pkg_os_object_io.fn_object_bv_get
                    (
                       in_session_id,
                       in_transaction_id,
                       v_fitransaction_id_inner,
                       gbv_FITrxRefAssocPolicy
                    );

                    if v_associated_policy_id_inner is not null and v_associated_policy_id_inner != v_associated_policy_id
                    then
                        v_is_different := true;
                        exit;
                    end if;
                  end if;
                  v_fitransaction_inner_index    :=   v_fitransaction_inner_list.next(v_fitransaction_inner_index);
                  end loop;
                  if  v_is_different = false
                  then
                    exit;
                  end if;
               elsif v_associated_policy_id is null
               then
                 exit;
               end if;
              v_fitransaction_index    :=   v_fitransaction_list.next(v_fitransaction_index);
           end loop;
       if  v_is_different = false
       then
                 pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_billing_account_trx_set_id, gbv_BTS_Associated_Policy, v_associated_policy_id_temp );
                end if;
end sp_get_associated_policy;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_funds_receipt_create_batch
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_payment_type               in         object_bv_value.business_variable_value%type,
     in_job_id                       in        object.object_id%type,
     io_billtrxset_id              in out    object.object_id%type,
     io_bill_acc_id                in out    object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as

     v_procedure_name                   constant system_log.program_name%type := pkg_name||'sp_funds_receipt_create_batch';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_fin_inst_account_id              object.object_id%type;
     v_fin_inst_ult_parent_id           object.object_id%type;
     v_billing_trx_set_id               object.object_id%type;
     v_account_status                   object.object_id%type; --OSPRODUCT-7365
     v_lock_status                      char(1) := 'F';

     v_count                            number  := 0;
     v_total_amount                     number  := 0;
     v_batch_type_id                    number;
     v_payment_mode_id                  number;
     v_update                           char(1) := 'T';
     v_eft_count                        number;
     v_eft_sum                          number;

     v_chq_count                        number;
     v_chq_amount                       number;

     v_entered_by                       varchar2(100) := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');


     cursor c_batch
     is
     select
          bc.file_identifier,
          bc.batch_number    -- PMADEV-1679
     from
          db_batch_control bc
     where
          bc.session_id = in_session_id
          and
          bc.validation_status = 'SUCCESS';


begin


  if v_session_control.gLogging_Full
        then
             pkg_os_logging.sp_log
             (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '... Billing trx set id: ' || v_billing_trx_set_id
             );
  end if;

   v_fin_inst_account_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_session_id,'210090.21814301.32031319.29704646310.343.63.63');

   if v_fin_inst_account_id is null
      then

          pkg_os_logging.sp_log_error
          (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                    '...... Error: There is no default financial institution billing account. Could not process with Payment Import.'
        );



        --UTPRODUCT-3325
        update DB_FUNDS_RECEIPT 
        set 
        transaction_state_id = '40346'
        where 
        session_id = in_session_id;
        
        io_action_outcome_id := gOutcome_FinancialInstitutionNotConfigured; --InternalError
        --UTPRODUCT-3325
		
        return;
      --OSPRODUCT-7365       Start
   else

        begin
             select
                  object_state_enum
             into
                  v_account_status
             from
                  dragon_billingaccount
             where
                  billingaccount_id =v_fin_inst_account_id;
        exception
             when others then
                  v_account_status:=null;
        end;
        if v_account_status <> pkg_db_object.gbillingacstatus_active or v_account_status is null then 

             pkg_os_logging.sp_log_error
             (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...... Error: There is no default Active financial institution billing account. Could not process with Payment Import.'
             );

             update
                  db_funds_receipt 
             set
                  transaction_state_id = '40346'
             where
                  session_id = in_session_id;

             io_action_outcome_id := gOutcome_FinancialInstitutionNotConfigured;
             
             return; -- OSPRODUCT-8310. The Lockbox File Import batch should fail.

      end if;  
      --OSPRODUCT-7365       End

      end if;


  for r_fund in c_batch loop

      --creating batch for ALL CHQ payments in scope of current file_identifier

     select
          count(nvl(amount,pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,in_transaction_id,source_amount))) as CHQ_Count,
          sum(NVL(amount,pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,in_transaction_id,source_amount))) as CHQ_Amount
     into
         v_chq_count,
         v_chq_amount
     from
          DB_FUNDS_RECEIPT fr, db_batch_control bc
     where
          fr.session_id = in_session_id
          and
          bc.session_id = in_session_id
          and
          fr.file_identifier = bc.file_identifier
          and
          bc.validation_status = 'SUCCESS'
          and
          transaction_type in ('CHQ','CHECKPAY')
          and
          fr.file_identifier = r_fund.file_identifier;

     if v_chq_count <> 0 and v_chq_amount <> 0
     then

          v_fin_inst_ult_parent_id := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id, in_transaction_id, v_fin_inst_account_id);

          pkg_os_lock.sp_set_object_lock

             (
                    in_session_id            => in_session_id,
                    in_transaction_id        => in_transaction_id,
                    in_object_id             => v_fin_inst_ult_parent_id,
                    out_lock_status          => v_lock_status

             );

          if v_lock_status = 'F'
          then

                pkg_os_logging.sp_log_error




                (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Error: Unable to lock object (id: ' || v_fin_inst_account_id|| '), or timeout waiting for lock.'

                );

               io_action_outcome_id := 30801; --ObjectLocked

               return;

          end if;


          v_batch_type_id        := gBTSType_CHQPaymentBatch;
          v_payment_mode_id      := gBTSPaymentMode_CHQ;


          pkg_os_object.sp_object_create

          (
              in_session_id,
              in_transaction_id,
              gObjType_BillingTrxSet,
              v_fin_inst_account_id,
              v_billing_trx_set_id

          );

          -- Now set the BVs for the Payment Batch
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, pkg_os_constant_bv.gbv_GenObjObjectState, gState_BTS_InProcess );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_BTS_Type, v_batch_type_id );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_BTS_Total_Amount, v_chq_amount );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_BTS_Total_NumItems, v_chq_count );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_BTS_Entry_Method, gBTSEntry_Import );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_FITrxSetEnteredby, v_entered_by );
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, gbv_BTS_Payment_Mode, v_payment_mode_id);

          --
          -- PMADEV-1679
          -- Commenting out the 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billing_trx_set_id), pkg_os_constant.DragonDateFormatDefault ));
          -- The new value r_fund.batch_number comes from the data file header and expects to be unique as we believe there is only one payment file per day from PMA
          --
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, pkg_db_cashpost.gbv_FITrxSetExternalBatchId, r_fund.batch_number);
          -- / PMADEV-1679
          --
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_billing_trx_set_id, pkg_db_cashpost.gbv_FITrxSetDatePosted, to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billing_trx_set_id), pkg_os_constant.DragonDateFormatDefault ));

          -- Updated the BTS Datamart
          pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_billing_trx_set_id, v_update );

          if v_session_control.gLogging_Full

          then
               pkg_os_logging.sp_log

               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '... CREATED trx set id: ' || v_billing_trx_set_id

               );
          end if;


          pkg_os_lock.sp_clear_object_lock

          (
              in_session_id         => in_session_id,
              in_transaction_id     => in_transaction_id,
              in_object_id          => v_fin_inst_ult_parent_id

          );



          update
               DB_FUNDS_RECEIPT

          set
               BILLING_ACCOUNT_ID = v_fin_inst_account_id,
               BILLING_ACC_TRX_SET_ID = v_billing_trx_set_id

          where
               TRANSACTION_TYPE in ('CHQ', 'CHECKPAY')

          and
               session_id = in_session_id

          and
               file_identifier = r_fund.file_identifier;


     end if;


  end loop;



  if io_action_outcome_id is null
  then
       io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  end if;

exception

     when others
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError; --InternalError

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Receipt Batch creation procedure. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end sp_funds_receipt_create_batch;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_upd_pma_batch_cntrl
(
     in_session_id                 in               object.object_id%type,
     in_transaction_id             in               object.object_id%type,
     in_session_control            in               pkg_os_session.r_dragon_session_control,
     in_table_name                 in               varchar2,
     in_status                     in               varchar2 default 'FAILURE',
     in_batch_number               in               varchar2,
     in_file_identifier            in               number,
     in_success_counter            in out nocopy    number
)
as
     v_procedure_name              constant system_log.program_name%type    := pkg_name||'sp_upd_pma_batch_cntrl';

begin

     if in_session_control.gLogging_Full
     then

         if in_status = 'SUCCESS'
         then
              pkg_os_logging.sp_log
              (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 '..........Validation status : SUCCESS! BATCH_NUMBER: '
                 || in_batch_number
                 ||' in_session: '
                 ||in_session_id
              );

         else
             pkg_os_logging.sp_log
             (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 '..........Validation status : FAILURE! Data loaded into'
                 ||in_table_name
                 ||' doesn"t match with control data! BATCH_NUMBER: '
                 || in_batch_number
                 ||' in_session: '
                 ||in_session_id
             );
         end if;

     end if;

     update
           db_batch_control
     set
           validation_status = in_status
     where
           session_id = in_session_id
           and
           file_identifier = in_file_identifier;

    if in_status = 'SUCCESS'
    then

        in_success_counter := in_success_counter + 1;

    end if;

exception
     when others  then

          pkg_os_logging.sp_log_error
          (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             '...... Exception while updating '
             ||in_table_name
             ||'  Error Msg: '
             ||sqlerrm
          );

end;

procedure sp_file_semantic_validation
(
     in_session_id                 in               object.object_id%type,
     in_transaction_id             in               object.object_id%type,
     in_action_id                  in               object.object_id%type,
     io_action_outcome_id          in out nocopy    outcome.outcome_id%type
)
as
    v_procedure_name               constant system_log.program_name%type    := pkg_name||'sp_file_semantic_validation';
    v_session_control              pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    v_file_type                    varchar(2);
    v_batch_number                 varchar(20);
    v_record_count_total           db_batch_control.record_count_total%type;
    v_net_dollar_amount_control    NUMBER(15,2);
    v_commission_amount_control    NUMBER(15,2);
    v_counter                      number(6)                                 := 0;
    v_success_counter              number(6)                                 := 0;
    v_validation_status            varchar(20);

    /*to handle exceptions*/
    v_curr_file_identifier         number(20)                                := null;
    v_curr_table_name              varchar(20)                               := null;
    v_count                        number ;
    v_message                      Clob;
    v_eoc_id                       object.object_id%type;
    v_dap_param                    object.object_id%type;
    v_async_batch_id               object.object_id%type;
    v_count_data                   number :=0;  --UTPRODUCT-1024 
    v_dup_lockbox_rec              number :=0;  --UTPRODUCT-981
    v_dup_rec_multiple_files       number :=0;  --UTPRODUCT-1361
    v_file_name                    varchar2(500);
    v_file_names_batch_control     varchar2(1000);
    v_file_names_duplicate         varchar2(1000);
    v_message_batch_control        Clob;
    v_message_duplicate            Clob;
    v_data_mismatch_lockbox        number :=0; 

    cursor c_control
    is
           select
                bc.batch_number,
                bc.record_count_total,
                nvl(bc.net_dollar_amount_control,0) as net_dollar_amount_control,
                nvl(bc.commission_amount_control,0) as commission_amount_control,
                bc.session_id,
                bc.file_number,
                bc.file_identifier
           from
                db_batch_control bc
           where
                bc.session_id = in_session_id;


begin


      io_action_outcome_id := gOutcome_TrxFeedValidtn_OK;

      if v_session_control.gLogging_Full
      then

          pkg_os_logging.sp_log
          (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...... Entereing sp_file_semantic_validation'
           );

      end if;

      delete from os_legacy_load_control;
      insert into os_legacy_load_control(run_tf) values ('T');


      for r_con in c_control loop

            v_counter := v_counter + 1;

             if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,gbv_ServiceOperationLabel)='lockbox'
               then
                    v_file_type := '03';
            else
					v_file_type := SUBSTR(r_con.batch_number,length(r_con.batch_number)-1,2);
             end if;

            v_curr_file_identifier := r_con.file_identifier;

            if v_session_control.gLogging_Full
            then

                    pkg_os_logging.sp_log
                    (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '........ File type to be checked: '
                            ||v_file_type
                            ||'  (01-PMA_ACCOUNT, 02-PMA_POLICY, 03-DB_FUNDS_RECEIPT, 04-PMA_PREMIUM)'
                    );

            end if;

            -- db_import_account
            if  v_file_type = '01'
            then
                  begin

                        v_curr_table_name      := 'db_import_account';

                        select
                              count(pa.file_identifier)
                              into
                              v_record_count_total
                        from
                              db_import_account pa
                        where
                              pa.session_id = r_con.session_id
                        and
                             pa.file_identifier = r_con.file_identifier;

                          if v_session_control.gLogging_Full
                          then

                              pkg_os_logging.sp_log
                              (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '.......... pma_account records loaded/Control count: '
                                ||v_record_count_total
                                ||'/'
                                ||r_con.record_count_total
                              );

                          end if;

                          if v_record_count_total <> r_con.record_count_total -- validation FAILURE
                          then
                              v_validation_status := 'FAILURE';

                              delete
                                    from db_import_account
                              where
                                    file_identifier = r_con.file_identifier;

                          else --validation SUCCESS

                              v_validation_status := 'SUCCESS';

                          end if;

                  exception when others
                   then

                          pkg_os_logging.sp_log_error
                          (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... Exception while executing validation! File identifier: '
                                  ||v_curr_file_identifier
                                  ||' Target tabel: '
                                  ||v_curr_table_name
                                  ||'  Error Msg: '
                                  ||sqlerrm
                           );


                     v_validation_status := 'FAILURE';

                        delete from db_import_account
                        where file_identifier = r_con.file_identifier;


                  end;

                  sp_upd_pma_batch_cntrl
                  (
                          in_session_id       =>  in_session_id,
                          in_transaction_id   =>  in_transaction_id,
                          in_session_control  =>  v_session_control,
                          in_table_name       =>  v_curr_table_name,
                          in_status           =>  v_validation_status,
                          in_batch_number     =>  r_con.batch_number,
                          in_file_identifier  =>  r_con.file_identifier,
                          in_success_counter  =>  v_success_counter
                  );

            elsif  v_file_type = '02' -- db_import_policy
             then

                  begin

                          v_curr_table_name      := 'db_import_policy';

                          select
                                count(pa.file_identifier)
                          into
                                v_record_count_total
                          from

                                db_import_policy pa
                          where
                                pa.session_id = r_con.session_id
                                and
                                pa.file_identifier = r_con.file_identifier;


                          if v_session_control.gLogging_Full
                          then

                              pkg_os_logging.sp_log
                              (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '.......... pma_policy records loaded/Control count: '
                                      ||v_record_count_total
                                      ||'/'
                                      ||r_con.record_count_total
                              );

                          end if;

                          if v_record_count_total <> r_con.record_count_total
                          then

                              v_validation_status := 'FAILURE';

                              delete from db_import_policy
                              where file_identifier = r_con.file_identifier;

                          else

                              v_validation_status := 'SUCCESS';
                          end if;

                  exception
                        when others then

                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... Exception while executing validation! File identifier: '
                                  ||v_curr_file_identifier
                                  ||' Target tabel: '
                                  ||v_curr_table_name
                                  ||'  Error Msg: '
                                  ||sqlerrm
                              );
                              v_validation_status := 'FAILURE';

                              delete from db_import_policy
                              where file_identifier = r_con.file_identifier;
                  end;

                  sp_upd_pma_batch_cntrl
                  (
                          in_session_id       =>  in_session_id,
                          in_transaction_id   =>  in_transaction_id,
                          in_session_control  =>  v_session_control,
                          in_table_name       =>  v_curr_table_name,
                          in_status           =>  v_validation_status,
                          in_batch_number     =>  r_con.batch_number,
                          in_file_identifier  =>  r_con.file_identifier,
                          in_success_counter  =>  v_success_counter
                  );

            elsif  v_file_type = '03' -- db_funds_receipt
            then

                    v_eoc_id          :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id , 27938205 );
                    v_dap_param       :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_eoc_id , 30061901 );
                    v_async_batch_id  :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_dap_param , 32047699 );
         
                    v_curr_table_name      := 'db_funds_receipt';

                    begin
                          
                          --UTPRODUCT-981 start
                        
                         select count(1)into v_dup_lockbox_rec
                         from  (SELECT  PAYMENT_REF_NUMBER, SOURCE_AMOUNT, COUNT(*)
                                FROM db_funds_receipt
                                WHERE SESSION_ID = in_session_id
                                And file_identifier = r_con.file_identifier
                                GROUP BY  PAYMENT_REF_NUMBER, SOURCE_AMOUNT
                                HAVING COUNT(*) > 1);
                                
                         
                          if v_dup_lockbox_rec=0
                          then
                          --UTPRODUCT-981 end
                  
                          select count(fr.file_identifier),

                                 nvl(sum(case
                                               when fr.transaction_type in
                                                    ('CHQ', 'CHECKPAY')

                                                then
                                                NVL(amount,
                                                    pkg_cs_db_auto_funds_transfer.fn_cs_amount_to_number_get(in_session_id,
                                                                                                             in_transaction_id,
                                                                                                             source_amount))
                                               else
                                                fr.amount
                                         end ),
                                     0 ) as net_dollar_amount_control
                                      into v_record_count_total,
                                           v_net_dollar_amount_control
                            from
                                  db_funds_receipt fr
                           where
                                 fr.session_id = r_con.session_id
                           and
                                 fr.file_identifier = r_con.file_identifier;
                                 
                                                       

                         if v_session_control.gLogging_Full
                           then

                             pkg_os_logging.sp_log
                             (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.......... db_funds_receipt loaded/Control count: '
                                   ||v_record_count_total
                                   ||'/'
                                   ||r_con.record_count_total
                                   ||', net_amount/control net amount: '
                                   || v_net_dollar_amount_control
                                   || '/'
                                   || r_con.net_dollar_amount_control
                             );

                          end if;


                          if (v_record_count_total = r_con.record_count_total)
                             and
                             (v_net_dollar_amount_control = r_con.net_dollar_amount_control)
                          then

                              v_validation_status := 'SUCCESS';

                          else
                            
                              v_data_mismatch_lockbox     := 1;
                          
                              v_validation_status := 'FAILURE';
                         
						      -- UTPRODUCT-1361  
                              begin
                                  select file_name into v_file_name 
                                  from import_export_file_log 
                                  where file_identifier = r_con.file_identifier;
                             
                                  if length(v_file_names_batch_control) >0 then
                                    v_file_names_batch_control :=  v_file_names_batch_control || ','  || v_file_name;
                                  else
                                    v_file_names_batch_control := v_file_name;
                                  end if;
                               EXCEPTION WHEN NO_DATA_FOUND then
                                 pkg_os_logging.sp_log
                                 (
                                 in_session_id,
                                 in_transaction_id,
                                 v_procedure_name,
                                 'File name not found which data missmatch'
                                 );
                               END;                                
                              
                              --UTPRODUCT-981 req3 start
                              io_action_outcome_id:=gOutcome_LockboxDataMismatch;
                           
                              v_message_batch_control := v_file_names_batch_control || ' Lockbox file(s) are rejected because there is a mismatch in payments received and batch control data.' ;      
                         
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.......... v_eoc_id: '||v_eoc_id
                                   ||' v_dap_param: '|| v_dap_param
                                   ||' v_async_batch_id: '|| v_async_batch_id
                                   ||'Mismatch Outcome returned '||io_action_outcome_id
                                   ||'Mismatch : '||v_message_batch_control
                               );
                              
                              --UTPRODUCT-981 req3 end

                             delete from db_funds_receipt
                              where file_identifier = r_con.file_identifier;

                          end if;
                   
               --UTPRODUCT-981 start
               else 
                    -- UTPRODUCT-1361       
                    v_dup_rec_multiple_files :=1;
                    
                    v_validation_status := 'FAILURE';
                    
                    begin
                            select file_name into v_file_name from 
                            import_export_file_log where file_identifier = r_con.file_identifier;
                                          
                            if length(v_file_names_duplicate) >0 then
                              v_file_names_duplicate :=  v_file_names_duplicate || ',' ||  v_file_name;
                            else
                              v_file_names_duplicate := v_file_name;
                            end if;
                     EXCEPTION WHEN NO_DATA_FOUND then
                            pkg_os_logging.sp_log
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_procedure_name,
                                 'File name not found which have the duplicate check and amount'
                            );
                    END;   
                
                    v_message_duplicate        :=   v_file_names_duplicate || ' Lockbox file(s) rejected as duplicate records found for the combination of check number and amount.'; 
               
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.......... v_eoc_id: '
                         ||v_eoc_id
                         ||' v_dap_param: '
                         || v_dap_param
                         ||' v_async_batch_id: '
                         || v_async_batch_id
                         ||'Duplicates : '
                         ||v_message_duplicate
                    );
                        
                end if;   
                 
                 --UTPRODUCT-981 end
                  

                   exception
                        when others  then

                     pkg_os_logging.sp_log_error
                     (
                             in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Exception while executing validation! File identifier: '
                            ||v_curr_file_identifier
                            ||' Target tabel: '
                            ||v_curr_table_name
                            ||'  Error Msg: '
                            ||sqlerrm
                     );


                     v_validation_status := 'FAILURE';
                    
                    delete from db_funds_receipt
                     where file_identifier = r_con.file_identifier;
                   end;

                   sp_upd_pma_batch_cntrl
                   (
                          in_session_id       =>  in_session_id,
                          in_transaction_id   =>  in_transaction_id,
                          in_session_control  =>  v_session_control,
                          in_table_name       =>  v_curr_table_name,
                          in_status           =>  v_validation_status,
                          in_batch_number     =>  r_con.batch_number,
                          in_file_identifier  =>  r_con.file_identifier,
                          in_success_counter  =>  v_success_counter
                   );

            elsif  v_file_type = '04' -- db_import_premium
             then

                  begin

                        v_curr_table_name      := 'db_import_premium';

                        select
                                count(pa.file_identifier),
                                nvl(sum(nvl(pa.transaction_amount,0)),0),
                                nvl(sum(nvl(pa.commission_amount,0)),0)
                              into
                                v_record_count_total,
                                v_net_dollar_amount_control,
                                v_commission_amount_control
                        from
                                db_import_premium pa
                        where
                                pa.session_id = r_con.session_id
                                and
                                pa.file_identifier = r_con.file_identifier;



                        if v_session_control.gLogging_Full
                        then

                              pkg_os_logging.sp_log
                              (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '.......... pma_premium records loaded/Control count: '
                                      ||v_record_count_total
                                      ||'/'
                                      ||r_con.record_count_total
                                      ||', net_amount/control net amount: '
                                      || v_net_dollar_amount_control
                                      || '/'
                                      ||r_con.net_dollar_amount_control
                                      ||', commission_amount/control comm. amount '
                                      || v_commission_amount_control
                                      || '/'
                                      ||r_con.commission_amount_control
                              );

                        end if;

                        if (v_record_count_total = r_con.record_count_total)
                        and
                              (v_net_dollar_amount_control = r_con.net_dollar_amount_control)
                        and
                              (v_commission_amount_control = r_con.commission_amount_control)
                        then

                              v_validation_status := 'SUCCESS';

                        else

                              v_validation_status := 'FAILURE';

                        delete from db_import_premium
                        where file_identifier = r_con.file_identifier;

                        end if;

                  exception when others then

                     pkg_os_logging.sp_log_error
                     (
                             in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Exception while executing validation! File identifier: '
                            ||v_curr_file_identifier
                            ||' Target tabel: '
                            ||v_curr_table_name
                            ||'  Error Msg: '
                            ||sqlerrm
                     );


                     v_validation_status := 'FAILURE';

                     delete from db_import_premium
                     where file_identifier = r_con.file_identifier;

                  end;


                   sp_upd_pma_batch_cntrl
                   (
                          in_session_id       =>  in_session_id,
                          in_transaction_id   =>  in_transaction_id,
                          in_session_control  =>  v_session_control,
                          in_table_name       =>  v_curr_table_name,
                          in_status           =>  v_validation_status,
                          in_batch_number     =>  r_con.batch_number,
                          in_file_identifier  =>  r_con.file_identifier,
                          in_success_counter  =>  v_success_counter
                   );

            --eft dishonor
            elsif  v_file_type = '05' -- db_funds_receipt -- EFT DISHONOR
                then

                  v_curr_table_name      := 'db_funds_receipt';

                   -- validation to check duplicate records
                   begin
                        v_count :=0;
                        select
                              count(1) into v_count
                        from
                              (
                                    select
                                          row_number() over(partition by auto_transfer_try_id order by dragon_object_id desc) cnt
                                    from
                                          db_funds_receipt
                                    where
                                          auto_transfer_try_id is not null
                                    and
                                          transaction_type = 'IDP Pymnt'
                                    and
                                          transaction_state_id is null
                                    --and
                                          --session_id  = in_session_id
                              )a
                        where (a.cnt > 1);

                   exception
                         when others  then

                        pkg_os_logging.sp_log_error
                        (
                             in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Exception while executing validation! for duplicate Try '
                            ||v_curr_file_identifier
                            ||' Target tabel: '
                            ||v_curr_table_name
                            ||'  Error Msg: '
                            ||sqlerrm
                        );


                        v_validation_status := 'FAILURE';

                        delete from db_funds_receipt
                        where file_identifier = r_con.file_identifier;

                   end;

                   if v_count <> 0 then

                       v_validation_status := 'FAILURE';

                       update db_funds_receipt
                       set transaction_state_id = decode(transaction_state_id,gState_FiTrxProcessed,gState_FiTrxProcessed,gState_FiTrxDuplicate)
                       where  auto_transfer_try_id in
                             ( select
                                       auto_transfer_try_id
                                 from
                              (
                                    select  auto_transfer_try_id,
                                          row_number() over(partition by auto_transfer_try_id order by dragon_object_id desc) cnt
                                    from
                                          db_funds_receipt
                                    where
                                          auto_transfer_try_id is not null
                                    and
                                          transaction_type = 'IDP Pymnt'
                                    and
                                          transaction_state_id is null
                                  --  and
                                         -- session_id  = in_session_id
                              )a
                        where (a.cnt > 1));

                        delete from db_funds_receipt
                        where file_identifier = r_con.file_identifier;
                  else
                        v_validation_status := 'SUCCESS';
                  end if;


                   sp_upd_pma_batch_cntrl
                   (
                          in_session_id       =>  in_session_id,
                          in_transaction_id   =>  in_transaction_id,
                          in_session_control  =>  v_session_control,
                          in_table_name       =>  v_curr_table_name,
                          in_status           =>  v_validation_status,
                          in_batch_number     =>  r_con.batch_number,
                          in_file_identifier  =>  r_con.file_identifier,
                          in_success_counter  =>  v_success_counter
                   );
                   
          elsif  v_file_type = '06' -- db_funds_receipt -- EFT/Wire/Check Disbursement Response
          then
          
               v_curr_table_name      := 'db_funds_receipt';
               v_count:= 0;

			    --UTPRODUCT-1856
			   v_message:= 'File has invalid Try IDs ';
				 
               for 
                    r_invalid_try 
               in 
                    (
                         select 
                              funds.payer_name payer_name, funds.amount amount, funds.auto_transfer_try_id try_id 
                         from 
                              db_funds_receipt funds, 
                              dragon_fund_trans_req_try try 
                         where 
                              try.schd_fund_req_try_id(+) = funds.auto_transfer_try_id
                         and 
                              file_identifier = r_con.file_identifier
                         and
                              transaction_type in ('EFTDISB', 'WIREDISB','CHECKDISB')
                         and
                              (
                                   funds.transaction_state_id  IS NULL
                                   OR
                                   funds.transaction_state_id  = 38146
                              )
                         and 
                              try.schd_fund_req_try_id is null
                    )
               loop
                    --UTPRODUCT-1856
                    v_message:= v_message||' '||r_invalid_try.try_id ||' , ';
                    v_count:= v_count+1;
                         
               end loop;
			   
			    --UTPRODUCT-1856
			    if v_count = 0 then 
                 
                 v_message :='';
                 
               end if;
               
               for 
                    r_try_amount_issue
               in 
                    (
                         select 
                              try.schd_fund_req_try_id try_id, funds.payer_name payer_name
                         from 
                              db_funds_receipt funds, 
                              dragon_fund_trans_req_try try 
                         where 
                              try.schd_fund_req_try_id(+) = funds.auto_transfer_try_id
                         and 
                              file_identifier = r_con.file_identifier
                         and
                              transaction_type in ('EFTDISB', 'WIREDISB','CHECKDISB')
                         and
                              (
                                   funds.transaction_state_id  IS NULL
                                   OR
                                   funds.transaction_state_id  = 38146
                              )
                         and 
                              nvl(funds.amount,0) = 0
                    )
               loop
                    
                    v_message:= v_message||' '||r_try_amount_issue.payer_name||' has 0 or null amount try response with try id '||r_try_amount_issue.try_id||' , ';
                    v_count:= v_count+1;
                    
               end loop;
               
               v_eoc_id                 :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id , 27938205 );
               v_dap_param              :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_eoc_id , 30061901 );
               v_async_batch_id         :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_dap_param , 32047699 );
               
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.......... v_eoc_id: '
                         ||v_eoc_id
                         ||' v_dap_param: '
                         || v_dap_param
                         ||' v_async_batch_id: '
                         || v_async_batch_id
                    );

               end if;
               
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_async_batch_id, 32730548, v_message );
               
               if v_count = 0
               then
                    v_success_counter:= 1;
               else
                    v_success_counter:= 0;
               end if;
               
          end if;

          v_count_data := v_count_data + 1;

    end loop;
    
    if v_session_control.gLogging_Full
    then

          pkg_os_logging.sp_log
          (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '......Validation summary: '
                  ||'Files checked: '
                  ||v_counter
                  ||' Number of successfull validations: '
                  ||v_success_counter
           );

    end if;
    
    if (v_success_counter > 0 or v_count_data =0 )
    then

          if v_session_control.gLogging_Full
        then

            pkg_os_logging.sp_log
            (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... sp_file_semantic_validation: Validation has been passed successfully!'
            );

        end if;

        io_action_outcome_id := gOutcome_TrxFeedValidtn_OK;

    else

        if v_session_control.gLogging_Full
            then
            pkg_os_logging.sp_log
            (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... sp_file_semantic_validation: Validation has FAILED!'
            );
         end if;
     
        --UTPRODUCT-981 start
        if   io_action_outcome_id <> gOutcome_LockboxDataMismatch
        then
              io_action_outcome_id := gOutcome_TrxFeedValidtn_Failed; --already present              
        else
          
              pkg_os_logging.sp_log
                  (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     'Since Lockbox file has Receipt-Control Mismatch, Outcome set as'||io_action_outcome_id
                  );
           
        end if;
        --UTPRODUCT-981 end 
    end if;
    
	-- UTPRODUCT-1361
    if v_data_mismatch_lockbox > 0
      then
        
              if v_dup_rec_multiple_files > 0
                then
                   v_message := v_message_batch_control || '  ' || v_message_duplicate;
              else
                   v_message :=  v_message_batch_control;
              end if;
         
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_async_batch_id, 32730548, v_message );
   
              pkg_os_logging.sp_log
                  (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     'Since Lockbox file has Receipt-Control Mismatch, Outcome set as'||io_action_outcome_id
                  );

               io_action_outcome_id := gOutcome_LockboxDataMismatch;
    end if;
    
 --UTPRODUCT-1024 start
 if v_count_data = 0
    then
    
          v_message := 'There is no file to import or no data in the file.';
          io_action_outcome_id := gOutcome_NoRecordFound;
            
		  -- UTPRODUCT-1361
          v_eoc_id                 :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id , 27938205 );
          v_dap_param              :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_eoc_id , 30061901 );
          v_async_batch_id         :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_dap_param , 32047699 );               
                      
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_async_batch_id, 32730548, v_message );               

     end if;
   --UTPRODUCT-1024  end
  
  --UTPRODUCT-981 start   
     if v_dup_rec_multiple_files > 0
          then 
            
            io_action_outcome_id := gOutcome_LockboxDuplicateRec;
           
			--UTPRODUCT-1361
			
            if length(v_message_batch_control) > 0
                  then
                     v_message := v_message_duplicate || '  ' || v_message_batch_control;
             else
                     v_message :=  v_message_duplicate;
             end if;
             
             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_async_batch_id, 32730548, v_message );
   
             pkg_os_logging.sp_log
             (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Lockbox file has duplicate records, outcome set to '||io_action_outcome_id
             );
          
     end if;

     --UTPRODUCT-981 end  

exception
     when others  then

          io_action_outcome_id := gOutcome_TrxFeedValidtn_Failed;

          pkg_os_logging.sp_log_error
          (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             '...... Exception while executing sp_file_semantic_validation '
             ||'  Error Msg: '
             ||sqlerrm
          );


end sp_file_semantic_validation;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- DDWIDEV-442
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_trxFeed_batch_fileset_check
--
--   %USAGE
--        Before processing, this function checks if a Policy Transaction Feed batch has a full set of files.
--
--   %ALGORITHM
--        Check the number of files and file types loaded for the batch in question.
--        File set concidered as OK if there are exactly 3 files in the set : one ACCOUNT file, one POLICY file and one PREMIUM file.
--        Returns 'T' if set is OK
--        Returns 'F' if set is not OK
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_trxFeed_batch_fileset_check
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
      out_status                    out       varchar2,
      out_err_msg                   out       varchar2
)
--return varchar2
as
     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'sp_trxFeed_batch_fileset_check';
     v_bath_fileset_OK_tf          char(1) := 'T';
      v_err_msg                     varchar2(1000);

begin
     for cur in (
                 with c
                 as
                 (
                   select 'ACCOUNT'    as bt_account,
                          'POLICY'     as bt_policy,
                          'POLICYFIN'  as bt_premium,
                            1          as bt_account_ch,
                           10          as bt_policy_ch,
                          100          as bt_premium_ch,
                          111          as bt_checksum_OK,
                          1000         as bt_ch_others
                     from dual
                 )
                 select batch_no,
                        case when c.bt_checksum_OK = (checksum_ac + checksum_po + checksum_pr)
                             then 'T'
                             else 'F'
                         end checksum_OK,
                        --
                        trim(',' from decode(checksum_ac, 0,      c.bt_account, '') ||
                                      decode(checksum_po, 0, ','||c.bt_policy,  '') ||
                                      decode(checksum_pr, 0, ','||c.bt_premium, '')
                            ) as list_missing,
                        --
                        trim(',' from decode(checksum_ac, 0, '', c.bt_account_ch, '',      c.bt_account) ||
                                      decode(checksum_po, 0, '', c.bt_policy_ch,  '', ','||c.bt_policy ) ||
                                      decode(checksum_pr, 0, '', c.bt_premium_ch, '', ','||c.bt_premium)
                            ) as list_duplicated
                  from (
                           select
                                  substr(b.batch_number,1,8) batch_no,
                                  sum(decode(b.batch_type, c.bt_account, c.bt_account_ch, c.bt_policy,0,              c.bt_premium, 0,               c.bt_ch_others)) checksum_ac,
                                  sum(decode(b.batch_type, c.bt_account, 0,               c.bt_policy,c.bt_policy_ch, c.bt_premium, 0,               c.bt_ch_others)) checksum_po,
                                  sum(decode(b.batch_type, c.bt_account, 0,               c.bt_policy,0,              c.bt_premium, c.bt_premium_ch, c.bt_ch_others)) checksum_pr
                             From
                                  db_batch_control b
                            cross join              c
                            where
                                  b.session_id = in_session_id
                            group by
                                  substr(b.batch_number,1,8)
                       )
                 cross join c
                )
     loop
          if cur.checksum_OK = 'F'
          then
               v_bath_fileset_OK_tf := 'F';
               v_err_msg            := v_err_msg || ' ERROR. The set of files for the batch '||cur.batch_no || ' is incorrect.' ||
                                               case when cur.list_missing is not null
                                                    then ' Missing files : ' || cur.list_missing || '.'
                                               end ||
                                               case when cur.list_duplicated is not null
                                                    then ' Duplicated files : ' || cur.list_duplicated || '.'
                                               end;
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'ERROR. The set of files for the batch '||cur.batch_no || ' is incorrect.' ||
                     case when cur.list_missing is not null
                          then ' Missing files : ' || cur.list_missing || '.'
                      end ||
                     case when cur.list_duplicated is not null
                          then ' Duplicated files : ' || cur.list_duplicated || '.'
                      end
               );
          end if;
     end loop;

      out_status       := v_bath_fileset_OK_tf;
      out_err_msg      := v_err_msg;


      --return v_bath_fileset_OK_tf;


end sp_trxFeed_batch_fileset_check;
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_post_file_import
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_id                  in        action.action_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
 as

     v_billtrxset_id               object.object_id%type;
     v_bill_acc_id                 object.object_id%type;

     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'sp_post_file_import';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_status                      char(1);
      v_err_msg                     varchar2(1000);


begin
     --UTPRODUCT-981 start commented hardcoding and added another if
     --if in_action_id = 1297946 -- Lockbox Payment Import 
     if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,gbv_ServiceOperationLabel)='lockbox'
     --UTPRODUCT-981 end
    then

       pkg_db_auto_funds_transfer.sp_funds_receipt_create_batch
       (

            in_session_id,
            in_transaction_id,


            null,
            null,
            v_billtrxset_id,
            v_bill_acc_id,

            io_action_outcome_id
       );

    else
      delete from os_legacy_load_control;
      insert into os_legacy_load_control(run_tf) values ('T');
      --
      -- Before processing, ceck if a Policy Transaction Feed batch has a full set of files
      --
      sp_trxFeed_batch_fileset_check
          (
              in_session_id,
             in_transaction_id,
               v_status,
               v_err_msg
          );


       if v_status = 'F' then
          RAISE_APPLICATION_ERROR
         (
              -20777,
              v_err_msg
         );
       end if;


      /*if fn_trxFeed_batch_fileset_check
         (
              in_session_id,
              in_transaction_id
         ) = 'F'
      then
           RAISE gExc_TrxFeed_BatchFilesetIsBad;
      end if;
      */
      --
      -- Populating the daily_trx and daily_trx_component.
      -- TRX Feed Object Selection should read from the daily_trx.
      --
      -- 1. Load records from main data table. For TRX feed tha main data table is DB_IMPORT_PREMIUM.
      --    This is mandatory step.
      --    Insert into daily_trx along with daily_trx_component as there is a foreign key in the daily_trx_component
      --

      pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,v_procedure_name,'...Executing TRX Feed Import Action. Session ID '||in_session_id);
      pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,v_procedure_name,'......Populating the daily_trx and daily_trx_component...');

      insert all
        into daily_trx           (trx_id, trx_prior, status)                     values (trx_ID, trx_prior, PKG_OS_ASYNC.gJobCreated)
        into daily_trx_component (trx_id, external_table_id, external_table_pk)  values (trx_ID, gExternalTable_import_premium, dragon_object_id)
      with pr as (
              select /*+ MATERIALIZE */  -- Causes Oracle to put the query block into a temporary table for the duration of the query - and then that data is removed.
                                         -- Neede this to ensure the trx_ID generation is invoked only ones and is not invoked in the window analytis function LAG
                                         --
                                         -- DO NOT REMOVE THIS HINT! REMOVING THE HINT WILL LEAD TO FOREIGN KEY VIALATION IN THE DAILY_TRX_COMPONENT TABLE.
                    pr.dragon_object_id,
                    pr.account_number,
                    pr.POLICY,
                    pr.policy_sub_number,
                    pr.first_due_date,
                    PKG_OS_OBJECT.fn_object_create_id(gObjType_IntegrationDailyTrx) trx_ID
               from db_batch_control bc
               join db_import_premium       pr on (bc.file_identifier = pr.file_identifier)
              where
                    bc.batch_type = 'POLICYFIN'
                and
                    bc.validation_status = 'SUCCESS'
                and
                    bc.session_id = in_session_id
                and
                    not exists (select 1 from daily_trx_component dtc
                                 where dtc.external_table_pk = pr.dragon_object_id
                                   and dtc.external_table_id = gExternalTable_import_premium
                               )
      )
      select
              pr.dragon_object_id,
              pr.trx_id,
              LAG(pr.trx_id,1,NULL)OVER(partition by TRIM(pr.account_number),TRIM(pr.POLICY),TRIM(pr.policy_sub_number)
                                            order by pr.first_due_date, pr.dragon_object_id -- sort same order records appear in the .dat file
                                                                                            -- but take into account first due date. it is priority.
                                        ) trx_prior
        from  pr
        order by dragon_object_id -- to keep the trx_id in same order...
      ;
      --
      --2. Load records from other data tables to the daily_trx_component. Optional step. Needed for TRX Feed.
      --
      merge into daily_trx_component d
       using (
               with pr as (
                     select
                            bc.batch_number,
                            pr.dragon_object_id,
                            pr.account_number,
                            pr.POLICY,
                            pr.policy_sub_number,
                            dtc.trx_id
                       from db_batch_control bc
                       join db_import_premium    pr on (bc.file_identifier = pr.file_identifier)
                       join daily_trx_component dtc on (dtc.external_table_pk = pr.dragon_object_id and dtc.external_table_id = gExternalTable_import_premium)
                      where
                      --      bc.batch_type = 'POLICYFIN'
                      --  and
                      --      bc.validation_status = 'SUCCESS'
                      --  and
                            bc.session_id = in_session_id
                   )
              select pr.trx_id                     as trx_id,
                     gExternalTable_import_account as external_table_id,
                     ac.dragon_object_id           as external_table_pk
                from pr
                join db_batch_control bc_ac on (SUBSTR(TRIM(pr.batch_number),1,8) = SUBSTR(TRIM(bc_ac.batch_number),1,8) and
                                                 bc_ac.batch_type = 'ACCOUNT' and
                                                 bc_ac.validation_status = 'SUCCESS'
                                                )
                join db_import_account   ac on (bc_ac.file_identifier = ac.file_identifier  and
                                                 ac.account_number = pr.account_number
                                                )

              -------------------
               union all
              -------------------
              select pr.trx_id                     as trx_id,
                     gExternalTable_import_policy  as external_table_id,
                     po.dragon_object_id           as external_table_pk
                from pr
                join db_batch_control bc_po on (SUBSTR(TRIM(pr.batch_number),1,8) = SUBSTR(TRIM(bc_po.batch_number),1,8) and
                                                 bc_po.batch_type = 'POLICY' and
                                                 bc_po.validation_status = 'SUCCESS'
                                                )
                join db_import_policy    po on (bc_po.file_identifier = po.file_identifier  and
                                                 TRIM(po.account_number)||TRIM(pr.POLICY)||TRIM(po.policy_sub_number) = TRIM(pr.account_number)||TRIM(pr.policy)||TRIM(pr.policy_sub_number)
                                                )
            ) s
        on (s.trx_id = d.trx_id and
            s.external_table_id = d.external_table_id and
            s.external_table_pk = d.external_table_pk
           )
      when not matched then insert  (
                                      d.trx_id,
                                      d.external_table_id,
                                      d.external_table_pk
                                    )
                             values
                                    (
                                      s.trx_id,
                                      s.external_table_id,
                                      s.external_table_pk
                                    )
      ;

-- DDWIDEV-442
      io_action_outcome_id :=  pkg_os_constant.gOutcome_OK;

    end if;

end sp_post_file_import;
------------------------------------
/*
procedure sp_fb_batch_update_disc
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_batch_id                        in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as
v_procedure_name            constant  system_log.program_name%type := pkg_name||'sp_fb_batch_update_disc';
v_session_control                       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
v_batch_status                          char;
v_batch_id                              number(12);

begin

--fetch the status of the batch
     Select
          batch_status
     into
          v_batch_status
     from
          DB_FB_BATCH_CONTROL
     where
          batch_id = in_batch_id ;

     if v_session_control.glogging_full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......v_batch_status...'||v_batch_status||'...v_batch_id'||in_batch_id
          );
     end if;
--Set batch status as Discard for batches in Error State
     if upper(v_batch_status)='E'
     then
          update
               DB_FB_BATCH_CONTROL
          set
               BATCH_STATUS = 'D'
          where
               batch_id = in_batch_id;
     end if;

--Set Outcome
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while updating batch control update'
               ||'  Error Msg: '
               ||sqlerrm
          );

     io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

end sp_fb_batch_update_disc;
*/
--GCNA-2549
---------------------------------------------------------------------------------------

--
--   %NAME
--        sp_fb_batch_update_disc1
--
--   %USAGE
--        This procedure is used to mark the batches in Error state as 'Discarded'
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_pay_mode_id                     Payment Mode
--   %PARAM    in_trx_type_id                     Transaction Type
--   %PARAM    io_action_outcome_id               Action Outcome
--
-----------------------------------------------------------------------------

procedure sp_fb_batch_update_disc
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_pay_mode_id                     in             number,
     in_trx_type_id                     in             number,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as
     v_procedure_name                        constant  system_log.program_name%type := pkg_name||'sp_fb_batch_update_disc';
     v_session_control                       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_batch_pay_method                      varchar2(100);

     --cursor to get the batches in error state
     cursor c_get_batch is

          Select
               dfbc.batch_id
          from
               DB_FB_BATCH_CONTROL dfbc

          where
               dfbc.BATCH_PAYMENT_METHOD = v_batch_pay_method
          and
               dfbc.BATCH_STATUS = 'E';
begin

     v_batch_pay_method := '';

     --Check the payment mode and transaction type
     if in_pay_mode_id is not null and in_trx_type_id is not null
     then

        case
        when in_trx_type_id in (1)
        then
          v_batch_pay_method := 'Receipt';
        when in_trx_type_id in (2)
        then
          v_batch_pay_method := 'Payment';
        end case;

        case in_pay_mode_id
        when 1
        then
          v_batch_pay_method := 'Cheque ' || v_batch_pay_method;
        when 2
        then
          v_batch_pay_method := 'Credit Card ' || v_batch_pay_method;
        when 3
        then
          v_batch_pay_method := 'EFT ' || v_batch_pay_method;
        end case;

     end if;



     --Execute the cursor and set batch status as Discard for batches in Error State
    For r_get_batch in c_get_batch
    loop
          update
               DB_FB_BATCH_CONTROL
          set
               BATCH_STATUS = 'D'
          where
               batch_id = r_get_batch.batch_id;
     end loop;

     --Set Outcome
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while updating batch control update'
               ||'  Error Msg: '
               ||sqlerrm
          );

     io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

end sp_fb_batch_update_disc;
---------------------------------------------------------------------------
function fn_staging_batch_exists(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                          in             number
)
return varchar2
is

     v_procedure_name              constant  system_log.program_name%type   :=   'pkg_db_auto_funds_transfer.fn_staging_batch_exists'; --'pkg_db_auto_funds_transfer.fn_async_batch_exists';OSPRODUCT-4975
     v_session_control             pkg_os_session.r_dragon_session_control  :=    pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_batch_id                    object.object_id%type;

begin

     begin
          Select
               batch_id
          into
               v_batch_id
          from
               db_fb_transaction_staging
          where
               request_id = in_try_id;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... v_batch_id:'||v_batch_id );

          end if;

          exception
          when no_data_found
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine batch id:'||in_try_id);
               null;
     end;

     if v_batch_id is null
     then
          return 'T';
     else
          return 'F';
     end if;

end fn_staging_batch_exists;
---------------------------------------------------------------------------
--GCNA-2604
procedure sp_async_batch_count
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_user_session_id                 in             number,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_trx_type_id                     in             number
)
as
     v_procedure_name                        constant  system_log.program_name%type := pkg_name||'sp_async_batch_count';
     v_session_control                       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_async_batch_id                        number;
     v_tot_job_cnt                           number:=0;
     v_succ_job_cnt                          number:=0;
     v_err_job_cnt                           number:=0;
     v_actual_job_count                      number:=0;
     v_async_batch                           Object_Bv_Value.Business_Variable_Value%type;



begin
     --DERIVE ASYNC BATCH from in_user_session_id
     v_async_batch := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_user_session_id , '210356.27938205.30061901.32047699');

      pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine async batch '||v_async_batch ||' for in_user_session_id: '||in_user_session_id);

     begin
     select
           max(ab.async_batch_id)
     into
          v_async_batch_id
     from
          async_batch ab
     where
          ab.asynch_batch_type_id = in_trx_type_id
   --  and
          --ab.async_batch_user_session_id = in_user_session_id;
          ;
     exception
          when
               no_data_found
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine count for batch: '||v_async_batch_id ||' for in_user_session_id: '||in_user_session_id);
               null;

     end;

     begin
          Select
               ab.ASYNC_BATCH_JOB_COUNT, ab.ASYNC_BATCH_SUCCESS_JOB_COUNT
          into
               v_tot_job_cnt,v_succ_job_cnt
          from
               async_batch ab
          where
               ab.async_batch_id = v_async_batch_id ;

     exception
          when
               no_data_found
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine count for batch: '||v_async_batch_id);
               null;

     end;

     begin
          Select
               count(1)
          into
               v_err_job_cnt
          from
               async_job_status ajs
          where
               ajs.async_batch_id = v_async_batch_id
          and
               ajs.JOB_STATUS = 4;
     exception
          when
               no_data_found
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to determine error job count for batch: '||v_async_batch_id);
               null;

     end;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_tot_job_cnt:'||v_tot_job_cnt||'v_succ_job_cnt:'||v_succ_job_cnt||'v_async_batch_id:'||v_async_batch_id
          );

     end if;

     v_actual_job_count:= v_succ_job_cnt + v_err_job_cnt;

     if v_err_job_cnt > 0
     then
           io_action_outcome_id:= gOutcome_PolicyTransformError                   ;
     elsif (v_tot_job_cnt = v_actual_job_count )
     then
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     elsif (v_actual_job_count < v_tot_job_cnt)
     then
          io_action_outcome_id := gOutcome_Wait;
     else
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     end if;


       pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Outcome return for async batch '||v_async_batch_id ||' for in_user_session_id: '||in_user_session_id||' io_action_outcome_id ' ||io_action_outcome_id);

exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while finding count'
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_async_batch_count;
---------------------------------------------------------------------------------------
Procedure sp_batch_in_sleep(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_duration                        in             number,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)

is

     v_procedure_name              constant  system_log.program_name%type   :=   'pkg_db_auto_funds_transfer.sp_batch_in_sleep';
     v_session_control             pkg_os_session.r_dragon_session_control  :=    pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_return_value                char(1);

begin

     v_return_value:= pkg_cs_db_functions.fn_sleep(in_session_id, in_transaction_id, in_duration);

     if (v_return_value = 'T')
     then
          io_action_outcome_id := PKG_OS_CONSTANT.gOutcome_OK;

     end if;

end sp_batch_in_sleep;
-----------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_pre_GLFeed_export
--
--   %USAGE
--        This procedure is used to calculate totals from DB_EXPORT_GL_RECONCIALIATION for pending records
--        and make an entry in DB_BATCH_CONTROL table
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_pre_GLFeed_export
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type
)
as
     v_total_count                 integer;
     v_total_gross                 number(12,2);
     v_total_commission            number(12,2);
     v_total_net                   number(12,2);


begin

     --Select required totals from DB_EXPORT_GL_RECONCIALIATION table where status is pending
     select
              count(*)
     into
              v_total_count
     from
              DB_EXPORT_GL_RECONCIALIATION
     where
              status_id=gState_Pending;

     select
              sum(gross_amount)
     into
              v_total_gross
     from
              DB_EXPORT_GL_RECONCIALIATION
     where
              status_id=gState_Pending;

     select
              sum(COMMISSION_AMOUNT)
     into
              v_total_commission
     from
              DB_EXPORT_GL_RECONCIALIATION
     where
              status_id=gState_Pending;

     select
              sum(NET_AMOUNT)
     into
              v_total_net
     from
              DB_EXPORT_GL_RECONCIALIATION
     where
              status_id=gState_Pending;


     -- Insert record in DB_BATCH_CONTROL table
     insert into
            DB_BATCH_CONTROL
     (
          batch_number,
          file_number,
          batch_type,
          record_count_total,
          net_dollar_amount_control,
          commission_amount_control,
          gross_amount_control,
          session_id,
          batch_date,
          processing_timestamp,
          batch_status
     )
     values
     (
          to_char(sysdate,'MMDDYYYY')||'06',
          06,
          'GLFEED',
          v_total_count,
          v_total_net,
          v_total_commission,
          v_total_gross,in_session_id,
          sysdate,
          sysdate,
          gState_Pending_text
     );

end sp_pre_GLFeed_export;

---------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_post_GLFeed_export
--
--   %USAGE
--        This procedure is used to update status in DB_BATCH_CONTROL and DB_EXPORT_GL_RECONCIALIATION tables
--        where status is pending
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_post_GLFeed_export
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type
)
as

begin

     --update status in DB_BATCH_CONTROL and DB_EXPORT_GL_RECONCIALIATION tables where status is pending
     update
              DB_BATCH_CONTROL
     set
              batch_status=gState_Exported_text
     where
              upper(batch_status)=gState_Pending_text
     and
              file_number='06';

     update
              DB_EXPORT_GL_RECONCIALIATION
     set
              STATUS_ID=gState_Exported,
              status=gState_Exported_text
     where
              status_id=gState_Pending;


end sp_post_GLFeed_export;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Function fn_get_external_table_id
--
-- Purpose : to get access to package CONSTANTS from SQL
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_external_table_id
(
     in_external_table_name        in        varchar2
)
return number DETERMINISTIC
is
begin
     return case upper(in_external_table_name)
              when 'DB_IMPORT_ACCOUNT'      then gExternalTable_import_account
              when 'DB_IMPORT_POLICY'       then gExternalTable_import_policy
              when 'DB_IMPORT_PREMIUM'      then gExternalTable_import_premium
              when 'DB_FUNDS_RECEIPT'       then gExternalTable_db_funds_rcpt
              else NULL
            end;
end fn_get_external_table_id;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_withdraw_resp_tab
--
--   %USAGE
--   For a given auto-withdrawal object,Process the Auto_Transfer Try object based on response received
--   This SP is specific ,if call is not web service based.
--
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    io_action_outcome_id               Action Outcome Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_withdraw_resp_tab
(
      in_session_id                       in             object.object_id%type,
      in_transaction_id                   in             object.object_id%type,
      in_auto_transfer_bts_id             in             object.object_id%type,
      in_current_date                     in             date,
      io_action_outcome_id                in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name                    constant        system_log.program_name%type := pkg_name||'sp_auto_withdraw_resp_tab';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


      v_dishonor_code                     object_bv_value.business_variable_value%type;
      v_dishonor_code_inner               object_bv_value.business_variable_value%type;
      v_req_err_flag                      char;
      v_req_err_message                   object_bv_value.business_variable_value%type;
      v_req_prod_branch                   object_bv_value.business_variable_value%type;
      v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      v_current_date_time                 date;
      v_update                            char := 'T';
      v_resp_status                       object_bv_value.business_variable_value%type;
      v_batch_status                      object_bv_value.business_variable_value%type;
      v_payment_mode_id                   object.object_id%type;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;
      v_batch_id                          object.object_id%type;
      v_pmt_cash_prfl_id                  object.object_id%type;

      cursor c_try
          is
              select
                     *
                from
                     dragon_fund_trans_req_try
                where
                     BILLINGACCOUNTTRXSET_ID = in_auto_transfer_bts_id; --OSPRODUCT-502:renamed column

begin

      --GCNA-947 get datastage status of this request
      select
            distinct stg.datastage_status, ct.batch_status, ct.batch_id
            into  v_resp_status, v_batch_status, v_batch_id
      from
           db_fb_transaction_staging stg,
           db_fb_batch_control ct
      where
           ct.batch_id = stg.batch_id
      and
           request_transaction_id = in_auto_transfer_bts_id
      and
            rownum <= 1;

     if v_session_control.gLogging_Full
     then

            pkg_os_logging.sp_log
            (
            in_session_id,
            in_transaction_id,
            v_procedure_name, '||| Evaluating Schedule Withdrawal Trx datastage status||| '||
            ' v_batch_status ' || v_batch_status||
            'v_resp_status:'||v_resp_status
            );

     end if;

     if ( upper(v_resp_status) = 'REJECTED' Or v_batch_status = 'E' )
     then

            --Failure response - Reverse request and create Dish if applicable
            --GCNA-1765 : get Scheduled request payment mode id: 2 - Credit Card, 3 - EFT
            v_pmt_cash_prfl_id  := pkg_os_object_io.fn_object_bv_path_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_auto_transfer_bts_id,
                                           gbv_BATrx_RefAsscProfile
                                      );


            v_payment_mode_id  := pkg_os_object_io.fn_object_bv_path_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_pmt_cash_prfl_id,
                                           gbv_cashTrfProf_PymtMode
                                      );
            --Get info on failed Schedule Withdrawal Trx
            select
                  decode(v_payment_mode_id, 3, DISHONOUR_CODE, 2, CC_RESPONSE_NUMBER, DISHONOUR_CODE), ERROR_FLAG_YN, ERROR_MESSAGE, location
                   into v_dishonor_code, v_req_err_flag, v_req_err_message, v_req_prod_branch
            from
                  db_fb_transaction_staging
            where
                  request_transaction_id = in_auto_transfer_bts_id
            and
                  rownum <= 1;

            sp_auto_withdraw_postprocess
             (
               in_session_id,
               in_transaction_id,
               in_auto_transfer_bts_id,
               in_current_date,
               v_dishonor_code,
               v_batch_status,
               v_batch_id,
               io_action_outcome_id
             );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '...Evaluation of Rejection withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID: '||in_auto_transfer_bts_id||
                        ' Dishonor code: '||v_dishonor_code||
                        ' Error message: '||v_req_err_message||' Production branch: '||v_req_prod_branch||
                        ' Payment mode ID: ' || v_payment_mode_id
                  );
            end if;
            update db_fb_transaction_staging
              set
              oneshield_status = 'Rejected',
              cc_approval_date = sysdate,
              LAST_UPDATED_DATE = sysdate
              where
              request_transaction_id = in_auto_transfer_bts_id
              and upper(datastage_status)='REJECTED';


     --GCNA-947
     elsif (upper(v_resp_status) = 'ACCEPTED')
     then
            --Success response for CC - need to get autorization code and update it
            select
                   cc_approval_code
                   into v_cc_approval_code
            from
                   db_fb_transaction_staging
            where
                   request_transaction_id = in_auto_transfer_bts_id
            and
                   cc_approval_code is not null
            and
                   rownum <= 1;

            pkg_os_object_io.sp_object_bv_set
              (
                   in_session_id,
                   in_transaction_id,
                   in_auto_transfer_bts_id,
                   gbv_BTS_CCWithdrawal_AuthCode,
                   v_cc_approval_code
              );

            pkg_os_object_io.sp_object_bv_set
              (
                   in_session_id,
                   in_transaction_id,
                   in_auto_transfer_bts_id,
                   gbv_BTS_CCWithdrawal_ApprDate,
                   to_char(in_current_date,pkg_os_constant.dragondateformatdefault)
              );

            for r_try in c_try
            loop
                      --set Authorized status for Try object
                      pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Successful);
                      --update Try datamart
                      pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );
            end loop;

            update
                    db_fb_transaction_staging
            set
                   oneshield_status = 'Accepted',
                   cc_approval_date = in_current_date,
                   LAST_UPDATED_DATE = sysdate
            where
                   request_transaction_id = in_auto_transfer_bts_id;


          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;
--Mark the batch as 'discard' if it is in 'error' state.
    /* sp_fb_batch_update_disc
     (
          in_session_id,
          in_transaction_id,
          v_batch_id,
          io_action_outcome_id
     );*/
exception

     when others
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end sp_auto_withdraw_resp_tab;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_withdraw_resp_web
--
--   %USAGE
--   For a given auto-withdrawal object,Process the Auto_Transfer Try object based on response received
--   This SP is specific ,if call is web service based.
--
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_auto_transfer_bts_id             The auto-transfer billing transaction set which is to be tried.
--   %PARAM    in_current_date                     The current date
--   %PARAM    in_response_code                    Response code received from Web Service
--   %PARAM    in_response_msg                     Response or Error message received from WEb Service
--   %PARAM    in_current_try_id                   Current Try Object
--   %PARAM    io_action_outcome_id               Action Outcome Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_withdraw_resp_web
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     in_current_date                    in             date,
     in_response_code                   in             object_bv_value.business_variable_value%type,
     in_response_msg                    in             object_bv_value.business_variable_value%type,
     in_current_try_id                  in             object.object_id%type,
    -- Arun - MUSTDEV-19074 - Added new parameter
     --in_approval_status                 in             object_bv_value.business_variable_value%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name                  constant        system_log.program_name%type := pkg_name||'sp_auto_withdraw_resp_web';
      v_session_control                 pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time               date;
      v_update                          char := 'T';
      v_batch_status                    object_bv_value.business_variable_value%type := NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, 32981164 ),'R');

begin

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name, '|| Evaluating Schedule Withdrawal Response for Web Service call started||'||
                   ' Currenty try object ==>' || in_current_try_id ||
                    ' in response code ==>' ||   in_response_code  ||
                    ' Auto Transfer Bats ==> ' || in_auto_transfer_bts_id||
                    'v_batch_status ==>'||v_batch_status
            );

      end if;


     -- Arun - MUSTDEV-19074 - Added approval_status condition
     if ( NVL(v_batch_status,'R')  = 'A') /*Or nvl(in_approval_status,0) = '1'*/
      then

        pkg_os_object_io.sp_object_bv_set
                  (
                        in_session_id,
                        in_transaction_id,
                        in_auto_transfer_bts_id,
                        gbv_BTS_CCWithdrawal_AuthCode,
                        in_response_code
                  );

            pkg_os_object_io.sp_object_bv_set
                  (
                        in_session_id,
                        in_transaction_id,
                        in_auto_transfer_bts_id,
                        gbv_BTS_CCWithdrawal_ApprDate,
                        to_char(in_current_date,pkg_os_constant.dragondateformatdefault)
                  );


                  if v_session_control.gLogging_Full
                  then

                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... Evaluation of Successful withdrawal response completed .... ' ||
                              'Schedule Withdrawal Trx ID ==>'||in_auto_transfer_bts_id||
                              'Current Try is  ==>' || in_current_try_id
                        );
                  end if;

            --set Authorized status for Try object
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_current_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Successful);
            --update Try datamart
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_current_try_id, v_update );

            io_action_outcome_id := pkg_os_constant.gOutcome_OK;

        else

            sp_auto_withdraw_postprocess
                   (
                     in_session_id,
                     in_transaction_id,
                     in_auto_transfer_bts_id,
                     in_current_date,
                     in_response_code,
                     v_batch_status,
                     in_current_try_id,
                     io_action_outcome_id
                   );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Evaluation of Rejection withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID ==>'||in_auto_transfer_bts_id||
                        ' Outcome is ==>' || io_action_outcome_id
                  );
            end if;
     end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name, '|| Evaluation of Schedule Withdrawal Response for Web Service call completed||'||
                   ' Currenty try object==> ' || in_current_try_id ||
                    ' Auto Transfer Bats ==> ' || in_auto_transfer_bts_id ||
                    ' Outcome id==> ' || io_action_outcome_id
            );

      end if;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while evaluating withdrawal response. '
               ||'  Error Msg: '
               ||sqlerrm
          );

end sp_auto_withdraw_resp_web;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disb_resp_tab
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_auto_disb_bts_id                Bats ID
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_disb_resp_tab
(
      in_session_id                       in             object.object_id%type,
      in_transaction_id                   in             object.object_id%type,
      in_auto_disb_bts_id                 in             object.object_id%type,
      io_action_outcome_id                in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disb_resp_tab';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

      gObjType_Auto_Transfer_Try          object_type.object_type_id%type := 3194146;
      v_policy_map_id                     object.object_id%type;
      v_reversal_trx_id                   object.object_id%type;
      v_policy_trx_id                     object.object_id%type;
      v_policy_id                         object.object_id%type;
      v_current_date_time                 date;

      v_req_err_flag                      char;
      v_req_err_message                   object_bv_value.business_variable_value%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_resp_status                       object_bv_value.business_variable_value%type;
      v_batch_status                      object_bv_value.business_variable_value%type;
      v_payment_mode_id                   object_bv_value.business_variable_value%type;
      v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      v_cc_approval_code                  object_bv_value.business_variable_value%type;
      v_cheque_number                     object_bv_value.business_variable_value%type;
      v_billing_account_id                object.object_id%type;
      in_object_cache                     pkg_os_object_cache.t_object_cache;
      v_assoc_fitem                       object.object_id%type;
      v_payment_mode1_try_id              object_bv_value.business_variable_value%type;
      v_related_fitransaction_id          object.object_id%type;

      v_batch_id                          object.object_id%type;
      v_batch_max_auto_id                 object.object_id%type;
      v_new_try_status_id                 business_variable.business_variable_id%type;
      v_dishonor_code                     object_bv_value.business_variable_value%type;
      v_dishonor_code_inner               object_bv_value.business_variable_value%type;
      v_cash_xfer_objusage_id             object.object_id%type;
      v_cash_xfer_profile_mode            lookup_list_value.lookup_enum%type;
      v_cash_xfer_profile_id              object.object_id%type;

      cursor c_try
          is
              select
                     *
                from
                     dragon_fund_trans_req_try
                where
                     BILLINGACCOUNTTRXSET_ID = in_auto_disb_bts_id;  --OSPRODUCT-502:renamed column

      cursor c_fitransaction
            is
              select
                  *
              from
                  dragon_fitransaction
              where
                  batch_ref_no = in_auto_disb_bts_id
              order by
                  fitransaction_id;

      cursor c_frequest
      is
         select
            *
            from
                  db_fb_transaction_staging
            where
                  batch_ID = v_batch_id
            and
                  upper(datastage_status) = 'ACCEPTED';

begin
      v_billing_account_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_auto_disb_bts_id);

  --GCNA-947 get datastage status of this request

      select distinct
                        stg.datastage_status, ct.batch_status, ct.batch_id, try.payment_mode_id
                        into
                        v_resp_status, v_batch_status, v_batch_id, v_payment_mode1_try_id
      from
            db_fb_transaction_staging stg,
            db_fb_batch_control ct,
            dragon_fund_trans_req_try try
      where
            ct.batch_id = stg.batch_id
      AND
            stg.request_transaction_id  = try.BILLINGACCOUNTTRXSET_ID  --OSPRODUCT-502:renamed column
      and
            request_transaction_id = in_auto_disb_bts_id
      and
      rownum <= 1;


      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '... Schedule Disbursement Trx datastage status '||v_resp_status

            );

      end if;



       if ( upper(v_resp_status) = 'REJECTED' Or v_batch_status = 'E' )
       then


           --GCNA-1740: Get Disbursement Mode

           v_cash_xfer_objusage_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, gbv_BTS_DisbursementProfile );
           v_cash_xfer_profile_id    :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_objusage_id, gbv_DisProfUsageRefProfile );--get CashTransferProfile from BillingAccountTransactionSet
           v_cash_xfer_profile_mode  := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_cash_xfer_profile_id, 30010546 );

             --Failure response - Reverse disbursement
             --Get info on failed Schedule Withdrawal Trx
             --GCNA-1740: Modified the select clause to retrieve the Dishonour Code
           begin
           select
                decode(v_cash_xfer_profile_mode, 3, DISHONOUR_CODE, 2, CC_RESPONSE_NUMBER, DISHONOUR_CODE), ERROR_FLAG_YN, ERROR_MESSAGE
           into
                v_dishonor_code, v_req_err_flag, v_req_err_message
           from
                db_fb_transaction_staging
           where
                request_transaction_id = in_auto_disb_bts_id
           and
                rownum <= 1;
           --GCNA-2549
           EXCEPTION
                WHEN no_data_found
                THEN null;
           end;

                  sp_auto_disb_postprocess
                         (
                           in_session_id,
                           in_transaction_id,
                           in_auto_disb_bts_id,
                           v_dishonor_code,
                           v_batch_status,
                           v_batch_id,
                           io_action_outcome_id
                         );

        update db_fb_transaction_staging
              set
              oneshield_status = 'Rejected',
              cc_approval_date = sysdate,
              LAST_UPDATED_DATE = sysdate
              where
              request_transaction_id = in_auto_disb_bts_id
              and upper(datastage_status)='REJECTED';

       --GCNA-947
       elsif (upper(v_resp_status) = 'ACCEPTED')
       then
        --Success response for CC - need to get autorization code and update it
       if v_payment_mode1_try_id = 2 then

          select
              cc_approval_code
            into
              v_cc_approval_code
            from
              db_fb_transaction_staging
            where
              request_transaction_id = in_auto_disb_bts_id
            and
              cc_approval_code is not null
            and
              rownum <= 1;

          --set approval code on Request object
                pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          in_auto_disb_bts_id,--r_try.schd_fund_req_try_id,
                          32873040, --BV authorization(approval) code
                          v_cc_approval_code
                     );

          --set approval date on Request object
                pkg_os_object_io.sp_object_bv_set
                     (
                          in_session_id,
                          in_transaction_id,
                          in_auto_disb_bts_id,--r_try.schd_fund_req_try_id,
                          32873140, --BV approval date
                          to_char(sysdate,pkg_os_constant.dragondateformatdefault)
                     );

          for r_try in c_try
          loop
            --set Authorized status for Try object
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, 53846);

            --update Try datamart
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );
          end loop;

          update db_fb_transaction_staging
              set
              oneshield_status = 'Accepted',
              cc_approval_date = sysdate,
              LAST_UPDATED_DATE = sysdate
              where
              request_transaction_id = in_auto_disb_bts_id
              and upper(datastage_status)='ACCEPTED';

        elsif v_payment_mode1_try_id = 1 then

          select
              cheque_number
            into
              v_cheque_number
            from
              db_fb_transaction_staging
            where
              request_transaction_id = in_auto_disb_bts_id
            and
              cheque_number is not null
            and
              rownum <= 1;

          pkg_os_object_io.sp_object_bv_set(
            in_session_id,
            in_transaction_id,
            in_auto_disb_bts_id,
            32379946,
            v_cheque_number);

      /*    for r_request in c_frequest
            loop
              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, r_request.REQUEST_ID, pkg_os_constant_bv.gbv_GenObjObjectState, gState_Try_Successful);

              v_related_fitransaction_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, r_request.request_id, 32857540);  --Auto_Transfer_Try - xReference - _Reference_Associated FITransaction

              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_related_fitransaction_id, 29754746, to_char(r_request.cheque_number));

              -- Update the Try Datamart
              pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, r_request.REQUEST_ID, v_update );
            end loop;
      */
          update db_fb_transaction_staging
              set
              oneshield_status = 'Accepted',
              LAST_UPDATED_DATE = sysdate
              where
              batch_ID = v_batch_id
              and upper(datastage_status) = 'ACCEPTED';

          for r_try in c_try
          loop
            --set Authorized status for Try object
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, 53846);

            --update Try datamart
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_try.schd_fund_req_try_id, v_update );
          end loop;

        end if;



        io_action_outcome_id := pkg_os_constant.gOutcome_OK;
      end if;

 exception

     when others
     then



          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while calling Funds Response process. '
               ||'  Error Msg: '
               ||sqlerrm
          );

           io_action_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;

end sp_auto_disb_resp_tab;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disb_resp_web
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_auto_disb_bts_id                Bats ID
--   %PARAM    in_response_code                   Bats ID
--   %PARAM    in_response_msg                    Response Msg
--   %PARAM    in_current_try_id                   Auto Try Id
--   %PARAM    io_action_outcome_id                Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_disb_resp_web
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_disb_bts_id                in             object.object_id%type,
     in_response_code                   in             object_bv_value.business_variable_value%type,
     in_response_msg                    in             object_bv_value.business_variable_value%type,
     in_current_try_id                  in             object.object_id%type,
     -- Arun - MUSTDEV-19074 - Added new parameter
     --in_approval_status                 in             object_bv_value.business_variable_value%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disb_resp_web';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time                 date;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_batch_status                    object_bv_value.business_variable_value%type := NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, 32981164 ),'R');
       v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      in_object_cache                     pkg_os_object_cache.t_object_cache;
      v_batch_max_auto_id                 object.object_id%type;
      v_new_try_status_id                 business_variable.business_variable_id%type;
      v_dishonor_code                     object_bv_value.business_variable_value%type;
       v_Approved                        varchar2(100):='A';
      v_Rejected                        varchar2(100):='R';


begin

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Evaluating Schedule Disbursement Response of web service call ||' ||
                  'in auto disb bats id ==>' || in_auto_disb_bts_id ||
                  ' in current auto try ==>' ||in_current_try_id ||
                  ' Trx Response Code ==> '||in_response_code ||
                  ' Trx Response Msg ==>'|| in_response_msg||
                    'v_batch_status ==>'||v_batch_status

            );
      end if;

     -- Arun - MUSTDEV-19074 - Added approval_status condition
     if ( NVL(v_batch_status,'R')  = 'A') /*or nvl(in_approval_status,'0') = '1'*/

      then

             /*pkg_os_object_io.sp_object_bv_set
                  (
                        in_session_id,
                        in_transaction_id,
                        in_auto_disb_bts_id,
                        gbv_BTS_Batch_Status,
                        v_Approved
                  );*/


            pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_auto_disb_bts_id,
                    gbv_BTS_CCWithdrawal_AuthCode,
                    in_response_code
               );

            pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_auto_disb_bts_id,
                    gbv_BTS_CCWithdrawal_ApprDate,
                    to_char(sysdate,pkg_os_constant.dragondateformatdefault)
               );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Evaluation of Successful withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID: '||in_auto_disb_bts_id||
                        ' Current Try id: ' ||in_current_try_id ||
                        ' Approval code: '||in_response_code||
                        ' Batch Status : '||v_batch_status
                  );
            end if;

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_current_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Successful);

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_current_try_id, v_update );

            io_action_outcome_id := pkg_os_constant.gOutcome_OK;

          else


                /*pkg_os_object_io.sp_object_bv_set
                  (
                        in_session_id,
                        in_transaction_id,
                        in_auto_disb_bts_id,
                        gbv_BTS_Batch_Status,
                        v_Rejected
                  );*/


              sp_auto_disb_postprocess
                   (
                     in_session_id,
                     in_transaction_id,
                     in_auto_disb_bts_id,
                     in_response_code,
                     v_batch_status,
                     in_current_try_id,
                     io_action_outcome_id
                   );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Evaluation of Rejection withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID: '||in_auto_disb_bts_id||
                        ' Dishonor code: '||in_response_code||
                        ' Batch Status : '||v_batch_status ||
                        ' Outcome : '||io_action_outcome_id
                  );
            end if;
      end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Evaluation of  Schedule Disbursement Response of web service call completed ||' ||
                  'in auto disb bats id ==>' || in_auto_disb_bts_id ||
                  ' in current auto try ==>' ||in_current_try_id ||
                  ' Trx Response Msg ==>'|| in_response_msg ||
                   ' Outcome is  ==> '||io_action_outcome_id

            );
      end if;
exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while evaluating disbursement Response  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_auto_disb_resp_web;
---------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-953
---------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_auto_disb_resp_file
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_auto_disb_bts_id                Bats ID
--   %PARAM    in_response_code                   Bats ID
--   %PARAM    in_response_msg                    Response Msg
--   %PARAM    in_current_try_id                   Auto Try Id
--   %PARAM    io_action_outcome_id                Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_auto_disb_resp_file
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_disb_bts_id                in             object.object_id%type,
     in_response_code                   in             object_bv_value.business_variable_value%type,
     in_response_msg                    in             object_bv_value.business_variable_value%type,
     in_current_try_id                  in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_auto_disb_resp_file';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time                 date;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_batch_status                    object_bv_value.business_variable_value%type := NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, 32981164 ),'R');
       v_optimistic_flag_tf                char := pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_auto_disb_bts_id, gPd_Prop_SchFundOptimisticTF);-- 'T';
      in_object_cache                     pkg_os_object_cache.t_object_cache;
      v_batch_max_auto_id                 object.object_id%type;
      v_new_try_status_id                 business_variable.business_variable_id%type;
      v_dishonor_code                     object_bv_value.business_variable_value%type;
      v_check_number                      object_bv_value.business_variable_value%type;--OSPRODUCT-1088
      v_check_ref_details                 object_bv_value.business_variable_value%type;--OSPRODUCT-1088

begin

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Evaluating Schedule Disbursement Response of web service call ||' ||
                  'in auto disb bats id ==>' || in_auto_disb_bts_id ||
                  ' in current auto try ==>' ||in_current_try_id ||
                  ' Trx Response Code ==> '||in_response_code ||
                  ' Trx Response Msg ==>'|| in_response_msg||
                    'v_batch_status ==>'||v_batch_status

            );
      end if;

     if ( NVL(v_batch_status,'R')  = 'A')

      then

            --OSPRODUCT-1088
            begin
               select
                   dr.payment_ref_number, dr.description
               into
                     v_check_number, v_check_ref_details
               from
                     db_funds_receipt dr
               where
                     AUTO_TRANSFER_TRY_ID = in_current_try_id;
            exception when others
            then
                 v_check_number := null;
            end;

            pkg_os_object_io.sp_object_bv_set
            (
                   in_session_id,
                   in_transaction_id,
                   in_auto_disb_bts_id,
                   gbv_BTS_CheckNumber,
                   v_check_number
            );

            pkg_os_object_io.sp_object_bv_set
            (
                   in_session_id,
                   in_transaction_id,
                   in_auto_disb_bts_id,
                   gbv_BTS_CheckRefDetails,
                   v_check_ref_details
            );
            --OSPRODUCT-1088

            pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_auto_disb_bts_id,
                    gbv_BTS_CCWithdrawal_AuthCode,
                    in_response_code
               );

            pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_auto_disb_bts_id,
                    gbv_BTS_CCWithdrawal_ApprDate,
                    to_char(sysdate,pkg_os_constant.dragondateformatdefault)
               );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Evaluation of Successful withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID: '||in_auto_disb_bts_id||
                        ' Current Try id: ' ||in_current_try_id ||
                        ' Approval code: '||in_response_code||
                        ' Batch Status : '||v_batch_status
                  );
            end if;

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_current_try_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Successful);

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_current_try_id, v_update );

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_auto_disb_bts_id, v_update );

            sp_update_fund_receipt_res(in_session_id, in_transaction_id, in_auto_disb_bts_id, io_action_outcome_id );

            io_action_outcome_id := pkg_os_constant.gOutcome_OK;

      else

              sp_auto_disb_postprocess
                   (
                     in_session_id,
                     in_transaction_id,
                     in_auto_disb_bts_id,
                     in_response_code,
                     v_batch_status,
                     in_current_try_id,
                     io_action_outcome_id
                   );

               sp_update_fund_receipt_res(in_session_id, in_transaction_id, in_auto_disb_bts_id, io_action_outcome_id );

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '... Evaluation of Rejection withdrawal response completed .... ' ||
                        'Schedule Withdrawal Trx ID: '||in_auto_disb_bts_id||
                        ' Dishonor code: '||in_response_code||
                        ' Batch Status : '||v_batch_status ||
                        ' Outcome : '||io_action_outcome_id
                  );
            end if;
      end if;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Evaluation of  Schedule Disbursement Response of web service call completed ||' ||
                  'in auto disb bats id ==>' || in_auto_disb_bts_id ||
                  ' in current auto try ==>' ||in_current_try_id ||
                  ' Trx Response Msg ==>'|| in_response_msg ||
                   ' Outcome is  ==> '||io_action_outcome_id

            );
      end if;
exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while evaluating disbursement Response  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_auto_disb_resp_file;
--OSPRODUCT-953
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_eft_dish_validate
--
--   %USAGE
--        This procedure is used to validate the incoming excel data.
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_action_object_id                Action Object ID
--   %PARAM    io_action_outcome_id               Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_eft_dish_validate
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_eft_dish_validate';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time                 date;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_batch_status                      object_bv_value.business_variable_value%type;
      v_current_try_id                    dragon_fund_trans_req_try.schd_fund_req_try_id%type;
      v_validation_status                 varchar2(20);
      v_count                             number ;
      v_auto_transfer_bts_id              object.object_id%type;
      v_source_amount                     number;
      v_batsStatus                        number;
      v_adviceCodeDesc                    varchar2(50);
      v_try_count                         number;

begin
      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '||  EFT Dishonor validation started... ||' ||
                  'In Action Objct ID  ==>' || in_action_object_id
            );
      end if;
      -- check for auto_transfer_try,amout, advise code
      begin

            select
                   dfr.auto_transfer_try_id,dfr.source_amount,dfr.description
                    into v_current_try_id ,v_source_amount,v_adviceCodeDesc
            from
                 db_funds_receipt dfr
            where
                  dragon_object_id = in_action_object_id
            ;

      exception
            when others then

                  v_current_try_id :=0;

                  pkg_os_logging.sp_log_error
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '.. AutoTransfer Try not Found in db_funds_receipt table ..' ||
                        'In Action Objct ID  ==>' || in_action_object_id
                  );
       end;
       -- check the Try object exist in Onehsield System or not
       begin
            select count(1)
                   into v_try_count
            from
                  dragon_fund_trans_req_try
            where
                  payment_mode_id = 3 --eft
      /*  and
                  try_type_id = gTry_TrxType_Withdrwal */ --withdrawal
            and
                  schd_fund_req_try_id = v_current_try_id;

      exception
            when others then

                  v_try_count :=0;

                  pkg_os_logging.sp_log_error
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '.. AutoTransfer Try count is  ..' ||v_try_count ||
                        'AutoTransfer Try   ==>' || v_current_try_id ||
                        'try_type_id ==> '|| gTry_TrxType_Withdrwal
                  );
       end;


      if v_try_count = 0 then

         update db_funds_receipt
         set transaction_state_id = gState_Try_Failed
         where
                  dragon_object_id = in_action_object_id;

         io_action_outcome_id := gOutcome_AutoTryNotFound;
         return;

      end if;

      v_auto_transfer_bts_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_current_try_id);

      v_batsStatus := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_auto_transfer_bts_id,pkg_os_constant_bv.gbv_GenObjObjectState);

      if v_batsStatus in (  gState_BatsRolledback,gState_BatsDisbFailed)
       then

            update db_funds_receipt
            set
                  transaction_state_id = gState_BatsRolledback
            where
                  dragon_object_id = in_action_object_id;

             io_action_outcome_id := gOutcome_TryAlreadyReversed;
             return;
       end if;

      pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_auto_transfer_bts_id,gbv_BTS_OverrideAmount,v_source_amount);

      pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_auto_transfer_bts_id,gbv_BTS_ReverseReasonCode,v_adviceCodeDesc);

      pkg_os_logging.sp_log
      (
            in_session_id,
            in_transaction_id,
            v_procedure_name, '|| Preprocessing of EFT Dishonor completed with following values ||' ||
            'In Action Objct ID  ==>' || in_action_object_id ||
            'Current Try ID ' || v_current_try_id ||
            'BATS ID ' || v_auto_transfer_bts_id ||
            ' Source AMount '|| v_source_amount ||
            'Reverse Reason Code ' || v_adviceCodeDesc
      );

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while evaluating preprocessing of  EFT Dishonor  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_eft_dish_validate;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_eft_dish_install_reset
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                     Transaction Id
--   %PARAM    in_auto_transfer_bts_id               Bats ID
--   %PARAM    io_action_outcome_id                  Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_eft_dish_install_reset
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_eft_dish_install_reset';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time                 date;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;

      --   Datamart update ...
     v_update                            char := 'T';
     v_batch_status                      object_bv_value.business_variable_value%type;
       v_current_try_id                    dragon_fund_trans_req_try.schd_fund_req_try_id%type;
       v_validation_status                 varchar2(20);
       v_preferred_withdrawal_day          integer :=27;
       v_next_withdrawal_retry_date        object_bv_value.business_variable_value%type;
      v_payment_mode_id                   number;
      v_pmt_cash_prfl_id                  object.object_id%type;
      v_retry_count                       number;

    cursor c_installment
      is
        select
          *
        from
          dragon_scheduled_installment
        where
          withdrawal_request = in_auto_transfer_bts_id ;

begin

      -- get the currrent try object
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATS_CurrentAutoTransfTry);

      update
            db_funds_receipt
      set
            transaction_state_id = gState_FiTrxProcessed
      where
            (auto_transfer_try_id is not null and  auto_transfer_try_id = v_current_try_id );
      --and
      --  session_id = in_session_id;


       for r_installment in c_installment
      loop

             v_next_withdrawal_retry_date :=  to_char(fn_get_retry_withdrawal_date
                                                     (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             r_installment.installment_id,
                                                             in_auto_transfer_bts_id
            
            
            
            
            
                                                      ),'yyyymmddhh24miss');

                        if v_next_withdrawal_retry_date is not null
                             then
                             v_retry_count             :=  NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, r_installment.installment_id,34249746 ),0);


                             pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id,34249746, v_retry_count+1);

                                --Clear withdrawal request field
                                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_TermSchPayment_WithBTS, null);
                                -- set try date
                                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_TermSchPayment_RetryDate,v_next_withdrawal_retry_date);

                                --Update installment datamart
                                pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_installment.installment_id, v_update );

                       end if;
      end loop;

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Evaluating EFT Dishonor Installment Reset ||' ||
                  'Bats Id ==>' || in_auto_transfer_bts_id ||
                  ' Current Try Id is ==>'||v_current_try_id
            );
      end if;

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while post processing of EFT Dishonor  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_eft_dish_install_reset;
--OSPRODUCT-953
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_update_fund_receipt_res
--
--   %USAGE
--        This function is used to update the try status based on Respons e received
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                         Session Id
--   %PARAM    in_transaction_id                     Transaction Id
--   %PARAM    in_auto_transfer_bts_id               Bats ID
--   %PARAM    io_action_outcome_id                  Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_update_fund_receipt_res
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as

      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_update_fund_receipt_res';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

      v_current_try_id                    db_funds_receipt.auto_transfer_try_id%type;

begin

      -- get the currrent try object
      v_current_try_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_auto_transfer_bts_id, gbv_BATS_CurrentAutoTransfTry);

      update
            db_funds_receipt
      set
            transaction_state_id = gState_FiTrxProcessed
      where
            (auto_transfer_try_id is not null and  auto_transfer_try_id = v_current_try_id );

      --io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while post processing of EFT Disbursement  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_update_fund_receipt_res;
--OSPRODUCT-953
-----------------------------------------------------------------
function fn_check_cash_profile
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_cash_xfer_prof_id               in             object.object_id%type,
     in_req_cash_xfer_prof_id           in             object.object_id%type,
     in_payment_mode_id                 in             number
)
return varchar2
is

     v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'fn_check_cash_profile';
     v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_return                      varchar2(10) := 'F';
     v_bank_country                number;

begin
 --
      v_bank_country := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,in_cash_xfer_prof_id,gbv_cashTrfProf_EFTBankCountry);

      if  in_payment_mode_id  = gPolicyPaymentMode_EFT and v_bank_country = gBankCountryUS  -- US

          and
            pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_cash_xfer_prof_id,gbv_cashTrfProf_EFTAccNumber )
                                                                        = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_req_cash_xfer_prof_id,gbv_cashTrfProf_EFTAccNumber ) --bank Account New
          and
            pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_cash_xfer_prof_id,gbv_cashTrfProf_EFTRoutingNo )
                                                                        = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_req_cash_xfer_prof_id,gbv_cashTrfProf_EFTRoutingNo ) --Routing ID
      then

            v_return :='T';
      elsif in_payment_mode_id  = gPolicyPaymentMode_EFT and v_bank_country <> gBankCountryUS
            and
                  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_cash_xfer_prof_id,gbv_cashTrfProf_EFTAccNumber )
                                                                        = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_req_cash_xfer_prof_id,gbv_cashTrfProf_EFTAccNumber ) --bank Account New
       and
                  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_cash_xfer_prof_id,gbv_cashTrfProf_EFTBankID )
                                                                        = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_req_cash_xfer_prof_id,gbv_cashTrfProf_EFTBankID ) --bank ID
      and
                  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_cash_xfer_prof_id,gbv_cashTrfProf_EFTTransitNo )
                                                                        = pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_req_cash_xfer_prof_id,gbv_cashTrfProf_EFTTransitNo ) --bank transit Number
       then
              v_return :='T';
      else
              v_return :='F';
      end if;


      pkg_os_logging.sp_log
      (
            in_session_id,
            in_transaction_id,
            v_procedure_name, '|| Evaluating Cash Transfer Profile  ||' ||
            ' Return Value  ==>' || v_return ||
            ' in_cash_xfer_prof_id ==>'||in_cash_xfer_prof_id ||
            ' in_req_cash_xfer_prof_id == > ' || in_req_cash_xfer_prof_id ||
            ' v_bank_country ==>' ||v_bank_country
      );

 return v_return;
end;
-------------------------------------------------------------------------------------------------------------------------------
-- Arun OSPRODUCT-532 - start
/*
procedure sp_create_tpr_nacha_string
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id          in        object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)

as

      v_procedure_name             constant varchar2 ( 100 ) := pkg_name || 'sp_create_tpr_nacha_string';
      v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

      v_object_list               pkg_os_object.t_object_list;
      v_qualified_tf              char(1);
      v_item_value                object_bv_value.business_variable_value%type;
      v_business_variable_id      business_variable.business_variable_id%type;
      v_oneshield_account         pd_property.pd_property_value%type;
      v_item_string               varchar2 ( 32000);
      v_context_block_sting       varchar2 ( 32000 );
      v_blockstring               varchar2 ( 32000 );
      v_request_string            varchar2 ( 32000 );
      v_request_dup_check_sting   varchar2 ( 4000 );

      v_block_cnt                 number;
      v_skipped_block_sequence    number;
      v_block_item_cnt            number;
      v_instance_cnt              number;
      v_row_cnt                   number := -2;
      v_object_index              number;


      in_subject_object_id          object.object_id%type :=in_action_object_id;
      in_product_id                 object.object_id%type;
      in_filing_id                  object.object_id%type;
      in_report_type_id             tpr_report.tpr_report_id%type :='1832'; -- get
      in_cp_sourcenode              pd_property.pd_property_value%type;
      in_cp_account                 pd_property.pd_property_value%type;
      out_request_dup_check_str     varchar2( 32000 );
      out_request_string             varchar2( 32000 );
      v_update char(1);
      v_billingTrxSet_id                object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

      cursor c_get_block (creportid in number)
      is
            select
            *
            from
                  tpr_request_block b
            where
                  tpr_report_type_id = creportid
            and
                  active_tf = 'T'
            and
            (
                  b.pd_filing_id is null
            or
                  b.pd_filing_id <= in_filing_id
            )
            and
            (
                  b.last_pd_filing_id is null
            or
                  b.last_pd_filing_id >= in_filing_id
            )
            and
            (
                  b.pd_product_id in (in_product_id, pkg_os_reference_lookup.gDefaultProductID)
            or
                  b.pd_product_id is null
            )
            order by
            sequence_number;

      cursor c_get_block_item (cblockid in number )
      is
            select
            *
            from
                  tpr_request_block_item b
            where
                  tpr_request_block_id = cblockid
            and
                  active_tf = 'T'
            and
            (
                  b.pd_filing_id is null
            or
                  b.pd_filing_id <= in_filing_id
            )
            and
            (
                  b.last_pd_filing_id is null
            or
                  b.last_pd_filing_id >= in_filing_id
            )
            and
            (
                  b.pd_product_id in (in_product_id, pkg_os_reference_lookup.gDefaultProductID)
            or
                  b.pd_product_id is null
            )
            order
            by
                  sequence_number;


begin

      in_report_type_id := '1832'; -- get the report type from BV

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '  Getting the Report Request String : '     ||  in_subject_object_id      ||
                  '  Product ID  :  '                          ||  in_product_id             ||
                  '  Filing ID   :  '                          ||  in_filing_id              ||
                  '  Report Type ID   :  '                     ||  in_report_type_id         ||
                  '  Choice Point Source Node   :  '           ||  in_cp_sourcenode          ||
                  '  Choice Point Account   :  '               ||  in_cp_account
            );

      end if;

      v_oneshield_account := pkg_os_system_attribute.fn_get_system_attribute_value
                                                (
                                                pkg_os_tprn_constant.gSysAttr_OS_Account
                                                );


      v_oneshield_account := rpad(v_oneshield_account, 9, ' ');

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '|||||| SubjectObjectID:' ||in_subject_object_id||
                  ' ProductID:'       ||in_product_id||
                  ' FilingID:'        ||in_filing_id||
                  ' ReportTypeID:'    ||in_report_type_id||
                  ' SourceNode:'      ||in_cp_sourcenode||
                  ' CPAccount:'       ||in_cp_account
            );

      end if;


      v_block_cnt                  := 0;
      v_request_string             := null;
      v_request_dup_check_sting    := null;
      v_instance_cnt               := 0;

      for r_get_block in c_get_block ( in_report_type_id )
      loop

            v_block_cnt       := v_block_cnt + 1;
            v_blockstring       := null;
            v_skipped_block_sequence := r_get_block.sequence_number;
            v_qualified_tf    := 'T';      --   assuming qualified first

            v_object_list.delete;

            if  pkg_os_object_search.fn_object_type_equivalent_tf
                  (
                  pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_subject_object_id ),
                  r_get_block.object_type_id
                  )   = 'T'
            then

                  v_object_list(1) := in_subject_object_id;
            else

                  pkg_os_object_search.sp_object_children_of_type_get
                        (
                          in_session_id,
                          in_transaction_id,
                          in_subject_object_id,
                          r_get_block.object_type_id,
                          v_object_list,
                          null,
                          true
                        );

            end if;

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||| Considering Block '  || r_get_block.tpr_request_block_id||
                    ' Driver Object TypeID:'  || pkg_os_object_type.fn_object_type_name_get(r_get_block.object_type_id)||
                    ' Driver Object Count:' || v_object_list.count
                  );

            end if;

            v_object_index := v_object_list.first;

            while v_object_index is not null
              loop

                  if r_get_block.qualification_rule_id is not null
                  then

                          v_qualified_tf := pkg_os_exp.fn_evaluate_expression
                          (
                            in_session_id,
                            in_transaction_id,
                            v_object_list(v_object_index),
                            r_get_block.qualification_rule_id
                          );

                          if v_session_control.gLogging_Full
                          then

                            pkg_os_logging.sp_log
                            (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Adding Block '   || r_get_block.tpr_request_block_id||
                              ' DriverObjectID:'    || v_object_list(v_object_index)||
                              ' QualificationRuleID:' || r_get_block.qualification_rule_id||
                              ' Qualified?:'      || v_qualified_tf
                            );

                          end if;

                  end if;

                  v_context_block_sting  := null;
                  v_item_string      := null;

                  if v_qualified_tf = 'T'
                  then

                    v_block_item_cnt    := 0;
                    v_row_cnt                := v_row_cnt + 1;

                  if v_session_control.gLogging_Full
                    then

                            pkg_os_logging.sp_log
                            (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Adding Block '   || r_get_block.tpr_request_block_id||
                              ' DriverObjectID:'    || v_object_list(v_object_index)||
                              ' QualificationRuleID:' || r_get_block.qualification_rule_id||
                              ' Qualified?:'      || v_qualified_tf||
                              ' v_row_cnt: '           || v_row_cnt
                            );

                  end if;

                  for r_get_blockitem in c_get_block_item ( r_get_block.tpr_request_block_id )
                  loop

                        if v_session_control.gLogging_Full
                        then

                              pkg_os_logging.sp_log
                              (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' ...... Item:'||   r_get_blockitem.tpr_block_item_id||
                                ' Sequence#:' ||  r_get_blockitem.sequence_number
                              );
                        end if;

                        v_block_item_cnt  := v_block_item_cnt + 1;
                        v_item_value    := null;

                        if r_get_blockitem.expression_id is not null
                        then

                              v_item_value := pkg_os_exp.fn_evaluate_expression
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_object_list(v_object_index),
                                                  r_get_blockitem.expression_id
                                                );

                              if v_session_control.gLogging_Full
                              then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using Expression:'  ||r_get_blockitem.expression_id||
                                        ' Value:'         ||v_item_value||':'
                                      );

                              end if;

                        elsif r_get_blockitem.business_variable_path is not null
                        then

                              v_item_value :=pkg_os_object_io.fn_object_bv_path_get
                              (
                                in_session_id,
                                in_transaction_id,
                                v_object_list(v_object_index),
                                r_get_blockitem.business_variable_path
                              );

                              if v_session_control.gLogging_Full
                              then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using BVPath:'  ||r_get_blockitem.business_variable_path||
                                        ' Value:'       ||v_item_value||':'
                                      );

                              end if;

                        elsif r_get_blockitem.literal_value is not null
                        then

                              --
                              --  VG: These should be converted to enumerations of some sort ...
                              --

                              if r_get_blockitem.literal_value = 'v_instance_cnt'
                              then

                                --
                                --  This is hardcoded to give a three digit number ...
                                --

                                v_instance_cnt    := v_instance_cnt + 1;

                                v_item_value :=  lpad( to_char(v_instance_cnt), 3, '0' );

                              elsif r_get_blockitem.literal_value = 'v_row_cnt'
                              then

                                --
                                --  This is hardcoded to give a six digit number ...
                                --

                                v_item_value :=  lpad( to_char(v_row_cnt), 6, '0' );


                              elsif r_get_blockitem.literal_value = 'CP Source Node'
                              then

                                v_item_value := in_cp_sourcenode;

                              elsif r_get_blockitem.literal_value = 'CP Account'
                              then

                                v_item_value := in_cp_account;

                              elsif r_get_blockitem.literal_value = 'OS Account'
                              then

                                v_item_value := v_oneshield_account;

                              elsif r_get_blockitem.literal_value ='rpad(v_choicepoint_account)'
                              then

                                v_item_value := rpad(in_cp_account, 50, ' ');

                              else

                                      --
                                      -- If a Transform exists, the literal value is an argument to use in the transform and NOT...
                                      --   the value itself.

                                      if r_get_blockitem.tp_bv_transform_type_id is null
                                      then

                                        v_item_value := r_get_blockitem.literal_value;

                                      end if;

                              end if;

                              if v_session_control.gLogging_Full then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using Literal:' ||r_get_blockitem.literal_value||
                                        ' Value:'       ||v_item_value||':'
                                      );

                              end if;

                        end if;            -- get item value

                        if r_get_blockitem.tp_bv_transform_type_id is not null
                        then

                              v_business_variable_id := NULL;

                              if r_get_blockitem.business_variable_path is not null
                              then

                                v_business_variable_id := pkg_os_bv.fn_bv_path_bv_get
                                                              (
                                                                in_bv_path => r_get_blockitem.business_variable_path
                                                              );

                              end if;

                              v_item_value := pkg_os_xformer_extension.fn_get_bv_transform_value
                                                            (
                                                              in_session_id       => in_session_id,
                                                              in_transaction_id     => in_transaction_id,
                                                              in_source_object_id     => v_object_list(v_object_index),
                                                              in_bv_transform_type_id   => r_get_blockitem.tp_bv_transform_type_id,
                                                              in_object_bv_transform_id => null,
                                                              in_source_bv_value      => v_item_value,
                                                              in_grouped_object_tab   => null,
                                                              in_product_id       => in_product_id,
                                                              in_filing_id        => in_filing_id,
                                                              in_target_bv_id     => null,
                                                              in_source_bv_id     => null,
                                                              in_source_bv_constant   => r_get_blockitem.literal_value
                                                            );

                              if v_session_control.gLogging_Full then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Post Transformation Value:'||v_item_value||':'
                                      );

                              end if;

                        end if;

                        v_item_string := v_item_string || v_item_value;

                        --
                        -- Added as part of SCR 21093 to generate the match string to avoid duplicate report ordering...
                        --

                        if (r_get_blockitem.tpr_request_dup_check_match_tf is not null
                        and   r_get_blockitem.tpr_request_dup_check_match_tf ='T')
                        then
                              v_request_dup_check_sting :=  v_request_dup_check_sting || v_item_value;
                        end if;

                  end loop;

                  v_context_block_sting :=  v_context_block_sting || v_item_string;
                  v_blockstring := v_blockstring || v_item_string;


                  if v_session_control.gLogging_Full
                  then

                        pkg_os_logging.sp_log
                        (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        ' ... BlockString:'||v_blockstring||':'
                        );

                  end if;

                  end if; -- end is qualified

                  v_request_string := v_request_string || v_context_block_sting;

                  v_object_index := v_object_list.next(v_object_index);

            end loop; -- for each instance of the block driver object ...

                --
                --  Appending to the Clob ...
                --
            if v_request_string is not null
            then

                  out_request_string := v_request_string;
                  --dbms_lob.writeappend(out_request_string,length(v_request_string),v_request_string);
                  v_request_string := '';

            end if;

      end loop stringblock;

      out_request_dup_check_str      := v_request_dup_check_sting;

      if out_request_string is not null
          then

            --- update nacha String
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_action_object_id, gbv_Try_NachaString, out_request_string); --nacha string
            io_action_outcome_id  :=  pkg_os_constant.gOutcome_OK;

      else
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_action_object_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Invalidated);
            -- Arun
            --io_action_outcome_id  := gOutcome_NachaCreationFailure;
            io_action_outcome_id  := gOutcome_FileStringCreateFail;

      end if;

           -- updating datamart
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_action_object_id, v_update );

      -- if NVL(v_prop_SchFundOptimisticTF,'F') = 'T' then

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '||| Total Block Records:'  || v_block_cnt||
            ' Request String:'      || out_request_string ||
            ' Dup String :'||out_request_dup_check_str ||
            ' Outcome :: ' ||io_action_outcome_id
            );

      end if;

  exception

    when others then


    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_procedure_name,
      'Error occured in sp_create_tpr_nacha_string : ' || sqlerrm
    );

    io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;


end;


*/
procedure sp_create_try_file_string















(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id          in        object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)


as

      v_procedure_name             constant varchar2 ( 100 ) := pkg_name || 'sp_create_try_file_string';
      v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;



      v_object_list               pkg_os_object.t_object_list;
      v_qualified_tf              char(1);
      v_item_value                object_bv_value.business_variable_value%type;
      v_business_variable_id      business_variable.business_variable_id%type;
      v_oneshield_account         pd_property.pd_property_value%type;
      v_item_string               varchar2 ( 32000);
      v_context_block_sting       varchar2 ( 32000 );
      v_blockstring               varchar2 ( 32000 );
      v_request_string            varchar2 ( 32000 );
      v_request_dup_check_sting   varchar2 ( 4000 );

      v_block_cnt                 number;
      v_skipped_block_sequence    number;
      v_block_item_cnt            number;
      v_instance_cnt              number;
      v_row_cnt                   number := -2;
      v_object_index              number;


      in_subject_object_id          object.object_id%type :=in_action_object_id;
      in_product_id                 object.object_id%type;
      in_filing_id                  object.object_id%type;
            in_report_type_id             tpr_report.tpr_report_id%type :='2048'; -- Arun OSPRODUCT-532
      in_cp_sourcenode              pd_property.pd_property_value%type;
      in_cp_account                 pd_property.pd_property_value%type;
      out_request_dup_check_str     varchar2( 32000 );
      out_request_string             varchar2( 32000 );
      v_update char(1);
      v_billingTrxSet_id                object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

      cursor c_get_block (creportid in number)
      is
            select
            *
            from
                  tpr_request_block b
            where
                  tpr_report_type_id = creportid
            and
                  active_tf = 'T'
            and
            (
                  b.pd_filing_id is null
            or
                  b.pd_filing_id <= in_filing_id
            )
            and
            (
                  b.last_pd_filing_id is null
            or
                  b.last_pd_filing_id >= in_filing_id
            )
            and
            (
                  b.pd_product_id in (in_product_id, pkg_os_reference_lookup.gDefaultProductID)
            or
                  b.pd_product_id is null
            )
            order by
            sequence_number;

      cursor c_get_block_item (cblockid in number )
      is
            select
            *
            from
                  tpr_request_block_item b
            where
                  tpr_request_block_id = cblockid
            and
                  active_tf = 'T'
            and
            (
                  b.pd_filing_id is null
            or
                  b.pd_filing_id <= in_filing_id
            )
            and
            (
                  b.last_pd_filing_id is null
            or
                  b.last_pd_filing_id >= in_filing_id
            )
            and
            (
                  b.pd_product_id in (in_product_id, pkg_os_reference_lookup.gDefaultProductID)
            or
                  b.pd_product_id is null
            )
            order
            by
                  sequence_number;


begin

      in_report_type_id := pkg_os_system_attribute.fn_get_system_attribute_value('FUNDS_DISB_TPR_ID'); -- get the report type from BV -- -- Arun OSPRODUCT-532

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '  Getting the Report Request String : '     ||  in_subject_object_id      ||
                  '  Product ID  :  '                          ||  in_product_id             ||
                  '  Filing ID   :  '                          ||  in_filing_id              ||
                  '  Report Type ID   :  '                     ||  in_report_type_id         ||
                  '  Choice Point Source Node   :  '           ||  in_cp_sourcenode          ||
                  '  Choice Point Account   :  '               ||  in_cp_account
            );

      end if;

      v_oneshield_account := pkg_os_system_attribute.fn_get_system_attribute_value
                                                (
                                                pkg_os_tprn_constant.gSysAttr_OS_Account
                                                );


      v_oneshield_account := rpad(v_oneshield_account, 9, ' ');




      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '|||||| SubjectObjectID:' ||in_subject_object_id||
                  ' ProductID:'       ||in_product_id||
                  ' FilingID:'        ||in_filing_id||
                  ' ReportTypeID:'    ||in_report_type_id||
                  ' SourceNode:'      ||in_cp_sourcenode||
                  ' CPAccount:'       ||in_cp_account
            );

      end if;





      v_block_cnt                  := 0;
      v_request_string             := null;
      v_request_dup_check_sting    := null;
      v_instance_cnt               := 0;

      for r_get_block in c_get_block ( in_report_type_id )
      loop

            v_block_cnt       := v_block_cnt + 1;
            v_blockstring       := null;
            v_skipped_block_sequence := r_get_block.sequence_number;
            v_qualified_tf    := 'T';      --   assuming qualified first

            v_object_list.delete;

            if  pkg_os_object_search.fn_object_type_equivalent_tf
                  (
                  pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_subject_object_id ),
                  r_get_block.object_type_id
                  )   = 'T'
            then

                  v_object_list(1) := in_subject_object_id;
            else

                  pkg_os_object_search.sp_object_children_of_type_get
                        (
                          in_session_id,
                          in_transaction_id,
                          in_subject_object_id,
                          r_get_block.object_type_id,
                          v_object_list,
                          null,
                          true
                        );









            end if;

            if v_session_control.gLogging_Full
            then

                  pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||| Considering Block '  || r_get_block.tpr_request_block_id||
                    ' Driver Object TypeID:'  || pkg_os_object_type.fn_object_type_name_get(r_get_block.object_type_id)||
                    ' Driver Object Count:' || v_object_list.count
                  );

            end if;


            v_object_index := v_object_list.first;

            while v_object_index is not null
              loop

                  if r_get_block.qualification_rule_id is not null
                  then

                          v_qualified_tf := pkg_os_exp.fn_evaluate_expression
                          (
                            in_session_id,
                            in_transaction_id,
                            v_object_list(v_object_index),
                            r_get_block.qualification_rule_id
                          );

                          if v_session_control.gLogging_Full
                          then

                            pkg_os_logging.sp_log
                            (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Adding Block '   || r_get_block.tpr_request_block_id||
                              ' DriverObjectID:'    || v_object_list(v_object_index)||
                              ' QualificationRuleID:' || r_get_block.qualification_rule_id||
                              ' Qualified?:'      || v_qualified_tf
                            );

                          end if;




                  end if;


                  v_context_block_sting  := null;
                  v_item_string      := null;

                  if v_qualified_tf = 'T'
                  then

                    v_block_item_cnt    := 0;
                    v_row_cnt                := v_row_cnt + 1;

                  if v_session_control.gLogging_Full
                    then

                            pkg_os_logging.sp_log
                            (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Adding Block '   || r_get_block.tpr_request_block_id||
                              ' DriverObjectID:'    || v_object_list(v_object_index)||
                              ' QualificationRuleID:' || r_get_block.qualification_rule_id||
                              ' Qualified?:'      || v_qualified_tf||
                              ' v_row_cnt: '           || v_row_cnt
                            );

                  end if;

                  for r_get_blockitem in c_get_block_item ( r_get_block.tpr_request_block_id )
                  loop

                        if v_session_control.gLogging_Full
                        then

                              pkg_os_logging.sp_log
                              (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' ...... Item:'||   r_get_blockitem.tpr_block_item_id||
                                ' Sequence#:' ||  r_get_blockitem.sequence_number
                              );
                        end if;

                        v_block_item_cnt  := v_block_item_cnt + 1;
                        v_item_value    := null;



                        if r_get_blockitem.expression_id is not null
                        then

                              v_item_value := pkg_os_exp.fn_evaluate_expression
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_object_list(v_object_index),
                                                  r_get_blockitem.expression_id
                                                );

                              if v_session_control.gLogging_Full
                              then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using Expression:'  ||r_get_blockitem.expression_id||
                                        ' Value:'         ||v_item_value||':'
                                      );

                              end if;

                        elsif r_get_blockitem.business_variable_path is not null
                        then

                              v_item_value :=pkg_os_object_io.fn_object_bv_path_get
                              (
                                in_session_id,
                                in_transaction_id,
                                v_object_list(v_object_index),
                                r_get_blockitem.business_variable_path
                              );

                              if v_session_control.gLogging_Full
                              then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using BVPath:'  ||r_get_blockitem.business_variable_path||
                                        ' Value:'       ||v_item_value||':'
                                      );

                              end if;

                        elsif r_get_blockitem.literal_value is not null
                        then

                              --
                              --  VG: These should be converted to enumerations of some sort ...
                              --

                              if r_get_blockitem.literal_value = 'v_instance_cnt'
                              then

                                --
                                --  This is hardcoded to give a three digit number ...
                                --

                                v_instance_cnt    := v_instance_cnt + 1;

                                v_item_value :=  lpad( to_char(v_instance_cnt), 3, '0' );

                              elsif r_get_blockitem.literal_value = 'v_row_cnt'
                              then

                                --
                                --  This is hardcoded to give a six digit number ...
                                --

                                v_item_value :=  lpad( to_char(v_row_cnt), 6, '0' );


                              elsif r_get_blockitem.literal_value = 'CP Source Node'
                              then

                                v_item_value := in_cp_sourcenode;

                              elsif r_get_blockitem.literal_value = 'CP Account'
                              then

                                v_item_value := in_cp_account;

                              elsif r_get_blockitem.literal_value = 'OS Account'
                              then

                                v_item_value := v_oneshield_account;

                              elsif r_get_blockitem.literal_value ='rpad(v_choicepoint_account)'
                              then

                                v_item_value := rpad(in_cp_account, 50, ' ');

                              else

                                      --
                                      -- If a Transform exists, the literal value is an argument to use in the transform and NOT...
                                      --   the value itself.

                                      if r_get_blockitem.tp_bv_transform_type_id is null
                                      then

                                        v_item_value := r_get_blockitem.literal_value;

                                      end if;

                              end if;

                              if v_session_control.gLogging_Full then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Using Literal:' ||r_get_blockitem.literal_value||
                                        ' Value:'       ||v_item_value||':'
                                      );

                              end if;

                        end if;            -- get item value

                        if r_get_blockitem.tp_bv_transform_type_id is not null
                        then

                              v_business_variable_id := NULL;

                              if r_get_blockitem.business_variable_path is not null
                              then

                                v_business_variable_id := pkg_os_bv.fn_bv_path_bv_get
                                                              (
                                                                in_bv_path => r_get_blockitem.business_variable_path
                                                              );

                              end if;

                              v_item_value := pkg_os_xformer_extension.fn_get_bv_transform_value
                                                            (
                                                              in_session_id       => in_session_id,
                                                              in_transaction_id     => in_transaction_id,
                                                              in_source_object_id     => v_object_list(v_object_index),
                                                              in_bv_transform_type_id   => r_get_blockitem.tp_bv_transform_type_id,
                                                              in_object_bv_transform_id => null,
                                                              in_source_bv_value      => v_item_value,
                                                              in_grouped_object_tab   => null,
                                                              in_product_id       => in_product_id,
                                                              in_filing_id        => in_filing_id,
                                                              in_target_bv_id     => null,
                                                              in_source_bv_id     => null,
                                                              in_source_bv_constant   => r_get_blockitem.literal_value
                                                            );

                              if v_session_control.gLogging_Full then

                                      pkg_os_logging.sp_log
                                      (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' ......... Post Transformation Value:'||v_item_value||':'
                                      );

                              end if;

                        end if;

                        v_item_string := v_item_string || v_item_value;

                        --
                        -- Added as part of SCR 21093 to generate the match string to avoid duplicate report ordering...
                        --

                        if (r_get_blockitem.tpr_request_dup_check_match_tf is not null
                        and   r_get_blockitem.tpr_request_dup_check_match_tf ='T')
                        then
                              v_request_dup_check_sting :=  v_request_dup_check_sting || v_item_value;

                        end if;

                  end loop;

                  v_context_block_sting :=  v_context_block_sting || v_item_string;
                  v_blockstring := v_blockstring || v_item_string;


                  if v_session_control.gLogging_Full
                  then




                        pkg_os_logging.sp_log
                        (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        ' ... BlockString:'||v_blockstring||':'
                        );

                  end if;

                  end if; -- end is qualified

                  v_request_string := v_request_string || v_context_block_sting;

                  v_object_index := v_object_list.next(v_object_index);

            end loop; -- for each instance of the block driver object ...

                --
                --  Appending to the Clob ...
                --
            if v_request_string is not null
            then

                  out_request_string := v_request_string;
                  --dbms_lob.writeappend(out_request_string,length(v_request_string),v_request_string);
                  v_request_string := '';

            end if;

      end loop stringblock;

      out_request_dup_check_str      := v_request_dup_check_sting;

      if out_request_string is not null
          then

            --- update nacha String
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_action_object_id, gbv_Try_NachaString, out_request_string); --nacha string
            io_action_outcome_id  :=  pkg_os_constant.gOutcome_OK;


      else
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_action_object_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Invalidated);
            -- Arun OSPRODUCT-532 - Start
            --io_action_outcome_id  := gOutcome_NachaCreationFailure;
            io_action_outcome_id  := gOutcome_FileStringCreateFail;
            -- Arun OSPRODUCT-532 - End
      end if;

           -- updating datamart
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_action_object_id, v_update );

      -- if NVL(v_prop_SchFundOptimisticTF,'F') = 'T' then

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '||| Total Block Records:'  || v_block_cnt||
            ' Request String:'      || out_request_string ||
            ' Dup String :'||out_request_dup_check_str ||
            ' Outcome :: ' ||io_action_outcome_id
            );

      end if;

  exception

    when others then


    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_procedure_name,
      'Error occured in sp_create_try_file_string : ' || sqlerrm
    );

    io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;


end;
-- Arun OSPRODUCT-532 - End


---------------------------------------------------------------------------------------------------------------------------------------------------
--   %NAME
--        sp_validate_billingaccounttrx
--
--   %USAGE
--        This procedure is used to validate the incoming excel data.
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_action_object_id                Action Object ID
--   %PARAM    io_action_outcome_id               Action Outcome ID
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_validate_billingaccounttrx
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as



      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_validate_billingaccounttrx';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_current_date_time                 date;
      v_cc_approval_code                  object_bv_value.business_variable_value%type;

      --   Datamart update ...
      v_update                            char := 'T';
      v_batch_status                      object_bv_value.business_variable_value%type;
      v_billing_acc_trx_set_id            object.object_id%type;
      v_validation_status                 varchar2(20);
      v_count                             number ;
      v_auto_transfer_bts_id              object.object_id%type;
      v_source_amount                     number;
      v_batsStatus                        number;
      v_adviceCodeDesc                    varchar2(50);
      v_batch_amount                      number;
      v_billingaccount_id                 object.object_id%type;
      v_lock_status                       char;

begin
      if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| Fund Receipt Validation started... ||' ||
                  'In Action Objct ID  ==>' || in_action_object_id
            );
      end if;

      -- check for auto_transfer_try,amout, advise code
      begin
            select
                   dfr.billing_acc_trx_set_id,dfr.source_amount
                    into v_billing_acc_trx_set_id ,v_source_amount
            from
                 db_funds_receipt dfr
            where
                  dragon_object_id = in_action_object_id
            ;

      if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, '|| v_billing_acc_trx_set_id ||' ||v_billing_acc_trx_set_id||
                  'v_source_amount ==>' || v_source_amount
            );
      end if;
      exception
            when others then

                  v_billing_acc_trx_set_id :=0;

                  pkg_os_logging.sp_log_error
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, '.. Billing Account Trx Set is not Found in db_funds_receipt table ..' ||
                        'In Action Objct ID  ==>' || in_action_object_id
                  );
                    update
                    db_funds_receipt
                    set
                            transaction_state_id = gState_Try_Failed
                    where
                            dragon_object_id = in_action_object_id;

                    io_action_outcome_id := gOutcome_InvalidTransaction;
                 return;
       end;


       -- check the Try object exist in Onehsield System or not
       begin
            select batch_amount
                   into v_batch_amount
            from
                  dragon_billingaccounttrxset
            where
                  billingaccounttrxset_id = v_billing_acc_trx_set_id
                  and batch_status_id = gState_BTS_Processed ;

      exception
            when others then

                  pkg_os_logging.sp_log_error
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, 'BATS   ==>' || v_billing_acc_trx_set_id
                        || 'is either invalid or not processed'

                  );

                 update db_funds_receipt
                 set transaction_state_id = gState_Try_Failed
                 where
                          dragon_object_id = in_action_object_id;

                 io_action_outcome_id := gOutcome_InvalidTransaction;
                 return;

       end;

      if abs(NVL(v_batch_amount,0)) <> abs(NVL(v_source_amount,0))
     then

                 pkg_os_logging.sp_log_error
                  (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name, 'For BATS   ==>' || v_billing_acc_trx_set_id
                        || 'amount for chargeback is: '||v_source_amount
                        || 'and batch amount is:'|| v_batch_amount

                  );

                 update db_funds_receipt
                 set transaction_state_id = gState_Try_Failed
                 where
                          dragon_object_id = in_action_object_id;

                 io_action_outcome_id := gOutcome_AmountMismatch;
                 return;


     end if;

     v_billingaccount_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_billing_acc_trx_set_id);

      begin
        pkg_os_lock.sp_set_object_lock
          (
               in_session_id          => in_session_id,
               in_transaction_id     => in_transaction_id,
               in_object_id               => v_billingaccount_id,
               out_lock_status          => v_lock_status
          );

          if v_lock_status='F'
          then
               io_action_outcome_id := 72746;
               return;
          end if;

    exception
    when others
    then
             io_action_outcome_id := 72746;
             return;
     end;

     update db_funds_receipt
     set transaction_state_id = 37646
     where
              dragon_object_id = in_action_object_id;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     return;


exception

     when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Exception while evaluating preprocessing of  Reversals  . '
               ||'  Error Msg: '
               ||sqlerrm
          );


end sp_validate_billingaccounttrx;
-- Arun OSPRODUCT-532 - Start
procedure sp_auto_try_update_status
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_try_id                          in             object.object_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name  constant        system_log.program_name%type := pkg_name||'sp_auto_try_update_status';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_auto_transfer_bts_id             object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_try_id);
      v_optimistic_flag_tf                char ;


     --
     --   Datamart update ...
     --

     v_update                           char;

begin


     v_optimistic_flag_tf := NVL(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_auto_transfer_bts_id, gPd_Prop_SchFundOptimisticTF),'F');

      if v_session_control.gLogging_Full
      then

            pkg_os_logging.sp_log
            (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            '||| Updating Auto Try status.... '  ||
            ' in_try_id:'      || in_try_id ||
            ' v_auto_transfer_bts_id :'||v_auto_transfer_bts_id ||
            ' v_optimistic_flag_tf : ' ||v_optimistic_flag_tf
            );

      end if;


     If (v_optimistic_flag_tf = 'T' ) then
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, 53846 ); -- Successful
     Else
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_try_id, pkg_os_constant_bv.gbv_GenObjObjectState, 53546 ); -- Dispatched
     End if;


    -- Update the Try and BTS Datamarts
     --

     pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, in_try_id, v_update );
     --pkg_os_datamart.sp_datamart_update_row( in_session_id, in_transaction_id, v_auto_transfer_bts_id, v_update );

    io_action_outcome_id := pkg_os_constant.gOutcome_Ok;

end sp_auto_try_update_status;
-- Arun OSPRODUCT-532 - End

--UTPRODUCT-1267 start
function fn_get_next_gl_from_date
(
         in_session_id        in        object.object_id%type,
         in_file_number       in        number
)
return date
is
       v_previous_from_date    date;
       v_current_from_date     date;
       v_last_generated_date   date;
       v_generation_date        date;
begin

     -- Check last GL Monthly Feed file that was generated.
     --UTPRODUCT-1729
     select max(GL_DATE)
     into v_last_generated_date
     from db_batch_control
     where file_number=in_file_number
     and BATCH_STATUS='SUCCESS';								

     -- If This is first time we are generating GL feed file, use dates as per current month
     if v_last_generated_date is null
     THEN

          -- We are doing sysdate-1 to handle as case that based on cron setting, either it can be generated on last day of the required month or next day morning. 
          --So, in both cases, we need gl-from date as per required month only.
          --v_generation_date :=  sysdate-1;

          --UTPRODUCT-1729
          v_generation_date   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                   (
                                     in_session_id,
                                     in_session_id,
                                     pkg_cs_post_nb.gExchange_ID1,
                                     gbv_GL_START_DATE
                                   ),pkg_os_constant.DragonDateFormatDefault);
          if v_generation_date is null then
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_session_id,
                    'fn_get_next_gl_from_date',
                    '......GL_START_DATE is not set on exchange '
                    ||sqlerrm
               );
               raise no_data_found;
          end if;                              

     else

          v_generation_date := v_last_generated_date+1;

     end if;
     
     if in_file_number =7 then  --Daily GL Feed
          
        return   v_generation_date;
     end if;      


     begin

      -- get the gl from date from gl_acct_yr_prd on the basis of v_generation_date
          select date_from  into v_current_from_date from  gl_acct_yr_prd where trunc(v_generation_date) between date_from and date_to;
     exception
          when no_data_found then
          -- if we don't have configuration for required month, Use month start date
          v_current_from_date := last_day(add_months(v_generation_date,-1))+1;
		

     end;

     return v_current_from_date;     

end fn_get_next_gl_from_date;
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_next_gl_to_date
(
         in_session_id        in        object.object_id%type,
         in_file_number       in        number
)
return date
is
       v_previous_to_date       date;
       v_current_to_date    date;
       v_generation_date       date;
       v_last_generated_date  date;
begin

     --UTPRODUCT-1729  
      -- Check last GL Monthly Feed file that was generated.
     select max(GL_DATE)
     into v_last_generated_date
     from db_batch_control
     where file_number=in_file_number
     and BATCH_STATUS='SUCCESS';


     -- If This is first time we are generating GL feed file, use dates as per current month
     if v_last_generated_date is null
     THEN

          -- We are doing sysdate-1 to handle as case that based on cron setting, either it can be generated on last day of the required month or next day morning. 
          --So, in both cases, we need gl-to date as per required month only.
          --v_generation_date :=  sysdate-1;
          --UTPRODUCT-1729
          v_generation_date   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                   (
                                     in_session_id,
                                     in_session_id,
                                     pkg_cs_post_nb.gExchange_ID1,
                                     gbv_GL_START_DATE
                                   ),pkg_os_constant.DragonDateFormatDefault);   
                                          
          if v_generation_date is null  then
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_session_id,
                    'fn_get_next_gl_to_date',
                    '......GL_START_DATE is not set on exchange '
                    ||sqlerrm
               );
               raise no_data_found;
          end if;  
          
     else

          v_generation_date := v_last_generated_date+1;

     end if;
     
     if in_file_number =7 then  --DailyGLFeed
          
        return   v_generation_date;
     end if;      

     begin

      -- get the gl to date from gl_acct_yr_prd on the basis of v_generation_date
          select date_to  into v_current_to_date from  gl_acct_yr_prd where trunc(v_generation_date) between date_from and date_to;
     exception
          when no_data_found then
          -- if we don't have configuration for required month, Use month end date
          v_current_to_date := last_day(v_generation_date);
		

     end;

     return v_current_to_date;

end fn_get_next_gl_to_date;
--UTPRODUCT-1267 end

--UTPRODUCT-2888
---------------------------------------------------------------------------------------------------------------------------------------------------
--   %NAME
--        fn_incomplete_integration_CTF
--
--   %USAGE
--        This procedure is used to validate if current selected profile is incomplete
--
--   %ALGORITHM
--        If integration is false or integration type is not javascript, profile will be considered as Complete. So, function will return 0;
--        If Profile selected is existing, then also profile will be considered as Complete. So, function will return 0;
--        When integration will be true, type will be javascript and profile selected will be New, then we will check if token is present. If present,profile will be considered as Complete. So, function will return 0; 
--        When integration will be true, type will be javascript and profile selected will be New, then we will check if token is present. If not present,profile will be considered as Incomplete. So, function will return 1; 
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_input_profile_id                Profile ID for Input selection
--   %PARAM    in_cc_profile_id                   CC profile Placeholder 
--   %PARAM    in_eft_profile_id                  EFT profile Placeholder 
--
--
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function fn_incomplete_integration_CTF
(
    in_session_id        in        object.object_id%type,
    in_transaction_id    in        object.object_id%type,
    in_input_profile_id  in        object.object_id%type,
    in_cc_profile_id     in        object.object_id%type,
    in_eft_profile_id    in        object.object_id%type
     
)
return number
is
     v_procedure_name  constant    system_log.program_name%type := pkg_name||'fn_incomplete_integration_CTF';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
          
     v_exchange_id                 object.object_id%type;
     v_integration_flag            object_bv_value.business_variable_value%type;
     v_integration_type            object_bv_value.business_variable_value%type;
     v_input_profile_mode          object_bv_value.business_variable_value%type;
     v_new_existing_cc             object_bv_value.business_variable_value%type;
     v_new_existing_eft            object_bv_value.business_variable_value%type;
     v_cc_profile_token            object_bv_value.business_variable_value%type;
     v_eft_profile_token           object_bv_value.business_variable_value%type;
           
begin
      
     v_exchange_id :=  pkg_cs_post_nb.gExchange_ID1;
     
     v_integration_flag := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_exchange_id,
                                   gUsePayProviderIntegration
                              );
     v_integration_type := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_exchange_id,
                                   gIntegrationType
                              ); 
                               
                              
     v_input_profile_mode := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_input_profile_id,
                                   gbv_cashTrfProf_PymtMode
                              );      

      v_new_existing_cc := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_input_profile_id,
                                   gbv_NewExistingCC
                              ); 
                                                            
      v_new_existing_eft := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_input_profile_id,
                                   gbv_NewExistingEFT
                              );    
                              
      v_cc_profile_token := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_cc_profile_id,
                                   gbv_cashTrfProf_CCTokenNumber
                              );                                
                              
      v_eft_profile_token := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_eft_profile_id,
                                   gbv_cashTrfProf_CCTokenNumber
                              );  
             
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| checking profile status for integration .... '  ||
               ' exchange id:'      || v_exchange_id ||
               ' use payment integration flag (1:Yes, 2:No) :'||v_integration_flag ||
               ' integraion type( 1: javascript) : ' ||v_integration_type||
               ' profile mode (1:bill me, 2cc, 3 :EFT):'||v_input_profile_mode||
               ' is new CC (1: Existing, 2: New):'||v_new_existing_cc ||
               ' is new EFT (1: Existing, 2: New):'||v_new_existing_eft ||
               ' cc profile token :'||v_cc_profile_token||
               ' eft profile token :' ||v_eft_profile_token
          );

     end if;
      if NVL(v_integration_flag, PKG_OS_CONSTANT.gBoolean_No)= PKG_OS_CONSTANT.gBoolean_Yes              
           and
           nvl(v_integration_type ,gIntegrationType_Javascript  ) = gIntegrationType_Javascript         
           and
           (
               (
                nvl(v_input_profile_mode, gPolicyPaymentMode_Check  ) =  gPolicyPaymentMode_CC
                and
                v_new_existing_cc         = gCTF_NewExisting_New
                and
                v_cc_profile_token   is   null
               )
                or
               (
                nvl(v_input_profile_mode , gPolicyPaymentMode_Check ) = gPolicyPaymentMode_EFT
                and
                v_new_existing_eft        = gCTF_NewExisting_New   
                and
                v_eft_profile_token      is  null
               )
           )    
     then
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||| Profile is incomplete'
               );

          end if;
          return 1;
     else 
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||| Profile is complete'
               );

          end if;
          return 0;
     end if;


end fn_incomplete_integration_CTF;

------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-10252 start
function fn_validate_withdrwreq_tf                                   --KP
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_BATS_id	                        in             object.object_id%type
)
return char
is
    v_procedure_name          constant system_log.program_name%type     :=pkg_name || 'fn_validate_withdrwreq_tf';
    v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    
    v_billing_acc_id        object.object_id%type;
    v_asso_profile_id       object.object_id%type;
    v_try_id                object.object_id%type;
    v_CTF_id                object.object_id%type;
    v_pol_term_id           object.object_id%type;
    v_term_prof_id           object.object_id%type;
    v_inst_balance_amt      number:=0.0;
    v_try_amount            object_bv_value.business_variable_value%type;
    v_with_date             date;
    v_return_value          Char := 'F';

    cursor c_installments is
     select
            installment_id, payer_id
     from
            dragon_scheduled_installment
     where 
            withdrawal_request = in_bats_id;
			
begin
   
    v_asso_profile_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_BATS_id,
                              gbv_BATrx_RefAsscProfile
                         );
                         
    v_billing_acc_id := pkg_os_object.fn_object_parent_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_BATS_id
                        );   
                        
    v_with_date  := to_date( pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            in_BATS_id,
                                            gbv_BTS_WithdrawalDate  --get FITrx effective date
                                        ),
                                        pkg_os_constant.DragonDateFormatDefault); 
    
    v_try_id     :=  pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_BATS_id,
                              gbv_BATS_CurrentAutoTransfTry
                         );   
                         
    v_try_amount :=  pkg_os_object_io.fn_object_bv_get
                     (
                          in_session_id,
                          in_transaction_id,
                          v_try_id,
                          gbv_Try_ReconciledAmount
                     );                     


     select
          sum(balance_amount)
     into
          v_inst_balance_amt   
     from
          dragon_scheduled_installment
     where 
          withdrawal_request = in_bats_id;


     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
             in_session_id,
             in_transaction_id,
             v_procedure_name,
             ' v_asso_profile_id :' || v_asso_profile_id
             || ' v_billing_acc_id ' || v_billing_acc_id
             || ' v_with_date ' || v_with_date
             || ' try id: ' || v_try_id
             || ' try amount: ' || v_try_amount
             || ' installment balance amount: ' || v_inst_balance_amt
          );

     end if;  
	 
     if v_inst_balance_amt = v_try_amount  
     then    
         for r_installments in c_installments
         loop
             v_pol_term_id :=  pkg_os_object.fn_object_parent_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 r_installments.installment_id
                            );

                            
              if r_installments.payer_id is not null then

                    v_term_prof_id        := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         r_installments.payer_id,
                         pkg_db_profiles.gbv_TermPayerPrefPayProf --UTPRODUCT-3271
                    );
     							  
               else 
                    v_term_prof_id        := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pol_term_id,
                         gbv_PolicyTerm_PrefPaymentProf
                    );
     							  
               end if;  
     						 
              v_CTF_id     :=  pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_term_prof_id,
                                    gbv_PaymentProfile_ProfileUsed
                               ); 
     										 
               if v_session_control.gLogging_Full
                then
     						 
                      pkg_os_logging.sp_log
                      (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' Policy term id: ' || v_pol_term_id
                            || ' term profile id: ' || v_term_prof_id
                            || ' installment payer_id: ' || r_installments.payer_id                            
                            || ' ctf id: ' || v_CTF_id
                            || ' associated profile id: ' || v_asso_profile_id
                      );

                end if;  
     										 
              if  v_CTF_id = v_asso_profile_id 
              Then 
                   v_return_value := 'T';
              else 
                   v_return_value := 'F';
                   exit;
              end if;    
         end loop; 
     end if;           

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' in_session_id ' || in_session_id
               || ' in_transaction_id ' || in_transaction_id
               || ' in_BATS_id ' || in_BATS_id
               || ' v_CTF_id ' || v_CTF_id
               || ' v_asso_profile_id ' || v_asso_profile_id
               || ' return value: ' || v_return_value
          );

     end if;   


    return v_return_value;


end fn_validate_withdrwreq_tf;
-------------------------------------------------------------------------------------------------------------------------
procedure sp_discard_withdrwreqtry
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_auto_transfer_bts_id            in             object.object_id%type,
     in_current_date                    in             date,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
) as



      v_procedure_name    constant        system_log.program_name%type := pkg_name||'sp_discard_withdrwreqtry';
      v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_next_withdrawal_retry_date        date;
      v_policy_current_date               date;
      v_update                            char := 'T';
      v_currSchReqTry_id                  object.object_id%type;  
      v_dishonor_code                     object_bv_value.business_variable_value%type;
      v_pmt_cash_prfl_id                  object.object_id%type;
      v_payment_mode_id                   number;
      v_policy_id                         object.object_id%type;
      
       cursor c_installment
          is
               select
                    *
               from
                    dragon_scheduled_installment
               where
                    withdrawal_request = in_auto_transfer_bts_id;

begin
      if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name, ' sp_discard_withdrwreqtry.. '||
                  '..........in_auto_transfer_bts_id ' || in_auto_transfer_bts_id||
                  ' in_current_date ' ||in_current_date
            );
      end if;
      
     v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id,gbv_BATS_CurrentAutoTransfTry);
              

     for r_installment in c_installment
     loop
            
              
               --Clear withdrawal request field
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_TermSchPayment_WithBTS, null);
               
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, r_installment.installment_id, gbv_SchPymtInst_LastSchWithd, null);
          
                         

             --Update installment datamart
             pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_installment.installment_id, v_update );


              end loop;
              
              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_currSchReqTry_id, pkg_os_constant_bv.gbv_genobjobjectstate, gState_Try_Invalidated);

              pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_currSchReqTry_id, v_update );

                
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_auto_transfer_bts_id,
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    61546   --discarded
               );  
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_auto_transfer_bts_id, v_update );
                     
                     
    io_action_outcome_id := pkg_os_constant.gOutcome_Ok;                 
          
end sp_discard_withdrwreqtry;

--OSPRODUCT-10252 end

------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--            fn_get_retry_withdrawal_date
--
--     %USAGE
--        This function returns the next reschedule date on an installment based on configuration made in db_receipt_reversal_codes
--     %ALGORITHM
--        Use Res_frequency to identify how many days should be added in withdrawal date/withdrawal retry date
--        Last res Date will be the date till with we will continue to reschedule
--        Additional date is an additional day on which reschedule should happen
--        If Last res date is mentioned, we should contiunue with the last frequency till last res day is approached.
--
--     %Example
--        Res_Frequency is 1,1,1,3,3,7
--        Last_Res_day return cancellation day
--        Additional_res_day returns (cancellation day-1)
--        Suppose Withdrawal day is 1/4/2019. and cancellation day is 27/4/2019.
--        Reschedule will happen on
--        1          -    2/4/2019,  frequency-1
--        2          -    3/4/2019,  frequency-1
--        3          -    4/4/2019,  frequency-1
--        4          -    7/4/2019,  frequency-3
--        5          -    10/4/2019, frequency-3
--        6          -    17/4/2019, frequency-7
--        7          -    24/4/2019, frequency-7(as last res day has not arrivied but frequency is not mentioned, so we will continue using last mentioned frequency.
--        8          -    26/4/2019, (cancellation-1 day)
--        9          -    27/4/2019  (cancellation day)
--
--     %PARAM     in_session_id              Session ID
--     %PARAM     in_transaction_id          Transaction ID
--     %PARAM     in_object_id               PolicyTermScheduleInstallmentID
--     %PARAM     in_payment_mode            Payment Mode
--     %PARAM     in_res_code                Response Code
-------------------------------------------------------------------------------------------------------------------------
function fn_get_retry_withdrawal_date   --OSPRODUCT-12663
(
     in_session_id                      in      object.object_id%type,
     in_transaction_id                  in      object.object_id%type,
     in_object_id                       in      object.object_id%type,
     in_auto_transfer_bts_id            in      object.object_id%type,
     -- MUSTDEV-18081 - Arun - Start
     --in_resp_code                       in      number default null
     in_resp_code                       in      object_bv_value.business_variable_value%type default null
     -- MUSTDEV-18081 - Arun - End

) return date

is

      v_procedure_name              constant  system_log.program_name%type   :=   pkg_name||'fn_get_retry_withdrawal_date';
      v_session_control             pkg_os_session.r_dragon_session_control  :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
      v_payment_plan_md_row         payment_plan%rowtype;
      v_next_retry_withdrawal_date  date;
      v_preferred_withdrawal_day    integer := 27;
      v_token_table                 pkg_os_token.t_string_table;
      v_recon_record_index          varchar2(100);
      v_res_frequency               varchar2(100);
      v_retry_date                  date;
      v_last_retry_date             date;
      v_additional_date             date;
      v_retry_frequency             number;
      v_last_retry_date_exp         number(12);
      v_additional_date_exp         number(12);
      v_retry_count                 number;
      v_withdrawal_date             date;
      v_withdrawal_retry_date       date;
      v_currSchReqTry_id            object.object_id%type;
      -- MUSTDEV-18081 - Arun - Start
      --v_resp_code                   number;
      v_resp_code                   varchar2(4);
      -- MUSTDEV-18081 - Arun - End
      v_pmt_cash_prfl_id            object.object_id%type;
      v_payment_mode_id             number;
      v_exp_cc_prop                 pd_property.pd_property_value%type  :=  nvl(pkg_os_product.fn_product_property_get(null,19448),0);--OSPRODUCT-12663
      v_is_cc_expired               varchar2(1) := 'F';--OSPRODUCT-12663
      v_return_value                object_bv_value.business_variable_value%type := null;--OSPRODUCT-12663
      v_expired_card_retry_tf       varchar2(1);
      v_skip                        varchar2(1) :=  'F';
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Calculating retry date for installment id :'||in_object_id
               || ' and Billing transaction : '||in_auto_transfer_bts_id
          );
     end if;

     
      
      
      v_currSchReqTry_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_auto_transfer_bts_id,pkg_db_auto_funds_transfer.gbv_BATS_CurrentAutoTransfTry);

      v_resp_code := NVL(in_resp_code,pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_currSchReqTry_id,pkg_db_auto_funds_transfer.gbv_AutoTransfTry_RespnseCode));

      v_pmt_cash_prfl_id  := pkg_os_object_io.fn_object_bv_path_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_auto_transfer_bts_id,
                                           pkg_db_auto_funds_transfer.gbv_BATrx_RefAsscProfile
                                      );


       v_payment_mode_id  := pkg_os_object_io.fn_object_bv_path_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_pmt_cash_prfl_id,
                                      pkg_db_auto_funds_transfer.gbv_cashTrfProf_PymtMode
                                 );

      -- MUSTDEV-18081 - Arun - Start
      --v_resp_code := pkg_cs_db_functions.fn_override_resp_code(in_session_id, in_transaction_id,v_resp_code,v_payment_mode_id);  --kp
      -- MUSTDEV-18081 - Arun - End
     -- Read the configuration to get required details
     Begin
          select
               res_frequency,last_res_day,ADDITIONAL_RES_DAY, nvl ( EXPIRED_CARD_RETRY_TF, 'T') EXPIRED_CARD_RETRY_TF
          into
               v_res_frequency,v_last_retry_date_exp,v_additional_date_exp, v_expired_card_retry_tf
          from
               db_receipt_reversal_codes
          where
               codepost = v_resp_code
          and
               payment_type_id = v_payment_mode_id
          and
               rownum <= 1;
     exception
          when others then

               raise;
     end;

      select
            count(1)
       into
            v_return_value
       from
            dragon_pay_profile dpp
       where
            dpp.CTF_OBJECT_ID = v_pmt_cash_prfl_id
       /*and
            dpp.preferred_prof_id = 1
       and
            dpp.recur_mode_id = 1
      and
            trunc(dpp.profile_start_date) <= sysdate*/
       and
            (
                 /*pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, dpp.pay_profile_id, 34195946) = 75
                 and*/
                 (
                        dpp.ctf_mode_id is null
                        or
                        dpp.ctf_mode_id != 2
                        or
                        (  to_number ( pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           dpp.ctf_object_id,
                                           30011146
                                      )
                                      ) > to_number(to_char(sysdate, 'yyyy'))
                          or
                          (
                               to_number ( pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                dpp.ctf_object_id,
                                                30011146
                                           )
                                           ) = to_number(to_char(sysdate, 'yyyy'))
                               and
                               to_number ( pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                dpp.ctf_object_id,
                                                30011246
                                           )
                                           ) >= to_number(to_char(sysdate, 'mm'))
                          )
                        )
                 )
            );
    
    if v_return_value >= 1 
    then
        v_is_cc_expired :=  'F';
    else
        v_is_cc_expired :=  'T';
    end if;
    
    if v_exp_cc_prop = 1 and v_is_cc_expired = 'T' and v_expired_card_retry_tf = 'F'
    then
         v_skip    :=    'T';
    end if;
    
    if v_skip  = 'F' 
    then
         -- Get retry count, withdrawal date and withdrawal retry date from installment
         v_retry_count             :=  NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_object_id,34249746 ),0);
         v_withdrawal_date         :=  to_date(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_object_id, 32178946),pkg_os_constant.DragonDateFormatDefault);
         v_withdrawal_retry_date   := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_object_id, 34074546),pkg_os_constant.DragonDateFormatDefault);
    
         -- Get last retry date and additional retry date from the expressions configured in db_receipt_reversal_codes
         v_last_retry_date         := to_date(pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, in_object_id, v_last_retry_date_exp ),pkg_os_constant.DragonDateFormatDefault);
         v_additional_date         :=  to_date(pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, in_object_id,v_additional_date_exp),pkg_os_constant.DragonDateFormatDefault);
    
         -- If last retry date column is configured but res_frequency is not configured, through splat as it's incorrect configuration
         if v_last_retry_date is not null and v_res_frequency is null
         then
              pkg_os_logging.sp_log_error
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '... For payment mode : '||v_payment_mode_id
                        || ' ...and reason code : '||v_resp_code
                        || ' last_res_day is configured in db_receipt_reversal_codes but res_frequency is blank.'
                        || ' If last_res_day is provided, res_frequency is mandatory'
                   );
              raise no_data_found;
         end if;
    
         -- if res_frequency is provided
         if v_res_frequency is not null then
    
    
              if v_last_retry_date is null or NVL(v_withdrawal_retry_date,v_withdrawal_date) < v_last_retry_date
              then
    
                   -- if last retry date is null or withdrawal_retry date on installment is less then last retry date,
                   -- tokenize reschedule frequency string
                   -- use v_retrycount+1 as index to identify required frequency.
                   -- eg, if 3 retries are already done, we'll look for 4 as index
                   v_token_table.delete;
                   pkg_os_token.sp_tokenize_string( v_res_frequency, ',', v_token_table );
    
                   --if retry count is within the limit of string index,  calculate retry date based on frequency on that index
                   if   v_token_table.count  >= (v_retry_count+1)
                   then
                        v_retry_frequency := v_token_table(v_retry_count+1);
                        v_retry_date := NVL(v_withdrawal_retry_date,v_withdrawal_date)+v_retry_frequency;
                    -- Arun MUSTDEV-24465
                    else
                          v_retry_date :=NVL(v_withdrawal_retry_date,v_withdrawal_date) +v_token_table(v_token_table.last);
                   end if;
    
                   -- if last retry date is mentioned but retry date is null then we can continue with last mentioned frequency  till last retry day is approached.
                   if v_last_retry_date is not null
                   then
                        if v_retry_date is null
                        then
                           v_retry_date :=NVL(v_withdrawal_retry_date,v_withdrawal_date) +v_token_table(v_token_table.last);
                        end if;
    
                        if v_last_retry_date < v_retry_date
                        then
                           v_retry_date := v_last_retry_date;
                        end if;
                   end if;
    
              end if;
         end if;
    
         -- if additional_date is configured, use that
         if v_additional_date is not null
         then
    
              if v_additional_date  > NVL(v_withdrawal_retry_date,v_withdrawal_date) and (v_retry_date is null or v_additional_date < v_retry_date)
              then
                 v_retry_date := v_additional_date;
              end if;
    
         end if;
     end if;
     
     v_retry_date   :=  nvl(PKG_CS_DB_FUNCTIONS.fn_get_retry_withdrawal_date(in_session_id ,in_transaction_id  ,in_object_id  ,in_auto_transfer_bts_id ),v_retry_date);--OSPRODUCT-12663
     return v_retry_date;


     exception


     when others
     then
          pkg_os_logging.sp_log_error
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,

          '...... Exception while executing fn_get_retry_withdrawal_date. '
          ||'  Error Msg: '
          ||sqlerrm
          );

end fn_get_retry_withdrawal_date;
-----------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_wrapper_cc_expiry_notice
--
--   %USAGE
--        This procedure is the precursor to sp_cc_expiry_notice_create.
--
--   %ALGORITHM
--        1. Create Billing Account Trx Set object under the associated Billing Account for CC Expiry Notice.
--        2. Call the DB billing Batch Process
--
--   %PARAM    in_session_id                      Session Id
--   %PARAM    in_transaction_id                  Transaction Id
--   %PARAM    in_CTF_id                          Cash Transfer Profile ID
----UTXPRODUCT-809
--
--------------------------------------------------------------------------------------------------------------
procedure sp_wrapper_cc_expiry_notice
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_CTF_id                in             object.object_id%type,
     io_action_outcome_id     in out nocopy  outcome.outcome_id%type,
     in_object_cache          in out         pkg_os_object_cache.t_object_cache
)
as
     v_session_control   pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name    constant system_log.program_name%type   :=   pkg_name||'sp_wrapper_cc_expiry_notice';
     v_new_bats          object_type.object_type_id%type;
begin
     if v_session_control.glogging_full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Createing new BATS ' 
          );
     end if;
     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          pkg_db_object.gObjType_BillingAccountTrxSet,
          pkg_os_object.fn_object_parent_get (in_session_id,in_transaction_id,in_CTF_id),
          v_new_bats
     );
     if v_session_control.glogging_full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Created new BATS..'||v_new_bats
          );
     end if;
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_bats,
          pkg_db_object.gbv_FITrxSet_BatchType,
          pkg_db_auto_funds_transfer.gFITrxType_CCExpiry
     );   
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_bats,
          29707646, -- Date Posted
          to_char(sysdate,pkg_os_constant.DragonDateFormatDefault)
     );
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_bats,
          29707246, --date effective
          to_char(sysdate,pkg_os_constant.DragonDateFormatDefault)
     );
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_bats,
          pkg_db_auto_funds_transfer.gbv_BATrx_RefAsscProfile,
          in_CTF_id
     );
     pkg_db_object.sp_billing_acct_trx_process
     (
          in_session_id,
          in_transaction_id,
          v_new_bats,    -- BillingAccountTransactionSet ID
          in_object_cache,
          io_action_outcome_id
     ); --UTXPRODUCT-809

end sp_wrapper_cc_expiry_notice;


end pkg_db_auto_funds_transfer;
/
