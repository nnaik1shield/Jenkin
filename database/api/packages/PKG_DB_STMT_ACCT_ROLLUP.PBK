create or replace package body PKG_DB_STMT_ACCT_ROLLUP

-------------
-- $Workfile:   BASE_API.PKG_DB_ACC_ROLLUP_STMT.PSK  $
-- $Revision:   1.0  $
--   $Author:   kreddy  $
--     $Date:   July 20 2016 16:42:04  $
-------------
as
-----------------------------------------------------------------------------------------------------------------------------------------------------
--  Package Body Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------

pkg_name constant   system_log.program_name%type  := 'PKG_DB_STMT_ACCT_ROLLUP.';

-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_load_db_trx_recon_map_cache
--
--
--   %USAGE
--        loads cache for db_trx_recon_map
--
--   %ALGORITHM
--        loads cache for db_trx_recon_map
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_load_db_trx_recon_map_cache
(
    in_session_id        object.object_id%type,
    in_transaction_id    object.object_id%type
)
is
    v_entry_method       integer;
    v_procedure_name                constant  system_log.program_name%type       :=   pkg_name||'sp_load_db_trx_recon_map_cache';
    v_session_control               pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


    cursor c_trx_recon_map
    is
         select
               *
         from
                db_trx_recon_map m ;

begin

     if g_db_trx_recon_map_cache is null
     then

          g_db_trx_recon_map_cache     :=     new db_trx_recon_map_tt();

          for trx_recon in c_trx_recon_map
          loop

               g_db_trx_recon_map_cache.extend;
               g_db_trx_recon_map_cache(g_db_trx_recon_map_cache.count)     :=  new   db_trx_recon_map_ot
                                                  (
                                                      trx_recon.db_trx_recon_map_id,
                                                      trx_recon.transaction_type_id,
                                                         trx_recon.reconcialation_id,
                                                         trx_recon.entry_type_id,
                                                         trx_recon.periodic_tf,
                                                         trx_recon.transaction_frequency,
                                                         trx_recon.day_of_week,
                                                         trx_recon.date_of_month,
                                                         trx_recon.process_tf,
                                                         trx_recon.active_tf,
                                                         trx_recon.trx_start_date_rule,
                                                         trx_recon.trx_apply_rule,
                                                         trx_recon.invoice_tf,
                                                         trx_recon.include_additional_info-- OSBILLING-7311

                                                   );

          end loop;
		  --OSPRODUCT-6046
          /*if v_session_control.gLogging_Performance
          then

               pkg_os_logging.sp_log_performance
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    dbms_utility.get_time,
                    ' ...... Loaded the g_db_trx_recon_map cache'
               );

          end if;*/

     /*else

          if v_session_control.gLogging_Performance
          then

               pkg_os_logging.sp_log_performance
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    dbms_utility.get_time,
                    ' ......Using the cached version of db_trx_recon_map'
               );

          end if;*/--OSPRODUCT-6046

     end if;
end;
-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_load_db_recon_cache
--
--
--   %USAGE
--        loads cache for db_reconciliation
--
--   %ALGORITHM
--        loads cache for db_reconciliation
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_load_db_recon_cache
(
    in_session_id        object.object_id%type,
    in_transaction_id    object.object_id%type
)
is
    cursor c_recon
    is
         select
             db.db_reconciliation_id
         from
            db_reconciliation db;

begin

    g_db_reconcialition_cache.delete;

     for c_trx_rec in c_recon
     loop

          select
              *
          into
              g_db_reconcialition_cache(c_trx_rec.db_reconciliation_id)
          from
              db_reconciliation db
          where
              db.db_reconciliation_id = c_trx_rec.db_reconciliation_id;

     end loop;
end sp_load_db_recon_cache;
-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_load_db_trx_set_type_cache
--
--
--   %USAGE
--        loads cache for db_transaction_set_type
--
--   %ALGORITHM
--        loads cache for db_transaction_set_type
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_load_db_trx_set_type_cache
(
    in_session_id        object.object_id%type,
    in_transaction_id    object.object_id%type
)
is
    cursor c_db_trx_type
    is
         select
            db.db_trxset_enum
         from
            db_transaction_set_type db;

begin

    g_db_trx_type_cache.delete;

     for c_trx_rec in c_db_trx_type
     loop

          select
              *
          into
              g_db_trx_type_cache(c_trx_rec.db_trxset_enum)
          from
              db_transaction_set_type db
          where
              db.db_trxset_enum  = c_trx_rec.db_trxset_enum;

     end loop;

end sp_load_db_trx_set_type_cache;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_rollup_transaction_create
--
--
--   %USAGE
--        Procedure to create the  defined transaction type which requires the roll up objects .
--
--
--   %ALGORITHM
--        1. Find out the DB_TRX_RECON_MAP Id which needs to be used for this transaction
--        2. Verify if the Billing Account has a profile created, if yes then use the profile settings
--        3. Find out if we need to create the transaction today based on the frequency for Periodic Transactions
--        4. If there is no BillingAccountTrxSet id which is passed to this procedure then create it
--        5. Prepare the list of Fitems which needs to rolled up
--        6. Call the rollup procedure to prepare the rollups
--        7. Based on the attribute in DB_TRANSACTION_RECON_MAP on whether to Invoice the financials, Invoice them
--        8. Provide a custom call if there is any client specific requirement to add any custom reconrollups
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_action_outcome_id          in_action_outcome_id

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_rollup_transaction_create
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_billing_account_id         in             object.object_id%type,
     in_transaction_type_id        in             db_transaction_set_type.db_trxset_enum%type,
     in_entry_type_id              in             number,
     io_action_outcome_id          in out         outcome.outcome_id%type ,
     in_billingacounttrxset_id     in             object.object_id%type default null,
     in_policy_id                  in             object.object_id%type default null,
     in_policy_trx_id              in             object.object_id%type default null,
     in_current_date               in             date default null,
     in_start_date                 in             object_bv_value.business_variable_value%type default null,
     in_end_date                   in             object_bv_value.business_variable_value%type default null,
     in_policy_wise                in             char default 'F',
     in_fitem_list                 in             pkg_os_object.t_object_list default pkg_os_object.gnull_object_list-- OSBILLING-5081
)
as

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_rollup_transaction_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_transaction_recon_map_row        db_trx_recon_map%rowtype;
     v_billingacounttrxset_id           object.object_id%type;
     v_stmt_profile_id                  object.object_id%type;
     v_create_transaction_tf            char := 'F' ;
     v_billing_start_date               object_bv_value.business_variable_value%type;
     v_billing_end_date                 object_bv_value.business_variable_value%type;
     v_current_date                     date;
     v_ba_trx_md_id                     db_transaction_set_type.db_trxset_type_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_final_item_list_count            integer := 0;
     v_policywise_count                 integer;

     v_include_child_agencies           char(1)                  := 'F';
     v_datamart_tf                      char(1) := 'T';
     v_billing_type_id                  number;
     v_cache_count                      number default 0;
     v_include_payments_config          char ; --OSBILLING-7311
     v_procedure_start_time             number                                       := dbms_utility.get_time;

     v_rollup_member_count              integer := 0;  --OSPRODUCT-3039 start

     cursor c_product_policies
     (
            in_billacc_id number
     )
     is
          select
               distinct f.policy_id
          from
               dragon_fitem f, dragon_policy p
          where
               p.policy_id = f.policy_id
          and
               f.billing_account_id = in_billacc_id
          and
               f.balance <> 0  --OSBILLING-4331
          and
               p.billing_method_id = pkg_db_stmt.gPolicy_AgencyBilled;--Modified Query for better explain plan -- OSPRODUCT-9330

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Enterting the process to create the transaction type '||in_transaction_type_id
               ||' For Billing Account '||in_billing_account_id
               || 'In BillingAccountTrSetId' || in_billingacounttrxset_id
               ||' Entry Method :'||in_entry_type_id
               || 'in_policy_id: '||in_policy_id
               || 'in_fitem_list:'|| in_fitem_list.count
          );

     end if;

     io_action_outcome_id       :=            pkg_os_constant.gOutcome_OK;

     v_transaction_recon_map_row := fn_trx_recon_map_row(in_session_id,in_transaction_id,in_transaction_type_id, in_billingacounttrxset_id);
     --OSBILLING-7311
     v_include_payments_config := NVL(v_transaction_recon_map_row.include_additional_info,'F') ;


     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| v_transaction_recon_map_row '||v_transaction_recon_map_row.db_trx_recon_map_id
               ||' v_ba_trx_md_id '||v_ba_trx_md_id
          );

     end if;
     --
     -- Verify if the Billing Account has a profile created, if yes then use the profile settings
     --

     if NVL(in_transaction_type_id ,0) = g_SetType_InvceAcctRollupStmt
     then

          v_billing_type_id := 1; -- customer billed

     end if;


     v_current_date := pkg_db_stmt_date.fn_get_current_date(in_session_id,in_transaction_id,in_current_date,in_billing_account_id);

     if in_start_date is not null and in_end_date is not null
     then

        v_billing_start_date :=in_start_date;
        v_billing_end_date :=in_end_date;
        v_create_transaction_tf     := 'T';

     else
          --
          -- Find out if we need to create the transaction today based on the frequency for Periodic Transactions
          --

          if nvl(v_transaction_recon_map_row.periodic_tf,'F') = 'T'
          then

                 If v_transaction_recon_map_row.reconcialation_id <> 8146 then
                 v_stmt_profile_id             :=   pkg_db_stmt_profile.fn_stmtprofile_get
                                                    (
                                                         in_billing_account_id,
                                                         v_transaction_recon_map_row.invoice_tf,--OSBilling-4481 Corrected the id
                                                         v_billing_type_id
                                                    ); -- @Keerthi Added new function in pkg_db_stmt_profile
                 End if;
                 
               sp_periodic_stmt_create_tf
               (
                    in_session_id,
                    in_transaction_id,
                    in_billing_account_id,
                    v_transaction_recon_map_row,
                    v_stmt_profile_id,
                    v_create_transaction_tf, -- output parameter
                    v_billing_start_date,  -- output parameter
                    v_billing_end_date  -- output parameter
               );

          else

               v_create_transaction_tf     := 'T'    ;

          end if;

     end if;

     if v_create_transaction_tf    =  'F'
     then

          io_action_outcome_id     := pkg_db_stmt.gOutcome_NoStmtGenerated;

     else

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| in_start_date '||in_start_date
               ||' v_billing_start_date '||v_billing_start_date
               ||' in_end_date '||in_start_date
               ||' v_billing_end_date '||v_billing_end_date

          );

     end if;

     --
     -- If there is no BillingAccountTrxSet id which is passed to this procedure then create it
     -- Eg: In case of Manual Cash apply, BaTrxSet is already created and  passed to this procedure
     --
     if in_billingacounttrxset_id is  null
     then
     --
     -- Create a BillingAccountTrxSet and set the BV's
     --
          pkg_db_object.sp_billingacounttrxset_create -- @@Keerthi Added new proedure in pkg_db_object
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               in_transaction_type_id,
               in_entry_type_id,
               v_billingacounttrxset_id
          );

     --OSBILLING-2999
     else
          v_billingacounttrxset_id :=   in_billingacounttrxset_id;

     end if;

     --Set the BV's of the BillingAccountTrxSet
     v_bv_table.delete;

     v_bv_table ( pkg_db_stmt.gbv_FITrxSetEntryType        ).business_variable_value := v_transaction_recon_map_row.entry_type_id;
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetDatePosted       ).business_variable_value := to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billingacounttrxset_id), pkg_os_constant.DragonDateFormatDefault );
     --v_bv_table ( pkg_db_stmt.gbv_FITrxSetExternalBatchId  ).business_variable_value := to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billingacounttrxset_id), 'YYYYMMDDHH24MISS' );
	v_bv_table ( pkg_db_stmt.gbv_FITrxSetExternalBatchId  ).business_variable_value := 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billingacounttrxset_id), pkg_os_constant.DragonDateFormatDefault );--OSBILLING-4930
     v_bv_table ( pkg_db_stmt.gbv_FITrxSet_BillingStartDate).business_variable_value := v_billing_start_date;
     v_bv_table ( pkg_db_stmt.gbv_FITrxSet_BillingEndDate  ).business_variable_value := v_billing_end_date;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_billingacounttrxset_id,
          v_bv_table
     );

     --OSBILLING-2860
     if in_policy_trx_id is not null
     then
        pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , in_policy_trx_id,pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet, v_billingacounttrxset_id) ;

     end if;

     pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , v_billingacounttrxset_id,pkg_db_object.gbv_BillAccTrxSet_RefPolTrx, in_policy_trx_id) ;

     v_include_child_agencies      :=   nvl(pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_stmt_profile_id,
                                             pkg_db_stmt.gbv_StmtIncludeChildAgency),
                                             'F'
                                         );

     -- If specific policy is passed, sp_fitem_list_create_n_process will be called once only for specified policy.
     -- If Specific policy is not passed and in_policy_wise is 'F', sp_fitem_list_create_n_process will be called once with null policy id for specified billing account
     -- If Specific policy is not passed and in_policy_wise is 'T', sp_fitem_list_create_n_process will be called for each agency billed policy under specified billing account
     if in_policy_id is not null
     then

          sp_fitem_list_create_n_process
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               v_billingacounttrxset_id,
               v_transaction_recon_map_row,
               v_stmt_profile_id,
               in_transaction_type_id,
               v_billing_start_date,
               v_billing_end_Date,
               v_current_date,
               in_policy_id,
               v_policywise_count,
               in_fitem_list -- OSBILLING-5081
          );

          v_final_item_list_count := v_policywise_count;

     else

          if in_policy_wise ='T'
          then
               for
               r_policies
               in
               c_product_policies
               (
               in_billing_account_id
               )
               loop
                    sp_fitem_list_create_n_process
                    (
                         in_session_id,
                         in_transaction_id,
                         in_billing_account_id,
                         v_billingacounttrxset_id,
                         v_transaction_recon_map_row,
                         v_stmt_profile_id,
                         in_transaction_type_id,
                         v_billing_start_date,
                         v_billing_end_Date,
                         v_current_date,
                         r_policies.policy_id,
                         v_policywise_count,
                         in_fitem_list -- OSBILLING-5081
                    );

                    v_final_item_list_count := v_final_item_list_count + v_policywise_count;

               end loop;

          else
               sp_fitem_list_create_n_process
               (
                    in_session_id,
                    in_transaction_id,
                    in_billing_account_id,
                    v_billingacounttrxset_id,
                    v_transaction_recon_map_row,
                    v_stmt_profile_id,
                    in_transaction_type_id,
                    v_billing_start_date,
                    v_billing_end_Date,
                    v_current_date,
                    in_policy_id,
                    v_policywise_count,
                    in_fitem_list -- OSBILLING-5081
               );

               v_final_item_list_count := v_policywise_count;

          end if;

          -- If Specific policy is not passed and v_include_child_agencies is 'F', nothing should happen
          -- If Specific policy is not passed and v_include_child_agencies is 'T' and in_policy_wise is 'F', sp_fitem_list_create_n_process will be called only once with null policy_id for each child billing account
          -- If Specific policy is not passed and v_include_child_agencies is 'T' and in_policy_wise is 'T', sp_fitem_list_create_n_process will be called for each agency billed policy under specified billing account

          if v_include_child_agencies = 'T'
          then

               --
               --   Loop through each billing account in the hierarchy of main Billing account
               --

               for
               r_child_billingaccount_id
               in
               (
               select
                    billingaccount_id
               from
                    dragon_billingaccount b
               where
                    parent_partner_id =
                             ( select partner_object_id from dragon_billingaccount
                               where
                               billingaccount_id = in_billing_account_id
                             )
               and
                    b.account_type_id  = pkg_db_billing.gBillingAcType_Partner

               )
               loop

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... r_child_billingaccount_id.billingaccount_id:: '
                              ||r_child_billingaccount_id.billingaccount_id
                         );
                    end if;

                    if in_policy_wise ='T'

                    then
                         for
                              r_policies
                         in
                              c_product_policies
                              (
                                 r_child_billingaccount_id.billingaccount_id
                              )
                         loop
                              sp_fitem_list_create_n_process
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   r_child_billingaccount_id.billingaccount_id,
                                   v_billingacounttrxset_id,
                                   v_transaction_recon_map_row,
                                   v_stmt_profile_id,
                                   in_transaction_type_id,
                                   v_billing_start_date,
                                   v_billing_end_Date,
                                   v_current_date,
                                   r_policies.policy_id,
                                   v_policywise_count,
                                   in_fitem_list -- OSBILLING-5081
                              );

                              v_final_item_list_count := v_final_item_list_count + v_policywise_count;
                              v_cache_count := v_cache_count + 1;

                              --PMADEV-3432
                              if v_cache_count = 100
                              then

                                --Clear caching after 100 transactions
                                pkg_os_object_io.sp_object_path_cache_clear;           --   Clear path cache ...
                                pkg_os_object_io.sp_bv_value_cache_clear(in_session_id,in_transaction_id);              --   Clear bv-value cache ...
                                pkg_os_product.sp_object_product_cache_clear;          --   Clear object-product information cache ...

                                --reset the caching counter
                                v_cache_count := 0;
                              end if;

                         end loop;

                    else
                         sp_fitem_list_create_n_process
                         (
                              in_session_id,
                              in_transaction_id,
                              r_child_billingaccount_id.billingaccount_id,
                              v_billingacounttrxset_id,
                              v_transaction_recon_map_row,
                              v_stmt_profile_id,
                              in_transaction_type_id,
                              v_billing_start_date,
                              v_billing_end_Date,
                              v_current_date,
                              in_policy_id,
                              v_policywise_count,
                              in_fitem_list -- OSBILLING-5081
                         );

                         v_final_item_list_count := v_policywise_count;

                    end if;

                    --OSBILLING-7311 include payments on each child billing account
                    if v_include_payments_config ='T'
                         then
                         pkg_db_stmt_account.sp_trx_info_obj_create
                         (
                         in_session_id,
                         in_transaction_id ,
                         r_child_billingaccount_id.billingaccount_id,
                         in_billingacounttrxset_id

                         );
                    end if;
               end loop;

          end if;
     end if;
     --OSBILLING-7311 include payments on billing account
     if v_include_payments_config ='T'
        then
          pkg_db_stmt_account.sp_trx_info_obj_create
          (
          in_session_id,
          in_transaction_id ,
          in_billing_account_id,
          in_billingacounttrxset_id,
          in_policy_id
          );
     end if;



      pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_billingacounttrxset_id,
               v_datamart_tf
          );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          '...... total fitems processed:'||v_final_item_list_count);

     end if;

     --OSPRODUCT-3039 start
     Select 
          count(1) 
	into
          v_rollup_member_count
     from 
          dragon_rollup_member rm, dragon_rollup r
     where 
          rm.rum_parent_id = r.ru_id
     and 
          r.ru_parent_id = v_billingacounttrxset_id;

     if v_final_item_list_count = 0 and v_rollup_member_count = 0
     then
     --OSPRODUCT-3039 end

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......No Financials were found to generate to create the transaction '
               );

          end if;
               
               --UTPRODUCT2-5
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingacounttrxset_id,
                    pkg_db_object.gbv_FITrxSet_BATotalBalance,
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_billing_account_id,
                         pkg_db_object.gbv_BillAcc_TotalBalance
                    )
               );
               
               pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_billingacounttrxset_id,
                         pkg_db_stmt.gbv_FITrxSet_TotalChange,
                         0
                    );
               


               pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_billingacounttrxset_id,
                         pkg_db_object.gbv_BillAccTrxSet_ProcessDate,
                         to_char(v_current_date,pkg_os_constant.DragonDateFormatDefault )
                    );
          pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingacounttrxset_id,
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    pkg_db_object.gBatchStatus_Processed
               );
               
          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_billingacounttrxset_id,
               v_datamart_tf
          );--OSPRODUCT-8786


          io_action_outcome_id := OutcomeNoDueItemsExists;

     else

          --
          -- Provide a custom call if there is any client specific requirement to add any custom reconrollups
          --

          pkg_cs_db_stmt.sp_update_batrxset
          (
               in_session_id,
               in_transaction_id,
               in_transaction_type_id,
               v_billingacounttrxset_id,
               io_action_outcome_id
          );

          --
          -- Verify whether to process the BATrxSet
          --

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'io_action_outcome_id'||io_action_outcome_id
                    ||'v_transaction_recon_map_row.process_tf'||v_transaction_recon_map_row.process_tf
               );

          end if;


          if ( io_action_outcome_id = pkg_os_constant.gOutcome_OK and  nvl(v_transaction_recon_map_row.process_tf,'T') = 'T'   )
          then

               pkg_db_object.sp_billingacounttrxset_process
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingacounttrxset_id,
                    in_transaction_type_id,
                    in_current_date
               );   --OSBILLING-3884

               io_action_outcome_id     :=  pkg_os_constant.gOutcome_OK;

          else

               io_action_outcome_id     :=  OutComeTransactionIncomplete;

          end if;

     end if;--v_fitem_list.count

     end if;--v_create_transaction_tf

end sp_rollup_transaction_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitem_list_create_n_process
--
--
--   %USAGE
--        Procedure to call other procedures to create the list of eligible Fitems which needs to be rolledup,
--        rollup creation and financial creation of type Info/Invoice
--        This is created as separate procedure so that same can be invoked per policy in a loop if Policy wise flag is true.
--
--   %ALGORITHM
--        Get the FItems involved in related processed transactions and add to the Fitem List
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_db_trx_recob_map_row       The MD row of the DB_TRX_RECOM_MAP Table
--   %PARAM    in_profile_object_id          The profile object id if one exists. If not pass null
--   %PARAM    in_transaction_type_id        The transaction type which we want to create
--   %PARAM    in_billing_start_date
--   %PARAM    in_billing_end_date           The billig period start date. If we need to pick financials only in a specific period
--   %PARAM    in_current_date               default null
--   %PARAM    in_policy_id                  policy id for which rollups are to be created
--   %PARAM    out_fitem_count               no of fitems selected

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_list_create_n_process
(
     in_session_id                           in             object.object_id%type,
     in_transaction_id                       in             object.object_id%type,
     in_billing_account_id                   in             object.object_id%type,
     in_billingacounttrxset_id               in             object.object_id%type,
     in_db_trx_recob_map_row                 in             db_trx_recon_map%rowtype,
     in_profile_object_id                    in             object.object_id%type,
     in_transaction_type_id                  in             number,
     in_billing_start_date                   in             object_bv_value.business_variable_value%type,
     in_billing_end_date                     in             object_bv_value.business_variable_value%type,
     in_current_date                         in             date default null,
     in_policy_id                            in             object.object_id%type default null,
     out_fitem_count                         out            number,
     in_fitem_list                           in             pkg_os_object.t_object_list default pkg_os_object.gnull_object_list-- OSBILLING-5081

)
is
     v_fitem_list                       pkg_db_stmt.t_fitem_list;
     v_fitem_table                      fitem_table;
     io_action_outcome_id               outcome.outcome_id%type;
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_fitem_list_create_n_process';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
          v_procedure_start_time                  number                                       := dbms_utility.get_time;
begin

     v_fitem_list.delete;
     --
     -- Prepare the list of Fitems which needs to rolled up
     --
     sp_fitem_list_create
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          in_billingacounttrxset_id,
          in_db_trx_recob_map_row,
          in_profile_object_id,
          in_transaction_type_id,
          in_billing_start_date,
          in_billing_end_date,
          v_fitem_list, -- io Fitem List
          v_fitem_table,
          in_current_date,
          in_policy_id,
          in_fitem_list -- OSBILLING-5081
     );

     -- UTPRODUCT-3814
     -- Add or update the list of the financials Items. 
     pkg_cs_db_stmt.sp_custom_fitem_list_create
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          in_billingacounttrxset_id,
          in_db_trx_recob_map_row,
          in_profile_object_id,
          in_transaction_type_id,
          in_billing_start_date,
          in_billing_end_date,
          v_fitem_list, -- io Fitem List
          v_fitem_table,
          in_current_date,
          in_policy_id,
          in_fitem_list -- OSBILLING-5081
     );
     -- UTPRODUCT-3814

     out_fitem_count := v_fitem_list.count;

         pkg_os_logging.sp_log_performance
          (
               in_session_id,
               in_transaction_id,
               'sp_fitem_list_create_n_process',v_procedure_start_time,
               '...... for policy_id :'||in_policy_id
               || 'fitem count : '|| out_fitem_count
          );

     if v_fitem_list.count <> 0
     then
          --
          -- Call the rollup procedure to prepare the rollups
          --
          if in_transaction_type_id in ( g_SetType_AccountRollUpInvoice,pkg_db_constant.g_SetType_AccountStatement) --UTPRODUCT2-7 --Gagan's code
          then
               --UTPRODUCT2-14
               if NVL(pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_billingacounttrxset_id,
                    pkg_db_constant.gbv_BATS_isItAdhocStmt
               ),pkg_db_constant.g_No)=pkg_db_constant.g_No then    
                    pkg_db_stmt_util.sp_invoice_installment_fee
                        (
                             in_session_id,
                             in_transaction_id,
                             in_billingacounttrxset_id,
                             in_policy_id,
                             v_fitem_list,
                             io_action_outcome_id
                         );
                         
               end if;      
                    
          end if;
          if in_transaction_type_id = g_SetType_AccountRollUpInvoice --Gagan's code
          then
          pkg_db_stmt_rollup_modify.sp_generic_rollup_create -- OSBILLING-3525
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               in_billingacounttrxset_id,
               in_db_trx_recob_map_row.reconcialation_id,
               v_fitem_list, --This list will give the final list of FItems which are rolledup. If any sub-category is not mapped
               --with this DB Reoncialiation, then that will not be considered
               in_transaction_type_id,
               1,
               in_billing_start_date,
               in_billing_end_date  -- OSBILLING-4271
          );
          else

          pkg_db_stmt_rollup_modify.sp_generic_rollup_create -- OSBILLING-3525
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               in_billingacounttrxset_id,
               in_db_trx_recob_map_row.reconcialation_id,
               v_fitem_list, --This list will give the final list of FItems which are rolledup. If any sub-category is not mapped
               --with this DB Reoncialiation, then that will not be considered
               in_transaction_type_id,  -- OSBILLING-4271
               null,
               in_billing_start_date,
               in_billing_end_date  -- OSBILLING-4271
          );
           end if;

          --
          --   Based on the attribute in DB_TRANSACTION_RECON_MAP on whether to Invoice the financials, Invoice them
          --

          if nvl(in_db_trx_recob_map_row.invoice_tf,3 ) = 1
          then

               sp_invoice_financials
               (
                    in_session_id,
                    in_transaction_id,
                    in_billing_account_id,
                    in_billingacounttrxset_id,
                    v_fitem_list, -- io Fitem List
                    v_fitem_table,
                    in_current_date --OSBILLING-4893
               );

          elsif nvl(in_db_trx_recob_map_row.invoice_tf,3 ) = 2
          then -- Create FIchanges of type FYI pointing to the fitems that are rolledup in this transaction

               sp_info_financials
               (
                    in_session_id,
                    in_transaction_id,
                    in_billing_account_id,
                    in_billingacounttrxset_id,
                    v_fitem_list, -- io Fitem List
                    v_fitem_table,
                    in_current_date -- OSBILLING-4893
               );

          end if;

     end if;

end sp_fitem_list_create_n_process;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitem_list_create
--
--
--   %USAGE
--        Procedure to create the list of eligible Fitems which needs to be rolledup
--
--
--   %ALGORITHM
--        Get the FItems involved in related processed transactions and add to the Fitem List
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_db_trx_recob_map_row       The MD row of the DB_TRX_RECOM_MAP Table
--   %PARAM    in_profile_object_id          The profile object id if one exists. If not pass null
--   %PARAM    in_transaction_type_id        The transaction type which we want to create
--   %PARAM    in_billing_start_date
--   %PARAM    in_billing_end_date         The billig period start date. If we need to pick financials only in a specific period
--   %PARAM    io_fitem_list               The output parameter returning the list of Fitems
--   %PARAM    o_fitem_table               The output parameter returning the table of data for the list of Fitems
--   %PARAM    in_action_outcome_id          in_action_outcome_id

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_list_create
(
     in_session_id                           in             object.object_id%type,
     in_transaction_id                       in             object.object_id%type,
     in_billing_account_id                   in             object.object_id%type,
     in_billingacounttrxset_id               in             object.object_id%type,
     in_db_trx_recob_map_row                 in             db_trx_recon_map%rowtype,
     in_profile_object_id                    in             object.object_id%type,
     in_transaction_type_id                  in             number,
     in_billing_start_date                   in             object_bv_value.business_variable_value%type,
     in_billing_end_date                     in             object_bv_value.business_variable_value%type,
     io_fitem_list                           in out         pkg_db_stmt.t_fitem_list,
     o_fitem_table                           out            fitem_table,
     in_current_date                         in             date default null,
     in_policy_id                            in             object.object_id%type default null,
     in_fitem_list                 in             pkg_os_object.t_object_list default pkg_os_object.gnull_object_list-- OSBILLING-5081
)
is

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_fitem_list_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_db_recon_row                     db_reconciliation%rowtype;
     v_statement_rollup_level           object_bv_value.business_variable_value%type;
     v_rollup_level                     number;
     v_most_recent_batrxset_id          object.object_id%type;
     v_last_processed_date              date;
     v_datamart_tf                      char := 'T';
     v_rollup_due_date                  char := 'T';
     v_processed_trx_type_id            number;
     v_recon_index                      varchar2(100);
     v_fitem_row                        dragon_fitem%rowtype;
     v_include_past_dues                object_bv_value.business_variable_value%type;
     v_stmnt_profile_type_id            number;
     v_unique_fitem_indx_tbl            pkg_db_cash_apply.t_policy_list;
     v_last_stmt_start_dt               object_bv_value.business_variable_value%type;--OSbilling-4481
     v_last_stmt_end_dt                 object_bv_value.business_variable_value%type;--OSbilling-4481
     v_billing_acct_parent              object.object_id%type:= pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id , in_billing_account_id);
     v_billing_acct_parent_type         object_bv_value.business_variable_value%type := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_billing_acct_parent );
     v_lead_time                        number:= pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_billing_account_id,11346);
     v_fitem_object_index               varchar2(100);
     v_fitem_id                         object.object_id%type;
	v_generate_credit_invoice 		pd_property.pd_property_value%type:= nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_billing_account_id,18446),'T');
     --OSPRODUCT-995
     v_include_old_items_proprty        pd_property.pd_property_value%type:= nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id,in_billing_account_id,15848),'F');
	v_rule_id                          number; --OSPRODUCT-17909
     v_policy_current_trx_id            object.object_id%type;--OSPRODUCT-17909
     gbv_pt_exprxn_id                   business_variable.business_variable_id%type   :=   33396248;--OSPRODUCT-17909
	 v_max_lead_time                    number;
      v_policy_transaction               object_bv_value.business_variable_value%type; --OSPRODUCT-29007
     v_business_relation_set_id        object_bv_value.business_variable_value%type;  --OSPRODUCT-29007
     v_business_relation_check_tf      char(1) default 'F'; --  --OSPRODUCT-29007	 
     --
     -- OSbilling-4481 Cursor for Account Invoice Financial Items
     --

     cursor c_fitem
      (
          cin_billacc_id                          object.object_id%type,
          cin_profile_type_id                     object.object_id%type,
          cin_billing_period_start_date           date,
          cin_billing_period_end_date             date
      )
      is
         select
              df.fitem_id,
              df.policy_id,
              df.policy_transaction_id,
              df.fitem_category_id,
              df.fitem_sub_category_id,
              df.due_date,
              df.policy_effective_date,
              df.installment_id,
              df.fitem_asset_id,
              df.policy_term_id,--VAULTDEV-9936
              df.balance               as balance_amt                -- balance amt - can be due or cash
         from
              dragon_fitem df, dragon_policy dp
         where
              df.billing_account_id = cin_billacc_id
         and
              dp.policy_id = df.policy_id

         and
              (trunc(df.due_date) >= trunc(dp.policy_effective_date)) --VAULTDEV-9343

         and

              (trunc(df.due_date) < trunc(cin_billing_period_end_date))

         and
              df.fitem_type_id = pkg_db_stmt.g_FItem_Debit
         and
             (
               df.fitem_billed_tf is null
               or
               cin_profile_type_id = pkg_db_stmt.g_StmtProfileType_Info
             )
         and
               dp.billing_method_id = pkg_db_stmt.g_BillingMethod_Direct
         and
               dp.direct_billed_to_id = pkg_db_stmt.g_Direct_CustomerBill
	    and
               dp.policy_object_state_id not in (73)
		and
               df.balance >= 0.01 or (df.balance <=-0.01 and v_generate_credit_invoice = 'T')--vaultdev-10001
        and  
		       nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,df.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp    --OSPRODUCT-12711
          ;

         cursor c_fitem_prtner
      (
          cin_billacc_id                          object.object_id%type,
          cin_profile_type_id                     object.object_id%type,
          cin_billing_period_start_date           date,
          cin_billing_period_end_date             date
      )
      is
         select
              df.fitem_id,
              df.policy_id,
              df.policy_transaction_id,
              df.fitem_category_id,
              df.fitem_sub_category_id,
              df.due_date,
              df.policy_effective_date,
              df.installment_id,
              df.balance               as balance_amt                -- balance amt - can be due or cash
         from
              dragon_fitem df, dragon_policy dp
         where
              df.billing_account_id = cin_billacc_id
         and
              dp.policy_id = df.policy_id

         and
              (trunc(df.due_date) <= trunc(pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id,cin_billacc_id)+v_lead_time))

         --and

              --(trunc(df.due_date) < trunc(cin_billing_period_end_date))

         and
              df.fitem_type_id = pkg_db_stmt.g_FItem_Debit
         and
             (
               df.fitem_billed_tf is null
               or
               cin_profile_type_id = pkg_db_stmt.g_StmtProfileType_Info
             )
         and
               dp.billing_method_id = pkg_db_stmt.g_BillingMethod_Direct
         and  
		 	 nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,df.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp  --OSPRODUCT-12711
            ;

     v_include_payments_property                pd_property.pd_property_value%type;--OSBILLING-7311

   --OSBILLING-4331
     cursor c_statement_fitem
     (
          in_billacc_id                number,
          in_profile_type_id           number,
          in_billing_period_start_date date,
          in_billing_period_end_date   date,
          in_past_due_indicator        varchar2,
          in_policy_id                 number
     )
     is
         select
               --f.fitem_id  --OSPRODUCT-9352
               f.fitem_id,f.installment_id,f.policy_transaction_id  --OSPRODUCT-9352
          from
               dragon_fitem f
          where
               f.billing_account_id = in_billacc_id
          and
               (
                    in_policy_id is null
                    or
                    in_policy_id=f.policy_id
               )
          and
               f.balance <> 0
          and
               (
                    (
                         in_profile_type_id = pkg_db_stmt.g_StmtProfileType_Invoice
                         and
                         (
                              (
                                   in_past_due_indicator <> 'F'
                                   and
                                   (
                                        (
                                             f.current_recon_batch_id is null
                                             and
                                             trunc(actual_due_date) <= trunc(in_billing_period_end_date)
                                        )
                                        or
                                        (
                                             f.current_recon_batch_id is not null
                                             and
                                             trunc(actual_due_date) < trunc(in_billing_period_start_date)
                                             and installment_number not in (select installment_number from dragon_fitem df1 where df1.billing_account_id= f.billing_account_id and df1.POLICY_ID=f.POLICY_ID
                                           and   nvl(df1.AGING_STATUS_ID,0)=2 )	   
                                        )
                                   )
                              )
                              or
                              (
                                   in_past_due_indicator = 'F'
                                   and
                                   f.current_recon_batch_id is null
                                   and
                                   trunc(actual_due_date) <= trunc(in_billing_period_end_date)
                              )
                        )
                    )
                    or
                    (
                         in_profile_type_id = pkg_db_stmt.g_StmtProfileType_Info
                         and
                         (
                              (
                                   in_past_due_indicator <> 'F'
                                   and
                                   (
                                        (
                                             trunc(actual_due_date) >= trunc(in_billing_period_start_date)
                                             and
                                             trunc(actual_due_date) <= trunc(in_billing_period_end_date)
                                        )
                                        or
                                        trunc(actual_due_date) < trunc(in_billing_period_start_date)
                                   )
                              )
                              or
                              (
                                   in_past_due_indicator = 'F'

                                   and
                                   trunc(actual_due_date) >= trunc(in_billing_period_start_date)
                                   and
                                   trunc(actual_due_date) <= trunc(in_billing_period_end_date)
                              )
                         )
                    )
               )
            and
--              (select billing_method_id from dragon_policy p where p.policy_id=f.policy_id) = pkg_db_stmt.gPolicy_AgencyBilled                   --osproduct-8257 20201116 Cheryl changed to use policy term
             (select policy_term_billing_method_id from dragon_policy_term pt where pt.policy_term_id = f.policy_term_id) = pkg_db_stmt.gPolicy_AgencyBilled   --osproduct-8257/osproduct-8563 20201123 Cheryl changed to use policy term
            and
                nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,f.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp --OSPRODUCT-15189
              ;

     cursor c_cash_transfer_due_fitems
     (
          cin_billing_account_id          object.object_id%type,
          cin_policy_id                    object.object_id%type,
          cin_billingacounttrxset_id       object.object_id%type
     )
     is
     select f.fitem_id

     from
          dragon_fitem f
     where f.fitem_id in (
          select fitem_id from dragon_fichange where billingaccounttrxset_id = cin_billingacounttrxset_id and fitem_type_id = pkg_db_object.gFItem_Debit and fitem_transaction_type_id = 101)
     and
          f.billing_account_id = cin_billing_account_id
     -- and
     --     (f.policy_id is null)
     and
          f.fitem_type_id = pkg_db_object.gFItem_Debit

     order by f.policy_id, f.policy_transaction_id;

     cursor c_cash_apply_fitems
     (
          cin_billing_account_id          object.object_id%type,
          cin_policy_id                    object.object_id%type
     )
     is
     select
          f.fitem_id
     from
          dragon_fitem f
     where
          f.billing_account_id = cin_billing_account_id
     and
          (
               f.fitem_type_id = pkg_db_object.gFItem_Debit
               --OSPRODUCT-3773 start
                or
                (
                    f.fitem_type_id = pkg_db_object.gFItem_Credit
                    and
                    f.fitem_category_id = gFItem_Cat_Commission
                )
                --OSPRODUCT-3773 end
          )
     and
          f.balance >= 0.01 -- cash is needed ...
     and
          (
               cin_policy_id is null
               or
               f.policy_id=     cin_policy_id
          )
     and
          f.fitem_category_id <> g_fitem_Category_disb    --OSBILLING-7229
 --2017-09-18 Cheryl Add priority
     order by f.policy_id, f.policy_transaction_id, f.priority;

     cursor c_processed_transactions (in_db_trx_type_id db_transaction_set_type.db_trxset_enum%type, in_processed_date date)
     is
          select
               db.billingaccounttrxset_id
          from
               dragon_billingaccounttrxset db
          where
               db.parent_billing_account_id = in_billing_account_id
          and
               db.batch_type_id = in_db_trx_type_id
          and
               db.batch_status_id =  pkg_db_object.gBatchStatus_Processed -- Processed
          and
               db.related_rollup_statement_id     is null
          ;

     --
     -- Cursor to select all the predecessor transactions of a particular type
     --
     cursor c_predecessor_transactions (in_db_trx_type_id db_transaction_set_type.db_trxset_enum%type)
     is
          select
               db.billingaccounttrxset_id
          from
               dragon_billingaccounttrxset db
          where
               db.parent_billing_account_id = in_billing_account_id
          and
               db.batch_type_id = in_db_trx_type_id
          and
               db.batch_status_id =  pkg_db_object.gBatchStatus_Processed -- Processed
          and
               db.related_rollup_statement_id is not null
          ;

     cursor c_due_fitems
     (
          cin_billing_account_id             object.object_id%type,
          cin_billingacounttrxset_id         object.object_id%type,
          cin_recon_row                      db_reconciliation%rowtype
     )
     is
          select
               f.fitem_id,
               decode(nvl(cin_recon_row.recon_item_group_by_id, 0),
                         gRollup_GroupBy_Installment, to_char(nvl(f.installment_number, 0)),
                         gRollup_GroupBy_CreateDate, to_char(f.creation_date),
                         gRollup_GroupBy_DueDate, to_char(f.actual_due_date, pkg_os_constant.DragonDateFormatDefault),
                         gRollup_GroupBy_Age, to_char(f.aging_status_id),
                         gRollup_GroupBy_Category, to_char(f.fitem_category_id),
                         gRollup_GroupBy_PolTrx,f.policy_transaction_id,
                         gRollup_GroupBy_Policy,f.policy_id,
                         to_char(f.fitem_category_id))     as groupby_column_value

          from
               dragon_fitem f
          where
               f.fitem_id in
               (
                   select
                         fi.fitem_id
                    from
                         dragon_fichange fi
                    where
                         fi.billingaccounttrxset_id = cin_billingacounttrxset_id
               )
          and
              (
               ( f.balance <> 0 and in_transaction_type_id not in (pkg_db_stmt.gBatchType_SinglePay,pkg_db_stmt.gBatch_CashTransferBatch) )
               or
               (f.balance  < 0 and in_transaction_type_id in (pkg_db_stmt.gBatchType_SinglePay,pkg_db_stmt.gBatch_CashTransferBatch) )
               or
               (   in_transaction_type_id  in    (g_SetType_LteNot1AcctRolupStmt,g_SetType_LteNot2AcctRolupStmt)    )
               )

          and
               f.billing_account_id = cin_billing_account_id
          -- LXPRODUCT-455 Commenting the suspension check     
          --and
			   --nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,f.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp  --OSPRODUCT-12711


          order by f.policy_id, f.policy_transaction_id, groupby_column_value;

     --OSBILLING-2860
	 --OSPRODUCT-4928
	 
     cursor c_ln_fitems_prop
     (
            in_billing_account_id  object.object_id%type,
            v_policy_id            object.object_id%type
     )
     is
          select
               f.fitem_id
          from
               dragon_fitem f, dragon_billingaccount db
          where
               f.billing_account_id = db.billingaccount_id
          and
               f.policy_id = v_policy_id
          and
               nvl (pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_policy_id,22146), 'F') = 'F'
          and
               f.fitem_type_id = pkg_db_object.gFItem_Debit
          and
               nvl(db.account_type_id, 1501) != 1501
          and
               f.aging_status_id = pkg_db_stmt.gAgingStatus_Past
          and
               f.balance > 0

          union

          select
               f.fitem_id
          from
               dragon_fitem f, dragon_billingaccount db
          where
               f.billing_account_id = db.billingaccount_id
          and
               f.policy_id = v_policy_id
          and
               nvl (pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_policy_id,22146), 'F') = 'T'
          and
               f.fitem_type_id = pkg_db_object.gFItem_Debit
          and
               nvl(db.account_type_id, 1501) != 1501
          and
               aging_status_id in (2,3)
          and
               balance > 0
          ;

     --OSPRODUCT-17909
     cursor c_late_notice_fitems
     (
            in_billing_account_id  object.object_id%type,
            v_policy_id            object.object_id%type,
            in_rule_id             number 
     )
     is
          select
               f.fitem_id
          from
               dragon_fitem f, dragon_billingaccount db
          where
               f.billing_account_id = db.billingaccount_id
          and
               f.policy_id = v_policy_id
          and
               f.fitem_type_id = pkg_db_object.gFItem_Debit
          and
               nvl(db.account_type_id, 1501) != 1501
          and
               aging_status_id in (2,3)
          and
               balance > 0
          and
		       nvl(pkg_os_exp.fn_evaluate_expression(in_session_id,in_transaction_id,f.fitem_id,in_rule_id),'F') = 'T'--OSPRODUCT-17909
          ;

	-- OSPRODUCT-4179
      -- processed transactions associated with/without a account rollup. 
      cursor c_trxs_associated_with_rollup (in_db_trx_type_id db_transaction_set_type.db_trxset_enum%type)
     is
          select
               db.billingaccounttrxset_id
          from
               dragon_billingaccounttrxset db
          where
               db.parent_billing_account_id = in_billing_account_id
          and
               (
               db.batch_type_id = in_db_trx_type_id
               or
               db.batch_type_id = decode(in_db_trx_type_id,5146,6631,4212,6731,in_db_trx_type_id)
               )
          and
               db.batch_status_id =  pkg_db_object.gBatchStatus_Processed -- Processed
          and
               db.related_rollup_statement_id  is not   null
          ;

		  
     --OSBILLING-5982 start
     cursor c_recon_fitem
     --osproduct-8257 20201111 Cheryl added to only do the policy on
     (
            in_billing_account_id object.object_id%type,
            v_policy_id object.object_id%type
     )
     is
         select * from
         (
               select a.*
          from
               dragon_fitem a, dragon_policy b, dragon_policy_term pt --    --osproduct-8257 20201111 Cheryl added to get billing method from 
          where
               a.policy_id = b.policy_id
          and                                             --osproduct-8257 20201111 Cheryl added to only do the policy on
               a.policy_id = v_policy_id                  --osproduct-8257 20201111 Cheryl added to only do the policy on  
          and                                             --osproduct-8257 20201111 Cheryl added to only do the policy on
               pt.policy_term_id = a.policy_term_id       --osproduct-8257 20201111 Cheryl added to get billing method from term
          and     
               b.policy_object_state_id in (gObjState_PolicyActive,gObjState_PolicyCanceled) -- Object State of Policy is Active
          and
                 a.billing_account_id = in_billing_account_id
          and
               (
                    in_billing_end_date is null -- HD - GCNA-525_HD : added null check to include all items
                     or
                    trunc(a.actual_due_date) <=  trunc(to_date(in_billing_end_date, pkg_os_constant.DragonDateFormatDefault))
               )
          and
               (
                    (
                          fitem_type_id  =    gFItemType_Debit
                          and
                         a.balance <> 0
                    )
                    or
                    (
                         fitem_type_id  =    gFItemType_Credit
                             and
                         a.fitem_category_id =  gFItem_Cat_Commission
                         and
                         a.balance <> 0
                    )
               )
          and
               pt.policy_term_billing_method_id = gPolicy_AgencyBilled  --osproduct-8257 20201111 Cheryl added to get billing method from term
          and
               a.actual_due_date is not null
          and
              a.current_recon_batch_id is null
          and
              pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,a.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status) <> pkg_db_suspension.g_pol_term_ba_susp
               order by actual_due_date
              );
     --OSBILLING-5982 end
	  --OSPRODUCT-995
     cursor c_billed_fitems
     (
          cin_billing_account_id             object.object_id%type
     )
     is
           select
              f.fitem_id

          from
               dragon_fitem f
          where
              f.billing_account_id = cin_billing_account_id--60119747470
          and
              nvl(FITEM_BILLED_TF,0) =1
          and
              f.balance<>0
           -- LXPRODUCT-455 Made the supension check only for Invoice transaction
          and
			--nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,f.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp --OSPRODUCT-12711
            nvl(pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,f.policy_id,pkg_db_suspension.gSuspend_Invoices_Activity),0) <> 1
          ;	
     --OSPRODUCT-995
     cursor c_late_marked_fitems
     (
          cin_billing_account_id             object.object_id%type
     )
     is
           select
              f.fitem_id 

          from
               dragon_fitem f
          where
              f.billing_account_id = cin_billing_account_id--60119747470
          and 
              nvl(FITEM_BILLED_TF,0) =1  
          and
              f.balance<>0
          and
              nvl(f.AGING_STATUS_ID,0)  = 3
          and  
              nvl(pkg_os_object_io.fn_object_bv_get(in_session_id , in_transaction_id,f.policy_term_id,pkg_db_suspension.gbv_PolicyTerm_Susp_Status),0) <> pkg_db_suspension.g_pol_term_ba_susp --OSPRODUCT-12711   
            ; 
			  
     -- OSPRODUCT-6975
     cursor c_ProfileUpdRem_fitems
     (
            in_billing_account_id object.object_id%type
     )
     is
          select
               max(f.fitem_id) as fitem_id,dt.policy_trx_id as policy_trx_id
               from
                    dragon_fitem f,dragon_policy_trx dt
               where
                    f.billing_account_id = in_billing_account_id
               and 
                    f.policy_id = dt.policy_id
               and 
                    dt.policy_trx_type_id = 8746 -- Profile Update Rem
               and 
                    f.policy_id is not null	
               and 
                    f.fitem_category_id =  246
               and 
                    dt.related_rollup_statement_id is null
               group by 
                    dt.policy_trx_id	;     
          --OSPRODUCT-9352 start
          Cursor c_zero_balance_fitem
          (
               cin_installment_id            object.object_id%type,
               cin_policy_transaction_id     object.object_id%type
          )
          is
               Select 
                    fitem_id
               from 
                    dragon_fitem
               where 
                    billing_account_id =in_billing_account_id
               and
                    installment_id = cin_installment_id
               and
                    policy_transaction_id = cin_policy_transaction_id
               and 
                    balance = 0
               ;
          --OSPRODUCT-9352 end

     --UTPRODUCT2-5
     cursor c_DBilled_Acct_stmt
     (
          cin_billing_account_id             object.object_id%type,
          cin_billing_end_date               date
     )
     is
          select
              f.fitem_id

          from
               dragon_fitem f ,vw_invoice_preferences_acc_stmt vw -- UTPRODUCT2-61 
          where
              f.billing_account_id = vw.BILLING_ACCOUNT_ID
          and
              f.policy_id = vw.POLICY_ID
          and
              f.policy_term_id =vw.POLICY_TERM_ID    
          --and 
              -- NVL(vw.INVOICE_PREFERENCE,1) =2   -- account statement -- UTPRODUCT2-61 
          and      
              f.billing_account_id = cin_billing_account_id
          and
              f.fitem_type_id = pkg_db_stmt.g_FItem_Debit              
          and
              f.balance>0
          and 
              trunc(f.due_date) <= cin_billing_end_date 
          
          union
          
          select
              f.fitem_id

          from
               dragon_fitem f ,vw_invoice_preferences_acc_stmt vw -- UTPRODUCT2-61 
          where
              f.billing_account_id = vw.BILLING_ACCOUNT_ID
          and
              f.policy_id = vw.POLICY_ID
          and
              f.policy_term_id =vw.POLICY_TERM_ID    
          --and 
             -- NVL(vw.INVOICE_PREFERENCE,1) =2   -- account statement -- UTPRODUCT2-61 
          and      
              f.billing_account_id = cin_billing_account_id
          and
              f.fitem_type_id = pkg_db_stmt.g_FItem_Debit                
          and
              f.balance>0
          and 
              trunc(f.due_date) > cin_billing_end_date             
          and 
              trunc(f.due_date) <= cin_billing_end_date + v_max_lead_time    
          and 
              trunc(f.due_date) <= cin_billing_end_date + PKG_DB_FUNCTIONS.fn_get_installment_lead_time(in_session_id ,in_transaction_id,f.policy_id,f.installment_id,f.policy_term_id,f.installment_number)
            
          union
          select
              f.fitem_id

          from
               dragon_fitem f ,vw_invoice_preferences_acc_stmt vw -- UTPRODUCT2-61 
          where
              f.billing_account_id = vw.BILLING_ACCOUNT_ID
          and
              f.policy_id = vw.POLICY_ID
          and
              f.policy_term_id =vw.POLICY_TERM_ID    
          --and 
             -- NVL(vw.INVOICE_PREFERENCE,1) =2   -- account statement UTPRODUCT2-61 
          and      
              f.billing_account_id = cin_billing_account_id
          and
              f.fitem_type_id = pkg_db_stmt.g_FItem_Debit                
          and
              f.balance<0   
              
          -- UTPRODUCT2-58 - Start    
          union    
          
          select
               fitem_id
          from
               dragon_fitem f
          where
               f.billing_account_id = cin_billing_account_id
          and
               fitem_category_id in 646
          and
               balance<>0
          and
               f.policy_id is null
          and 
              f.DISBURSEMENT_BATCH_ID is null --   UTPRODUCT2-62                
         
          union
             
          select
          f.fitem_id
          from
               dragon_fitem f ,vw_invoice_preferences_acc_stmt vw -- UTPRODUCT2-61 
          where
              f.billing_account_id = vw.BILLING_ACCOUNT_ID
          and
              f.policy_id = vw.POLICY_ID
          and
              f.policy_term_id =vw.POLICY_TERM_ID    
          --and
              -- NVL(vw.INVOICE_PREFERENCE,1) =2   -- account statement -- UTPRODUCT2-61 
          and      
              f.billing_account_id = cin_billing_account_id
          and
              f.fitem_category_id in 646            
          and
              f.balance<>0
          and 
              f.DISBURSEMENT_BATCH_ID is null --   UTPRODUCT2-62 
         -- UTPRODUCT2-58 - End         
         ;    
begin

    if v_session_control.gLogging_Full
    then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Enterting the process to prepare the final list of FItems for transaction type  '||in_db_trx_recob_map_row.transaction_type_id
               ||' For Billing Account '||in_billing_account_id
               ||' Billing Start Period :'||in_billing_start_date
               || 'Billing End Period' || in_billing_end_date
               || 'in current date' || in_current_date
               || 'in_transaction_type_id' ||in_transaction_type_id
               || 'in_db_trx_recob_map_row.reconcialation_id' ||in_db_trx_recob_map_row.reconcialation_id
               || 'in_policy_id:' || in_policy_id
               || 'in_profile_object_id' ||in_profile_object_id
          );

     end if;

     v_policy_transaction := pkg_os_object_io.fn_object_bv_get                          -- OSPRODUCT-29007
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billingacounttrxset_id,
                                        32502146
                                  );
								  
	 v_business_relation_set_id := pkg_os_object_io.fn_object_bv_get                        -- OSPRODUCT-29007
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction,
                                        pkg_db_constant.gbv_PT_BusinessRelationShip
                                  );

	 --OSBILLING-7311
     v_include_payments_property:=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_policy_id,19246);


     -- Get the DB Recon Row


     v_db_recon_row := pkg_db_object.fn_db_reconciliation_row(in_session_id, in_transaction_id, in_db_trx_recob_map_row.reconcialation_id);
     --g_db_reconcialition_cache(in_db_trx_recob_map_row.reconcialation_id);

     if ( in_profile_object_id is not null)
     then
          --   Get the Statement Rollup Level
          v_statement_rollup_level :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_profile_object_id,
                                             pkg_db_stmt.gbv_StmtRollupLevel-- gbv_BillingAcc_RollupLevel
                                        );
          --OSBILLING-2860
          v_rollup_due_date   :=       'T' ;
          --OSBilling-4481 Get the last stmt end date and start date for Account Invoice
          if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_profile_object_id, pkg_db_stmt_account.gbv_last_stmt_start_dt) is not null
          then
               v_last_stmt_start_dt:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_profile_object_id, pkg_db_stmt_account.gbv_last_stmt_start_dt);

          end if;

          v_last_stmt_end_dt:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_profile_object_id, pkg_db_stmt.gbv_LastStmtEndDate);

     else
          v_rollup_level             :=   v_db_recon_row.recon_item_group_by_id;
          v_rollup_due_date          :=   v_db_recon_row.due_date_rollup_tf ;

     end if;

     -- OSBILLING-5081
     v_fitem_object_index      :=        in_fitem_list.first;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '......... v_fitem_object_index' || v_fitem_object_index);

     end if;

     if v_fitem_object_index is not null
          then

          while v_fitem_object_index is not null
          loop

                v_fitem_id := in_fitem_list(v_fitem_object_index);
               if ( v_unique_fitem_indx_tbl.exists(v_fitem_id) = true )
                    then

                         -- If Due FItem was already processed (already contributed)
                         -- skip processing and Continue with the next FItem.
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '......... Skipping FItem:' || v_fitem_id||
                                   ' as it was already processed once.');

                         end if;

                    else
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '......... Processing FItem:' || v_fitem_id ||
                                   ' get the index and update the fitem list');

                         end if;
                         v_unique_fitem_indx_tbl(v_fitem_id) := null;
                          -- @@@VG: Need to centralize the creation of this concatenation ... currently, the logic is all over the bloody landscape.

                         v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_fitem_id);
                         v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                         sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );


                    end if;
                     v_fitem_object_index := in_fitem_list.next(v_fitem_object_index);

          end loop;

          else
               --
     -- This is specific to AccountRollup Invoice Statement where we need to rollup for payment as well
     --
     if   in_transaction_type_id in  (g_SetType_InvceAcctRollupStmt,g_SetType_AccountRollUpInvoice,g_SetType_LteNot1AcctRolupStmt,g_SetType_LteNot2AcctRolupStmt)
     then

          if in_transaction_type_id =  g_SetType_AccountRollUpInvoice
          then
                 v_processed_trx_type_id    := g_SetType_Invoice;

          elsif  in_transaction_type_id =  g_SetType_LteNot1AcctRolupStmt
          then

                 v_processed_trx_type_id    :=  g_SetType_LateNotice1;

          elsif  in_transaction_type_id =  g_SetType_LteNot2AcctRolupStmt
          then

                 v_processed_trx_type_id    :=  g_SetType_LateNotice2;

          end if;

          -- Get the last processed transaction of this type
          --
          v_most_recent_batrxset_id     :=   pkg_db_functions.fn_most_recent_batrxset(in_session_id,in_transaction_id,in_billing_account_id,in_transaction_type_id);

          if v_most_recent_batrxset_id is not null
          then
               v_last_processed_date         :=   to_date( pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, v_most_recent_batrxset_id, pkg_db_object.gbv_BillAccTrxSet_ProcessDate),pkg_os_constant.DragonDateFormatDefault);
          else
               v_last_processed_date         :=   in_current_date;

          end if;

          --
          -- Only for Account Invoices
          -- GK: Need to add a PD Property to include or exclude information about predecessors
          --
          --OSBilling-4481

          if in_transaction_type_id =  g_SetType_InvceAcctRollupStmt--OSBilling-4481 account invoice
                    then

                    if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                               '...... Inside account invoice for billing account'|| in_billing_account_id
                               || 'v_rollup_level:'||v_rollup_level);

                    end if;

                              if v_billing_acct_parent_type in ( pkg_db_multipayer.gObjType_Customer, pkg_os_constant.gObjType_CustomerEntity) then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '...... Inside v_billing_acct_parent_type:'|| v_billing_acct_parent_type);

                    for v_fitem in c_fitem( in_billing_account_id, in_billingacounttrxset_id ,to_date(in_billing_start_date, pkg_os_constant.DragonDateFormatDefault),to_date(in_billing_end_date, pkg_os_constant.DragonDateFormatDefault) )
                    loop

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '...... Inside fitEM lOOP :'|| v_fitem.fitem_id);

                              v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_fitem.fitem_id);
                              v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id ,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                              sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                    end loop;

               elsif v_billing_acct_parent_type = pkg_os_constant.gObjType_Partner then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '...... Inside v_billing_acct_parent_type:'|| v_billing_acct_parent_type);

                    for v_fitem_prtner in c_fitem_prtner( in_billing_account_id, in_billingacounttrxset_id ,to_date(in_billing_start_date, pkg_os_constant.DragonDateFormatDefault),to_date(in_billing_end_date, pkg_os_constant.DragonDateFormatDefault) )
                    loop

                              v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_fitem_prtner.fitem_id);
                              v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id ,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                              sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                    end loop;

               end if;
          end if; -- Only for Account Invoice

          for batrxset in c_processed_transactions(v_processed_trx_type_id,v_last_processed_date)
          loop

               --
               --   Get the FItems involved in this processed transaction and add to the Fitem List
               --
               for v_f_rec in c_due_fitems( in_billing_account_id, batrxset.billingaccounttrxset_id ,v_db_recon_row)
               loop

                    v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                    v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id ,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                    sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

               end loop;

               --Should maintain a relationship from BATRxSet saying that it already participated
               pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , batrxset.billingaccounttrxset_id,gbv_BatrxSet_partofAccntRollUp, in_billingacounttrxset_id) ;

               pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id , batrxset.billingaccounttrxset_id,v_datamart_tf);

          end loop;

          if NVL(v_include_payments_property,'F')='T'
               then

                    for batrxset in c_processed_transactions(pkg_db_stmt.gBatchType_SinglePay,v_last_processed_date)
                    loop

                         --
                         --   Get the FItems involved in this processed transaction and add to the Fitem List
                         --
                         for v_f_rec in c_due_fitems( in_billing_account_id, batrxset.billingaccounttrxset_id ,v_db_recon_row)
                         loop

                              v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                              v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                              sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                         end loop;

                         --Should maintain a relationship from BATRxSet saying that it already participated
                         --pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , batrxset.billingaccounttrxset_id,gbv_BatrxSet_partofAccntRollUp, in_billingacounttrxset_id) ;

                         --pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id , batrxset.billingaccounttrxset_id,v_datamart_tf);
                         -- in Account Rollup Invoice and set the BV and put ind atamart so as it is not picked again
                    end loop;

                    for batrxset in c_processed_transactions(pkg_db_stmt.gBatch_CashTransferBatch,v_last_processed_date)
                    loop

                         --
                         --   Get the FItems involved in this processed transaction and add to the Fitem List
                         --
                         for v_f_rec in c_due_fitems( in_billing_account_id, batrxset.billingaccounttrxset_id ,v_db_recon_row)
                         loop

                                   v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                                   v_recon_index  :=    fn_rollup_index_get(in_session_id, in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                                   sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                         end loop;

                         --Should maintain a relationship from BATRxSet saying that it already participated
                         --pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , batrxset.billingaccounttrxset_id,gbv_BatrxSet_partofAccntRollUp, in_billingacounttrxset_id) ;

                         --pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id , batrxset.billingaccounttrxset_id,v_datamart_tf);

                    end loop;

          end if;
		     --OSPRODUCT-995 START (Fot invoice rollup)
          --(In Account Rollup Invoice, include Unsettled past and current due items from previous invoices)
           if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '.........v_include_billed_items_property:' || v_include_old_items_proprty||
                                   '...in_transaction_type_id: '||in_transaction_type_id);

            end if;         
           if v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_AccountRollUpInvoice
               then

                         --
                         --   Get the unsettled past and current due items from previous invoices
                         --
                         for v_billed_fitems in c_billed_fitems( in_billing_account_id)
                         loop

                               if v_session_control.gLogging_Full then

                                 pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '.........v_include_old_items_proprty=''T'' loop');

                                end if;       

                                   v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_billed_fitems.fitem_id);
                                   v_recon_index  :=    fn_rollup_index_get(in_session_id, in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                                   sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                         end loop;



          end if; --v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_AccountRollUpInvoice


         -- for late notice
             
           if v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_LteNot1AcctRolupStmt
               then

                         --
                         --   Get the unsettled past due items 
                         --
                         for v_late_marked_fitems in c_late_marked_fitems( in_billing_account_id)
                         loop

                               if v_session_control.gLogging_Full then

                                 pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '.........v_include_old_items_proprty=''T'' loop');

                                end if;       

                                   v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_late_marked_fitems.fitem_id);
                                   v_recon_index  :=    fn_rollup_index_get(in_session_id, in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                                   sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                         end loop;



          end if; -- v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_LteNot1AcctRolupStmt


        --OSPRODUCT-995 END
	    --OSPRODUCT-995 END
        -- New code as per OSPRODUCT-4179

          if v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_LteNot1AcctRolupStmt
            then
              for v_late_marked_fitems in c_trxs_associated_with_rollup( v_processed_trx_type_id)
                loop
                 pkg_os_logging.sp_log
                    (
                    in_session_id, in_transaction_id, v_procedure_name,
                     'Indside g_SetType_LteNot1AcctRolupStmt: '||in_billing_account_id||':'||v_db_recon_row.recon_item_group_by_id
                     );
                  for v_f_rec in c_due_fitems( in_billing_account_id, v_late_marked_fitems.billingaccounttrxset_id ,v_db_recon_row)
                    loop

                      v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                      -- v_fitem_total  :=   v_fitem_total+ v_fitem_row.balance;
                      v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id ,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                      sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

                    end loop;     
                end loop;

          end if;  -- v_include_old_items_proprty='T' and in_transaction_type_id =  g_SetType_LteNot1AcctRolupStmt
          -- new code end for OSPRODUCT-4179
     --OSBILLING-2860
     elsif in_transaction_type_id in (g_SetType_LateNotice1 , g_SetType_PendingCancellation,g_SetType_LateNotice2, pkg_db_late_process.gTrxType_FirstReminderNotice, pkg_db_late_process.gTrxType_SecondReminderNotice ) -- OSPRODUCT-10135
     then
          --
          --   Get the FItems involved in this processed transaction and add to the Fitem List
          --
          if   (
                    in_transaction_type_id = g_SetType_LateNotice1
                    and
                    nvl ( pkg_db_suspension.fn_db_is_activity_suspended(in_session_id,in_transaction_id,in_policy_id,8),0) <> 1
               )
               or
               (
                    in_transaction_type_id = g_SetType_PendingCancellation
                    and
                    nvl ( pkg_db_suspension.fn_db_is_activity_suspended(in_session_id,in_transaction_id,in_policy_id,10),0) <> 1
               )--OSPRODUCT-13991
			   or
               (
                    in_transaction_type_id = g_SetType_LateNotice2
                    and
                    nvl ( pkg_db_suspension.fn_db_is_activity_suspended(in_session_id,in_transaction_id,in_policy_id,9),0) <> 1
               )--OSPRODUCT-14241
               or
               (
                    in_transaction_type_id = pkg_db_late_process.gTrxType_FirstReminderNotice
               )--OSPRODUCT-14241
               or
               (
                    in_transaction_type_id = pkg_db_late_process.gTrxType_SecondReminderNotice
               )--OSPRODUCT-14241
          then
               --OSPRODUCT-17909 start
               v_policy_current_trx_id  :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_billingacounttrxset_id,pkg_db_object.gbv_BillAccTrxSet_RefPolTrx);--OSPRODUCT-17909
               v_rule_id :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_policy_current_trx_id,gbv_pt_exprxn_id);--OSPRODUCT-17909 
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '||||||Cuurent Policy Transaction ID '||  v_policy_current_trx_id
                         ||' Trigger Rule id '|| v_rule_id
                    );
               end if;
               v_rule_id := null;              
               if v_rule_id is not null
               then
                             
                  if v_business_relation_set_id is not null  -- star OSPRODUCT-29007
				            then
                      
                        pkg_db_late_process.sp_load_db_relation_set_values (in_session_id, in_transaction_id, v_business_relation_set_id);
                        v_business_relation_check_tf := 'T';                        

                     end if;
                     
                     for v_f_rec in c_late_notice_fitems( in_billing_account_id,in_policy_id,v_rule_id)
                     loop
                         v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                                   
                          if (v_business_relation_check_tf = 'T' and pkg_db_late_process.g_db_business_relation_cache.exists(v_fitem_row.FITEM_BUSINESS_RELATIONSHIP))
                             or
                             v_business_relation_check_tf = 'F'
                          then
                                                                                                   
                             v_recon_index  :=   fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
                             sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
                         end if;
                      end loop;
               else
                    if v_business_relation_set_id is not null  -- star OSPRODUCT-29007
				            then
                      
                        pkg_db_late_process.sp_load_db_relation_set_values (in_session_id, in_transaction_id, v_business_relation_set_id);
                        v_business_relation_check_tf := 'T';                        

                     end if;
                                                             
                         for v_f_rec in c_ln_fitems_prop( in_billing_account_id,in_policy_id)
                         loop
                            v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                                                                 
                            if (v_business_relation_check_tf = 'T' and pkg_db_late_process.g_db_business_relation_cache.exists(v_fitem_row.FITEM_BUSINESS_RELATIONSHIP))
                               or
                               v_business_relation_check_tf = 'F'
                            then
                                                                                             
                              v_recon_index  :=   fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
                              sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
                            end if;

                         end loop;
     --end OSPRODUCT-29007
               end if;
               --OSPRODUCT-17909 end
          end if;
          --Should maintain a relationship from BATRxSet saying that it already participated
          --PMADEV-1032
      --pkg_os_object_io.sp_object_bv_set (in_session_id, in_transaction_id , in_billingacounttrxset_id,gbv_BatrxSet_partofAccntRollUp, in_billingacounttrxset_id) ;

          pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id , in_billingacounttrxset_id,v_datamart_tf);
          -- in Account Rollup Invoice and set the BV and put ind atamart so as it is not picked again

     elsif in_transaction_type_id in ( pkg_db_stmt.g_SetType_Statement)
     then
          --
          --   Get the FItems involved in this processed transaction and add to the Fitem List
          --
          v_include_past_dues           :=   nvl(pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_profile_object_id,
                                                  pkg_db_stmt.gbv_StmtIncludePastDues),
                                                  'F'
                                             );

          v_stmnt_profile_type_id       :=        pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_profile_object_id,
                                                  pkg_db_stmt.gbv_StmtProfileType
                                              );
                                              
          -- OSPRODUCT-17726
          --
          -- For an Agency Statement, set the RollupLevel to Policy Transaction = 6. When fixing this change as part of OSPRODUCT-17726, this value is HARDCODED.
          -- A long-term plan is to read the Rollup Level from a Statement Profile. 
          -- We cannot read from a Statement Profile now because RollupLevel enum for Agency Statement is different from RollupLevel enum for Agency Recon.
          -- These two enums will be synchronized in the future. Once done, the Rollup Level will be taken from a Statement Profile.
          --
          --  Note: the Policy Transaction = 6 is value from Agency Recon enum. Refer to DB_RECONCILIATION.RECON_ITEM_GROUP_BY_ID
          --
          v_rollup_level  :=  6;  -- Rollup Level = Policy Transaction
           
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_billingacounttrxset_id,
               gbv_Billacctrxset_rollup_lvl,
               v_rollup_level  
          );
           
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (in_session_id, in_transaction_id, v_procedure_name,
                '...... for Agency Statement Batch ' || in_billingacounttrxset_id ||
                ' batch rollup level has been set to ' || v_rollup_level
               );
          end if;           
          -- / OSPRODUCT-17726
                                              
          if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                     '...... Inside c_statement_fitem :New Statement Billing Period Start Date: '||in_billing_start_date
                     ||' v_billing_end_date : '|| in_billing_end_date
                     || 'in_billing_account_id:'||in_billing_account_id
                     ||'v_stmnt_profile_type_id:'||v_stmnt_profile_type_id
                     || 'v_include_past_dues'|| v_include_past_dues
                     || 'in_policy_id:'|| in_policy_id);

               end if;

          -- OSBILLING-4331
          for v_f_rec in c_statement_fitem(in_billing_account_id,v_stmnt_profile_type_id,to_date(in_billing_start_date,pkg_os_constant.DragonDateFormatDefault),to_date(in_billing_end_date,pkg_os_constant.DragonDateFormatDefault),v_include_past_dues,in_policy_id)
          loop

               -- @@@VG: Need to centralize the creation of this concatenation ... currently, the logic is all over the bloody landscape.

               v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
               v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

               sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
               --OSPRODUCT-9352 start               
               for v_zero_balance_fitem in c_zero_balance_fitem(v_f_rec.installment_id,v_f_rec.policy_transaction_id)
               loop
                    v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_zero_balance_fitem.fitem_id);
                    v_recon_index  :=   fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
                    sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );                                   
               end loop;
               --OSPRODUCT-9352 end
          end loop;
     -- OSBILLING-4271
     elsif in_transaction_type_id in ( pkg_db_stmt.gBatch_CashTransferBatch)
     then

          if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
           '...... Inside c_cash_apply_fitem :in_policy_id:'|| in_policy_id);

          end if;
          for v_f_rec in c_cash_transfer_due_fitems(in_billing_account_id,in_policy_id,in_billingacounttrxset_id)
          loop

          if ( v_unique_fitem_indx_tbl.exists(v_f_rec.fitem_id) = true )
          then

               -- If Due FItem was already processed (already contributed)
               -- skip processing and Continue with the next FItem.
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '......... Skipping FItem:' || v_f_rec.fitem_id ||
                         ' as it was already processed once.');

               end if;

          else

               v_unique_fitem_indx_tbl(v_f_rec.fitem_id) := null;
                -- @@@VG: Need to centralize the creation of this concatenation ... currently, the logic is all over the bloody landscape.

               v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
               v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

               sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );


          end if;

          end loop;

      elsif in_transaction_type_id in ( pkg_db_stmt.gBatch_ManualCashApply,pkg_db_stmt.gBatch_AutoCashApply,pkg_db_stmt.gBatchType_SinglePay)
      then

          if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                     '...... Inside c_cash_apply_fitem , in_policy_id:'|| in_policy_id
                     || 'v_rollup_level:'||v_rollup_level);

          end if;
		  --OSPRODUCT-2308 start
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_billingacounttrxset_id,
               gbv_Billacctrxset_rollup_lvl,
               v_rollup_level
          );
          --OSPRODUCT-2308 end
          for v_f_rec in c_cash_apply_fitems(in_billing_account_id,in_policy_id)
          loop

               if ( v_unique_fitem_indx_tbl.exists(v_f_rec.fitem_id) = true )
                    then

                         -- If Due FItem was already processed (already contributed)
                         -- skip processing and Continue with the next FItem.
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                   '......... Skipping FItem:' || v_f_rec.fitem_id ||
                                   ' as it was already processed once.');

                         end if;

                    else

                         v_unique_fitem_indx_tbl(v_f_rec.fitem_id) := null;
                          -- @@@VG: Need to centralize the creation of this concatenation ... currently, the logic is all over the bloody landscape.

                         v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                         v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                         sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );


                    end if;

          end loop;
     --OSBILLING-5982 start
     elsif in_transaction_type_id = g_SetType_AccountCurrent then
                     --OSBILLING-5903 start
                     pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                       in_transaction_id,
                                                       in_billingacounttrxset_id,
                                                       gbv_Billacctrxset_rollup_lvl,
                                                       v_rollup_level);
                     --OSBILLING-5903 end
                     if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                     '...... Inside c_recon_fitem :New Recon Billing Period Start Date: '||in_billing_start_date
                     ||' v_billing_end_date : '|| in_billing_end_date
                     || 'in_billing_account_id:'||in_billing_account_id
                     || 'in_policy_id:'|| in_policy_id);
					end if  ;

          for v_f_rec in c_recon_fitem (in_billing_account_id,in_policy_id) --osproduct-8257 20201111 Cheryl send the policy id
          loop
               v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
               v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
               sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
               --OSPRODUCT-9352 start               
               for v_zero_balance_fitem in c_zero_balance_fitem(v_f_rec.installment_id,v_f_rec.policy_transaction_id)
               loop
                    v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_zero_balance_fitem.fitem_id);
                    v_recon_index  :=   fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
                    sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );                                   
               end loop;
               --OSPRODUCT-9352 end
          end loop;
		   --OSBILLING-5982 end
    -- OSPRODUCT-6975
     elsif in_transaction_type_id = g_SetType_ProfUpdAcctRolupStmt  
     then

          --
          --   Get the FItems involved in this processed transaction and add to the Fitem List
          --
          for v_f_rec in c_ProfileUpdRem_fitems( in_billing_account_id)
          loop
				
                v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);
 
                sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
                    
				update dragon_policy_trx
				   set related_rollup_statement_id = in_billingacounttrxset_id,
					  policy_trx_last_upd_dt      = sysdate
				 where policy_trx_id = v_f_rec.policy_trx_id;
                     
               end loop;
               
          --UTPRODUCT2-5     
          elsif in_transaction_type_id = pkg_db_constant.g_SetType_AccountStatement
          then

               select NVL(max(pp.pd_property_value),0) into v_max_lead_time from pd_property pp where pp.pd_property_type_id=11346; 
               select greatest(NVL(max(FIRST_INS_LEAD_DAYS),0),NVL(max(REMAINING_INS_LEAD_DAYS),0),v_max_lead_time) into v_max_lead_time from pd_state_compliance;  
               
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '||||||v_max_lead_time '||v_max_lead_time

                    );

               end if;
               --
               --   Get the FItems involved in this processed transaction and add to the Fitem List
               --
               for v_f_rec in c_DBilled_Acct_stmt( in_billing_account_id, trunc(to_date(in_billing_end_date,pkg_os_constant.DragonDateFormatDefault)))
               loop
                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '||||||looping fitem '||v_f_rec.fitem_id

                         );

                    end if;
                    v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
                    v_recon_index  :=    fn_rollup_index_get(in_session_id,in_transaction_id,v_statement_rollup_level,v_rollup_level,v_fitem_row,v_rollup_due_date);

                    sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );
                       
               end loop;     
          
          end if  ;
    
     end if;
end sp_fitem_list_create;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitem_list_update
--
--
--   %USAGE
--        This procedure adds the unique fitem records into o_fitem_table .
--
--   %ALGORITHM
--        adds the unique fitem records into o_fitem_table
--
--
--   %PARAM    io_fitem_list                 fitem list
--   %PARAM    o_fitem_table                 fitem table
--   %PARAM    in_fitem_row                  fitem row
--   %PARAM    in_rollup_index               fitem id
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_fitem_list_update
(
     io_fitem_list             in out         pkg_db_stmt.t_fitem_list,
     o_fitem_table             in out         fitem_table,
     in_fitem_row              in             dragon_fitem%rowtype,
     in_rollup_index           in             varchar2
)
is

begin

     if io_fitem_list.exists(in_fitem_row.fitem_id) = false
     then

          o_fitem_table(in_fitem_row.fitem_id).policy_id               :=   in_fitem_row.policy_id;
          o_fitem_table(in_fitem_row.fitem_id).fitem_type_id           :=   in_fitem_row.fitem_type_id;
          o_fitem_table(in_fitem_row.fitem_id).fitem_category_id       :=   in_fitem_row.fitem_category_id;
          o_fitem_table(in_fitem_row.fitem_id).fitem_sub_category_id   :=   in_fitem_row.fitem_sub_category_id;
          o_fitem_table(in_fitem_row.fitem_id).policy_transaction_id   :=   in_fitem_row.Policy_Transaction_Id;
          io_fitem_list(in_fitem_row.fitem_id)                         :=   in_rollup_index;

     end if;

end  sp_fitem_list_update;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_periodic_stmt_create_tf
--
--
--   %USAGE
--        This procedure identifies whether to create the transaction for passed DB_TRX_RECON_MAP entry
--
--   %ALGORITHM
--        1. Get the frequency ID and other required attributes from the profile id or from the MD Table row
--        2. Get the Billing end date for the frequency
--        3. If Billing end date is <= current date , then generate the statement
--
--
--   %PARAM    in_session_id                session id
--   %PARAM    in_transaction_id            transaction id
--   %PARAM    in_billing_account_id        billing account id
--   %PARAM    in_trx_recon_map_row         db_trx_recon_map row id
--   %PARAM    in_stmt_profile_id           statement profile id
--   %PARAM    io_create_trx_tf             create trx T/F
--   %PARAM    io_billing_end_Date          billing end date
--   %PARAM    in_current_date              current date
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_periodic_stmt_create_tf
(
     in_session_id            in        object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     in_billing_account_id  in        object.object_id%type,
     in_trx_recon_map_row     in        db_trx_recon_map%rowtype,
     in_stmt_profile_id       in        object.object_id%type,
     io_create_trx_tf         in out    char,
     io_billing_start_Date      in out    object_bv_value.business_variable_value%type,
     io_billing_end_Date      in out    object_bv_value.business_variable_value%type,
     in_current_date          in        date default null
)
is
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_create_statement_tf';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_statement_frequency_id           number;
     v_ba_today_date                    date:=pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, in_billing_account_id);
--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_billing_start_date               object_bv_value.business_variable_value%type;
     v_day_of_week                      object_bv_value.business_variable_value%type;
     v_date_of_month                    object_bv_value.business_variable_value%type;
     v_date_type                        object_bv_value.business_variable_value%type;
     v_end_date                         object_bv_value.business_variable_value%type;
     v_profile_date_of_month            number;
     v_profile_end_date_of_month        number;
     v_short_day_name                   varchar2(10);
     v_sys_date                         date;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
begin

    if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Enterting the process to identify whether to create the transaction for DB_TRX_RECON_MAP  '||in_trx_recon_map_row.transaction_type_id
               ||' For Billing Account '||in_billing_account_id
              || 'in_stmt_profile_id '||in_stmt_profile_id

          );

     end if;

      io_billing_start_Date               :=   pkg_os_exp.fn_evaluate_expression (in_session_id ,in_transaction_id, in_trx_recon_map_row.trx_start_date_rule,in_billing_account_id);

     if io_billing_start_Date is null
          then
               io_billing_start_Date   := pkg_db_stmt_partner.fn_partner_stmt_get_start_date
                                        (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billing_account_id,
                                        in_stmt_profile_id
                                        );
       end if;

       if in_stmt_profile_id is not null
       then

            v_statement_frequency_id   :=   in_trx_recon_map_row.transaction_frequency;
       end if;

       io_billing_end_Date   := pkg_db_stmt_partner.fn_partner_stmt_get_end_date
                                        (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billing_account_id,
                                        in_stmt_profile_id,
                                        io_billing_start_Date,
                                        v_statement_frequency_id
                                        );

       pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||io_billing_end_Date '||io_billing_end_Date
               ||' io_billing_start_Date '||io_billing_start_Date
              || 'in_stmt_profile_id '||in_stmt_profile_id

          );
     --
     --   If Billing end date is <= current date , then generate the statement
     --
     if trunc(to_date(io_billing_end_date, pkg_os_constant.DragonDateFormatDefault)) <= trunc(v_ba_today_date)
     then

          --Create the statement
          io_create_trx_tf    :=   'T';



     end if;

end sp_periodic_stmt_create_tf;
--------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_invoice_financials
--
--
--   %USAGE
--        Procedure to mark the FItems are Invoiced by creating a FIChange of type FYI Pointingt to the FItem
--
--
--   %ALGORITHM
--        1. Calculate the Due date for this Invoice Transaction if the billing account is partner
--        2. Create a FItrnsaction of type Invoice
--        3. create a FIChange to point to Fitem as a FYI that it has been invoiced
--        4. Mark the FITransaction as processed and set the total amount
--
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_fitem_list                 The input parameter of the list of Fitems
--   %PARAM    in_fitem_table                The input parameter ,table of data for the list of Fitems above
--   %PARAM    in_action_outcome_id          in_action_outcome_id

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_invoice_financials
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_billing_account_id    in             object.object_id%type,
     in_billingacounttrxset_id in            object.object_id%type,
     in_fitem_list            in             pkg_db_stmt.t_fitem_list,
     in_fitem_table           in             fitem_table,
     in_current_date          in             date default null

)
is

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_invoice_financials';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_fitransaction_id            object.object_id%type;
     v_fichange_id                 object.object_id%type;
     v_datamart_tf                 char := 'T';
     v_bv_table                    pkg_os_object_io.t_bv_table;
     v_fitem_billed_yesno          lookup_list_value.lookup_list_value_id%type;
     v_fitem_index                 number;
     v_billingaccount_type         number;
     v_agent_due_date              object_bv_value.business_variable_value%type;
     v_total_items                 number    :=   0;
     v_total_due                   float     :=   0;
     v_fitem_due                   float     :=   0;
     v_current_date                object_bv_value.business_variable_value%type;
     v_stmt_as_of_date             object_bv_value.business_variable_value%type;
     v_installment_is_billed       object_bv_value.business_variable_value%type;
     v_installment_due_date        object_bv_value.business_variable_value%type;
     v_installment_actual_date     object_bv_value.business_variable_value%type;
     v_transaction_type_id         number;
     v_related_batch_id            object.object_id%type;
     v_fitem_type_id               number;
     v_installment_id              object.object_id%type;
     type t_object_list            is table of object.object_id%type index by varchar2(50);--OSPRODUCT-8207
     type t_fitrans_rec            is record (fitrans_id     object.object_id%type,policy_id     object.object_id%type, amount_due     number );--OSPRODUCT-8207
     type t_fitrans_tab            is table of t_fitrans_rec index by varchar2(50);--OSPRODUCT-8207
     v_fitrans_list                t_fitrans_tab;--OSPRODUCT-8207
     v_fitrx_indx                  number;--OSPRODUCT-8207
     v_policy_list                 t_object_list;--OSPRODUCT-8207
     v_associated_policy           object.object_id%type;--OSPRODUCT-8207
     v_bill_method                 object_bv_value.business_variable_value%type;  -- UTPRODUCT-4841
	 
begin

    if v_session_control.gLogging_Full
    then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Enterting the process to Invoice FItems for the Billingaccounttrxset   '||in_billingacounttrxset_id
               ||' For Billing Account '||in_billing_account_id
               ||' count of fitems '||in_fitem_list.count

          );

     end if;

     v_stmt_as_of_date   :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_billingacounttrxset_id,
                                   pkg_db_stmt.gbv_FITrxSet_BillingEndDate
                              );

     if in_current_date is not null
     then

          v_current_date    :=  to_char(in_current_date, pkg_os_constant.DragonDateFormatDefault);

     else

          v_current_date    :=  to_char(pkg_os_time.fn_os_sysdate(in_session_id,in_transaction_id,in_billingacounttrxset_id),pkg_os_constant.DragonDateFormatDefault) ;

     end if;

     v_transaction_type_id         := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_billingacounttrxset_id, pkg_db_object.gbv_FITrxSet_BatchType);

     -- Verify the Billing Accoun Type

     v_billingaccount_type    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_billing_account_id,pkg_db_object.gbv_BillAcc_AccountType);


     --  Calculate the Due date for this Invoice Transaction if the billing account is partner

     if v_billingaccount_type = pkg_db_object.gBillingAcType_Partner
     then

          declare

               v_partner_id   object.object_id%type;

          begin
               v_partner_id        :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id , in_billing_account_id);

               --
               --  Get Agent Due Date from Agency Recon Batch
               --

               v_agent_due_date         :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_billingacounttrxset_id,
                                                  pkg_db_stmt.gbv_BillAccTrxSet_Duedate
                                             );

               if v_agent_due_date is null
               then

                    v_agent_due_date    :=   pkg_db_functions.fn_fitem_cal_due_date_new
                                             (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_partner_id,
                                                    v_stmt_as_of_date,
                                                    v_stmt_as_of_date,
                                                    trunc(to_date(v_stmt_as_of_date,'YYYYMMDDHH24MISS'))
                                             );

               end if;

          end;

     end if;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Statement End Date: '||v_stmt_as_of_date
               ||', Statement Due Date: '||v_agent_due_date
          );

     end if;

/*OSPRODUCT-8207
     -- Create a FItrnsaction of type Invoice

     pkg_db_object.sp_fitransaction_create
     (
          in_session_id                      =>             in_session_id,
          in_transaction_id                  =>             in_transaction_id,
          in_fitrx_parent_fitrxset_id        =>             in_billingacounttrxset_id,
          out_fitransaction_id               =>             v_fitransaction_id,
          in_fitrx_type                      =>             pkg_db_stmt.g_FITrxType_Invoice,
          in_fitrx_ref_billing_account       =>             in_billing_account_id,
          in_fitrx_object_state              =>             pkg_db_object.gFITrxStatus_InProcess,
          in_fitrx_effective_date            =>             v_current_date,
          in_fitrx_gl_date                   =>             v_current_date,
          in_fitrx_posted_date               =>             v_current_date

     );
*/
     v_policy_list.delete;--OSPRODUCT-8207

     v_fitem_index  := in_fitem_list.first;

     while v_fitem_index is not null
     loop

          -- Verify if the FItem is billed or not
          v_fitem_billed_yesno :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_fitem_index,
                                        pkg_db_stmt.gbv_FItem_Billed_TF
                                   );

         v_fitem_type_id        :=  in_fitem_table(v_fitem_index).fitem_type_id;

         if v_session_control.gLogging_Full
         then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Considering FItem Id: '|| v_fitem_index
                    ||', FItem Billed? (1=Yes 2=No): '||v_fitem_billed_yesno
                    ||', FItem Type (146=Debit 246=Credit): '||v_fitem_type_id
               );

          end if;

          if ( nvl(v_fitem_billed_yesno, pkg_db_stmt.g_BooleanNo) <> pkg_db_stmt.g_BooleanYes
               and
               v_fitem_type_id = pkg_db_object.gFItem_Debit  --Consider only receivables
              )
          then

               declare
                    v_billed_date    varchar2(20);
               begin
                    v_billed_date :=  v_current_date;

                    -- Set billed to true and bill date ...
                    pkg_db_object.sp_ba_object_bv_set(in_session_id, in_transaction_id, v_fitem_index, pkg_db_stmt.gbv_FItem_Billed_Date, v_billed_date );--OSPRODUCT-16499
                    pkg_db_object.sp_ba_object_bv_set(in_session_id, in_transaction_id, v_fitem_index, pkg_db_stmt.gbv_FItem_Billed_TF, pkg_os_constant.gBoolean_True);--OSPRODUCT-16499

                    --
                    --  Get the Installment ID from the Target FItem
                    --

                    select
                         installment_id
                    into
                         v_installment_id
                    from
                         dragon_fitem
                    where
                         fitem_id = v_fitem_index;

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... FItem Installment ID: '||v_installment_id
                         );

                    end if;

                    --
                    --  Check if this Installment already exists in the list
                    --  If not, then add it to the List
                    --

                    if v_installment_id is not null
                    then

                         --
                         -- Check if the Installment already has an Agency Due Date
                         --

                         v_installment_is_billed  :=   pkg_os_object_io.fn_object_bv_get
                                                       (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_installment_id,
                                                             pkg_db_stmt.gbv_SchPayInst_Invoice_TF
                                                        );
                       -- UTPRODUCT-4841
                          v_bill_method            :=   pkg_os_object_io.fn_object_bv_get
                                                       (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_installment_id,
                                                             pkg_db_billing_modify.gbv_installment_billmethodid
                                                        );

                         -- billing method is ageency billed.  --UTPRODUCT-4841
                         if v_bill_method =  pkg_db_billing_modify.gBillingMethod_Agency
                         then

                              v_agent_due_date            :=   pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_installment_id,
                                                                       pkg_db_stmt_partner.gbv_agent_due_date
                                                                  );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...Installment Billed? (1=Yes 2=No): '||v_installment_is_billed||
                                        ', Agency Due Date on Installment: '||v_agent_due_date
                                   );

                              end if;

                         --
                         --  Set the Agency Due Date on Installment only if it is not already set
                         --

                              if v_agent_due_date is null
                              then

                                   --
                                   --  Get Agent Due Date from Agency Recon Batch
                                   --

                                   v_agent_due_date         :=   pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_billingacounttrxset_id,
                                                                      pkg_db_stmt.gbv_BillAccTrxSet_Duedate
                                                                 );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '... Agency Due Date on Recon Batch: '||v_agent_due_date
                                        );

                                   end if;

                                   if v_agent_due_date is null -- At BillingAccountTransactionSet
                                   then

                                        v_installment_due_date   :=   pkg_os_object_io.fn_object_bv_get
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           v_installment_id,
                                                                           pkg_db_billing_modify.gbv_installment_due_date
                                                                      );

                                        -- Get Actual Due Date date from ScheduledPayment object
                                        --

                                        v_installment_actual_date :=  pkg_os_object_io.fn_object_bv_get
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           v_installment_id,
                                                                           pkg_db_billing_modify.gbv_installment_actual_date--30745246
                                                                      );

                                        if v_session_control.gLogging_Full
                                        then

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '...Installment Billing Due Date: '
                                                  ||v_installment_due_date
                                                  || ', Installment Actual Due Date: '
                                                  || v_installment_actual_date
                                             );

                                        end if;

                                        --
                                        -- Get Agent due date from function
                                        --

                                        v_agent_due_date :=      pkg_db_functions.fn_fitem_cal_due_date_new
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_billingacounttrxset_id,
                                                                      v_installment_actual_date,
                                                                      v_installment_due_date,
                                                                      trunc(to_date(v_stmt_as_of_date, 'YYYYMMDDHH24MISS'))
                                                                 );

                                   end if; -- if v_agent_due_date is null -- At BillingAccountTransactionSet

                                   pkg_db_object.sp_ba_object_bv_set--pkg_os_object_io.sp_object_bv_set  OSPRODUCT-14501
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_installment_id,
                                        pkg_db_stmt_partner.gbv_agent_due_date,
                                        v_agent_due_date
                                   );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '... Setting for Installment ID: '
                                             || v_installment_id
                                             || ', Agency Due Date: '
                                             || v_agent_due_date
                                        );

                                   end if;
                              end if; -- if v_agent_due_date is null (At Installment)

                         end if;   -- billing method is ageency billed.

                         -- UTPRODUCT-4841
                         pkg_db_object.sp_ba_object_bv_set--pkg_os_object_io.sp_object_bv_set  OSPRODUCT-14501
                         (
                              in_session_id,
                              in_transaction_id,
                              v_installment_id,
                              pkg_db_stmt.gbv_SchPayInst_Invoice_TF,
                              pkg_db_stmt.g_BooleanYes
                         );
                         -- UTPRODUCT-4841

                         --
                         -- Update the Datamart of Installment ...
                         --

                         pkg_os_datamart.sp_datamart_update_row
                         (
                              in_session_id,
                              in_transaction_id,
                              v_installment_id,
                              v_datamart_tf
                         );

																				

                    end if; -- if v_installment_id is not null

               exception

               when others then

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log_error
                         (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '......... Could not find Installment for FItem ID: '||v_fitem_index
                         );

                    end if;

               end;

         end if; -- if ( nvl(v_fitem_billed_yesno, pkg_db_stmt.g_BooleanNo) <> pkg_db_stmt.g_BooleanYes

          -- Set the specific references for FItem if Transaction type is Account Current or Agency Statement

          if v_transaction_type_id in (pkg_db_stmt.g_SetType_Statement,pkg_db_stmt.g_SetType_AccountCurrent)
          then


               --  Set the current reconciliation/invoice reference ...

               pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitem_index,pkg_db_stmt.gbv_Current_recon_batch_id,in_billingacounttrxset_id);

               --
               --  Get the batch id that originally created or included this fitem for the first time. That is my current understanding
               --  of what this poorly named reference means.
               --

               v_related_batch_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_fitem_index ,pkg_db_stmt.gbv_Related_recon_batch_id );

               if v_related_batch_id is null
               then

                    --
                    -- This FItem is being used in a statement for the VERY first time! So set the poorly named 'related statement' reference ...
                    --
                    pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitem_index, pkg_db_stmt.gbv_Related_recon_batch_id,in_billingacounttrxset_id);

               end if;

          end if;

          ---OSPRODUCT-8207 start

          if v_policy_list.exists(nvl(in_fitem_table(v_fitem_index).policy_id,in_billingacounttrxset_id))
          then
                                        
               if v_session_control.gLogging_Full
               then
                       pkg_os_logging.sp_log
                       (
                            in_session_id,in_transaction_id,v_procedure_name,
                            '..Policy already exists in list: ' || nvl(in_fitem_table(v_fitem_index).policy_id,in_billingacounttrxset_id)|| -- LIOPRODUCT-134  in_fitem_table(v_fitem_index).policy_id ||   
                            ' v_fitransaction_id ' || v_policy_list(nvl(in_fitem_table(v_fitem_index).policy_id,in_billingacounttrxset_id)) --  v_policy_list(in_fitem_table(v_fitem_index).policy_id)
                        );
               end if;
               
               v_fitransaction_id :=  v_policy_list(nvl(in_fitem_table(v_fitem_index).policy_id,in_billingacounttrxset_id));
                                        
          else
               -- Create a FItrnsaction of type Invoice
               pkg_db_object.sp_fitransaction_create
               (
                    in_session_id                      =>             in_session_id,
                    in_transaction_id                  =>             in_transaction_id,
                    in_fitrx_parent_fitrxset_id        =>             in_billingacounttrxset_id,
                    out_fitransaction_id               =>             v_fitransaction_id,
                    in_fitrx_type                      =>             pkg_db_stmt.g_FITrxType_Invoice,
                    in_fitrx_ref_billing_account       =>             in_billing_account_id,
                    in_fitrx_object_state              =>             pkg_db_object.gFITrxStatus_InProcess,
                    in_fitrx_effective_date            =>             v_current_date,
                    in_fitrx_gl_date                   =>             v_current_date,
                    in_fitrx_posted_date               =>             v_current_date

               );
               v_policy_list(nvl(in_fitem_table(v_fitem_index).policy_id,in_billingacounttrxset_id)):=   v_fitransaction_id;
               v_fitrans_list(v_fitransaction_id).fitrans_id          :=   v_fitransaction_id;
               v_fitrans_list(v_fitransaction_id).policy_id           :=   in_fitem_table(v_fitem_index).policy_id;
          end if;
          ---OSPRODUCT-8207 end
		  
          --
          -- create a FIChange to point to Fitem as a FYI that it has been invoiced
          --

          pkg_db_object.sp_fichange_create
          (
               in_session_id                      =>        in_session_id,
               in_transaction_id                  =>        in_transaction_id,
               in_parent_fitransaction_id         =>        v_fitransaction_id,
               out_fichange_id                    =>        v_fichange_id,
               in_fichange_action                 =>        pkg_db_object.gFIChange_FYI,
               in_fichange_action_delta           =>        0,
               in_fichange_ref_fitem              =>        v_fitem_index,
               in_fichange_sum_include            =>        pkg_db_object.gFIChange_Yes,
               in_fichange_process_date           =>        v_current_date,
               in_fichange_ref_pol                =>        in_fitem_table(v_fitem_index).policy_id,
               in_fichange_ref_pol_trx            =>        in_fitem_table(v_fitem_index).policy_transaction_id,
               in_fichange_belongs_to             =>        in_billingacounttrxset_id,
               in_refresh_datamart                =>        'F'
          );

          v_total_items  :=   v_total_items +1;

          v_fitem_due    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id , v_fitem_index, pkg_db_object.gbv_FItem_Amount_Due);
          v_total_due    :=   v_total_due + v_fitem_due;
          v_fitrans_list(v_fitransaction_id).amount_due     :=   nvl(v_fitrans_list(v_fitransaction_id).amount_due,0) + v_fitem_due;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..fitrans_id: ' || v_fitrans_list(v_fitransaction_id).fitrans_id ||   
                    ' amount_due: ' || v_fitrans_list(v_fitransaction_id).amount_due ||
                    ' v_fitem_due: ' || v_fitem_due
               );
          end if;
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fichange_id,
               pkg_db_object.gbv_FIChange_amnt_fyi,
               v_fitem_due
          );


          -- Update datamart of fichange,fitem
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fichange_id, v_datamart_tf);
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitem_index, v_datamart_tf);

          v_fitem_index  :=    in_fitem_list.next(v_fitem_index);

     end loop; -- while v_fitem_index is not null

     -- Mark the FITransaction as processed and set the total amount
     --OSPRODUCT-8207 start
     v_fitrx_indx := v_fitrans_list.first;

     while (v_fitrx_indx is not null)
     loop
     
          v_bv_table.delete;

          v_bv_table(pkg_Db_object.gbv_FITrx_Amount).business_variable_value              :=   v_fitrans_list(v_fitrx_indx).amount_due;--v_total_due
          v_bv_table(pkg_Db_object.gbv_FITrx_RefAssociatedPolicy).business_variable_value :=   v_fitrans_list(v_fitrx_indx).policy_id;
          v_bv_table(pkg_db_object.gbv_FITrx_ProcessDate).business_variable_value         :=   v_current_date;
          v_bv_table(pkg_os_constant_bv.gbv_GenObjObjectState).business_variable_value    :=   pkg_db_object.gFITrxStatus_Processed;
          v_bv_table(pkg_db_object.gbv_FITrx_AccntingPeriod).business_variable_value      :=   pkg_db_functions.fn_get_fitransaction_acct_prd(in_session_id,in_transaction_id,v_fitrans_list(v_fitrx_indx).fitrans_id);

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fitrans_list(v_fitrx_indx).fitrans_id,
               v_bv_table
          );
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitrans_list(v_fitrx_indx).fitrans_id, v_datamart_tf);
          v_fitrx_indx := v_fitrans_list.next(v_fitrx_indx);
     end loop;
     --OSPRODUCT-8207 end
	 
     --OSBilling-4311
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_billingacounttrxset_id,
          pkg_db_cash_apply.gbv_BillAcctTrxSet_CurrTrx,
          v_fitransaction_id
     );
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitransaction_id, v_datamart_tf);
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_billingacounttrxset_id, v_datamart_tf);

end sp_invoice_financials;
-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_info_financials
--
--
--   %USAGE
--        Procedure to create FIChange of type FYI Pointingto the FItems that they are picked in this transaction
--
--
--   %ALGORITHM
--        1. Create a FItransaction of type ReconUpdate
--        2. create a FIChange to point to Fitem as a FYI that it has been invoiced
--        3. Mark the FITransaction as processed and set the total amount
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_billingacounttrxset_id     BillingAccountTransactionID
--   %PARAM    in_fitem_list                 The input parameter of the list of Fitems
--   %PARAM    in_fitem_table                The input parameter ,table of data for the list of Fitems above
--   %PARAM    in_action_outcome_id          in_action_outcome_id

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_info_financials
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_billing_account_id    in             object.object_id%type,
     in_billingacounttrxset_id in             object.object_id%type,
     in_fitem_list            in             pkg_db_stmt.t_fitem_list,
     in_fitem_table           in             fitem_table,
     in_current_date          in             date default null
)
is

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_info_financials';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_fitransaction_id            object.object_id%type;
     v_fichange_id                 object.object_id%type;
     v_datamart_tf                 char := 'T';
     v_bv_table                    pkg_os_object_io.t_bv_table;
     v_fitem_index                 number;
     v_total_items                 number    :=   0;
     v_total_due                   float     :=   0;
     v_fitem_due                   float     :=   0;
     v_current_date                object_bv_value.business_variable_value%type;
     v_transaction_type_id         number;
     v_related_batch_id            object.object_id%type;
     v_policy_id        object.object_id%type;--OSBILLING-4930
     v_pol_trx_id       object.object_id%type;
   --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_fitem_billed_yesno          lookup_list_value.lookup_list_value_id%type;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     v_policy_transaction_id       object.object_id%type;--OSPRODUCT-10666
begin

    if v_session_control.gLogging_Full
    then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Enterting the process to create FICHanges of type Info for the Billingaccounttrxset   '||in_billingacounttrxset_id
               ||' For Billing Account '||in_billing_account_id
               ||' count of fitems '||in_fitem_list.count

          );

     end if;

     if in_fitem_list.count <1
     then

          return;

     end if;

     -- OSBILLING-4893
     if in_current_date is not null
     then

          v_current_date    :=  to_char(in_current_date, pkg_os_constant.DragonDateFormatDefault);

     else

          v_current_date    :=  to_char(pkg_os_time.fn_os_sysdate(in_session_id,in_transaction_id,in_billingacounttrxset_id),pkg_os_constant.DragonDateFormatDefault) ;

     end if;


     v_transaction_type_id         := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_billingacounttrxset_id, pkg_db_object.gbv_FITrxSet_BatchType);
	--OSBILLING-4930
	v_pol_trx_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_billingacounttrxset_id,pkg_db_object.gbv_BillAccTrxSet_RefPolTrx );
	v_policy_id:= pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id , v_pol_trx_id);
      -- Create a FItransaction of type ReconUpdate ( We should make it generic or have that flowing through MD)
      -- Creating only one FItransaction for the entire transaction , as earlier we were createing
      -- One FItransaction for each rollup object. VG- Please suggest

     pkg_db_object.sp_fitransaction_create
     (
          in_session_id                      =>             in_session_id,
          in_transaction_id                  =>             in_transaction_id,
          in_fitrx_parent_fitrxset_id        =>             in_billingacounttrxset_id,
          out_fitransaction_id               =>             v_fitransaction_id,
          in_fitrx_type                      =>             pkg_db_stmt.g_FITrxType_ReconUpdate,
          in_fitrx_ref_billing_account       =>             in_billing_account_id,
		in_fitrx_ref_associatedpolicy      =>             v_policy_id,--OSBILLING-4930
          in_fitrx_ref_associatedpoltrx      =>             v_pol_trx_id,--OSBILLING-4930
          in_fitrx_object_state              =>             pkg_db_object.gFITrxStatus_InProcess,
          in_fitrx_effective_date            =>             v_current_date,
          in_fitrx_gl_date                   =>             v_current_date,
          in_fitrx_posted_date               =>             v_current_date

     );

      pkg_os_object_io.sp_object_bv_set
      (
          in_session_id,
          in_transaction_id,
          in_billingacounttrxset_id,
          pkg_db_object.gbv_BillAccTrxSet_CurrTrx,
          v_fitransaction_id

      );
          v_fitem_index  := in_fitem_list.first;

                    while v_fitem_index is not null
          loop

--osproduct-6151 20201021 cheryl comment out code do not update the current recon batch during an informational statement
/*--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
               if v_transaction_type_id in (g_SetType_Statement,g_SetType_AccountCurrent)
               then


                    --     Set the current reconciliation/invoice reference ...
                    pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitem_index,pkg_db_stmt.gbv_Current_recon_batch_id,in_billingacounttrxset_id);

                    --
                    --     Get the batch id that originally created or included this fitem for the first time. That is my current understanding
                    --     of what this poorly named reference means.
                    --

                    v_related_batch_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_fitem_index ,pkg_db_stmt.gbv_Related_recon_batch_id );

                    if v_related_batch_id is null then

                         --
                         -- This FItem is being used in a statement for the VERY first time! So set the poorly named 'related statement' reference ...
                         --
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitem_index,pkg_db_stmt.gbv_Related_recon_batch_id,in_billingacounttrxset_id);

                    end if;

               end if;
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End*/  
               --
               -- create a FIChange to point to Fitem as a FYI that it has been invoiced
               --
               --OSPRODUCT-10666
               if in_fitem_table.exists(v_fitem_index)  = false
               then
                  v_policy_id          := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_fitem_index,29721246) ; 
                  v_policy_transaction_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_fitem_index,29748446) ; 
               else
                  v_policy_id          := in_fitem_table(v_fitem_index).policy_id;
                  v_policy_transaction_id := in_fitem_table(v_fitem_index).policy_transaction_id;
               end if;
               -- OSPRODUCT-10666
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>        in_session_id,
                    in_transaction_id                  =>        in_transaction_id,
                    in_parent_fitransaction_id         =>        v_fitransaction_id,
                    out_fichange_id                    =>        v_fichange_id,
                    in_fichange_action                 =>        pkg_db_object.gFIChange_FYI,
                    in_fichange_action_delta           =>        0,
                    in_fichange_ref_fitem              =>        v_fitem_index,
                    in_fichange_sum_include            =>        pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>        v_current_date,--in_current_date --OSBilling-4311
                    in_fichange_ref_pol                =>        v_policy_id ,
                    in_fichange_ref_pol_trx            =>        v_policy_transaction_id,
                    in_fichange_belongs_to             =>        in_billingacounttrxset_id,
                    in_refresh_datamart                =>        'F'
               );

               v_total_items  :=   v_total_items +1;

               v_fitem_due    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id , v_fitem_index,pkg_db_object.gbv_FItem_Amount_Due);
               v_total_due    :=   v_total_due + v_fitem_due;

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_fichange_id,
                    pkg_db_object.gbv_FIChange_amnt_fyi,
                    v_fitem_due
               );

               -- Update datamart of fichange,fitem
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fichange_id, v_datamart_tf);
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitem_index, v_datamart_tf);

         v_fitem_index  :=    in_fitem_list.next(v_fitem_index);

     end loop;

     -- Mark the FITransaction as processed and set the total amount

     v_bv_table.delete;

     v_bv_table(pkg_Db_object.gbv_FITrx_Amount).business_variable_value              := v_total_due  ;
     v_bv_table(pkg_db_object.gbv_FITrx_ProcessDate).business_variable_value         := v_current_date;
     v_bv_table( pkg_os_constant_bv.gbv_GenObjObjectState).business_variable_value   :=pkg_db_object.gFITrxStatus_Processed;
     v_bv_table(pkg_db_object.gbv_FITrx_AccntingPeriod).business_variable_value      := pkg_db_functions.fn_get_fitransaction_acct_prd(in_session_id,in_transaction_id,v_fitransaction_id);


     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_fitransaction_id,
          v_bv_table
     );
     if v_session_control.gLogging_Full
    then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||||||in_billingacounttrxset_id:  '||in_billingacounttrxset_id
               ||'pkg_db_cash_apply.gbv_BillAcctTrxSet_CurrTrx:'||pkg_db_cash_apply.gbv_BillAcctTrxSet_CurrTrx
               ||' v_fitransaction_id '||v_fitransaction_id

          );

     end if;
     --OSBilling-4311
       pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_billingacounttrxset_id,
          pkg_db_cash_apply.gbv_BillAcctTrxSet_CurrTrx,
          v_fitransaction_id
     );

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitransaction_id, v_datamart_tf);
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_billingacounttrxset_id, v_datamart_tf);

end sp_info_financials;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_trxtype_recon_map_get
--
--
--   %USAGE
--        Returns applicable rows from db_trx_recon_map table
--
--   %ALGORITHM
--        select rows from db_trx_recon_map based on passed parameters
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_billing_account_id         Billing Account ID
--   %PARAM    in_transaction_type_id        transaction type ID
--   %PARAM    in_entry_type_id              entry type ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_trxtype_recon_map_get
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_billing_account_id    in             object.object_id%type,
     in_transaction_type_id   in             db_transaction_set_type.db_trxset_enum%type,
     in_entry_type_id         in             number
)
return db_trx_recon_map.db_trx_recon_map_id%type
is
     v_trx_recon_map_id db_trx_recon_map.db_trx_recon_map_id%type;

begin
    select
          mp.db_trx_recon_map_id
    into
          v_trx_recon_map_id
    from
          db_trx_recon_map mp
    where
          mp.transaction_type_id = in_transaction_type_id
    and
          mp.entry_type_id = in_entry_type_id
    and
          mp.active_tf =   'T'
    and
          (
          mp.trx_apply_rule is null
          or
          pkg_os_exp.fn_evaluate_expression(in_session_id,in_transaction_id, in_billing_account_id,mp.trx_apply_rule ) = 'T'
          )
     ;

return v_trx_recon_map_id;

exception when no_data_found
then
     v_trx_recon_map_id := null;

when too_many_rows
then
      v_trx_recon_map_id := null;
      raise ;

end fn_trxtype_recon_map_get;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_trx_recon_map_row
--
--
--   %USAGE
--        Returns related row from db_trx_recon_map
--
--   %ALGORITHM
--        select rows from db_trx_recon_map based on passed parameters
--
--   %PARAM    in_db_trx_recon_map_id       db_trx_recon_map_id


-----------------------------------------------------------------------------------------------------------------------------------------------------

function  fn_trx_recon_map_row
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_transaction_type_id        in             db_transaction_set_type.db_trxset_enum%type,
     in_billingacounttrxset_id     in             object.object_id%type default null
)
return    db_trx_recon_map%rowtype
is

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'fn_trx_recon_map_row';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_entry_type_id                    integer;
     v_ba_trx_md_id                     db_transaction_set_type.db_trxset_type_id%type;
     v_transaction_recon_map_row        db_trx_recon_map%rowtype;

begin

     v_entry_type_id      :=        pkg_os_object_io.fn_object_bv_path_get
                                   (
                                        in_session_id ,
                                        in_transaction_id ,
                                        in_session_id ,
                                        pkg_os_constant_bv.gbv_SessionCreatedByUI_TF
                                   );

     if v_session_control.gCaching_On and g_db_trx_type_cache.exists(in_transaction_type_id)
     then

          v_ba_trx_md_id     :=       g_db_trx_type_cache(in_transaction_type_id).db_trxset_type_id;

     else
          sp_load_db_trx_set_type_cache(in_session_id,in_transaction_id);
          v_ba_trx_md_id     :=       g_db_trx_type_cache(in_transaction_type_id).db_trxset_type_id;

     end if;

     --
     -- Find out the DB_TRX_RECON_MAP Id which needs to be used for this transaction
     --

     if g_db_trx_recon_map_cache is null
     then
          sp_load_db_trx_recon_map_cache(in_session_id,in_transaction_id);

     end if;

     -- Select the valid row from g_db_trx_recon_map_cache
     Begin
          select
             *
          into
             v_transaction_recon_map_row
          from
            table(g_db_trx_recon_map_cache) d
          where
             d.transaction_type_id = v_ba_trx_md_id
          and
             d.active_tf='T'
          and
             (
                in_billingacounttrxset_id is null
             or
                d.TRX_APPLY_RULE is null
             or
               pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, in_billingacounttrxset_id, d.TRX_APPLY_RULE ) = 'T'
             )
          and
             decode(v_entry_type_id,1,pkg_db_write_off.gBatchEntryMethod_Manual,pkg_db_write_off.gBatchEntryMethod_System) = d.entry_type_id;

     Exception
     when No_data_found
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| No configuration found for  transaction_type '||v_ba_trx_md_id
               || ' and v_entry_type_id '|| v_entry_type_id

          );
          raise;

     when too_many_rows
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| multiple configuration found for  transaction_type '||v_ba_trx_md_id
               || ' and v_entry_type_id '|| v_entry_type_id

          );
          raise;

     end;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| v_transaction_recon_map_row '||v_transaction_recon_map_row.db_trx_recon_map_id
               ||' v_ba_trx_md_id '||v_ba_trx_md_id

          );

     end if;

     return v_transaction_recon_map_row;

end fn_trx_recon_map_row;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_rollup_index_get
--
--
--   %USAGE
--        Function to prepare the recon index based on the MD or profile selection
--
--   %ALGORITHM
--        As user can select multiple rollup levels, we tokenize the recon index string
--
--   %PARAM    in_profile_rollup_level
--   %PARAM    in_rollup_level
--   %PARAM    in_fitem_row
--   %PARAM    in_roluupby_duedate_tf

-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_rollup_index_get
(
     in_session_id                        object.object_id%type,
     in_transaction_id                    object.object_id%type,
     in_profile_rollup_level     object_bv_value.business_variable_value%type,
     in_rollup_level             number,
     in_fitem_row                dragon_fitem%rowtype,
     in_roluupby_duedate_tf      char default 'T'

)return varchar2
is
     v_policy_rollup_tf                 char(1)                  := 'F';
	v_policy_term_rollup_tf            char(1)                  := 'F';
     v_policy_trx_rollup_tf             char(1)                  := 'F';
     v_effective_date_rollup_tf         char(1)                  := 'F';
     v_due_date_rollup_tf               char(1)                  := 'F';
     v_category_rollup_tf               char(1)                  := 'F';
     v_installment_rollup_tf            char(1)                  := 'F';
     v_asset_rollup_tf                    char(1)                  := 'F';--VAULTDEV-4484
     v_token_table                      pkg_os_token.t_string_table;
     v_token_index                      number;
     v_index_value                      varchar2(100);
     v_procedure_name         constant  system_log.program_name%type := pkg_name||'fn_rollup_index_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(1, 1) ;

begin

     if in_profile_rollup_level is not null
     then
          --  As user can select multiple rollup levels, we need to tokenize the string
          pkg_os_token.sp_tokenize_string( in_profile_rollup_level, ',', v_token_table );

          v_token_index := v_token_table.first;

          while v_token_index is not null loop

               if v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_Policy
               then

                    v_policy_rollup_tf := 'T';


               elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_PolTrx
               then

                    v_policy_trx_rollup_tf := 'T';

               elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_EffDate
               then

                    v_effective_date_rollup_tf := 'T';


               elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_Asset----VAULTDEV-4484
               then
                    v_asset_rollup_tf        := 'T';
                    v_policy_trx_rollup_tf   := 'T';
                    v_policy_rollup_tf           := 'T';
				v_policy_term_rollup_tf  := 'T';--VAULTDEV-9936
                    --v_due_date_rollup_tf 	:= 'T';--VAULTDEV-8269

               --OSBILLING-2860

               elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_Catgry
               then
                    v_category_rollup_tf     :=    'T';


                elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_Installment
               then
                     v_policy_trx_rollup_tf   := 'T';
                    v_installment_rollup_tf     :=    'T';

                elsif v_token_table(v_token_index) = pkg_db_stmt.g_StatementRollup_DueDate or in_roluupby_duedate_tf ='T'
               then

                    v_due_date_rollup_tf := 'T';

               end if;

               v_token_index := v_token_table.next(v_token_index);

          end loop;

          select

               decode(v_policy_rollup_tf,'F', '',in_fitem_row.policy_id)||'-'||
               decode(v_effective_date_rollup_tf,'F', '',to_char(in_fitem_row.policy_effective_date, pkg_os_constant.DragonDateFormatDefault ))||'-'||
               decode(v_policy_trx_rollup_tf,'F', '',in_fitem_row.policy_transaction_id)||'-'||
               decode(v_due_date_rollup_tf,'F', '',to_char(nvl(in_fitem_row.actual_due_date,in_fitem_row.agency_due_date) , pkg_os_constant.DragonDateFormatDefault ))||'-'||
               decode(v_category_rollup_tf,'F', '',in_fitem_row.fitem_category_id)||'-'||
               decode(v_installment_rollup_tf,'F', '',in_fitem_row.installment_id)||'-'||
               decode(v_asset_rollup_tf,'F', '',in_fitem_row.fitem_asset_id)||'-'||----VAULTDEV-4484
		   decode(v_policy_term_rollup_tf,'F', '',in_fitem_row.policy_term_id)||'-'||--VAULTDEV-9936
               in_fitem_row.billing_account_id
          into
               v_index_value
          from dual;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||||||v_asset_rollup_tf '||v_asset_rollup_tf||'in_fitem_row.fitem_asset_id'||in_fitem_row.fitem_asset_id
                    ||' v_policy_rollup_tf '||v_policy_rollup_tf||'in_fitem_row.policy_id'||in_fitem_row.policy_id||'v_policy_trx_rollup_tf'||v_policy_trx_rollup_tf||'in_fitem_row.policy_transaction_id'||in_fitem_row.policy_transaction_id

                    );
                pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'v_index_value'||v_index_value

                    );

          end if;
     else
        select
               in_fitem_row.policy_id||'-' ||
               to_char(in_fitem_row.policy_effective_date,pkg_os_constant.DragonDateFormatDefault)  || '-'||
               decode(nvl(in_rollup_level, 0),pkg_db_stmt_acct_rollup.gRollup_GroupBy_PolTrx,in_fitem_row.policy_transaction_id,pkg_db_stmt_acct_rollup.gRollup_GroupBy_Installment,in_fitem_row.policy_transaction_id,'') || '-'  ||          --creator_fitransactionset_id
               decode(nvl(in_rollup_level, 0),gRollup_GroupBy_DueDate,to_char(in_fitem_row.due_date,pkg_os_constant.DragonDateFormatDefault),decode(in_roluupby_duedate_tf,'T',to_char(in_fitem_row.due_date,pkg_os_constant.DragonDateFormatDefault),'')) ||'-'||
               decode(nvl(in_rollup_level, 0),gRollup_GroupBy_Category,in_fitem_row.fitem_category_id,'')||'-'||
               decode(nvl(in_rollup_level, 0),gRollup_GroupBy_Installment ,in_fitem_row.installment_id ,'')||'-'||
               decode(nvl(in_rollup_level, 0),gRollup_GroupBy_Asset ,in_fitem_row.fitem_asset_id ,'')||'-'||----VAULTDEV-4484
				decode(nvl(in_rollup_level, 0),gRollup_GroupBy_PolicyTerm ,in_fitem_row.policy_term_id ,'')||'-'|| ----VAULTDEV-9936
                in_fitem_row.billing_account_id

          into
               v_index_value

          from dual;
          if v_session_control.gLogging_Full
          then
                pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'CAMTest v_index_value'||v_index_value ||
                    '  in_rollup_level: '||in_rollup_level
                    || ' fitem: ' || in_fitem_row.fitem_id  --20200921 osproduct-5372 - Cheryl
                    || ' effect date: ' || in_fitem_row.policy_effective_date  --20200921 osproduct-5372 - Cheryl
                    || ' in_roluupby_duedate_tf ' || in_roluupby_duedate_tf || ' due date: ' || in_fitem_row.due_date --osproduct-8257 20201111 Cheryl
               );
          end if;

     end if;

     --call function to update the already created index based on custom requirement.
     pkg_cs_db_stmt.fn_rollup_index_update(in_session_id, in_transaction_id,in_rollup_level,in_fitem_row,in_roluupby_duedate_tf,v_index_value);
     return v_index_value;

end fn_rollup_index_get;

------------------------------------------------------------------------------------------------------------------------------------------
--OSBILLING-3232
-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_account_rollup_stmt
--
--
--   %USAGE
--        Entry point to determine what rollup statements needs to be created for this Billing Account today
--
--   %ALGORITHM
--        1. get the batch type from passed billing account trx set
--        2. Call to create rollup statement
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_action_object_id           BillingAccountTransactionID
--   %PARAM    in_action_outcome_id          in_action_outcome_id

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_account_rollup_stmt
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_action_object_id      in             object.object_id%type,
     io_action_outcome_id     in out         outcome.outcome_id%type
)
as

     v_procedure_name         constant  system_log.program_name%type    := pkg_name||'sp_account_rollup_stmt';
     v_session_control        pkg_os_session.r_dragon_session_control   := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_billingaccount_id      object.object_id%type                     := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_action_object_id);
     v_batch_type             object.object_id%type                     :=pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, in_action_object_id, PKG_DB_OBJECT.gbv_FITrxSet_BatchType);
     v_noic_due_date          varchar2(50);
     v_billingaccounttrxset_id object.object_id%type;
begin

      if v_session_control.gLogging_Full
      then

          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '|||||| Enterting the process to create the transaction type '||v_batch_type
              ||' For Billing Account '||v_billingaccount_id
              || 'In BillingAccountTrSetId' || in_action_object_id
          );

      end if;

      -- Call to create rollup statement
      sp_rollup_transaction_create
      (
          in_session_id,
          in_transaction_id,
          v_billingaccount_id,
          v_batch_type,
          PKG_DB_OBJECT.gBatchEntryMethod_System,
          io_action_outcome_id,
          in_action_object_id
      );

      --OSBILLING-3675
      if( v_batch_type = pkg_db_functions.g_BatchLte2RollupStmt)
      then
           --OSBILLING-4900 : Added below query to get the bats
          select
               Max(billingaccounttrxset_id)
          into
               v_billingaccounttrxset_id
          from
               dragon_billingaccounttrxset
          where
               related_rollup_statement_id=in_action_object_id;

          --Commented this code to make this as a custom call.
          --v_noic_due_date :=  pkg_db_functions.fn_get_noic_due_date(in_session_id,in_transaction_id,in_action_object_id);
          v_noic_due_date :=  pkg_cs_db_functions.fn_get_noic_due_date(in_session_id,in_transaction_id,v_billingaccounttrxset_id);
          --/OSBILLING-4900
          /*
          pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    pkg_db_object.gbv_BillAccTrxSet_NOICDuedate,
                    v_noic_due_date
               );
          */ --UTPRODUCT-1740 - Commented as its a calculated BV, cannot set its value

      end if;
      --io_action_outcome_id     :=   pkg_os_constant.gOutcome_OK;

end sp_account_rollup_stmt;

-------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_update_rollup_custom
--
--
--   %USAGE
--        Set BVs which are transaction specific.
--
--   %ALGORITHM
--
--
--   %PARAM    in_session_id                 session ID
--   %PARAM    in_transaction_id             transaction ID
--   %PARAM    in_recon_rollup_id            rollup object id
--   %PARAM    in_trx_type                   transaction type

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_update_rollup_custom
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_recon_rollup_id       in             object.object_id%type,
     in_trx_type              in             db_transaction_set_type.db_trxset_enum%type default null
)
is

     v_procedure_name         constant  system_log.program_name%type := pkg_name||'sp_update_rollup_custom';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

     if NVL(in_trx_type,0) in ( pkg_db_stmt.gBatch_ManualCashApply,pkg_db_stmt.gBatch_AutoCashApply,pkg_db_stmt.gBatchType_SinglePay,pkg_db_stmt.gBatch_CashTransferBatch)
     then

         if v_session_control.gLogging_Full
         then

             pkg_os_logging.sp_log
             (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                ' rollup id '||in_recon_rollup_id
                || 'in_trx_type :'||in_trx_type

             );

          end if;

          pkg_os_object_io.sp_object_bv_set
          (
             in_session_id,
             in_transaction_id,
             in_recon_rollup_id,
             pkg_os_constant_bv.gbv_GenObjObjectState,
             pkg_db_cash_apply.gRollupStatus_Matched
          );

   end if;

end sp_update_rollup_custom;

------------------------------------------------------------------------------------------------------------------------------------------
begin

    sp_load_db_trx_recon_map_cache(0,0);
    sp_load_db_recon_cache(0,0);
    sp_load_db_trx_set_type_cache(0,0);

end PKG_DB_STMT_ACCT_ROLLUP;
/
