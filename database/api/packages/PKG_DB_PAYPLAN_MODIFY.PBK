create or replace package body PKG_DB_PAYPLAN_MODIFY
-------------
-- $Workfile:   BASE_API.PKG_DB_PAYPLAN_MODIFY.PBK  $
-- $Revision:   1.31  $
--   $Author:   hdalal  $
--     $Date:   07 Feb 2014 15:28:26  $
-------------
as

     g_payer_list                       PKG_DB_MULTIPAYER.t_payer_tab;         -- #MP. Cached payer list. Used to pass list from procedure to procedure in a single call stack.
     g_policy_payer_tab                 pkg_db_multipayer.t_policy_payer_tab;  -- #MP. Cached list of payers for a policy. Indexed by policy ID.


    --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_modify_plan_md_row              getPaymentPlanList%rowtype;--OSPRffODUCT-3108
     v_splt_billing_flag                     object_bv_value.business_variable_value%type := gBooleanFalse;
    --OSBILLING-3833 - Merged GCNA code in BaseDEV. End


   --  If call stack is built on MD level - a chain of actions - we can not use
     COVERAGE_NOT_BALANCED EXCEPTION; --OSBILLING-6800
     PRAGMA EXCEPTION_INIT(COVERAGE_NOT_BALANCED, -68001);  --OSBILLING-6800
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   PRIVATE PROCEDURES & FUNCTIONS
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_determine_first_installment
(
     in_session_id                 in object.object_id%type,
     in_transaction_id             in object.object_id%type,
     in_policy_image_id            in object.object_id%type,
     in_policy_trx_id              in object.object_id%type,
     in_payment_plan_id            in object.object_id%type,
     in_policy_trx_effective_date  in date,
     in_is_a_new_term              in number,
     in_current_date_time          in date,
     io_start_installment_number   in out number,
     io_stub_payment_id            in out object.object_id%type,
     io_transaction_spread_tf      in out  char, -- OSBILLING-3689,
     io_transaction_amnt_next_nid  in out  char, -- OSBILLING-4232
     in_modify_payplan             in number default 2,
     in_override_payplan_id        in number default null, -- OSBILLING-6727
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type --OSPRODUCT-15833
);

-----------------------------------------------------------------------------------------------------------------------------------------------------
/*
procedure sp_populate_plan_anew
(
     in_session_id                in  object.object_id%type,
     in_transaction_id            in  object.object_id%type,
     in_policy_image_id           in  object.object_id%type,
     in_policy_transaction_id     in  object.object_id%type,
     in_payment_plan_id           in  object.object_id%type,
     in_policy_trx_effective_date in  date,
     in_next_installment_date     in  date,
     in_overridden_plan_md_row    in  getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_start_installment_number  in  number
);

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_allocate_installment_amts
(
     in_session_id                in object.object_id%type,
     in_transaction_id            in object.object_id%type,
     in_policy_image_id           in object.object_id%type,
     in_policy_trx_id             in object.object_id%type,
     in_payment_plan_id           in object.object_id%type,
     in_policy_trx_effective_date in date,
     in_is_a_new_term             in number,
     in_current_date_time         in date,
     in_start_installment_number  in number,
     in_stub_payment_id           in object.object_id%type,
     in_modifying_payment_plan    in number,
     in_transaction_spread_tf     in char,
     in_overridden_plan_md_row    in getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_amount_to_next_nid_tf           in             char -- OSBILLING-4232
);
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_schedule_elements_create
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_policy_trx_date                 in        date,
     in_payment_plan_id                 in        object.object_id%type,
     in_start_installment_number        in        number,
     in_current_stub_id                 in        object.object_id%type,
     in_product_id                      in        pd_product.pd_product_id%type,
     in_filing_id                       in        pd_filing.pd_filing_id%type,
     in_billing_element_id              in        db_billing_element.db_billing_element_id%type,
     in_coverage_object_id              in        object.object_id%type,
     in_modifying_payment_plan          in        number,
     in_payment_plan_md_row             in        getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_md_split_method                 in        db_payment_plan_detail.element_split_method%type,
     in_split_installment_count         in        db_payment_plan_detail.element_installment_count%type,
     in_split_element_rounding          in        db_payment_plan_detail.element_rounding%type,
     in_split_adjustment_type           in        db_payment_plan_detail.adjustment_type%type,
     in_md_spread_overridable_tf        in        db_payment_plan_detail.transaction_spread_override_tf%type, -- OSBILLING-3689
     in_transaction_spread_tf           in        char, -- OSBILLING-3689
     in_split_billing_flag              in        char,
     in_amount_to_next_nid_tf           in        char, -- OSBILLING-4232
     in_rounding_precision              in        number default 5,
     in_change_payer_tf                 in        char default 'F', --VAULTDDEV-6645
     in_old_payer_tf                    in        char default 'F'
);

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_schedule_element_create
(
     in_session_id                 in object.object_id%type,
     in_transaction_id             in object.object_id%type,
     in_policy_transaction_id      in object.object_id%type,
     in_scheduled_payment_id       in object.object_id%type,
     in_coverage_object_id         in object.object_id%type,
     in_billing_element_md_row     in db_billing_element%rowtype,
     in_element_amount             in float,
     in_split_billing_flag         in char,
      in_old_payer_tf                    in        char default 'F'
);*/
-----------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   Open Items:
--
--   What happens if we generate the payment plans etc. but do not bind. Since the current date + time is critical to the calculations, we need to
--   ensure that we store and check the current date when 'processing' the transaction. Perhaps stick the current date onto the PaymentPlan object?
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure show_version
is
begin
     dbms_output.put_line ('$Workfile:   BASE_API.PKG_DB_PAYPLAN_MODIFY.PBK  $');
     dbms_output.put_line ('$Revision:   1.31  $');
     dbms_output.put_line ('$Author:   fbraganza  $');
     dbms_output.put_line ('$Date:   07 Feb 2014 15:22:26  $');
exception

     when others
     then
          dbms_output.put_line (sqlerrm (sqlcode));

end show_version;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_trx_starts_new_term
--
--   %USAGE
--        Given a policy transaction type, return whether the type creates/initiates a new policy term ...
--
--   %ALGORITHM
--        @@@VG: Note that this should really be sitting as column in the PD_TRANSACTION_TYPE metadata table. Also, this function should be moved to PKG_OS_TRANSACTION_TYPE.
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_trx_starts_new_term
(
     in_transaction_type_id   in pd_transaction_type.pd_transaction_type_id%type

) return number
is

begin

     if in_transaction_type_id is null then

          raise no_data_found;

     elsif   in_transaction_type_id in
          (
               pkg_os_policy_transaction.gPolicyTrxType_Renewal,
               pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,
               pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,
               pkg_os_policy_transaction.gPolicyTrxType_Reissue,
               pkg_os_policy_transaction.gPolicyTrxType_Rewrite
          )
     then
          return pkg_os_constant.gBoolean_True;
     else
          return pkg_os_constant.gBoolean_False;

     end if;

end fn_trx_starts_new_term;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_withdrawal_date
--
--   %USAGE
--        Given Policy Image Id and Installment number, get the corresponding withdrawal date.
--
--   %ALGORITHM
--          Embedded in procedure documentation below.
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_withdrawal_date
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_installment_number              in        integer default 1

) return date

is
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'fn_get_withdrawal_date';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_withdrawal_date                  date;
     v_chosen_payment_plan              object.object_id%type := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, 212021 ); -- 212021
     v_payplan_sch_pay_list             pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_installment_number               integer;
     v_src_indx                         number;

begin

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.......... Getting withdrawal date.. '||
               ' in_policy_image_id: ' || in_policy_image_id ||
               ', in_installment_number: ' || in_installment_number ||
               ', v_chosen_payment_plan: ' || v_chosen_payment_plan
          );
     end if;

     if in_policy_image_id is null then
          -- log_error here
          v_withdrawal_date := null;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......... in_policy_image_id is null. '||
                    ' in_policy_image_id: ' || in_policy_image_id
               );
          end if;

     elsif v_chosen_payment_plan is null then

          -- log_error here
          v_withdrawal_date := null;

          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '........ v_chosen_payment_plan is null. '||
                    ' v_chosen_payment_plan: ' || v_chosen_payment_plan
               );
          end if;

     else
          --
          -- Get chilren of Chosen Payment plan
          --
          v_payplan_sch_pay_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_chosen_payment_plan,
                    2297206,
                    v_payplan_sch_pay_list

               );

          --
          -- Loop all Payment Plan Scheduled Payments objects, childer of Chosen Payment Plan
          -- Return the Withdrawal Date of the Schedule having given installment number.
          --

          if (v_payplan_sch_pay_list.count > 0) then

               v_src_indx := v_payplan_sch_pay_list.first;

               while v_src_indx is not null loop

                    v_installment_number := pkg_os_object_io.fn_object_bv_get(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payplan_sch_pay_list(v_src_indx),
                                                  29107006 );

                    if v_session_control.gLogging_Full then
                        pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' ................ in_policy_image_id: '|| in_policy_image_id ||
                              ', in_installment_number: ' || in_installment_number ||
                              ', v_installment_number: '  || v_installment_number ||
                              ', v_chosen_payment_plan: ' || v_chosen_payment_plan ||
                              ', v_payplan_sch_pay_list(v_src_indx)' || v_payplan_sch_pay_list(v_src_indx)

                         );
                    end if;

                    if(v_installment_number = in_installment_number) then
                         v_withdrawal_date := to_date ( pkg_os_object_io.fn_object_bv_get(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payplan_sch_pay_list(v_src_indx),
                                                  32178546 ), pkg_os_constant.DragonDateFormatDefault);

                         if v_session_control.gLogging_Full then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' ........................ Found v_withdrawal_date: '|| v_withdrawal_date ||
                                   ', at v_installment_number: ' || v_installment_number
                              );
                         end if;

                         -- exit from loop
                         -- exit; / break;
                    end if;

                    v_src_indx := v_payplan_sch_pay_list.next(v_src_indx);

               end loop;

          end if;

     end if;

     return v_withdrawal_date;

end fn_get_withdrawal_date;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_next_withdrawal_date
--
--   %USAGE
--        Given billing due date, and the preferred payment day of month, get the corresponding withdrawal date.
--
--   %ALGORITHM
--          Embedded in procedure documentation below.
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_next_withdrawal_date
(
     in_session_id                      in      object.object_id%type,
     in_transaction_id                  in      object.object_id%type,
     in_theoretical_due_date            in      date,
     in_preferred_withdrawal_day        in      integer,
     in_policy_image_id                 in      object.object_id%type default null  --OSBILLING-7265

) return date

is
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'fn_get_next_withdrawal_date';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_current_withdrawal_date          date;
     v_february_adjustment              integer := 0;
     v_product_id                       object.object_id%type := null;  --OSBILLING-7265
     v_filing_id                        object.object_id%type := null;  --OSBILLING-7265

begin

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
         (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           ' ...... Entering: '||in_theoretical_due_date
         );

     end if;

      --OSBILLING-7265 start
     If in_policy_image_id is not null then
          v_product_id             :=   pkg_os_product.fn_object_product_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id
                                        );

          v_filing_id              :=   pkg_os_product.fn_policy_filing_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             v_product_id
                                        );
     end if;
     --OSBILLING-7265 end

     if nvl(in_preferred_withdrawal_day, 0) not between 1 and 31
     then -- PMADEV-1304
          v_current_withdrawal_date := null; ---in_theoretical_due_date;
          if v_session_control.gLogging_Full then
                        pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' ......... in preferred withdrawal day is null or 0'
                         );

                    end if;
     else
          --
        --  Start by substituting the preferred payment day onto the month and year of the billing due date. If the resulting date is in the future,
          --   we are done. Otherwise, go to the next month.
          --
          --   If the preferred date is 31st, we might have to go backwards a few times (esp february) to get a legal date.
          --
if v_session_control.gLogging_Full then
                        pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' ......... in preferred withdrawal day 1-31'
                         );

                    end if;
          while v_current_withdrawal_date is null loop

               begin

                    v_current_withdrawal_date := to_date( lpad(in_preferred_withdrawal_day - v_february_adjustment, 2, '0')||to_char(in_theoretical_due_date, 'MMYYYY'), 'DDMMYYYY' );

                    if v_session_control.gLogging_Full then
                        pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' ......... Current Theoretical Due Date: '||in_theoretical_due_date||
                              ', Corresponding Withdrawal Date: '||v_current_withdrawal_date
                         );

                    end if;

               exception

                    when others then

                         v_february_adjustment := v_february_adjustment + 1;

                         if v_session_control.gLogging_Full then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' ............ Calculating February adjustment. Adjustment is: '|| v_february_adjustment
                              );
                         end if;
                         If v_february_adjustment > 3  then
                           raise; --OSBILLING-7025
                         End if;
               end;

          end loop;


          --if v_current_withdrawal_date >= to_date(to_char(in_theoretical_due_date,'DDMMYYYY'),'DDMMYYYY') then

          -- OSBILLING-5469 - Added 'equal' to condition.
          --if v_current_withdrawal_date > in_theoretical_due_date
          if (nvl(pkg_os_product.fn_product_property_get(nvl(v_product_id,0), nvl(v_filing_id,0), gBilling_WdrwlDateByndDueDate),'T') = 'F'  --OSBILLING-7265  --OSPRODUCT-1992
          or v_current_withdrawal_date >= to_date(to_char(in_theoretical_due_date,'DDMMYYYY'),'DDMMYYYY'))
          and trunc(v_current_withdrawal_date) >= trunc(sysdate)  --OSPRODUCT-3295
          then

               return v_current_withdrawal_date;

          else

               -- @@@ How are we going to handle non-linear payment plans? Not sure they are going to be different, but this is clearly saying that we'll up
               -- the date by a month.

               v_current_withdrawal_date := null;
               v_february_adjustment := 0;

               while v_current_withdrawal_date is null loop

                    begin

                         if to_char(in_theoretical_due_date,'DD') = in_preferred_withdrawal_day then
                              v_current_withdrawal_date := to_date( lpad(in_preferred_withdrawal_day - v_february_adjustment, 2, '0')||to_char(add_months(in_theoretical_due_date, 0), 'MMYYYY'), 'DDMMYYYY' );
                         else
                              v_current_withdrawal_date := to_date( lpad(in_preferred_withdrawal_day - v_february_adjustment, 2, '0')||to_char(add_months(in_theoretical_due_date, 1), 'MMYYYY'), 'DDMMYYYY' );
                         end if;

                         if v_session_control.gLogging_Full then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' ......... Current Theoretical Due Date: '||in_theoretical_due_date||
                                   ' Corresponding Withdrawal Date: '||v_current_withdrawal_date||
                                   ' Month Length Adjustment:'|| v_february_adjustment
                              );
                         end if;
                    exception
                         when others then
                              v_february_adjustment := v_february_adjustment + 1;
                              If v_february_adjustment > 3  then
                                raise; --OSBILLING-7025
                              End if;
                    end;

               end loop;
          end if;

     end if;

     return v_current_withdrawal_date;

end fn_get_next_withdrawal_date;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_payment_plan_row
--
--   %USAGE
--        This function returns the row from payment_plan for a given payment plan id
--
--   %ALGORITHM
--        1. If input Payment Plan MD ID is null, then
--             return null
--        2. Else
--             Fetch the row from Payment Plan table and populate Payment Plan Cache for the given Payment Plan MD ID
--        3. Return  row
--
--        @@@VG: Need to cache payment plan metadata ...
--
--   %PARAM    in_payment_plan_id                 Payment Plan ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payment_plan_row
(
     in_payment_plan_id     in     payment_plan.payment_plan_id%type
)
return getPaymentPlanList%rowtype--OSPRODUCT-3108
is

begin

     if in_payment_plan_id is null
     then

          return null;

     else

          select
               pp.payment_plan_id,
               nvl(ppt.payment_plan_timing_type_id, pp.payment_plan_type_id) payment_plan_type_id,
               pp.payment_plan_name,
               nvl(ppt.pd_term_id, pp.payment_term_months) payment_term_months,
               nvl(ppt.min_down_payment_pct, pp.min_down_payment_pct) min_down_payment_pct,
               pp.new_business_tf,
               pp.renewal_tf,
               nvl(ppt.num_of_installments, pp.num_instalments) num_instalments,--OSPRODUCT-3108
               pp.first_payment_grace_period_day,
               pp.installment_grace_period_days,
               pp.linear_installment_premium_pct,
               pp.linear_installment_interval,
               pp.linear_installment_units_id,
               nvl(ppt.nonlinear_payment_fla, pp.nonlinear_payment_fla) nonlinear_payment_fla,
               nvl(ppt.nonlinear_interval_fla, pp.nonlinear_interval_fla) nonlinear_interval_fla,
               pp.payment_date_adjustment_fla,
               pp.payment_plan_notes,
               pp.installment_fee,
               pp.restriction_rule_id,
               pp.surcharge_rule_id,
               pp.payment_plan_code,
               pp.alr_code,
               --pp.carrier_id,
               pp.pd_product_id,
               pp.pd_transaction_set_id,
               pp.pd_term_id,
               pp.installment_fee_variable_path,
               pp.installment_fee_expression_id,
               pp.availability_rule_id,
               pp.mandatory_rule_id,
               pp.availability_effective_date,
               pp.availability_expiration_date,
               pp.active_tf,
               pp.display_order,
               pp.default_tf,
               pp.default_rule_id,
               pp.last_pd_filing_id,
               pp.spread_policy_fee_tf,
               pp.pd_filing_id,
               pp.premium_variable_path,
               pp.premium_expression_id,
               pp.down_payment_offset_days,
               pp.other_payment_offset_days,
               pp.installments_on_anniversary_tf,
               pp.stub_payment_offset_time,
               pp.down_payment_offset_units,
               pp.inst_payment_offset_units,
               pp.stub_payment_offset_units,
               pp.stub_payment_offset_rule,
               nvl(ppt.stub_create_tf, pp.stub_create_tf) stub_create_tf,
               pp.next_install_offset_time,
               pp.nonlinear_interval_fla_units,
               pp.instal_anniversary_date_tf,
               pp.extend_payment_schedule_tf,
               pp.spread_tf,
               pp.next_nid_threshold_days,
               pp.spread_rule_tf,
               pp.next_nid_threshold_amnt,
               pp.set_stub_due_date_rule_id,
               pp.stub_creation_rule_id,
               pp.db_payer_type_set_id,
               pp.payment_plan_timing_id,
               pp.program_set_id -- OSPRODUCT-1839 
          into
               payment_plan_tab(in_payment_plan_id)
          from
               payment_plan pp, payment_plan_timing ppt
          where
               pp.payment_plan_timing_id = ppt.payment_plan_timing_id (+)
          and
               payment_plan_id = in_payment_plan_id
          ;

     end if;

     return payment_plan_tab(in_payment_plan_id);

end fn_payment_plan_row;

------------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payment_schedule_update
--
--   %USAGE
--        Entrypoint used when we want to reflect changes made to the financial position of a policy carried out by a policy
--        transaction such as an endorsement.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--   %PARAM    io_action_outcome_id                The outcome of this action - currently the outcome is always OK.
--   %PARAM    in_current_date_time                Placeholder for future multi-timezeone and advance date support.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

--MPKR
procedure sp_payment_schedule_update
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_current_date_time               in             date default trunc(sysdate),
     in_payer_entity_id                 in             object.object_id%type default null, -- #MP
     in_new_term          in number default null --OSBILLING-7005
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payment_schedule_update';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_transaction_id            object.object_id%type;
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type;
     v_current_payment_plan_id          object.object_id%type;
     v_new_term                         number;

     -- #MP
     v_idx                              long;
     v_ptp_payer_list                   PKG_DB_MULTIPAYER.t_payer_tab;
     --
     v_current_date_time                date;  --OSBILLING-7831
     v_current_payer_date_time          date; -- UTPRODUCT-3925															   
begin
     g_payer_list.delete;     --OSBILLING-5733
     g_policy_payer_tab.delete;      --OSBILLING-5733

    v_policy_transaction_id       :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
    v_transaction_type_id         :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );


     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '||||||'
               ||' Updating the payment schedule for Policy Image ID: '||in_policy_image_id
               ||' Policy Transaction ID: '||v_policy_transaction_id
               ||' Policy Transaction Type: '||pkg_os_lookup.fn_lookup_list_text_get(PolicyTransactionTypeList, v_transaction_type_id)
          );

     end if;

     -- #MP
     --

     --  get list of payers from Policy Image level
     --
     PKG_DB_MULTIPAYER.sp_ptp_payers_cache_get
     (
          in_session_id         => in_session_id,
          in_transaction_id     => in_transaction_id,
          io_cached_payer_lists => g_policy_payer_tab,
          in_ptp_object_id      => in_policy_image_id,
          io_payer_list         => v_ptp_payer_list,
          in_print_list         => 'Y', --VAULTDDEV-6645
          in_index_by           => pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr  -- indexed by payer entity ID. This is important as far as we pass entity payer ID to this routine to identify the payer in question
     );


     -- Check if only one payer should be processed, if so, shrink the list to have only current payer
     --
     if in_payer_entity_id is not null
     then
          -- shrink payer list and leave only one current payer
          --
          pkg_db_multipayer.sp_payer_list_shrink
          (
               in_session_id,
               in_transaction_id,


               in_related_id      => in_payer_entity_id,
               io_payer_list      => v_ptp_payer_list
          );
     else
          null; -- process all payers.
     end if;

     --OSBILLING-7831
     v_current_date_time := nvl(
                                    pkg_db_functions.fn_get_processed_date
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_policy_image_id
                                    ), trunc(in_current_date_time)
                               );

     v_policy_transaction_id       :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
     v_transaction_type_id         :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );

     v_idx := v_ptp_payer_list.first;  --#MP
     while v_idx is not null           --#MP
     loop
          --
          --   Get the current payment plan object ...
          --
               --UTPRODUCT-3925                          
          if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
          then
          --OSPRODUCT-11954
               if v_ptp_payer_list(v_idx).PTPayer_object_id is not null 
               then
                    v_current_date_time   := nvl( to_date(pkg_os_object_io.fn_object_bv_get
                                                             (
                                                                  in_session_id,
                                                                  in_transaction_id,
                                                                 v_ptp_payer_list(v_idx).PTPayer_object_id,
                                                                 pkg_db_constant.gbv_payer_process_date
                                                             ),pkg_os_constant.DragonDateFormatDefault) ,trunc(in_current_date_time));  

                        /* if v_current_payer_date_time is not null
                         then
                            v_current_date_time :=  v_current_payer_date_time;
                    end if;  
                    */
                 end if;
      --OSPRODUCT-11954
                                                                          
               end if;  
               
          v_current_payment_plan_id     :=   v_ptp_payer_list(v_idx).chosen_payment_plan; -- #MP
                                           --  pkg_os_object_io.fn_object_bv_get
                                           --  (
                                           --       in_session_id,
                                           --       in_transaction_id,
                                           --       in_policy_image_id,
                                           --       gbv_PolicyRefChosenPlan
                                           --  );

     --
     --   Proceed with Schedule Generation only if we have the current payment plan
     --

     if v_current_payment_plan_id is not null then

               --OSBILLING-7005
               if in_new_term is not null then
                  v_new_term :=in_new_term;
               else

                  v_new_term := fn_trx_starts_new_term(v_transaction_type_id);

               end if;
               --OSBILLING-7831 start
               /*sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_new_term,
                    v_current_payment_plan_id,
                    trunc(in_current_date_time),
                    null
               );*/

               sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_new_term,
                    v_current_payment_plan_id,
                    v_current_date_time,
                    null,
                    io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
               );
               --OSBILLING-7831 end


     else

          --
          --  Skip the Payment Schedule Generation ...
          --

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '... Skipped the Payment Schedule Generation as Current Payment Plan reference is NULL ...'

          );

     end if;




          v_idx := v_ptp_payer_list.next(v_idx); --#MP

     end loop; -- /loop PTP payers               --#MP

     if io_action_outcome_id in ( gOutcome_SprdPremCrteStubF ) then 
             
        null; --  No Action required, continue with current outcome. -- OSPRODUCT-15833
        
     else 
        
        io_action_outcome_id := pkg_os_constant.gOutcome_OK; -- OSPRODUCT-15833
     
     end if; 
     
     
end sp_payment_schedule_update;
------------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payment_mod_sched_generate
--
--   %USAGE
--        Entrypoint used when the user wants to change the payment plan in the middle of a policy-term, or on renewal/rewrite/etc.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--   %PARAM    io_action_outcome_id                The outcome of this action - currently the outcome is always OK.
--   %PARAM    in_current_date_time                Placeholder for future multi-timezeone and advance date support.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_payment_mod_sched_generate
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_current_date_time               in             date,
     in_next_installment_date               in               date
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payment_mod_sched_generate';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_transaction_id            object.object_id%type;
     v_mod_payment_plan_id              object.object_id%type;
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
   v_payment_plan_md_id               payment_plan.payment_plan_id%type;
     v_payment_plan_md_row              getPaymentPlanList%rowtype;--OSPRODUCT-3108
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type;
     v_new_term                         number;

begin

     v_policy_transaction_id     := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
     v_transaction_type_id       := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '||||||'
               ||' Modifying payment schedule for PolicyImageID:'||in_policy_image_id
               ||' Policy Transaction ID:'||v_policy_transaction_id
               ||' PolicyTransactionTypeID:'||v_transaction_type_id
          );

     end if;

     v_new_term := fn_trx_starts_new_term( v_transaction_type_id );

     --
     --  We're modifying a payment plan, so let's find the one the user wants to change to ...
     --

     v_mod_payment_plan_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, gbv_PolicyRefModPayPlan );

     --
     --   We will only generate a payment schedule for the new plan if the user chooses one ...
     --

     if v_mod_payment_plan_id is not null and v_mod_payment_plan_id <> 0
     then

          sp_payment_schedule_generate
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               v_new_term,
               v_mod_payment_plan_id,
               trunc(in_current_date_time),
               in_next_installment_date,
               in_change_payplan => 'T', --VAULTDDEV-6645
               io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
          );

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_payment_mod_sched_generate;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payment_schedule_generate
--
--   %USAGE
--        This procedure is a wrapper for Creating/Adjusting ScheduledPayment and ScheduledPaymentElements Objects for the specified payment plan.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
--   OSBILLING-7442
--   %PARAM    in_override_payplan_id              Override Payplan ID -
--   Decription :  Purpose to interduce this parameter to populate the payment plan for a specified payment plan along with chosen payment plan.
--   The Requirement was documented to allocate the premium into 12 payment plan so that monthly receivables can be determined along with
--   chosen payment plan.
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-15833
procedure sp_payment_schedule_generate
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     in_is_a_new_term                   in             number,
     in_payment_plan_id                 in             object.object_id%type,
     in_current_date_time               in             date,
     in_next_installment_date           in             date,
     in_retain_existing_plan            in             boolean default false,
     in_override_payplan_id             in             object.object_id%type   default null,  -- DDWIDEV-222
     in_change_payplan                  in             char default 'F' --VAULTDDEV-6645
) as

     v_action_outcome_id               outcome.outcome_id%type;   --OSPRODUCT-15833

begin
     
    sp_payment_schedule_generate
    (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          in_is_a_new_term,
          in_payment_plan_id,
          in_current_date_time,
          in_next_installment_date,
          in_retain_existing_plan,
          in_override_payplan_id, 
          in_change_payplan,
          v_action_outcome_id 
     );
     
end sp_payment_schedule_generate; 
-- OSPRODUCT-15833
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payment_schedule_generate
--
--   %USAGE
--        This procedure is a wrapper for Creating/Adjusting ScheduledPayment and ScheduledPaymentElements Objects for the specified payment plan.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
--   OSBILLING-7442
--   %PARAM    in_override_payplan_id              Override Payplan ID -
--   Decription :  Purpose to interduce this parameter to populate the payment plan for a specified payment plan along with chosen payment plan.
--   The Requirement was documented to allocate the premium into 12 payment plan so that monthly receivables can be determined along with
--   chosen payment plan.
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_payment_schedule_generate
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     in_is_a_new_term                   in             number,
     in_payment_plan_id                 in             object.object_id%type,
     in_current_date_time               in             date,
     in_next_installment_date           in             date,
     in_retain_existing_plan            in             boolean default false,
     in_override_payplan_id             in             object.object_id%type   default null,  -- DDWIDEV-222
     in_change_payplan                  in             char default 'F', --VAULTDDEV-6645
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type   --OSPRODUCT-15833
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payment_schedule_generate';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_start_installment_number         number := 1;
     v_stub_payment_id                  object.object_id%type;
     v_policy_trx_effective_date        date;
     v_policy_transaction_id            object.object_id%type;
     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;

     v_existing_payment_count           number := 0;

     v_current_payment_plan_id          object.object_id%type;
     v_payment_plan_id                  object.object_id%type;
     v_modified_payment_plan_id         object.object_id%type;
     v_modifying_payment_plan           number;
     v_first_payment_schedule_id        object.object_id%type;
     v_first_payment_schedule_amt       number;

     v_current_payment_id               object.object_id%type;
     v_scheduled_payment_index          number;
     v_installment_number               number;

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntschelement_list             pkg_os_object.t_object_list;--UTXPRODUCT-426
     
     v_transaction_spread_tf            char(1) := 'F'; -- OSBILLING-3689
     v_next_instal_flag                 char := 'T';
     v_payment_plan_md_id               payment_plan.payment_plan_id%type;
     v_payment_plan_md_row              getPaymentPlanList%rowtype;--OSPRODUCT-3108
     v_overridden_plan_md_row           getPaymentPlanList%rowtype;--OSPRODUCT-3108
     v_amount_to_next_nid_tf            char(1) := 'F' ; -- OSBILLING-4232

     v_deferred_stub_list               pkg_os_object.t_object_list;
     v_deferred_stub_index              number;
     v_installment_type                 number;
     v_stub_number                      number;
     v_deferred_prem_stub_id            object.object_id%type;
     v_ref_basis_transaction            object.object_id%type;
     v_payplan_id_basis_coverage        object.object_id%type;
     v_product_id                     pd_product.pd_product_id%type;

     -- VAULTDEV-1856. Multipayer. #MP.
     --
     v_PolicyMultiPayerEnabled          boolean;
     v_idx                              long; -- binary_integer;
     --  /VAULTDEV-1856. Multipayer.
     v_policy_billed_to                 object_bv_value.business_variable_value%type;
     v_policy_term_id                   object.object_id%type;

     --OSPRODUCT-2424 start
     v_current_payer                    object.object_id%type;         
     v_chosen_payment_plan              object.object_id%type;
     --OSPRODUCT-2424 end
     -- OSPRODUCT-3663
     v_Payment_Amount_Total             number:=0;
     v_down_payment_amount              number:=0;
     v_use_existing_schedule            object.object_id%type;
     v_installment_no                   float;
     v_policy_image_eff_date              date ; -- KR CR
     v_start_of_the_term                number:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id , gbv_ptp_cpp_term_start_ind);
     v_term_id                          object.object_id%type;--OSPRODUCT-21350
     v_term_withdrawal_date             object.object_id%type;--OSPRODUCT-21350

begin
     
     g_payer_list.delete;     --OSBILLING-5733
     g_policy_payer_tab.delete;      --OSBILLING-5733

     -- OSBILLING-4920
     v_product_id := pkg_os_product.fn_object_product_get
                     (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id
                     );
                     
     --OSPRODUCT-1113                     
     v_PolicyMultiPayerEnabled := pkg_db_multipayer.fn_multipayer_mode_tf
                                  (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_image_id
                                  );
                     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Payment Plan: '   || in_payment_plan_id ||
               ' Change Pay Plan: '|| in_change_payplan 
          );
     end if;

     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  If we don't have some basic stuff, throw up your arms ...
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     --   Payment Plan ...
     if in_payment_plan_id is null
     then
          
          -- OSPRODUCT-19527
          pkg_os_logging.sp_log_error
          ( 
               in_session_id, 
               in_transaction_id, 
               v_procedure_name, 
               '... Error Trace: ' || dbms_utility.format_error_backtrace || 
               '... Payment Plan not set. Please update the same to proceed.. ' 
          );
		  
          --VAULTDEV-10566
          if v_session_control.gLogging_Full
          then
               
               raise no_data_found; -- Raise the exception
          
          end if;

          return; -- We want to return logging error as payment plan was not passed in
          -- VAULTDEV-10566

     end if;
     
     -- Policy Transaction ID
     v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                                (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_image_id
                                );


     --OSBILLING-4920
     v_ref_basis_transaction := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_policy_transaction_id,
                                     gbv_PolicyTrx_BasisRefTrx
                                );

     v_payplan_id_basis_coverage   := pkg_os_object_io.fn_object_bv_path_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_ref_basis_transaction,
                                             '212318.212021'
                                        );
     if v_policy_transaction_id is null
     then
          
          pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to determine PolicyTransactionID for PolicyImageID:'||in_policy_image_id );
          raise no_data_found;

     end if;

     --Effective Date

     v_policy_trx_effective_date := to_date
     (
          pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_policy_transaction_id,
               pkg_os_constant_bv.gbv_PolicyTranEffectiveDate
          ),
          pkg_os_constant.DragonDateFormatDefault
     );

     if v_policy_trx_effective_date is null
     then

        pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to determine effective date for PolicyImageID:'||in_policy_image_id );
        raise no_data_found;

     end if;

     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id,
                                        pkg_os_constant_bv.gbv_PolicyTranType
                                   );

     v_policy_trx_subtype_id  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id,
                                        gbv_PolicyTrx_SubType
                                   );

     v_term_id :=   pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_transaction_id,
                         gbv_PolicyTrxRefPolicyTerm
                    );--OSPRODUCT-21350
                    
     v_term_withdrawal_date   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_id,
                                        gbv_PolicyTerm_pref_PayDay
                                   ); --OSPRODUCT-21350

     if v_term_withdrawal_date is not null
     then
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Preferred_Pay_Day,
               v_term_withdrawal_date
          );
     end if;--OSPRODUCT-21350

     -- #MP
     -- The sp_ptp_payers_get is not yet cached for user_session and will recalculate payer list every time....
     -- Need to add cache for user session!!!!
     --

      --VAULTDDEV-6645
      if in_change_payplan ='T'
      then
           
           pkg_db_multipayer.sp_ptp_payers_cache_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    io_cached_payer_lists => g_policy_payer_tab,
                    in_ptp_object_id      => in_policy_image_id,
                    io_payer_list         => g_payer_list,
                    in_print_list         => 'Y',
                    in_index_by           => pkg_db_multipayer.g_PayerGet_idx_modifiedPlan  -- indexed by payer entity ID. This is important as far as we pass entity payer ID to this routine to identify the payer in question
               );

      else
           
           pkg_db_multipayer.sp_ptp_payers_cache_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    io_cached_payer_lists => g_policy_payer_tab,
                    in_ptp_object_id      => in_policy_image_id,
                    io_payer_list         => g_payer_list,
                    in_print_list         => 'Y',
                    in_index_by           => pkg_db_multipayer.g_PayerGet_idx_ChosenPlan  -- indexed by payer entity ID. This is important as far as we pass entity payer ID to this routine to identify the payer in question

               );

      end if;
      
      -- VAULTDEV-6645 end
      --  From UI, the sp_payemnt_schedule_generate is been called for each payer individually
      --  at the moment the user chooses a payment plan from a dropdown list.
      --
      --  SO, NO NEED TO LOOP THE PAYERS
      --
      --  The payer in question can be found by chosen payment plan ID as the payer list is indexed by chosen payment plan ID.
      --  The chosen payment plan ID is passed as the in_payment_plan_id. Using it as index...

      if v_PolicyMultiPayerEnabled
      then
           
           v_idx := in_payment_plan_id; -- #MP    -- this is true only for NewBusiness.

           -- This index is incorrect for Endorsement with Pay Plan change for #MP !!!!!
           -- TBD: Endorsement for #MP !!!!!!
      else
           
           v_idx := g_payer_list.first; -- in the Single Payer mode, there is the only member in this list.
      
      end if;

     if in_override_payplan_id is null then  -- DDWIDEV-222
        v_current_payment_plan_id := g_payer_list(v_idx).chosen_payment_plan; -- #MP
     else
        v_current_payment_plan_id := in_override_payplan_id;
     end if;


     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '|||'
               ||' Updating payment schedule for Policy Image ID:'||in_policy_image_id
               ||' Policy Transaction ID:'||v_policy_transaction_id
               ||' Transaction Effective Date:'||v_policy_trx_effective_date
               ||' Current Payment Plan ID:'||v_current_payment_plan_id
               ||' Desired Payment Plan ID:'||in_payment_plan_id
               -- #MP
               ||' MultiPayer Mode is ' || case when v_PolicyMultiPayerEnabled
                                                then 'ON'
                                                else 'OFF'
                                           end
               -- /#MP
          );
     end if;

     --VAULTDDEV-6645
     if in_change_payplan='F'
        -- OSPRODUCT-22032
        or
        (
             in_change_payplan= 'T'
             and
             in_is_a_new_term = pkg_os_constant.gBoolean_True
        )
        -- end OSPRODUCT-22032
     then
          --
          --   Either I'm generating a payment plan for the first time, or I have not changed the payment plan ...
          --

          v_modifying_payment_plan := pkg_os_constant.gBoolean_False;
     else
          v_modifying_payment_plan := pkg_os_constant.gBoolean_True;
     end if;
     
     -- UTPRODUCT-4119
     sp_reset_scheduled_payments
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          v_policy_transaction_id
     );



     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  If this is a new term, delete any scheduled payments ... otherwise cache scheduled payment information for reuse.
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     if in_is_a_new_term = pkg_os_constant.gBoolean_True
     then

          --
          --   Get rid of any existing crud related to payments ...
          --

          if in_retain_existing_plan
          then

               --
               --   This covers the case when a policy image is made by legacy conversion, and we must not delete the objects in question because they represent the state
               --   of the payment plan in the source system, and because they have references to other legacy objects which are necessary for building the remainder of the
               --   OSB object-tree.
               --

               sp_load_sched_payment_cache
               (
                    in_session_id,
                    in_transaction_id,
                    in_payment_plan_id,
                    v_existing_payment_count
               );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...'
                         ||' Retained existing schedule (typically conversion) ...  : '||v_existing_payment_count
                    );

               end if;

          else

               --
               --   Get rid of all payments associated with the prior-term from which this policy image was copied ...
               --

               sp_purge_scheduled_payments
               (
                    in_session_id,
                    in_transaction_id,
                    in_payment_plan_id,
                    v_existing_payment_count
               );


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...'
                         ||' Purged existing schedule ...  : '||v_existing_payment_count
                    );

               end if;

          end if; -- if not retaining payment plan (conversion) ...

     elsif v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and v_policy_trx_subtype_id = gTrxSubType_BillMethodChange
     then

          --
          --  Since, we are changing the Billing Method, we need to purge the current schedule
          --  and rereate starting from the unpaid installment number.
          --  So, before deleting the schedule determine the start installment number
          --

          sp_determine_first_installment
          (
              in_session_id,
              in_transaction_id,
              in_policy_image_id,
              v_policy_transaction_id,
              in_payment_plan_id,
              v_policy_trx_effective_date,
              in_is_a_new_term,
              in_current_date_time,
              v_start_installment_number,
              v_stub_payment_id,
              v_transaction_spread_tf,
              v_amount_to_next_nid_tf, -- OSBILLING-4232
              v_modifying_payment_plan,
              in_override_payplan_id, -- OSBILLING-6727
              io_action_outcome_id     -- OSPRODUCT-15833
          );

          --
          --   Now, get rid of all payments associated with the previous policy image from which this policy image was copied ...
          --

          sp_purge_scheduled_payments
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_existing_payment_count
          );


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' Purged existing schedule ...  : '||v_existing_payment_count
               );

          end if;

     sp_recreate_deferred_stubs
          (
             in_session_id,
             in_transaction_id,
             v_payplan_id_basis_coverage,
             in_payment_plan_id
          );
     else

          --OSPRODUCT-2424 start
          if 
               nvl
               (
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id,
                         pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                     ),
                     pkg_db_multipayer.genum_No
               ) = pkg_db_multipayer.genum_Yes
          then
               v_current_payer := pkg_os_object.fn_object_parent_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_payment_plan_id
                                  );
               
               v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_current_payer,
                                             pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                        );
               --
               --   Get rid of all payments associated with the prior-term from which this policy image was copied ...
               --
               
               if v_policy_trx_type_id = gTrxType_Endorse and v_current_payment_plan_id <> in_payment_plan_id then  --OSPRODUCT-4183

                    sp_purge_scheduled_payments
                    (
                         in_session_id,
                         in_transaction_id,
                         in_payment_plan_id,
                         v_existing_payment_count
                    );
               end if;
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...'
                         ||' Purged existing schedule ...  : '||v_existing_payment_count
                    );

               end if;

          end if;
          --OSPRODUCT-2424 end

          sp_load_sched_payment_cache
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_existing_payment_count
          );

           pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               gObjType_ScheduledPayment,
               v_pymntsch_list
          );
          --
          --   Get rid of unused stubs ...
          --

          sp_purge_outdated_stubs
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id
          );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' Not a new term, reusing Existing Payment Schedule, Payment Count : '||v_existing_payment_count
               );
          end if;

     end if;

     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --   Get metadata associated with the desired plan, and also check whether the user has made any tactical changes to it.
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------


     v_payment_plan_md_id     :=   pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          pkg_os_constant_bv.gbv_PaymentPlanID
     );

     v_payment_plan_md_row   :=   fn_payment_plan_row(v_payment_plan_md_id);

     --
     --   Update certain attributes of the payment plan metadata for this particular transaction based on entries by the client via transactional attributes on the
     --   PTP object ... essentially, this allows the user to make changes to the payment plan metadata via the UI.
     --

     v_overridden_plan_md_row    :=   v_payment_plan_md_row;

     pkg_cs_db_payplan.sp_update_payplan_md
     (
          in_session_id,
          in_transaction_id ,
          in_policy_image_id ,
          v_payment_plan_md_row ,
          v_overridden_plan_md_row,
          v_current_payer -- UTPRODUCT-3925
     );

     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     If we whacked all scheduled payments, or if we found nothing to cache ... we create scheduled payments anew.
     --
     --     Remember, this code can be called for a new transaction, or for a mid-term change in payment plan ... so the 'new' payment plan will not have
     --     a payment schedule associated with it; it will need to be built from scratch.
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

   --OSBILLING-4920
   -- added check for advantage product
     if   v_existing_payment_count = 0
          and
          (    (
                    v_pymntsch_list.count =0
                    and
                    v_start_installment_number is not null
               )
               or
               v_policy_trx_type_id <> pkg_os_policy_transaction.gPolicyTrxType_Endorsement
               or
               v_product_id in (86046,86146)
          )  --OSPRODUCT-21350
     then
          sp_populate_plan_anew
          (
              in_session_id,
              in_transaction_id,
              in_policy_image_id,
              v_policy_transaction_id,
              in_payment_plan_id,
              v_policy_trx_effective_date,
              in_next_installment_date,
              v_overridden_plan_md_row,
              v_start_installment_number
          );

          sp_load_sched_payment_cache
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_existing_payment_count
          );

          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' Loaded/Created payment schedule anew ... Payment Count : '||v_existing_payment_count
               );

          end if;
     end if;


     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Determine the start installment for our payments, and if a stub is needed, create one.
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

    /* sp_determine_first_installment
     (
              in_session_id,
              in_transaction_id,
              in_policy_image_id,
              v_policy_transaction_id,
              in_payment_plan_id,
              v_policy_trx_effective_date,
              in_is_a_new_term,
              in_current_date_time,
              v_start_installment_number,
              v_stub_payment_id,
              v_transaction_spread_tf,
              v_amount_to_next_nid_tf, -- OSBILLING-4232
              v_modifying_payment_plan,
              in_override_payplan_id
              -- OSBILLING-6727
     );*/

  if v_policy_trx_type_id = gTrxType_Endorse and v_current_payment_plan_id <> in_payment_plan_id  -- OSPRODUCT-4819 CR KR
   then
   
   
        -- UTPRODUCT-3925
         v_policy_image_eff_date  :=  fn_actual_effective_date_get
	  
										   
                                      (
                                      in_session_id,
                                      in_transaction_id,
                                      in_policy_image_id,
                                      v_current_payer
                                      );
                                      
          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||'HC: .... For payer : '||v_current_payer
                    ||' Payer effective date'||v_policy_image_eff_date
               );

          end if;          
          
 
     
     --UTPRODUCT-3925 end
          
     -- UTPRODUCT-4819-MP
          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' PTP eff date : '||v_policy_image_eff_date
               );

          end if;
     
        /*sp_determine_first_installment
        (
            in_session_id,
            in_transaction_id,
            in_policy_image_id,
            v_policy_transaction_id,
            in_payment_plan_id,
            v_policy_image_eff_date,
            in_is_a_new_term,
            in_current_date_time,
            v_start_installment_number,
            v_stub_payment_id,
            v_transaction_spread_tf,
            v_amount_to_next_nid_tf, -- OSBILLING-4232
            v_modifying_payment_plan,
            in_override_payplan_id
            -- OSBILLING-6727
        );*/
        if v_start_of_the_term is null   --OSPRODUCT-11403
        then
                sp_determine_first_installment
                (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_policy_transaction_id,
                    in_payment_plan_id,
                    v_policy_trx_effective_date,
                    in_is_a_new_term,
                    in_current_date_time,
                    v_start_installment_number,
                    v_stub_payment_id,
                    v_transaction_spread_tf,
                    v_amount_to_next_nid_tf, -- OSBILLING-4232
                    v_modifying_payment_plan,
                    in_override_payplan_id,  -- OSBILLING-6727
                    io_action_outcome_id     -- OSPRODUCT-15833
                );
         else
               sp_determine_first_installment
                (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_policy_transaction_id,
                    in_payment_plan_id,
                    v_policy_image_eff_date,
                    in_is_a_new_term,
                    in_current_date_time,
                    v_start_installment_number,
                    v_stub_payment_id,
                    v_transaction_spread_tf,
                    v_amount_to_next_nid_tf, -- OSBILLING-4232
                    v_modifying_payment_plan,
                    in_override_payplan_id,  -- OSBILLING-6727
                    io_action_outcome_id     -- OSPRODUCT-15833
                );
         end if;
  else
      sp_determine_first_installment
      (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          v_policy_transaction_id,
          in_payment_plan_id,
          v_policy_trx_effective_date,
          in_is_a_new_term,
          in_current_date_time,
          v_start_installment_number,
          v_stub_payment_id,
          v_transaction_spread_tf,
          v_amount_to_next_nid_tf, -- OSBILLING-4232
          v_modifying_payment_plan,
          in_override_payplan_id,  -- OSBILLING-6727
          io_action_outcome_id     -- OSPRODUCT-15833
      );
  end if; -- CR KR OSPRODUCT-4819 
     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --   Ramrod the desired billing due-date of the first installment, if that is what the caller wants to do ... this is a little weird if we have
     --   more than one installemnt remaining because the due dates of subsequent installments will not reflect the changes we are forcibly making the
     --   due date of the first installment.
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     if in_next_installment_date is not null
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '|||'
                    ||' Imposing Billing Due Date'||in_next_installment_date||' on the next installment : '||v_start_installment_number
               );
           end if;

          --
          --   @@@ Logic explanation?
          --

          if  v_start_installment_number is null and g_payment_cache.count = 1
          then
               -- There is no reason for this kludge - fix the issue upstream.

               raise no_data_found;

               v_start_installment_number    :=   1;

          end if;

          --
          --   Loop through the scheduled payments until we find the first one ...
          --

          v_scheduled_payment_index   := g_payment_cache.first;

          while v_scheduled_payment_index is not null
          loop

               v_current_payment_id   := g_payment_cache(v_scheduled_payment_index);

               v_installment_number := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_current_payment_id,
                    gbv_ScheduledPayment_num
               );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...'
                         ||' Considering installment for setting the first due-date : '||v_installment_number
                    );

               end if;

               if v_installment_number = v_start_installment_number
               then

                    --
                    --     Set the billing due date to that mandated by the caller ...
                    --

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_current_payment_id,
                         gbv_billing_due_date,
                         to_char( in_next_installment_date, pkg_os_constant.DragonDateFormatDefault )
                    );

                    --
                    --     Set the withdrawal due date to that mandated by the caller ... @@@VG this will need to be refined to figure out the 'real' withdrawal date.
                    --


                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_current_payment_id,
                         gbv_billing_withdr_date,
                         to_char( in_next_installment_date, pkg_os_constant.DragonDateFormatDefault )
                    );

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '...'
                              ||' Set the first the first due-date on InstallmentID:'||v_current_payment_id
                         );

                    end if;

                    --
                    --   Since all we needed to to was to set the due date on the first installment, we're done with the loop ...
                    --

                    exit;

               end if;

               v_scheduled_payment_index   := g_payment_cache.next( v_scheduled_payment_index );

          end loop;

     end if; -- if in_next_installment_date is not null


     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Now allocate amounts to each of the relevant installments ...
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     sp_allocate_installment_amts
     (
         in_session_id,
         in_transaction_id,
         in_policy_image_id,
         v_policy_transaction_id,
         in_payment_plan_id,
         v_policy_trx_effective_date,
         in_is_a_new_term,
         in_current_date_time,
         v_start_installment_number,
         v_stub_payment_id,
         v_modifying_payment_plan,
         v_transaction_spread_tf,
         v_overridden_plan_md_row,
         v_amount_to_next_nid_tf    -- OSBILLING-4232
     );

     if (in_is_a_new_term = pkg_os_constant.gBoolean_True
          or
          v_modifying_payment_plan = pkg_os_constant.gBoolean_True ) AND
        v_start_installment_number is not null --OSBilling-6871
     then

          v_first_payment_schedule_id := g_payment_cache(v_start_installment_number); --- @@@VG: We need to retire this damn global!

          v_first_payment_schedule_amt :=    pkg_os_object_io.fn_object_bv_get
                                             (     in_session_id,
                                                  in_transaction_id,
                                                  v_first_payment_schedule_id,
                                                  gbv_invoice_amount_total
                                             );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '|||'
                    ||' First Installment payment schedule ID : '||v_first_payment_schedule_id
                    ||' First Installment payment schedule Amount : '||v_first_payment_schedule_amt
               );
          end if;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               pkg_os_constant_bv.gbv_PaymentPlanDownAmount,
               v_first_payment_schedule_amt
          );
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               gbv_PPDownAmountOverride,
               v_first_payment_schedule_amt
          );--UTXPRODUCT-580

          if v_modifying_payment_plan = pkg_os_constant.gBoolean_True
          then

               v_deferred_stub_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                   in_session_id,
                   in_transaction_id,
                   v_current_payment_plan_id,
                   gObjType_ScheduledPayment,
                   v_deferred_stub_list,
                   pkg_db_billing_modify.gbv_installement_no_calc
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '... Number of PaymentPlanScheduledPayment objects found:'||v_deferred_stub_list.count
                    );

               end if;

               v_deferred_stub_index := v_deferred_stub_list.first;

               while v_deferred_stub_index is not null
               loop

                    v_installment_type  :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_deferred_stub_list(v_deferred_stub_index),
                                                  gbv_scheduled_payment_type
                                             );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '... Considering Scheduled Payment ID: '||v_deferred_stub_list(v_deferred_stub_index)
                             ||', Installment Type: '||v_installment_type
                         );

                    end if;

                    if v_installment_type = gScheduledPayType_Stub
                    then

                         v_stub_number  :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_deferred_stub_list(v_deferred_stub_index),
                                                  gbv_ScheduledPayment_num
                                             );

                         if v_stub_number = 100
                         then

                              pkg_os_object_copy.sp_object_duplicate
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_deferred_stub_list(v_deferred_stub_index),
                                   v_deferred_prem_stub_id,
                                   'F' --OSPRODUCT-7721
                              );

                              pkg_os_object.sp_object_parent_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_deferred_prem_stub_id,
                                   in_payment_plan_id
                              );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                       in_session_id,
                                       in_transaction_id,
                                       v_procedure_name,
                                       '... Created a duplicate Deferred Premium Stub ID :'||v_deferred_prem_stub_id
                                       ||', and set the parent as the modified Payment Plan ID: '||in_payment_plan_id
                                   );

                              end if;

                         end if;

                    end if;

                    v_deferred_stub_index := v_deferred_stub_list.next(v_deferred_stub_index);

               end loop;

          end if;

     end if;

-----------------------

     if pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_stub_payment_id ) is not null
     then
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_stub_payment_id,
               gObjType_ScheduledElement,
               v_pymntschelement_list
          );--UTXPRODUCT-426
     end if;
	 
     -- OSBILLING-4232
     -- If the amount of the stub earned amount should be include din next nid instalment
     -- then delete it
	 --UTPRODUCT-2194----- check if sched balance amt is also 0
     if v_amount_to_next_nid_tf = 'T' and v_pymntschelement_list.count = 0 /*nvl(pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_stub_payment_id,
                                                  gbv_sched_balance_amount
                                             ),0) = 0 */then
        if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Deleting stub id='||v_stub_payment_id
                              ||' gbv_sched_balance_amount is 0'
                         );

        end if;

          pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_stub_payment_id,
               gObjType_ScheduledPayment

          );

     end if;

-- OSBILLING-4232

 --OSBILLING-1798

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gObjType_ScheduledPayment,
          v_pymntsch_list
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '|||'
               ||' Existing Payment Schedule Count : '||v_pymntsch_list.count
          );
     end if;
     
     -- OSPRODUCT-3663
     v_use_existing_schedule := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_image_id,PKG_DB_BILLING_MODIFY.gbv_PTPUseExistingSchedule);
     
     -- OSBILLING-1798

     v_scheduled_payment_index   := v_pymntsch_list.first;

     while v_scheduled_payment_index is not null loop

          v_current_payment_id   := v_pymntsch_list(v_scheduled_payment_index);
          sp_set_balance_amount(in_session_id,in_transaction_id,v_current_payment_id);

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' v_current_payment_id:'||v_current_payment_id
                    ||' v_use_existing_schedule: '|| v_use_existing_schedule
                );

          end if;
     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --  OSPRODUCT-3663
     --  If we are using the existing schedule then we want to include the amounts for each installment to be withdrawn as of the current date
     --  in the down payment amount on the Payment Plan
     -----------------------------------------------------------------------------------------------------------------------------------------------------
          v_installment_no := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_current_payment_id,gbv_ScheduledPayment_num);
          
          If v_use_existing_schedule = 1
          Then
              if v_stub_payment_id is not null 
              then
              v_Payment_Amount_Total := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_stub_payment_id,gbv_sched_balance_amount),0);
              elsif v_installment_no = v_start_installment_number
              then 
              v_Payment_Amount_Total := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_current_payment_id,gbv_sched_balance_amount),0);
              end if;
        
              v_down_payment_amount := v_down_payment_amount + v_Payment_Amount_Total;
              if v_session_control.gLogging_Full
              then
                  pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...'
                    ||' v_Payment_Amount_Total:'||v_Payment_Amount_Total
                    ||' v_down_payment_amount: '|| v_down_payment_amount
                    ||' v_installment_no: ' || v_installment_no
                    ||' v_start_installment_number: ' || v_start_installment_number
                  );

              end if;
          End if;

          v_scheduled_payment_index   := v_pymntsch_list.next( v_scheduled_payment_index );


     end loop;

     -- OSPRODUCT-3663
     If v_down_payment_amount > 0
     then
          pkg_os_object_io.sp_object_bv_set
          (
            in_session_id,
            in_transaction_id,
            in_payment_plan_id,
            212016, -- Down Payment
            v_down_payment_amount
          );

     end if;

     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Adjust already applied payment in payment schedule ...
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     if in_is_a_new_term = pkg_os_constant.gBoolean_False
     then

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                   '... Start Adjusting Applied Payment : '
               );
          end if;

     end if;
     
     -- UTPRODUCT-4159
     --UTXPRODUCT-315 commented out as this is not handled in processing
    /* if NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_product_id,  pkg_db_constant.gAdjustPaidAmountOption) ,1 )= 1
     then
          sp_set_bal_CPP_strt_trm_elem
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id
          );
     else*/
          sp_set_bal_CPP_strt_trm_inst
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_current_payment_plan_id
          );
                    
   --  end if;


     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Clear cached information ...
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     sp_clear_sched_payment_cache
     (
          in_session_id,
          in_transaction_id
     );

    --    v_idx := g_payer_list.next(v_idx);   -- #MP
    -- end loop; --   v_payer_list loop #MP

end sp_payment_schedule_generate;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_ba_sched_payment_generate
--
--   %USAGE
--        This procedure will be used to get the consolidation payment schedule for a billing account.
--        It takes into account only customer billed policies for getting a consolidated view

--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--   %PARAM    in_payment_plan_id                  Payment Plan Object id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------



procedure sp_ba_sched_payment_generate
(
     in_session_id         in     object.object_id%type,
     in_transaction_id     in     object.object_id%type,
     in_policy_image_id    in     object.object_id%type,
     in_billing_acc_id     in     object.object_id%type,
     in_payplan_id         in     object.object_id%type,
     in_bill_plan_id       in     object.object_id%type,
     in_ctf_id             in     object.object_id%type,
     in_profile_detail     in     object_bv_value.business_variable_value%type
) as

     v_procedure_name             constant system_log.program_name%type := pkg_name || 'sp_ba_sched_payment_generate';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_policy_transaction_id      object.object_id%type;
     v_policy_term_id             object.object_id%type;
     v_master_policy_id           object.object_id%type;
     v_policy_billing_method      object_bv_value.business_variable_value%type;
     v_policy_billed_to           object_bv_value.business_variable_value%type;
     v_transaction_state          object_bv_value.business_variable_value%type;

     v_ba_binder_object_id        object.object_id%type;

     v_ba_scheduled_payment_id    object.object_id%type;
     v_ba_sched_payment_trxn_id   object.object_id%type;
     v_ba_sched_pmnt_component_id object.object_id%type;
     v_component_master_policy_id object.object_id%type;
     v_component_policy_term_id   object.object_id%type;
     v_component_policy_trx_id    object.object_id%type;

     v_ptp_scheduled_payment_list pkg_os_object.t_object_list;
     v_scheduled_payment_index    number;

     v_ptp_scheduled_payment_id   object.object_id%type;
     v_withdrawal_date            object_bv_value.business_variable_value%type;
     v_profile_details            object_bv_value.business_variable_value%type;
     v_pt_type_id                       object_type.object_type_id%type;

     --v_actual_due_date            object_bv_value.business_variable_value%type;
     --v_actual_end_date            object_bv_value.business_variable_value%type;
     v_billing_due_date           object_bv_value.business_variable_value%type; --OSPRODUCT-2740
     --v_ba_sched_payment_due_date  date;
     --v_ba_sched_payment_end_date  date;

     v_datamart_tf                char(1) := 'T';
     v_bv_table                   pkg_os_object_io.t_bv_table;
	v_lock_status                char(1);


     type                         t_ba_scheduled_payment_list is table of dragon_ba_scheduledpayment%rowtype;
     v_ba_scheduled_payment_list  t_ba_scheduled_payment_list;

      -- OSPRODUCT-5942
     type t_ba_sch_pay_list is table of number(38) index by varchar2(100);
     v_ba_sch_payment_list       t_ba_sch_pay_list;
     v_ba_sch_payment_indx_str   varchar2(100);
     --OSPRODUCT-5942
     
     cursor c_ba_schduled_payment_objects(in_billing_object_id in object.object_id%type) is

          select
                 dbs.*
            from
                 dragon_ba_scheduledpayment dbs
           where
                 dbs.billing_account_id = in_billing_object_id;

     --OSPRODUCT-2541    added billing_object_id 
      cursor c_ba_schd_payment_components(in_ba_scheduled_payment_id in object.object_id%type,in_billing_object_id in object.object_id%type) is

          select
                 dbp.*
            from
                 dragon_ba_paymentcomponent dbp
           where 
                 dbp.billing_account_id = in_billing_object_id
           and 
               dbp.ba_scheduled_payment_id = in_ba_scheduled_payment_id;

begin

     if in_payplan_id is null then

          return;

     end if;

     v_policy_transaction_id  := pkg_os_object.fn_object_parent_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_image_id
                                );

     v_transaction_state     := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_policy_transaction_id,
                                      210153
                                 );

     --   OSPRODUCT-2541 Start 
     v_pt_type_id := pkg_os_object.fn_object_type_get
                     (
                          in_session_id,
                          in_transaction_id,
                          v_policy_transaction_id

                     );

     if v_pt_type_id = pkg_os_constant.gobjType_PolicyTransaction then

          select
               policy_id,
               policy_term_id,
               policy_trx_object_state_id
          into
               v_master_policy_id,
               v_policy_term_id,
               v_transaction_state
          from
               dragon_policy_trx pt
          where
               pt.policy_trx_id = v_policy_transaction_id;

     else

          v_policy_term_id := null;
          v_transaction_state := null;

          select
               qt.policyquote_id
          into
               v_master_policy_id
          from
               dragon_policy_quote qt
          where
               qt.policyquote_id = in_policy_image_id;

     end if;

     begin

          select 
               billing_method_id,
               direct_billed_to                
          into   
               v_policy_billing_method,
               v_policy_billed_to
          from 
               dragon_policy 
          where 
               policy_id = v_master_policy_id;
    exception

        when no_data_found then

             v_policy_billing_method := null;
             v_policy_billed_to := null;

    end;
    
    -- OSPRODUCT-4794    

    --@KR Can this be moved to the exception block above?
    v_policy_billing_method := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,


                                   in_policy_image_id,
                                   pkg_cs_profiles.gbv_PolicyBillingMethod
                              );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '. Generating consolidated Schedule. Billing Account: ' ||
               in_billing_acc_id ||
               '. Master Policy ID: ' ||
               v_master_policy_id ||
               '. Policy Image: ' ||
               in_policy_image_id ||
               '. Policy Transaction id: ' ||
               v_policy_transaction_id ||
               '. Policy Term: ' ||
               v_policy_term_id ||
               '. Payment Plan: ' ||
               in_payplan_id ||
               '. Bill Plan ID: ' ||
               in_bill_plan_id  ||


               '. Billing Method: '  ||
               v_policy_billing_method || -- OSPRODUCT-4319
               '. CTF ID: '       ||
               in_ctf_id  ||
               '. Profile Detail: ' ||
               in_profile_detail
          );

     end if;

     -- Get the Binder Object (Only one per billing account)
     v_ba_binder_object_id := pkg_os_object_search.fn_object_11_child_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_billing_acc_id,
                                   gObjType_BA_BinderObject
                              );

     if v_ba_binder_object_id is null then

          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_BA_BinderObject,
               in_billing_acc_id,
               v_ba_binder_object_id
          );

     end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Binder Object: ' || v_ba_binder_object_id
          );

     end if;

     -- Get the existing Billing Account Scheduled Payment objects for the customer's billing account
     open c_ba_schduled_payment_objects(in_billing_acc_id);
     fetch c_ba_schduled_payment_objects bulk collect into v_ba_scheduled_payment_list;
     close c_ba_schduled_payment_objects;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Billing Account Scheduled Payment Object Count: ' ||
               v_ba_scheduled_payment_list.count
          );

     end if;

     -- Cleanup
     if v_ba_scheduled_payment_list.count > 0 then

           -- OSPRODUCT-5942
           v_ba_sch_payment_list.delete;

          for v_ba_scheduled_payment_index in 1 .. v_ba_scheduled_payment_list.count loop

               v_ba_sched_payment_trxn_id := v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).policy_transaction_id;
               v_ba_scheduled_payment_id  := v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).ba_scheduled_payment_id;

               if v_ba_sched_payment_trxn_id = v_policy_transaction_id then

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Deleting schedule ID: ' || v_ba_scheduled_payment_id
                         );

                    end if;
				
				-- Get a lock before deleting
                    -- OSPRODUCT-11247
                    pkg_db_object.sp_db_set_object_lock
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_scheduled_payment_id,
                         v_lock_status
                    );

                    -- Delete the Scheduled Payments object if created by the current transaction
                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_binder_object_id,
                         v_ba_scheduled_payment_id,
                         gObjType_BA_ScheduledPayment
                    );

               else

                    --OSPRODUCT-5942
                    v_ba_sch_payment_indx_str := v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).ba_schedule_key_id ||'-'
                                                 || trunc(v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).withdrawal_date);

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Adding v_ba_scheduled_payment_id ' || v_ba_scheduled_payment_id ||
                              'to the list with index ' || v_ba_sch_payment_indx_str
                         );

                    end if;

                    v_ba_sch_payment_list(v_ba_sch_payment_indx_str) := v_ba_scheduled_payment_id;
                     --OSPRODUCT-5942

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Billing Account Scheduled Payment ID: ' ||
                              v_ba_scheduled_payment_id
                         );

                    end if;

                    -- Get the child component objects under the scheduled payment object
                    for v_ba_schd_payment_components in c_ba_schd_payment_components(v_ba_scheduled_payment_id,in_billing_acc_id) loop

                         v_ba_sched_pmnt_component_id := v_ba_schd_payment_components.ba_payment_component_id;
                         v_component_master_policy_id := v_ba_schd_payment_components.master_policy_id;
                         v_component_policy_trx_id    := v_ba_schd_payment_components.policy_transaction_id;
                         v_component_policy_term_id   := v_ba_schd_payment_components.policy_term_id;

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Component ID:   ' ||
                                   v_ba_schd_payment_components.ba_payment_component_id ||
                                   'Component Master Policy ID:' ||
                                   v_ba_schd_payment_components.master_policy_id ||
                                   'Component Transaction ID:' ||
                                   v_ba_schd_payment_components.policy_transaction_id ||
                                   'Component Term ID:' ||
                                   v_ba_schd_payment_components.policy_term_id
                              );

                         end if;

                         -- Delete the component object if created by the current transaction or belongs to current policy and term
                         if v_component_policy_trx_id = v_policy_transaction_id
                            or
                            (
                                 v_component_master_policy_id = v_master_policy_id
                                 and
                                 v_component_policy_term_id = v_policy_term_id
                            )
                         then

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Deleting..'
                                   );

                              end if;

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_ba_sched_pmnt_component_id,
                                   gObjType_BASchedPymntComponent
                              );

                              -- Datarmart Refresh


                              --- OSPRODUCT-5942- Commnting this update to improve the performance
                              /*
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_datamart_tf
                              );
                              */

                         end if;

                    end loop;

               end if;

          end loop;

     end if;

     if v_policy_billing_method = pkg_db_billing_modify.gBillingMethod_Direct

        /*  and v_policy_billed_to = 1 -- customer(add constant)   */   --Commented for OSPRODUCT-2434
        and
        nvl(v_transaction_state,0) <> 27502 -- rolledback
     then

          -- Get the Payment Plan scheduled Payment Objects under payment Plan ID
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_payplan_id,
               gObjType_ScheduledPayment,
               v_ptp_scheduled_payment_list
          );

          if v_ptp_scheduled_payment_list.count > 0 then

               v_scheduled_payment_index := v_ptp_scheduled_payment_list.first;

               while v_scheduled_payment_index is not null loop

                    v_ptp_scheduled_payment_id := v_ptp_scheduled_payment_list(v_scheduled_payment_index);

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Considering schedule payment ID: ' || v_ptp_scheduled_payment_id
                         );

                    end if;

                    v_withdrawal_date := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_ptp_scheduled_payment_id,
                                              gbv_billing_withdr_date
                                         );

                     v_billing_due_date := pkg_os_object_io.fn_object_bv_get --OSPRODUCT-2740
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_ptp_scheduled_payment_id,
                                              gbv_billing_due_date
                                         );                      

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,

                              'Due/Withdrawal Date: ' || v_withdrawal_date
                         );

                    end if;

                    -- Create schedule based on due date
                    -- irrespective of bill plan enabled or not

                    begin

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Schedule Key: ' || v_withdrawal_date
                              );

                         end if;
                         --- OSPRODUCT-5942 Commenting - Start
                         /*

                         begin

                              select dbp.ba_scheduled_payment_id
                                into v_ba_scheduled_payment_id
                                from dragon_ba_scheduledpayment dbp
                               where dbp.billing_account_id = in_billing_acc_id
                                 and dbp.ba_schedule_key_id = gBASchedKey_DueDate
                                 and trunc(to_date(v_withdrawal_date, pkg_os_constant.DragonDateFormatDefault)) = trunc(dbp.withdrawal_date);

                         exception

                              when no_data_found then

                                   v_ba_scheduled_payment_id := null;

                              when others then
                                   raise;
                         end;
                         */
                          --- OSPRODUCT-5942 - End
                         -- OSPRODUCT-5942 - Start
                         v_ba_scheduled_payment_id := null;

                         v_ba_sch_payment_indx_str := gBASchedKey_DueDate ||'-'
                            || trunc(to_date(v_withdrawal_date, pkg_os_constant.DragonDateFormatDefault));

                          if v_session_control.gLogging_Full then

                               pkg_os_logging.sp_log
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'Retreiving v_ba_scheduled_payment_id from the list with index '
                                    || v_ba_sch_payment_indx_str
                               );

                          end if;

                         if v_ba_sch_payment_list.exists(v_ba_sch_payment_indx_str) then

						 v_ba_scheduled_payment_id := v_ba_sch_payment_list(v_ba_sch_payment_indx_str) ;
						 if v_session_control.gLogging_Full then

							 pkg_os_logging.sp_log
							 (
								 in_session_id,
								 in_transaction_id,
								 v_procedure_name,
								 'Retreied v_ba_scheduled_payment_id '||v_ba_scheduled_payment_id ||
								 ' from the list with index ' || v_ba_sch_payment_indx_str
							 );

						 end if;
                        end if;
                         -- OSPRODUCT-5942

                         if v_ba_scheduled_payment_id is null then

                              -- Create a Billing Account Scheduled Payment object if not present already for the given actual due date and end date
                              pkg_os_object.sp_object_create
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   gObjType_BA_ScheduledPayment,
                                   v_ba_binder_object_id,
                                   v_ba_scheduled_payment_id
                              );

                              v_bv_table.delete;

                              -- Key
                              v_bv_table(gbv_ba_schedule_key).business_variable_value := gBASchedKey_DueDate; -- 1. Due Date, 2. Bill Plan, 3. Profile

                              -- Created by transaction (can be PT or Quote Transaction)
                              v_bv_table(gbv_ba_transaction_id).business_variable_value := v_policy_transaction_id;

                              -- Due Date
                              v_bv_table(gbv_billing_withdr_date).business_variable_value := v_withdrawal_date;


                              --OSPRODUCT-2740
                              -- Billling Due Date
                              v_bv_table(gbv_billing_due_date).business_variable_value := v_billing_due_date;

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_bv_table
                              );

                         end if;

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Billing Account Scheduled Payment Object: ' ||
                                   v_ba_scheduled_payment_id
                              );

                         end if;

                         -- Create component Object for the policy and term id (existing one cleaned up)
                         pkg_os_object.sp_object_create
                         (
                              in_session_id,
                              in_transaction_id,
                              gObjType_BASchedPymntComponent,
                              v_ba_scheduled_payment_id,
                              v_ba_sched_pmnt_component_id
                         );

                         v_bv_table.delete;
                         v_bv_table(gbv_Ref_CreateByCompTrx).business_variable_value := v_policy_transaction_id;
                         v_bv_table(gbv_Ref_AssociatedPaymentSched).business_variable_value := v_ptp_scheduled_payment_id;

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ba_sched_pmnt_component_id,
                              v_bv_table
                         );

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Billing Account Scheduled Component Object: ' ||
                                   v_ba_sched_pmnt_component_id
                              );

                         end if;

                         -- Datamart refresh
                         pkg_os_datamart.sp_datamart_update_row
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ba_sched_pmnt_component_id,
                              v_datamart_tf
                         );

                         pkg_os_datamart.sp_datamart_update_row
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ba_scheduled_payment_id,
                              v_datamart_tf
                         );

                    end;


                    -- Create schedule based on due date and bill plan
                    -- if bill plan is enabled

                    if in_bill_plan_id is not null then

                         begin

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Schedule Key: ' || v_withdrawal_date || ' - ' || in_bill_plan_id
                                   );

                              end if;

                              begin

                                   select dbp.ba_scheduled_payment_id
                                     into v_ba_scheduled_payment_id
                                     from dragon_ba_scheduledpayment dbp
                                    where dbp.billing_account_id = in_billing_acc_id
                                      and dbp.ba_schedule_key_id = gBASchedKey_BillPlan
                                      and trunc(to_date(v_withdrawal_date, pkg_os_constant.DragonDateFormatDefault)) = trunc(dbp.withdrawal_date)
                                      and in_bill_plan_id = trunc(dbp.associated_bill_plan_id);

                              exception

                                   when no_data_found then

                                        v_ba_scheduled_payment_id := null;

                                   when others then
                                        raise;
                              end;

                              if v_ba_scheduled_payment_id is null then

                                   -- Create a Billing Account Scheduled Payment object if not present already for the given actual due date and end date
                                   pkg_os_object.sp_object_create
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        gObjType_BA_ScheduledPayment,
                                        v_ba_binder_object_id,
                                        v_ba_scheduled_payment_id
                                   );

                                   v_bv_table.delete;

                                   -- Key
                                   v_bv_table(gbv_ba_schedule_key).business_variable_value := gBASchedKey_BillPlan; -- 1. Due Date, 2. Bill Plan, 3. Profile

                                   -- Created by transaction (can be PT or Quote Transaction)
                                   v_bv_table(gbv_ba_transaction_id).business_variable_value := v_policy_transaction_id;

                                   -- Due Date
                                   v_bv_table(gbv_billing_withdr_date).business_variable_value := v_withdrawal_date;

                                   -- Bill Plan ID
                                   v_bv_table(gbv_Ref_AssociatedBillPlan).business_variable_value := in_bill_plan_id;

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_ba_scheduled_payment_id,
                                        v_bv_table
                                   );

                              end if;

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Billing Account Scheduled Payment Object: ' ||
                                        v_ba_scheduled_payment_id
                                   );

                              end if;

                              -- Create component Object for the policy and term id (existing one cleaned up)
                              pkg_os_object.sp_object_create
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   gObjType_BASchedPymntComponent,
                                   v_ba_scheduled_payment_id,
                                   v_ba_sched_pmnt_component_id
                              );

                              v_bv_table.delete;
                              v_bv_table(gbv_Ref_CreateByCompTrx).business_variable_value := v_policy_transaction_id;
                              v_bv_table(gbv_Ref_AssociatedPaymentSched).business_variable_value := v_ptp_scheduled_payment_id;

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_sched_pmnt_component_id,
                                   v_bv_table
                              );

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Billing Account Scheduled Component Object: ' ||
                                        v_ba_sched_pmnt_component_id
                                   );

                              end if;

                              -- Datamart refresh
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_sched_pmnt_component_id,
                                   v_datamart_tf
                              );

                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_datamart_tf
                              );

                         end;


                  ---  end if;-- Arun 09/07 moved this code under 'in_bill_plan_id is not null' condition

                    -- Create schedule based on due date and profile
                    -- if bill plan is enabled

                         if in_ctf_id is not null
                       or
                       in_profile_detail is not null

                    then

                         begin

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Schedule Key: ' || v_withdrawal_date || ' - ' || in_profile_detail
                                   );

                              end if;

                              begin

                                   select dbp.ba_scheduled_payment_id
                                     into v_ba_scheduled_payment_id
                                     from dragon_ba_scheduledpayment dbp
                                    where dbp.billing_account_id = in_billing_acc_id
                                      and dbp.ba_schedule_key_id = gBASchedKey_Profile
                                      and trunc(to_date(v_withdrawal_date, pkg_os_constant.DragonDateFormatDefault)) = trunc(dbp.withdrawal_date)
                                      and (
                                               (
                                                    dbp.associated_ctf_id is not null
                                                    and
                                                    (
                                                         in_ctf_id = dbp.associated_ctf_id
                                                         or
                                                         pkg_db_payment_arrangement.fn_get_billplan_profile_detail(in_session_id, in_transaction_id , in_ctf_id) =
                                                         pkg_db_payment_arrangement.fn_get_billplan_profile_detail(in_session_id, in_transaction_id , dbp.associated_ctf_id)
                                                    )
                                               )
                                               or
                                               in_profile_detail = nvl(dbp.payment_profile_detail,'')
                                          );


                              exception

                                   when no_data_found then

                                        v_ba_scheduled_payment_id := null;

                                   when others then
                                        raise;
                              end;

                              if v_ba_scheduled_payment_id is null then

                                   -- Create a Billing Account Scheduled Payment object if not present already for the given actual due date and end date
                                   pkg_os_object.sp_object_create
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        gObjType_BA_ScheduledPayment,
                                        v_ba_binder_object_id,
                                        v_ba_scheduled_payment_id
                                   );

                                   v_bv_table.delete;

                                   -- Key
                                   v_bv_table(gbv_ba_schedule_key).business_variable_value := gBASchedKey_Profile; -- 1. Due Date, 2. Bill Plan, 3. Profile

                                   -- Created by transaction (can be PT or Quote Transaction)
                                   v_bv_table(gbv_ba_transaction_id).business_variable_value := v_policy_transaction_id;

                                   -- Due Date
                                   v_bv_table(gbv_billing_withdr_date).business_variable_value := v_withdrawal_date;

                                   -- Bill Plan ID
                                   v_bv_table(gbv_Ref_AssociatedBillPlan).business_variable_value := in_bill_plan_id;

                                   -- CTF ID
                                   v_bv_table(gbv_Ref_AssociatedCTF).business_variable_value := in_ctf_id;

                                   -- Profile Details
                                   v_bv_table(gbv_ba_schd_profile_detail).business_variable_value := in_profile_detail;

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_ba_scheduled_payment_id,
                                        v_bv_table
                                   );

                              end if;

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Billing Account Scheduled Payment Object: ' ||
                                        v_ba_scheduled_payment_id
                                   );

                              end if;

                              -- Create component Object for the policy and term id (existing one cleaned up)
                              pkg_os_object.sp_object_create
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   gObjType_BASchedPymntComponent,
                                   v_ba_scheduled_payment_id,
                                   v_ba_sched_pmnt_component_id
                              );

                              v_bv_table.delete;
                              v_bv_table(gbv_Ref_CreateByCompTrx).business_variable_value := v_policy_transaction_id;
                              v_bv_table(gbv_Ref_AssociatedPaymentSched).business_variable_value := v_ptp_scheduled_payment_id;

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_sched_pmnt_component_id,
                                   v_bv_table
                              );

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Billing Account Scheduled Component Object: ' ||
                                        v_ba_sched_pmnt_component_id
                                   );

                              end if;

                              -- Datamart refresh
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_sched_pmnt_component_id,
                                   v_datamart_tf
                              );

                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_datamart_tf
                              );

                         end;




                    end if;

                    end if; --OSPRODUCT-5942

                    v_scheduled_payment_index := v_ptp_scheduled_payment_list.next(v_scheduled_payment_index);

               end loop;

          end if;

     end if;


end sp_ba_sched_payment_generate;



procedure sp_ba_sched_payment_generate
(
     in_session_id         in     object.object_id%type,
     in_transaction_id     in     object.object_id%type,
     in_action_object_id   in     object.object_id%type,
     in_mod_pay_plan_tf    in     char := 'F',
     in_mod_bill_plan_tf   in     char := 'F'
) as

     v_procedure_name             constant system_log.program_name%type := pkg_name || 'sp_ba_sched_payment_generate';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_ultimate_customer_id       object.object_id%type;
     v_primary_entity_id          object.object_id%type;
     v_billing_account_id         object.object_id%type;
     v_payment_plan_id            object.object_id%type;
     v_bill_plan_id               object.object_id%type;
     v_ptp_payer_id               object.object_id%type;
     v_ctf_id                     object.object_id%type;
     v_policy_transaction_id      object.object_id%type;
     v_policy_image_id            object.object_id%type;
     v_action_object_type_id      object_type.object_type_id%type;

     v_profile_detail             object_bv_value.business_variable_value%type;

     v_down_payment_mode          number;

     v_payer_list                 pkg_db_multipayer.t_payer_tab;
     v_payer_index                number;

     v_multipayer_enabled_tf      char;
     v_bill_plan_enabled_tf       char;

begin

     v_action_object_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_action_object_id
                                );

     if v_action_object_type_id = pkg_db_payment_arrangement.gObjType_PTP then

          v_policy_image_id := in_action_object_id;

     elsif v_action_object_type_id = pkg_db_payment_arrangement.gObjType_PTPPayer then

          v_policy_image_id := pkg_os_object.fn_object_parent_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_action_object_id
                               );

     else
          return;

     end if;


     -- check if the policy is multipayer
     v_multipayer_enabled_tf := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_policy_image_id,
                                     pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                                );

     v_bill_plan_enabled_tf := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_policy_image_id,
                                    pkg_db_payment_arrangement.gbv_PTPBillPlanEnabledTF
                               );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '. Generating Billing Account Consolidated Schedule.
               . Policy Image: ' || v_policy_image_id ||
               '. Multipayer Enabled? ' || v_multipayer_enabled_tf ||
               '. Bill Plan Enabled? '  || v_bill_plan_enabled_tf  ||
               '. Modified Bill Plan? ' || in_mod_bill_plan_tf     ||
               '. Modified Pay Plan? '  || in_mod_pay_plan_tf

          );

     end if;

     if nvl(v_multipayer_enabled_tf, gNo) = gNo
        and
        v_action_object_type_id = pkg_db_payment_arrangement.gObjType_PTP
     then

          v_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_policy_image_id,
                                         pkg_os_constant.gObjType_Customer
                                    );

          --OSPRODUCT-2541 Start
          v_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_ultimate_customer_id,
                                      pkg_base_customer.gbv_CustRefPrimaryEntity
                                 );

          v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_primary_entity_id,
                                       gObjType_BillingAccount
                                  );
          --Removed retrieval from datamart
            /*select 
                billingaccount_id
              into 
                v_billing_account_id
              from 
                dragon_billingaccount
              where 
               customer_object_id = v_ultimate_customer_id;*/

          --OSPRODUCT-2541 End                                    

          

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '. Billing Account ID: ' || v_billing_account_id

               );

          end if;

          -- Get the payment plan
          if in_mod_pay_plan_tf = 'F' then

               v_payment_plan_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_image_id,
                                        gbv_PolicyRefChosenPlan
                                    );

          else

               v_payment_plan_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_image_id,
                                        gbv_PolicyRefModPayPlan
                                    );

          end if;

          if v_bill_plan_enabled_tf = gYes then

               if in_mod_bill_plan_tf = 'F' then

                    v_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_policy_image_id,
                                            pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt
                                       ); -- PTP Associated PA

               else

                    v_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_policy_image_id,
                                            pkg_db_payment_arrangement.gbv_Ref_PTPModifiedPmntArngmnt
                                       );

               end if;

          else

               v_bill_plan_id := null;

          end if;

          if v_bill_plan_id is not null then


               -- OSPRODUCT-4319
               begin
                    
                    select 
                         ctf_object_id
                    into 
		    	          v_ctf_id
                    from 
		    	          dragon_bill_plan dbp 
                    where 
		    	          bill_plan_id = v_bill_plan_id;

               exception

                    when no_data_found then
                         v_ctf_id:=null;

               end;
                                                           
               if v_ctf_id is null then

                    v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_policy_image_id
                                               );

                    -- get the down payment mode
                    v_down_payment_mode := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_image_id,
                                                pkg_db_payment_arrangement.gbv_PTPPmntDownPmntMode
                                           );

                    if v_down_payment_mode = pkg_db_payment_arrangement.gllv_BillMe then

                         v_profile_detail := pkg_os_lookup.fn_lookup_list_text_get(pkg_db_functions.PaymentModeList,pkg_db_functions.gPaymentMode_BillMe); --OSPRODUCT-970

                    else

                         if v_down_payment_mode in (pkg_db_payment_arrangement.gllv_Card, pkg_db_payment_arrangement.gllv_EFT, 4, 5)
                            and
                            (
                                 pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_policy_image_id, pkg_db_payment_arrangement.gbv_PTPEFTProfileNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfExisting
                                 or
                                 pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_policy_image_id, pkg_db_payment_arrangement.gbv_PTPCCProfileNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfExisting
                            )
                         then

                              v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_policy_image_id,
                                               pkg_db_payment_arrangement.gbv_Ref_PTPCurrentProfile -- PTP Current Profile
                                          );

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Existing Profile Choosen: ' || v_ctf_id
                                   );

                              end if;

                         else

                              if v_down_payment_mode in (pkg_db_payment_arrangement.gllv_Card, 4)
                                 and
                                 pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_policy_image_id, pkg_db_payment_arrangement.gbv_PTPCCProfileNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfNew
                              then

                                   v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_policy_transaction_id,
                                                    pkg_db_payment_arrangement.gbv_Ref_PTPlchldrCTFForCC -- PTP CC Placeholder
                                               );


                              elsif v_down_payment_mode in (pkg_db_payment_arrangement.gllv_EFT, 5)
                                    and
                                    pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_policy_image_id, pkg_db_payment_arrangement.gbv_PTPEFTProfileNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfNew
                              then

                                   v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_policy_transaction_id,
                                                    pkg_db_payment_arrangement.gbv_Ref_PTPlchldrCTFForEFT -- PTP EFT Placeholder
                                               );

                              else

                                   v_ctf_id := null;

                              end if;

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'New profile placeholder: ' || v_ctf_id
                                   );

                              end if;

                         end if;

                         v_profile_detail := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_ctf_id,
                                                  32375746
                                             );

                         if v_profile_detail = pkg_os_lookup.fn_lookup_list_text_get(pkg_db_functions.PaymentModeList,pkg_db_functions.gPaymentMode_BillMe)  then --OSPRODUCT-970

                              v_ctf_id := null;
                              v_profile_detail := null;

                         end if;

                    end if;

               else

                    v_profile_detail := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_ctf_id,
                                             32375746
                                        );

               end if;

          end if;

          sp_ba_sched_payment_generate
          (
               in_session_id,
               in_transaction_id,
               v_policy_image_id,
               v_billing_account_id,
               v_payment_plan_id,
               v_bill_plan_id,
               v_ctf_id,
               v_profile_detail
          );

          sp_ba_sched_payment_cleanup(in_session_id, in_transaction_id, v_billing_account_id);

     else

          v_payer_list.delete;

          if v_action_object_type_id = pkg_db_payment_arrangement.gObjType_PTP then

               -- Get the payers
               pkg_db_multipayer.sp_ptp_payers_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    in_ptp_object_id      => v_policy_image_id,
                    io_payer_list         => v_payer_list,           -- indexed by chosen pay plan ID
                    in_print_list         => 'Y',
                    in_index_by           => pkg_db_multipayer.g_PayerGet_idx_BilingAccount
               );

          else

               v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_action_object_id,
                                                 pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                            ),
                                            pkg_db_multipayer.gObjType_BillingAccount
                                       );

               v_payer_list(v_billing_account_id).ptpayer_object_id := in_action_object_id;

               v_payer_list(v_billing_account_id).chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                                                         (
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              in_action_object_id,
                                                                              pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                                                         );

               v_payer_list(v_billing_account_id).PayerEntity_object_id := pkg_os_object_io.fn_object_bv_get
                                                                           (
                                                                                in_session_id,
                                                                                in_transaction_id,
                                                                                in_action_object_id,
                                                                                pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                           );

               v_payer_list(v_billing_account_id).payerbillingaccount_id := pkg_os_object_search.fn_object_11_child_get
                                                                            (
                                                                                 in_session_id,
                                                                                 in_transaction_id,
                                                                                 v_payer_list(v_billing_account_id).PayerEntity_object_id,
                                                                                 pkg_db_multipayer.gObjType_BillingAccount
                                                                            );

               v_payer_list(v_billing_account_id).modified_payment_plan := pkg_os_object_io.fn_object_bv_get
                                                                           (
                                                                                in_session_id,
                                                                                in_transaction_id,
                                                                                in_action_object_id,
                                                                                32967024
                                                                           );

          end if;

          v_payer_index := v_payer_list.first;

          while v_payer_index is not null loop

               v_billing_account_id := v_payer_list(v_payer_index).payerbillingaccount_id;
               v_ptp_payer_id := v_payer_list(v_payer_index).ptpayer_object_id;

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '. PTP Payer ID:'        || v_ptp_payer_id ||
                         '. Billing Account ID: ' || v_billing_account_id

                    );

               end if;

               if in_mod_pay_plan_tf = 'F' then

                    v_payment_plan_id := v_payer_list(v_payer_index).chosen_payment_plan;

               else

                    v_payment_plan_id := v_payer_list(v_payer_index).modified_payment_plan;

               end if;

               if v_bill_plan_enabled_tf = gYes then

                    if in_mod_bill_plan_tf = 'F' then

                         v_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_ptp_payer_id,
                                                 pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan
                                            ); -- PTP Associated PA

                    else

                         v_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_ptp_payer_id,
                                                 pkg_db_payment_arrangement.gbv_Ref_PTPayerModBillPlan
                                            ); -- PTP Associated PA

                    end if;

               else

                    v_bill_plan_id := null;

               end if;

               if v_bill_plan_id is not null then

                    v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_bill_plan_id,
                                     pkg_db_payment_arrangement.gbv_Ref_PmntArrangementCTF
                                );

                    if v_ctf_id is null then

                         -- get the down payment mode
                         v_down_payment_mode := pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_ptp_payer_id,
                                                     pkg_db_payment_arrangement.gbv_PTPayerDownPaymentMode
                                                );

                         if v_down_payment_mode = pkg_db_payment_arrangement.gllv_BillMe then

                              v_ctf_id := null;
                              v_profile_detail :=  pkg_os_lookup.fn_lookup_list_text_get(pkg_db_functions.PaymentModeList,pkg_db_functions.gPaymentMode_BillMe); --OSPRODUCT-970

                         else

                              if v_down_payment_mode in (pkg_db_payment_arrangement.gllv_Card, pkg_db_payment_arrangement.gllv_EFT, 4, 5)
                                 and
                                 (
                                      pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_ptp_payer_id, pkg_db_payment_arrangement.gbv_PTPayerEFTNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfExisting
                                      or
                                      pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_ptp_payer_id, pkg_db_payment_arrangement.gbv_PTPayerCardNewOrExisting) = pkg_db_payment_arrangement.gllv_PTPProfExisting
                                 )
                              then

                                   v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_ptp_payer_id,
                                                    pkg_db_payment_arrangement.gbv_Ref_PTPayerSelectedCTF -- PTP Current Profile
                                               );

                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'Existing Profile Choosen: ' || v_ctf_id
                                        );

                                   end if;

                              else

                                   if v_down_payment_mode in (pkg_db_payment_arrangement.gllv_Card, 4) then

                                        v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_ptp_payer_id,
                                                         pkg_db_payment_arrangement.gbv_Ref_PTPayerCardPlaceholder -- PTP CC Placeholder
                                                    );


                                   elsif v_down_payment_mode in (pkg_db_payment_arrangement.gllv_EFT, 5) then

                                        v_ctf_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_ptp_payer_id,
                                                         pkg_db_payment_arrangement.gbv_Ref_PTPayerEFTPlaceholder -- PTP EFT Placeholder
                                                    );

                                   else

                                        v_ctf_id := null;
                                        v_profile_detail := null;

                                   end if;

                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'New profile placeholder: ' || v_ctf_id
                                        );

                                   end if;

                              end if;

                              v_profile_detail := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_ctf_id,
                                                       32375746
                                                  );

                         end if;

                    else

                         v_profile_detail := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_ctf_id,
                                                  32375746
                                             );

                    end if;

               end if;

               sp_ba_sched_payment_generate
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_image_id,
                    v_billing_account_id,
                    v_payment_plan_id,
                    v_bill_plan_id,
                    v_ctf_id,
                    v_profile_detail
               );

               sp_ba_sched_payment_cleanup(in_session_id, in_transaction_id, v_billing_account_id);

               v_payer_index := v_payer_list.next(v_payer_index);

          end loop;

     end if;

end sp_ba_sched_payment_generate;



procedure sp_ba_sched_payment_generate
(
     in_session_id         in     object.object_id%type,
     in_transaction_id     in     object.object_id%type,
     in_policy_image_id    in     object.object_id%type,
     in_payment_plan_id    in     object.object_id%type,
     in_mod_bill_plan_id   in     object.object_id%type default null
) as

     v_procedure_name             constant system_log.program_name%type := pkg_name || 'sp_ba_sched_payment_generate';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);


     /*v_scheduled_payment_index    number;

     v_policy_transaction_id      object.object_id%type;
     v_policy_term_id             object.object_id%type;
     v_master_policy_id           object.object_id%type;
     v_ultimate_customer_id       object.object_id%type;
     v_primary_entity_id          object.object_id%type;
     v_customer_billing_acc_id    object.object_id%type;
     v_policy_billing_method      object_bv_value.business_variable_value%type;
     v_policy_billed_to           object_bv_value.business_variable_value%type;

     v_ptp_scheduled_payment_id   object.object_id%type;
     v_ptp_scheduled_payment_list pkg_os_object.t_object_list;
     v_actual_due_date            object_bv_value.business_variable_value%type;
     v_actual_end_date            object_bv_value.business_variable_value%type;
     v_billing_due_date           object_bv_value.business_variable_value%type;
     v_withdrawal_date            object_bv_value.business_variable_value%type;

     v_ba_binder_object_id        object.object_id%type;

     v_ba_scheduled_payment_id    object.object_id%type;
     v_ba_sched_payment_trxn_id   object.object_id%type;
     v_ba_sched_payment_due_date  date;
     v_ba_sched_payment_end_date  date;

     v_ba_sched_pmnt_component_id object.object_id%type;
     v_component_master_policy_id object.object_id%type;
     v_component_policy_term_id   object.object_id%type;
     v_component_policy_trx_id    object.object_id%type;
     v_component_parent_id        object.object_id%type;
     v_associated_bill_plan_id    object.object_id%type;

     v_pmnt_arngmnt_enable_tf     char;

     v_datamart_tf                char(1) := 'T';

     v_bv_table                   pkg_os_object_io.t_bv_table;

     type                         t_ba_scheduled_payment_list is table of dragon_ba_scheduledpayment%rowtype;
     v_ba_scheduled_payment_list  t_ba_scheduled_payment_list;*/



begin

     if in_mod_bill_plan_id is null then

          sp_ba_sched_payment_generate
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id
          );

     else
          sp_ba_sched_payment_generate
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               'F',
               'T'
          );

     end if;


     /*v_policy_billing_method := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_image_id,
                                     pkg_db_billing_modify.gbv_PolicyBillingMethod
                                );

     v_policy_billed_to := pkg_os_object_io.fn_object_bv_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_policy_image_id,
                                pkg_db_billing_modify.gbv_PolicyBillTo
                           );

     v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_image_id
                                );

     v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_transaction_id,
                              gbv_PolicyTrxRefPolicyTerm
                         );

     v_master_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                           (
                                in_session_id,
                                in_transaction_id,
                                v_policy_transaction_id,
                                pkg_os_constant.gObjType_Policy
                           );

     v_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_image_id,
                                    pkg_os_constant.gObjType_Customer
                               );


     v_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_ultimate_customer_id,
                                 pkg_base_customer.gbv_CustRefPrimaryEntity
                            );

     v_customer_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_primary_entity_id,
                                       gObjType_BillingAccount
                                  );

     if in_mod_bill_plan_id is null then

          v_associated_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_policy_image_id,
                                            34207146
                                       ); -- PTP Associated PA

     else

          v_associated_bill_plan_id := in_mod_bill_plan_id;

     end if;

     if v_associated_bill_plan_id is not null then

          v_pmnt_arngmnt_enable_tf := 'T';

     else

          v_pmnt_arngmnt_enable_tf := 'F';

     end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '. Generating consolidated Schedule. Billing Account: ' ||
               v_customer_billing_acc_id ||
               '. Policy Image: ' ||
               in_policy_image_id ||
               '. Policy Term: ' || v_policy_term_id ||
               '. Chosen Payment Plan: ' ||
               in_payment_plan_id ||
               '. Policy Transaction id: ' ||
               v_policy_transaction_id ||
               '. Master Policy ID: ' ||
               v_master_policy_id ||
               '. Payment Arrangement ID: ' ||
               v_associated_bill_plan_id
          );

     end if;

     -- Get the Binder Object (Only one per billing account)

     v_ba_binder_object_id := pkg_os_object_search.fn_object_11_child_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_customer_billing_acc_id,
                                   gObjType_BA_BinderObject
                              );

     if v_ba_binder_object_id is null then

          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_BA_BinderObject,
               v_customer_billing_acc_id,
               v_ba_binder_object_id
          );

     end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Binder Object: ' || v_ba_binder_object_id
          );

     end if;

     -- Get the existing Billing Account Scheduled Payment objects for the customer's billing account
     open c_ba_schduled_payment_objects(v_customer_billing_acc_id);
     fetch c_ba_schduled_payment_objects bulk collect into v_ba_scheduled_payment_list;
     close c_ba_schduled_payment_objects;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Billing Account Scheduled Payment Object Count: ' ||
               v_ba_scheduled_payment_list.count
          );

     end if;

     -- Cleanup
     if v_ba_scheduled_payment_list.count > 0 then

          for v_ba_scheduled_payment_index in 1 .. v_ba_scheduled_payment_list.count loop

               v_ba_sched_payment_trxn_id := v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).policy_transaction_id;
               v_ba_scheduled_payment_id  := v_ba_scheduled_payment_list(v_ba_scheduled_payment_index).ba_scheduled_payment_id;

               if v_ba_sched_payment_trxn_id = v_policy_transaction_id then

                    -- Delete the Scheduled Payments object if created by the current transaction
                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_binder_object_id,
                         v_ba_scheduled_payment_id,
                         gObjType_BA_ScheduledPayment
                    );

               else

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Billing Account Scheduled Payment ID: ' ||
                              v_ba_scheduled_payment_id
                         );

                    end if;

                    -- Get the child component objects under the scheduled payment object
                    for v_ba_schd_payment_components in c_ba_schd_payment_components(v_ba_scheduled_payment_id) loop

                         v_ba_sched_pmnt_component_id := v_ba_schd_payment_components.ba_payment_component_id;
                         v_component_master_policy_id := v_ba_schd_payment_components.master_policy_id;
                         v_component_policy_trx_id    := v_ba_schd_payment_components.policy_transaction_id;
                         v_component_policy_term_id   := v_ba_schd_payment_components.policy_term_id;

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Component ID:   ' ||
                                   v_ba_schd_payment_components.ba_payment_component_id ||
                                   'Component Master Policy ID:' ||
                                   v_ba_schd_payment_components.master_policy_id ||
                                   'Component Transaction ID:' ||
                                   v_ba_schd_payment_components.policy_transaction_id ||
                                   'Component Term ID:' ||
                                   v_ba_schd_payment_components.policy_term_id
                              );

                         end if;

                         -- Delete the component object if created by the current transaction or belongs to current policy and term
                         if v_component_policy_trx_id = v_policy_transaction_id
                            or
                            (
                                 v_component_master_policy_id = v_master_policy_id
                                 and
                                 v_component_policy_term_id = v_policy_term_id
                            )
                         then

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_ba_sched_pmnt_component_id,
                                   gObjType_BASchedPymntComponent
                              );

                              -- Datarmart Refresh
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ba_scheduled_payment_id,
                                   v_datamart_tf
                              );

                         end if;

                    end loop;

               end if;

          end loop;

     end if;

     if v_policy_billing_method = pkg_db_billing_modify.gBillingMethod_Direct
        and
        v_policy_billed_to = 1 -- customer(add constant)
     then

          -- Get the Payment Plan scheduled Payment Objects under payment Plan ID
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               gObjType_ScheduledPayment,
               v_ptp_scheduled_payment_list
          );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Payment Scheduled Object Count for the chosen payment plan: ' ||
                    v_ptp_scheduled_payment_list.count
               );

          end if;

          if v_ptp_scheduled_payment_list.count > 0 then

               v_scheduled_payment_index := v_ptp_scheduled_payment_list.first;

               while v_scheduled_payment_index is not null loop

                    v_ptp_scheduled_payment_id := v_ptp_scheduled_payment_list(v_scheduled_payment_index);

                    v_actual_due_date := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_ptp_scheduled_payment_id,
                                              gbv_actual_due_date
                                         );

                    v_actual_end_date := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_ptp_scheduled_payment_id,
                                              gbv_actual_end_date
                                         );

                    v_billing_due_date := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_ptp_scheduled_payment_id,
                                               gbv_billing_due_date
                                          );

                    v_withdrawal_date := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_ptp_scheduled_payment_id,
                                              gbv_billing_withdr_date
                                         );

                    begin

                         select dbp.ba_scheduled_payment_id
                           into v_ba_scheduled_payment_id
                           from dragon_ba_scheduledpayment dbp
                          where dbp.billing_account_id = v_customer_billing_acc_id
                            and trunc(to_date(v_withdrawal_date, pkg_os_constant.DragonDateFormatDefault)) = trunc(dbp.withdrawal_date)
                            and (
                                     v_pmnt_arngmnt_enable_tf = 'F'
                                     or
                                     dbp.associated_bill_plan_id = v_associated_bill_plan_id
                                );
                    exception

                         when no_data_found then

                              v_ba_scheduled_payment_id := null;

                         when others then
                              raise;
                    end;

                    if v_ba_scheduled_payment_id is null then

                         -- Create a Billing Account Scheduled Payment object if not present already for the given actual due date and end date
                         pkg_os_object.sp_object_create
                         (
                              in_session_id,
                              in_transaction_id,
                              gObjType_BA_ScheduledPayment,
                              v_ba_binder_object_id,
                              v_ba_scheduled_payment_id
                         );

                         v_bv_table.delete;
                         v_bv_table(gbv_actual_due_date).business_variable_value := v_actual_due_date;
                         v_bv_table(gbv_actual_end_date).business_variable_value := v_actual_end_date;
                         v_bv_table(gbv_billing_due_date).business_variable_value := v_billing_due_date;
                         v_bv_table(gbv_billing_withdr_date).business_variable_value := v_withdrawal_date;
                         v_bv_table(gbv_ba_transaction_id).business_variable_value := v_policy_transaction_id;

                         if v_pmnt_arngmnt_enable_tf = 'T' then

                              v_bv_table(gbv_Ref_AssociatedBillPlan).business_variable_value := v_associated_bill_plan_id;

                         end if;

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ba_scheduled_payment_id,
                              v_bv_table
                         );

                    end if;

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Billing Account Scheduled Payment Object: ' ||
                              v_ba_scheduled_payment_id
                         );

                    end if;

                    -- Create component Object for the policy and term id (existing one cleaned up)
                    pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_BASchedPymntComponent,
                         v_ba_scheduled_payment_id,
                         v_ba_sched_pmnt_component_id
                    );

                    v_bv_table.delete;
                    v_bv_table(gbv_Ref_CreateByCompTrx).business_variable_value := v_policy_transaction_id;
                    v_bv_table(gbv_Ref_AssociatedPaymentSched).business_variable_value := v_ptp_scheduled_payment_id;

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_sched_pmnt_component_id,
                         v_bv_table
                    );

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Billing Account Scheduled Component Object: ' ||
                              v_ba_sched_pmnt_component_id
                         );

                    end if;

                    -- Datamart refresh
                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_sched_pmnt_component_id,
                         v_datamart_tf
                    );

                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ba_scheduled_payment_id,
                         v_datamart_tf
                    );

                    v_scheduled_payment_index := v_ptp_scheduled_payment_list.next(v_scheduled_payment_index);

               end loop;

          end if;

     end if;

     sp_ba_sched_payment_cleanup(in_session_id, in_transaction_id,
                                 v_customer_billing_acc_id);*/

end sp_ba_sched_payment_generate;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_ba_sched_payment_cleanup
--
--   %USAGE
--        This procedure will delete the BillingAccountPaymentSchedule object
--        having no component chile objects

--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_billing_account_id               Billing Account ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_ba_sched_payment_cleanup
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_id              in             object.object_id%type
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_ba_sched_payment_cleanup';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_scheduled_payment_index          number;
     v_ba_scheduled_payment_list        pkg_os_object.t_object_list;
     v_ba_binder_object_id              object.object_id%type;

     cursor c_ba_schduled_payment_objects (in_billing_account_id in object.object_id%type)
     is
          select dbs.ba_scheduled_payment_id
            from dragon_ba_scheduledpayment dbs
           where dbs.billing_account_id = in_billing_account_id
             and dbs.ba_scheduled_payment_id not in
                 (select dpc.ba_scheduled_payment_id
                    from dragon_ba_paymentcomponent dpc
                   where dpc.billing_account_id = in_billing_account_id)
     ;
begin

     open c_ba_schduled_payment_objects(in_billing_account_id);
     fetch c_ba_schduled_payment_objects bulk collect into v_ba_scheduled_payment_list;
     close c_ba_schduled_payment_objects;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Found ' || v_ba_scheduled_payment_list.count || ' BA scheduled Payment Objec with no component object'
          );
     end if;

     if v_ba_scheduled_payment_list.count > 0 then

          v_scheduled_payment_index := v_ba_scheduled_payment_list.first;

          while v_scheduled_payment_index is not null loop

               pkg_os_object.sp_object_delete
               (
                    in_session_id,
                    in_transaction_id,
                    in_billing_account_id,
                    v_ba_scheduled_payment_list(v_scheduled_payment_index),
                    gObjType_BA_ScheduledPayment
               );

               v_scheduled_payment_index := v_ba_scheduled_payment_list.next(v_scheduled_payment_index);

          end loop;

     end if;

end sp_ba_sched_payment_cleanup;
------------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_populate_plan_anew
--
--   %USAGE
--        Populate the scheduled payments in a payment plan from scratch ...
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--   %PARAM    io_action_outcome_id                The outcome of this action - currently the outcome is always OK.
--   %PARAM    in_current_date_time                Placeholder for future multi-timezeone and advance date support.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


procedure sp_populate_plan_anew
(
     in_session_id                    in  object.object_id%type,
     in_transaction_id                in  object.object_id%type,
     in_policy_image_id               in  object.object_id%type,
     in_policy_transaction_id         in  object.object_id%type,
     in_payment_plan_id               in  object.object_id%type,
     in_policy_trx_effective_date     in  date,
     in_next_installment_date         in  date,
     in_overridden_plan_md_row        in  getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_start_installment_number      in  number,
     in_current_date_time             in  date default null  -- XXXXPRDSUP-2245

) as
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_populate_plan_anew';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_master_policy_id                 object.object_id%type;
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_payment_plan_md_id            payment_plan.payment_plan_id%type;
     v_payment_plan_md_row            getPaymentPlanList%rowtype;--OSPRODUCT-3108
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. End

     v_actual_due_date_list             t_due_date_list;
     v_actual_end_date_list             t_due_date_list;
     v_billing_due_date_list            t_due_date_list;
     v_withdrawal_date_list             t_due_date_list;

     v_invoice_issue_date               date;

     v_policy_image_eff_date            date;
     v_policy_image_exp_date            date;
     v_policy_trx_process_date          date;
     v_installment_number               number;
     v_scheduled_payment_id             object.object_id%type;
     v_existing_payment_count           number := 0;


     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_pol_trx_curr_trxn_type           object_bv_value.business_variable_value%type;
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_curr_pay_plan_id              object.object_id%type;
     v_curr_pay_plan_md_id           payment_plan.payment_plan_id%type;
     v_curr_pay_plan_md_row             getPaymentPlanList%rowtype;--OSPRODUCT-3108
  --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     v_current_date_time                date;  --OSBILLING-7831
     
     --OSPRODUCT-2424 start
     v_current_payer                    object.object_id%type;         
     v_chosen_payment_plan              object.object_id%type;
     --OSPRODUCT-2424 end
     --OSPRODUCT-4611 start
     v_num_inst                         number:= 0;
     v_schedule_interval                number:= 0;
     v_install_start_date               date;
     v_installment_interval             number:= 0;
     v_install_end_date                 date;
     --OSPRODUCT-4611 end
	 v_start_of_the_term                number:= pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id , gbv_ptp_cpp_term_start_ind);
     v_current_payer_date_time          date; -- UTPRODUCT-3925     

begin

     v_master_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                           (
                                in_session_id,
                                in_transaction_id,
                                in_policy_transaction_id,  -- VAULTDEV-9932, OSBILLING-5440. Kostya
                                pkg_os_constant.gObjType_Policy
                           );

     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     Get Policy-Term information ...
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

     v_policy_image_exp_date  :=  to_date
     (
          pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               pkg_os_constant_bv.gbv_PolicyExpiratinoDate

          ),pkg_os_constant.DragonDateFormatDefault
     );

     v_pol_trx_curr_trxn_type := pkg_os_object_io.fn_object_bv_get
     (
         in_session_id,
         in_transaction_id,
         in_policy_transaction_id,
         pkg_os_constant_bv.gbv_PolicyTranType
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '|||'
               ||' Populating Plan Anew  - PolicyImageID:'   || in_policy_image_id      ||
               ' Expiration Date:'   || v_policy_image_exp_date ||
               ' Transaction Type: '  || v_pol_trx_curr_trxn_type ||
               ' MasterPolicyID: : ' || v_master_policy_id ||
               'HC: in_current_date_time: '|| in_current_date_time|| -- UTPRODUCT-3925
               'HC: v_current_date:'||pkg_db_functions.fn_get_processed_date
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 in_policy_image_id
                            )||
               'HC: Policy current date:'||pkg_db_functions.fn_get_policy_current_date
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_master_policy_id
                                            )             
               
          );
     end if;



     --
     --   Set the process date ... which should simply be the system date unless the date has been advanced on the master policy by QA to test future date
     --   scenarios. However, we have chosen not to implement that here since we're saying that advance date functionality should be used purely to test late
     --   payment processing.
     --
     --   v_policy_trx_process_date := sysdate;     -- Hello dear developer. What about renewal? How can we get renewal tested without having Advance date in effect?
                                                    -- Installment due dates are tied to process date and we need the Time Machine working.
                                                    -- Commenting out the  v_policy_trx_process_date := sysdate.
                                                    --
                                                    -- Change made in scope of OSBILLING-5440
                                                    --
                                                    --   Regards, Kostya.
     --OSBILLING-7831
     v_current_date_time := pkg_db_functions.fn_get_processed_date
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 in_policy_image_id
                            );
                            
     -- UTPRODUCT-3925 start
     if 
          nvl
          (
               pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                ),
                pkg_db_multipayer.genum_No
          ) = pkg_db_multipayer.genum_No 
     then

          v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        gbv_PolicyRefChosenPlan
                                   );

          v_current_payer := null; -- OSPRODUCT-3278

     else

          v_current_payer := pkg_os_object.fn_object_parent_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_payment_plan_id
                             );

          v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_current_payer,
                                        pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                   );
     end if;
          
     v_policy_image_eff_date  := fn_actual_effective_date_get
                                 (
                                 in_session_id,
                                 in_transaction_id,
                                 in_policy_image_id,
                                 v_current_payer
                                 );

          
     if v_current_date_time  is not null and v_current_payer is not null and v_start_of_the_term is not null
     then
          v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                       v_current_payer,
                                                       pkg_db_constant.gbv_payer_process_date
                                                   ),pkg_os_constant.DragonDateFormatDefault);  

          --UTPRODUCT-4518
           v_current_date_time :=  v_current_payer_date_time;

         /* if v_current_payer_date_time is not null 
               then
                  v_current_date_time :=  v_current_payer_date_time;
          end if;  */    
                                               
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...... v_current_date_time on PTPPayer:'||v_current_payer
          ||' HC: is : '||v_current_date_time
     );                                                                        
                                                                       
     end if; 
     
     -- UTPRODUCT-3925 end
                       
     -- OSBILLING-5440
     if fn_trx_starts_new_term(v_pol_trx_curr_trxn_type) = pkg_os_constant.gBoolean_True --OSBILLING-7117
     then
          -- make process date as Sysdate if this is a NewBusiness transaction. There is no way to advance date at the moment of New Business processing.
          --
          --OSBILLING-7831 start
          /*v_policy_trx_process_date := nvl
                                       (in_current_date_time,   -- DDWIPRDSUP-2245
                                       pkg_os_time.fn_os_sysdate
                                       (
                                            in_session_id,
                                            in_transaction_id
                                       )
                                       );*/

          v_policy_trx_process_date := coalesce
                                       (
                                            in_current_date_time,   -- DDWIPRDSUP-2245
                                            v_current_date_time,
                                            pkg_os_time.fn_os_sysdate
                                            (
                                                 in_session_id,
                                                 in_transaction_id
                                            )
                                       );
     else
          /*v_policy_trx_process_date := nvl
                                       (in_current_date_time,  -- DDWIPRDSUP-2245
                                       pkg_db_functions.fn_get_policy_current_date
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_master_policy_id
                                       )
                                       );*/
          v_policy_trx_process_date := coalesce
                                       (
                                            in_current_date_time,  -- DDWIPRDSUP-2245
                                            v_current_date_time,
                                            pkg_db_functions.fn_get_policy_current_date
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_master_policy_id
                                            )
                                       );
          --OSBILLING-7831 end
     end if;
     -- / OSBILLING-5440

     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --   OSBILLING-1018 While changing the payment plan, the number of instalments should be calculated from the transaction  effective date instead of
     --   the Image Effecive date, provided that the number of instalmets for the newly chosen payment plan fits in the available remaining term period.
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Instalment Count:' || in_overridden_plan_md_row.num_instalments
               ||' Policy Image Effective: ' || v_policy_image_eff_date
               ||' Policy Expiration:'||v_policy_image_exp_date
               ||' Transaction Effective Date:' || in_policy_trx_effective_date
               ||' Transaction Proceses Date:' || v_policy_trx_process_date
               ||' Cureent Date '||in_current_date_time
          );

     end if;

     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     Calculate billing period and due dates ... VG@@@: Review stopped here.
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

     if in_overridden_plan_md_row.num_instalments is not null and in_overridden_plan_md_row.num_instalments >0
     then

          --OSPRODUCT-2424 start
          if 
               nvl
               (
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id,
                         pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                     ),
                     pkg_db_multipayer.genum_No
               ) = pkg_db_multipayer.genum_No 
          then
              
               v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             gbv_PolicyRefChosenPlan
                                        );

          else

               v_current_payer := pkg_os_object.fn_object_parent_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_payment_plan_id
                                  );
               
               v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_current_payer,
                                             pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                        );
          end if;
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Policy Transaction Current Transaction Type: ' || v_pol_trx_curr_trxn_type
                    ||' Chosen Payment Plan: ' || v_chosen_payment_plan
               );

          end if;
          
          --OSPRODUCT-4611 start
          if in_overridden_plan_md_row.nonlinear_interval_fla is not null then
               v_num_inst := in_overridden_plan_md_row.num_instalments;
               while v_num_inst > 0
               loop
                    v_schedule_interval := v_schedule_interval + fn_schedule_interval_get(in_session_id, in_transaction_id, in_overridden_plan_md_row, in_policy_trx_effective_date,v_num_inst);
                    v_num_inst := v_num_inst-1;
               end loop;
          else
               v_schedule_interval := fn_schedule_interval_get(in_session_id, in_transaction_id, in_overridden_plan_md_row, in_policy_trx_effective_date,(in_overridden_plan_md_row.num_instalments+1));
               v_install_start_date := fn_calendar_days_add(in_session_id,in_transaction_id,v_policy_image_exp_date,(-1 * v_schedule_interval),in_overridden_plan_md_row.nonlinear_interval_fla_units); 
               v_installment_interval := fn_schedule_interval_get(in_session_id, in_transaction_id, in_overridden_plan_md_row, in_policy_trx_effective_date,(in_overridden_plan_md_row.num_instalments));
               v_install_end_date := v_install_start_date + v_installment_interval;
               if v_install_end_date < in_policy_trx_effective_date then
                    v_schedule_interval := v_installment_interval;
               end if;
          end if;
          --OSPRODUCT-4611 end  
 
          if 
               v_pol_trx_curr_trxn_type = gTrxType_Endorse 
          and 
               v_chosen_payment_plan <> in_payment_plan_id 
          --OSPRODUCT-4611 start

          then

          if -- KR CR
               v_policy_image_exp_date < fn_calendar_days_add(in_session_id     => in_session_id,
                                                              in_transaction_id => in_transaction_id,
                                                              in_date           => in_policy_trx_effective_date,
                                                              in_period         => v_schedule_interval,
                                                              in_units          => in_overridden_plan_md_row.nonlinear_interval_fla_units ) 
              
           and   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id , gbv_ptp_cpp_term_start_ind) is null
           then
               
               v_policy_image_eff_date := fn_calendar_days_add(in_session_id     => in_session_id,
                                                               in_transaction_id => in_transaction_id,
                                                               in_date           => v_policy_image_exp_date,
                                                               in_period         => (-1 * v_schedule_interval),
                                                               in_units          => in_overridden_plan_md_row.nonlinear_interval_fla_units );

          

          end if; -- KR CR


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...v_install_start_date: ' || v_install_start_date
                         ||' v_installment_interval: ' || v_installment_interval
                         ||' v_install_end_date: ' || v_install_end_date
                         ||' v_schedule_interval: ' || v_schedule_interval
                         ||' v_policy_image_eff_date: ' || v_policy_image_eff_date
                    );

               end if;
          --OSPRODUCT-4611 end
               sp_calculate_due_dates
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    in_policy_transaction_id,
                    in_overridden_plan_md_row,
                    in_overridden_plan_md_row.num_instalments,
     --               in_policy_trx_effective_date, --v_policy_image_eff_date,  
                    v_policy_image_eff_date,
                    v_policy_trx_process_date,
                    v_policy_image_exp_date,
                    in_next_installment_date,
                    v_actual_due_date_list,
                    v_actual_end_date_list,
                    v_billing_due_date_list,
                    v_withdrawal_date_list,
                    in_start_installment_number
               );
          else  --OSPRODUCT-2424 end
               sp_calculate_due_dates
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    in_policy_transaction_id,
                    in_overridden_plan_md_row,
                    in_overridden_plan_md_row.num_instalments,
                    in_policy_trx_effective_date, --v_policy_image_eff_date,
                    v_policy_trx_process_date,
                    v_policy_image_exp_date,
                    in_next_installment_date,
                    v_actual_due_date_list,
                    v_actual_end_date_list,
                    v_billing_due_date_list,
                    v_withdrawal_date_list,
                    in_start_installment_number
               );
          end if;  --OSPRODUCT-2424



          ------------------------------------------------------------------------------------------------------------------------------------------------------
          --
          --     New create ScheduledPayment objects ...
          --
          ------------------------------------------------------------------------------------------------------------------------------------------------------

          if in_start_installment_number is not null
               then

          for v_installment_number in in_start_installment_number .. in_overridden_plan_md_row.num_instalments -- OSBILLING-331
          loop

               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Creating a ScheduledPayment Object for Installment Number:'||v_installment_number
                    );
               end if;

               --
               --    Create PaymentPlanScheduledPayment object
               --

               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_ScheduledPayment,
                    in_payment_plan_id,
                    v_scheduled_payment_id
               );

               --
               --     Figure out the issue date ...
               --

               if v_installment_number = in_start_installment_number
               then

                    v_invoice_issue_date := v_actual_due_date_list(v_installment_number) - nvl(in_overridden_plan_md_row.down_payment_offset_days, 0);

               else

                    v_invoice_issue_date := v_actual_due_date_list(v_installment_number) - nvl(in_overridden_plan_md_row.other_payment_offset_days, 0);

               end if;


               --
               --  Set the BVs
               --

               v_bv_table.delete;

               v_bv_table ( gbv_ScheduledPayment_num   ).business_variable_value := v_installment_number;
               v_bv_table ( gbv_scheduled_payment_type ).business_variable_value := gScheduledPayType_Installment;
               v_bv_table ( gbv_actual_due_date        ).business_variable_value := to_char(v_actual_due_date_list(v_installment_number),     pkg_os_constant.DragonDateFormatDefault );
               v_bv_table ( gbv_actual_end_date        ).business_variable_value := to_char(v_actual_end_date_list(v_installment_number),     pkg_os_constant.DragonDateFormatDefault );
               v_bv_table ( gbv_billing_due_date       ).business_variable_value := to_char(v_billing_due_date_list(v_installment_number),     pkg_os_constant.DragonDateFormatDefault );
               v_bv_table ( gbv_billing_issue_date     ).business_variable_value := to_char(v_invoice_issue_date,                              pkg_os_constant.DragonDateFormatDefault );
               v_bv_table ( gbv_billing_withdr_date    ).business_variable_value := to_char(v_withdrawal_date_list(v_installment_number),     pkg_os_constant.DragonDateFormatDefault );

               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...... '
                         ||' Created ScheduledPayment Object ID '||v_scheduled_payment_id
                         ||' Installment Number:'||v_installment_number
                         ||' ActualDueDate:'||v_actual_due_date_list(v_installment_number)
                         ||' ActualEndDate:'||v_actual_end_date_list(v_installment_number)
                         ||' BillingDueDate:'||v_billing_due_date_list(v_installment_number)
                    );

               end if;

               --
               -- Set BVs Installment Number, Actual Due Date and Billing Due Date
               -- for PaymentPlanScheduledPayment object
               --

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_scheduled_payment_id,
                    v_bv_table
               );

          end loop; -- for each theoretical installment ...

          END IF;
     end if;

end sp_populate_plan_anew;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_purge_scheduled_payments
--
--   %USAGE
--        If generating a payment plan for a transaction which begins a term, we can get rid of any dead-wood left over from the prior term.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_purge_scheduled_payments
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_payment_plan_id                 in             object.object_id%type,
     io_payment_count                   in out         number
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_purge_scheduled_payments';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch_index                   number;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '||| Purging scheduled payments for PaymentPlanID:'||in_payment_plan_id );

     end if;

     --
     --  Get the children of type PaymentSchedule of Chosen Payment Plan
     --  !!!VG - this is messed up!
     --

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gObjType_ScheduledPayment,
          v_pymntsch_list
     );

      v_pymntsch_index := v_pymntsch_list.first;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Number of Scheduled Payments found:'||v_pymntsch_list.count );

     end if;

     while v_pymntsch_index is not null loop

          pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               v_pymntsch_list( v_pymntsch_index ),
               gObjType_ScheduledPayment,
               null,
               false
          );

          v_pymntsch_index := v_pymntsch_list.next( v_pymntsch_index );

     end loop;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Purging complete ... ');

     end if;

     io_payment_count := 0;

end sp_purge_scheduled_payments;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_purge_outdated_stubs
--
--   %USAGE
--        If generating a payment plan for a transaction, we can get rid of any stub payments associated with prior transactions.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_purge_outdated_stubs
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_payment_plan_id                 in             object.object_id%type
) as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_purge_outdated_stubs';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch_index                   number;
     v_current_trx_stub_id              object.object_id%type;

     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_scheduled_element_index          number;
     v_ref_terminst                     object.object_id%type;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '||| Purging outdated stubs for PaymentPlanID:'||in_payment_plan_id );

     end if;


     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gObjType_ScheduledPayment,
          v_pymntsch_list
     );

      v_pymntsch_index := v_pymntsch_list.first;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Number of Payments found:'||v_pymntsch_list.count );
     end if;

     v_current_trx_stub_id := pkg_Os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... v_current_trx_stub_id =  '||v_current_trx_stub_id);
     end if;

     while v_pymntsch_index is not null loop

          if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_pymntsch_list( v_pymntsch_index ), gbv_scheduled_payment_type ) = gScheduledPayType_Stub
          then
                    --OSBILLING-1798
               v_ref_terminst:= pkg_os_object_io.fn_object_bv_get
                                               (
                                                in_session_id,
                                                in_transaction_id,
                                                v_pymntsch_list( v_pymntsch_index ),
                                                gbv_ScheduledRefInstallment-- Related installment ref from schedule to term
                                               );
               if v_ref_terminst is null
               then
                         --
                         --     This stub is outdated, outmoded, and therefore must be defenestrated ...
                         --


                    if v_current_trx_stub_id is null or  v_pymntsch_list( v_pymntsch_index ) <> v_current_trx_stub_id then

                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Deleting outdated stub:'||v_pymntsch_list( v_pymntsch_index ) );

                         end if;

                         pkg_os_object.sp_object_delete
                         (
                              in_session_id,
                              in_transaction_id,
                              in_payment_plan_id,
                              v_pymntsch_list( v_pymntsch_index ),
                              gObjType_ScheduledPayment,
                              null,
                              false
                         );

                    elsif v_pymntsch_list( v_pymntsch_index ) = v_current_trx_stub_id
                    then
                         --
                         --     Delete any existing payment elements, since we'll be regenerating these anyway ...
                         --

                         pkg_os_object_search.sp_object_children_of_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_pymntsch_list( v_pymntsch_index ),
                              gObjType_ScheduledElement,
                              v_scheduled_element_list
                         );

                         if v_scheduled_element_list.count > 0 and v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Deleting Stub Elements');

                         end if;

                         v_scheduled_element_index := v_scheduled_element_list.first;

                         while v_scheduled_element_index is not null loop

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_pymntsch_list( v_pymntsch_index ),
                                    v_scheduled_element_list( v_scheduled_element_index ),
                                   gObjType_ScheduledElement,
                                   null,
                                   false
                              );

                              v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                         end loop;

                    end if;

               end if;

          end if; --OSBILLING-1798
          v_pymntsch_index := v_pymntsch_list.next( v_pymntsch_index );

     end loop;


     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Stub Purging complete ... ');
     end if;

end sp_purge_outdated_stubs;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_load_sched_payment_cache
--
-- %USAGE
--        This procedure loads the ScheduledPayment Cache
--
-- %ALGORITHM
--        1. For the given Payment Plan Object ID, get all the children of type PaymentPlanScheduledPayment which are of type Installment
--        2. If count is greater than 1 then loop through each Scheduled Payment and do the following:
--           a. Get Installment Number
--           b. Get Actual Due Date
--           c. Form a master key as a combination of PaymentPlan Object ID, Payment Plan MD ID, Installment Number and Actual Due Date
--           d. Populate the Scheduled Payment Cache
--           e. For the given PaymentPlanScheduledPayment, get all the children of type PaymentPlanScheduledPaymentElement
--           f. If count is greater then 1, then loop through each Scheduled Payment Element and do the following:
--              i. Get the FItem referred by this Scheduled Payment Element
--              ii. If the reference is null then do the following
--                  - Get the Billing Element MD ID
--                  - Get the Coverage Object ID
--                  - Form a master key as a combination of Scheduled Payment Object ID, Coverage Object ID and Billing Element MD ID
--                  - Populate the Scheduled Payment Element Cache
--
--
--   %PARAM    in_session_id                    Session Id
--   %PARAM    in_transaction_id                Transaction Id
--   %PARAM    in_chosen_payment_plan_id        Choosen Payment Plan
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_load_sched_payment_cache
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_chosen_payment_plan_id          in             object.object_id%type,
     io_scheduled_payment_count         in out         number
)
as

     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_load_sched_payment_cache';

     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_temp_scheduled_payment_list      pkg_os_object.t_object_list;
     v_temp_scheduled_payment_index     number;
     v_scheduled_payment_index          number;
     v_scheduled_installment_num        object_bv_value.business_variable_value%type;
     v_scheduled_actual_due_date        object_bv_value.business_variable_value%type;
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_scheduled_element_index          number;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_coverage_object_id               object.object_id%type;
     v_scheduled_pay_fitem              object.object_id%type;
     v_payment_plan_md_id               object.object_id%type;

     v_master_key                       varchar2(500);
     v_element_master_key               varchar2(500);
     v_element_amount                   float;
     v_refernce_creator_pt_id           object.object_id%type;  --OSPRODUCT-5367

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Caching existing PaymentPlanScheduledPayment objects...'
          );
     end if;

     v_payment_plan_md_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_chosen_payment_plan_id,
          pkg_os_constant_bv.gbv_PaymentPlanID
     );

    /*v_scheduled_payment_list.delete;*/

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_chosen_payment_plan_id,
          gObjType_ScheduledPayment,
          v_scheduled_payment_list,
          gbv_actual_due_date,
          false  ,
           gRule_Installment -- !!!VG - replace with an if statement ....
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of PaymentPlanScheduledPayment objects found:'||v_scheduled_payment_list.count
               ||'  for chosen Payment plan: '||in_chosen_payment_plan_id
          );
     end if;

     io_scheduled_payment_count := 0;

     if v_scheduled_payment_list.count > 0
     then

          v_scheduled_payment_index    :=    v_scheduled_payment_list.first;

          while v_scheduled_payment_index is not null loop

               v_scheduled_installment_num  :=     pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_scheduled_payment_list(v_scheduled_payment_index),
                                                        gbv_ScheduledPayment_num
                                                   );

               v_scheduled_actual_due_date  :=     pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_scheduled_payment_list(v_scheduled_payment_index),
                                                        gbv_actual_due_date
                                                   );
               --
               --     Cache installment IDs by installment number ...
               --

               g_payment_cache( v_scheduled_installment_num ) := v_scheduled_payment_list(v_scheduled_payment_index);

               --
               --     Cache installments by a more complex cache index ... (!!!VG why?)
               --

               v_master_key                 :=     in_chosen_payment_plan_id||','||
                                                   v_payment_plan_md_id||','||
                                                   v_scheduled_installment_num||','||
                                                   v_scheduled_actual_due_date;

               g_scheduled_payment_cache(v_master_key) := v_scheduled_payment_list(v_scheduled_payment_index);

               io_scheduled_payment_count := io_scheduled_payment_count + 1;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Updating Cache using ScheduledPayment ID: '
                         ||v_scheduled_payment_list(v_scheduled_payment_index)
                         ||' with Master Key: '
                         ||v_master_key
                         ||' Cached Object ID: '
                         ||g_scheduled_payment_cache(v_master_key)
                    );
               end if;

               v_scheduled_element_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_scheduled_payment_list(v_scheduled_payment_index),
                    gObjType_ScheduledElement,
                    v_scheduled_element_list
               );

               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... For PaymentPlanScheduledPayment Object ID: '
                         ||v_scheduled_payment_list(v_scheduled_payment_index)
                         ||', number of PaymentPlanScheduledPaymentElement objects found: '
                         ||v_scheduled_element_list.count
                    );
               end if;

               if v_scheduled_element_list.count > 0
               then

                    v_scheduled_element_index := v_scheduled_element_list.first;

                    while v_scheduled_element_index is not null loop

                         v_scheduled_pay_fitem      := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_scheduled_element_list(v_scheduled_element_index),
                                                            gbv_ScheduleElementFitem_id
                                                       );
/*
                         if pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, v_scheduled_element_list(v_scheduled_element_index)) = v_scheduled_element_list(v_scheduled_element_index)
                         then

                              --     Do nothing, since this belongs to the prior transaction ...

                              null;

                         els*/

                         if v_scheduled_pay_fitem is null
                         then

                              v_billing_element_md_id  :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_billing_element_id
                                                            );

                              v_coverage_object_id     :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_ScheduledElementRefAsset
                                                            );

                              /*v_element_master_key          := v_scheduled_payment_list(v_scheduled_payment_index)||'-'||
                                                                 v_coverage_object_id||'-'||
                                                                 v_billing_element_md_id;

                              v_element_master_key          := trim(v_element_master_key);*/

                              v_element_amount               := pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_element_amount
                                                            );
                              v_refernce_creator_pt_id      := pkg_os_object_io.fn_object_bv_get   --OSPRODUCT-5367
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 31983746 --_Reference_Creator PolicyTransaction
                                                            );                             

                              /*v_element_master_key         :=   v_scheduled_payment_list(v_scheduled_payment_index)||'-'||   --OSPRODUCT-5367
                                                                 v_coverage_object_id||'-'||
                                                                 v_billing_element_md_id||'-'||
                                                                 v_element_amount; -- Added element amount in Master Key Durgesh 03-10-12*/
                              v_element_master_key          :=   v_scheduled_payment_list(v_scheduled_payment_index)||'-'||   ----OSPRODUCT-5367
                                                                 v_coverage_object_id||'-'||
                                                                 v_billing_element_md_id||'-'||
                                                                 v_element_amount||'-'||  -- Added element amount in Master Key Durgesh 03-10-12
                                                                 v_refernce_creator_pt_id ;                                  

                              v_element_master_key          :=   trim(v_element_master_key);

                              g_scheduled_element_cache(v_element_master_key)      := v_scheduled_element_list(v_scheduled_element_index);

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Updating Cache using ScheduledPaymentElement ID: '||v_scheduled_element_list(v_scheduled_element_index)
                                        ||' with Master Key:'||v_element_master_key
                                        ||' Cached Object ID:'||g_scheduled_element_cache(v_element_master_key)
                                        ||' Amount:'||v_element_amount
                                   );

                              end if;

                         end if; -- if v_scheduled_pay_fitem is null

                         v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                    end loop;

               end if; -- if v_scheduled_element_list.count > 0

               v_scheduled_payment_index     :=     v_scheduled_payment_list.next(v_scheduled_payment_index);

          end loop;     -- while v_scheduled_payment_index is not null loop

     end if;  -- if v_scheduled_payment_list.count > 0

end sp_load_sched_payment_cache;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_clear_sched_payment_cache
--
-- %USAGE
--        This procedure clears the ScheduledPayment Cache
--
-- %ALGORITHM
--
--        Kill everything ...
--
--   %PARAM    in_session_id                    Session Id
--   %PARAM    in_transaction_id                Transaction Id

--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clear_sched_payment_cache
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type
) as

begin

     g_scheduled_payment_cache.delete;
     g_scheduled_element_cache.delete;
     g_payment_cache.delete;

end sp_clear_sched_payment_cache;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_determine_next_installment
--
--   %USAGE
--        Given a payplan, and a transaction effective date, find the first scheduled installment in the payplan that falls AFTER the
--        transaction effective date.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function sp_determine_next_installment
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_trx_id                   in             object.object_id%type,
     in_policy_trx_effective_date       in             date,
     in_policy_trx_process_date         in             date,
     in_payment_plan_row                in             getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_policy_cost_change              in             float,
     io_next_installment_id             in out         object.object_id%type,
     in_modify_payplan                  in             number default 2,
     in_is_a_new_term                   in             number    default 2,
     in_override_payplan_id             in number default null -- OSBILLING-6727
)  return number as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_determine_next_installment';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_image_id                  object.object_id%type    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_trx_id,gbv_PolicyTrxRefCoverages);
     v_scheduled_payment_index          number;

     v_next_installment_number          number;
     v_installment_number               number;
     v_current_payment_id               object.object_id%type;
     v_current_instalment_id            object.object_id%type;
     v_product_id                       object.object_id%type;
     v_filing_id                        object.object_id%type;
     v_current_instal_bal               number;
     v_scheduled_actual_due_date        date;
     v_withdrawal_date                  date;
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_trx_id, pkg_os_constant_bv.gbv_PolicyTranType );
     v_offset_period                    integer;
     v_offset_units                     time_unit.time_unit_id%type;
     v_ptp_id                           object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_policy_trx_id, 2276904);
     v_preferred_withdrawal_day         number := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_ptp_id, 32178446 );
    -- gBilling_ExcludePaidInstal         constant  pd_property_type.pd_property_type_id%type := 12946;
     --gBilling_ExcludeInvoicedInstal     constant  pd_property_type.pd_property_type_id%type := 13746;
     v_invoiced_tf                      number default 2;
     v_end_subtype_id                   number;
     v_billing_due_date                 date;  -- DDWIDEV-602
     v_greatest_due_date                date;  -- DDWIDEV-602
     v_midterm_trx_flag                 number := pkg_os_constant.gBoolean_False; --DDWIPRDSUP-2245

     v_PTOriginalProcessDate            object_bv_value.business_variable_value%type; -- OSPRODUCT-16984
     v_CX_policy_trx_id                 number;                                       -- OSPRODUCT-16984
     
     v_future_inst_invoiced_tf          number default 2; -- OSPRODUCT-22131

begin
     --
     --     Figure out the offset to be used ...
     --

      v_product_id             :=   pkg_os_product.fn_object_product_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_image_id
                                   );

     v_filing_id              :=   pkg_os_product.fn_policy_filing_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_image_id,
                                        v_product_id
                                   );

     v_scheduled_payment_index   := g_payment_cache.first;

     -- GCNA-2552  While determining the start instalment number for any endorsement need to consider the
     --            the down payment offset days and not the other payment offset days
     if v_transaction_type_id in (  pkg_os_constant.gPolicyTran_NewBusiness , pkg_os_constant.gPolicyTran_Endorsement)
     then

          v_offset_period := NVL(in_payment_plan_row.down_payment_offset_days,0);  -- OSBILLING-5120 Null handling
          v_offset_units  := NVL(in_payment_plan_row.down_payment_offset_units,0); -- OSBILLING-5120 Null handling

     else

          v_offset_period := NVL(in_payment_plan_row.other_payment_offset_days,0); -- OSBILLING-5120 Null handling
          v_offset_units  := NVL(in_payment_plan_row.inst_payment_offset_units,0); -- OSBILLING-5120 Null handling


     end if;

     --
     --     If giving a credit, we do not need to give the customer a 'grace' period. Instead, the credit can be administered immediately.
     --
     if v_transaction_type_id = pkg_os_constant.gPolicyTran_Endorsement and in_policy_cost_change < 0
     then

          v_offset_period := 0;

     end if;

     v_end_subtype_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_trx_id,
                                             gbv_policytrx_subtype
                                           );

     if (v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_Audit
            Or (v_transaction_type_id = pkg_os_constant.gPolicyTran_Endorsement And v_end_subtype_id in (gEndSubType_ILRDefPrem, gEndSubType_PLRDefPrem )) )
     then

          return v_next_installment_number;
     else
          -- OSPRODUCT-16984
          -- Separate logic for Reinstatement without lapse : take the first installment ID from the corresponding Canacellation transaction.
          --
          if v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_Reinstatement
          then
               v_PTOriginalProcessDate := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               in_policy_trx_id,
                                               gbv_PTOriginalProcessDate 
                                          ); 
                                          
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Reinstatement Transaction ID '|| in_policy_trx_id||', Original Process Date= ' || v_PTOriginalProcessDate ||
                         '. If the Original Process Date is not null, this is a no-lapse Reinstatement'                         
                    );                      
               end if;
               
               if v_PTOriginalProcessDate is not null -- Assumption: if this BV is set for a Reinstatement transaction, this is a 'Reinstatement with no lapse'
                                                      -- Refer to the Action Rule ID 1816448
               then
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... for the no-lapse Reinstatement, taking the installment # from the corresponding CX transaction....'
                         );                      
                    end if;       
                             
                    -- get the corresponding Canacellation transaction.
                    v_CX_policy_trx_id := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               in_policy_trx_id,
                                               gbv_PolicyTrx_BasisRefTrx 
                                          );                   
                                       
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Cancelation Policy Transaction ID = ' || v_CX_policy_trx_id
                         );                                               
                    end if;   
                    
                    select 
                         min(fi.installment_number)
                    into 
                         v_installment_number
                    from 
                         dragon_fitem fi
                    where 
                         fi.policy_transaction_id = v_CX_policy_trx_id
                    and 
                         fi.fitem_type_id = pkg_db_billing.gFItem_Debit
                    and 
                         fi.installment_number = floor(fi.installment_number) -- do not consider stub
                    ;
                    
                    if v_installment_number is not null
                       and
                       g_payment_cache.exists(v_installment_number)
                    then
                         v_next_installment_number := v_installment_number;  -- as far as the v_next_installment_number is NOT NULL now, the 'common' logic  "LOOP g_payment_cache" will not be executed. 
                         
                         io_next_installment_id    := g_payment_cache(v_installment_number);                                                  
                         
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... First installment found for a no-lapse Reinstatement. Installment # ' || v_next_installment_number ||
                                   ', Scheduled Payment ID ' || io_next_installment_id
                              );                                               
                         end if;                          
                    else
                         v_installment_number := null; -- reset the v_installment_number as we are going to enter 'common' logic "LOOP g_payment_cache"
                         
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... WARNING:  for a no-lapse Reinstatement the Installment # '|| v_next_installment_number ||' is not found in the CACHE g_payment_cache'
                              );                                               
                         end if;                          
                    end if;
               else
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... This is a Reinstatement with lapse. The "common" logic will be executed to identify the installment #'
                         );                                               
                    end if;                
               end if;                                                                         
          end if;                                                    
          -- / OSPRODUCT-16984 

          --
          --     Now loop through the installments, and find the next logical installment ...
          --
          v_scheduled_payment_index   := g_payment_cache.first;

          while v_scheduled_payment_index is not null
                and
                v_next_installment_number is null
          loop

               v_current_payment_id          := g_payment_cache(v_scheduled_payment_index);

               v_scheduled_actual_due_date   := to_date
                                                  (
                                                       pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_current_payment_id,
                                                            gbv_actual_due_date


                                                       ),pkg_os_constant.DragonDateFormatDefault
                                                  );

               --
               --     We do not consider billing due date, because withdrawal date is a proxy for billing due date ... being equal to or greater than the billing due date, based on customer preferences on payment day of month.
               --

               v_withdrawal_date :=  to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_current_payment_id,
                                                  gbv_billing_withdr_date

                                             ),pkg_os_constant.DragonDateFormatDefault
                                        );

               -- Get billing due date
               -- DDWIDEV-602
               v_billing_due_date :=  to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_current_payment_id,
                                                  gbv_billing_due_date

                                             ),pkg_os_constant.DragonDateFormatDefault
                                        );

               --
               --  Get the installment number ...
               --

               v_installment_number := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_current_payment_id,
                                             gbv_ScheduledPayment_num
                                        );
               -- OSBILLING-336 Get the Instalment ID
               -- OSbilling-1397 : Replaced hard-coded values with constants.

               v_current_instalment_id := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_current_payment_id,
                                                  gbv_ScheduledRefInstallment--29705446
                                             );

               v_current_instal_bal  := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_current_instalment_id,
                                                  gbv_BusinessAmtCalculated--32080746
                                             );

               if in_override_payplan_id is not null then
                    --OSBILLING-6727

                    v_invoiced_tf := pkg_cs_db_payplan.fn_invoicing_status_get(in_session_id,
                                                                               in_transaction_id,
                                                                               in_policy_trx_id,
                                                                               trunc(in_policy_trx_effective_date),
                                                                               trunc(fn_calendar_days_add(in_session_id,
                                                                                                           in_transaction_id,
                                                                                                           in_policy_trx_process_date,
                                                                                                           v_offset_period,
                                                                                                           v_offset_units)),
                                                                               v_transaction_type_id,
                                                                               v_current_payment_id,
                                                                               greatest(trunc(v_billing_due_date),
                                                                                         trunc(v_withdrawal_date)));

               else

                    v_invoiced_tf := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                       in_transaction_id,
                                                                       v_current_instalment_id,
                                                                       gbv_installment_invoiced_tf);
               end if;

                
               -- OSPRODUCT-22131 Start
               v_future_inst_invoiced_tf := 2;
               
               if  nvl( v_invoiced_tf ,2) = 2 
               --and nvl(v_current_instal_bal,0) = 0 
               then 
                    
                    v_future_inst_invoiced_tf  := fn_future_inst_invoiced_tf
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_current_payment_id,
                                                       v_current_instalment_id
                                                  );
                    
               end if;
               -- OSPRODUCT-22131 End     


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Considering Scheduled Payment ID:'||v_current_payment_id
                         ||' Installment Number:'||v_installment_number
                         ||' Process Date:'||in_policy_trx_process_date
                         ||' Effective Date:'||in_policy_trx_effective_date
                         ||' Actual Due Date:'||v_scheduled_actual_due_date
                         ||' Billing Due Date :' ||v_billing_due_date         -- DDWIDEV-602
                         ||' Withdrawal Date:'||v_withdrawal_date
                         ||' First Comp:'|| in_policy_trx_effective_date
                         ||' Second Comp:'||fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_offset_period, v_offset_units )
                         ||' Index:'||v_scheduled_payment_index
                         || 'curent Instalment Bal' || v_current_instal_bal
                         ||'PolicyTrx Effective Date'|| in_policy_trx_effective_date
                         ||'PolicyTrx Process Date ' || in_policy_trx_process_date
                         ||'Modify Payplan indicator'||in_modify_payplan
                         ||'Current Instalment ID ' || v_current_instalment_id
                    );
               end if;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... trunc(v_withdrawal_date)'||trunc(v_withdrawal_date)
                         || 'trunc(in_policy_trx_effective_date)'||trunc(in_policy_trx_effective_date)
                         || 'trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date,   v_offset_period, v_offset_units ))'||trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date,   v_offset_period, v_offset_units ))
                         ||'trunc(v_scheduled_actual_due_date)'||trunc(v_scheduled_actual_due_date)
                         ||'trunc(v_scheduled_actual_due_date)'||trunc(v_scheduled_actual_due_date)
                         ||'nvl(v_current_instal_bal,0)'||nvl(v_current_instal_bal,0)
                         ||'gBilling_ExcludePaidInstal'||pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludePaidInstal)
                         ||'in_modify_payplan'||in_modify_payplan
                         ||'v_transaction_type_id'||v_transaction_type_id
                         ||' gBilling_ExcludeInvoicedInstal'|| pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludeInvoicedInstal)
                         ||'v_invoiced_tf'||v_invoiced_tf
                         ||' v_future_inst_invoiced_tf:' || v_future_inst_invoiced_tf -- OSPRODUCT-22131
                    );
               end if;

              --
              --  If this installment is such, that
              --  - The withdrawal date is after the effective date + offset
              --  - The withdrawal date is after the process date + offset
              --  - The actual due (theoretical due) date is after the process date

              --
              --Gyan
              v_greatest_due_date :=  greatest(trunc(v_billing_due_date),trunc(v_withdrawal_date));

              if  trunc(v_scheduled_actual_due_date) <  trunc(in_policy_trx_effective_date) then  --DDWIPRDSUP-2245
                  v_midterm_trx_flag := pkg_os_constant.gBoolean_True;
              end if;

               --if trunc(v_withdrawal_date)                >= trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_effective_date, v_offset_period, v_offset_units ))
               --
               -- GK: Commented the above condition as part of OSBILLING-3872, as we do not add offets to Effective Date for comparision against Process + Offset
               --
               if -- trunc(v_withdrawal_date)                >= trunc(in_policy_trx_effective_date) -- DDWIDEV-602
                     trunc(v_greatest_due_date)               >= trunc(in_policy_trx_effective_date) -- DDWIDEV-602
               and
                  -- trunc(v_withdrawal_date)                >= trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date,   v_offset_period, v_offset_units )) -- DDWIDEV-602
                    (( --DDWIPRDSUP-2245
                      v_midterm_trx_flag =  pkg_os_constant.gBoolean_False and
                      trunc(v_greatest_due_date)              >= trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date,   v_offset_period, v_offset_units )) -- DDWIDEV-602
                      )
                     or
                     (
                      v_midterm_trx_flag =  pkg_os_constant.gBoolean_True and
                      trunc(v_greatest_due_date)              > trunc(fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date,   v_offset_period, v_offset_units )) -- DDWIDEV-602
                     )) --DDWIPRDSUP-2245
                    -- DDWIDEV-216 end
               --@Keerthi Updating this condition as per discussion with ashish /Durgesh for ticket OSBILLING-1143/650 and also to address the late booked one
               and (
                     trunc(v_scheduled_actual_due_date)      >= trunc(in_policy_trx_process_date) and in_is_a_new_term =  pkg_os_constant.gBoolean_True
                     or
                     in_is_a_new_term =  pkg_os_constant.gBoolean_False
                   )
               and
                  ( -- OSBILLING-336 : To exclude paid instalments while adjustments for endorsements
                     (
                        (
                              (
                                    nvl(v_current_instal_bal,0) <> 0
                                    and
                                    nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludePaidInstal),'F') = 'T'
                                    and
                                    in_modify_payplan = 2
                                    and
                                    v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                               )
                               or
                               (
                                    v_transaction_type_id <> pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                               )

                        )
                        or
                               nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludePaidInstal),'F') = 'F'
                      )
                 or
                     in_modify_payplan = 1
                 or
                     v_transaction_type_id in (pkg_os_policy_transaction.gPolicyTrxType_NewBusiness)
                 ) -- OSBILLING-336    */
               and
                -- OSBILLING-250 Exclude Invoiced Instalment based on a property # 13746
                 (
                     (
                          nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludeInvoicedInstal),'F') = 'T'
                          and
                          nvl( v_invoiced_tf ,2) = 2
                          and 
                          nvl(v_future_inst_invoiced_tf ,2) = 2 --OSPRODUCT-22131
                     )
                     or
                     (
                          nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_ExcludeInvoicedInstal),'F') = 'F'
                     )
                )
               then

                    v_next_installment_number := v_installment_number;
                    io_next_installment_id    := g_payment_cache(v_scheduled_payment_index);

                    if v_session_control.gLogging_Full
                    then
                        pkg_os_logging.sp_log
                         (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... v_next_installment_number:'||v_next_installment_number
                         ||' v_scheduled_actual_due_date:'||v_scheduled_actual_due_date
                         ||' in_policy_trx_effective_date'||in_policy_trx_effective_date
                         ||' Index:'||v_scheduled_payment_index
                         );
                   end if;

              end if;

              v_scheduled_payment_index := g_payment_cache.next( v_scheduled_payment_index );

          end loop;
     end if;


     return v_next_installment_number;

end sp_determine_next_installment;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_determine_installment_id
--
--   %USAGE
--        Given an installment number, look up the ID of the corresponding installment object from the local package cache.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_payment_plan_id                  The payment plan whose children installments we'll be searching.
--   %PARAM    in_policy_trx_effective_date        The payment plan whose children installments we'll be searching.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_determine_installment_id
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_installment_number              in             integer

) return number as

     v_procedure_name                   constant         system_log.program_name%type := pkg_name||'fn_determine_installment_id';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_scheduled_payment_index          number;
     v_installment_number               number;
     v_current_payment_id               object.object_id%type;

begin


     v_scheduled_payment_index   := g_payment_cache.first;

     while v_scheduled_payment_index is not null loop

          v_current_payment_id          := g_payment_cache(v_scheduled_payment_index);

          --
          --  Get the installment number ...
          --

          v_installment_number := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_current_payment_id,
                                        gbv_ScheduledPayment_num
                                   );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Considering Scheduled Payment ID: '||v_current_payment_id
                    ||' Installment Number:'||v_installment_number
               );
          end if;


          if in_installment_number = v_installment_number
          then

               return v_current_payment_id;

          end if;

          v_scheduled_payment_index := g_payment_cache.next( v_scheduled_payment_index );

     end loop;

     return null;

end fn_determine_installment_id;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_stub_sequence
--
--   %USAGE
--        A stub is 'based' on a scheduled payment in that it is preceded by the scheduled payment and shares the scheduled payment's
--          billing period.
--
--          Since we may create multiple stubs based on a scheduled payment, these need to be distinguished by a sequence number.
--
--          This function uses an attribute sitting in the scheduled-payment object as a high-water mark for determining the sequence number
--          of a stub.
--
--          Having returned a unique number, it also increments the high-water mark, which is a good design no-no, but hey, life is short.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_stub_sequence
(
     in_session_id                    object.object_id%type,
     in_transaction_id                object.object_id%type,
     in_base_installment_id           object.object_id%type,
     in_payment_plan_id               object.object_id%type default null

) return number is

     v_sequence_number               number;

begin

     if in_base_installment_id is not null
     then

          v_sequence_number := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_base_installment_id, gbv_SchedPayment_Stubs_Cnt );

     else

          v_sequence_number := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PayPlan_DefStubsCount );

     end if;

     if v_sequence_number is null then

          v_sequence_number := 1;

     else

          v_sequence_number := v_sequence_number + 1;

     end if;

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          'fn_get_stub_sequence',
          '....... Sequence Number: ' || v_sequence_number
     );

     return v_sequence_number;

end fn_get_stub_sequence;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_determine_first_installment
--
--   %USAGE
--        Determine the installment from which we will start our payment schedule calculations. The assumption is that sometimes, we'll be starting
--        with the first installment, say in the case of new business. In the case of mid-term transactions some installment dates may alreay be in
--        the past, so we might start from an installment number > 1.
--
--        Finally, a stub might be needed if the mid-term transaction has caused a lack of equity. If so, a stub payment object will be set up.
--        Consider the option of whether to Spread the Premium Change or collect in Full based on SPREAD_TF configuration

--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_determine_first_installment
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     in_policy_trx_id                   in             object.object_id%type,
     in_payment_plan_id                 in             object.object_id%type,
     in_policy_trx_effective_date       in             date,
     in_is_a_new_term                   in             number,
     in_current_date_time               in             date,
     io_start_installment_number        in out         number,
     io_stub_payment_id                 in out         object.object_id%type,
     io_transaction_spread_tf           in out         char, -- OSBILLING-3689
     io_transaction_amnt_next_nid       in out         char, -- OSBILLING-4232
     in_modify_payplan                  in             number default 2,
     in_override_payplan_id             in number default null, -- OSBILLING-6727
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type   --OSPRODUCT-15833
) as
     v_procedure_name                   constant         system_log.program_name%type := pkg_name||'sp_determine_first_installment';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_md_payplan_create_stub           payment_plan.stub_create_tf%type;--  pd_property.pd_property_value%type;
     v_md_payplan_spread_tf             payment_plan.spread_tf%type;
     v_existing_payment_count           number := 0;


     v_override_create_stub             lookup_list_value.lookup_enum%type;
     v_override_spread_amnt             lookup_list_value.lookup_enum%type;

     v_late_booked_pay_upfront          object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PayPlan_LateBookUpfront );
     v_is_stub_needed                   number;
     v_is_spread_needed                 number;

     v_policy_rolled_date              date;-- consider policy advance
     v_master_policy_id                 object.object_id%type;

     v_stub_installment_number          number;
     v_last_installment_number          object.object_id%type;
     v_stub_sequence_number             number;
     v_current_stub_count               number;

     v_next_installment_id              object.object_id%type;
     v_prev_installment_number          number;
     v_prev_installment_id              object.object_id%type;
     v_prev_installment_inv_date        date;
     v_prev_installment_end_date        date;

     v_stub_billing_due_date            date;
     v_stub_withdrawal_date             date;
     v_old_stub_payment_id              object.object_id%type;
     v_scheduled_payment_id             object.object_id%type;
     v_related_instal_id                object.object_id%type;
     v_payment_plan_md_id               payment_plan.payment_plan_id%type;
     v_payment_plan_md_row              getPaymentPlanList%rowtype;--OSPRODUCT-3108

     v_invoice_issue_date               date;

     v_policy_image_exp_date            date;
     v_policy_trx_process_date          date;

     v_down_payment_offset_period       number;
     v_other_payment_offset_period      number;
     v_stub_payment_offset_period       number;

     v_down_payment_offset_units        number;
     v_other_payment_offset_units       number;
     v_stub_payment_offset_units        number;

     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;

     v_last_trx_policy_cost             float;
     v_curr_trx_policy_cost             float;
     v_policy_cost_change               float;

     v_ref_basis_transaction            object_bv_value.business_variable_value%type;

     v_preferred_payment_day            integer := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Preferred_Pay_Day );
     v_next_invoice_date                date;
     v_stub_invoice_date                date;
     v_policy_term_id                   object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_trx_id, gbv_PolicyTrxRefPolicyTerm);
     v_is_stub_needed_PTP               number;
     v_is_spread_needed_PTP             number;
     v_ref_terminst_old                 object.object_id%type;
     v_is_stub_amnt_to_next_nid          number := pkg_os_constant.gBoolean_False ;
     v_is_stub_overriden_tf              number := pkg_os_constant.gBoolean_False ;
     v_calculate_due_dates_tf            char(1) := 'T';

     v_payplan_id_basis_coverage         object.object_id%type;
     v_max_installment_number            number;
     wrong_configuration                 exception;

     -- #MP
     v_idx                               long;
     v_ptp_payer_list                    PKG_DB_MULTIPAYER.t_payer_tab;
     v_payer_id                          object.object_id%type;
     v_policy_transaction_type           object_bv_value.business_variable_value%type;

     -- VAULTDEV-6539
    v_dominator_stub_sprd_objtype        number;
	v_term_payer_id                      object.object_id%type; --OSPRODUCT-14650

     function fn_dragon_boolean_nvl
     (
          in_bv_value   object_bv_value.business_variable_value%type,
          in_nvl_value  object_bv_value.business_variable_value%type default null
     )
     return object_bv_value.business_variable_value%type
     is
     begin
          return case when in_bv_value in (
                                           pkg_os_constant.gBoolean_Yes,
                                           pkg_os_constant.gBoolean_No
                                          )
                      then in_bv_value
                      else in_nvl_value  -- this is --Select-- value. Treat it as NULL by default.
                 end;
     end fn_dragon_boolean_nvl;
     --
begin

     -- #MP
     if PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
        (
             in_session_id,
             in_transaction_id,
             in_policy_image_id
        )
     then
          v_policy_transaction_type    :=    pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_policy_trx_id,
                                                  pkg_os_constant_bv.gbv_PolicyTranType
                                             );

          --
          --  get list of payers from Policy Image level
          --
           -- VAULTDEV-6645
       /* if v_policy_transaction_type in ( pkg_os_policy_transaction.gPolicyTrxType_NewBusiness, pkg_os_policy_transaction.gPolicyTrxType_Rewrite, pkg_os_policy_transaction.gPolicyTrxType_NBRewrite, pkg_os_policy_transaction.gPolicyTrxType_Renewal) -- VAULTDEV-8585
          then
               -- This is new business. Use can change payment plan, so reading from the cache casing splat as far as the chosen pay plan is being changed ever time
               --
               pkg_db_multipayer.sp_ptp_payers_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    in_ptp_object_id      => in_policy_image_id,
                    io_payer_list         => v_ptp_payer_list,
                    in_print_list         => 'Y',
                    in_index_by           => pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr
               );
          else
               -- We do not allow to chagne payment plan in PNBT transaciton, so read from cache to speed up processing.


               --*/

               pkg_db_multipayer.sp_ptp_payers_cache_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    io_cached_payer_lists => g_policy_payer_tab,
                    in_ptp_object_id      => in_policy_image_id,
                    io_payer_list         => v_ptp_payer_list,
                    in_print_list         => 'Y',
                    in_index_by           => pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr
               );
          --end if;


          if pkg_db_multipayer.fn_payer_exists
             (
                  in_session_id,
                  in_transaction_id,
                  in_related_id    => in_payment_plan_id,
                  io_payer_list    => v_ptp_payer_list,
                  out_idx          => v_idx
             )
          then
               v_payer_id := v_ptp_payer_list(v_idx).PayerEntity_object_id;
			   
			   v_term_payer_id := pkg_os_object_io.fn_object_bv_get    --OSPRODUCT-14650
								  (
									  in_session_id,
									  in_transaction_id,
									  v_ptp_payer_list(v_idx).PTPayer_object_id,
									  pkg_db_billing_modify.gbv_PTPayerAssociatedTerm
								   );
          else
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... ERROR: Not able to find a payer by chosen payment plan plan '|| in_payment_plan_id ||' under the Policy Image:'|| in_policy_image_id
               );

               raise no_data_found;
          end if;
          --OSPRODUCT-12035
          --v_dominator_stub_sprd_objtype    :=  gObjType_PayPlan;
          v_dominator_stub_sprd_objtype    :=  pkg_os_constant.gobjType_PolicyTrxPolicy; --  2276904

     else
          v_payer_id := NULL;

          v_dominator_stub_sprd_objtype    := pkg_os_constant.gobjType_PolicyTrxPolicy; --  2276904

     end if;


     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     Get information about the payment plan ...
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

     v_payment_plan_md_id :=   pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          pkg_os_constant_bv.gbv_PaymentPlanID
     );

     v_payment_plan_md_row                  :=   pkg_db_payplan_modify.fn_payment_plan_row(v_payment_plan_md_id);

     if v_session_control.gLogging_Full
     then

         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '||| Determining first installment for PaymentPlanID:'||in_payment_plan_id );

     end if;

     v_down_payment_offset_period       :=   nvl( v_payment_plan_md_row.down_payment_offset_days,   0 );
     v_other_payment_offset_period      :=   nvl( v_payment_plan_md_row.other_payment_offset_days,  0 );
     v_stub_payment_offset_period       :=   nvl( v_payment_plan_md_row.stub_payment_offset_time,   0 );

     --
     --   OSBILLING-263 : override the stub payment offset period if stub payment offset rule exists ...
     --

     if v_payment_plan_md_row.stub_payment_offset_rule is not null
     then

          v_stub_payment_offset_period := pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, in_policy_image_id, v_payment_plan_md_row.stub_payment_offset_rule );

          if v_stub_payment_offset_period is null then

               pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Override by rule on Stub Payment Offset Period is returning null ... RuleID:'||v_payment_plan_md_row.stub_payment_offset_rule||' PolicyImageID:'||in_policy_image_id );

               raise no_data_found;

          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Override by rule on Stub Payment Offset Period:'||v_stub_payment_offset_period );

          end if;

     end if;

     -- End OSBILLING-263 : override the stub payment offset period of stub payment offset rule is there.

     v_down_payment_offset_units          :=     nvl( v_payment_plan_md_row.down_payment_offset_units, gTimeUnit_Calendar_Day  );
     v_other_payment_offset_units         :=     nvl( v_payment_plan_md_row.inst_payment_offset_units, gTimeUnit_Calendar_Day  );
     v_stub_payment_offset_units          :=     nvl( v_payment_plan_md_row.stub_payment_offset_units, gTimeUnit_Calendar_Day  );

     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     Determine the change in policy cost ...
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

     -- Consider the policy advance date to generate stubs


     v_master_policy_id := pkg_os_object.fn_object_parent_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_trx_id
     );


     v_policy_rolled_date := to_date
                              (
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_master_policy_id,
                                        gbv_PolicyRolledDate
                                   ),pkg_os_constant.DragonDateFormatDefault
                              );

     -- VAULTDEV-8585 Keerthi
     if v_payment_plan_md_row.next_nid_threshold_days is not null
	 and 
        v_term_payer_id is not null     --OSPRODUCT-14650
     then
     v_next_invoice_date :=   to_date
                              (
                                   pkg_db_stmt_date.fn_get_next_invoice_date
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_master_policy_id,
                                        v_policy_term_id,
                                        in_policy_transaction_id => null,
                                        in_instalment_number     => io_start_installment_number,
                                        in_lead_time_point_date  => null,
                                        -- #MP
                                        in_payer_id              => v_payer_id
                                   ),pkg_os_constant.DragonDateFormatDefault
                              );

     end if;

     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_trx_id,
                                        pkg_os_constant_bv.gbv_PolicyTranType
                                   );

     v_policy_trx_subtype_id  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_trx_id,
                                        gbv_PolicyTrx_SubType
                                   );

     v_ref_basis_transaction := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_trx_id,
                                     gbv_PolicyTrx_BasisRefTrx
                                );

  v_payplan_id_basis_coverage   := pkg_os_object_io.fn_object_bv_path_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_ref_basis_transaction,
                                             '212318.212021'
                                        );

     v_last_trx_policy_cost := round
                              (
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                      in_session_id,
                                      in_transaction_id,
                                      v_ref_basis_transaction,
                                      gbv_PolicyTrxCurrPremTotal
                                   ),
                                   2
                              );


     v_curr_trx_policy_cost     := round
                                   (
                                        pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_trx_id,
                                             gbv_PolicyTrxCurrPremTotal
                                        ),
                                        2
                                   );


     v_policy_cost_change := nvl( v_curr_trx_policy_cost, 0 ) - nvl( v_last_trx_policy_cost, 0 );
      -- OSBILLING-7005
     if fn_trx_starts_new_term(v_policy_trx_type_id)=1
          then
              v_stub_payment_offset_period := v_down_payment_offset_period;
     end if;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '... '
               ||' Master Policy ID:'||v_master_policy_id
               ||' Policy Trx Type ID:'||v_policy_trx_type_id
               ||' Policy Trx SubType ID:'||v_policy_trx_subtype_id
               ||' Current Trx Cost:'||v_curr_trx_policy_cost
               ||' Prior Trx Cost:' ||v_last_trx_policy_cost
               ||' Cost Change:' ||v_policy_cost_change
               ||' Late Booked - Pay Upfront:'||v_late_booked_pay_upfront
               || ' Next Invoice Date ' || v_next_invoice_date
               || ' Start Instalment Numebr ' || io_start_installment_number
          );

     end if;

     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --    OSBILLING-1839
     --    Initialize Spread And Stub BV's for The Payment Plan object
     --    First Check whether already set or not , if not then read the MD table and set the values;
     --
     --   @@@ Where are these BVs being set?
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

    v_is_spread_needed := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gbv_PayPlan_Spread_Indicator
     );
     v_is_spread_needed := fn_dragon_boolean_nvl(v_is_spread_needed);


     v_is_stub_needed := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gbv_PayPlan_Stub_Indicator
     );
     v_is_stub_needed := fn_dragon_boolean_nvl(v_is_stub_needed);

      if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Retrieved Spread and Stub Attributes from PaymentPlan Object. Stub:' ||v_is_stub_needed ||' Spread:'||v_is_spread_needed
          );

     end if;

     declare
     v_bor_flag	                 number := 0;
     v_rollsforward_pt     	       object.object_id%type;
     v_rollsforward_ptp              object.object_id%type;
     v_change_payer_option           number;
     begin
        --OSPRODUCT-20484       
          v_bor_flag := pkg_os_object_io.fn_object_bv_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_session_id,
                                32972548
                           );
                      
                                
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... BOR Flag:' || v_bor_flag
               );

          end if;
          
                                
       if nvl(v_bor_flag, 0) = 1  or v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement  then   --   OSPRODUCT-20484
                               
                 v_rollsforward_pt := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_policy_trx_id,
                                                 27922805
                                            );
                                            
                if v_bor_flag = 1 and pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id ,v_rollsforward_pt ,27922805 ) is not null
                then --OSPRODUCT-22243
                        v_rollsforward_pt := pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_rollsforward_pt,
                                                     27922805
                                                );
                                
                end if;
                
                                                 
                 v_rollsforward_ptp := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_rollsforward_pt,
                                                 212318
                                            );
                                            
      end if;                                            
                                            
                 if v_session_control.gLogging_Full
                 then

                      pkg_os_logging.sp_log
                      (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
                           '...  Rollsforward :'||v_rollsforward_pt ||
                           '... Rollsforward PTP: ' || v_rollsforward_ptp
                      );

                 end if;
                                  
                 if ( v_rollsforward_pt is not null and ( nvl(v_bor_flag, 0) = 1 or v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement ))  then --OSPRODUCT-20484
                           
                      v_is_spread_needed_ptp := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_rollsforward_ptp,
                                                    gbv_PTP_Spread_Amount
                                               );
                                
                      v_is_stub_needed_ptp := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_rollsforward_ptp,
                                               gbv_PTP_Generate_Stub
                                          );
                                          
                      v_change_payer_option := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_rollsforward_ptp,
                                                    pkg_db_constant.gbv_PTP_ChangePayerAmountOpt
                                               );
                                               
                      if v_session_control.gLogging_Full
                      then

                           pkg_os_logging.sp_log
                           (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...Overriding stub spread from the old image as inside the BOR workflow..' ||
                                '...Spread amount? ' || v_is_spread_needed ||
                                '...Stub needed? '   || v_is_stub_needed ||
                                '...Change Payer Option: ' || v_change_payer_option
                           );

                      end if;
                           
                      pkg_os_object_io.sp_object_bv_set
                      (
                           in_session_id,
                           in_transaction_id,
                           in_policy_image_id,
                           gbv_PTP_Spread_Amount,
                           v_is_spread_needed_ptp --LXPRODUCT-542
                      );

                      pkg_os_object_io.sp_object_bv_set
                      (
                           in_session_id,
                           in_transaction_id,
                           in_policy_image_id,
                           gbv_PTP_Generate_Stub,
                           v_is_stub_needed_ptp --LXPRODUCT-542

                      );                     
                      
                      pkg_os_object_io.sp_object_bv_set
                      (
                           in_session_id,
                           in_transaction_id,
                           in_policy_image_id,
                           pkg_db_constant.gbv_PTP_ChangePayerAmountOpt,
                           v_change_payer_option
                                
                      );
                      
                      if v_session_control.gLogging_Full
                      then

                           pkg_os_logging.sp_log
                           (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...BV Set .'
                           );

                      end if;
                      
              
            
            else
                 
                 v_is_spread_needed_ptp := pkg_os_object_io.fn_object_bv_get
                 (
                      in_session_id,
                      in_transaction_id,
                      in_policy_image_id,
                      gbv_PTP_Spread_Amount
                 );

                 v_is_spread_needed_ptp := fn_dragon_boolean_nvl(v_is_spread_needed_ptp);
                 
                 v_is_stub_needed_ptp := pkg_os_object_io.fn_object_bv_get
                 (
                      in_session_id,
                      in_transaction_id,
                      in_policy_image_id,
                      gbv_PTP_Generate_Stub
                 );

                 v_is_stub_needed_ptp := fn_dragon_boolean_nvl(v_is_stub_needed_ptp);
                      
            end if;
                 

     
     end;
  
     -- VAULTDEV-6539
     if v_dominator_stub_sprd_objtype = pkg_os_constant.gobjType_PolicyTrxPolicy --2276904 -- PTP
     then

          if v_is_spread_needed_ptp is not null
          then

               v_is_spread_needed := v_is_spread_needed_ptp;

          end if;
          
     else
          
          if v_is_spread_needed is null and v_is_spread_needed_PTP is not null
          then
              v_is_spread_needed := v_is_spread_needed_ptp;
          end if;
          
     end if;

     -- OSBILLING-4232
     if v_is_stub_needed is not null and v_is_stub_needed_PTP is not null and v_is_stub_needed <> v_is_stub_needed_PTP --OSPRODUCT-2072
     then

        v_is_stub_overriden_tf  := pkg_os_constant.gBoolean_True;

     end if;
     -- OSBILLING-4232

     --OSBILLING-5138
     v_is_stub_overriden_tf := Pkg_Cs_Db_Payplan.fn_override_stub_tf(in_session_id,in_transaction_id,v_is_stub_overriden_tf);

     -- VAULTDEV-6539
     if v_dominator_stub_sprd_objtype = pkg_os_constant.gobjType_PolicyTrxPolicy --2276904 -- PTP
     then
          if v_is_stub_needed_ptp is not null
          then

               v_is_stub_needed := v_is_stub_needed_ptp;

          end if;

     else
          --if v_is_spread_needed is null and v_is_spread_needed_PTP is not null
          if v_is_stub_needed is null and v_is_stub_needed_PTP is not null --OSPRODUCT-12035
          then
             v_is_stub_needed := v_is_stub_needed_ptp;
          end if;
     end if;
     -- VAULTDEV-6539
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Retrieved Spread and Stub Attributes from PolicyImage Object. Stub:' ||v_is_stub_needed_ptp ||' Spread:'||v_is_spread_needed_ptp
          );

     end if;


     if v_is_spread_needed is null and v_is_stub_needed is null and v_is_spread_needed_ptp is null and v_is_stub_needed_ptp is null
     then
          --
          --   If these attributes have not been set yet in a prior call to this procedure, then set these attributes from the payment plan metadata ...
          --

          if (v_payment_plan_md_row.spread_rule_tf is not null)
          then

               v_md_payplan_spread_tf  := pkg_os_exp.fn_evaluate_expression
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_payment_plan_md_row.spread_rule_tf
               );
          else
               v_md_payplan_spread_tf := nvl(v_payment_plan_md_row.spread_tf, 'T');

          end if;

          if v_md_payplan_spread_tf = 'T'
          then
               v_is_spread_needed  := pkg_os_constant.gBoolean_True;
          else
               v_is_spread_needed  := pkg_os_constant.gBoolean_False;

          end if;

          --v_md_payplan_create_stub  :=  nvl(v_payment_plan_md_row.stub_create_tf,'F');  --OSPRODUCT-1413
            
            --OSPRODUCT-1413 start
          if (v_payment_plan_md_row.stub_creation_rule_id is not null)
          then

               v_md_payplan_create_stub  := pkg_os_exp.fn_evaluate_expression
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_payment_plan_md_row.stub_creation_rule_id
               );
          else
               v_md_payplan_create_stub  :=  nvl(v_payment_plan_md_row.stub_create_tf,'F');

          end if;

         --OSPRODUCT-1413 end

          if v_md_payplan_create_stub = 'T'
          then
               v_is_stub_needed  := pkg_os_constant.gBoolean_True;
          else
               v_is_stub_needed  := pkg_os_constant.gBoolean_False;
          end if;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               gbv_PayPlan_Spread_Indicator,
               v_is_spread_needed
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_payment_plan_id,
               gbv_PayPlan_Stub_Indicator,
               v_is_stub_needed
          );

          -- Initialize PTP objects to the default configuration

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Spread_Amount,
               v_is_spread_needed
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Generate_Stub,
               v_is_stub_needed
          );

     end if;



     ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     If a policy is late booked, then we have two choices:
     --
     --     Customer pays all premium already due upfront. We spread any overdue premium across the remaining installments.
     --
     ------------------------------------------------------------------------------------------------------------------------------------------------------

     if v_late_booked_pay_upfront is null
     then

          v_late_booked_pay_upfront := pkg_os_constant.gBoolean_True;

     end if;

     if in_is_a_new_term = pkg_os_constant.gBoolean_True
     then

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... New term, no stub needed.' );

          end if;

          v_is_stub_needed              :=  pkg_os_constant.gBoolean_False;
          v_is_spread_needed            :=  pkg_os_constant.gBoolean_True;

     end if;

      ------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --     Determine which installments we'll be modifying, and whether or not we need a stub ...
     --
     --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



     if in_is_a_new_term = pkg_os_constant.gBoolean_True and  ( v_late_booked_pay_upfront = pkg_os_constant.gBoolean_True or v_payment_plan_md_row.extend_payment_schedule_tf = 'T' )
     then

          --
          --     Since the customer was wicked, and delayed the processing of the policy, we'll pretend that it was processed on time, and hit him immediately with past due installments ...
          --

          io_start_installment_number := 1;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Late booked NB, customer fault, will pay all past due installments, start with original first installment ...' );

          end if;

     /*elsif (v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and v_policy_trx_subtype_id = gCommissionadj )
     then

          --
          --   If this is Commission Adjustment transaction, then start with the first installment
          --
          --
          --   @@@VG: Need to describe the logic and the business rationale ... prefer to externalize this, and simply call this entire proc with a mandated start installment number. (Gagan)
          --
          --
          io_start_installment_number      := 1;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Commission Adjustment, start with the first installment.'
               );

          end if;*/-- Commented Durgesh OSBILLING-3443

     elsif (v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and v_policy_trx_subtype_id = gTrxSubType_BillMethodChange)
     then

          --
          --   If this is Billing Method Change, then start with the minimum installment number (either stub or installment) having outstanding balance
          --

      -- OSBILLING-4818

          select
               min(dsi.installment_number)
          into
               io_start_installment_number
          from
               dragon_scheduled_installment dsi
          where
               dsi.policy_term_id = v_policy_term_id
          and
               dsi.policy_id = v_master_policy_id
          and
               (dsi.payment_plan_md_id = v_payment_plan_md_id or dsi.payment_plan_md_id is null) -- @@@ This needs to  be taken out ...
          and
                   (
                    dsi.balance_amount <> 0

                    or
                    not exists( select * from dragon_fitem where installment_id=dsi.installment_id and fitem_billed_tf=1)

                    )
               and
                   ( payment_plan_id=v_payplan_id_basis_coverage  or  payment_plan_id is null )

               ;
               v_last_installment_number :=pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_payment_plan_id,
                                             21795301
                                        );


               pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'io_start_installment_number: '|| io_start_installment_number ||
                         ', v_last_installment_number: '|| v_last_installment_number ||
                         ',in_payment_plan_id:'||in_payment_plan_id||
                         ',v_max_installment_number'||v_max_installment_number
                    );
               if io_start_installment_number is null or  v_last_installment_number < io_start_installment_number  then
                select
                    max(dsi.installment_number)
               into
                    v_max_installment_number
               from
                    dragon_scheduled_installment dsi
               where
                    dsi.policy_term_id = v_policy_term_id
               and
                    dsi.policy_id = v_master_policy_id
               and
                    (dsi.payment_plan_md_id = v_payment_plan_md_id or dsi.payment_plan_md_id is null) -- @@@ This needs to  be taken out ...
               ;

































                        pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Unable to identify a minimum installment number with outstanding balance for '||


                         'Master Policy ID: '|| v_master_policy_id ||
                         ', Policy Term ID: '|| v_policy_term_id ||
                         ', Payment Plan MD ID: '|| v_payment_plan_md_id||
                         ',v_max_installment_number:'||v_max_installment_number
                    );

              v_old_stub_payment_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub );

           v_ref_terminst_old:= pkg_os_object_io.fn_object_bv_get
                                                    (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_old_stub_payment_id,
                                                     gbv_ScheduledRefInstallment-- Related installment ref from schedule to term
                                                    );

              if v_old_stub_payment_id is not null and v_ref_terminst_old is null
               then

                    io_stub_payment_id := v_old_stub_payment_id;

               else
              pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_ScheduledPayment,
                         in_payment_plan_id,
                         io_stub_payment_id
                    );

                    v_stub_installment_number := v_last_installment_number;



               v_current_stub_count:=pkg_os_object_io.fn_object_bv_get
                                          (
                                           in_session_id,
                                           in_transaction_id,


                                           v_payplan_id_basis_coverage,
                                           34070946-- independent stub count
                                          );
               if( NVL(v_current_stub_count,0) =  0) then

                 v_current_stub_count :=  remainder(NVL(io_start_installment_number,v_max_installment_number),1)*10;

                 end if;

               if io_start_installment_number is null then

               v_stub_sequence_number := NVL( v_current_stub_count,0)+1;

               else
                    v_stub_sequence_number := NVL( v_current_stub_count,0);
               end if;

               v_is_stub_needed              := pkg_os_constant.gBoolean_True;
               v_is_spread_needed            := pkg_os_constant.gBoolean_False;

                   if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '...... '

                              ||' v_stub_sequence_number:'||v_stub_sequence_number
                         );
                    end if;

                    --
                    --     Set the reference from the Payment Plan to the current stub ...
                    --

                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub, io_stub_payment_id );
                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_payment_plan_id, 34070946, v_stub_sequence_number );

                    v_bv_table ( gbv_ScheduledPayment_num   ).business_variable_value      := v_stub_installment_number;
                    v_bv_table ( gbv_SchedPayment_Stub_Num  ).business_variable_value      := v_stub_sequence_number;
                    v_bv_table ( gbv_scheduled_payment_type ).business_variable_value      := gScheduledPayType_Stub;




               --
               --  Check if there is a Rule configured for determining the timing for Stub Due Dates calculation
               --

               if v_payment_plan_md_row.set_stub_due_date_rule_id is not null
               then

                    v_calculate_due_dates_tf :=   pkg_os_exp.fn_evaluate_expression
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_policy_image_id,
                                                       v_payment_plan_md_row.set_stub_due_date_rule_id
                                                  );

               end if;


               --
               --  Now check if we need to determine the due dates for this Stub or leave the due dates as NULL
               --

               if v_calculate_due_dates_tf = 'T'
               then

                    --
                    --  Set the Actual Due Date, Billing Due Date and Withdrawal Date BVs
                    --


                    if in_policy_trx_effective_date > fn_calendar_days_add( in_session_id, in_transaction_id, v_policy_rolled_date, v_stub_payment_offset_period, v_stub_payment_offset_units )
                    then

                         v_stub_billing_due_date  :=   in_policy_trx_effective_date;

                    else

                         v_stub_billing_due_date  :=   fn_calendar_days_add( in_session_id, in_transaction_id, v_policy_rolled_date, v_stub_payment_offset_period, v_stub_payment_offset_units );

                    end if;



                    v_bv_table ( gbv_actual_end_date        ).business_variable_value := to_char(in_policy_trx_effective_date,  pkg_os_constant.DragonDateFormatDefault);
                    v_bv_table ( gbv_actual_due_date        ).business_variable_value := to_char(in_policy_trx_effective_date, pkg_os_constant.DragonDateFormatDefault);

                    v_bv_table ( gbv_billing_issue_date     ).business_variable_value := to_char(in_policy_trx_effective_date, pkg_os_constant.DragonDateFormatDefault); --- @@@VG - this seems odd, why would we not issue the bad boy today?

                    v_bv_table ( gbv_billing_due_date       ).business_variable_value := to_char(v_stub_billing_due_date, pkg_os_constant.DragonDateFormatDefault);



                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '...... '
                              || 'in_policy_trx_effective_date:'||in_policy_trx_effective_date
                              || 'Stub Invoice date ' || v_stub_billing_due_date

                         );

                    end if;



                    v_stub_withdrawal_date := NVL(fn_get_next_withdrawal_date
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_stub_billing_due_date,
                                                  v_preferred_payment_day,
                                                  in_policy_image_id  --OSBILING-7265
                                                ),v_stub_billing_due_date);



                     v_bv_table ( gbv_billing_withdr_date    ).business_variable_value := to_char(v_stub_withdrawal_date, pkg_os_constant.DragonDateFormatDefault);


               else

                    --
                    --  Do NOT calculate the Due Dates for this Stub
                    --

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... Skipped the Due Date calculation for this Stub based on Rule ID:'||v_payment_plan_md_row.set_stub_due_date_rule_id
                              ||', Rule Result: '||v_calculate_due_dates_tf
                         );

                    end if;


               end if;


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...... '
                         ||' Created Stub ScheduledPayment ObjectID:'||io_stub_payment_id
                         ||' Installment Number:'||v_stub_installment_number
                         ||' ActualDueDate:'||in_policy_trx_effective_date
                         ||' ActualEndDate:'||v_prev_installment_end_date
                         ||' BillingDueDate:'||v_stub_billing_due_date
                         ||' WithdrawalDate:'||v_stub_withdrawal_date
                         ||' PreferredPaymentDay:'||v_preferred_payment_day
                    );
               end if;


               --
               -- Set BVs Installment Number, Actual Due Date and Billing Due Date
               -- for PaymentPlanScheduledPayment object
               --

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    io_stub_payment_id,
                    v_bv_table
               );

               end if;
        io_start_installment_number  :=null; --OSBILLING-4920
               end if;


     else

               io_start_installment_number := sp_determine_next_installment
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_trx_id,
                    in_policy_trx_effective_date,
                    in_current_date_time, -- process date
                    v_payment_plan_md_row,
                    v_policy_cost_change,
                    v_next_installment_id,
                    in_modify_payplan,
                    in_is_a_new_term,
                         in_override_payplan_id

               );

          --end if;

          --
          --  Get the installment prior to the transaction ...
          --

          if io_start_installment_number is null
          then


               --
               --     We have gone past the last scheduled installment ...
               --

               v_prev_installment_number     := g_payment_cache.count;
               v_prev_installment_id         := fn_determine_installment_id( in_session_id, in_transaction_id, v_prev_installment_number );

                --OSBilling-6871 This is made conditional to do nothing when Late booked - Pay Upfront = 'No' and all the installments are past.
               --v_is_stub_needed              := pkg_os_constant.gBoolean_True;
               if v_late_booked_pay_upfront <>
                  pkg_os_constant.gBoolean_False or
                  v_late_booked_pay_upfront is null then
                    v_is_stub_needed := pkg_os_constant.gBoolean_True;
               elsif v_late_booked_pay_upfront =
                     pkg_os_constant.gBoolean_False and
                     v_policy_trx_type_id in
                     (pkg_os_policy_transaction.gPolicyTrxType_Renewal,
                      pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,
                      pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,
                      pkg_os_policy_transaction.gPolicyTrxType_Reissue,
                      pkg_os_policy_transaction.gPolicyTrxType_Rewrite) then

                    io_start_installment_number := 1;
                    v_is_stub_needed            := pkg_os_constant.gBoolean_False;
                    v_is_spread_needed          := pkg_os_constant.gBoolean_True;
                    v_prev_installment_number   := 1;
                    v_prev_installment_id       := fn_determine_installment_id(in_session_id,
                                                                               in_transaction_id,
                                                                               v_prev_installment_number);

                    v_scheduled_payment_id := fn_determine_installment_id(in_session_id,
                                                                          in_transaction_id,
                                                                          io_start_installment_number);
                    v_related_instal_id    := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                in_transaction_id,
                                                                                v_scheduled_payment_id,
                                                                                gbv_ScheduledRefInstallment);

               end if;
               --OSBilling-6871
          elsif io_start_installment_number = 1
          then

               --
               --   Special case handling for the first installment, since it does not have a predecessor.
               --
               
               -- OSPRODUCT-2729
               -- KRThis should not be overridden for normal endorsements

               if v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and in_modify_payplan =  pkg_os_constant.gBoolean_True
               then
                                       
                    v_is_stub_needed              := pkg_os_constant.gBoolean_False;
                    v_is_spread_needed            := pkg_os_constant.gBoolean_True;
                    
               end if;
               -- OSPRODUCT-2729

               v_prev_installment_number     := 1;
               v_prev_installment_id         := fn_determine_installment_id( in_session_id, in_transaction_id, v_prev_installment_number );

               --
               --   Find whether the Instalment has been invoiced and if the policy has not been cancelled ... if yes then we need a stub so as the adjusted premium can be invocied
               --
               --   @@@VG: This logic should be moved to within sp_determine_next_installment ...

               v_scheduled_payment_id    :=  fn_determine_installment_id(in_session_id,in_transaction_id, io_start_installment_number );
               v_related_instal_id       :=  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, v_scheduled_payment_id,gbv_ScheduledRefInstallment);

               if  ( pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id ,v_related_instal_id,gbv_installment_invoiced_tf) = pkg_os_constant.gBoolean_True
                     and
                     v_policy_trx_type_id not in ( pkg_os_constant.gPolicyTran_CancelInsured,pkg_os_constant.gPolicyTran_CancelNonPay)
                    )
               then -- If the instalment is invoiced and it not cancellation

                    v_is_stub_needed     :=   pkg_os_constant.gBoolean_True;

               end if;

          else

              v_prev_installment_number := io_start_installment_number - 1;
              v_prev_installment_id     := fn_determine_installment_id( in_session_id, in_transaction_id, v_prev_installment_number );

          end if;
		  
          -- OSPRODUCT-16852 Moved out as needed for BOR too to make policies with one installment work
          --UTPRODUCT-1852
          v_is_stub_needed := nvl( pkg_cs_db_payplan.fn_override_stub_tf
                                  (
                                    in_session_id,
                                    in_transaction_id,
                                    v_is_stub_needed,
                                    in_policy_trx_id,
                                    io_start_installment_number
                                   ),v_is_stub_needed );
          --UTPRODUCT-1852

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Mid-Term Change'
                    ||' Previous Installment ID:'||v_prev_installment_id
                    ||' Prev Installment Number:'||v_prev_installment_number
                    ||' Next Installment ID:'||v_next_installment_id
                    ||' Next Installment Number:'||io_start_installment_number
                    ||' stub needed: ' ||v_is_stub_needed
                    ||' policy cost: ' || v_policy_cost_change
                    || ' transaction type: ' || v_policy_trx_type_id
               );
          end if;



          --
          --     Checking if the last transaction and current transaction amount are equal, If so we don't need a stub. OSBILLING-22.
          --

          if v_is_stub_needed = pkg_os_constant.gBoolean_False
          then

               null;

          --OSBILLING-4799
          elsif  v_policy_cost_change = 0 and v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement and v_policy_trx_subtype_id <> gCommissionadj
          then

                    null;

                    --OSBILLING-6802 , need to create stub if there are only payable change
                    /* elsif  v_policy_cost_change = 0 and v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement and v_policy_trx_subtype_id <> gCommissionadj
                    then

                         v_is_stub_needed          := pkg_os_constant.gBoolean_False;
                    */
          else

               if io_start_installment_number is null
               then

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Mid-Term Change'
                              ||' io_start_inst!'||io_start_installment_number
                         );
                    end if;

                    --
                    --   No remaining scheduled installments, therefore our only recourse is a stub. To create a stub, we need to create
                    --   it after the last scheduled installment.
                    --
                    v_is_stub_needed          := pkg_os_constant.gBoolean_True;

               else
                    --
                    --   There is at least one remaining scheduled installment, no we need to see whether we need a stub in addition.
                    --
                    --   We don't need a stub if
                    --
                    --   -      If the policy transaction date is in the future, so that an existing, unbilled installment will take care of
                    --          things.
                    --
                    --   -      If there is lower than a certain threshold of days between the policy transaction effective date and the
                    --          and the start of the billing period represented by the 'next' installment.
                    --
                    --   -      If there is lower than a certain threshold of earned premium between the policy-transaction effective date
                    --          and the start of the billing period represented by the 'next' installment.
                    --
                    --   In all other cases, we will need to create a stub.
                    --
                    --   Find the end of the billing period of the most recent scheduled payment in the past. Its billing period end will
                    --   also be the end of the billing period associated with the stub.
                    --

                    v_prev_installment_inv_date := to_date
                    (
                         pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_prev_installment_id,
                              gbv_billing_issue_date


                         ),pkg_os_constant.DragonDateFormatDefault
                    );


                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Prev Payment Billing Period Invoice Date:'||v_prev_installment_inv_date||' Current Date:'||in_current_date_time );
                    end if;

                    --
                    --     If the policy transaction effective date is in the future, and there is a scheduled installment before the
                    --     policy transaction that is also in the future, then the billing of this policy transaction will be handled
                    --     by the usual invoicing process .. no stub is needed.
                    --

                    -- OSBILLING-4232
                    -- If user has overriden the value to create a stub then we should simply obey and create a stub
                    --
                    if v_is_stub_overriden_tf =    pkg_os_constant.gBoolean_False

                    then
                         
                       --OSPRODUCT-2072 starts    
                       v_next_invoice_date :=   to_date
                                   (
                                        pkg_db_stmt_date.fn_get_next_invoice_date
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_master_policy_id,
                                             v_policy_term_id,
                                             in_policy_transaction_id => null,
                                             in_instalment_number     => io_start_installment_number, 
                                             in_lead_time_point_date  => null,
                                             -- #MP
                                             in_payer_id              => v_payer_id
                                        ),pkg_os_constant.DragonDateFormatDefault
                                   );
                    --OSPRODUCT-2072 Ends  
                    
                         /*  -- UTXPRODUCT-427 Commented code Start
                         if trunc(v_prev_installment_inv_date) > nvl(trunc(v_policy_rolled_date),trunc(in_current_date_time)) -- Consider the policy advance date to generate stubs
                         then


                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Transaction in future, with prior invoice in future, no need for stub.' );

                              end if;

                                     --OSBILLING-7005 we need to create stub imidiately if we are copying schedules from other policy under same customer
                              if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_image_id,32575248) is  null
                              then

                                   --v_is_stub_needed := pkg_os_constant.gBoolean_False;
                                   v_is_stub_amnt_to_next_nid := pkg_os_constant.gBoolean_True; -- OSBILLING-4232

                              end if;

                         -- OSBILLING-4232
                         --
                         --  Stub need to be created as per config or user selection but due to next NID Threshold condition,
                         --  we dont want to create a stub but include the entire amount on next instalment
                         --
                         els -- UTXPRODUCT-427 Commented code End
                         */
                         if   v_payment_plan_md_row.next_nid_threshold_days is not null and ( v_next_invoice_date - in_policy_trx_effective_date <= v_payment_plan_md_row.next_nid_threshold_days)
                         then
                              --v_is_stub_needed      := pkg_os_constant.gBoolean_False;
                              v_is_stub_amnt_to_next_nid  := pkg_os_constant.gBoolean_True; -- OSBILLING-4232


                              if v_session_control.gLogging_Full
                              then


                                   pkg_os_logging.sp_log
                                   (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                    '......  The stub amount can be included in the next instalment '
                                   );


                              end if;

                         end if;

                    end if;

               end if;

          end if; -- Checking if the last transaction and current transaction amount are equal, If so we don't need a stub. OSBILLING-22.

          --KR -- start OSPRODUCT-2729
          if v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and in_modify_payplan =  pkg_os_constant.gBoolean_True and v_next_installment_id is not null
          then
               v_is_stub_needed              := pkg_os_constant.gBoolean_False;
               v_is_spread_needed            := pkg_os_constant.gBoolean_True;
               
          end if;
          -- end OSPRODUCT-2729


          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... After special handling based on Invoice Threshold, Create Stub Flag (1=True, 2=False): ' ||v_is_stub_needed ||' Create Spread Flag (1=True, 2=False): '||v_is_spread_needed
               );

          end if;

          ------------------------------------------------------------------------------------------------------------------------------------------------------
          --
          --     If a stub is needed, create one ...
          --
          --     Since we are godly reentrant people, we'll check whether we've already created one for this transaction, and if so, we'll re-use it.
          --
          ------------------------------------------------------------------------------------------------------------------------------------------------------

          v_old_stub_payment_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub );

          --
          -- Check if there is a wrong configuration for Spread and Stub. If they are NO , then it is a wrong combination
          --

          if ( v_is_stub_needed = pkg_os_constant.gBoolean_False and v_is_spread_needed = pkg_os_constant.gBoolean_False)
          then

               --if v_session_control.gLogging_Error   -- OSPRODUCT-15833
               if v_session_control.gLogging_Full      -- OSPRODUCT-15833
               then
                    --pkg_os_logging.sp_log_error      -- OSPRODUCT-15833
                    pkg_os_logging.sp_log              -- OSPRODUCT-15833
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Error:  wrong_configuration '
                         || ' Create Stub Flag (1=True, 2=False): ' || v_is_stub_needed
                         || ' Create Spread Flag (1=True, 2=False):  ' || v_is_spread_needed
                         || 'It is a wrong configuration.. Please get  the configuration fixed. '

                     );
               end if;

               -- OSPRODUCT-15833 Starts
               pkg_os_object_io.sp_object_bv_set               
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    gbv_PTP_Spread_Amount,
                    pkg_os_constant.gBoolean_True
               );
          
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    gbv_PTP_Generate_Stub,
                    pkg_os_constant.gBoolean_True
               );               
               
               
               
               io_action_outcome_id := gOutcome_SprdPremCrteStubF; 
               
               return;  
               -- OSPRODUCT-15833 Ends
               
               --raise wrong_configuration;  -- OSPRODUCT-15833

          end if;

          v_ref_terminst_old:= pkg_os_object_io.fn_object_bv_get
                                                    (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_old_stub_payment_id,
                                                     gbv_ScheduledRefInstallment-- Related installment ref from schedule to term
                                                    );

          -- OSBILLING-4232

          if ( v_is_stub_needed = pkg_os_constant.gBoolean_True and v_is_stub_amnt_to_next_nid = pkg_os_constant.gBoolean_False )
              or
              (v_is_spread_needed = pkg_os_constant.gBoolean_False and v_is_stub_amnt_to_next_nid = pkg_os_constant.gBoolean_False)
              or
              (v_is_spread_needed = pkg_os_constant.gBoolean_True and v_is_stub_amnt_to_next_nid = pkg_os_constant.gBoolean_True )
          then
               --
               --    Create PaymentPlanScheduledPayment object
               --

               if v_old_stub_payment_id is not null and v_ref_terminst_old is null
               then

                    io_stub_payment_id := v_old_stub_payment_id;

               else

                    pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_ScheduledPayment,
                         in_payment_plan_id,
                         io_stub_payment_id
                    );












                    --
                    --     Create a ScheduledPayment object for the stub ...
                    --

                    sp_load_sched_payment_cache
                    (
                       in_session_id,
                       in_transaction_id,
                       in_payment_plan_id,
                       v_existing_payment_count
                    );

                    if (v_policy_trx_type_id = pkg_os_constant.gPolicyTran_Endorsement and (v_policy_trx_subtype_id = gEndSubType_ILRDefPrem or v_policy_trx_subtype_id = gEndSubType_PLRDefPrem ))
                    then

                         v_stub_installment_number := 100;

                         v_stub_sequence_number    := fn_get_stub_sequence
                         (
                              in_session_id,
                              in_transaction_id,
                              null,
                              in_payment_plan_id
                         );


                    else

                         --
                         -- Not a Deferred Premium transaction
                         --
             -- OSBILLING-4920 : setting independent stubs BV
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name, '...... '
                                   ||' v_existing_payment_count:'||v_existing_payment_count
                              );
                         end if;


                         if NVL(v_existing_payment_count,0)= 0 then

                           v_stub_installment_number:= pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_payment_plan_id,
                                             21795301
                                        );


                         v_current_stub_count:=pkg_os_object_io.fn_object_bv_get
                                                    (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_payplan_id_basis_coverage,
                                                     34070946-- independent stub count
                                                    );
                         v_stub_sequence_number := NVL( v_current_stub_count,0)+1;

                         pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_payment_plan_id, 34070946, v_stub_sequence_number );

                         else

                         v_stub_installment_number := v_prev_installment_number;


                         v_stub_sequence_number    := fn_get_stub_sequence
                         (
                              in_session_id,
                              in_transaction_id,
                              v_prev_installment_id
                         );


                         pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_prev_installment_id, gbv_SchedPayment_Stubs_Cnt, v_stub_sequence_number );

                         end if;

                    end if;

                     if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '...... '
                              ||' v_prev_installment_number:'||v_prev_installment_number
                              ||' v_prev_installment_id:'||v_prev_installment_id
                              ||' v_stub_sequence_number:'||v_stub_sequence_number
                         );
                    end if;



                    --
                    --     Set the reference from the Payment Plan to the current stub ...
                    --

                    pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub, io_stub_payment_id );

                    v_bv_table ( gbv_ScheduledPayment_num   ).business_variable_value      := v_stub_installment_number;
                    v_bv_table ( gbv_SchedPayment_Stub_Num  ).business_variable_value      := v_stub_sequence_number;
                    v_bv_table ( gbv_scheduled_payment_type ).business_variable_value      := gScheduledPayType_Stub;

               end if;


               --
               --  Check if there is a Rule configured for determining the timing for Stub Due Dates calculation
               --

               if v_payment_plan_md_row.set_stub_due_date_rule_id is not null
               then

                    v_calculate_due_dates_tf :=   pkg_os_exp.fn_evaluate_expression
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_policy_image_id,
                                                       v_payment_plan_md_row.set_stub_due_date_rule_id
                                                  );

               end if;


               --
               --  Now check if we need to determine the due dates for this Stub or leave the due dates as NULL
               --

               if v_calculate_due_dates_tf = 'T'
               then

                    --
                    --  Set the Actual Due Date, Billing Due Date and Withdrawal Date BVs
                    --

                    v_prev_installment_end_date := to_date
                                                  (
                                                       pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_prev_installment_id,
                                                            gbv_actual_end_date

                                                       ),pkg_os_constant.DragonDateFormatDefault
                                                  );

if trunc(v_prev_installment_end_date) > trunc( in_policy_trx_effective_date) then
                    v_bv_table ( gbv_actual_end_date        ).business_variable_value := to_char(v_prev_installment_end_date,  pkg_os_constant.DragonDateFormatDefault);
else
                    v_bv_table ( gbv_actual_end_date        ).business_variable_value := to_char(in_policy_trx_effective_date,  pkg_os_constant.DragonDateFormatDefault);
end if;


                   -- v_bv_table ( gbv_actual_end_date        ).business_variable_value := to_char(v_prev_installment_end_date,  pkg_os_constant.DragonDateFormatDefault);
                   --OSBILLING-5681
                    v_bv_table ( gbv_actual_due_date        ).business_variable_value := to_char(in_policy_trx_effective_date, pkg_os_constant.DragonDateFormatDefault);

                    if in_policy_trx_effective_date > fn_calendar_days_add( in_session_id, in_transaction_id, v_policy_rolled_date, v_stub_payment_offset_period, v_stub_payment_offset_units )
                    then

                         v_stub_billing_due_date  :=   in_policy_trx_effective_date;

                    else

                         v_stub_billing_due_date  :=   fn_calendar_days_add( in_session_id, in_transaction_id, v_policy_rolled_date, v_stub_payment_offset_period, v_stub_payment_offset_units );

                    end if;


                    --
                    -- Issue date is based on the Invoice Lead time
                    --
                    v_stub_invoice_date :=    to_date
                                             (
                                                  pkg_db_stmt_date.fn_get_next_invoice_date
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_master_policy_id,
                                                       v_policy_term_id,
                                                       in_policy_transaction_id => in_policy_trx_id,
                                                       in_instalment_number     => io_start_installment_number,
                                                       in_lead_time_point_date  => to_char(v_stub_billing_due_date,pkg_os_constant.DragonDateFormatDefault),
                                                       -- #MP
                                                        in_payer_id              => v_payer_id,
                                                       in_stub_instalment_num  => v_prev_installment_number -- OSPRODUCT-22291
                                                  ),pkg_os_constant.DragonDateFormatDefault
                                                  );

                    v_bv_table ( gbv_billing_issue_date     ).business_variable_value := to_char(v_stub_billing_due_date, pkg_os_constant.DragonDateFormatDefault); --- @@@VG - this seems odd, why would we not issue the bad boy today?
                    --
                    -- PMADEV-465 Rule To check if the endorsement stub is to be billed immediately or in the NID if the next scheduled Invoice is whitin the defined number of days.
                    --
                    -- 1. Calculate the Invoice Generation date for the stub.
                    -- 2. From the Invoice Generation date of stub if there is a scheudled NID within threshold days,
                    --        then the stub should also needs to be Invoiced along with the schcheduled one to avoid multiple Invoices
                    -- The priority will be as follows top to bottom if they are configured.
                         --  Threshold Amount
                         --  Threshold days
                         --  Stub Offset days rule  ( The v_stub_payment_offset_period considers the stuboffset rule)
                         --  Stub offset days.

                    --
                    -- Verify whether the Premium Change is greater than the Theshold Amount Configured.
                    -- If yes, then the stub should be billed and should not wait to club to next scheduled invoice
                    --
                    if ( v_payment_plan_md_row.next_nid_threshold_amnt is not null and v_policy_cost_change     > nvl ( v_payment_plan_md_row.next_nid_threshold_amnt,0)  )
                    then

                         v_bv_table ( gbv_billing_due_date       ).business_variable_value := to_char(v_stub_billing_due_date, pkg_os_constant.DragonDateFormatDefault);


                    elsif (    v_next_invoice_date > v_stub_invoice_date and (v_next_invoice_date - v_stub_invoice_date) <= nvl(v_payment_plan_md_row.next_nid_threshold_days,0))
                    then

                         -- Billing due date is the instalment number dued ate
                         v_bv_table ( gbv_billing_due_date       ).business_variable_value :=     NVL(pkg_os_object_io.fn_object_bv_get
                                                                                              (
                                                                                                         in_session_id,
                                                                                                         in_transaction_id,
                                                                                                         v_next_installment_id,
                                                                                                         gbv_billing_due_date

                                                                                               ),to_char(v_stub_billing_due_date, pkg_os_constant.DragonDateFormatDefault));

                    else

                         v_bv_table ( gbv_billing_due_date       ).business_variable_value := to_char(v_stub_billing_due_date, pkg_os_constant.DragonDateFormatDefault);

                    end if;


                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '...... '
                              ||' Stub Invoice Date:'||v_stub_invoice_date
                              ||' Threshold Days :'||v_payment_plan_md_row.next_nid_threshold_days
                              ||' Next Invoice Date:'||v_next_invoice_date
                              || 'Stub Invoice date ' || v_stub_billing_due_date

                         );

                    end if;

          --OSBILLING-4819
                    v_stub_withdrawal_date := to_date(


                                              to_char

                                              (
                                                fn_get_next_withdrawal_date
                                                (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_stub_billing_due_date,
                                                  v_preferred_payment_day,
                                                  in_policy_image_id  --OSBILING-7265
                                                ),
                                                pkg_os_constant.DragonDateFormatDefault




                                              ),
                                              pkg_os_constant.DragonDateFormatDefault);


                    --
                    --  If the withdrawal date is null, because there is no preferred payment day of month,
                    --  we'll just default to the due date ...
                    --

                     if v_stub_withdrawal_date is null
                     then

                          v_stub_withdrawal_date := to_date( v_bv_table(gbv_billing_due_date).business_variable_value, pkg_os_constant.DragonDateFormatDefault);

                    end if;

                    -- DDWIDEV-595
                    pkg_cs_db_payplan.sp_override_stub_due_date
                    (
                         in_session_id,
                         in_transaction_id,
                         in_current_date_time, --v_policy_trx_process_date,--in_policy_trx_process_date,
                         v_stub_withdrawal_date,
                         io_start_installment_number,--in_installment_number,
                         v_preferred_payment_day,
                         v_policy_trx_type_id --,in_transaction_type_id
                    );

                          v_bv_table ( gbv_billing_withdr_date    ).business_variable_value := to_char(v_stub_withdrawal_date, pkg_os_constant.DragonDateFormatDefault);

                    -- end if;


               else

                    --
                    --  Do NOT calculate the Due Dates for this Stub
                    --

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, '... Skipped the Due Date calculation for this Stub based on Rule ID:'||v_payment_plan_md_row.set_stub_due_date_rule_id
                              ||', Rule Result: '||v_calculate_due_dates_tf
                         );

                    end if;


               end if;


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...... '
                         ||' Created Stub ScheduledPayment ObjectID:'||io_stub_payment_id
                         ||' Installment Number:'||v_stub_installment_number
                         ||' ActualDueDate:'||in_policy_trx_effective_date
                         ||' ActualEndDate:'||v_prev_installment_end_date
                         ||' BillingDueDate:'||v_stub_billing_due_date
                         ||' WithdrawalDate:'||v_stub_withdrawal_date
                         ||' PreferredPaymentDay:'||v_preferred_payment_day
                    );
               end if;


               --
               -- Set BVs Installment Number, Actual Due Date and Billing Due Date
               -- for PaymentPlanScheduledPayment object
               --

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    io_stub_payment_id,
                    v_bv_table
               );

          elsif  v_ref_terminst_old is null
          then

               ------------------------------------------------------------------------------------------------------------------------------------------------------
               --
               --     Kill the old stub, assuming one exists ...
               --
               ------------------------------------------------------------------------------------------------------------------------------------------------------

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Deleting old Stub Payment:'||v_old_stub_payment_id );
               end if;


               pkg_os_object.sp_object_delete
               (
                    in_session_id,
                    in_transaction_id,
                    in_payment_plan_id,
                    v_old_stub_payment_id,
                    gObjType_ScheduledPayment,
                    null,
                    false
               );

               pkg_Os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PaymentPlanCurrentStub, null );

          end if;



          --
          -- PMADEV-465 If spread is 'N' , then we shoudl not spread the Premium Change
          -- in the remaining instalments
          --
          if v_is_spread_needed    = pkg_os_constant.gBoolean_False and  v_is_stub_amnt_to_next_nid = pkg_os_constant.gBoolean_False
          then

               io_start_installment_number := null;

          end if;


          if v_is_spread_needed = pkg_os_constant.gBoolean_True
          then

             io_transaction_spread_tf         := 'T'; -- OSBILLING-3689
          else
             io_transaction_spread_tf         := 'F'; -- OSBILLING-3689

          end if;


          if v_is_stub_amnt_to_next_nid = pkg_os_constant.gBoolean_True
          then

             io_transaction_amnt_next_nid     := 'T'; -- OSBILLING-4232
          else
             io_transaction_amnt_next_nid     := 'F'; -- OSBILLING-4232

          end if;


      end if; -- if a new term ...

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '... '
               ||' Complete ... Start Installment Number::'||io_start_installment_number
               ||' Stub ID:'||io_stub_payment_id
          );
     end if;

end sp_determine_first_installment;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--   %NAME
--        sp_allocate_installment_amts
--
--   %USAGE
--        Given a payment plan, and given a start installment number, this procedure takes any changes in dues or payables, and generaes payment plan scheduled elements for them.
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_allocate_installment_amts
(
     in_session_id                in object.object_id%type,
     in_transaction_id            in object.object_id%type,
     in_policy_image_id           in object.object_id%type,
     in_policy_trx_id             in object.object_id%type,
     in_payment_plan_id           in object.object_id%type,
     in_policy_trx_effective_date in date,
     in_is_a_new_term             in number,
     in_current_date_time         in date,
     in_start_installment_number  in number,
     in_stub_payment_id           in object.object_id%type,
     in_modifying_payment_plan    in number,
     in_transaction_spread_tf     in char,
     in_overridden_plan_md_row    in   getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_amount_to_next_nid_tf           in             char -- OSBILLING-4232

) as
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_allocate_installment_amts';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     --OSBILLING-4799
     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;
     --OSBILLING-4799

     -- Cursor for getting the Payment Plan Detail records   @@@VG: May need to be cached ...

     cursor c_payment_plan_detail
     (
          in_payment_plan_id in payment_plan_detail.payment_plan_id%type,
          in_product_id      in payment_plan_detail.pd_product_id%type,
          in_filing_id       in payment_plan_detail.pd_filing_id%type
     )
     is
     select a.payment_plan_detail_id,
           a.db_billing_element_id,
           a.element_split_method,
           a.rule_element_split_method,
           a.element_installment_count,
           a.element_rounding,
           a.adjustment_type,
           b.create_debit_tf,
           b.debit_fitem_category,
           b.create_credit_tf,
           b.credit_fitem_category,
           b.credit_fitem_sub_category,
           b.billing_element_name,
           b.debit_billing_account_path,
           b.credit_billing_account_path,
             b.payer_billing_account_path as payer_billing_account_path,  -- #MP
           b.rule_to_debit_billing_account as rule_to_debit_billing_account, -- OSBILLING-7680
           a.transaction_spread_override_tf -- OSBILLING-3689
      from db_payment_plan_detail a, db_billing_element b
     where a.payment_plan_id = in_payment_plan_id
       and a.db_billing_element_id = b.db_billing_element_id
       and (a.pd_product_id in
           (in_product_id, pkg_os_reference_lookup.gDefaultProductID) or
           a.pd_product_id is null)
       and (a.pd_filing_id <= in_filing_id or a.pd_filing_id is null)
       and (a.last_pd_filing_id >= in_filing_id or
           a.last_pd_filing_id is null)
       and nvl(b.active_tf, 'T') = 'T'
       and nvl(a.active_tf, 'T') = 'T'
      /* and ((b.debit_fitem_sub_category = (select c.db_fitem_sub_category_id from db_fitem_sub_category c where c.db_fitem_sub_category_id = b.debit_fitem_sub_category
                and nvl(c.set_due_date_on_creation, 'T') = 'T'))
            or
            b.debit_fitem_sub_category is null)
       and ((b.credit_fitem_sub_category = (select c.db_fitem_sub_category_id from db_fitem_sub_category c where c.db_fitem_sub_category_id = b.credit_fitem_sub_category
                and nvl(c.set_due_date_on_creation, 'T') = 'T'))
            or
            b.credit_fitem_sub_category is null)   */

     order by
          a.apply_order, a.db_billing_element_id;


     v_product_id                       payment_plan_detail.pd_product_id%type;
     v_filing_id                        payment_plan_detail.pd_filing_id%type;

     v_coverage_object_type_id          object_type.object_type_id%type;
     v_policy_object_type_id            object_type.object_type_id%type;

     v_payment_plan_md_id               payment_plan.payment_plan_id%type;
     v_payment_plan_md_row              getPaymentPlanList%rowtype;--OSPRODUCT-3108

     v_coverage_object_list             pkg_os_object.t_object_list;
     v_coverage_object_index            number;
     v_stub_total_amount                number;

     v_installment_number               number;
     v_installment_id                   object.object_id%type;
     v_sequence_number                  number;
      v_split_method                     number;
     v_split_billing_flag               object_bv_value.business_variable_value%type;
     -- #MP
     v_idx                              long; -- binary_integer;
     v_coverage_payer_BA                object_bv_value.business_variable_value%type;
     --VAULTDDEV-6645
      v_basis_coverage_payer_BA          object_bv_value.business_variable_value%type;
     v_basis_coverage                   object.object_id%type;
     v_current_payer_BA                 object_bv_value.business_variable_value%type;
     v_change_payer_tf                  char(1) :='F';
     v_old_payer_tf                    char(1) :='F';
     v_coverage_object_id              object.object_id%type;
     v_PolicyMultiPayerEnabled          boolean := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_policy_image_id
                                                   );
     -- /#MP
     --OSPRODUCT-2496 start
     v_policytrx_change_amount          number;
     v_element_total_change_amount      number;
     POLICY_STATS_NOT_BALANCED          exception;
     --OSPRODUCT-2496 end
     v_count                           number;     --  OSPRODUCT-32901

begin

     --
     --     Get a little context ...
     --

     v_product_id             :=   pkg_os_product.fn_object_product_get( in_session_id, in_transaction_id, in_policy_image_id );
     v_filing_id              :=   pkg_os_product.fn_policy_filing_get ( in_session_id, in_transaction_id, in_policy_image_id, v_product_id );

     -- Tells us whether we're splitting payabales amongst multiple payees ..

     v_split_billing_flag     :=   pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_image_id, gbv_PolicySplitBillingFlag);

     v_policy_object_type_id  :=   pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_policy_image_id );

     v_payment_plan_md_id     :=   in_overridden_plan_md_row.payment_plan_id;
     v_payment_plan_md_row    :=   in_overridden_plan_md_row;

     --OSBILLING-4799
     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_trx_id,
                                        pkg_os_constant_bv.gbv_PolicyTranType
                                   );

     v_policy_trx_subtype_id  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_trx_id,
                                        gbv_PolicyTrx_SubType
                                   );

     --OSBILLING-4799

     if v_product_id is null or v_filing_id is null  then

          pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to get a product/filing/payment-plan-md ... for PolicyTrxID:'||in_policy_trx_id );

          raise no_data_found;

     elsif v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '||| Allocating amounts to installments for PaymentPlanID:'||in_payment_plan_id||' ProductID:'||v_product_id||' FilingID:'||v_filing_id||' StubID:'||in_stub_payment_id );

     end if;
     --VAULTDDEV-6645
          if v_PolicyMultiPayerEnabled
          then
               v_idx := in_payment_plan_id; -- #MP    -- this is true only for NewBusiness.

               -- This index is incorrect for Endorsement with Pay Plan change for #MP !!!!!
               -- TBD: Endorsement for #MP !!!!!!
          else
               v_idx := g_payer_list.first; -- in the Single Payer mode, there is the only member in this list.


          end if;


          v_current_payer_BA := g_payer_list(v_idx).PayerBillingAccount_id;

         -- VAULTDEV-6645 ends
     --
     --     For every billing element associated with the payment plan ...
     --

     for r_payment_plan_detail in c_payment_plan_detail( v_payment_plan_md_id, v_product_id, v_filing_id ) loop

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Processing Element:'||r_payment_plan_detail.billing_element_name );
          end if;


          --
          --   Find the object-type with which the billing element is associated ... the assumption here is that all coverages associated with this billing element are driven by the same object-type ...
          --
          --   @@@GVG: Really - loop through the cursor below, because we need to ensure this. If a non-homogeneous object-type is found, we should throw an exception.

         v_coverage_object_list.delete;                                    -- start OSPRODUCT-32901  
                  
         select
               count(1)
         into  
               v_count
         from
               db_billing_element_map
         where
               db_billing_element_id = r_payment_plan_detail.db_billing_element_id;
         
         
         if v_count = 0
         then
          
             v_coverage_object_list(1) := in_policy_image_id;
          
         else                                                               -- end OSPRODUCT-32901
         
            select
                 pc_coverage_object_type_id
            into
                 v_coverage_object_type_id
            from
                 pc_coverage
            where
                 pc_coverage_id =
                 (
                     select
                         max(pc_coverage_id)
                     from
                         db_billing_element_map
                     where
                         db_billing_element_id = r_payment_plan_detail.db_billing_element_id
                 );


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Searching for instances of Coverage ObjectTypeID:'||pkg_os_object_type.fn_object_type_name_get( v_coverage_object_type_id ) );
          end if;


         -- v_coverage_object_list.delete;

          if  pkg_os_object_search.fn_object_type_equivalent_tf( v_coverage_object_type_id, v_policy_object_type_id ) = 'T'
          then

               v_coverage_object_list(1) := in_policy_image_id;

          else

               --
               --   If both types are different then get all instances of Coverage Object Type that are children of the Input Context Object Type
               --

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_coverage_object_type_id,
                    v_coverage_object_list,
                    null,
                    true,
                    false --- Do not exclude soft-deleted objects ...
               );

               if v_coverage_object_list.count = 0
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to find instances of ObjectTypeID:'||v_coverage_object_type_id );

               end if;


          end if; -- is the coverage object the same as the policy-image object?

       end if;                                                --  OSPRODUCT-32901
          --
          --   Loop through each Coverage Object instance and create scheduled payment elements ...
          --

          v_coverage_object_index := v_coverage_object_list.first;

          while v_coverage_object_index is not null loop
                --VAULTDEV-6645
               v_change_payer_tf:= 'F';
               v_old_payer_tf:= 'F';
               v_coverage_object_id :=v_coverage_object_list(v_coverage_object_index);

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Processing Coverage ObjectID:'||

                         v_coverage_object_id||
                         pkg_os_object.fn_object_name_get(in_session_id, in_transaction_id, v_coverage_object_id)

                    );
               end if;


               -- #MP
               --
               begin
                    


                    --if payer BA path is null then if rule to Dbt BA is null then debit BA path	--OSBILLING-7680
				if r_payment_plan_detail.payer_billing_account_path is not null then
                         
                         v_coverage_payer_BA :=  pkg_os_object_io.fn_object_bv_path_get  -- Billing Account
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_coverage_object_id,
                                                      r_payment_plan_detail.payer_billing_account_path
                                                 );
                    elsif r_payment_plan_detail.rule_to_debit_billing_account is not null then
                         
                         v_coverage_payer_BA := pkg_os_exp.fn_evaluate_expression
									    (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_coverage_object_id,
                                                      r_payment_plan_detail.rule_to_debit_billing_account
									    );
				else
                         
					v_coverage_payer_BA :=  pkg_os_object_io.fn_object_bv_path_get  -- Billing Account
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_coverage_object_id,
                                                      r_payment_plan_detail.debit_billing_account_path
                                                 );
                                            
				end if;

                    v_basis_coverage  :=  pkg_os_object_io.fn_object_bv_get  -- template pbject
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_coverage_object_id,
                                                 26725501
                                            );

                    if v_basis_coverage is not null
                    then
                         
                         if r_payment_plan_detail.payer_billing_account_path is not null then
                              
                              v_basis_coverage_payer_BA := NVL(pkg_os_object_io.fn_object_bv_path_get  -- Billing Account
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,

                                                                v_basis_coverage,
                                                                r_payment_plan_detail.payer_billing_account_path
                                                           ),0);
					
                         elsif r_payment_plan_detail.rule_to_debit_billing_account is not null then
                              
                              v_basis_coverage_payer_BA := NVL(pkg_os_exp.fn_evaluate_expression
                                                                 (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_basis_coverage,
                                                                 r_payment_plan_detail.rule_to_debit_billing_account
                                                                 ),0);
                         
                         else
                              
                              v_basis_coverage_payer_BA := NVL(pkg_os_object_io.fn_object_bv_path_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,
                                                                v_basis_coverage,
                                                                r_payment_plan_detail.debit_billing_account_path
                                                           ),0);
                                                           
                         end if;
                         
                           /*   v_basis_coverage_payer_BA :=  NVL(pkg_os_object_io.fn_object_bv_path_get  -- Billing Account
                                            (
                                                 in_session_id,
                                                 in_transaction_id,

                                                 v_basis_coverage,
                                                 r_payment_plan_detail.payer_billing_account_path
                                            ),0);*/ --commented	as new conditions added under OSBILLING-7680
				end if;





                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '......v_basis_coverage:'||
                              v_basis_coverage||
                              'v_basis_coverage_payer_BA'||v_basis_coverage_payer_BA
                              ||'v_current_payer_BA:'||v_current_payer_BA
                              ||'v_coverage_payer_BA:'||v_coverage_payer_BA

                         );
                    end if;
                    


                    --VAULTDEV-6645
                    --OSPRODUCT-5992 Added the check for multipayer
                    if v_basis_coverage != v_coverage_object_id and v_basis_coverage_payer_BA <> 0 and v_basis_coverage_payer_BA <> NVL(v_coverage_payer_BA,0)
                    then
                         
                         v_change_payer_tf :='T';
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,




                              in_policy_trx_id,
                              32967224,  -- payer changed
                              1--yes
                         );
                         



                         if v_current_payer_BA = v_basis_coverage_payer_BA
                         then
                              
									   
                              v_old_payer_tf :='T';

                         end if;
                    
                    end if;


                    if v_session_control.gLogging_Full
                    then
                         
                         pkg_os_logging.sp_log

                            (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name, '.........'
                                   ||'v_create_offset:'|| v_change_payer_tf
                                   ||'v_old_payer_tf:'||v_old_payer_tf


                            );

                    end if;

                    if v_coverage_payer_BA =  v_current_payer_BA
                       or
                       -- OSPRODUCT-2281
                       ( 
                       v_basis_coverage_payer_BA = v_current_payer_BA and in_is_a_new_term =  pkg_os_constant.gBoolean_False 
                       )
                       or
                        -- Single Payer mode
                       not v_PolicyMultiPayerEnabled
                    then
                         if v_session_control.gLogging_Full
                         then



                              if v_coverage_payer_BA =  v_current_payer_BA
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......Payer configured in the DB_BILLING_ELEMENT matches Payment Plan Payer. Proceeding with billing element creation:' ||
                                        '. Billing Element ID :'  || r_payment_plan_detail.db_billing_element_id ||
                                        '. Coverage object ID :'  || v_coverage_object_id ||
                                        ', debit BA path :'       || r_payment_plan_detail.debit_billing_account_path ||
                                        '. Coverage payer BA : '  || v_coverage_payer_BA ||



                                        'v_basis_coverage_payer_BA:'||v_basis_coverage_payer_BA||
                                        ' Payment Plan Pyaer BA:' || v_current_payer_BA ||
                                        ', Plan'||pkg_os_object.fn_object_name_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_payment_plan_id
                                                  ) || '(' || in_payment_plan_id|| ')'
                                   );
                                           --VAULTDDEV-6645
                              elsif v_basis_coverage_payer_BA = v_current_payer_BA
                                   then

                                    pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......Payer configured in the DB_BILLING_ELEMENT matches previous Payment Plan Payer. Proceeding with billing element creation for offsetting:' ||
                                        '. Billing Element ID :'  || r_payment_plan_detail.db_billing_element_id ||
                                        '. Coverage object ID :'  || v_coverage_object_id ||
                                        ', debit BA path :'       || r_payment_plan_detail.debit_billing_account_path ||
                                        '. Coverage payer BA : '  || v_coverage_payer_BA ||
                                        'v_basis_coverage_payer_BA:'||v_basis_coverage_payer_BA||
                                        'basis coverage:'||v_basis_coverage||
                                        ' Payment Plan Pyaer BA:' || v_current_payer_BA ||
                                        ', Plan'||pkg_os_object.fn_object_name_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_payment_plan_id
                                                  ) || '(' || in_payment_plan_id|| ')'
                                   );
                              else -- Single Payer mode
                                   --
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......Payer configured in the DB_BILLING_ELEMENT does NOT match Payment Plan Payer BUT this is a single payer mode. Creating billing element for:' ||
                                        '. Billing Element ID :' || r_payment_plan_detail.db_billing_element_id ||
                                        '. Coverage object ID :'  || v_coverage_object_id ||
                                        '. Coverage payer BA : ' || v_coverage_payer_BA ||



                                        ' Payment Plan Pyaer BA:' || v_current_payer_BA ||
                                        'v_basis_coverage_payer_BA:'||v_basis_coverage_payer_BA||

                                        ', Plan'||pkg_os_object.fn_object_name_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_payment_plan_id
                                                  ) || '(' || in_payment_plan_id|| ')'
                                   );

                              end if;
                         end if;

                         --OSBILLING-5397
                         -- eveluate the split method rule provided in db_payment_plan_details table.
                         --If this rule is not sprecified or rule returns null value, use element_split_method column

                         If r_payment_plan_detail.rule_element_split_method is not null then

                              v_split_method := pkg_os_exp.fn_evaluate_expression(in_session_id,in_transaction_id,in_policy_image_id,r_payment_plan_detail.rule_element_split_method);



                              if v_split_method is null
                                   then
                                        pkg_os_logging.sp_log_error
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,'... split method rule returned null: '||r_payment_plan_detail.rule_element_split_method
                                        );
                                        raise no_data_found;
                              end if;

                         else
                              v_split_method := r_payment_plan_detail.element_split_method;
                         end if;

                         sp_schedule_elements_create
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_image_id,
                              in_policy_trx_id,
                              in_policy_trx_effective_date,
                              in_payment_plan_id,
                              in_start_installment_number,
                              in_stub_payment_id,
                              v_product_id,
                              v_filing_id,
                              r_payment_plan_detail.db_billing_element_id,


                              v_coverage_object_id,
                              in_modifying_payment_plan,
                              in_overridden_plan_md_row,


                              r_payment_plan_detail.element_split_method,

                              r_payment_plan_detail.element_installment_count,
                              r_payment_plan_detail.element_rounding,
                              r_payment_plan_detail.adjustment_type,
                              r_payment_plan_detail.transaction_spread_override_tf, -- OSBILLING-3689
                              in_transaction_spread_tf, -- -- OSBILLING-3689
                              v_split_billing_flag,
                              in_amount_to_next_nid_tf, -- OSBILLING-4232
                              r_payment_plan_detail.element_rounding,  -- 5,--VAULTDDEV-6645  OSBILLING-7681
                              v_change_payer_tf,
                              v_old_payer_tf,
                              v_basis_coverage_payer_BA
                         );
                    else
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......Payer configured in the DB_BILLING_ELEMENT does NOT match Payment Plan Payer. Skipping this coveragae object.' ||
                                   '. Billing Element ID :' || r_payment_plan_detail.db_billing_element_id ||
                                   '. Coverage object ID :'  || v_coverage_object_id ||
                                   '. Coverage payer BA : ' || v_coverage_payer_BA ||



                                   ' Payment Plan Pyaer BA:' || v_current_payer_BA ||
                                   ', Plan'||pkg_os_object.fn_object_name_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_payment_plan_id
                                             ) || '(' || in_payment_plan_id|| ')'
                              );
                         end if;


                    end if;


               end;


                    ----VAULTDDEV-6645 ends
               v_coverage_object_index := v_coverage_object_list.next(v_coverage_object_index);

          end loop; -- for each coverage object instance ...

     end loop; -- for each billing element associated with the payment plan.

     --OSPRODUCT-2496 start     
     if 
          nvl
          (
               pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                ),
                pkg_db_multipayer.genum_No
          ) = pkg_db_multipayer.genum_No 
          and 
          pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PolicyRefChosenPlan
          ) = in_payment_plan_id 
          and
          v_policy_trx_subtype_id <> gChangeBillingMethod
     then

          v_element_total_change_amount := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id, 
                                                in_payment_plan_id, 
                                                gbv_totalelementamount
                                           );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Total Stats change amount: ' || v_element_total_change_amount

               );
          end if;

          v_policytrx_change_amount := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_policy_trx_id,
                                            pkg_db_billing_modify.gbv_PolicyCostchange -- 31902746
                                       );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Total Policy Transaction change amount: ' || v_policytrx_change_amount

               );
          end if;                                   

          If v_policytrx_change_amount <> v_element_total_change_amount 
          then
               raise POLICY_STATS_NOT_BALANCED;
          else
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Total Stats change amount: ' || v_element_total_change_amount || ' matches ' ||
                         ' Total Policy Transaction change amount: ' || v_policytrx_change_amount 
                    );
               end if; 
          end if;
     end if;
     --OSPRODUCT-2496 end


          --
          --   Since we create the stub installment before acertaining that we have an amount to put in the stub, delete the stub if there is no amount to be billed in the stub.
          --
          -- OSBILLING-6802 check the stub element count before deleting it . The stub total amount do not consider payables.

          v_stub_total_amount := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   in_stub_payment_id,
                                                                   29705646); -- gbv_schedpayment_total_payment );


     if NVL( v_stub_total_amount, 0 )= 0
     then

          v_installment_number := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_stub_payment_id,
               gbv_ScheduledPayment_num
          );

          --   Based on the installment number, get the installment object id ...

          v_installment_id := fn_determine_installment_id
          (
               in_session_id,
               in_transaction_id,
               v_installment_number
          );

          v_sequence_number := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_installment_id,
               gbv_SchedPayment_Stubs_Cnt
          );

          --
          --   Now subtract 1 for the stub we are deleting ...
          --

          v_sequence_number := v_sequence_number - 1;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_installment_id,
               gbv_SchedPayment_Stubs_Cnt,
               v_sequence_number
          );

          --
          --   Now that we are done with adjusting the sub-counter, delete the un-needed stub payment.

          --   OSBILLING-4799 - Donot Delete the stub if this is Commission Adjustment endorsement.
          --

          if   v_policy_trx_type_id not in ( pkg_os_policy_transaction.gPolicyTrxType_Endorsement)    -- DDWIDEV-964 Delete the stub if transaction type is not endorsement.
               or
               (v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement and v_policy_trx_subtype_id not in( gCommissionadj,gTrxSubType_BillMethodChange))
          then
             pkg_os_object.sp_object_delete( in_session_id, in_transaction_id, in_stub_payment_id, in_stub_payment_id, gObjType_ScheduledPayment);

            if v_session_control.gLogging_Full
            then
                 pkg_os_logging.sp_log
                 (
                      in_session_id,
                      in_transaction_id,
                      v_procedure_name, '.........'
                      ||' Stub deleted:' ||in_stub_payment_id
                 );

            end if;

          end if;


     end if; -- if the stub amount is zero ...


    --
    --   OSBILLING-5138
    --   Handle any Custom logic to update the schedule amounts
    --
     pkg_cs_db_payplan.sp_modify_instalment_amounts
     (
          in_session_id,
          in_transaction_id,
          in_policy_trx_id,
          in_policy_image_id,
          in_payment_plan_id
     );

     --Kiran start OSPRODUCT-29817
     sp_element_associate
     (
          in_session_id,
          in_transaction_id,
          v_product_id,               
          in_policy_image_id,
          in_policy_trx_id,
          in_payment_plan_id
     ); 
     --Kiran end OSPRODUCT-29817 

--OSPRODUCT-2496 start
exception
     WHEN POLICY_STATS_NOT_BALANCED then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Rating/Stats Error : The coverage amount populated in STATS table is not tallying with the policy transaction change amount. ' || 
               ' Policy Transaction ID: ' || in_policy_trx_id ||  ' Change Amount: ' || v_policytrx_change_amount ||
               ' Billing  mapped coverages Amount: ' || v_element_total_change_amount
          ); 

          raise;
--OSPRODUCT-2496 end
end sp_allocate_installment_amts;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_cash_applied_get
--
--   %USAGE
--        This procedure creates ScheduledPaymentElement objects for a given Payment Plan Scheduled Payment
--
--   %ALGORITHM
--        1. Set the Coverage Output Premium to 0
--        2. Loop each record in DB Billing Element Map table mapped to the Billing Element
--             a. Get the change amount from the Dragon Transaction Stats for PC Coverage ID
--             b. If Scheduled Payment Type is Stub and remaining installment count is greater than 0, then get the Coverage Earned Amount
--        3. If Schedule Payment Type is Installment and total number is installments is only 1 (Pay in Full), then
--                Schedule Element amount is Coverage Output Premium
--             Else If Scheduled Payment Type is Stub and there are no remaining installments, then
--                  Schedule Element amount is Coverage Output Premium
--               Else
--                  Split the Schedule Element amount based on Scheduled Payment Type, Split Method and installment number
--        4. If Schedule Element amount is greater than 0, then
--             a. Search for PaymentPlanScheduledPaymentElement object from Cache based on Master Key of Scheduled Payment ID, Coverage Object ID and Billing Element MD ID
--             b. If object exists in cache then
--                     Use existing Scheduled Payment Element Object
--             c. Else
--                  Create PaymentPlanScheduledPaymentElement object under PaymentPlanScheduledPayment object
--                  Set BV and required references
--
--
--
--   %PARAM     in_session_id                      Session Id
--   %PARAM     in_transaction_id                  Transaction Id
--   %PARAM     in_policy_image_id                 Policy Image Id
--   %PARAM     in_policy_transaction_id           Policy Transaction Id
--   %PARAM     in_product_id                      Product Id
--   %PARAM     in_filing_id                       Filing Id
--   %PARAM     in_policy_effective_date           Policy Effective Date
--   %PARAM     in_scheduled_payment_id            Scheduled Payment id
--   %PARAM     in_scheduled_payment_type          Scheduled Payment Type
--   %PARAM     in_installment_count               Installment count
--   %PARAM     in_installment_start_num           Installment Start Number
--   %PARAM     in_installment_number              Installment  Number
--   %PARAM     in_coverage_object_id              Coverage Object
--   %PARAM     in_equivalent_type_tf              Equivalent Type Flag
--   %PARAM     in_pay_plan_detail_md_row          Payment Plan MD row
--   %PARAM     in_billing_element_md_row          Billing Element MD row
--   %PARAM     in_bill_upfront_tf                 Bill Upfront Flag
--   %PARAM     in_adjust_schedule_tf              Adjust Schedule Flag
--   %PARAM     in_remaining_sched_count           Remaining Scheduled Count
--   %PARAM     in_rounding_precision              Rounding Precision
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


procedure sp_cash_applied_get
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_billing_element_id              in        db_billing_element.db_billing_element_id%type,
     in_coverage_object_id              in        object.object_id%type,
     in_payment_plan_md_row             in        getPaymentPlanList%rowtype,--OSPRODUCT-3108
     io_cash_applied                    in out     float,
     in_all_inst_tf                     in        char default 'F', --OSBILLING-4363
     in_payplan_id                      in        char default null, -- OSBILLING-4478
     in_billing_account_id              in        object.object_id%type default null, --OSBILLING-7451
     in_current_inst_tf                 in        char default 'F' --OSPRODUCT-34206 	 
)
as

     v_procedure_name                   constant system_log.program_name%type          := pkg_name||'sp_cash_applied_get';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_id                   object.object_id%type;
     v_policy_billing_method_id         number;
     v_master_policy_id                 object.object_id%type;

     v_credit_total                     float;

     v_cvg_obj_UTEMPLATE_OBJECT_ID      object.UTEMPLATE_OBJECT_ID%type; -- VAULTDEV-13034

	 -- UTPRODUCT-4119
     v_outside_credit_applied           float;
     v_only_cash_applied                float;

     --Start Kiran changes OSPRODUCT-31717
     v_debit_total                      float;
     v_basis_transaction_id             object.object_id%type;
     v_basis_trx_effective              object_bv_value.business_variable_value%type;
     v_trx_type                         number;
     v_trx_sub_type                     number;
     --End Kiran changes OSPRODUCT-31717

begin

     v_master_policy_id    := pkg_os_object.fn_object_parent_get(in_session_id ,in_transaction_id , in_policy_transaction_id);

     v_policy_term_id      := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_object.gbv_PolicyTrx_RefPolicyTerm );

     v_policy_billing_method_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_master_policy_id, pkg_db_billing_modify.gbv_PolicyBillingMethod);

     --Start Kiran changes OSPRODUCT-31717
     v_basis_transaction_id        := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, gbv_PolicyTrx_BasisRefTrx );
     v_basis_trx_effective         := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_basis_transaction_id, 212029);
     v_trx_type                    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, 212030);
     v_trx_sub_type                := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, 26542407);
     --End Kiran changes OSPRODUCT-31717

     v_cvg_obj_UTEMPLATE_OBJECT_ID := pkg_os_object.fn_object_get  -- VAULTDEV-13034
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          in_coverage_object_id
                                          --
                                      ).UTEMPLATE_OBJECT_ID ;

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name, '... Getting applied cash for '
              ||' Policy Term ID:'||v_policy_term_id
              ||' Coverage Object ID:'||in_coverage_object_id
              ||' Coverage UTEMPLATE Object ID:' || v_cvg_obj_UTEMPLATE_OBJECT_ID -- VAULTDEV-13034
              ||' Billing Element IDt:'||in_billing_element_id
              ||' Master Policy ID: ' || v_master_policy_id
              ||' Payplan MD ID: ' || in_payment_plan_md_row.payment_plan_id
              ||' Term Billing Method ID: ' || v_policy_billing_method_id
              ||' All Installment: ' || in_all_inst_tf --OSBILLING-4363
              ||' Pay Plan object ID '|| in_payplan_id -- OSBILLING-4478
              ||' start of term glag:'||pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind)
          ); 
     end if;
     
     -- UTPRODUCT-4119
	 -- UTPRODUCT-4159 reverted the changes done under UTPRODUCT-4119
    /* if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null then
          
          select
               sum(fic.action_delta)*-1
          into
               v_only_cash_applied
          from
               dragon_fichange fic
          join
               dragon_fitem fit   on (fic.fitem_id = fit.fitem_id)
          where
               fit.policy_id = v_master_policy_id
          and
               fit.fitem_type_id = pkg_db_object.gFItem_Debit
          and
               fic.Fitem_Transaction_Type_Id in (
                                                  gFITrxType_Cash_Apply,
                                                  gFITrxType_CashApply_Rev
                                                )
                                    
                                                
          and
               fit.billing_element_md_id = in_billing_element_id
          and
               fit.policy_term_id = v_policy_term_id
          and
               fit.installment_id in
               (
                    select
                         installment_id
                    from
                         dragon_scheduled_installment
                    where
                         policy_id = v_master_policy_id
                    and
                         policy_term_id = v_policy_term_id
                    and
                    (
                         in_all_inst_tf = 'T'    --OSBILLING-4363
                         or
                         (
                              payment_plan_md_id = in_payment_plan_md_row.payment_plan_id
                              and   -- OSBILLING-4478
                              (
                                    in_payplan_id is null
                                    or
                                    payment_plan_id = in_payplan_id
                              )
                         )
                    )
                   and
                         billing_method_id = v_policy_billing_method_id

               )
          and -- VAULTDEV-13034
               (
                  v_cvg_obj_UTEMPLATE_OBJECT_ID = pkg_os_object_io.fn_object_bv_get   -- to able to search a covered object in ALL PAS transaction
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       fit.fitem_asset_id,
                                                       pkg_os_constant_bv.gbv_Ultimate_Template
                                                  )
                  or
                  in_coverage_object_id is null  -- to be compatible with functions like PKG_DB_FUNCTIONS.fn_verify_installment_totals, where we are not interested in particular covered object
													   
																   
               )
          and
               (
               in_billing_account_id is null
               or
               in_billing_account_id= fit.billing_account_id
               )

          ;
          
          select sum(NVL(action_delta,0))
          into v_outside_credit_applied from dragon_fichange where fitransaction in 
          (
               select
               fitransaction-- fic.fichange_id,fit.billing_element_md_id,fic.Fitem_Transaction_Type_Id,fit.fitem_batch_type_id, fic.*
               from
               dragon_fichange fic
               join
               dragon_fitem fit on (fic.fitem_id = fit.fitem_id)
               where
               fit.policy_id = v_master_policy_id
               and
               fit.fitem_type_id = pkg_db_object.gFItem_Debit
               and

               fic.Fitem_Transaction_Type_Id in (
               gFITrxType_CreditApply,
               gFITrxType_CreditApply_Rev
               )
               and
               fit.billing_element_md_id = in_billing_element_id
               and
               fit.policy_term_id = v_policy_term_id
               and
               fit.installment_id in
               (
                    select
                         installment_id
                    from
                         dragon_scheduled_installment
                    where
                         policy_id = v_master_policy_id
                    and
                         policy_term_id = v_policy_term_id
                    and
                    (
																	 
                         in_all_inst_tf = 'T'    --OSBILLING-4363
                         or
                         (
                              payment_plan_md_id = in_payment_plan_md_row.payment_plan_id
                              and   -- OSBILLING-4478
                              (
                                    in_payplan_id is null
                                    or
                                    payment_plan_id = in_payplan_id
                              )
                         )
                    )
	
                   and
                         billing_method_id = v_policy_billing_method_id

               )
          and -- VAULTDEV-13034
               (
                  v_cvg_obj_UTEMPLATE_OBJECT_ID = pkg_os_object_io.fn_object_bv_get   -- to able to search a covered object in ALL PAS transaction
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       fit.fitem_asset_id,
                                                       pkg_os_constant_bv.gbv_Ultimate_Template
                                                  )
                  or
                  in_coverage_object_id is null  -- to be compatible with functions like PKG_DB_FUNCTIONS.fn_verify_installment_totals, where we are not interested in particular covered object
               )
          and
               (
               in_billing_account_id is null
               or
               in_billing_account_id= fit.billing_account_id
               )
          )

          and action_delta >0
          and Fitransaction_type= 'Cash/Credit Transfer';
     
          io_cash_applied := NVL(v_outside_credit_applied,0) + NVL(v_only_cash_applied,0);
     else
          */

     --Start Kiran changes OSPRODUCT-31717
     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name, 'Kiranchanges verification '
              ||' Policy Term ID:'||v_policy_term_id
              ||' pkg_db_object.gFItem_Debit: '|| pkg_db_object.gFItem_Debit
              ||' Coverage Object ID:'||in_coverage_object_id
              ||' Coverage UTEMPLATE Object ID:' || v_cvg_obj_UTEMPLATE_OBJECT_ID -- VAULTDEV-13034
              ||' Billing Element IDt:'||in_billing_element_id
              ||' Master Policy ID: ' || v_master_policy_id
              ||' Payplan MD ID: ' || in_payment_plan_md_row.payment_plan_id
              ||' Term Billing Method ID v_policy_billing_method_id: ' || v_policy_billing_method_id
              ||' All Installment: ' || in_all_inst_tf --OSBILLING-4363
              ||' Pay Plan object ID '|| in_payplan_id -- OSBILLING-4478
              ||' start of term glag:'||pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind)
              ||' v_cvg_obj_UTEMPLATE_OBJECT_ID: '||pkg_os_constant_bv.gbv_Ultimate_Template
              ||' in_coverage_object_id: ' || in_coverage_object_id       
              || ' in_billing_account_id:'|| in_billing_account_id
                                                  
          );
     end if;
     --End Kiran changes OSPRODUCT-31717

     --Start Kiran changes OSPRODUCT-31717
     if v_trx_type = gTrxType_Endorse and v_trx_sub_type = gChangeBillingMethod  -- its a Change Billing Method transaction
     then   
     
       select
          sum(fic.action_delta)*-1
       into
          io_cash_applied
       from
          dragon_fichange fic , dragon_fitem fit, dragon_policy_trx pt
       where
          fit.policy_id = v_master_policy_id
       and
          (fit.fitem_type_id = (case when fit.fitem_category_id = 946 then pkg_db_object.gFItem_Credit
          --(fit.fitem_type_id = (case when in_billing_element_id in (68946,71646,72146) then pkg_db_object.gFItem_Credit
                  else
                  pkg_db_object.gFItem_Debit
                  end) --decode(v_policy_billing_method_id,2,pkg_db_object.gFItem_Credit,pkg_db_object.gFItem_Debit
       and
          fic.Fitem_Transaction_Type_Id in ( gFITrxType_Cash_Apply, gFITrxType_CashApply_Rev, 
                                             gFITrxType_CreditApply, gFITrxType_CreditApply_Rev,
                                             604,1001,gFITrxType_CashTransfer, gFITrxType_CashTrf_Rev,
                                             gFITrxType_ReconCashTrf,gFITrxType_DeffApply
                                                --PMADEV-6309
                                                --,PKG_DB_CREDIT_APPLY.gFITrxType_DefPrem_Apply --PMADEV-6185
                                                --101,201,1601,6001,604,1001,6005 -Adjustment/Write-off ,1001- Adjustment/Write-off Reversal
                                                --401-Cash/Credit Transfer, 1301-Cash/Credit Transfer Reversal
                                             )
          )
       and
          fic.fitem_id = fit.fitem_id
       and
          fit.billing_element_md_id = in_billing_element_id
       and
          fit.policy_term_id = v_policy_term_id
       and
          fit.installment_id in
          (
             select installment_id from dragon_scheduled_installment
             where policy_id = v_master_policy_id and policy_term_id = v_policy_term_id
             and
             (
                   in_all_inst_tf = 'T'    --OSBILLING-4363
                   or
                   (
                        payment_plan_md_id = in_payment_plan_md_row.payment_plan_id
                        and   -- OSBILLING-4478
                        (
                            in_payplan_id is null
                            or
                              --PMADEV-6024
                              --payment_plan_id = in_payplan_id
                         nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,installment_id ,33820646),1) = 1
                        )
                   )
             )
             and
                 billing_method_id = v_policy_billing_method_id
                 --and
                 --  pkg_os_object_io.fn_object_bv_get(111,111,INSTALLMENT_ID,33820646) = 1 --ks
          )
       and --PMADEV-6173
        fit.policy_transaction_id = pt.policy_trx_id
       and
         trunc(pt.policy_trx_eff_date) <= trunc(to_date(v_basis_trx_effective,'YYYYMMDDHH24MISS'))
       and
          --PMADEV-5683
        --((v_policy_billing_method_id=2     AND     in_billing_element_id in (68946,71646,72146))
        ((v_policy_billing_method_id=2     AND     fit.fitem_category_id = 946)        
            OR
             ( fit.fitem_asset_name =
               pkg_os_object.fn_object_name_get(in_session_id, in_transaction_id, in_coverage_object_id)
             )
        )
        ;

       select
          sum(fic.action_delta)
       into
          v_credit_total
       from
          dragon_fichange fic , dragon_fitem fit, dragon_policy_trx pt
       where
          fic.policy_id = v_master_policy_id
       and
         (fic.fitem_type_id = pkg_db_object.gFItem_Credit
       and
         fic.Fitem_Transaction_Type_Id in (gFITrxType_Disbursement,gFITrxType_Disburse_Reversal))
       and
         fic.fitem_id = fit.fitem_id
       and
         fit.billing_element_md_id = in_billing_element_id
       and
         fit.policy_term_id = v_policy_term_id
       and --PMADEV-6173
        fit.policy_transaction_id = pt.policy_trx_id
       and
         trunc(pt.policy_trx_eff_date) <= trunc(to_date(v_basis_trx_effective,'YYYYMMDDHH24MISS'))
       and
         fit.fitem_asset_name = pkg_os_object.fn_object_name_get(in_session_id, in_transaction_id, in_coverage_object_id);

       --PMADEV-6309
       select
          sum(fic.action_delta) *(-1)
       into
            v_debit_total
       from
            dragon_fichange fic , dragon_fitem fit, dragon_policy_trx pt---PMADEV-6644
       where
            fic.policy_id = v_master_policy_id
       and
           (
          -- PMADEV-6309
           fic.fitem_type_id = pkg_db_object.gFItem_Debit
            and
           fic.Fitem_Transaction_Type_Id in (gFITrxType_Disbursement,gFITrxType_Disburse_Reversal))
       and
           fic.fitem_id = fit.fitem_id
       and
           fit.billing_element_md_id = in_billing_element_id
       and
            fit.policy_term_id = v_policy_term_id
       and --PMADEV-6644
          fit.policy_transaction_id = pt.policy_trx_id
       and
          trunc(pt.policy_trx_eff_date) <= trunc(to_date(v_basis_trx_effective,'YYYYMMDDHH24MISS'))
       and
           fit.fitem_asset_name = pkg_os_object.fn_object_name_get(in_session_id, in_transaction_id, in_coverage_object_id);

       -- now total together
     io_cash_applied := nvl(io_cash_applied,0) + nvl(v_credit_total,0) + nvl(v_debit_total,0); -- PMADEV-6309

      if v_session_control.gLogging_Full
      then
        pkg_os_logging.sp_log
        (
        in_session_id,
        in_transaction_id,
        v_procedure_name, '... Applied Cash cbm:'||io_cash_applied||' v_credit_total cbm: '||v_credit_total||
        ' v_debit_total cbm: '||v_debit_total|| ' in_billing_element_id cbm: '|| in_billing_element_id
        );
      end if;  
   
   else
   --End Kiran changes OSPRODUCT-31717


          select
               sum(fic.action_delta)*-1
          into
               io_cash_applied
          from
               dragon_fichange fic
          join
               dragon_fitem fit   on (fic.fitem_id = fit.fitem_id)
          where
               fit.policy_id = v_master_policy_id
          and
               fit.fitem_type_id = pkg_db_object.gFItem_Debit
          and
               fic.Fitem_Transaction_Type_Id in (
                                                  gFITrxType_Cash_Apply,
                                                  gFITrxType_CashApply_Rev,
                                                  gFITrxType_CreditApply,
                                                  gFITrxType_CreditApply_Rev
                                                )
          and
               fit.billing_element_md_id = in_billing_element_id
          and
               fit.policy_term_id = v_policy_term_id
          and
               fit.installment_id in
               (
                    select
                         installment_id
                    from
                         dragon_scheduled_installment
                    where
                         policy_id = v_master_policy_id
                    and
                         policy_term_id = v_policy_term_id
                    and
                    (
                         in_all_inst_tf = 'T'    --OSBILLING-4363
                         or
                         (
                              payment_plan_md_id = in_payment_plan_md_row.payment_plan_id
                              --OSPRODUCT-34206 
                              and   -- OSBILLING-4478
                              (
                                   (
                                        in_current_inst_tf = 'T'
                                        and
                                        current_pay_plan_inst = 'Yes'
                                   )
                                   or 
                                   (
                                        nvl(in_current_inst_tf, 'F') = 'F'
                                        and
                                        (                            
                                             in_payplan_id is null
                                             or
                                             payment_plan_id = in_payplan_id
                                        )
                                   )
                              )
                         )
                    ) -- end OSPRODUCT-34206 
                   and
                         billing_method_id = v_policy_billing_method_id

               )
          and -- VAULTDEV-13034
               (
                  v_cvg_obj_UTEMPLATE_OBJECT_ID = pkg_os_object_io.fn_object_bv_get   -- to able to search a covered object in ALL PAS transaction
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       fit.fitem_asset_id,
                                                       pkg_os_constant_bv.gbv_Ultimate_Template
                                                  )
                  or
                  in_coverage_object_id is null  -- to be compatible with functions like PKG_DB_FUNCTIONS.fn_verify_installment_totals, where we are not interested in particular covered object
               )
          and
               (
               in_billing_account_id is null
               or
               in_billing_account_id= fit.billing_account_id
               )

          ;
/*     
     end if;*/
     
     if v_session_control.gLogging_Full
     then
       pkg_os_logging.sp_log
       (
         in_session_id,
         in_transaction_id,
         v_procedure_name, '... Applied Cash:'||io_cash_applied
         || ' in_billing_element_id ' || in_billing_element_id
       );
     end if;
     

    -- 2016-06 Cheryl pmadev-552 check for credit but already a negative so don't multiply
    -- which is why they have to be separately vs using an or in above select


     select
          sum(fic.action_delta)
     into
          v_credit_total
     from
          dragon_fichange fic
     join
          dragon_fitem fit   on (fic.fitem_id = fit.fitem_id)
     where
          fic.policy_id = v_master_policy_id
     and
          fic.fitem_type_id = pkg_db_object.gFItem_Credit
     and
          fic.Fitem_Transaction_Type_Id in (
                                             gFITrxType_Disbursement,
                                             gFITrxType_Disburse_Reversal
                                           )
     and
          fit.billing_element_md_id = in_billing_element_id
     and
          fit.policy_term_id = v_policy_term_id
     and -- VAULTDEV-13034
          (
             v_cvg_obj_UTEMPLATE_OBJECT_ID = pkg_os_object_io.fn_object_bv_get   -- to able to search a covered object in ALL PAS transaction
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  fit.fitem_asset_id,
                                                  pkg_os_constant_bv.gbv_Ultimate_Template
                                             )
             or
             in_coverage_object_id is null  -- to be compatible with functions like PKG_DB_FUNCTIONS.fn_verify_installment_totals, where we are not interested in particular covered object
          )
          -- / VAULTDEV-13034
     ;

     -- now total together
     io_cash_applied := nvl(io_cash_applied,0) + nvl(v_credit_total,0);

     if v_session_control.gLogging_Full
     then
       pkg_os_logging.sp_log
       (
         in_session_id,
         in_transaction_id,
         v_procedure_name, '... Applied Cash:'||io_cash_applied
         || ' in_billing_element_id ' || in_billing_element_id
       );
     end if;

--Start Kiran changes OSPRODUCT-31717
end if;
--End Kiran changes OSPRODUCT-31717


end sp_cash_applied_get;

--OSBILLING-7451
procedure sp_billed_amount_get
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_billing_element_id              in        db_billing_element.db_billing_element_id%type,
     in_coverage_object_id              in        object.object_id%type,
     io_amount_billed                   in out     float,
     in_billing_account_id              in        object.object_id%type default null --OSBILLING-7451

)
as

     v_procedure_name                   constant system_log.program_name%type          := pkg_name||'sp_billed_amount_get';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_id                   object.object_id%type;
     v_policy_billing_method_id         number;
     v_master_policy_id                 object.object_id%type;

     v_cvg_obj_UTEMPLATE_OBJECT_ID      object.UTEMPLATE_OBJECT_ID%type; -- VAULTDEV-13034

begin

     v_master_policy_id    := pkg_os_object.fn_object_parent_get(in_session_id ,in_transaction_id , in_policy_transaction_id);

     v_policy_term_id      := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_object.gbv_PolicyTrx_RefPolicyTerm );

     v_policy_billing_method_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_master_policy_id, pkg_db_billing_modify.gbv_PolicyBillingMethod);

     v_cvg_obj_UTEMPLATE_OBJECT_ID := pkg_os_object.fn_object_get  -- VAULTDEV-13034
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          in_coverage_object_id
                                          --
                                      ).UTEMPLATE_OBJECT_ID ;

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name, '... Getting applied cash for '
              ||' Policy Term ID:'||v_policy_term_id
              ||' Coverage Object ID:'||in_coverage_object_id
              ||' Coverage UTEMPLATE Object ID:' || v_cvg_obj_UTEMPLATE_OBJECT_ID -- VAULTDEV-13034
              ||' Billing Element IDt:'||in_billing_element_id
              ||' Master Policy ID: ' || v_master_policy_id
              ||' Term Billing Method ID: ' || v_policy_billing_method_id
         );
     end if;

     select
          NVL(sum(fit.initial_amount),0)
     into
          io_amount_billed
     from
          dragon_fitem fit
     where
          fit.policy_id = v_master_policy_id
     and
          fit.fitem_type_id = pkg_db_object.gFItem_Debit
     and
          fit.billing_element_md_id = in_billing_element_id
     and
          fit.policy_term_id = v_policy_term_id
     and
          fit.fitem_billed_tf=1

     and
          (
             v_cvg_obj_UTEMPLATE_OBJECT_ID = pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  fit.fitem_asset_id,
                                                  pkg_os_constant_bv.gbv_Ultimate_Template
                                             )
             or
             in_coverage_object_id is null
          )
      and
          (
          in_billing_account_id is null
          or
          in_billing_account_id= fit.billing_account_id
          )

     ;





     if v_session_control.gLogging_Full
     then
       pkg_os_logging.sp_log
       (
         in_session_id,
         in_transaction_id,
         v_procedure_name, '... Applied Cash:'||io_amount_billed
         || ' in_billing_element_id ' || in_billing_element_id
       );
     end if;


end sp_billed_amount_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_element_earned_amount
--
--   %USAGE
--        This function returns the earned amount for a given Billing Element associated with a given Policy.
--
--   %ALGORITHM
--
--
--
--   %PARAM     in_session_id                      Session Id
--   %PARAM     in_transaction_id                  Transaction Id
--   %PARAM     in_policy_transaction_id           Policy Transaction Id
--   %PARAM     in_billing_element_md_row          Billing Element MD row
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function fn_get_element_earned_amount
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_payment_plan_md_id              in        payment_plan.payment_plan_id%type,
     in_billing_element_md_row          in        db_billing_element%rowtype,
     in_all_inst_tf                     in        char default 'F', --OSBILLING-4363
     in_payplan_id                      in        char default null,-- OSBILLING-4478
     in_coverage_object_id               in          object.object_id%type default null     --OSBilling-5665
)
return float
is
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'fn_get_element_earned_amount';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_master_policy_id                 object.object_id%type;
     v_policy_term_id                   object.object_id%type;
     v_policy_billing_method_id         number;
     v_term_payment_plan_id             object.object_id%type;
     v_term_payplan_md_id               number;

     v_earned_amount                    float := 0;

     v_asset_name                         varchar2(500);--OSBilling-5665
begin

     v_master_policy_id       := pkg_os_object.fn_object_parent_get(in_session_id ,in_transaction_id , in_policy_transaction_id);

     v_policy_term_id         := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_object.gbv_PolicyTrx_RefPolicyTerm );

     v_policy_billing_method_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_master_policy_id, pkg_db_billing_modify.gbv_PolicyBillingMethod);

     --v_term_payment_plan_id   := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_policy_term_id, pkg_db_billing_modify.gbv_PolicyTermPayPlan);

     --v_term_payplan_md_id     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_term_payment_plan_id, pkg_os_constant_bv.gbv_PaymentPlanID);
     v_asset_name := pkg_os_object.fn_object_name_get
     (
          in_session_id,
          in_transaction_id,
          in_coverage_object_id
     ); --OSBilling-5665

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Getting earned amount for Policy ID: '||v_master_policy_id
               ||' Policy Term ID: ' || v_policy_term_id
               ||' Policy Billing Method ID: ' || v_policy_billing_method_id
               ||' Payplan MD ID: ' || in_payment_plan_md_id
               ||' Billing Element ID: '||in_billing_element_md_row.db_billing_element_id
               ||' Billing Element Name: ' || in_billing_element_md_row.billing_element_name
               ||' Fitem Category: '|| in_billing_element_md_row.credit_fitem_category
               ||' Fitem Sub Category: '|| in_billing_element_md_row.credit_fitem_sub_category
               ||' All Installment: ' || in_all_inst_tf --OSBILLING-4363
               ||' Pay Plan object ID '|| in_payplan_id -- OSBILLING-4478
               ||' Covered Object ID '||in_coverage_object_id
               ||' Asset Name  '||v_asset_name
          );

     end if;


     --
     --  Get the sum of Earned Amount for the Payable FItem with that Category and Sub Category
     --

     select
          -- sum(nvl(df.earned_amount,0)) --OSPRODUCT-7805
          sum(nvl(df.earned_amount,0)- nvl(df.paid_amount,0)) --OSPRODUCT-7805 earned amount becomes 0 on disbursement
     into
          v_earned_amount
     from
          dragon_fitem df
     where
          df.policy_id = v_master_policy_id
     and
          df.policy_term_id = v_policy_term_id
     and
          df.installment_id in
          (
               select installment_id from dragon_scheduled_installment
               where policy_id = v_master_policy_id and policy_term_id = v_policy_term_id
               and
               (
                    in_all_inst_tf = 'T'    --OSBILLING-4363
                    or
                    (
                    payment_plan_md_id = in_payment_plan_md_id
                    and   -- OSBILLING-4478
                    (
                          in_payplan_id is null
                          or
                          payment_plan_id = in_payplan_id
                    )
                    )
               )
               and
                    billing_method_id = v_policy_billing_method_id

          )
     and
          df.fitem_category_id = in_billing_element_md_row.credit_fitem_category
     and
          df.fitem_sub_category_id = in_billing_element_md_row.credit_fitem_sub_category
     and
          df.earning_status not in ('Partially Earned') -- OSBilling-5665
     and
          (
          in_coverage_object_id is  null -- KR 12/20
          or
           df.fitem_asset_name = v_asset_name
           ) --OSBilling-5665
;

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '...... Earned Amount: '||v_earned_amount
          );

     end if;


     return v_earned_amount;

end fn_get_element_earned_amount;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_get_cat_applied_amount
--
--   %USAGE
--        This function returns the applied amount for a given Category associated with an installment of a Policy.
--
--   %ALGORITHM
--
--
--
--   %PARAM     in_session_id                      Session Id
--   %PARAM     in_transaction_id                  Transaction Id
--   %PARAM     in_policy_transaction_id           Policy Transaction Id
--   %PARAM     in_billing_element_md_row          Billing Element MD row
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_cat_applied_amount
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_installment_id                  in        object.object_id%type,
     in_category_id                     in        db_fitem_category.db_fitem_category_id%type
)
return float
is
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'fn_get_cat_applied_amount';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_category_applied_amount          float := 0;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Getting applied amount based on FItem Category associated with Installment ID: '||in_installment_id
               ||' FItem Category ID: '||in_category_id
          );

     end if;


     --
     --  Get the Applied Amount for the Debit Financials of the input category and associated with input Installment ID
     --

    select
        nvl((sum(fic.action_delta)*-1), 0)
    into
        v_category_applied_amount
    from
        dragon_fichange fic , dragon_fitem fit
    where
        fit.installment_id = in_installment_id
    and
        (    fit.fitem_type_id = pkg_db_object.gFItem_Debit
             and
             fic.Fitem_Transaction_Type_Id in (gFITrxType_Cash_Apply,gFITrxType_CashApply_Rev,gFITrxType_CreditApply,gFITrxType_CreditApply_Rev)
        )
    and
        fic.fitem_id = fit.fitem_id
   and
        fit.fitem_category_id = in_category_id;



     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '...... Applied Amount: '||v_category_applied_amount
          );

     end if;


     return v_category_applied_amount;

end fn_get_cat_applied_amount;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--   %NAME
--        sp_schedule_elements_create
--
--   %USAGE
--        Create scheduled elements for a particular installment and a particular billing element ...
--
--   %ALGORITHM
--        Not specified.
--
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_schedule_elements_create
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_policy_trx_date                 in        date,
     in_payment_plan_id                 in        object.object_id%type,
     in_start_installment_number        in        number,
     in_current_stub_id                 in        object.object_id%type,
     in_product_id                      in        pd_product.pd_product_id%type,
     in_filing_id                       in        pd_filing.pd_filing_id%type,
     in_billing_element_id              in        db_billing_element.db_billing_element_id%type,
     in_coverage_object_id              in        object.object_id%type,
     in_modifying_payment_plan          in        number,
     in_payment_plan_md_row             in        getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_md_split_method                 in        db_payment_plan_detail.element_split_method%type,
     in_split_installment_count         in        db_payment_plan_detail.element_installment_count%type,
     in_split_element_rounding          in        db_payment_plan_detail.element_rounding%type,
     in_split_adjustment_type           in        db_payment_plan_detail.adjustment_type%type,
     in_md_spread_overridable_tf        in        db_payment_plan_detail.transaction_spread_override_tf%type, -- OSBILLING-3689
     in_transaction_spread_tf           in        char, -- OSBILLING-3689
     in_split_billing_flag              in        char,
     in_amount_to_next_nid_tf           in        char, -- OSBILLING-4232
     in_rounding_precision              in        number default 5,
     in_change_payer_tf                 in        char default 'F',--VAULTDDEV-6645
     in_old_payer_tf                    in        char default 'F',
     v_old_payer_account                in        object.object_id%type --OSBILLING-7451
)
is
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_schedule_elements_create';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


     cursor c_getBillingElementMapInfo
     (
          in_billing_element_id in DB_billing_element_map.DB_billing_element_id%type,
          in_product_id         in payment_plan_detail.pd_product_id%type,
          in_filing_id          in payment_plan_detail.pd_filing_id%type
     )
     is
     select
          a.*,
          b.apply_rule,
          b.element_change_amount_rule,
          b.element_total_amount_rule
     from
          db_billing_element_map   a,
          db_billing_element       b
     where
          a.db_billing_element_id = in_billing_element_id
     and  a.db_billing_element_id = b.db_billing_element_id
     and  (
               a.pd_product_id in
               (in_product_id, pkg_os_reference_lookup.gDefaultProductID) or
               a.pd_product_id is null
          )
     and
          (
               a.pd_filing_id <= in_filing_id or
               a.pd_filing_id is null
          )
     and  (
               a.last_pd_filing_id >= in_filing_id or
               a.last_pd_filing_id is null
          )
     and  (    b.create_credit_tf = 'T' or b.create_debit_tf = 'T')
     and  nvl(a.active_tf, 'T') = 'T'
     and  nvl(b.active_tf, 'T') = 'T'
     
     union select
          a.*,
          b.apply_rule,
          b.element_change_amount_rule,
          b.element_total_amount_rule
     from
          db_billing_element       b
     left join 
          db_billing_element_map   a on a.db_billing_element_id = b.db_billing_element_id
     where
          a.db_billing_element_id is null
     and 
          b.db_billing_element_id = in_billing_element_id
     and  (    b.create_credit_tf = 'T' or b.create_debit_tf = 'T')
     and  nvl(b.active_tf, 'T') = 'T';
      --ORDER by b.apply_order;	



     cursor c_getNonZeroInstallments
     (
          in_policy_id            in    object.object_id%type,
          in_policy_term_id       in    object.object_id%type,
          in_payment_plan_md_id   in    payment_plan.payment_plan_id%type,
          in_billing_method_id    in    number
     )
     is
     select
          *
     from
          dragon_scheduled_installment
     where
          policy_id = in_policy_id
     and
          policy_term_id = in_policy_term_id
     and
          payment_plan_md_id = in_payment_plan_md_id
     and
          billing_method_id = in_billing_method_id
     and
          balance_amount <> 0
     ;


     --     Determine total element change & earned amounts ...

     v_element_total_change_amount      number;
     v_element_total_earned_amount      number;

     v_element_total_current_amount     number;

     v_billing_element_amount           number;

     v_billing_element_md_row           db_billing_element%rowtype;

     v_stat_record                      dragon_transaction_stats%rowtype;

     v_late_booked_pay_upfront          object_bv_value.business_variable_value%type;

     v_modified_fla                     varchar2(100); --- Kiska fla? Amount ka fla Ki Schedule ka fla?

     --     Stub Amount Determination ...

     v_stub_end_date                    varchar2(20);
     v_stub_earned_amt                  float;
     v_coverage_unearned_amount         float;
     v_coverage_written_amount          float;
     v_stub_total_earned_amount         float;
     v_stub_element_amount              float;
     v_installment_number               number;
     v_rounding_instalment_number       number;
     v_installment_element_amount       float;
     v_rounding_instalment_amount       float;
     v_remaining_installment_count      number;
     v_installment_total_amount         float;
     v_installment_adj_amount           float;

     v_rounding_precision               number;
     v_use_premium_change               number;

     v_nonlinear_table                  pkg_os_token.t_string_table;
     v_payment_fla                      number;
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type;
     v_earlier_payment_plan             object.object_id%type;
     v_basisimage_id                    object.object_id%type;
     v_prior_term_element_amnt          float;
     v_cash_already_applied             float;
     v_billed_amount                    float := 0; -- OSBILLING-7451
     v_payable_earned_amount            float;
     v_category_applied_amount          float;
     v_category_total_applied           float;
     v_earlier_payplan_md_id            payment_plan.payment_plan_id%type;
     v_earlier_payplan_md_row           getPaymentPlanList%rowtype;--OSPRODUCT-3108
     v_policy_term_id                   object.object_id%type;
     v_term_billing_method_id           number;
     v_master_policy_id                 object.object_id%type;
     v_bill_method_change_flag          number;
     v_updated_element_amount           float;

     v_pol_trx_subtype_for_End          object_bv_value.business_variable_value%type;

     v_trx_spread_option                number;
     v_override_split_method            number; -- OSBILLING-3689
     v_set_due_date_flag                char(1):='F';
     v_scheduled_payment_element_id     object.object_id%type;
     v_master_key                       varchar2(100);
     v_master_key_updated               varchar2(100);
     v_existing_payment_count           number;

      --VAULTDEV-6645
     v_idx                              long;--VAULTDDEV-6645
     v_ptp_payer_list                   PKG_DB_MULTIPAYER.t_payer_tab;
     v_basis_ptp_payer_list             PKG_DB_MULTIPAYER.t_payer_tab;
     v_payer_billing_account_id         object.object_id%type;
     v_sum_inst_element_amount          number :=0; --OSBILLING-6800
     v_sum_amount                       number :=0; --OSBILLING-6800
     v_coverage_id                      number;--OSBILLING-6800
     --v_coverage_name                    varchar2(100);--OSBILLING-6800
     v_coverage_name                    PC_COVERAGE.PC_COVERAGE_NAME%type; --OSPRODUCT-25818

     --OSBILLING-7451
     v_change_payer_amount_option       object_bv_value.business_variable_value%type;
     --UTPRODUCT-3439 start
     v_earlier_other_payment_plan       object.object_id%type;
     v_other_payer_element              object.object_id%type;
     v_other_payer_element_amount       object_bv_value.business_variable_value%type :=0;
     v_basis_ptp_payer_indx             object.object_id%type;
     --UTPRODUCT-3439 end
	 v_coverage_object_id               object.object_id%type;  --OSPRODUCT-7313     
     v_schedule_elements_list           object_tt := new object_tt();          --OSPRODUCT-8086
     v_schedule_elements_indx           number;				       --OSPRODUCT-8086
     v_cpp_start_of_term                object_bv_value.business_variable_value%type;--KR CR OSPRODUCT-4819    
     v_PolicyMultiPayerEnabled          boolean;--OSPRODUCT-11975
     v_chosen_payplan_ptp               object.object_id%type;--OSPRODUCT-11975
     v_idx_payer                        char(1);--OSPRODUCT-11975 
     v_stat_object_list                 pkg_os_object.t_object_list;--OSPRODUCT-14266
     v_stat_count                       number := 0; --OSPRODUCT-14266
     v_apply_rule                       char(1);   --OSPRODUCT-32901

     v_create_element_el_amt_zero       char(1):= 0;  -- OSPRODUCT-16043
begin

     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Get some metadata ....
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     v_late_booked_pay_upfront     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_payment_plan_id, gbv_PayPlan_LateBookUpfront );
     v_transaction_type_id         := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );

     v_rounding_precision          := NVL(in_split_element_rounding, in_rounding_precision);

     v_billing_element_md_row :=  pkg_db_payplan_modify.fn_billing_element_row
     (
          in_session_id,
          in_transaction_id,
          in_billing_element_id
     );

     v_trx_spread_option :=  pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Spread_Amount
          );
     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name,'||| Creating Billing Elements for Billing Element:'||v_billing_element_md_row.billing_element_name||'('||v_billing_element_md_row.db_billing_element_id||')'
              ||' CoverageObjectID:'||in_coverage_object_id||pkg_os_object.fn_object_name_get(in_session_id, in_transaction_id, in_coverage_object_id)
              || 'in_change_payer_tf:'||in_change_payer_tf
         );

     end if;


/*
     if in_start_installment_number is null then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,'... The start installment number is null ... '
          );

          raise no_data_found;

     end if;
*/


     if in_current_stub_id is not null
     then

          v_stub_end_date :=  pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_current_stub_id,
               gbv_actual_end_date
          );

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,'...... Stub End Date:'||v_stub_end_date
          );

     end if;


     --
     --     If we're changing payment plans, we need to calculate the new payment plan using the entire premium that is currently outstanding. Otherwise,
     --     we just have to look at the effect of the changes in payment plan.
     --

     if in_modifying_payment_plan = pkg_os_constant.gBoolean_False
     then
          v_use_premium_change := pkg_os_constant.gBoolean_True;
     else
          v_use_premium_change := pkg_os_constant.gBoolean_False;

     end if;



     v_pol_trx_subtype_for_end := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_transaction_id,
          gbv_PolicyTrx_SubType
     );
     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Determine the total amount to be associated with this billing element ....
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     v_element_total_change_amount      := 0;
     v_element_total_earned_amount      := 0;
     v_element_total_current_amount     := 0;
     v_payable_earned_amount            := 0;

     -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --   For each coverage associated with the billing element in question, get the appopriate premium/premium change ...
     --
     --   @@@VG: This MD should also be cached ...
     --
     -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
     --OSPRODUCT-14266 start
     if not pkg_os_object_type.fn_object_persistence_type_get(in_session_id,in_transaction_id,PKG_OS_POLICY_STAT.gObjType_PolicySTAT)= pkg_os_object_type.gPersistence_Relational
     then
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_transaction_id,
               PKG_OS_POLICY_STAT.gObjType_PolicySTAT,
               v_stat_object_list,
               null,
               true,
               false
          );
     end if;
     v_stat_count   :=   v_stat_object_list.count;
     --OSPRODUCT-14266 end
     
     for v_BillingElementMapInfo   in   c_getBillingElementMapInfo
                                        (
                                             in_billing_element_id,
                                             in_product_id,
                                             in_filing_id
                                        )
     loop
          v_apply_rule := pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, in_policy_image_id, v_BillingElementMapInfo.apply_rule);  --OSPRODUCT-32901
          
          if v_BillingElementMapInfo.apply_rule is null or v_apply_rule = 'T'
              then
          
               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,'... Considering CoverageID:'||v_BillingElementMapInfo.pc_coverage_id
                   );
     
               end if;
     
               --OSPRODUCT-14266 start
               if v_stat_count > 0
               then
                    v_stat_record   :=  pkg_os_policy_stat.fn_get_stat_record_raw
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_transaction_id,
                                             pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, in_coverage_object_id ),
                                             null,
                                             v_BillingElementMapInfo.pc_coverage_id,
                                             v_stat_object_list
                                        );
               else
                    v_stat_record   :=  pkg_os_policy_stat.fn_get_stat_record_raw
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_transaction_id,
                                             pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, in_coverage_object_id ),
                                             null,
                                             v_BillingElementMapInfo.pc_coverage_id
                                        );
               end if;
               --OSPRODUCT-14266 end
               if ( v_BillingElementMapInfo.pc_coverage_id is not null)
               then
                    v_coverage_id                           := v_BillingElementMapInfo.pc_coverage_id; --OSBILLING-6800
                    v_coverage_name                           := v_stat_record.COVERAGE_NAME;--OSBILLING-6800
                    v_element_total_current_amount     := v_element_total_current_amount  +    round(  v_stat_record.current_amount,     v_rounding_precision  );  -- in_rounding_precision OSBILLING-7681
                    v_element_total_change_amount      := v_element_total_change_amount   +    round(  v_stat_record.change_amount,      v_rounding_precision  );  -- in_rounding_precision OSBILLING-7681
                    v_element_total_earned_amount      := v_element_total_earned_amount   +    round(  v_stat_record.earned_amount,      v_rounding_precision  );  -- in_rounding_precision OSBILLING-7681
               else
                    v_element_total_current_amount     := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, in_policy_image_id , 15716748);  -- set from element_current_amount_rule OSPRODUCT-32901
                    v_element_total_change_amount      := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, in_policy_image_id , 15714848);  -- set from element_change_amount_rule OSPRODUCT-32901 
                    v_element_total_earned_amount      := v_element_total_earned_amount   +    round(  v_stat_record.earned_amount,      v_rounding_precision  );  -- in_rounding_precision OSBILLING-7681
                end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '...... Coverage Totals'
                    ||' Current Amount:'||v_element_total_current_amount
                    ||' Change Amount:'||v_element_total_change_amount
                    ||' Earned Amount:'||v_element_total_earned_amount||'v_stat_record.change_amount'||v_stat_record.change_amount
                    ||' Rounding Precision :' || v_rounding_precision  -- OSBILLING-7681
               );
          end if;

          --
          --     There is a stub, figure out how much we'll be earning in the stub period, since this will be billed in the stub
          --     installment, and the remainder will be distributed amongst the remaining installments in the policy term.
          --

          v_stub_earned_amt := 0;

          if in_current_stub_id is not null
          then
               if v_BillingElementMapInfo.pc_coverage_id is not null  
               then

                    pkg_base_policy_stat.sp_coverage_earned_premium_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_transaction_id,
                         in_coverage_object_id,
                         v_BillingElementMapInfo.pc_coverage_id,
                         v_stub_end_date,
                         in_split_element_rounding , -- OSBILLING-7071
                         v_stub_earned_amt,
                         v_coverage_unearned_amount,
                         v_coverage_written_amount,
                         v_use_premium_change
                    );
               end if;

               v_stub_total_earned_amount  :=   nvl(v_stub_total_earned_amount,0) + nvl(v_stub_earned_amt,0);

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Stub Earned Amount:'||v_stub_earned_amt
                         || 'Cumulative Stub Earned Amount:' || v_stub_total_earned_amount
                    );
               end if;

            end if;

          end if;


     end loop; -- for each coverage in the billing element ....

     -- Get payment plan from the prior transaction ...

     v_basisimage_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_transaction_id,
          gbv_PolicyTrxRefBasisCoverage
     );
     
     --OSPRODUCT-11975 start
     v_chosen_payplan_ptp     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        gbv_PolicyRefChosenPlan
                                   );
     v_PolicyMultiPayerEnabled := pkg_db_multipayer.fn_multipayer_mode_tf
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_policy_image_id
                                  );     
     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Basis Image ID: ' || v_basisimage_id ||
               ' Transaction Type ID ' || v_transaction_type_id ||
               ', Multipayer Enabled :'|| case when v_PolicyMultiPayerEnabled is null then 'NULL'
                                               when v_PolicyMultiPayerEnabled         then 'TRUE'
                                               else                               'FALSE'
                                          end ||
              ' Chosen Payment Plan ' || v_chosen_payplan_ptp
         );
     end if;

     if ( v_transaction_type_id = PKG_DB_STMT.g_TrxType_Rewrite and 
          v_chosen_payplan_ptp is null and
          not v_PolicyMultiPayerEnabled
        )  
     then
          v_idx_payer    :=   pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr;
     else
          v_idx_payer    :=  pkg_db_multipayer.g_PayerGet_idx_ChosenPlan;
     end if;
     --OSPRODUCT-11975 end
     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Index used: ' || v_idx_payer 
         );
     end if;
     --VAULTDDEV-6645
     --OSPRODUCT-1113
     pkg_db_multipayer.sp_ptp_payers_get
     (
          in_session_id         => in_session_id,
          in_transaction_id     => in_transaction_id,
          in_ptp_object_id      => in_policy_image_id,
          io_payer_list         => v_ptp_payer_list,
          in_print_list         => 'Y',
          in_index_by           => v_idx_payer
     );

     if pkg_db_multipayer.fn_payer_exists
        (
             in_session_id,
             in_transaction_id,
             in_related_id    => in_payment_plan_id,
             io_payer_list    => v_ptp_payer_list,
             out_idx          => v_idx
        )
     then
               v_payer_billing_account_id := v_ptp_payer_list(v_idx).PayerBillingAccount_id;

               begin

                      -- OSBILLING-7177

                      if v_basisimage_id is not null
                            then

                     PKG_DB_MULTIPAYER.sp_ptp_payers_cache_get
                    (
                         in_session_id         => in_session_id,
                         in_transaction_id     => in_transaction_id,
                         io_cached_payer_lists => g_policy_payer_tab,
                         in_ptp_object_id      => v_basisimage_id,



                         io_payer_list         => v_basis_ptp_payer_list,
                         in_print_list         => 'Y',
                         in_index_by           => pkg_db_multipayer.g_PayerGet_idx_BilingAccount
                    );
                  --end if;

                         --UTPRODUCT-3439 start
                         /*if v_basis_ptp_payer_list.exists(v_payer_billing_account_id) then
                               v_earlier_payment_plan := v_basis_ptp_payer_list(v_payer_billing_account_id).chosen_payment_plan;
                               if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.v_earlier_payment_plan'||v_earlier_payment_plan
                                   );

                              end if;
                         end if;*/
                          
                         v_basis_ptp_payer_indx := v_basis_ptp_payer_list.first;
                         while v_basis_ptp_payer_indx is not null loop
                               
                              if v_basis_ptp_payer_indx = v_payer_billing_account_id then
                                   v_earlier_payment_plan := v_basis_ptp_payer_list(v_basis_ptp_payer_indx).chosen_payment_plan;
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.v_earlier_payment_plan'||v_earlier_payment_plan
                                        );
                                    end if;
                              else
                                    if pkg_db_multipayer.fn_multipayer_mode_tf(in_session_id,
                                                                               in_transaction_id,
                                                                               in_policy_image_id) then
                                        v_earlier_other_payment_plan := v_basis_ptp_payer_list(v_basis_ptp_payer_indx).chosen_payment_plan;
                                        if v_session_control.gLogging_Full
                                        then
                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.v_earlier_other_payment_plan'||v_earlier_other_payment_plan
                                             );
                                        end if;
                                    end if;
                              end if;
                              v_basis_ptp_payer_indx := v_basis_ptp_payer_list.next(v_basis_ptp_payer_indx);
                         end loop;
                         --UTPRODUCT-3439 end
                    end if;
               exception
                    when others
                         then
                       if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...current billing acount is not present in basis transaction. So, earlier payplan id is null for:'
                                   ||v_payer_billing_account_id
                              );

                         end if;

               end;

          else
               pkg_os_logging.sp_log_error

               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... ERROR: Not able to find a payer by chosen payment plan plan '|| in_payment_plan_id


               );

               raise no_data_found;

          end if;

     --VAULTDDEV-6645 ends
     v_earlier_payplan_md_id   :=  pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          v_earlier_payment_plan,
          pkg_os_constant_bv.gbv_PaymentPlanID
     );

     v_earlier_payplan_md_row :=   fn_payment_plan_row(v_earlier_payplan_md_id );

     v_master_policy_id       :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_transaction_id);

     v_policy_term_id         :=   pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_transaction_id,
          gbv_PolicyTrxRefPolicyTerm
     );

     v_term_billing_method_id :=   pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          v_policy_term_id,
          pkg_db_billing_modify.gbv_PolicyTermBillingMethod
     );

     --
     --  Get the Billing Method Change Flag to check if Billing Method was ever changed for this term
     --  Based on this, the amounts for offsetting the Payables is identified
     --

     v_bill_method_change_flag :=  pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          v_policy_term_id,
          pkg_db_billing_modify.gbv_BillMethodChangeFlag
     );

      ---start OSBILLING-6988
     if (
             (v_bill_method_change_flag = pkg_os_constant.gBoolean_Yes or v_bill_method_change_flag is null)  ----20200114_cheryl osproduct-1211
              and
             v_pol_trx_subtype_for_end = pkg_db_billing_modify.gChangeBillingMethod
        )
     then
          v_earlier_payplan_md_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_payment_plan_id,
                                                                      pkg_os_constant_bv.gbv_PaymentPlanID);
          v_earlier_payplan_md_row := fn_payment_plan_row(v_earlier_payplan_md_id);

     end if;
     ---end OSBILLING-6988

     if in_modifying_payment_plan = pkg_os_constant.gBoolean_True and v_earlier_payment_plan is null then

          pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Modifying payment plan flag is ON, but the payment plan in the basis transaction is null ... ' );

          raise no_data_found;

     end if;


     --
     --       Determine the total amount that will be associated with this billing element ...
     --
     
                       if v_session_control.gLogging_Full  --20200114   Cheryl
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...change payer: '
                                   ||in_change_payer_tf
                                   ||'...change flag: '
                                   ||v_bill_method_change_flag
                                   || ' ..subtype: '
                                   || v_pol_trx_subtype_for_end 
                                   || '  change payer option: '
                                   || NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, pkg_db_constant.gbv_PTP_ChangePayerAmountOpt ),pkg_db_constant.g_changepayer_option_trx)                                  
                                   || '  old payer: '
                                   || in_old_payer_tf
                                   || ' earlier payplan: '
                                   || v_earlier_payplan_md_id
                              );

                         end if; 
                         
  

     if NVL(in_change_payer_tf,'F')='F'--VAULTDDEV-6645
       or nvl(v_pol_trx_subtype_for_End,0) = gTrxSubType_BillMethodChange  --20200114 Cheryl osproduct-1211
          then
     if   in_modifying_payment_plan = pkg_os_constant.gBoolean_False
          and
          (
              (
                   v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                   and nvl(v_pol_trx_subtype_for_End,0) <> gTrxSubType_BillMethodChange
              )
              or
              v_transaction_type_id <> pkg_os_policy_transaction.gPolicyTrxType_Endorsement
          )
     then

          --
          --     If we're not changing the payment plan or the billing method, all we will do is to create billing elements accounting for any
          --     CHANGES in policy cost that have occurred as part of this transaction.
          --

          v_billing_element_amount :=   v_element_total_change_amount;


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Final Billing Element Amount:'
                    ||v_billing_element_amount
               );

          end if;


     else

          --
          --     If we are either changing the payment plan or changing the Bill Method,  we will do is to create billing elements accounting for the current
          --     policy cost (after this transaction) minus any cash that has already been applied to this billing element.
          --

          --v_billing_element_amount :=   v_element_total_current_amount + v_element_total_change_amount;
          --OSPRODUCT-8086 start
          if v_earlier_other_payment_plan is not null then
               v_schedule_elements_list.delete;
               pkg_os_object_search.sp_object_with_attribute_get
                                        (
                                             in_session_id                 => in_session_id,
                                             in_transaction_id             => in_transaction_id,
                                             in_parent_object_id           => v_earlier_other_payment_plan,
                                             in_object_type_id             => 2365546,
                                             in_business_variable_id       => 30790846,
                    in_business_variable_value    => v_billing_element_md_row.db_billing_element_id,
                    out_object_list               => v_schedule_elements_list
                                        );
               if v_schedule_elements_list.count > 0 then
                    v_schedule_elements_indx := v_schedule_elements_list.first;
                    while v_schedule_elements_indx is not null loop
                         v_other_payer_element_amount := v_other_payer_element_amount + nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_schedule_elements_list(v_schedule_elements_indx).object_id, 29713846),0);
                         v_schedule_elements_indx := v_schedule_elements_list.next(v_schedule_elements_indx);
                    end loop;
               end if;
--               v_other_payer_element_amount := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_other_payer_element, 29713846),0);
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_other_payer_element:'
                         ||v_other_payer_element ||
                         'v_other_payer_element_amount:'
                         ||v_other_payer_element_amount
                    );

               end if;
          end if;
          --OSPRODUCT-8086 end
          v_billing_element_amount :=   v_element_total_current_amount;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Final Billing Element Amount:'
                    ||v_billing_element_amount
               );

          end if;



           if v_billing_element_md_row.create_debit_tf is not null and v_billing_element_md_row.create_debit_tf = 'T'
          then

               select
                    nvl(set_due_date_on_creation, 'T')
               into
                    v_set_due_date_flag
               from
                    db_fitem_sub_category
               where
                    db_fitem_sub_category_id = v_billing_element_md_row.debit_fitem_sub_category;


          elsif v_billing_element_md_row.create_credit_tf is not null and v_billing_element_md_row.create_credit_tf = 'T'
          then
               select
                    nvl(set_due_date_on_creation, 'T')
               into
                    v_set_due_date_flag
               from
                    db_fitem_sub_category
               where
                    db_fitem_sub_category_id = v_billing_element_md_row.credit_fitem_sub_category;


          end if;


          if v_set_due_date_flag = 'F'
          then
               --
               --  Set the Amount to 0 so that Change Pay Plan or Billing Method Change do not create any Schedule Elements
               --
               v_billing_element_amount := 0;


          end if;


          --
          --  Proceed further only if we have an amount to process
          --

          if v_billing_element_amount <> 0
          then
               v_updated_element_amount := 0;

               --
               --  If the Billing Element is a receivable OR (receivable + payable), then check the applied amount
               --
                   -- OSBILLING-5141,OSBILLING-5267

               /*if ( v_billing_element_md_row.create_debit_tf is not null and v_billing_element_md_row.create_debit_tf = 'T'
                    and ( v_billing_element_md_row.debit_fitem_category not in (946,5746) or v_billing_element_md_row.debit_fitem_sub_category in (61746,61946,45646)  ))

               then*/
               -- KR CR OSPRODUCT-4819 
               v_cpp_start_of_term := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id , gbv_ptp_cpp_term_start_ind);
               
               -- Kiran start OSPRODUCT-30490. 
               if v_transaction_type_id = pkg_os_policy_transaction.gpolicytrxtype_endorsement
                    AND Nvl(v_pol_trx_subtype_for_end, 0) = gtrxsubtype_billmethodchange
                    then
                        v_cpp_start_of_term := null;
               end if;     
               -- Kiran end OSPRODUCT-30490

               --if (v_billing_element_md_row.billing_elem_calc_type is null or v_billing_element_md_row.billing_elem_calc_type = 1) then
               if (v_billing_element_md_row.billing_elem_calc_type is null or v_billing_element_md_row.billing_elem_calc_type = 1) 
                  and
                  v_cpp_start_of_term is null -- KR CR OSPRODUCT-4819 
               then  
                          -- Start OSPRODUCT-34621
                       if v_transaction_type_id = pkg_os_policy_transaction.gpolicytrxtype_endorsement
                       and 
                             nvl(v_pol_trx_subtype_for_end, 0) = gtrxsubtype_billmethodchange
                       then
                                
                              sp_cash_applied_get
                              (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_image_id,
                                    in_policy_transaction_id,
                                    in_billing_element_id,
                                    in_coverage_object_id,
                                    v_earlier_payplan_md_row,
                                    v_cash_already_applied,
                                    'T'               --OSBILLING-4363
                              );
                                
                       else
                                
                              if v_session_control.gLogging_Full
                              then
                                    pkg_os_logging.sp_log
                                    (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          '...Get cash applied.. Start of term indicator is null..'
                                    );

                              end if;
                                
                              sp_cash_applied_get
                              (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_image_id,
                                    in_policy_transaction_id,
                                    in_billing_element_id,
                                    in_coverage_object_id,
                                    v_earlier_payplan_md_row,
                                    v_cash_already_applied,
                                    'T',                                --OSBILLING-4363
                                    in_billing_account_id => v_payer_billing_account_id
                                    --in_current_inst_tf => 'T'
                              );
                                
                       end if;
                       -- end OSPRODUCT-34621 

                    if v_cash_already_applied is null
                    then
                         v_cash_already_applied := 0;

                    end if;


                    --
                    --  If Bill Method has ever changed on the Term, then consider the Initial Amounts for the current term installments
                    --

                   if v_bill_method_change_flag is not null and v_bill_method_change_flag = pkg_os_constant.gBoolean_Yes
                    then

                         select
                              NVL(sum(df.initial_amount),0)
                         into
                              v_updated_element_amount
                         from
                              dragon_fitem df
                         where
                              df.policy_id = v_master_policy_id
                         and
                              df.policy_term_id = v_policy_term_id
                         and
                              df.installment_id in
                              (
                                   select installment_id from dragon_scheduled_installment
                                   where policy_id = v_master_policy_id and policy_term_id = v_policy_term_id
                                   and payment_plan_md_id = v_earlier_payplan_md_row.payment_plan_id
                                   and   -- OSBILLING-4478
                                   (
                                         v_earlier_payment_plan is null
                                         or
                                         payment_plan_id = v_earlier_payment_plan
                                   )
                                   and billing_method_id = v_term_billing_method_id
                              )
                         and
                              df.fitem_category_id = v_billing_element_md_row.debit_fitem_category
                         and
                              df.fitem_sub_category_id = v_billing_element_md_row.debit_fitem_sub_category
                         --Start Kiran changes OSPRODUCT-32639
                         and
                              df.BILLING_ELEMENT_MD_ID = v_billing_element_md_row.db_billing_element_id
                         --End Kiran changes OSPRODUCT-32639							  
                         and df.fitem_type_id =pkg_db_object.gFItem_Debit   ; --VAULTDEV-6645

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...debit Element Amount from the Term : '||v_updated_element_amount
                                   ||'v_earlier_payment_plan:'||v_earlier_payment_plan
                                   ||'v_master_policy_id:'||v_master_policy_id
                                   ||'v_billing_element_md_row.debit_fitem_category:'||v_billing_element_md_row.debit_fitem_category
                                   ||'v_billing_element_md_row.debit_fitem_sub_category:'||v_billing_element_md_row.debit_fitem_sub_category
                                   ||'v_term_billing_method_id:'||v_term_billing_method_id
                              );

                         end if;


                         sp_cash_applied_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_image_id,
                              in_policy_transaction_id,
                              in_billing_element_id,
                              in_coverage_object_id,
                              v_earlier_payplan_md_row,
                              v_cash_already_applied,
                              'F' ,                                --OSBILLING-4363
                              v_earlier_payment_plan
                         );

                         v_billing_element_amount :=   v_updated_element_amount - v_cash_already_applied;

                    else

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Element Amount from the Stats : '||v_element_total_current_amount
                              );

                         end if;


                         --v_billing_element_amount :=   (v_element_total_current_amount + v_element_total_change_amount) - v_cash_already_applied;
                         v_billing_element_amount :=   (v_element_total_current_amount) - v_cash_already_applied;

                    end if;


                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Final Billing Element Amount (Post cash-application adjustments):'
                              ||v_billing_element_amount
                         );

                    end if;


               else

                    --
                    --  When the Billing Element is either Payable only,
                    --  then identify the final amount by excluding the Earned Amount and category based applied amount incase of partial payments on receivables
                    --  also considering if the Bill Method was ever changed on the Term
                    --
               if  v_cpp_start_of_term is null -- KR CR OSPRODUCT-4819 
               then
                    
                              --Start Kiran changes OSPRODUCT-31717
                              if v_term_billing_method_id = 2 then
                              
                                    if v_session_control.gLogging_Full
                                         then
                                              pkg_os_logging.sp_log
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_procedure_name,
                                                   '... Kiranchanges Verification:'
                                                    ||'in_session_id: ' || in_session_id
                                                    ||'in_transaction_id: ' ||in_transaction_id
                                                    ||'in_policy_image_id: '||in_policy_image_id
                                                    ||'in_policy_transaction_id: '||in_policy_transaction_id
                                                    ||'v_billing_element_md_row.db_billing_element_id:'||v_billing_element_md_row.db_billing_element_id
                                                    ||'in_coverage_object_id: '||in_coverage_object_id
                                                    --||'v_earlier_payplan_md_row: '|| v_earlier_payplan_md_row
                                                    --||'v_payable_earned_amount: '|| v_payable_earned_amount --v_cash_already_applied,
                                                    --||'True Indicator is True '                                 --OSBILLING-4363
                                              );
                
                                    end if;
                                    
                                    sp_cash_applied_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        in_policy_transaction_id,
                                        v_billing_element_md_row.db_billing_element_id,
                                        in_coverage_object_id,
                                        v_earlier_payplan_md_row,
                                        v_payable_earned_amount,--v_cash_already_applied,
                                        'T'                                 --OSBILLING-4363
                                   );
 
                              else
                              --End Kiran changes OSPRODUCT-31717                    
                    
                    v_payable_earned_amount := nvl(fn_get_element_earned_amount
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_policy_transaction_id,
                                                    v_earlier_payplan_md_row.payment_plan_id,
                                                    v_billing_element_md_row,
                                                    'T'       -- OSBILLING-4363
                                               ), 0);
                    
                         --Start Kiran changes OSPRODUCT-31717
                               end if;
                               --End Kiran changes OSPRODUCT-31717                                               

                    v_category_applied_amount :=   0;
                    v_category_total_applied  :=   0;

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Getting the applied amount for the PolicyTerm ID: '||v_policy_term_id
                              ||', Payment Plan MD ID: '||v_earlier_payplan_md_row.payment_plan_id
                              ||', Billing Method ID: '||v_term_billing_method_id
                         );

                    end if;


                    for r_installment in c_getNonZeroInstallments
                                             (
                                                  v_master_policy_id,
                                                  v_policy_term_id,
                                                  v_earlier_payplan_md_row.payment_plan_id,
                                                  v_term_billing_method_id
                                             )
                    loop

                         v_category_applied_amount :=  fn_get_cat_applied_amount
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            r_installment.installment_id,
                                                            v_billing_element_md_row.credit_fitem_category
                                                       );

                         v_category_total_applied      :=   v_category_total_applied + nvl(v_category_applied_amount, 0);

                    end loop;


                    --
                    --  If Bill Method has ever changed on the Term, then consider the Initial Amounts for the current term installments
                    --

                    if v_bill_method_change_flag is not null and v_bill_method_change_flag = pkg_os_constant.gBoolean_Yes
                    then

                         select
                              sum(df.initial_amount) * (-1)
                         into
                              v_updated_element_amount
                         from
                              dragon_fitem df
                         where
                              df.policy_id = v_master_policy_id
                         and
                              df.policy_term_id = v_policy_term_id
                         and
                              df.installment_id in
                              (
                                   select installment_id from dragon_scheduled_installment
                                   where policy_id = v_master_policy_id and policy_term_id = v_policy_term_id
                                   and payment_plan_md_id = v_earlier_payplan_md_row.payment_plan_id
                                   and   -- OSBILLING-4478
                                   (
                                         v_earlier_payment_plan is null
                                         or
                                         payment_plan_id = v_earlier_payment_plan
                                   )
                                   and billing_method_id = v_term_billing_method_id
                              )
                         and
                              df.fitem_category_id = v_billing_element_md_row.credit_fitem_category
                         and
                              df.fitem_sub_category_id = v_billing_element_md_row.credit_fitem_sub_category
                         and df.fitem_type_id =pkg_db_object.gFItem_Credit    ;   --VAULTDEV-6645

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Element Amount from the Term : '||v_updated_element_amount
                              );

                         end if;

                              --Start Kiran changes OSPRODUCT-31717
                                   if v_term_billing_method_id = 2 then
                                        sp_cash_applied_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             in_policy_transaction_id,
                                             in_billing_element_id,
                                             in_coverage_object_id,
                                             v_earlier_payplan_md_row,
                                             v_payable_earned_amount,--v_cash_already_applied,
                                             'F' ,                                --OSBILLING-4363
                                             v_earlier_payment_plan --PMADEV-7063
                                        );
                                   else
                                   --End Kiran changes OSPRODUCT-31717

                          v_payable_earned_amount := nvl(fn_get_element_earned_amount
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_policy_transaction_id,
                                                    v_earlier_payplan_md_row.payment_plan_id,
                                                    v_billing_element_md_row,
                                                    'F' ,      -- OSBILLING-4363
                                                    v_earlier_payment_plan,
                                                    in_coverage_object_id --OSBilling-5665
                                               ), 0);

                         --Start Kiran changes OSPRODUCT-31717
                         end if;                     
                         --End Kiran changes OSPRODUCT-31717
						 -- Test

                         v_billing_element_amount :=   (v_updated_element_amount + v_payable_earned_amount) - v_category_total_applied;

                    else

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Element Amount from the Stats : '||v_element_total_current_amount
                              );

                         end if;


                         --v_billing_element_amount :=   (v_element_total_current_amount + v_element_total_change_amount + v_payable_earned_amount) - v_category_total_applied;
                         v_billing_element_amount :=   (v_element_total_current_amount + v_payable_earned_amount) - v_category_total_applied;

                    end if;

              end if; -- KR CR

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Earned Amount: '||v_payable_earned_amount
                              ||', Category level applied amount: '||v_category_total_applied
                              ||', Final Billing Element Amount (Post payable earning adjustments and category level applied amount):'
                              ||v_billing_element_amount
                         );

                    end if;


               end if; -- if v_billing_element_md_row.create_debit_tf

          end if; --  if v_element_total_current_amount <> 0

     v_billing_element_amount := v_billing_element_amount - v_other_payer_element_amount;  --UTPRODUCT-3439

     end if; --  in_modifying_payment_plan = pkg_os_constant.gBoolean_False

else--VAULTDEV-6645

         --OSBILLING-7451
         v_change_payer_amount_option := NVL(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, pkg_db_constant.gbv_PTP_ChangePayerAmountOpt ),pkg_db_constant.g_changepayer_option_trx);

         if v_change_payer_amount_option =pkg_db_constant.g_changepayer_option_total then
             if in_old_payer_tf ='T'
               then
                    v_billing_element_amount := (-1)*( v_element_total_current_amount - v_element_total_change_amount);

               else
                    v_billing_element_amount :=  v_element_total_current_amount ;
             end if;

         elsif v_change_payer_amount_option =pkg_db_constant.g_changepayer_option_Unearned then

              if in_old_payer_tf ='T'
               then
                    v_billing_element_amount := (-1)*( v_element_total_current_amount - v_element_total_change_amount-  v_element_total_earned_amount);



               else
                    v_billing_element_amount :=  v_element_total_current_amount -  v_element_total_earned_amount;
               end if;

        elsif  v_change_payer_amount_option =pkg_db_constant.g_changepayer_option_trx then

              if in_old_payer_tf ='T'
               then
                    v_billing_element_amount := 0;

               else
                    v_billing_element_amount :=  v_element_total_change_amount;
               end if;


          elsif  v_change_payer_amount_option =pkg_db_constant.g_changepayer_option_unpaid then


             sp_cash_applied_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id,
                         in_policy_transaction_id,
                         in_billing_element_id,
                         in_coverage_object_id,
                         v_earlier_payplan_md_row,
                         v_cash_already_applied,
                         'T' ,                                --OSBILLING-4363
                         v_earlier_payment_plan,
                         v_old_payer_account
                    );
              if in_old_payer_tf ='T'
               then
                    v_billing_element_amount := (-1)*( v_element_total_current_amount - v_element_total_change_amount-  NVL(v_cash_already_applied,0));

               else
                    v_billing_element_amount :=  v_element_total_current_amount -  NVL(v_cash_already_applied,0);

               end if;

           elsif  v_change_payer_amount_option =pkg_db_constant.g_changepayer_option_unbilled then

             sp_billed_amount_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id,
                         in_policy_transaction_id,
                         in_billing_element_id,
                         in_coverage_object_id,
                         v_billed_amount,
                         v_old_payer_account

                    );
              if in_old_payer_tf ='T'
               then
                    v_billing_element_amount := (-1)*( v_element_total_current_amount - v_element_total_change_amount-  NVL(v_billed_amount,0));

               else
                    v_billing_element_amount :=  v_element_total_current_amount -  NVL(v_billed_amount,0);

               end if;

        end if;

        if in_old_payer_tf ='T' then

           v_stub_total_earned_amount := (-1)*v_stub_total_earned_amount;

        end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Final Billing Element Amount:'||v_billing_element_amount||
                    'v_change_payer_amount_option:'||v_change_payer_amount_option||
                    'v_stub_total_earned_amount:'||v_stub_total_earned_amount||
                    'v_cash_already_applied:'||v_cash_already_applied||
                    'v_billed_amount:'||v_billed_amount||
                    'old payer:'||v_old_payer_account


               );

          end if;
     end if;
     --
     --   Setting v_prior_term_element_amnt as 0
     --

     pkg_cs_db_payplan.sp_get_prior_term_amount
     (
          in_session_id,
          in_transaction_id,
          in_policy_transaction_id,
          in_coverage_object_id,
          in_billing_element_id,
          in_product_id,
          in_filing_id,
          v_prior_term_element_amnt,
          v_rounding_precision   -- in_rounding_precision OSBILLING-7681
     );

     --
     --   If the billing element is such that it's spread attribute can be overridden at the level of a transaction, then check the transaction spread flag, and override what the md says about splitting.
     --
     if in_amount_to_next_nid_tf = 'T' and in_transaction_spread_tf = 'F' -- OSBILLING-4232
     then
        v_override_split_method       :=   gSplit_On_Upfront;

     elsif in_md_spread_overridable_tf = 'T'
     then


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '... overridden '
                    ||' in_md_spread_overridable_tf'||in_md_spread_overridable_tf
                    || 'in_transaction_spread_tf:' || in_transaction_spread_tf
                    || 'v_trx_spread_option:'||v_trx_spread_option
                    ||'v_override_split_method : ' || v_override_split_method
               );

          end if;

          --   We can overrride ...
          /*if v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_Endorsement and nvl(v_pol_trx_subtype_for_End,0) = gTrxSubType_ChangePayPlan--OSBILLING-4480
          then

               v_override_split_method       := in_md_split_method;

          else*/

          --OSBILLING-5211
          if ( v_trx_spread_option is not null )
          then
               if  v_trx_spread_option =  1
               then
                    v_override_split_method       := gSplit_On_Payment_Plan;


          else

                    v_override_split_method       := in_md_split_method;

               end if;
          else
               if  in_transaction_spread_tf = 'T' then

                  v_override_split_method       := gSplit_On_Payment_Plan;

               else

                  v_override_split_method       := in_md_split_method;

               end if;


          end if;


     else

         v_override_split_method := in_md_split_method;

     end if;


     -----------------------------------------------------------------------------------------------------------------------------------------------------
     --
     --  Now split the amount associated with this billing element amongst the stub (assuming we have one) and any remaining installments ....
     --
     -----------------------------------------------------------------------------------------------------------------------------------------------------

     --
     --     Allocate to stub ...
     --

     if in_current_stub_id is not null
     then


          if in_start_installment_number is null or
             v_override_split_method in
             (gSplit_On_Upfront, gSplit_On_Stub) --   OSBILLING-3689
           then
                -- OSBILLING-7005
              if (( fn_trx_starts_new_term(v_transaction_type_id)=1 and
                  NVL(v_stub_total_earned_amount,0)=0) or (in_amount_to_next_nid_tf = 'T')) -- added check for amount to next nid tf UTPRODUCT-2194
                   then
				 if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... setting v_stub_element_amount = 0 for stub id='||in_current_stub_id
                              ||' in_amount_to_next_nid_tf ='||in_amount_to_next_nid_tf
                         );

                    end if;
                   v_stub_element_amount :=0;

               else
                    v_stub_element_amount := v_billing_element_amount;

               end if;

          else


          -- OSBILLING-7005
               if fn_trx_starts_new_term(v_transaction_type_id)=1 and
                  in_payment_plan_md_row.nonlinear_payment_fla is not null
                  and in_payment_plan_md_row.min_down_payment_pct is not null
                  and NVL(v_stub_total_earned_amount,0)<>0

                then
                     v_stub_element_amount := v_billing_element_amount* in_payment_plan_md_row.min_down_payment_pct/100;
                else

               v_stub_element_amount := v_stub_total_earned_amount;
               end if;

          end if;


          v_billing_element_amount := v_billing_element_amount - v_stub_element_amount;
     end if;


     --
     --     Now loop through the remaining installments, creating elements to adjust each installment ...
     --

     -- Because we number installments as 1, 2, 3 as opposed to 0, 1, 2, 3, we need to make an adjustment of 1.

     --v_remaining_installment_count := ( nvl (g_Payment_Cache.count, in_payment_plan_md_row.num_instalments) + 1 ) - in_start_installment_number; -- OSBILLING-331

     --  GK: commented the above line as during Bill Method Change, we may not start with Installment Number 1.
     --  So, remaining number of installments would be (total number of installments +1) - start installment number

     v_remaining_installment_count := ( in_payment_plan_md_row.num_instalments + 1 ) - in_start_installment_number; -- OSBILLING-331

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '... Looping through Installments - '
               ||' Start Installment Number:'||in_start_installment_number
               ||' in_payment_plan_md_row.num_instalments:'||in_payment_plan_md_row.num_instalments
               ||' Billing Amount:'||v_billing_element_amount
               ||' Stub Element Amount:' || v_stub_element_amount
               ||' v_late_booked_pay_upfront:' || v_late_booked_pay_upfront
               || 'in_transaction_spread_tf:' || in_transaction_spread_tf
               ||'v_override_split_method : ' || v_override_split_method
          );

     end if;


     --
     --   Now loop through the remaining installments ...
     --

     v_installment_number := in_start_installment_number;

     --
     --  OSBILLING-1849   If the non linear payment schedulle needs to be updated based on any specific conditions then the client specific logic can be incorporated in this procedure
     --

     pkg_cs_db_payplan.sp_update_nonlinear_fla
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_md_row,
          v_installment_number,
          v_remaining_installment_count,
          v_late_booked_pay_upfront,
          v_modified_fla
     );


     while v_installment_number is not null
       and v_installment_number <=in_payment_plan_md_row.num_instalments
       and v_billing_element_amount <> 0 -- we have not run out of amounts to bill ...
     loop

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name, '... Working on Installment Number:'||v_installment_number
               );
          end if;


          v_installment_element_amount := 0;

          if v_override_split_method = gSplit_On_Upfront
          then

               --
               --   Take care of anything that needs to be billed up-front ...
               --

               if --in_current_stub_id is null and --OSBILLING-7005 if stub id in not null, we have already incuded v_billing_element_amount in stub
                  v_installment_number = in_start_installment_number then

                    v_installment_element_amount := v_billing_element_amount;

               else

                    v_installment_element_amount := 0;

               end if;


          elsif v_override_split_method = gSplit_On_Payment_Plan -- OSBILLING-3689
          then




               --
               --  GK: Commented the above call to fn_schedule_interval_get as it was returning non-linear interval days instead of non-linear payment percentage.
               --

               if trim(nvl(v_modified_fla,in_payment_plan_md_row.nonlinear_payment_fla)) is not null
               then

                    pkg_os_token.sp_tokenize_string
                    (
                         nvl(v_modified_fla,in_payment_plan_md_row.nonlinear_payment_fla),
                         ',',
                         v_nonlinear_table
                    );


                    if v_nonlinear_table.exists(v_installment_number)
                    then

                         v_payment_fla   :=   v_nonlinear_table(v_installment_number);

                    else

                         pkg_os_logging.sp_log_error
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Unable to determine the Non-Linear Payment FLA for '||v_installment_number||' - from String:'||nvl(v_modified_fla,in_payment_plan_md_row.nonlinear_payment_fla)
                         );

                         raise no_data_found;


                    end if;


               end if;


               if v_transaction_type_id in
                    (
                         pkg_os_policy_transaction.gPolicyTrxType_Renewal,
                         pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,
                         pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,
                         pkg_os_policy_transaction.gPolicyTrxType_Reissue,
                         pkg_os_policy_transaction.gPolicyTrxType_Rewrite    --OSPRODUCT-2044

                    )
               and in_payment_plan_md_row.nonlinear_payment_fla is not null
                  and in_current_stub_id is null --OSBILLING-7005
               then

                     v_installment_element_amount           :=   v_billing_element_amount*(v_payment_fla/100);

               elsif
                     (
                        v_transaction_type_id = pkg_os_policy_transaction.gPolicyTrxType_endorsement
                        and in_payment_plan_md_row.nonlinear_payment_fla is not null
                        and nvl(in_start_installment_number,0) = 1
                      )  -- While payment plan change, if non linear payplan is selected as new payment plan , then in_start_installment_numberwould always be 1
               then

                    v_installment_element_amount           :=   v_billing_element_amount*(v_payment_fla/100);

               else
                    v_installment_element_amount           :=   v_billing_element_amount / v_remaining_installment_count;

               end if;


               v_installment_element_amount       :=    round( v_installment_element_amount, v_rounding_precision);

               v_installment_total_amount         :=    nvl(v_installment_total_amount,0) + v_installment_element_amount;

               v_installment_adj_amount           :=    v_billing_element_amount - v_installment_total_amount;

               if v_session_control.gLogging_Full
               then
                      pkg_os_logging.sp_log
                      (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
                           '......... v_installment_adj_amount : '||v_installment_adj_amount||
                           '......... v_installment_element_amount : '||v_installment_element_amount||
                            '.........v_modified_fla : '|| v_modified_fla||
                           '.........v_payment_fla : '|| v_payment_fla ||
                           ': in_split_adjustment_type :'||in_split_adjustment_type -- Gyan
                      );
               end if;


               --OSBILLING-5428
               if   nvl(in_split_adjustment_type, gAdjustmentType_Last) = gAdjustmentType_First
               and
                    v_installment_number = in_start_installment_number

               then


                    v_rounding_instalment_number := v_installment_number;
                    v_rounding_instalment_amount :=v_installment_element_amount;
                    
                    --OSPRODUCT-16043
                    if v_installment_adj_amount <> 0 
                    then 
                    
                       v_create_element_el_amt_zero := 1;
                    
                    end if; 
                    --OSPRODUCT-16043

               elsif
                    nvl(in_split_adjustment_type, gAdjustmentType_Last) = gAdjustmentType_Last
                    and
                    v_installment_number = in_payment_plan_md_row.num_instalments
               then


                    v_rounding_instalment_number := v_installment_number;
                    v_rounding_instalment_amount :=v_installment_element_amount;

                    -- OSPRODUCT-16043
                    if v_installment_adj_amount <>  0 
                    then 
                    
                       v_create_element_el_amt_zero := 1;
                    
                    end if; 
                    -- OSPRODUCT-16043

               end if;


          elsif v_override_split_method  = gSplit_On_Custom_Plan -- OSBILLING-3689
          then

               pkg_cs_db_payplan.sp_schedule_element_amount
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        in_policy_transaction_id,
                                        in_policy_trx_date,
                                        in_payment_plan_id,
                                        in_start_installment_number,
                                        in_current_stub_id,
                                        in_product_id,
                                        in_filing_id,
                                        in_billing_element_id,
                                        in_coverage_object_id,
                                        in_modifying_payment_plan,
                                        in_payment_plan_md_row,
                                        in_split_installment_count,
                                        in_split_element_rounding,
                                        in_split_adjustment_type,
                                        v_rounding_precision,       -- in_rounding_precision OSBILLING-7681
                                        v_stat_record.current_amount,
                                        v_stat_record.change_amount,
                                        v_stat_record.earned_amount,
                                        v_stub_element_amount,
                                        v_installment_element_amount ,
                                        v_installment_number,
                                        v_remaining_installment_count,
                                        v_transaction_type_id,
                                        v_billing_element_amount  ,
                                        v_installment_total_amount ,
                                        v_prior_term_element_amnt
                                   );


               v_installment_total_amount    :=   nvl(v_installment_total_amount,0) + v_installment_element_amount;

          else

               pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unsupported split method in DB_BILLING_ELEMENT_MAP Split Type ID:'||in_md_split_method );
               raise no_data_found;

          end if;



          -- OSBILLING-4232
          -- If the split is on payment plan and amount to be put on immediate instalment,
          -- then add the stub amount to the instalment amount
          if  v_override_split_method = gSplit_On_Payment_Plan
              and
              in_amount_to_next_nid_tf = 'T'
              and
              v_installment_number = in_start_installment_number
          then
                      pkg_os_logging.sp_log
                      (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
                           '.........v_installment_number' ||  v_installment_number ||
                           ' in_start_installment_number' || in_start_installment_number||
                           ' v_installment_element_amount ' ||  v_installment_element_amount ||
                           ' v_stub_total_earned_amount ' || v_stub_total_earned_amount||
                           'g_payment_cache( v_installment_number ):'||g_payment_cache( v_installment_number )||
                           'in_coverage_object_id:'||in_coverage_object_id

                      );

             v_installment_element_amount :=  v_installment_element_amount + nvl(v_stub_total_earned_amount,0);
             v_stub_element_amount :=0; --OSPRODUCT-2072

          end if;


          --
          --     If the installment element is not zero, create a billing element object ...
          --
                      pkg_os_logging.sp_log
                      (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
 --                          '.........in_policy_transaction_id' ||  in_policy_transaction_id ||
 --                          ' v_billing_element_md_row ' ||  v_billing_element_md_row ||
                           ' v_installment_number ' ||  v_installment_number ||
                           ' v_installment_element_amount ' || v_installment_element_amount

                      );



          if v_installment_element_amount <> 0
             -- OSPRODUCT-16043
             or   
             (v_installment_element_amount = 0 and nvl(v_create_element_el_amt_zero,0) = 1 )
             -- OSPRODUCT-16043 
          then

               sp_schedule_element_create
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_transaction_id,
                    g_payment_cache( v_installment_number ),
                    in_coverage_object_id,
                    v_billing_element_md_row,
                    v_installment_element_amount,
                    in_split_billing_flag,
                    in_old_payer_tf
               );

          end if;


          --
          --     On to the next installment ...
          --
          --OSBILLING-6800 start
          v_sum_inst_element_amount := v_sum_inst_element_amount + v_installment_element_amount ;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' v_installment_number ' ||  v_installment_number ||
                    ' Current Coverage Object ID : ' || in_coverage_object_id ||
                    ' Coverage Name : ' || v_coverage_name ||
                    ' Coverage ID : ' || v_coverage_id ||
                    ' Coverage Change amount : ' || v_element_total_change_amount ||
                    ' Coverage Current amount : ' || v_element_total_current_amount ||
                    ' Payment Plan Scheduled Payment Element Amount : ' || v_sum_inst_element_amount
               );
          end if;
          --OSBILLING-6800 end
          v_installment_number := v_installment_number + 1;

     end loop; -- for each remaining installment ...
	 ---UTPRODUCT-2194 START---
	 --
	 --     Create stub billing element object ...
	 --

	 if in_current_stub_id is not null and v_stub_element_amount <> 0 
	 then
          
		 sp_schedule_element_create
		 (
			 in_session_id,
			 in_transaction_id,
			 in_policy_transaction_id,
			 in_current_stub_id,
			 in_coverage_object_id,
			 v_billing_element_md_row,
			 v_stub_element_amount,
			 in_split_billing_flag,
			 in_old_payer_tf
		 );
               
	 if v_session_control.gLogging_Full
	 then
		 pkg_os_logging.sp_log
		 (
			 in_session_id,
			 in_transaction_id,
			 v_procedure_name,
			 ' creating stub element for stub id: ' || v_stub_element_amount ||
			 ' Current stub id:'||in_current_stub_id
		 );
	 end if;
	 end if;
	---UTPRODUCT-2194 END-----						   

     sp_load_sched_payment_cache
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          v_existing_payment_count
     );

     v_sum_amount := nvl(v_sum_inst_element_amount,0) + nvl(v_installment_adj_amount,0) + nvl(v_stub_element_amount,0); --OSBILLING-6800

     --OSBILLING-5428
     -- If there is any adjustment amount left, add it to first/last installment as per configuration
     if v_installment_adj_amount <> 0
     then

          /*v_master_key   :=   g_payment_cache( v_rounding_instalment_number )||'-'||  --OSPRODUCT-5367
                              in_coverage_object_id||'-'||
                              v_billing_element_md_row.db_billing_element_id||'-' ||
                              v_rounding_instalment_amount;*/
                              
          --OSPRODUCT-7313 start                    
          if in_old_payer_tf='F'
          then
               v_coverage_object_id := in_coverage_object_id;
          else
               v_coverage_object_id := pkg_os_object_io.fn_object_bv_get  -- template pbject
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_coverage_object_id,
                                                 pkg_os_constant_bv.gbv_Template
                                            );
          end if;
          
          --OSPRODUCT-7313 end
          v_master_key   :=   g_payment_cache( v_rounding_instalment_number )||'-'||    --OSPRODUCT-5367
                              --in_coverage_object_id||'-'||  --OSPRODUCT-7313
                              v_coverage_object_id||'-'||     --OSPRODUCT-7313
                              v_billing_element_md_row.db_billing_element_id||'-' ||
                              v_rounding_instalment_amount||'-' ||
                              in_policy_transaction_id;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' adjustment v_master_key: ' || v_master_key
               );
          end if;
          if g_scheduled_element_cache.exists(v_master_key)
          then

               -- get the element id from cache
               v_scheduled_payment_element_id     :=      g_scheduled_element_cache(v_master_key);

               v_installment_adj_amount := v_installment_adj_amount+ v_rounding_instalment_amount;

               /*v_master_key_updated   :=   g_payment_cache( v_rounding_instalment_number )||'-'||
                              in_coverage_object_id||'-'||
                              v_billing_element_md_row.db_billing_element_id||'-' ||
                              v_installment_adj_amount;*/
                              
               v_master_key_updated   :=   g_payment_cache( v_rounding_instalment_number )||'-'||
                              --in_coverage_object_id||'-'||  --OSPRODUCT-7313
                              v_coverage_object_id||'-'||     --OSPRODUCT-7313
                              v_billing_element_md_row.db_billing_element_id||'-' ||
                              v_installment_adj_amount ||'-' ||      
                              in_policy_transaction_id;               

               --OSBILLING-5860: issue: last installment was getting doubled in case last installment was having extra adjustment amount.
               -- First time when this procedure is getting called, it creats elements with installment amount and updates the last installment with installment+adjustment amount.
               -- when this procedure is called next time, master key on last instamment does not match as amount is different, so it creates a new installment.
               -- Resolution: We are checking here that instalment with updated amount is already present or not. If yes, we consider that this updated amount installment is already created.
               -- as we don't have any way to identify it at the time of installment creation, we will delete the element here.
               if g_scheduled_element_cache.exists(v_master_key_updated)
               then
                   pkg_os_object.sp_object_delete
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   g_payment_cache( v_rounding_instalment_number ),
                                   v_scheduled_payment_element_id,
                                   gObjType_ScheduledElement,
                                   null,
                                   false
                              );
                    if v_session_control.gLogging_Full
                    then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,

                         '.......deleted element:'||v_scheduled_payment_element_id

                    );

                    end if;

               else



                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_scheduled_payment_element_id,
                         gbv_element_amount,
                         v_installment_adj_amount
                    );
                    if v_session_control.gLogging_Full
                    then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.......updated element:'||v_scheduled_payment_element_id
                         || 'with amount:'||v_installment_adj_amount
                    );

                    end if;
                end if;

          end if;

     end if;
     if v_pol_trx_subtype_for_end not in ( gChangePaymentPlan,gChangeBillingMethod)   --OSBILLING-7128
          and (v_pol_trx_subtype_for_end = gTrxSubType_Endorsement and in_modifying_payment_plan <> gBooleanTrue)--OSBILLING-7223
          and NVL(in_change_payer_tf,'F')='F' -- OSBILLING-7451
      then
          --OSBILLING-6800 start
          if v_sum_amount  <>  v_element_total_change_amount
          then
               pkg_os_logging.sp_log_error -- Error logging
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'For Policy Transaction id : ' || in_policy_transaction_id ||
                    ' Current Coverage Object ID : ' || in_coverage_object_id ||
                    ' Coverage Name : ' || v_coverage_name ||
                    ' Coverage ID : ' || v_coverage_id ||
                    ' Coverage amount : ' || v_element_total_change_amount ||
                    ' Payment Plan Scheduled Payment Element Amount : ' || v_sum_amount ||
                    ' Mismatch present '
               );
               raise COVERAGE_NOT_BALANCED;
          end if;
          --OSBILLING-6800 end
     end if; --OSBILLING-7128


     --OSBILLING-6800 start
     exception
          when COVERAGE_NOT_BALANCED then
               --OSPRODUCT-2496 start
               /*pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Error: Unable to balance  Policy Transaction id : '|| in_policy_transaction_id||
                    ' Coverage Object ID : ' || in_coverage_object_id ||
                    ' Coverage Name : ' || v_coverage_name ||
                    ' Coverage ID : ' || v_coverage_id ||
                    ' Change amount : ' ||  v_element_total_change_amount ||
                    ' Created amount : ' || v_sum_amount
               );*/
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Rating/ Stats Error : ' || 
                    ' For the Element ID: ' || in_billing_element_id ||
                    ' Change amount : ' ||  v_element_total_change_amount ||
                    ' Coverage ID : ' || v_coverage_id ||
                    ' Coverage Name : ' || v_coverage_name ||
                    ' Coverage Object ID : ' || in_coverage_object_id ||
                    ' Created amount : ' || v_sum_amount ||
                    ' The Policy and Billing amounts are not matching. Please Ensure the DRAGON_TRANSACTION_STATS is populated or reach out to Billing if any wrong coverages are mapped to any Billing Element.'
               );
               --OSPRODUCT-2496 end

               raise;
     --OSBILLING-6800 end
end sp_schedule_elements_create;



-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_schedule_element_create
--
--   %USAGE
--        This procedure creates ScheduledPaymentElement objects for a given Payment Plan Scheduled Payment
--
--   %ALGORITHM
--          Not specified
--
--
--   %PARAM     in_session_id                      Session Id
--   %PARAM     in_transaction_id                  Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_schedule_element_create
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_scheduled_payment_id            in        object.object_id%type,
     in_coverage_object_id              in        object.object_id%type,
     in_billing_element_md_row          in        db_billing_element%rowtype,
     in_element_amount                  in        float,
     in_split_billing_flag              in        char,

     in_old_payer_tf                    in        char default 'F'
) as

     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_schedule_element_create';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_scheduled_payment_element_id     object.object_id%type;
     v_splittable                       number := pkg_os_constant.gBoolean_False;
     v_element_create_debit             number;
     v_element_create_credit            number;
     v_element_payment_schedule         number;
     v_debit_billing_account_id         object.object_id%type;
     v_credit_billing_account_id        object.object_id%type;
     v_payee_billing_account_id         object.object_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_element_name                     object_bv_value.business_variable_value%type;
     v_master_key                       varchar2(500);
      v_coverage_object_id               object.object_id%type;

begin

-- VAULTDEV-6645
if in_old_payer_tf='F'
          then
               v_coverage_object_id := in_coverage_object_id;
          else
               v_coverage_object_id := pkg_os_object_io.fn_object_bv_get  -- template pbject
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_coverage_object_id,
                                                 --26725501
                                                 pkg_os_constant_bv.gbv_Template  --OSPRODUCT-7313
                                            );
          end if;
     /*v_master_key   :=   in_scheduled_payment_id||'-'||
                         v_coverage_object_id||'-'||
                         in_billing_element_md_row.db_billing_element_id||'-'||
                         in_element_amount;
                         -- Amount is added to the master key to identify the existing Payment Element instead of creating a new
                         -- (when we switch between different payment plans in the same transaction)*/
                         
     v_master_key   :=   in_scheduled_payment_id||'-'||   --OSPRODUCT-5367
                         v_coverage_object_id||'-'||
                         in_billing_element_md_row.db_billing_element_id||'-'||
                         in_element_amount ||'-'||
                         in_policy_transaction_id;                     

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......... Using Master Key:'
               ||v_master_key
          );

     end if;


     if g_scheduled_element_cache.exists(v_master_key)
     then

          --
          --  DO NOT CREATE new Payment Schedule Element
          --

          v_scheduled_payment_element_id     :=      g_scheduled_element_cache(v_master_key);

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......... Found PaymentPlanScheduledPaymentElement object from Cache:'
                    ||v_scheduled_payment_element_id
               );

          end if;


     else

          --
          --  Create PaymentPlanScheduledPaymentElement object under PaymentPlanScheduledPayment object
          --

          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_ScheduledElement,
               in_scheduled_payment_id,
               v_scheduled_payment_element_id
          );

          --
          --   Set the reference ???Associated Asset??? from PaymentPlanScheduledPaymentElement to looping Coverage Object instance
          --

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_scheduled_payment_element_id,
               gbv_ScheduledElementRefAsset,
               v_coverage_object_id
          );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......... Created PaymentPlanScheduledPaymentElement object:'
                    ||v_scheduled_payment_element_id
                    ||' Associated Asset ID:'||v_coverage_object_id
               );

          end if;


     end if; -- if g_schedule_element_cache.exists(v_master_key)

     --
     --   Set the Billing Element Name concatenated by Associated Asset
     --

     if pkg_os_object_search.fn_object_type_equivalent_tf( pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_coverage_object_id), pkg_os_constant.gObjType_Policy )  = 'F'
     then

          v_element_name :=      substr
                                 (
                                      in_billing_element_md_row.billing_element_name||
                                      ' - '||
                                      pkg_os_object.fn_object_name_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_coverage_object_id
                                      )
                                      ,1,100
                                 );

     else

          v_element_name :=   substr( in_billing_element_md_row.billing_element_name, 1, 100 );

     end if;


     --
     --  Set the Schedule Element "Create Debit" flag based on configuration
     --

     if in_billing_element_md_row.create_debit_tf = 'T'
     then

          v_element_create_debit := 1;

     else

          v_element_create_debit := 2;

     end if;


     --
     --  Set the Schedule Element "Create Credit" flag based on configuration
     --

     if in_billing_element_md_row.create_credit_tf = 'T'
     then

          v_element_create_credit := 1;

     else

          v_element_create_credit := 2;

     end if;


     --
     --  Set the Schedule Element "Include in Payment Schedule" flag based on configuration
     --

     if in_billing_element_md_row.payment_schedule_tf = 'T'
     then

          v_element_payment_schedule := 1;

     else

          v_element_payment_schedule := 2;

     end if;


     --
     --  Set the Schedule Element "Splittable" flag based on configuration
     --

     if in_split_billing_flag = pkg_os_constant.gBoolean_True
     then

          if nvl(in_billing_element_md_row.splittable_tf, 'F') = 'T'
          then

               v_splittable := pkg_os_constant.gBoolean_True;

          else

               v_splittable := pkg_os_constant.gBoolean_False;

          end if;


     end if;


     --
     -- For DEBIT Payment Schedule Element
     --

     if in_billing_element_md_row.create_debit_tf = 'T'
     then

          --
          --  Check if Payment Element is Splittable and then identify the Debit Billing Account based on the relevant columns of DB_BILLING_ELEMENT
          --

          if v_splittable = pkg_os_constant.gBoolean_True
          then

               --
               -- Element is  Splittable
               -- Identify the Debit Billing Account based on Split Billing Account Path
               --

               v_debit_billing_account_id    :=   pkg_os_object_io.fn_object_bv_path_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_coverage_object_id,
                                                       in_billing_element_md_row.split_billing_acccount_path
                                                  );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Using Split Billing Path: ' || in_billing_element_md_row.split_billing_acccount_path
                    );

               end if;


          else

               --
               -- Element is not Splittable
               -- Check if there is a Rule or a Path to identify the Debit Billing Account
               --
              /* if in_billing_element_md_row.payer_billing_account_path is not null
               then

                        v_payee_billing_account_id :=   pkg_os_object_io.fn_object_bv_path_get
                                                      (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_coverage_object_id,
                                                            in_billing_element_md_row.payer_billing_account_path
                                                      );
               end if;
                    */ --OSBILLING-7680
               if in_billing_element_md_row.RULE_TO_DEBIT_BILLING_ACCOUNT is not null
               then

                    v_debit_billing_account_id    :=   pkg_os_exp.fn_evaluate_expression
                                                       (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_coverage_object_id,
                                                       in_billing_element_md_row.RULE_TO_DEBIT_BILLING_ACCOUNT
                                                       );

                    if v_session_control.gLogging_Full
                    then
                        pkg_os_logging.sp_log
                        (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '... Using Rule: ' || in_billing_element_md_row.RULE_TO_DEBIT_BILLING_ACCOUNT
                        );

                    end if;


               else

                    --
                    -- Get from Path
                    --

                    v_debit_billing_account_id    :=   pkg_os_object_io.fn_object_bv_path_get
                                                      (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_coverage_object_id,
                                                            in_billing_element_md_row.debit_billing_account_path
                                                      );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Using Path: ' || in_billing_element_md_row.debit_billing_account_path
                         );

                    end if;


               end if; -- Debit Billing Account - Rule or Path


          end if; -- Splittable/Non-Splittable

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Billing Element Name: ' || v_element_name ||
                    ', Debit Billing Account ID: ' || v_debit_billing_account_id
               );

          end if;


--     end if; -- Debit Billing Element

         -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
         If v_debit_billing_account_id is null Then
              pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Unable to fnd Debit Billing Account ID '
                         || ' Billing Element Name: ' || v_element_name
                         || ' System could not find the billing account to create the debit entry for the  Billing Element ID - '
                         || in_billing_element_md_row.db_billing_element_id
                    );
              raise no_data_found;
         End if;
         --OSPRODUCT-335 included above if else block inside below end if;
    end if; -- Debit Billing Element
    
     --
     -- For CREDIT Payment Schedule Element
     --

     if in_billing_element_md_row.create_credit_tf = 'T'
     then
          --
          -- Check if there is a Rule or a Path to identify the Debit Billing Account
          --

          if in_billing_element_md_row.RULE_TO_CREDIT_BILLING_ACCOUNT is not null
          then

               v_credit_billing_account_id    :=   pkg_os_exp.fn_evaluate_expression
                                                 (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_coverage_object_id,
                                                       in_billing_element_md_row.RULE_TO_CREDIT_BILLING_ACCOUNT
                                                 );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Using Rule: ' || in_billing_element_md_row.RULE_TO_CREDIT_BILLING_ACCOUNT
                    );

               end if;


          else

               --
               -- Get from Path
               --

               v_credit_billing_account_id    :=   pkg_os_object_io.fn_object_bv_path_get
                                                 (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_coverage_object_id,
                                                       in_billing_element_md_row.credit_billing_account_path
                                                 );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Using Path: ' || in_billing_element_md_row.credit_billing_account_path
                    );

               end if;


          end if; -- Credit Billing Account - Rule or Path

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Billing Element Name: ' || v_element_name||
                    ', Credit Billing Account ID: ' || v_credit_billing_account_id
               );

          end if;


--     end if; -- Credit Billing Element

         -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
         If v_credit_billing_account_id is null Then
              pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Unable to fnd Credit Billing Account ID '
                         || ' Billing Element Name: ' || v_element_name
                         || ' System could not find the billing account to create the credit entry for the  Billing Element ID - '
                         || in_billing_element_md_row.db_billing_element_id
                    );
               raise no_data_found;
         End if;
    --OSPRODUCT-335 included above if else block inside below end if;
    end if; -- Credit Billing Element


     v_bv_table ( gbv_element_name                ).business_variable_value     :=   v_element_name;
     v_bv_table ( gbv_create_debit_flag           ).business_variable_value     :=   v_element_create_debit;
     v_bv_table ( gbv_debit_category              ).business_variable_value     :=   in_billing_element_md_row.debit_fitem_category;
     v_bv_table ( gbv_debit_sub_category          ).business_variable_value     :=   in_billing_element_md_row.debit_fitem_sub_category;
     v_bv_table ( gbv_create_credit_flag          ).business_variable_value     :=   v_element_create_credit;
     v_bv_table ( gbv_credit_category             ).business_variable_value     :=   in_billing_element_md_row.credit_fitem_category;
     v_bv_table ( gbv_credit_sub_category         ).business_variable_value     :=   in_billing_element_md_row.credit_fitem_sub_category;
     v_bv_table ( gbv_element_amount              ).business_variable_value     :=   in_element_amount;
     v_bv_table ( gbv_billing_element_id          ).business_variable_value     :=   in_billing_element_md_row.db_billing_element_id;
     v_bv_table ( gbv_payment_schedule_flag       ).business_variable_value     :=   v_element_payment_schedule;
     v_bv_table ( gbv_ElementRefDebitBillAcc      ).business_variable_value     :=   v_debit_billing_account_id;--OSBILLING-7680
     v_bv_table ( gbv_ElementRefCreditBillAcc     ).business_variable_value     :=   v_credit_billing_account_id;
     v_bv_table ( gbv_ElementRefCreatorPolTrns    ).business_variable_value     :=   in_policy_transaction_id;
     v_bv_table ( gbv_SplittableFlag              ).business_variable_value     :=   v_splittable;
     --Kiran start OSPRODUCT-28996
     v_bv_table ( PKG_DB_CONSTANT.gbv_ElementBusinessRelation     ).business_variable_value     :=   in_billing_element_md_row.Business_Relation_Id;
     --Kiran end OSPRODUCT-28996     

     --
     --  Set all the BVs for PaymentPlanScheduledPaymentElement object.
     --

     pkg_os_object_io.sp_object_bv_set
     (
         in_session_id,
         in_transaction_id,
         v_scheduled_payment_element_id,
         v_bv_table
     );

end sp_schedule_element_create;



-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_restore_payment_schedule
--
--   %USAGE
--        This procedure will resolve the issue of deletion of the PaymnetSchedule and PaymentElement Objects after
--        rate in endorsement.
--
--   %ALGORITHM
--        1) get the chosen payment plan of the current tranmsaction.
--        2) get the children of tyepe PaymentSchedule of the ChosenPaymentPlan.
--        3) Delete the PaymentSchedule child objects.
--        4) get the basis coverage (PolicyImage) of the last processed transaction.
--        5) get the chosenPaymentPlan of that PolicyImage.
--        6) get the children of type PaymentSchedule of the Chosen Paymentplan
--        7) Duplicate and transmute the PaymentSchedule objects under the ChosenPaymentPlan of the current Transaction.
--
--
--   %PARAM    in_session_id                      Session ID
--   %PARAM    in_transaction_id                  Transaction ID
--   %PARAM    in_action_object_id                Action Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_restore_payment_schedule
(
     in_session_id                       in        object.object_id%type,
     in_transaction_id                   in        object.object_id%type,

     in_action_object_id                 in        object.object_id%type,
     in_payer_entity_id                  in        object.object_id%type default null, -- #MP
     in_override_payplan_id             in        object.object_id%type   default null,
     in_override_last_payplan_id        in        object.object_id%type   default null
)
as

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_restore_payment_schedule';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ref_chosen_pay_plan_id           object.object_id%type;
     v_policytrxpolicy_id               object.object_id%type;
     v_ref_chosen_pay_plan_last_id      object.object_id%type;
     v_pymntsch_new_id                  object.object_id%type;
     v_parent_poltxn_id                 object.object_id%type;

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch1_list                   pkg_os_object.t_object_list;

     v_pymntsch1_index                  number;
     v_pymntsch_index                   number;

     -- #MP
     v_idx                              long;
     v_idx_basis                        long;
     v_ptp_payer_list                   PKG_DB_MULTIPAYER.t_payer_tab;
     v_ptp_basis_payer_list             PKG_DB_MULTIPAYER.t_payer_tab;
     v_policy_image_id                  object.object_id%type            := in_action_object_id; -- this expects to be an PTP object ID

     v_policy_multipayer_mode           boolean := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_policy_image_id
                                                   );
     --20200114_cheryl osproduct-1211
     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;
     v_term_id                          object.object_id%type;--OSPRODUCT-21350
     v_term_withdrawal_date             object.object_id%type;--OSPRODUCT-21350

begin


     -- get the latest functional transaction
     v_parent_poltxn_id := pkg_os_object_search.fn_object_get_parent_of_type
                           (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                pkg_os_constant.gobjType_PolicyTransaction
                           );


     v_policytrxpolicy_id := pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_parent_poltxn_id,
                                  pkg_os_policy_transaction.gbv_PolicyTrxBasisCoverages -- basis coverage
                             );
                             
     --20200114_cheryl osproduct-1211
     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_parent_poltxn_id,
                                        gbv_PolicyTrxTransactionType
                                   );

     v_policy_trx_subtype_id  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_parent_poltxn_id,
                                        gbv_PolicyTrx_SubType
                                   );                             

     v_term_id :=   pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_parent_poltxn_id,
                         gbv_PolicyTrxRefPolicyTerm
                    );--OSPRODUCT-21350

     v_term_withdrawal_date   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_id,
                                        gbv_PolicyTerm_pref_PayDay
                                   ); --OSPRODUCT-21350



     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_policytrxpolicy_id'
               ||v_policytrxpolicy_id
               || '... v_parent_poltxn_id'
               ||v_parent_poltxn_id
               || '... in payer entity: ' --20201014 Cheryl
               || in_payer_entity_id      --20200114 Cheryl
               || '... v policy image1: ' --20201014 Cheryl
               || '... v_term_id: '      --OSPRODUCT-21350
               || v_term_id              --OSPRODUCT-21350
               || '... v_term_withdrawal_date: ' --OSPRODUCT-21350
               || v_term_withdrawal_date  --OSPRODUCT-21350
          );
     end if;


     if v_policytrxpolicy_id is not null
     then

          g_payer_list.delete;     --OSBILLING-5733
          g_policy_payer_tab.delete;      --OSBILLING-5733
          -- #MP
          --
          --  get list of payers from Policy Image level
          --
          PKG_DB_MULTIPAYER.sp_ptp_payers_cache_get
          (
               in_session_id         => in_session_id,
               in_transaction_id     => in_transaction_id,
               io_cached_payer_lists => g_policy_payer_tab,
               in_ptp_object_id      => v_policy_image_id,
               io_payer_list         => v_ptp_payer_list,
               in_print_list         => 'N',
               in_index_by           => pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr  -- indexed by payer entity ID. This is important as far as we pass entity payer ID to this routine to identify the payer in question
          );

          -- Check if only one payer should be processed, if so, shrink the list to have only current payer
          --
          if in_payer_entity_id is not null
          then
               -- shrink payer list and leave only one current payer
               --
               pkg_db_multipayer.sp_payer_list_shrink
               (
                    in_session_id,
                    in_transaction_id,
                    in_related_id      => in_payer_entity_id,
                    io_payer_list      => v_ptp_payer_list
               );
          else
               null; -- process all payers.
          end if;


          v_idx := v_ptp_payer_list.first;  --#MP
               if v_session_control.gLogging_Full  --20200114 Cheryl
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_idx is :'
                         ||v_idx
                    );
               end if;          
          
          while v_idx is not null           --#MP
          loop
               --
               -- get the chosen payment plan of the current Transaction
               --

               v_ref_chosen_pay_plan_id := v_ptp_payer_list(v_idx).chosen_payment_plan; -- #MP
                                      --pkg_os_object_io.fn_object_bv_get
                                      --(
                                      --     in_session_id,
                                      --     in_transaction_id,
                                      --     in_action_object_id,
                                      --     gbv_PolicyRefChosenPlan -- chosen payment plan
                                      --);

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Choosen Payment Plan Id is :'
                         ||v_ref_chosen_pay_plan_id
                         || 'override payplan id is: '  --20200114 Cheryl
                         || in_override_payplan_id      --20200114 Cheryl
                    );
               end if;


               --
               -- get the children of type PaymentSchedule of Chosen Payment Plan.
               --
               v_pymntsch_list.delete;

               if in_override_payplan_id is not null
               then       -- DDWIDEV - 768

                    v_ref_chosen_pay_plan_id := in_override_payplan_id;

               end if;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Choosen Payment Plan Id is :'
                         ||v_ref_chosen_pay_plan_id
                    );
               end if;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_ref_chosen_pay_plan_id,
                    gObjType_ScheduledPayment,
                    v_pymntsch_list
               );

               v_pymntsch_index := v_pymntsch_list.first;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_pymntsch_list.count'
                         ||v_pymntsch_list.count
                    );
               end if;


               while v_pymntsch_index is not null loop

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Inside first while'
                         );
                    end if;


                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ref_chosen_pay_plan_id,
                         v_pymntsch_list( v_pymntsch_index ),
                         gObjType_ScheduledPayment,
                         null,
                         false
                    );

                    v_pymntsch_index := v_pymntsch_list.next( v_pymntsch_index );

               end loop;

               --
               -- get the chosen payment plan of the current Transaction
               -- Merged the code from DDWI to BASE
               if in_override_payplan_id is not null then       -- DDWIDEV - 222
                    v_ref_chosen_pay_plan_id := in_override_payplan_id;

               end if;


               -- #MP
               --
               --  get list of payers from Policy Image level of previous functional Policy Transaction
               --
               PKG_DB_MULTIPAYER.sp_ptp_payers_cache_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    io_cached_payer_lists => g_policy_payer_tab,
                    in_ptp_object_id      => v_policytrxpolicy_id,  -- PTP of previous functional Policy Transaction
                    io_payer_list         => v_ptp_basis_payer_list,
                    in_print_list         => 'Y',
                    in_index_by           => PKG_DB_MULTIPAYER.g_PayerGet_idx_BilingAccount   -- indexed by Billing Account
               );
               
               if v_session_control.gLogging_Full  --20200114 cheryl
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_ptp_basis_payer_list.count'
                         ||v_ptp_basis_payer_list.count
                         || '...v_idx: '
                         || v_idx
                         || '..payer billing account: '
                         || v_ptp_payer_list(v_idx).PayerBillingAccount_id
                         || '..payer chosen payment plan: '
                         || v_ptp_payer_list(v_idx).chosen_payment_plan                         
                         || '...transaction type: ' 
                         || v_policy_trx_type_id
                         || '...transaction sub type: '
                         || v_policy_trx_subtype_id
                         || ', #1 idx in the v_ptp_basis_payer_list' || v_ptp_basis_payer_list.first
                         || ', BA id ' || v_ptp_basis_payer_list(v_ptp_basis_payer_list.first).PayerBillingAccount_id 
                         || ', chosen Plan ' || v_ptp_basis_payer_list(v_ptp_basis_payer_list.first).chosen_payment_plan
                         || ' choosing plan bv get ' || pkg_os_object_io.fn_object_bv_get
                                                  (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_policytrxpolicy_id,
                                                     gbv_PolicyRefChosenPlan -- chosen payment plan
                                                  )
                   );
               end if;               

               if v_ptp_basis_payer_list.exists(v_ptp_payer_list(v_idx).PayerBillingAccount_id)
               then
                    -- get the reference chosen payment plan for PTP

                    v_ref_chosen_pay_plan_last_id := v_ptp_basis_payer_list(v_ptp_payer_list(v_idx).PayerBillingAccount_id).chosen_payment_plan; -- #MP
                                                --pkg_os_object_io.fn_object_bv_get
                                                --(
                                                --     in_session_id,
                                                --     in_transaction_id,
                                                --     v_policytrxpolicy_id,
                                                --     gbv_PolicyRefChosenPlan -- chosen payment plan
                                                --);
                                               
               elsif ( v_policy_trx_type_id = gTrxType_Endorse and v_policy_trx_subtype_id = gTrxSubType_BillMethodChange
                       and not v_policy_multipayer_mode )  --20200114 Cheryl osproduct-1211 new if condition added
                  then
                     v_ref_chosen_pay_plan_last_id := v_ptp_basis_payer_list(v_ptp_basis_payer_list.first).chosen_payment_plan;
                    
               else           
                    v_ref_chosen_pay_plan_last_id := NULL;

                    --OSBILLING-7175
                    pkg_os_logging.sp_log(in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... not able to find payer with Billing account '|| v_ptp_payer_list(v_idx).PayerBillingAccount_id ||
                         ' in under the PTP of previous functional Policy Transaction ' || v_policytrxpolicy_id
                    );

               end if;

               -- get the reference chosen payment plan for PTP
               -- Merged the code from DDWI to BASE
               if in_override_last_payplan_id is not null then  -- DDWI-ddd

                    v_ref_chosen_pay_plan_last_id := in_override_last_payplan_id;

               end if;

               -- /#MP

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_ref_chosen_pay_plan_last_id'
                         ||v_ref_chosen_pay_plan_last_id
                    );
               end if;


               -- get the children of type Payment Schedule of the chosen payment plan
               -- duplicate the PaymentSchedule Object then
               -- For each payment schedule get the children of type schedule element
               -- Duplicate each element object

               --OSBILLING-7175
               if v_ref_chosen_pay_plan_last_id is not null
                    then

               v_pymntsch1_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_ref_chosen_pay_plan_last_id,
                    gObjType_ScheduledPayment,
                    v_pymntsch1_list
               );

               v_pymntsch1_index := v_pymntsch1_list.first;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... v_pymntsch1_list.count'
                         ||v_pymntsch1_list.count
                    );
               end if;


               while v_pymntsch1_index is not null loop

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '....... Inside second while loop '
                         );
                    end if;


                    pkg_os_object_copy.sp_object_duplicate
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pymntsch1_list( v_pymntsch1_index ),
                         v_pymntsch_new_id,
                         'F'
                    );


                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... v_pymntsch_new_id '
                              ||v_pymntsch_new_id
                              ||'v_pymntsch1_index..'
                              ||v_pymntsch1_index
                         );
                    end if;


                    pkg_os_object.sp_object_transmute
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pymntsch_new_id,
                         v_ref_chosen_pay_plan_id,
                         gObjType_ScheduledPayment
                    );

                         --update bv  v_pymntsch_new_id - 32178546 withdrawal date with term 32178946
                         --

                         if v_term_withdrawal_date is not null
                         then
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_pymntsch_new_id,
                                   gbv_billing_withdr_date,
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_pymntsch_new_id,
                                             gbv_ScheduledRefInstallment
                                        ),
                                        pkg_db_billing_modify.gbv_install_withdrawal_date
                                   )
                              );

                         end if; --OSPRODUCT-21350

                         v_pymntsch1_index := v_pymntsch1_list.next( v_pymntsch1_index );

               end loop;


                end if;   --OSBILLING-7175
               v_idx := v_ptp_payer_list.next(v_idx); --#MP
          end loop; -- /loop PTP payers               --#MP

     end if;

end sp_restore_payment_schedule;

/*
 procedure sp_restore_payment_schedule
(
     in_session_id                       in        object.object_id%type,
     in_transaction_id                   in        object.object_id%type,
     in_action_object_id                 in        object.object_id%type
)

as

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_create_pymntsch_end';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ref_chosen_pay_plan_id           object.object_id%type;
     v_policytrxpolicy_id               object.object_id%type;
     v_ref_chosen_pay_plan_last_id      object.object_id%type;
     v_pymntsch_new_id                  object.object_id%type;
     v_parent_poltxn_id                 object.object_id%type;

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch1_list                   pkg_os_object.t_object_list;

     v_pymntsch1_index                  number;
     v_pymntsch_index                   number;

begin

     --
     -- get the chosen payment plan of the current Transaction
     --

     v_ref_chosen_pay_plan_id := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_action_object_id,
                                      gbv_PolicyRefChosenPlan -- chosen payment plan
                                 );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Choosen Payment Plan Id is :'
               ||v_ref_chosen_pay_plan_id
          );
     end if;

     --
     -- get the children of type PaymentSchedule of Chosen Payment Plan.
     --

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_ref_chosen_pay_plan_id,
          gObjType_ScheduledPayment,
          v_pymntsch_list
     );


     v_pymntsch_index := v_pymntsch_list.first;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_pymntsch_list.count'
               ||v_pymntsch_list.count
          );
     end if;

     while v_pymntsch_index is not null loop

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Inside first while'
               );
          end if;

          pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               v_ref_chosen_pay_plan_id,
               v_pymntsch_list( v_pymntsch_index ),
               gObjType_ScheduledPayment,
               null,
               false
          );

          v_pymntsch_index := v_pymntsch_list.next( v_pymntsch_index );

     end loop;


     -- get the chosen payment plan for the latest functional transaction

     v_parent_poltxn_id := pkg_os_object_search.fn_object_get_parent_of_type
                           (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                pkg_os_constant.gobjType_PolicyTransaction
                           );


     v_policytrxpolicy_id := pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_parent_poltxn_id,
                                  pkg_os_policy_transaction.gbv_PolicyTrxBasisCoverages -- basis coverage
                             );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_policytrxpolicy_id'
               ||v_policytrxpolicy_id
               || '... v_parent_poltxn_id'
               ||v_parent_poltxn_id
          );
     end if;

     -- get the reference chosen payment plan for PTP
     if in_override_last_payplan_id is null then  -- DDWI-ddd

          v_ref_chosen_pay_plan_last_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policytrxpolicy_id,
                                                gbv_PolicyRefChosenPlan -- chosen payment plan
                                           );
     else
          v_ref_chosen_pay_plan_last_id := in_override_last_payplan_id;

     end if;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_ref_chosen_pay_plan_last_id'
               ||v_ref_chosen_pay_plan_last_id
          );
     end if;

     -- get the children of type Payment Schedule of the chosen payment plan
     -- duplicate the PaymentSchedule Object then
     -- For each payment schedule get the children of type schedule element
     -- Duplicate each element object

     v_pymntsch1_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_ref_chosen_pay_plan_last_id,
          gObjType_ScheduledPayment,
          v_pymntsch1_list
     );

     v_pymntsch1_index := v_pymntsch1_list.first;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_pymntsch1_list.count'
               ||v_pymntsch1_list.count
          );
     end if;

     while v_pymntsch1_index is not null loop

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '....... Inside second while loop '
               );
          end if;

          pkg_os_object_copy.sp_object_duplicate
          (
               in_session_id,
               in_transaction_id,
               v_pymntsch1_list( v_pymntsch1_index ),
               v_pymntsch_new_id,
               'F'

          );


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_pymntsch_new_id '
                    ||v_pymntsch_new_id
                    ||'v_pymntsch1_index..'
                    ||v_pymntsch1_index
               );
          end if;

          pkg_os_object.sp_object_transmute
          (
               in_session_id,
               in_transaction_id,
               v_pymntsch_new_id,
               v_ref_chosen_pay_plan_id,
               gObjType_ScheduledPayment
          );

          v_pymntsch1_index := v_pymntsch1_list.next( v_pymntsch1_index );

     end loop;

end sp_restore_payment_schedule;

*/

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_billing_element_row
--
--   %USAGE
--        Given billing element id, this function returns the row from db_billing_element for that billing element id
--
--   %ALGORITHM
--        1. If input Billing Element MD ID is null, then
--            return null
--        2. Else
--            Fetch the row from DB Billing Element table and populate Billing Element Cache for the given Billing Element MD ID
--        3. Return Billing Element cached row
--
--
--   %PARAM    in_session_id                      Session ID
--   %PARAM    in_transaction_id                  Transaction ID
--   %PARAM    in_billing_element_id              Billing Element ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function  fn_billing_element_row
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_billing_element_id              in        db_billing_element.db_billing_element_id%type
)
return    db_billing_element%rowtype
is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'fn_billing_element_row';

begin

     if in_billing_element_id is null
     then

          return    null;

     else

          select
               *
          into
               billing_element_tab(in_billing_element_id)
          from
               db_billing_element
          where
               db_billing_element_id = in_billing_element_id
          and  active_tf = 'T'
          order by apply_order
          ;


     end if;


     return    billing_element_tab(in_billing_element_id);

exception

     when no_data_found
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...No data found in DB_BILLING_ELEMENT metadata table for billing element id :'
               ||in_billing_element_id
               ||'  Error Msg: '
               ||sqlerrm
          );

          raise no_data_found;

end fn_billing_element_row;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_calendar_days_add
--
--   %USAGE
--        Given a date, an offset period and offset units, add the corresponding number of calendar days.
--
--   %ALGORITHM
--          Embedded in procedure documentation below.
--          @@@VG Need to implement working days.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------


function fn_calendar_days_add
(
     in_session_id          in     object.object_id%type,
     in_transaction_id      in      object.object_id%type,
     in_date                in     date,
     in_period              in     integer,
     in_units               in     time_unit.time_unit_id%type

)     return date
is
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'fn_calendar_days_add';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);


begin
     if in_units = gTimeUnit_Calendar_Day or NVL(in_units,0) = 0
     then

          --
          --     For backward compatibility we come here if UNITs is NULL.
          --


          return in_date + NVL(in_period,0);

     elsif in_units = gTimeUnit_Calendar_Week
     then

          return in_date + (NVL(in_period,0) * 7);

     elsif in_units = gTimeUnit_Calendar_Month
     then

          return add_months( in_date, NVL(in_period,0) );

     elsif in_units = gTimeUnit_Calendar_Quarter
     then

          return add_months( in_date, NVL(in_period,0)*3 );

     elsif in_units = gTimeUnit_Calendar_Year
     then

          return add_months( in_date, NVL(in_period,0)*12 );

     else
          pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unsupported time unit type:'||in_units );

          raise no_data_found;

     end if;


end fn_calendar_days_add;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_modify_due_dates
--
--   %USAGE
--        This procedure does the special handling for 30/31 Month End, February month and Leap Year for
--        Actual Due Date, Actual End Date, Billing Due Date and Withdrawal Date
--
--   %ALGORITHM
--          Not specified.
--
--   %PARAM      in_session_id                          Session Id
--   %PARAM      in_transaction_id                      Transaction Id
--   %PARAM      in_policy_trx_effective_date           Policy Transaction effective Date
--   %PARAM      in_actual_due_date                     Default Calculated Actual Due Date
--   %PARAM      out_actual_due_date_list               Actual Due date list
--   %PARAM      out_actual_end_date_list               Actual End Date list
--   %PARAM      out_billing_due_date_list              Billing Due Date list
--   %PARAM      out_withdrawal_date_list               Withdrawal Date list
-----------------------------------------------------------------------------------------------------------------------------------------------------


procedure sp_modify_due_dates
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_trx_effective_date       in        date,
     in_installment_number              in        number,
     in_actual_due_date                 in      date,
     io_actual_due_date_list            in out    t_due_date_list,
     io_actual_end_date_list            in out    t_due_date_list,
     io_billing_due_date_list           in out    t_due_date_list,
     io_withdrawal_date_list            in out    t_due_date_list
)
is
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_modify_due_dates';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_billing_issue_date               date;
     v_billing_due_date                 date;
     v_actual_due_date                  date;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Before special handling for Installment Number: '||in_installment_number
               ||' Actual Due Date: '||io_actual_due_date_list(in_installment_number)
          );

     end if;


     -------------------------------------------------------------------------------------------
     --
     --  Special handling for months with 30 days when Day of the Policy Effective Date is 30th
     --
     -------------------------------------------------------------------------------------------

     if   to_char(in_policy_trx_effective_date,'DD') = '30'
          and
          to_char(in_actual_due_date,'MM') in ('01', '03', '05', '07', '08', '10', '12')
     then

          v_actual_due_date                                     :=  to_date('30'||to_char(in_actual_due_date,'MMYYYY'),'DDMMYYYY');
          io_actual_due_date_list(in_installment_number)        :=  v_actual_due_date;
          io_actual_end_date_list(in_installment_number - 1)    :=  v_actual_due_date - 1;


          -- OSBILLING-4307

          if in_actual_due_date =  io_billing_due_date_list(in_installment_number) then
             io_billing_due_date_list(in_installment_number) := v_actual_due_date;
          end if;


         if in_actual_due_date =  io_withdrawal_date_list(in_installment_number) then
             io_withdrawal_date_list(in_installment_number) := v_actual_due_date;
          end if;


          --OSBILLING-4307

     end if;


     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... After special handling for Installment Number: '||in_installment_number
               ||' Actual Due Date: '||io_actual_due_date_list(in_installment_number)
          );

     end if;


exception

     when no_data_found
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Error while calling the special handling of Due Dates for Installment Number :'
               ||in_installment_number
               ||'  Error Msg: '
               ||sqlerrm
          );

          raise no_data_found;

end sp_modify_due_dates;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_calculate_due_dates
--
--   %USAGE
--        This procedure calculates the Actual Due Date and Billing Due Date for the Installments
--
--   %ALGORITHM
--          Not specified.
--
--   %PARAM      in_session_id                          Session Id
--   %PARAM      in_transaction_id                      Transaction Id
--   %PARAM      in_payment_plan_md_row                 Payment Plan MD Row id
--   %PARAM      in_installment_count                   Installment count
--   %PARAM      in_policy_trx_effective_date           Policy Transaction effective Date
--   %PARAM      in_policy_image_exp_date               Policy Image Expiration Date
--   %PARAM      out_actual_due_date_list               Actual Due date list
--   %PARAM      out_actual_end_date_list               Actual End Date list
--   %PARAM      out_billing_due_date_list              Billing Due Date list
-----------------------------------------------------------------------------------------------------------------------------------------------------


procedure sp_calculate_due_dates
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_policy_transaction_id           in        object.object_id%type,
     in_payment_plan_md_row             in        getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_installment_count               in        number,
     in_policy_trx_effective_date       in        date,
     in_policy_trx_process_date         in        date,
     in_policy_image_exp_date           in        date,
     in_next_installment_date           in        date,
     out_actual_due_date_list           out       t_due_date_list,
     out_actual_end_date_list           out       t_due_date_list,
     out_billing_due_date_list          out       t_due_date_list,
     out_withdrawal_date_list           out       t_due_date_list,
     in_start_installment_no            in        number default 1,
     in_transaction_type_id             in        pd_transaction_type.pd_transaction_type_id%type default null, -- DDWIDEV-595
     in_existing_customer_flag          in        char default 'F' -- DDWIDEV-1653
)
is

     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_calculate_due_dates';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_use_anniversary_date_tf          pd_property.pd_property_value%type;

     gbv_PTP_Preferred_Pay_Day          business_variable.business_variable_id%type := 32178446;

     v_preferred_payment_day            integer;
     v_policy_billing_method            integer := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, gbv_PolicyBillingMethod ); --OSBILLING-6617 20190325 Cheryl
     gPolicy_AgencyBilled               constant lookup_list_value.lookup_enum%type            :=   2;  --OSBILLING-6617 20190325 Cheryl
     v_product_id                       object.object_id%type;--OSBILLING-6617 20190326 Cheryl
     v_filing_id                        object.object_id%type; --OSBILLING-6617 20190326 Cheryl

     --
     --  Since we are using add_months, the basis date matters in that the basis date determines how long the interval is. That is why
     --  we are keeping two variables for this purpose.
     --

     v_eff_installment_interval         integer;
     v_process_installment_interval     integer;
     v_billing_installment_interval     integer;

     v_billing_issue_date               date;
     v_billing_due_date                 date;
     v_actual_due_date                  date;
     v_prior_billing_due_date           date;
     v_first_billing_due_date           date;

     v_down_payment_offset_period       number;
     v_other_payment_offset_period      number;
     v_stub_payment_offset_period       number;

     v_down_payment_offset_units        number;
     v_other_payment_offset_units       number;
     v_stub_payment_offset_units        number;
     v_non_linear_interval_units        number;

     v_last_installment                 number;
     v_actual_due_date_local            date;
          -- DDWIDEV-216
     v_defualt_pay_preferred_days       integer:=  pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id , g_pp_Pref_Withdrawal_days );
    v_pref_prior_day                    varchar2(10);--OSBILLING-6109
begin

     -- DDWIDEV-216
     v_preferred_payment_day := nvl(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Preferred_Pay_Day ),v_defualt_pay_preferred_days);

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Calculating the Billing Due Dates and Actual Due Dates for '
               ||in_payment_plan_md_row.payment_plan_name
               ||' ('||in_payment_plan_md_row.payment_plan_id||')'
               ||', Number of installments: '||in_installment_count
               ||', Preferred Payment Day: '||v_preferred_payment_day
               ||', Policy Trx Effective Date' || in_policy_trx_effective_date
               ||', in_start_installment_no'||in_start_installment_no
          );
     end if;

     v_preferred_payment_day     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Preferred_Pay_Day );

     --OSBILLING-6617 20190326 cheryl

     v_product_id             :=   pkg_os_product.fn_object_product_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id
                                   );

     v_filing_id              :=   pkg_os_product.fn_policy_filing_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        v_product_id
                                   );

     --
     --   a.   Get the first due offset days from Payment Plan table.
     --

     v_down_payment_offset_period  :=   nvl(in_payment_plan_md_row.down_payment_offset_days,   0);
     v_other_payment_offset_period :=   nvl(in_payment_plan_md_row.other_payment_offset_days,  0);
     v_stub_payment_offset_period  :=   nvl(in_payment_plan_md_row.stub_payment_offset_time,   0);

     v_down_payment_offset_units   :=   nvl( in_payment_plan_md_row.down_payment_offset_units, gTimeUnit_Calendar_Day  );
     v_other_payment_offset_units  :=   nvl( in_payment_plan_md_row.inst_payment_offset_units, gTimeUnit_Calendar_Day  );
     v_stub_payment_offset_units   :=   nvl( in_payment_plan_md_row.stub_payment_offset_units, gTimeUnit_Calendar_Day  );
     v_non_linear_interval_units   :=   nvl( in_payment_plan_md_row.nonlinear_interval_fla_units, gTimeUnit_Calendar_Day  );


     if in_payment_plan_md_row.nonlinear_interval_fla is not null
     then
          -- @@@VG Need to have a column which clearly defines a plan as linear or non-linear.

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... This is a Non-Linear Payment Plan'
               );
          end if;


     else

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... This is a Linear Payment Plan'
               );
          end if;


     end if;


     --OSBILLING-6617 20190325 Cheryl - if agency billed do not add the offset days
     if (v_policy_billing_method = gPolicy_AgencyBilled
      and nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id,gBilling_offsetagency),'Y') = 'N')
     then
       v_down_payment_offset_period := 0;
     end if;
     --
     --     Behavior ...
     --     Calculate the Schedule Interval, Billing Issue Date and Billing Due Date
     --

     --
     --   This flag is used when we want billing due dates to fall on the same DAY of the month as the first payment.
     --

     v_use_anniversary_date_tf :=  nvl( in_payment_plan_md_row.instal_anniversary_date_tf, 'F' );

     for v_installment_number in in_start_installment_no .. in_installment_count loop

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id, v_procedure_name, '...... Installment Number: '||v_installment_number
               );

          end if;


          -------------------------------------------------------------------------------
          --
          --  NON-LINEAR PAYMENT PLANS
          --
          -------------------------------------------------------------------------------

          if in_payment_plan_md_row.nonlinear_interval_fla is not null
          then
               begin
                    --
                    --   Calculate the ???Actual Due Date??? and Billing Due date for the first installment.
                    --

                    if v_installment_number = in_start_installment_no
                    then
                         begin
                              --
                              --   Calculate the ???Actual Due Date??? on the basis of effective date of the policy.
                              --

                              v_actual_due_date  :=   in_policy_trx_effective_date;

                              if in_installment_count = 1 and in_next_installment_date is not null
                              then

                                   --
                                   --     If the caller is overriding us, and forcing a billing due date down our throats, and if this is a single pay plan ... note this typically happens when the carrier
                                   --     removes the privilege of paying by installments to a wicked customer.
                                   --


                                   v_billing_due_date := in_next_installment_date;


                              elsif in_policy_trx_effective_date > fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units )
                              then

                                   --
                                   --   If the effective date is in the future (more than the process date, assumed to be today) then we can make it the due-date because we are giving
                                   --   the customer greater than or equal to the legally mandated time to pay.
                                   --
                                   --   In P&C we don't want to make the money due until the day the policy starts ... because otherwise we will have administrative costs in refunding
                                   --   the money. This is typically NOT the case for Life, where payment is often due  before the policy is even accepted ...
                                   --

                                   v_billing_due_date  :=   in_policy_trx_effective_date;

                              else
                                   --
                                   --   The effective date is too close, or past ... so we need to give the customer some time to pay ... so we simply add the mandated offset to the process
                                   --   date, which is assumed to be today ...
                                   --

                                   v_billing_due_date  :=   fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units );

                              end if;

                                -- OSBILLING-5555 - Start
                               -- Calling the custom package to update billing due date
                                v_billing_due_date :=    nvl(pkg_cs_db_payplan.fn_override_billing_due_date
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_policy_image_id,
                                      in_policy_trx_process_date
                                 ),v_billing_due_date);
                                -- OSBILLING-5555 - End


                                        --OSPRODUCT-908
                                          pkg_cs_db_payplan.sp_generate_actual_due_date
                                (
                                  in_session_id   ,
                                  in_transaction_id  ,
                                  in_payment_plan_md_row ,
                                  in_policy_image_id ,
                                  in_policy_trx_process_date ,
                                  in_policy_trx_effective_date ,
                                  v_billing_due_date ,
                                  v_installment_number

                                );

                                        --End of --OSPRODUCT-908
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '........ Installment #1 NON-LINEAR PAYMENT PLANS debugging. ' ||
                                      '  in_next_installment_date=' || in_next_installment_date ||
                                      ', v_actual_due_date='       || v_actual_due_date ||
                                      ', v_down_payment_offset_period=' || v_down_payment_offset_period ||
                                      ', v_other_payment_offset_period=' || v_other_payment_offset_period ||
                                      ', v_stub_payment_offset_period=' || v_stub_payment_offset_period ||
                                      ', v_billing_due_date=' || v_billing_due_date ||
                                      ', fn_calendar_days_add( in_policy_trx_process_date, v_down_payment_offset_period )=' || fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units )
                                   );
                              end if;

                              out_billing_due_date_list(v_installment_number)   := v_billing_due_date;
                              out_actual_due_date_list(v_installment_number)    := v_actual_due_date;
                              
                              --OSPRODUCT-3295 start
/*                              out_withdrawal_date_list( v_installment_number ) := fn_get_next_withdrawal_date
                                                                                  (
                                                                                     in_session_id,
                                                                                     in_transaction_id,
                                                                                     out_billing_due_date_list(v_installment_number),
                                                                                     v_preferred_payment_day,
                                                                                     in_policy_image_id  --OSBILING-7265
                                                                                  );

                              if out_withdrawal_date_list( v_installment_number ) is null then

                                   --
                                   --   @@@ This should throw an exception ...
                                   --

                                   out_withdrawal_date_list( v_installment_number ) := out_billing_due_date_list(v_installment_number);

                              end if;*/
                              
                              out_withdrawal_date_list( v_installment_number ) := out_billing_due_date_list(v_installment_number);
                              --OSPRODUCT-3295 end



                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......'
                                        ||' Actual Due Date: '
                                        ||out_actual_due_date_list(v_installment_number)
                                        ||' Billing Due Date: '
                                        ||out_billing_due_date_list(v_installment_number)
                                        ||' Withdrawal Date: '
                                        ||out_withdrawal_date_list( v_installment_number )

                                   );

                              end if;


                              --
                              --  When Policy is Late booked by multiple months, then there is a need to compare
                              --  the Actual Due Date of nth Installment with the First Installment's Billing Due Date.
                              --  So, storing the most recently calculated date to be used for comparison while calculating the nth installment's due date.
                              --

                              v_prior_billing_due_date   := v_billing_due_date;
                              v_first_billing_due_date   := v_billing_due_date;

                         end;
                    else
                         begin
                              v_eff_installment_interval := fn_schedule_interval_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_payment_plan_md_row,
                                   out_actual_due_date_list(v_installment_number-1),
                                   v_installment_number,
                                   null,
                                   in_start_installment_no
                              );


                              --
                              --     For other installments, Actual Due Date = Last Installment Actual due Date + Interval
                              --

                              v_actual_due_date   :=   fn_calendar_days_add( in_session_id, in_transaction_id, out_actual_due_date_list (v_installment_number - 1 ), v_eff_installment_interval, v_non_linear_interval_units );

                                       -------OSPRODUCT-908-----

                                pkg_cs_db_payplan.sp_generate_actual_due_date
                                (
                                  in_session_id   ,
                                  in_transaction_id  ,
                                  in_payment_plan_md_row ,
                                  in_policy_image_id ,
                                  in_policy_trx_process_date ,
                                  in_policy_trx_effective_date ,
                                  v_actual_due_date ,
                                  v_installment_number

                                );

                                -----End of --OSPRODUCT-908-----

                              out_actual_due_date_list(v_installment_number)         :=     v_actual_due_date;

                              --
                              --   Put and end-date for the prior installment ...
                              --
                              out_actual_end_date_list(v_installment_number - 1)     :=     v_actual_due_date - 1;



                              --
                              --  Comparing the Actual Due Date with the First Installment's Billing Due Date,
                              --  in case a policy is late booked by multiple months and more than 1 installments are in past.
                              --
                              if v_actual_due_date > fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units ) -- GCNA Specific
                              then

                                   --
                                   --     If the theoretical payment date is comfortably in the future ...
                                   --

                                   if v_use_anniversary_date_tf = 'T'
                                   then


                                        --
                                        --     Anniversary of the original billing due date, so that the insured gets a nice smooth ride ...
                                        --


                                        v_billing_installment_interval   :=        fn_schedule_interval_get( in_session_id, in_transaction_id,
                                                                                    in_payment_plan_md_row,
                                                                          v_prior_billing_due_date,--v_first_billing_due_date OSBILLING-6109
                                                                          v_installment_number, -- OSBILLING-4818
                                                                                    null,
                                                                          v_installment_number-1-- in_start_installment_no OSBILLING-6109
                                                                        );

                                       --2017-08-10 Cheryl changed to use the interval units like for Semi needs months
           --                             v_billing_due_date  :=   v_first_billing_due_date + v_billing_installment_interval;
                                         v_billing_due_date  :=   v_first_billing_due_date + v_billing_installment_interval;
                              v_billing_due_date  :=  fn_calendar_days_add( in_session_id, in_transaction_id, v_prior_billing_due_date, v_billing_installment_interval, v_other_payment_offset_units );--OSBILLING-6109


                                        if v_session_control.gLogging_Full
                                        then
                                             pkg_os_logging.sp_log
                                              (
                                                in_session_id,
                                                in_transaction_id,
                                                v_procedure_name,
                                      '..................... v_prior_billing_due_date: '||v_prior_billing_due_date
                                                 || 'v_installment_number' || v_installment_number
                                                 || ' installment interval: ' || v_billing_installment_interval
                                       || ' billing due date: ' || v_billing_due_date||'v_actual_due_date'||v_actual_due_date
                                    );
                              end if;
                                 --OSBILLING-6109
                              v_pref_prior_day :=  to_char(v_first_billing_due_date,'DD');
                              -- Verify if this billing due date is greater than actual due date; if no, then use actual due date
                              -- in place of prior billing due date
                                   v_billing_due_date := greatest(v_actual_due_date,v_billing_due_date);
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                         (
                                           in_session_id,
                                           in_transaction_id,
                                           v_procedure_name,
                                           '.....................v_billing_due_date' || v_billing_due_date
                                            ||'v_actual_due_date'||v_actual_due_date
                                         );
                                   end if;
                                   --Replace the day in order to maintain the anniversary trend
                                   if      (v_pref_prior_day in ('29','30','31'))
                                        and
                                        (to_char(v_billing_due_date, 'MM') in ('02'))
                                   then
                                        if to_char(last_day(v_billing_due_date),'DD')= '29'
                                        then
                                             v_billing_due_date := to_date(lpad('29', 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                        else
                                             v_billing_due_date := to_date(lpad('28', 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                        end if;
                                   elsif (v_pref_prior_day in ('31'))
     and (to_char(v_billing_due_date, 'MM') in ('04','06','09','11'))then
                                        v_billing_due_date := to_date(lpad(to_char(last_day(v_billing_due_date),'DD'), 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                   else
                                        v_billing_due_date := to_date(lpad(v_pref_prior_day, 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                   end if;
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '..................... v_pref_prior_day: '||v_pref_prior_day
                                       || 'v_billing_due_date' || v_billing_due_date
                                       || ' installment interval: ' || v_billing_installment_interval
                                       ||'v_actual_due_date'||v_actual_due_date
                                              );
                                        end if;
                              --/OSBILLING-6109
                                   else
                                        --
                                        --     Whatever theory is.
                                        --


                                        v_billing_due_date  :=  fn_calendar_days_add( in_session_id, in_transaction_id, v_actual_due_date, v_other_payment_offset_period, v_other_payment_offset_units );


                                   end if;


                                   v_prior_billing_due_date := v_billing_due_date;


                              else
                                   --
                                   --     If the theoretical payment date is in the past ... everything is simply due as of the date of the first installment.
                                   --


                                   v_billing_due_date := v_prior_billing_due_date;


                              end if;



                              out_billing_due_date_list(v_installment_number)             :=   v_billing_due_date;

/*                              out_withdrawal_date_list( v_installment_number ) :=    fn_get_next_withdrawal_date
                                                                                     (
                                                                                          in_session_id,
                                                                                          in_transaction_id,
                                                                                          out_billing_due_date_list(v_installment_number),
                                                                                          v_preferred_payment_day,
                                                                                          in_policy_image_id  --OSBILING-7265
                                                                                     );*/

                                --OSPRODUCT-3295 start
                                out_withdrawal_date_list( v_installment_number ) := v_billing_due_date;
            
                                If nvl(v_preferred_payment_day,0) = 0 then
                                     out_withdrawal_date_list( v_installment_number ) := fn_get_next_withdrawal_date
                                                                                            (
                                                                                                 in_session_id,
                                                                                                 in_transaction_id,
                                                                                                 out_billing_due_date_list(v_installment_number),
                                                                                                 v_preferred_payment_day,
                                                                                                 in_policy_image_id  --OSBILING-7265
                                                                                            );
                                else
                                     If out_withdrawal_date_list( v_installment_number ) > out_withdrawal_date_list( 1 ) then  --OSPRODUCT-3295
                                          out_withdrawal_date_list( v_installment_number ) := fn_get_next_withdrawal_date
                                                                                                 (
                                                                                                      in_session_id,
                                                                                                      in_transaction_id,
                                                                                                      out_billing_due_date_list(v_installment_number),
                                                                                                      v_preferred_payment_day,
                                                                                                      in_policy_image_id  --OSBILING-7265
                                                                                                 );
                                     end if;     
                                end if;
                                --OSPRODUCT-3295 end

                              if out_withdrawal_date_list( v_installment_number ) is null then

                                   out_withdrawal_date_list( v_installment_number ) := out_billing_due_date_list(v_installment_number);

                              end if;



          -- OSBILLING-4307
                              ---------------------------------------------------
                              --  Call the Special handling for Actual Due Date
                              ---------------------------------------------------

                              sp_modify_due_dates
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_trx_effective_date,
                                   v_installment_number,
                                   v_actual_due_date,
                                   out_actual_due_date_list,
                                   out_actual_end_date_list,
                                   out_billing_due_date_list,
                                   out_withdrawal_date_list
                              );

          -- OSBILLING-4307



                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Non Linear Plan - Installment Number : '
                                        ||v_installment_number
                                        ||' Actual Due Date: '
                                        ||out_actual_due_date_list(v_installment_number)
                                        ||' Billing Due Date: '
                                        ||out_billing_due_date_list(v_installment_number)
                                        ||' Withdrawal Date: '
                                        ||out_withdrawal_date_list(v_installment_number)
                                   );

                              end if;

                         end;
                    end if;


                    --
                    --  Handle the case of Feb overflow to March
                    --  We need to push the withdrawal date to march since january inst #
                    --  has a withdrawal date in February for the cases below.
                    --  Leap Year has been taken into consideration.

                    -- In order to simplify the logic, breaking the code into 2 if conditions
                    -- First if condition checks the caluclated withdrawal date and Billing due month.

                    if   (
                              to_char(out_withdrawal_date_list( v_installment_number ),'DDMM')  IN ('2802','2902') and -- Calculated Withrawal Date is 28th/29th Feb
                              to_char(out_actual_due_date_list(v_installment_number),'MM') = '02' -- Theoretical Due Month is in FEB
                         )
                    then
                         --
                         --  Second if condition checks Pollicy Booked Date and Preferred Withdrawal date
                         --
                         if
                              (
                                   (
                                        to_char(in_policy_trx_effective_date,'DD') = ('30') and -- Policy Booked On 30th
                                        v_preferred_payment_day IN ('28','29') -- Preffered Withdrawal day = 28th or 29th
                                   )
                                   OR
                                   (
                                        to_char(in_policy_trx_effective_date,'DD') = ('31') and -- Policy Booked On 31st
                                        v_preferred_payment_day IN ('28','29','30') -- Preffered Withdrawal day = 28th or 29th or 30th
                                   )
                                   OR
                                   (
                                        to_char(in_policy_trx_effective_date,'DD') = ('29') and -- Policy Booked On 29th
                                        v_preferred_payment_day = '28' -- Preffered Withdrawal Day = 28th
                                   )
                              )
                         then

                              out_withdrawal_date_list( v_installment_number ) := out_withdrawal_date_list( v_installment_number ) + v_preferred_payment_day;

                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Pushed Feb withdrawal to March, updated Withdrawal Date:'
                                        ||out_withdrawal_date_list( v_installment_number )
                                   );

                              end if;


                         end if; --Second if condition checks Pollicy Booked Date and Preferred Withdrawal date

                    end if;  -- First if condition checks the caluclated withdrawal date and Billing due month.

                    --
                    --  Handle the case of overflow to Next month, when booking date is 31st
                    --  and Withdrawal date is 30
                    --  Months Having only 30 days need to overflow to next month
                    --  Ex. Withdrawal date for OCT inst is in Nov, so we need to push Nov inst# withdrawal Date to Dec.
                    --

                    if
                         (
                              (
                                   (
                                        to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3004' and
                                        to_char(out_actual_due_date_list(v_installment_number),'MM') = '04'
                                   )
                                   OR
                                   (
                                        to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3006' and
                                        to_char(out_actual_due_date_list(v_installment_number),'MM') = '06'
                                   )
                                   OR
                                   (
                                        to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3009' and
                                        to_char(out_actual_due_date_list(v_installment_number),'MM') = '09'
                                   )
                                   OR
                                   (
                                        to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3011' and
                                        to_char(out_actual_due_date_list(v_installment_number),'MM') = '11'
                                   )
                              )
                              AND
                                   to_char(in_policy_trx_effective_date,'DD') = ('31')  -- Policy Booked On 31st
                              AND
                                   v_preferred_payment_day = '30' -- Preffered Withdrawal Day = 30th
                         )
                    then

                         --
                         --  Forward the Withdrwal date to March
                         --

                         out_withdrawal_date_list( v_installment_number ) := out_withdrawal_date_list( v_installment_number ) + v_preferred_payment_day;

                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......... Pushed withdrawal for 30day month to next month, updated Withdrawal Date:'
                                   ||out_withdrawal_date_list( v_installment_number )
                              );

                         end if;


                    end if;


                    --
                    --  Special Handling for Policy Transaction booked in advance with sufficient offset days
                    --  and preferred withdrawal day as 28th
                    --



                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..................... After special handling for February and Month End, for Installment Number: '||v_installment_number
                              ||' Actual Due Date: '||out_actual_due_date_list(v_installment_number)
                              ||' Billing Due Date: '||out_billing_due_date_list(v_installment_number)
                              ||' Withdrawal Date:'||out_withdrawal_date_list( v_installment_number )
                         );

                    end if;
               end;

          elsif in_payment_plan_md_row.nonlinear_interval_fla is null
          then

               --------------------------------------------------------------------------------------------------------------------------------------------------
               --
               --     LINEAR PAYMENT PLANS ...
               --
               --------------------------------------------------------------------------------------------------------------------------------------------------

               if v_installment_number = in_start_installment_no
               then

                    if in_payment_plan_md_row.extend_payment_schedule_tf = 'T'
                    then

                         if in_policy_trx_process_date > in_policy_trx_effective_date
                         then

                              v_actual_due_date_local  := in_policy_trx_process_date;

                              v_actual_due_date        := in_policy_trx_effective_date;

                         else

                              v_actual_due_date_local  := in_policy_trx_effective_date;

                              v_actual_due_date        := in_policy_trx_effective_date;

                         end if;


                    else

                         v_actual_due_date_local  := in_policy_trx_effective_date;

                         v_actual_due_date        := in_policy_trx_effective_date;

                    end if;


                    if v_actual_due_date_local > fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units )
                    then

                         --
                         --     If the due date is comfortably in the future ...
                         --

                         --- @@@ Criminality!
                         --v_billing_due_date  :=   fn_calendar_days_add( in_session_id, in_transaction_id, v_actual_due_date_local, v_down_payment_offset_period, v_down_payment_offset_units );

                         v_billing_due_date  :=   v_actual_due_date_local;

                    else
                         --
                         --     Otherwise, give them payment offset days from today.
                         --

                         v_billing_due_date  :=   fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units );

                    end if;

                   -- OSBILLING-5555 - Start
                   -- Calling the custom package to update billing due date
                    v_billing_due_date :=    nvl(pkg_cs_db_payplan.fn_override_billing_due_date
                     (
                          in_session_id,
                          in_transaction_id,
                          in_policy_image_id,
                          in_policy_trx_process_date
                     ),v_billing_due_date);
                    -- OSBILLING-5555 - End

                           -------OSPRODUCT-908-----

                                   pkg_cs_db_payplan.sp_generate_actual_due_date
                                (
                                  in_session_id   ,
                                  in_transaction_id  ,
                                  in_payment_plan_md_row ,
                                  in_policy_image_id ,
                                  in_policy_trx_process_date ,
                                  in_policy_trx_effective_date ,
                                  v_billing_due_date ,
                                  v_installment_number

                                );

                              --End of --OSPRODUCT-908--
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                          (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '........ Installment #1 LINEAR PAYMENT PLANS debugging. ' ||
                            '  v_actual_due_date_local=' || v_actual_due_date_local ||
                            ', v_actual_due_date='       || v_actual_due_date ||
                            ', v_down_payment_offset_period=' || v_down_payment_offset_period ||
                            ', v_other_payment_offset_period=' || v_other_payment_offset_period ||
                            ', v_stub_payment_offset_period=' || v_stub_payment_offset_period ||
                            ', v_billing_due_date=' || v_billing_due_date ||
                            ', fn_calendar_days_add( in_policy_trx_process_date, v_down_payment_offset_period )=' || fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units )
                         );
                    end if;

                    out_billing_due_date_list(v_installment_number)     :=   v_billing_due_date;
                    out_actual_due_date_list(v_installment_number)      :=   v_actual_due_date;

                    v_prior_billing_due_date := v_billing_due_date;
                    v_first_billing_due_date  := v_billing_due_date;

                    --OSPRODUCT-3295
                    out_withdrawal_date_list( v_installment_number ) := v_billing_due_date;

               else

                         pkg_os_logging.sp_log
                         (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' KK step1'

                         );
                    --
                    --  Second installment onwards ...
                    --

                    if in_payment_plan_md_row.extend_payment_schedule_tf = 'T'
                    then

                         --
                         --  If we we are, per the payment plan definition, able to extend the payment schedule beyond the vanilla dates, and indeed beyond the
                         --  expiration date of the policy, due to late booking ...
                         --

                         v_process_installment_interval   :=     fn_schedule_interval_get ( in_session_id, in_transaction_id,
                                                                    in_payment_plan_md_row,
                                                                    in_policy_trx_process_date,
                                                                    v_installment_number,
                                                                    null,
                                                                    in_start_installment_no
                                                                  );

                         v_eff_installment_interval   :=   fn_schedule_interval_get ( in_session_id, in_transaction_id,
                                                               in_payment_plan_md_row,
                                                               in_policy_trx_effective_date,
                                                               v_installment_number,
                                                               null,
                                                               in_start_installment_no
                                                             );

                         if in_policy_trx_process_date > in_policy_trx_effective_date
                         then
                              --
                              --  If we booked the policy late ...
                              --

                              v_actual_due_date_local  :=   in_policy_trx_process_date + v_process_installment_interval;
                              v_actual_due_date        :=   in_policy_trx_effective_date + v_eff_installment_interval;

                         else

                              v_actual_due_date_local  :=   in_policy_trx_effective_date + v_eff_installment_interval;
                              v_actual_due_date        :=   in_policy_trx_effective_date + v_eff_installment_interval;

                         end if;


                    else

              pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      ' KK 2'|| in_start_installment_no

                                    );
                         v_eff_installment_interval   :=   fn_schedule_interval_get ( in_session_id, in_transaction_id,
                                                            in_payment_plan_md_row,
                                                            in_policy_trx_effective_date,
                                                            v_installment_number,
                                                            null,
                                                            in_start_installment_no
                                                       );

                         v_actual_due_date_local  :=   in_policy_trx_effective_date + v_eff_installment_interval; -- Durgesh on 13-Jan-2014
                         v_actual_due_date        :=   in_policy_trx_effective_date + v_eff_installment_interval;

              pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      ' KK 3 v_actual_due_date_local '  || v_actual_due_date_local

                                    );

                    end if;

                         ----OSPRODUCT-908
                          pkg_cs_db_payplan.sp_generate_actual_due_date
                                (
                                  in_session_id   ,
                                  in_transaction_id  ,
                                  in_payment_plan_md_row ,
                                  in_policy_image_id ,
                                  in_policy_trx_process_date ,
                                  in_policy_trx_effective_date ,
                                  v_actual_due_date ,
                                  v_installment_number

                                );

                         --End of --OSPRODUCT-908
                    out_actual_due_date_list(v_installment_number)       :=     v_actual_due_date;
                    out_actual_end_date_list(v_installment_number - 1)   :=     v_actual_due_date - 1;

                    -------------------------------------------------------------------------------------------
                    --
                    --  Special handling for months with 30 days when Day of the Policy Effective Date is 30th
                    --
                    -------------------------------------------------------------------------------------------

                    if   to_char(in_policy_trx_effective_date,'DD') = '30'
                         and
                         to_char(v_actual_due_date,'MM') in ('01', '03', '05', '07', '08', '10', '12')
                    then

                         v_actual_due_date                                     := to_date('30'||to_char(v_actual_due_date,'MMYYYY'),'DDMMYYYY');
                         v_actual_due_date_local                               := to_date('30'||to_char(v_actual_due_date_local,'MMYYYY'),'DDMMYYYY');
                         out_actual_due_date_list(v_installment_number)        := v_actual_due_date;
                         out_actual_end_date_list(v_installment_number - 1)    := v_actual_due_date - 1;

                    end if;


                         if v_session_control.gLogging_Full
                         then
                         pkg_os_logging.sp_log
                          (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '..................... 2 Actual Local : '||v_actual_due_date_local||
                            'in_policy_trx_process_date ' || in_policy_trx_process_date||
                            ' Right hand side ' || fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units ) -- GCNA Specific
                          );
                          end if;

                    if v_actual_due_date_local > fn_calendar_days_add( in_session_id, in_transaction_id, in_policy_trx_process_date, v_down_payment_offset_period, v_down_payment_offset_units ) -- GCNA Specific
                    then

                         --
                         --     If the theoretical payment date is comfortably in the future ...
                         --

                         if v_use_anniversary_date_tf = 'T'
                         then


                              --
                              --     Anniversary of the original billing due date, so that the insured gets a nice smooth ride ...
                              --
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '..................... Entering to calculate due dates when Anniversary is true : '||
                                        'v_prior_billing_due_date ' || v_prior_billing_due_date||
                                        ' v_billing_installment_interval ' ||v_billing_installment_interval -- GCNA Specific
                                   );

                              end if;

                              v_billing_installment_interval   :=   fn_schedule_interval_get ( in_session_id, in_transaction_id,
                                                                          in_payment_plan_md_row,
                                                                          v_prior_billing_due_date,--v_first_billing_due_date OSBILLING-6109
                                                                          v_installment_number, -- OSBILLING-4818
                                                                          null,
                                                                          v_installment_number-1-- in_start_installment_no OSBILLING-6109
                                                                        );

                             --2017-08-10 Cheryl changed to use the interval units like for Semi needs months
 --                             v_billing_due_date  :=   v_first_billing_due_date + v_billing_installment_interval;
                               v_billing_due_date  :=       fn_calendar_days_add
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_prior_billing_due_date,--v_first_billing_due_date OSBILLING-6109
                                                            v_billing_installment_interval,
                                                            v_other_payment_offset_units
                                                       );
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '..................... first billing due date: '||v_first_billing_due_date
                                       || ' installment interval: ' || v_billing_installment_interval
                                       || ' billing due date: ' || v_billing_due_date
                                    );
                              end if;

                            --OSBILLING-6109
                              v_pref_prior_day :=  to_char(v_first_billing_due_date,'DD');
                              -- Verify if this billing due date is greater than actual due date; if no, then use actual due date
                              -- in place of prior billing due date
                                   v_billing_due_date := greatest(v_actual_due_date,v_billing_due_date );
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                         (
                                           in_session_id,
                                           in_transaction_id,
                                           v_procedure_name,
                                           '.....................v_billing_due_date' || v_billing_due_date
                                            ||'v_actual_due_date'||v_actual_due_date
                                         );
                                   end if;
                                   --Replace the day in order to maintain the anniversary trend
                                   if      (v_pref_prior_day in ('29','30','31'))
                                        and
                                        (to_char(v_billing_due_date, 'MM') in ('02'))
                                   then
                                        if to_char(last_day(v_billing_due_date),'DD')= '29'
                                        then
                                             v_billing_due_date := to_date(lpad('29', 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                         else
                         v_billing_due_date := to_date(lpad('28', 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                        end if;
                                   elsif (v_pref_prior_day in ('31'))
     and (to_char(v_billing_due_date, 'MM') in ('04','06','09','11'))then
                                        v_billing_due_date := to_date(lpad(to_char(last_day(v_billing_due_date),'DD'), 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                   else
                                        v_billing_due_date := to_date(lpad(v_pref_prior_day, 2, '0')||to_char(v_billing_due_date, 'MMYYYY'), 'DDMMYYYY' );
                                   end if;
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '..................... v_pref_prior_day: '||v_pref_prior_day
                                       || 'v_billing_due_date' || v_billing_due_date
                                       || ' installment interval: ' || v_billing_installment_interval
                                       ||'v_actual_due_date'||v_actual_due_date
                                    );
                              end if;
                              --/OSBILLING-6109
                         else
                              --
                              --     Whatever theory is.
                              --


                              v_billing_due_date  :=  fn_calendar_days_add( in_session_id, in_transaction_id, v_actual_due_date_local, v_other_payment_offset_period, v_other_payment_offset_units );


                         end if;


                         v_prior_billing_due_date := v_billing_due_date;


                    else
                          -- OSBILLING-6109 Commented Below consition
                         --
                         --     If the theoretical payment date is comfortably in the future ...
                         --

                         /* if v_use_anniversary_date_tf = 'T'
                         then


                              --
                              --     Anniversary of the original billing due date, so that the insured gets a nice smooth ride ...
                              --


                              v_billing_installment_interval   :=   fn_schedule_interval_get ( in_session_id, in_transaction_id,
                                                                          in_payment_plan_md_row,
                                                                          v_prior_billing_due_date,
                                                                          v_installment_number,
                                                                          null,
                                                                          in_start_installment_no
                                                                        );

                             --2017-08-10 Cheryl changed to use the interval units like for Semi needs months
 --                             v_billing_due_date  :=   v_first_billing_due_date + v_billing_installment_interval;
                              v_billing_due_date  :=  fn_calendar_days_add( in_session_id, in_transaction_id, v_prior_billing_due_date, v_billing_installment_interval, v_other_payment_offset_units );


                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '..................... prior billing due date: '||v_prior_billing_due_date
                                       || ' installment interval: ' || v_billing_installment_interval
                                       || ' billing due date: ' || v_billing_due_date
                                    );
                              end if;


                         else
                              --
                              --     If the theoretical payment date is in the past ... everything is simply due as of the date of the first installment.
                              --


                              v_billing_due_date := v_prior_billing_due_date;


                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' KK 4 Retained the first billing due date '
                              );

                         end if;*/

                        -- OSBILLING-6109 Assigning prior billing due date as billing due date because the installment's actual due date is in past.
                          v_billing_due_date := v_prior_billing_due_date;
                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' KK 4 Retained the first billing due date '
                              );

                    end if;



                    out_billing_due_date_list(v_installment_number)  :=   v_billing_due_date;

--               end if; -- if this is not the first installment.  --OSPRODUCT-3295
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     '..................... out_billing_due_date_list(v_installment_number): '||out_billing_due_date_list(v_installment_number)
                     ||' v_installment_number ' || v_installment_number
                     || ' installment interval: ' || v_billing_installment_interval
                     || ' billing due date: ' || v_billing_due_date
                    );
               end if;
               
                    --OSPRODUCT-3295 start
                    out_withdrawal_date_list( v_installment_number ) := v_billing_due_date;

                    If nvl(v_preferred_payment_day,0) = 0 then
                         out_withdrawal_date_list( v_installment_number ) := fn_get_next_withdrawal_date
                                                                                (
                                                                                     in_session_id,
                                                                                     in_transaction_id,
                                                                                     out_billing_due_date_list(v_installment_number),
                                                                                     v_preferred_payment_day,
                                                                                     in_policy_image_id  --OSBILING-7265
                                                                                );
                    else
                         If out_withdrawal_date_list( v_installment_number ) > out_withdrawal_date_list( 1 ) then
                              out_withdrawal_date_list( v_installment_number ) := fn_get_next_withdrawal_date
                                                                                     (
                                                                                          in_session_id,
                                                                                          in_transaction_id,
                                                                                          out_billing_due_date_list(v_installment_number),
                                                                                          v_preferred_payment_day,
                                                                                          in_policy_image_id  --OSBILING-7265
                                                                                     );
                         end if;     
                    end if;
                    --OSPRODUCT-3295 end

               if out_withdrawal_date_list( v_installment_number ) is null
               then

                    out_withdrawal_date_list( v_installment_number ) := out_billing_due_date_list(v_installment_number);

               end if;


               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......... Before Special Handling Installment Number: '||v_installment_number
                         ||' Actual Due Date: '||out_actual_due_date_list(v_installment_number)
                         ||' Billing Due Date: '||out_billing_due_date_list(v_installment_number)
                         ||' Withdrawal Date:'||out_withdrawal_date_list( v_installment_number )
                    );

               end if;

               end if; -- if this is not the first installment. --OSPRODUCT-3295
               
               --
               --  Handle the case of Feb overflow to March
               --  We need to push the withdrawal date to march since january inst #
               --  has a withdrawal date in February for the cases below.
               --  Leap Year has been taken into consideration.

               -- In order to simplify the logic, breaking the code into 2 if conditions
               -- First if condition checks the caluclated withdrawal date and Billing due month.

               if   (
                         to_char(out_withdrawal_date_list( v_installment_number ),'DDMM')  IN ('2802','2902') and -- Calculated Withrawal Date is 28th/29th Feb
                         to_char(out_actual_due_date_list(v_installment_number),'MM') = '02' -- Theoretical Due Month is in FEB
                    )
               then
                    --
                    --  Second if condition checks Pollicy Booked Date and Preferred Withdrawal date
                    --
                    if
                         (
                              (
                                   to_char(in_policy_trx_effective_date,'DD') = ('30') and -- Policy Booked On 30th
                                   v_preferred_payment_day IN ('28','29') -- Preffered Withdrawal day = 28th or 29th
                              )
                              OR
                              (
                                   to_char(in_policy_trx_effective_date,'DD') = ('31') and -- Policy Booked On 31st
                                   v_preferred_payment_day IN ('28','29','30') -- Preffered Withdrawal day = 28th or 29th or 30th
                              )
                              OR
                              (
                                   to_char(in_policy_trx_effective_date,'DD') = ('29') and -- Policy Booked On 29th
                                   v_preferred_payment_day = '28' -- Preffered Withdrawal Day = 28th
                              )
                         )
                    then

                         -- Forward the Withdrwal date to March
                         out_withdrawal_date_list( v_installment_number ) := out_withdrawal_date_list( v_installment_number ) + v_preferred_payment_day;

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '............ Pushed Feb withdrawal to March, updated Withdrawal Date: '
                                   ||out_withdrawal_date_list( v_installment_number )
                              );

                         end if;


                    end if; --Second if condition checks Pollicy Booked Date and Preferred Withdrawal date

               end if;  -- First if condition checks the caluclated withdrawal date and Billing due month.

               --
               --  Handle the case of overflow to Next month, when booking date is 31st
               --  and Withdrawal date is 30
               --  Months Having only 30 days need to overflow to next month
               --  Ex. Withdrawal date for OCT inst is in Nov, so we need to push Nov inst# withdrawal Date to Dec.
               --

               if
                    (
                         (
                              (
                                   to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3004' and
                                   to_char(out_actual_due_date_list(v_installment_number),'MM') = '04'
                              )
                              OR
                              (
                                   to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3006' and
                                   to_char(out_actual_due_date_list(v_installment_number),'MM') = '06'
                              )
                              OR
                              (
                                   to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3009' and
                                   to_char(out_actual_due_date_list(v_installment_number),'MM') = '09'
                              )
                              OR
                              (
                                   to_char(out_withdrawal_date_list( v_installment_number ),'DDMM') = '3011' and
                                   to_char(out_actual_due_date_list(v_installment_number),'MM') = '11'
                              )
                         )
                         AND
                              to_char(in_policy_trx_effective_date,'DD') = ('31')  -- Policy Booked On 31st
                         AND
                              v_preferred_payment_day = '30' -- Preffered Withdrawal Day = 30th
                    )
               then

                    --
                    --  Forward the Withdrwal date to March
                    --

                    out_withdrawal_date_list( v_installment_number ) := out_withdrawal_date_list( v_installment_number ) + v_preferred_payment_day;

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '............ Pushed withdrawal for 30day month to next month, updated Withdrawal Date: '
                              ||out_withdrawal_date_list( v_installment_number )
                         );

                    end if;


               end if;


               --
               --  Special Handling for Policy Transaction booked in advance with sufficient offset days and preferred withdrawal day as 28th
               --

               /*if v_installment_number <> 1
               then

                    if
                         to_char(out_actual_due_date_list(v_installment_number - 1), 'DD') = '28'
                         and
                         to_char(out_billing_due_date_list(v_installment_number - 1), 'DD') = '28'
                         and
                         v_preferred_payment_day in (28)
                    then

                         out_actual_due_date_list(v_installment_number) := to_date('28'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');
                         out_billing_due_date_list(v_installment_number) := to_date('28'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');
                         out_withdrawal_date_list(v_installment_number) := to_date('28'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');

                   elsif
                         to_char(out_actual_due_date_list(v_installment_number - 1), 'DD') = '29'
                         and
                         to_char(out_billing_due_date_list(v_installment_number - 1), 'DD') = '29'
                         and
                         v_preferred_payment_day in (29)
                    then

                         out_actual_due_date_list(v_installment_number) := to_date('29'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');
                         out_billing_due_date_list(v_installment_number) := to_date('29'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');
                         out_withdrawal_date_list(v_installment_number) := to_date('29'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');

                   elsif
                         to_char(out_actual_due_date_list(v_installment_number), 'DDMM') = '2802'
                         and
                         to_char(out_billing_due_date_list(v_installment_number), 'DDMM') = '2802'
                         and
                         v_preferred_payment_day in (29, 30, 31)
                    then

                         out_withdrawal_date_list(v_installment_number) := to_date('28'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');

                   elsif
                         to_char(out_actual_due_date_list(v_installment_number), 'DDMM') = '2902'
                         and
                         to_char(out_billing_due_date_list(v_installment_number), 'DDMM') = '2902'
                         and
                         v_preferred_payment_day in (30, 31)
                    then

                         out_withdrawal_date_list(v_installment_number) := to_date('29'||to_char(out_actual_due_date_list(v_installment_number),'MMYYYY'),'DDMMYYYY');

                    end if;


               end if;*/


               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..................... After special handling for February and Month End, for Installment Number: '||v_installment_number
                         ||' Actual Due Date: '||out_actual_due_date_list(v_installment_number)
                         ||' Billing Due Date: '||out_billing_due_date_list(v_installment_number)
                         ||' Withdrawal Date:'||out_withdrawal_date_list( v_installment_number )
                    );

               end if;


          end if; -- Non-Linear or Linear Payment Plan

          if v_installment_number = in_installment_count
          then

               v_last_installment := v_installment_number;

          end if;


     end loop;     -- for v_installment_number in 1 .. in_installment_count

     out_actual_end_date_list(v_last_installment) :=   in_policy_image_exp_date;


     --
     -- OSBILLING-4792
     -- Based on the client specific logic, this procedure overrides the due dates & withdrawal dates in determined instalments.
     --
     --
     -- DDWIDEV-216
      pkg_cs_db_payplan.sp_override_due_dates
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          in_installment_count,
          in_policy_trx_effective_date,
          in_policy_trx_process_date,
          in_policy_image_exp_date,
          out_actual_due_date_list,
          out_actual_end_date_list,
          out_billing_due_date_list,
          out_withdrawal_date_list,
          in_transaction_type_id,    -- DDWIDEV-595
          in_start_installment_no, -- DDWIDEV-1653
          in_existing_customer_flag -- DDWIDEV-1653
     );


end sp_calculate_due_dates;



----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_schedule_interval_get
--
--   %USAGE
--        This function returns the number of days for a given Payment Plan between the input date and the Nth installment.
--
--   %ALGORITHM
--        1. Get the Term Period based on the Policy Term mapped with the Payment Plan MD ID
--        2. If Payment Plan Type is Quarterly then
--                 return number of days for a quarter
--        3. Else If Payment Plan Type is Monthly then
--             return number of days for a month
--        4. Else
--             a. Get the number of days if Nonlinear Payment FLA is set
--             b. Get the number of days if Nonlinear Interval FLA is set
--             c. Get the number of days if Linear Installment Interval is set
--
--   @@@VG:  This procedure needs to be MUCH more picky about metadata quality!!! There is too much reliance to defaulting to a monthly schedule.

--   %PARAM    in_payment_plan_rec                Payment Plan Record
--   %PARAM    in_current_date                    Current Date
--   %PARAM    in_installment_number              Installment Number
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_schedule_interval_get
(
     in_session_id                in        object.object_id%type,
     in_transaction_id            in        object.object_id%type,
     in_payment_plan_rec          in        getPaymentPlanList%rowtype,--OSPRODUCT-3108
     in_current_date              in        date,
     in_installment_number        in        integer,
     v_modified_fla               in        varchar2 default null,
     in_start_installment_no      in        number default 1
)
return    number -- PMADEV297 - 20150915 change from integer to number Cheryl - @@@: This SHOULD be an integer, we need to trim the current date before doing anything!
is
     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'fn_schedule_interval_get';

     v_nonlinear_table                  pkg_os_token.t_string_table;
     v_policy_term_type_id              pd_term_type.pd_term_type_id%type;
     v_policy_period                    number;
     -- PMADEV297 - 20150915 change from integer to number Cheryl
     return_value                       number;

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Getting schedule interval for Installment:'||in_installment_number
               || 'in_start_ins_no:'|| in_start_installment_no
          );

     end if;


     v_policy_term_type_id := in_payment_plan_rec.pd_term_id;

     select
          pd_term_period
     into
          v_policy_period
     from
          pd_term_type
     where
          pd_term_type_id = v_policy_term_type_id;


     if in_payment_plan_rec.payment_plan_type_id = gPayPlan_Quarterly
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Quarterly Intervals' );

          end if;


          return_value   :=   add_months(in_current_date,3*(in_installment_number-in_start_installment_no)) - in_current_date;

     elsif in_payment_plan_rec.payment_plan_type_id = gPayPlan_Monthly
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Monthly Intervals' );

          end if;


          return_value   :=   add_months(in_current_date,1*(in_installment_number-in_start_installment_no)) - in_current_date;

     elsif trim(nvl(v_modified_fla,in_payment_plan_rec.nonlinear_interval_fla)) is not null
     then

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Non-Linear Payment Intervals' );

          end if;


          -- Since the interval schedule is specified, we are going to assume that this is non-linear.

          pkg_os_token.sp_tokenize_string
          (
               nvl(v_modified_fla,in_payment_plan_rec.nonlinear_interval_fla),
               ',',
               v_nonlinear_table
          );


          if  v_nonlinear_table.exists(in_installment_number)
          then

              return_value   :=   v_nonlinear_table(in_installment_number);

          else

               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Called for Installment Number '||in_installment_number||' - but the non-linear interval string does not have sufficient entries String:'||nvl(v_modified_fla,in_payment_plan_rec.nonlinear_interval_fla)
               );

               raise no_data_found;

          end if;


     elsif in_payment_plan_rec.linear_installment_interval > 0
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Fixed Linear Intervals' );

          end if;


          return_value   :=   in_payment_plan_rec.linear_installment_interval;

     else

          -- 2018-02-01 Cheryl osbilling-4897-vaultdev-6105 changed to sp log vs sp_log_error
         if v_session_control.gLogging_Full
         then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.... Insufficient non-linear payment plan definition. Defaulting to monthly intervals ...'
                    || in_payment_plan_rec.payment_plan_id
               );
          end if;
          --pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Insufficient non-linear payment plan definition. Defaulting to monthly intervals ...' );

          return_value   :=   add_months(in_current_date,1*(in_installment_number-in_start_installment_no)) - in_current_date;

     end if;



     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Returning Interval:'||return_value
          );

     end if;


     return return_value;

end fn_schedule_interval_get;


-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_schedule_payment_cleanse
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     in_current_date_time               in             date default null,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
is

     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_payment_plan_cleanse';

     v_policy_image_id                  object.object_id%type;
     v_payment_plan_list                pkg_os_object.t_object_list;
     v_payment_plan_index               number;
     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_payment_index          number;

begin
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Entering the Scheduled Payment Cleanse Process for Policy Image ID: '
               ||in_policy_image_id
          );
     end if;


     v_policy_image_id   :=   in_policy_image_id;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Searching for all Payment Plans objects under the Policy Image ID '
               ||v_policy_image_id
          );

     end if;


     v_payment_plan_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_policy_image_id,
          pkg_os_constant.gobjType_PaymentPlanOption,
          v_payment_plan_list
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Found PaymentPlan objects, count: '
               ||v_payment_plan_list.count
          );

     end if;


     --
     -- if any Payment Plan found
     --

     if v_payment_plan_list.count > 0
     then

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Loop through Payment Plan objects and exclude the Chosen Payment Plan for Cleanse'
               );
          end if;


          v_payment_plan_index := v_payment_plan_list.first;

          while v_payment_plan_index is not null loop

               v_scheduled_payment_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                   in_session_id,
                   in_transaction_id,
                   v_payment_plan_list(v_payment_plan_index),
                   gObjType_ScheduledPayment,
                   v_scheduled_payment_list
               );

               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '...... Found PaymentPlanScheduledPayment objects, count: '
                        ||v_scheduled_payment_list.count
                   );
               end if;


               if v_scheduled_payment_list.count > 0
               then

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '... Loop through PaymentPlanScheduledPayment objects and unlink from Parent '
                         );

                    end if;


                    v_scheduled_payment_index := v_scheduled_payment_list.first;

                    while v_scheduled_payment_index is not null loop

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... Unlinking PaymentPlanScheduledPayment Object ID: '
                                  ||v_scheduled_payment_list(v_scheduled_payment_index)
                                  ||' from its parent Payment Plan Object ID: '
                                  ||v_payment_plan_list(v_payment_plan_index)
                              );

                         end if;


                         --
                         -- Unlink from Parent rather than deleting the Payment Schedules
                         --

                         pkg_os_object_io.sp_object_bv_set
                         (
                            in_session_id,
                            in_transaction_id,
                            v_scheduled_payment_list(v_scheduled_payment_index),
                            gbv_PaymentParentPaymentPlan,
                            null
                         );

                         v_scheduled_payment_index := v_scheduled_payment_list.next( v_scheduled_payment_index );

                    end loop;   -- while v_scheduled_payment_index is not null loop

               end if;   -- if v_scheduled_payment_list.count > 0

               v_payment_plan_index := v_payment_plan_list.next( v_payment_plan_index );

          end loop;   -- while v_payment_plan_index is not null loop

     end if;  -- if v_payment_plan_list.count > 0

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_schedule_payment_cleanse;


-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_adjust_applied_payment
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_chosen_payment_plan_id          in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type
)
as

     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type := pkg_name||'sp_adjust_applied_payment';
     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_payment_index          number;
     v_scheduled_installment_num        object_bv_value.business_variable_value%type;
     v_scheduled_actual_due_date        object_bv_value.business_variable_value%type;
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_scheduled_element_index          number;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_billing_element_md_row           db_billing_element%rowtype;
     v_coverage_object_id               object.object_id%type;
     v_scheduled_pay_fitem              object.object_id%type;

     v_element_amount                   number;
     v_element_amount_new               number;
     v_applied_amount_tot               number := 0;
     v_applied_amount                   number;
     v_scheduled_payment_element_id     object.object_id%type;
     v_element_create_debit             number;
     v_element_create_credit            number;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_element_name                     object_bv_value.business_variable_value%type;
     v_policy_transaction_id            object.object_id%type;
     v_master_policy_id                        object.object_id%type;
     v_master_key                       varchar2(500);
     v_create_debit                         lookup_list_value.lookup_enum%type;

     v_element_payment_schedule         number;
     v_debit_subcat                     db_fitem_category.db_fitem_category_id%type;


begin

     --
     -- Get the Policy Transaction ID
     --

     v_policy_transaction_id       :=   pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             pkg_os_constant.gobjType_PolicyTransaction
                                        );
     --
     -- Get the Master Policy ID
     --

     v_master_policy_id                      :=   pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_transaction_id,
                                             pkg_os_constant.gObjType_Policy
                                        );

     begin

          select
               sum(action_delta)
          into
               v_applied_amount_tot
          from
               dragon_fichange a
          where
               policy_id = v_master_policy_id
          and
               fitem_type_id = pkg_db_object.gFItem_Debit
          and
               fitem_transaction_type_id = pkg_db_object.gFITrxType_Cash_Apply;


     exception when others then

          v_applied_amount_tot := 0;

     end;


     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Applied amount on this policy : '||v_applied_amount_tot
          );
     end if;


     --
     --     Get existing PaymentPlanScheduledPayment objects
     --

     v_scheduled_payment_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_chosen_payment_plan_id,
          gObjType_ScheduledPayment,
          v_scheduled_payment_list,
          gbv_actual_due_date
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of PaymentPlanScheduledPayment objects found:'||v_scheduled_payment_list.count
               ||'  for chosen Payment plan: '||in_chosen_payment_plan_id
          );
     end if;


     if v_scheduled_payment_list.count > 0
     then

          v_scheduled_payment_index    :=    v_scheduled_payment_list.first;

          while v_scheduled_payment_index is not null loop

               v_scheduled_installment_num  :=     pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_scheduled_payment_list(v_scheduled_payment_index),
                                                        gbv_ScheduledPayment_num
                                                   );

               v_scheduled_actual_due_date  :=     pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_scheduled_payment_list(v_scheduled_payment_index),
                                                        gbv_actual_due_date
                                                   );

               v_scheduled_element_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_scheduled_payment_list(v_scheduled_payment_index),
                    gObjType_ScheduledElement,
                    v_scheduled_element_list
               );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... For PaymentPlanScheduledPayment Object ID: '
                         ||v_scheduled_payment_list(v_scheduled_payment_index)
                         ||', number of PaymentPlanScheduledPaymentElement objects found: '
                         ||v_scheduled_element_list.count
                    );
               end if;


               if v_scheduled_element_list.count > 0
               then

                    v_scheduled_element_index := v_scheduled_element_list.first;

                    while v_scheduled_element_index is not null loop

                         v_scheduled_pay_fitem      := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_scheduled_element_list(v_scheduled_element_index),
                                                            gbv_ScheduleElementFitem_id
                                                       );

                         if v_scheduled_pay_fitem is null
                         then

                              v_billing_element_md_id  :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_billing_element_id
                                                            );

                              v_billing_element_md_row     :=     fn_billing_element_row
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_billing_element_md_id
                                                            );

                              v_coverage_object_id     :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_ScheduledElementRefAsset
                                                            );

                              v_element_amount         :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_element_amount
                                                            );

                              v_create_debit               :=       pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_create_debit_flag
                                                            );



                              v_debit_subcat               :=       pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 29712546
                                                            );



                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Get ScheduledPaymentElement ID: '||v_scheduled_element_list(v_scheduled_element_index)
                                        ||' Amount:'||v_element_amount
                                   );
                              end if;


                              if v_applied_amount_tot <> 0 and v_element_amount >= 0 and v_create_debit = pkg_os_constant.gBoolean_True and v_debit_subcat <> 946
                              then

                                   v_applied_amount := v_applied_amount_tot*-1;

                                   if v_applied_amount <= v_element_amount
                                   then

                                        v_element_amount_new := v_applied_amount;

                                   else

                                        v_element_amount_new := v_element_amount;

                                   end if;


                                   /*v_master_key   :=   v_scheduled_payment_list(v_scheduled_payment_index)||'-'||
                                                       v_coverage_object_id||'-'||
                                                       v_billing_element_md_row.db_billing_element_id||'-'||
                                                       v_element_amount_new*-1;*/
                                                       
                                   v_master_key   :=   v_scheduled_payment_list(v_scheduled_payment_index)||'-'||   --OSPRODUCT-5367
                                                       v_coverage_object_id||'-'||
                                                       v_billing_element_md_row.db_billing_element_id||'-'||
                                                       v_element_amount_new*-1 ||'-'||
                                                       v_policy_transaction_id;                    

                                   if v_session_control.gLogging_Full
                                   then
                                       pkg_os_logging.sp_log
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_procedure_name,
                                            '......... Using Master Key:'
                                            ||v_master_key
                                       );
                                   end if;


                                   if g_scheduled_element_cache.exists(v_master_key)
                                   then

                                        v_scheduled_payment_element_id     :=      g_scheduled_element_cache(v_master_key);

                                        if v_session_control.gLogging_Full
                                        then
                                            pkg_os_logging.sp_log
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_procedure_name,
                                                 '......... Found PaymentPlanScheduledPaymentElement object from Cache:'
                                                 ||v_scheduled_payment_element_id
                                            );
                                        end if;


                                    else

                                        --
                                        --  Create PaymentPlanScheduledPaymentElement object under PaymentPlanScheduledPayment object
                                        --

                                        pkg_os_object.sp_object_create
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             gObjType_ScheduledElement,
                                             v_scheduled_payment_list(v_scheduled_payment_index),
                                             v_scheduled_payment_element_id
                                        );

                                        if v_session_control.gLogging_Full
                                        then
                                            pkg_os_logging.sp_log
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_procedure_name,
                                                 '......... Created PaymentPlanScheduledPaymentElement object:'
                                                 ||v_scheduled_payment_element_id
                                            );
                                        end if;


                                        --
                                        --   Set the reference ???Associated Asset??? from PaymentPlanScheduledPaymentElement to looping Coverage Object instance
                                        --

                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_scheduled_payment_element_id,
                                             gbv_ScheduledElementRefAsset,
                                             v_coverage_object_id
                                        );

                                        --
                                        --   Set the Billing Element Name concatenated by Associated Asset
                                        --


                                        if pkg_os_object_search.fn_object_type_equivalent_tf( pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_coverage_object_id), pkg_os_constant.gObjType_Policy )  = 'F'
                                        then

                                             v_element_name :=        substr
                                                                      (
                                                                         v_billing_element_md_row.billing_element_name||
                                                                         ' - '||
                                                                         pkg_os_object.fn_object_name_get
                                                                         (
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              v_coverage_object_id
                                                                         )
                                                                         ,1,100
                                                                      );

                                        else

                                             v_element_name :=   substr( v_billing_element_md_row.billing_element_name, 1, 100 );

                                        end if;



                                        if v_billing_element_md_row.create_debit_tf = 'T'
                                        then

                                             v_element_create_debit := 1;

                                        elsif v_billing_element_md_row.create_debit_tf = 'F'
                                        then

                                             v_element_create_debit := 2;

                                        else

                                             v_element_create_debit := null;

                                        end if;



                                        if v_billing_element_md_row.create_credit_tf = 'T'
                                        then

                                             v_element_create_credit := 1;

                                        elsif v_billing_element_md_row.create_debit_tf = 'F'
                                        then

                                             v_element_create_credit := 2;

                                        else

                                             v_element_create_credit := null;

                                        end if;


                                        if v_billing_element_md_row.payment_schedule_tf = 'T'
                                        then

                                             v_element_payment_schedule := 1;

                                        elsif v_billing_element_md_row.payment_schedule_tf = 'F'
                                        then

                                             v_element_payment_schedule := 2;

                                        else

                                             v_element_payment_schedule := null;

                                        end if;


                                        --
                                        --   v.  Set Create Credit, Credit Category and Credit Sub Category from Billing Element row
                                        --

                                        v_bv_table ( gbv_element_name        ).business_variable_value := v_element_name;
                                        v_bv_table ( gbv_create_debit_flag   ).business_variable_value := v_element_create_debit;
                                        v_bv_table ( gbv_debit_category      ).business_variable_value := v_billing_element_md_row.debit_fitem_category;
                                        v_bv_table ( gbv_debit_sub_category  ).business_variable_value := v_billing_element_md_row.debit_fitem_sub_category;
                                        v_bv_table ( gbv_create_credit_flag  ).business_variable_value := v_element_create_credit;
                                        v_bv_table ( gbv_credit_category     ).business_variable_value := v_billing_element_md_row.credit_fitem_category;
                                        v_bv_table ( gbv_credit_sub_category ).business_variable_value := v_billing_element_md_row.credit_fitem_sub_category;
                                        v_bv_table ( gbv_element_amount      ).business_variable_value := v_element_amount_new*-1;
                                        v_bv_table ( gbv_billing_element_id  ).business_variable_value := v_billing_element_md_row.db_billing_element_id;
                                        v_bv_table ( gbv_payment_schedule_flag ).business_variable_value := v_element_payment_schedule;


                                        --
                                        --  Set all the BVs for PaymentPlanScheduledPaymentElement object.
                                        --

                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_scheduled_payment_element_id,
                                            v_bv_table
                                        );

                                   end if;


                                   v_applied_amount_tot := v_applied_amount_tot + v_element_amount_new;

                                   if v_applied_amount_tot = 0
                                   then

                                        exit;

                                   end if;


                                   --end if;

                              end if; ---- v_applied_amount_tot <> 0

                         end if; -- if v_scheduled_pay_fitem is null

                         v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                    end loop;


               end if; -- if v_scheduled_element_list.count > 0

               if v_applied_amount_tot = 0
               then

                    exit;

               end if;


               v_scheduled_payment_index     :=     v_scheduled_payment_list.next(v_scheduled_payment_index);

          end loop;     -- while v_scheduled_payment_index is not null loop

     end if;  -- if v_scheduled_payment_list.count > 0

end sp_adjust_applied_payment;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payment_withdrawal_update
--
--   %USAGE
--        This procedure updates withdrawal date of the PaymnetSchedule Objects for Endrosement Withdrawal Date Update subtype
--
--   %ALGORITHM
--        1) get the chosen payment plan of the current tranmsaction and entered preferred day
--        2) get payment plan md, policy transaction id and policy transaction effective date
--        3) get the children of type PaymentSchedule of the ChosenPaymentPlan.
--        3.1) if withdrawal date of PaymentSchedule > transaction effective date then get new withdrawal returned with fn_get_next_withdrawal_date function
--        3.2) if new withdrawal date is null then new withdrawal date = billing due date
--        3.3) update PaymentSchedule withdrawal date with new withdrawal date
--
--
--   %PARAM    in_session_id                      Session ID
--   %PARAM    in_transaction_id                  Transaction ID
--   %PARAM    in_action_object_id                Action Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

 procedure sp_payment_withdrawal_update
(
     in_session_id                       in        object.object_id%type,
     in_transaction_id                   in        object.object_id%type,
     in_action_object_id                 in        object.object_id%type,
     in_process_tf                       in        char default 'F',
	in_billing_account_id               in        object.object_id%type default null  --OSPRODUCT-28491
)
as

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_payment_withdrawal_update';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_poltrx_eff_date                  object_bv_value.business_variable_value%type;
     v_policy_term_id                   object.object_id%type;
     v_term_install_withdrwl_date       date;
     v_term_inst_new_withdrwl_date      date;

     v_term_pymntsch_list               pkg_os_object.t_object_list;
     v_term_pymntsch_index              number;

     gbv_pt_preferred_pay_day           business_variable.business_variable_id%type := 32853540;
     gbv_pt_prev_pref_pay_day           business_variable.business_variable_id%type := 32853640;
     gbv_install_withdrawal_date        business_variable.business_variable_id%type := 32178946;
     gbv_inst_temp_withdr_date          business_variable.business_variable_id%type := 32884440;
     gbv_install_bill_due_date          business_variable.business_variable_id%type := 29711846;
     gbv_install_bal_amount             business_variable.business_variable_id%type := 32080746;

     v_preferred_payment_day            integer;
     v_term_inst_billing_due_date       date;
     v_term_inst_bal_amount             number;

     v_master_policy_id                 object.object_id%type;
     v_ref_chosen_pay_plan_id           object.object_id%type;
     v_payment_plan_md_id               payment_plan.payment_plan_id%type;
     v_payment_plan_md_row              getPaymentPlanList%rowtype;--OSPRODUCT-3108
     v_datamart_tf                      char(1) := 'T';

     --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
     v_policy_effective_date            date;
     v_term_inst_actual_due_date        date;
     v_policy_id                        object.object_id%type;
     --OSBILLING-3833 - Merged GCNA code in BaseDEV. End

     --OSBILLING-7265 start
     v_product_id                       object.object_id%type;
     v_filing_id                        object.object_id%type;
     v_instalment_billed_flag           number;
     --OSBILLING-7265 end
     v_policy_term_payer_list           pkg_os_object.t_object_list;--OSPRODUCT-19874
     v_idx_term_payer                   binary_integer;--OSPRODUCT-19874
	 
	v_term_payer                       object.object_id%type;
     v_assoc_entity                     object.object_id%type;        --OSPRODUCT-28491
	v_assoc_billing_account_id         object.object_id%type;
     v_assoc_billing_account_list       pkg_os_object.t_object_list;
     v_action_mini_tf                   business_variable.business_variable_id%type;

begin
     v_action_mini_tf := pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               in_session_id,
                               pkg_db_object.gbv_UserSessionMiniWf
                          );
     if nvl(v_action_mini_tf, 2)=1 and in_billing_account_id is null then
          
          if v_session_control.gLogging_Full then
                     pkg_os_logging.sp_log
                     (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '... Action mini is :'
                        ||v_action_mini_tf
                     );
          end if;
                
     return;
           
     end if;
           
     v_master_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                           (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                pkg_os_constant.gobjType_Policy
                           );
      --OSBILLING-7265 start
     v_product_id := pkg_os_product.fn_object_product_get
                     (
                         in_session_id,
                         in_transaction_id,
                         v_master_policy_id
                     );

     v_filing_id := pkg_os_product.fn_policy_filing_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_master_policy_id,
                         v_product_id
                    );
      --OSBILLING-7265 end
      --OSBILLING-3833 - Merged GCNA code in BaseDEV. Star
     v_policy_effective_date := to_date(pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_id,
                                 gbv_PolicyDateEffective -- policy effective date
                            ),   pkg_os_constant.DragonDateFormatDefault);

     v_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                    (
                           in_session_id,
                           in_transaction_id,
                           in_action_object_id,
                           pkg_os_constant.gobjType_Policy
                    );
                                
      -- get Policy Term of current Transaction
     v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                         (
                            in_session_id,
                            in_transaction_id,
                            in_action_object_id,
                            gbv_PolicyTrxRefPolicyTerm  --Belongs To reference
                         );
						 
                            
	 
	 
	 
	 v_ref_chosen_pay_plan_id      := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_master_policy_id,
                                           gbv_PolicyRefChosenPlan -- chosen payment plan
                                      );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Choosen Payment Plan Id is :'
               ||v_ref_chosen_pay_plan_id
          );
     end if;


     v_payment_plan_md_id :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ref_chosen_pay_plan_id,
                                   pkg_os_constant_bv.gbv_PaymentPlanID
                              );

     v_payment_plan_md_row :=   pkg_db_payplan_modify.fn_payment_plan_row(v_payment_plan_md_id);
                   
     v_poltrx_eff_date := pkg_os_object_io.fn_object_bv_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                pkg_os_constant_bv.gbv_PolicyTranEffectiveDate
                           );
                           
     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Policy Transction ID : '
               ||in_action_object_id||
               ' Policy Transaction Effective Date: '
               ||v_poltrx_eff_date
               
           );
     end if;

     v_preferred_payment_day := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_policy_term_id, gbv_pt_preferred_pay_day );

     -- get the children of type PolicyTermScheduledPaymentInstallment

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_policy_term_id,
          gObjType_ScheduledInstallment,
          v_term_pymntsch_list
     );


     v_term_pymntsch_index := v_term_pymntsch_list.first;

     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... v_term_pymntsch_list.count'
               ||v_term_pymntsch_list.count
               ||'in_billing_account_id'
               ||in_billing_account_id
          );

     end if;
 
     if in_billing_account_id is not null then
          while v_term_pymntsch_index is not null loop
               v_term_payer := pkg_os_object_io.fn_object_bv_get    -- get the associated term payer
                                 (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_pymntsch_list(v_term_pymntsch_index),
                                        32726624
                                  );                     
                    
                
               v_assoc_entity := pkg_os_object_io.fn_object_bv_get     -- get the associated entity
                                 (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_payer,
                                        32714824 
                                 );
                                  
                                
               v_assoc_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_assoc_entity,
                                                 pkg_db_constant.gObjType_BillingAccount
                                             );
                                                      
               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Associated billing account id: '||
                          v_assoc_billing_account_id
                                        
                    );
               end if;
                                                      
               --OSPRODUCT-31825 - we do not need to check this condition SP                      
               if v_assoc_billing_account_id = in_billing_account_id or v_term_payer is null then
                    
                    v_term_install_withdrwl_date := to_date(
                                                          pkg_os_object_io.fn_object_bv_get
                                                          (
                                                               in_session_id,
                                                               in_transaction_id,
                                                               v_term_pymntsch_list(v_term_pymntsch_index),
                                                               gbv_install_withdrawal_date
                                                          ),
                                                         pkg_os_constant.dragondateformatdefault);
                                                         
                    --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
                    v_term_inst_billing_due_date := to_date(
                                                    pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_bill_due_date  --Billing Due Date
                                                    ),
                                                    pkg_os_constant.dragondateformatdefault);

                    --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
                    v_term_inst_actual_due_date := to_date(
                                                    pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_bill_due_date     --Billing Due Date
                                                     ),
                                                    pkg_os_constant.dragondateformatdefault);

                    v_term_inst_bal_amount := pkg_os_object_io.fn_object_bv_get
                                              (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_term_pymntsch_list(v_term_pymntsch_index),
                                                     gbv_install_bal_amount
                                               );
                    --OSBILLING-7265
                    v_instalment_billed_flag := pkg_os_object_io.fn_object_bv_get
                                                (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_term_pymntsch_list(v_term_pymntsch_index),
                                                       pkg_db_stmt.gbv_SchPayInst_Invoice_TF
                                                );
                                                            
                    if v_session_control.gLogging_Full then
                         pkg_os_logging.sp_log
                         (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Policy Term Installment Withdrawal Due date: '||
                                   v_term_install_withdrwl_date||
                                   ' Policy Term Installment Billing Due date: '||
                                   v_term_inst_billing_due_date||
                                   ' and Transaction Effective date: '||
                                   v_poltrx_eff_date||
                                   ' Preferred payment day: '||
                                   v_preferred_payment_day
                          );
                          
                    end if;
                    --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start

                    --          if ( to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault) > v_poltrx_eff_date
                    --OSBILLING-7265
                    --          if ( substr(to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault),1,8) >= substr(v_poltrx_eff_date,1,8)

                    if (substr(to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault),1,8)
                                 >=
                                 substr(to_char((to_date(v_poltrx_eff_date, pkg_os_constant.DragonDateFormatDefault)
                                 +
                                 nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id, gBilling_EligibleInstalFlag),20)),pkg_os_constant.DragonDateFormatDefault ),1,8)  --OSPRODUCT-1992
                                 And
                                 v_term_inst_bal_amount > 0
                                 )
                        and
                                 --OSPRODUCT-3295 start
                                 (
                                      nvl(v_instalment_billed_flag, gNo) = gNo
                                      or
                                      nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id, gBilling_ExcludeInvoicedInstal),'T') <> 'T'
                                 )
                                 --OSPRODUCT-3295 end

                     --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
                    then
                         begin
                              v_term_inst_new_withdrwl_date := fn_get_next_withdrawal_date
                                        (
                                                in_session_id,
                                                in_transaction_id,
                                                v_term_inst_billing_due_date,
                                                v_preferred_payment_day,
                                                v_master_policy_id  --OSBILING-7265
                                        );

                              if v_session_control.gLogging_Full then
                                   pkg_os_logging.sp_log
                                             (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_procedure_name,
                                                    '...... Old withdrawal date: '||
                                                    v_term_install_withdrwl_date||
                                                    ' and new withdrawal date :'||
                                                    v_term_inst_new_withdrwl_date
                                             );

                              end if;          
                              --
                              -- in case if fn_get_next_witdrawal_date returns null set withdrawal date to billing due date
                              --
                              
                              if v_term_inst_new_withdrwl_date is null then
                                   v_term_inst_new_withdrwl_date := v_term_inst_billing_due_date;
                              end if;

                              --set value to "real" withdrawal date
                              if (in_process_tf = 'T') then
                                   pkg_os_object_io.sp_object_bv_set
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_withdrawal_date,
                                                          to_char(v_term_inst_new_withdrwl_date,pkg_os_constant.dragondateformatdefault)
                                                       );
                                              
                                   pkg_os_object_io.sp_object_bv_set
                                                    (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_term_payer,
                                                            PKG_DB_PAYMENT_ARRANGEMENT.gbv_PTPayerPrefWithdrawalDay,
                                                            to_char(v_term_inst_new_withdrwl_date,'DD')
                                                     ); 
                                                  
                                   /* pkg_os_datamart.sp_datamart_update_row
                                   (
                                          in_session_id,
                                          in_transaction_id,
                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                          v_datamart_tf
                                   ); */                                
                                             
                              else
                                   
                                   pkg_os_object_io.sp_object_bv_set
                                              (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_term_pymntsch_list(v_term_pymntsch_index),
                                                    gbv_inst_temp_withdr_date,
                                                    to_char(v_term_inst_new_withdrwl_date,pkg_os_constant.dragondateformatdefault)
                                              );
                                              
                               --set value to temporary withdrawal date
                                            
                              end if;                              
                         end;
                                    
                    end if;   
                                     
               end if;
                         
               pkg_os_datamart.sp_datamart_update_row           --OSPRODUCT-28491
                                        (
                                               in_session_id,
                                               in_transaction_id,
                                               v_term_pymntsch_list(v_term_pymntsch_index),
                                               v_datamart_tf
                                        ); 
                         
               v_term_pymntsch_index := v_term_pymntsch_list.next( v_term_pymntsch_index );
  
          end loop;
               
     else
          while v_term_pymntsch_index is not null loop
               v_term_install_withdrwl_date := to_date(
                                           pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_withdrawal_date
                                                    ),
                                          pkg_os_constant.dragondateformatdefault);
                                          
               --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
               v_term_inst_billing_due_date := to_date(
                                          pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_bill_due_date  --Billing Due Date
                                                    ),
                                          pkg_os_constant.dragondateformatdefault);


               --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
               v_term_inst_actual_due_date := to_date(
                                          pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_bill_due_date     --Billing Due Date
                                                    ),
                                          pkg_os_constant.dragondateformatdefault);
                                          

               v_term_inst_bal_amount := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                                          gbv_install_bal_amount
                                                    );

               --OSBILLING-7265
               v_instalment_billed_flag := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_term_pymntsch_list(v_term_pymntsch_index),
                                                  pkg_db_stmt.gbv_SchPayInst_Invoice_TF
                                             );
                                             
               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Policy Term Installment Withdrawal Due date: '||
                              v_term_install_withdrwl_date||
                              ' Policy Term Installment Billing Due date: '||
                              v_term_inst_billing_due_date||
                              ' and Transaction Effective date: '||
                              v_poltrx_eff_date||
                              ' Preferred payment day: '||
                              v_preferred_payment_day
                         );
               end if;
                  --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start

                  -- if ( to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault) > v_poltrx_eff_date
                  --OSBILLING-7265
                  --if ( substr(to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault),1,8) >= substr(v_poltrx_eff_date,1,8)

               if (
                       substr(to_char(nvl(v_term_install_withdrwl_date, v_term_inst_billing_due_date),pkg_os_constant.dragondateformatdefault),1,8)
                       >=
                       substr(to_char((to_date(v_poltrx_eff_date, pkg_os_constant.DragonDateFormatDefault)
                       +
                       nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id, gBilling_EligibleInstalFlag),20)),pkg_os_constant.DragonDateFormatDefault ),1,8)  --OSPRODUCT-1992
                       And
                       v_term_inst_bal_amount > 0
                       )
                  and
                    --OSPRODUCT-3295 start
                       (
                            nvl(v_instalment_billed_flag, gNo) = gNo
                            or
                            nvl(pkg_os_product.fn_product_property_get(v_product_id,v_filing_id, gBilling_ExcludeInvoicedInstal),'T') <> 'T'
                       )
                    --OSPRODUCT-3295 end

                    --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
               then
                    begin
                         v_term_inst_new_withdrwl_date := fn_get_next_withdrawal_date
                                                                 (
                                                                        in_session_id,
                                                                         in_transaction_id,
                                                                         v_term_inst_billing_due_date,
                                                                         v_preferred_payment_day,
                                                                         v_master_policy_id  --OSBILING-7265
                                                                 );

                         if v_session_control.gLogging_Full then
                              pkg_os_logging.sp_log
                                   (
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          '...... Old withdrawal date: '||
                                          v_term_install_withdrwl_date||
                                          ' and new withdrawal date :'||
                                          v_term_inst_new_withdrwl_date
                                   );

                         end if;
                    
                         -- in case if fn_get_next_witdrawal_date returns null set withdrawal date to billing due date
                         if v_term_inst_new_withdrwl_date is null then
                              v_term_inst_new_withdrwl_date := v_term_inst_billing_due_date;
                         end if;


                         if (in_process_tf = 'T') then
                              
                              pkg_os_object_io.sp_object_bv_set --set value to "real" withdrawal date

                              (
                                      in_session_id,
                                      in_transaction_id,
                                      v_term_pymntsch_list(v_term_pymntsch_index),
                                      gbv_install_withdrawal_date,
                                      to_char(v_term_inst_new_withdrwl_date,pkg_os_constant.dragondateformatdefault)
                              );

                                   --find term through child - set bv withdrawal date on payer  --OSPRODUCT-19874
                                   --Find child of policyTerm of type termpayer
                              pkg_os_object_search.sp_object_children_of_type_get
                              (
                                        in_session_Id              =>    in_session_id,
                                        in_transaction_id          =>    in_transaction_id,
                                        in_object_id               =>    v_policy_term_id,
                                        in_child_object_type_id    =>    PKG_DB_MULTIPAYER.gObjType_PolicyTermAccPayer,
                                        in_object_list             =>    v_policy_term_payer_list
                              );

                              v_idx_term_payer := v_policy_term_payer_list.first;

                                   --Loop Policy Term Payer to set Withdrawal Day on payer
                              while v_idx_term_payer is not null loop
                                   
                                   if v_session_control.gLogging_Full then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '......Loop Term Payer ID :'||v_policy_term_payer_list(v_idx_term_payer)
                                        );
                                   end if;

                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_term_payer_list(v_idx_term_payer),
                                             PKG_DB_PAYMENT_ARRANGEMENT.gbv_PTPayerPrefWithdrawalDay,
                                             to_char(v_term_inst_new_withdrwl_date,'DD')
                                        );

                                        v_idx_term_payer := v_policy_term_payer_list.next(v_idx_term_payer);
                                             
                              end loop;
                        else
                             --set value to temporary withdrawal date
                             pkg_os_object_io.sp_object_bv_set
                                   (
                                          in_session_id,
                                          in_transaction_id,
                                          v_term_pymntsch_list(v_term_pymntsch_index),
                                          gbv_inst_temp_withdr_date,
                                          to_char(v_term_inst_new_withdrwl_date,pkg_os_constant.dragondateformatdefault)
                                    );

                        end if;
                        

                        pkg_os_datamart.sp_datamart_update_row
                        (
                                     in_session_id,
                                     in_transaction_id,
                                     v_term_pymntsch_list(v_term_pymntsch_index),
                                     v_datamart_tf
                        );
                    end;
                    
               end if;
               
               v_term_pymntsch_index := v_term_pymntsch_list.next( v_term_pymntsch_index );
               
          end loop;
                
     end if;

exception
     when others then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Exception '||
                    sqlerrm(sqlcode)
               );

end sp_payment_withdrawal_update;



--OSBILLING-1798
procedure sp_set_balance_amount
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     v_current_payment_id               in             object.object_id%type
)
as

     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type := pkg_name||'sp_set_balance_amount';
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_scheduled_element_index          number;
     v_balance                          number;
     v_element_balance                  number;
     v_ref_terminst                     object.object_id%type;
     v_creator_trx                      object.object_id%type;
     v_current_trx                      object.object_id%type;
     v_is_included                      number;
     v_commission_type                  object_bv_value.business_variable_value%type;
     v_total_commission                 number;

begin

     v_ref_terminst:= pkg_os_object_io.fn_object_bv_get
                      (
                       in_session_id,
                       in_transaction_id,
                       v_current_payment_id,--v_scheduled_element_list( v_scheduled_element_index ),
                       gbv_ScheduledRefInstallment-- Related installment ref from schedule to term
                       );
     if v_ref_terminst is null
     then
          v_balance := pkg_os_object_io.fn_object_bv_get
                       (
                        in_session_id,
                        in_transaction_id,
                        v_current_payment_id,--v_scheduled_element_list( v_scheduled_element_index ),
                        gbv_invoice_amount_total -- Payment Amount - Total (schedule)
                        );
     else

          v_balance := pkg_os_object_io.fn_object_bv_get
                       (
                        in_session_id,
                        in_transaction_id,
                        v_ref_terminst,
                        gbv_BusinessAmtCalculated --Balance Amount - Calculated (term)
                        );

          pkg_os_object_search.sp_object_children_of_type_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_current_payment_id,
                                   gObjType_ScheduledElement,
                                   v_scheduled_element_list
                              );

          v_scheduled_element_index := v_scheduled_element_list.first;

          while v_scheduled_element_index is not null loop
               v_creator_trx := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_scheduled_element_list( v_scheduled_element_index ),
                                                  gbv_ElementRefCreatorPolTrns --_Reference_Creator PolicyTransaction
                                                  );

               -- OSPRODUCT-1113
               v_current_trx := pkg_os_object_search.fn_object_get_parent_of_type
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_scheduled_element_list( v_scheduled_element_index ),
                                     pkg_os_constant.gobjType_PolicyTransaction--'29705546.29105506.212018.28555404' --_Parent_PolicyTransaction
                                );
                                        
               v_is_included := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_scheduled_element_list( v_scheduled_element_index ),
                                                  31975846 --Include in Payment Schedule TF(element)
                                                  );
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... element id:' || v_scheduled_element_list( v_scheduled_element_index )
                                                 || 'v_creator_trx: '|| v_creator_trx
                                                 || 'v_current_trx: '|| v_current_trx
                                                 || 'v_is_included: '|| v_is_included);
               end if;

               if v_creator_trx = v_current_trx and v_is_included=1
               then
                    v_element_balance := pkg_os_object_io.fn_object_bv_get
                                                              (
                                                               in_session_id,
                                                               in_transaction_id,
                                                               v_scheduled_element_list( v_scheduled_element_index ),
                                                               gbv_element_amount --Element Amount (Element)
                                                              );
                    v_balance := v_balance + v_element_balance;
                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... element id:' || v_scheduled_element_list( v_scheduled_element_index )
                                                 || 'v_element_balance: '|| v_element_balance);

                    end if;


               end if;




               v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

          end loop;


     end if;



     pkg_os_object_io.sp_object_bv_set
                    (
                        in_session_id,
                        in_transaction_id,
                        v_current_payment_id,
                        gbv_sched_balance_amount, --Balance Amount (Schedule)
                       v_balance
                    );

     ----- OSBILLING-3443---- setting commission bv on schedule object---
     v_commission_type   :=   pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_current_payment_id,
                                   '29105506.212018.33996546' --Commission Type
                              );

     --if v_commission_type = 2 --commented OSBILLING-4509
     --then

          v_total_commission  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_current_payment_id,
                                        gbv_SchedCalcCommAmount --Total Commission Amount - Calculated
                                   );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_current_payment_id,
               gbv_SchedCustomCommAmount, --Custom Spread Commission Amount
               v_total_commission
          );

     --end if;
     ----- OSBILLING-3443---- setting commission bv on schedule object---

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Schedule id:' || v_current_payment_id
                             || 'v_balance: '|| v_balance);
     end if;

end sp_set_balance_amount;


procedure sp_validate_comm_attribute
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name                   constant       system_log.program_name%type  :=   pkg_name||'sp_validate_comm_attribute';
     v_session_control                  pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_transaction_id            object.object_id%type;
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;
     v_basis_transaction_id             object.object_id%type;
     v_basis_trx_image_id               object.object_id%type;

     v_new_comm_type                    object_bv_value.business_variable_value%type;
     v_new_comm_percentage              object_bv_value.business_variable_value%type;
     v_new_comm_amount                  number;

     v_prior_comm_type                      object_bv_value.business_variable_value%type;
     v_prior_comm_percentage            object_bv_value.business_variable_value%type;
     v_prior_comm_amount                number;

     v_commission_mismatch              object_bv_value.business_variable_value%type;
     --v_current_payment_plan_id          object.object_id%type;

     --v_new_term                         number;

begin


     v_policy_transaction_id       :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
     v_transaction_type_id         :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
     v_policy_trx_subtype_id       :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, gbv_PolicyTrx_SubType );

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '||||||'
               ||' Validating new commission attributes vs existing commission attribute for policy image: '||in_policy_image_id
               ||' Policy Transaction ID: '||v_policy_transaction_id
               ||' Policy Transaction Type: '||pkg_os_lookup.fn_lookup_list_text_get(PolicyTransactionTypeList, v_transaction_type_id)
          );

     end if;


     v_basis_transaction_id        :=   pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id,v_policy_transaction_id, gbv_PolicyTrx_BasisRefTrx );
     v_basis_trx_image_id          :=   pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id,v_basis_transaction_id, gbv_PolicyTrxRefCoverages );

     v_new_comm_type               :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Comm_Type );
     v_new_comm_percentage         :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Comm_Percentage );
     v_new_comm_amount             :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Comm_Amount );

     v_prior_comm_type             :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_basis_trx_image_id, gbv_PTP_Comm_Type );
     v_prior_comm_percentage       :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_basis_trx_image_id, gbv_PTP_Comm_Percentage );
     v_prior_comm_amount           :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_basis_trx_image_id, gbv_PTP_Comm_Amount );

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' v_new_comm_type : '||v_new_comm_type
               ||' v_new_comm_percentage : '||v_new_comm_percentage
               ||' v_new_comm_amount : '||v_new_comm_amount
               ||' v_prior_comm_type : '||v_prior_comm_type
               ||' v_prior_comm_percentage : '||v_prior_comm_percentage
               ||' v_prior_comm_amount : '||v_prior_comm_amount
          );

     end if;


     if v_new_comm_type <> v_prior_comm_type
     then

          v_commission_mismatch    :=   pkg_os_constant.gBoolean_Yes;

     elsif v_new_comm_type = v_prior_comm_type and v_new_comm_percentage <> v_prior_comm_percentage
     then

          v_commission_mismatch    :=   pkg_os_constant.gBoolean_Yes;

     /*elsif v_new_comm_type = v_prior_comm_type and v_new_comm_percentage = v_prior_comm_percentage and nvl(v_new_comm_amount,0) = 0
     then

          v_commission_mismatch    :=   pkg_os_constant.gBoolean_Yes;*/


     else
          v_commission_mismatch    :=   pkg_os_constant.gBoolean_No;

     end if;


     if v_session_control.gLogging_Full
     then

         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' v_commission_mismatch : '||v_commission_mismatch
          );

     end if;


     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_policy_transaction_id,
          gbv_PT_Comm_Mismatch,
          v_commission_mismatch
     );

     if v_commission_mismatch = pkg_os_constant.gBoolean_Yes
     then

          io_action_outcome_id := gOutcome_Comm_Mismatch;

     else

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;


     /*if v_policy_trx_subtype_id = gCommissionadj
     then

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     end if;*/


end sp_validate_comm_attribute;



procedure sp_modify_comm_elements
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name                   constant       system_log.program_name%type  :=   pkg_name||'sp_modify_comm_elements';
     v_session_control                  pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_transaction_id            object.object_id%type;
     v_transaction_type_id              pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;

     v_comm_type                        object_bv_value.business_variable_value%type;
     v_comm_amount                      number;

     v_chosen_payment_plan_id           object.object_id%type;
     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_payment_index          number;
     v_scheduled_installment_num        object_bv_value.business_variable_value%type;
     v_scheduled_actual_due_date        object_bv_value.business_variable_value%type;
     v_scheduled_element_list           object_tt := new object_tt();
     v_scheduled_element_index          number;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_coverage_object_id               object.object_id%type;
     v_element_amount                   float;
     v_new_schedule_comm_amount         number;
     v_cal_schedule_comm_amount         number;
     v_billing_element_md_row           db_billing_element%rowtype;
     v_split_billing_flag               object_bv_value.business_variable_value%type;

begin

     v_policy_transaction_id  :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
     v_transaction_type_id    :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
     v_policy_trx_subtype_id  :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, gbv_PolicyTrx_SubType );

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '||||||'
               ||' Modifying Commission elements for policy image id: '||in_policy_image_id
               ||' Policy Transaction ID: '||v_policy_transaction_id
               ||' Policy Transaction Type: '||pkg_os_lookup.fn_lookup_list_text_get(PolicyTransactionTypeList, v_transaction_type_id)
          );

     end if;


     v_chosen_payment_plan_id :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PolicyRefChosenPlan );
     v_comm_type              :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Comm_Type );
     v_comm_amount            :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PTP_Comm_Amount );
     v_split_billing_flag     :=   pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_policy_image_id, gbv_PolicySplitBillingFlag);

     v_scheduled_payment_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_chosen_payment_plan_id,
          gObjType_ScheduledPayment,
          v_scheduled_payment_list,
          gbv_actual_due_date,
          false  ,
          gRule_Installment
     );

     if v_session_control.gLogging_Full
     then

         pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of PaymentPlanScheduledPayment objects found:'||v_scheduled_payment_list.count
               ||' for payment plan id : '||v_chosen_payment_plan_id
               ||' v_comm_type : '||v_comm_type
               ||' v_comm_amount : '||v_comm_amount
          );

     end if;


     if v_scheduled_payment_list.count > 0
     then

          v_scheduled_payment_index     :=   v_scheduled_payment_list.first;

          while v_scheduled_payment_index is not null loop

               v_scheduled_installment_num   :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_scheduled_payment_list(v_scheduled_payment_index),
                                                       gbv_ScheduledPayment_num
                                                  );

               v_scheduled_actual_due_date   :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_scheduled_payment_list(v_scheduled_payment_index),
                                                       gbv_actual_due_date
                                                   );

               v_new_schedule_comm_amount    :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_scheduled_payment_list(v_scheduled_payment_index),
                                                       gbv_SchedCustomCommAmount
                                                  );

               v_cal_schedule_comm_amount    :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_scheduled_payment_list(v_scheduled_payment_index),
                                                       gbv_SchedCalcCommAmount
                                                  );

               if /*v_comm_type = gCommissionType_Flat and*/ v_new_schedule_comm_amount <> v_cal_schedule_comm_amount--commented OSBILLING-4509
               then

                    v_scheduled_element_list.delete;

                    pkg_os_object_search.sp_object_with_attribute_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_scheduled_payment_list(v_scheduled_payment_index),
                         gObjType_ScheduledElement,
                         gbv_ElementCategory,      --- Category
                         pkg_db_object.gFItem_Cat_Commission,
                         v_scheduled_element_list
                    );

                    if v_session_control.gLogging_Full
                    then
                        pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... For PaymentPlanScheduledPayment Object ID: '
                              ||v_scheduled_payment_list(v_scheduled_payment_index)
                              ||', number of commission PaymentPlanScheduledPaymentElement objects found: '
                              ||v_scheduled_element_list.count
                         );
                    end if;


                    if v_scheduled_element_list.count > 0
                    then

                         v_scheduled_element_index := v_scheduled_element_list.first;

                         while v_scheduled_element_index is not null
                         loop

                              v_billing_element_md_id  :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index).object_id,
                                                                 gbv_billing_element_id
                                                            );

                              v_coverage_object_id     :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index).object_id,
                                                                 gbv_ScheduledElementRefAsset
                                                            );

                              v_billing_element_md_row :=   pkg_db_payplan_modify.fn_billing_element_row
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_billing_element_md_id
                                                            );

                              v_element_amount         :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index).object_id,
                                                                 gbv_element_amount
                                                            );

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_scheduled_element_list(v_scheduled_element_index).object_id,
                                   gbv_ElementValidTF,
                                   pkg_os_constant.gBoolean_No
                              );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Updating Cache using ScheduledPaymentElement ID: '||v_scheduled_element_list(v_scheduled_element_index).object_id
                                        ||' Amount:'||v_element_amount
                                   );

                              end if;


                              v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                         end loop;


                    end if;


                    ---- now create new commission element with new amount for flat commission
                    sp_schedule_element_create
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_transaction_id,
                         v_scheduled_payment_list(v_scheduled_payment_index),
                         v_coverage_object_id,
                         v_billing_element_md_row,
                         v_new_schedule_comm_amount,
                         v_split_billing_flag
                    );

               end if; -- if v_scheduled_element_list.count > 0

               v_scheduled_payment_index     :=     v_scheduled_payment_list.next(v_scheduled_payment_index);

          end loop;


     end if;


     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_modify_comm_elements;

--OSBILLING-4920
procedure sp_recreate_deferred_stubs
     (
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_olg_payplan_id                 in             object.object_id%type,
     in_new_payplan_id               in               object.object_id%type
)
as

     v_procedure_name                   constant       system_log.program_name%type  :=   pkg_name||'sp_recreate_deferred_stubs';
     v_session_control                  pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_deferred_stub_list               pkg_os_object.t_object_list;
     v_elements_list                    pkg_os_object.t_object_list;
     v_deferred_stub_index              number;
     v_elemets_index                    number;
     v_installment_type                 number;
     v_stub_number                      number;
     v_deferred_prem_stub_id            object.object_id%type;
     v_debit_billing_account_id         object.object_id%type;
     v_credit_billing_account_id        object.object_id%type;
     v_coverage_object_id               object.object_id%type;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_billing_element_md_row           db_billing_element%rowtype;
     v_coverage_object_type_id          pc_coverage.pc_coverage_object_type_id%type;
     v_ptp_id                           object.object_id%type := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_new_payplan_id );
     v_pol_trx_id                       object.object_id%type := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_ptp_id );

begin

               v_deferred_stub_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                   in_session_id,
                   in_transaction_id,
                   in_olg_payplan_id,
                   gObjType_ScheduledPayment,
                   v_deferred_stub_list,
                   pkg_db_billing_modify.gbv_installement_no_calc
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '... Number of PaymentPlanScheduledPayment objects found:'||v_deferred_stub_list.count
                    );

               end if;


               v_deferred_stub_index := v_deferred_stub_list.first;

               while v_deferred_stub_index is not null
               loop

                    v_installment_type  :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_deferred_stub_list(v_deferred_stub_index),
                                                  gbv_scheduled_payment_type
                                             );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '... Considering Scheduled Payment ID: '||v_deferred_stub_list(v_deferred_stub_index)
                             ||', Installment Type: '||v_installment_type
                         );

                    end if;

                    if v_installment_type = gScheduledPayType_Stub
                    then

                         v_stub_number  :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_deferred_stub_list(v_deferred_stub_index),
                                                  gbv_ScheduledPayment_num
                                             );

                         if v_stub_number = gILRDeferred_Premium_inst      -- 100
                         then

                              pkg_os_object_copy.sp_object_duplicate
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_deferred_stub_list(v_deferred_stub_index),
                                   v_deferred_prem_stub_id,
                                   'F' --OSPRODUCT-7721
                              );

                              pkg_os_object.sp_object_parent_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_deferred_prem_stub_id,
                                   in_new_payplan_id
                              );

                              pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_new_payplan_id, gbv_PaymentPlanCurrentStub, v_deferred_prem_stub_id );

                              v_elements_list.delete;

                              pkg_os_object_search.sp_object_children_of_type_get
                              (
                                  in_session_id,
                                  in_transaction_id,
                                  v_deferred_prem_stub_id,
                                  gObjType_ScheduledElement,
                                  v_elements_list
                              );

                              v_elemets_index  := v_elements_list.first;

                              while v_elemets_index is not null
                                   loop

                                   pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_elements_list(v_elemets_index), gbv_ElementRefCreatorPolTrns, v_pol_trx_id );

                                   v_billing_element_md_id   :=    pkg_os_object_io.fn_object_bv_get
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           v_elements_list(v_elemets_index),
                                                                           gbv_billing_element_id
                                                                      );

                                   v_billing_element_md_row     :=   fn_billing_element_row
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           v_billing_element_md_id
                                                                      );
                                    begin
                                    select pc_coverage_object_type_id
                                    into v_coverage_object_type_id
                                      from pc_coverage
                                     where pc_coverage_id =
                                           (select max(pc_coverage_id)
                                              from db_billing_element_map
                                             where db_billing_element_id = v_billing_element_md_id);
                                    exception
                                        when others then
                                             v_coverage_object_type_id := null;
                                   end;


                                   if v_coverage_object_type_id = gObjTypePolicyAll then

                                      v_coverage_object_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjTypePolicyAll);

                                   elsif v_coverage_object_type_id = pkg_db_object.gObjTypeGBAssetItem then

                                      v_coverage_object_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id, in_transaction_id, v_ptp_id, pkg_db_object.gObjTypeGBAssetItem, pkg_db_object.gbv_GBAssetItem_SubCategory, 61446 /*ILR Deferred Premium*/);

                                   end if;

                                   if v_session_control.gLogging_Full
                                        then
                                             pkg_os_logging.sp_log
                                             (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_procedure_name,
                                                 '... v_coverage_object_type_id :- ' || v_coverage_object_type_id ||
                                                 '... v_coverage_object_id :- ' || v_coverage_object_id ||
                                                 '... v_billing_element_md_id :- ' || v_billing_element_md_id ||
                                                 '... Payment Element Id :- ' || v_elements_list(v_elemets_index)
                                             );
                                   end if;

                                   if v_coverage_object_id is not null then

                                             -- Reset the Debit Billing Account
                                             if v_billing_element_md_row.rule_to_debit_billing_account is not null
                                                  then
                                                  v_debit_billing_account_id := pkg_os_exp.fn_evaluate_expression
                                                                                (
                                                                                     in_session_id,
                                                                                     in_transaction_id,
                                                                                     v_coverage_object_id,
                                                                                     v_billing_element_md_row.rule_to_debit_billing_account
                                                                                );
                                             else
                                                  v_debit_billing_account_id := pkg_os_object_io.fn_object_bv_path_get
                                                                                  (
                                                                                          in_session_id,
                                                                                          in_transaction_id,
                                                                                          v_coverage_object_id,
                                                                                          v_billing_element_md_row.debit_billing_account_path
                                                                                  );
                                             end if;

                                             -- Reset the Credit Billing Account
                                             if v_billing_element_md_row.rule_to_credit_billing_account is not null
                                                  then

                                                  v_credit_billing_account_id := pkg_os_exp.fn_evaluate_expression
                                                                                 (
                                                                                     in_session_id,
                                                                                     in_transaction_id,
                                                                                     v_coverage_object_id,
                                                                                     v_billing_element_md_row.rule_to_credit_billing_account
                                                                                 );
                                             else
                                                  v_credit_billing_account_id := pkg_os_object_io.fn_object_bv_path_get
                                                                                  (
                                                                                          in_session_id,
                                                                                          in_transaction_id,
                                                                                          v_coverage_object_id,
                                                                                          v_billing_element_md_row.credit_billing_account_path
                                                                                  );
                                             end if;

                                             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_elements_list(v_elemets_index), gbv_ScheduledElementRefAsset, v_coverage_object_id);
                                             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_elements_list(v_elemets_index), gbv_ElementRefCreditBillAcc, v_credit_billing_account_id);
                                             pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_elements_list(v_elemets_index), gbv_ElementRefDebitBillAcc, v_debit_billing_account_id);

                                   end if;
                                   v_elemets_index := v_elements_list.next(v_elemets_index);
                              end loop;

                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                       in_session_id,
                                       in_transaction_id,
                                       v_procedure_name,
                                       '... Created a duplicate Deferred Premium Stub ID :'||v_deferred_prem_stub_id
                                       ||', and set the parent as the modified Payment Plan ID: '||in_new_payplan_id
                                   );
                              end if;
                         end if;
                    end if;
                    v_deferred_stub_index := v_deferred_stub_list.next(v_deferred_stub_index);
               end loop;

end sp_recreate_deferred_stubs;

procedure sp_ba_payment_withdrawal_upd
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     in_object_cache                    in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list                    in out         pkg_os_message.t_message_list, --OSPRODUCT-30875
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_ba_payment_withdrawal_upd';
     v_policies_block_id                constant number := 1391046;--1391046;
     v_mini_action_id                   constant number := 1461346;
     v_billing_acc_id                   object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);
     v_list_object_list                 pkg_os_object.t_object_list    := pkg_os_object.gnull_object_list;
     v_list_object_index                number;

     v_policy_object_list               pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_object_index                     number;
     v_selected_items_cnt               number    :=   0;
     v_policy_id                        object.object_id%type;

     v_fi_trx_id                        object.object_id%type;
     v_action_id                        action.action_id%type;
     v_action_object_id                 object.object_id%type;
     v_policy_transaction_id            object.object_id%type;
     v_policy_term_id                   object.object_id%type;
     v_preferred_withdrawal_day         number;
     type t_policy_term_tab             is table of object.object_id%type index by varchar2(500);
     v_policy_term_list                 t_policy_term_tab;
     v_policy_term_index                number;
     v_datamart_tf                      char(1) := 'T';
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_policy_transaction_list          pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
	 --OSPRODUCT-30875
	 v_page_action                      constant number := 1455746;  
	 v_message                        object_bv_value.business_variable_value%type;       
     v_policy_number                   object_bv_value.business_variable_value%type; 
     v_billing_account_id             object.object_id%type;
     v_new_object_id                  object.object_id%type;


begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Updating withdrawal date for policies under Billing Account: ' || v_billing_acc_id ||
               '.. Billing Account Transaction Set:' || in_action_object_id
          );

     end if;

     -- Get the list objects on the page

     v_list_object_list.delete;
     pkg_os_object_cache_search.sp_obj_cache_children_get
     (
          in_session_id,
          in_transaction_id,
          in_object_cache,
          in_action_object_id,
          pkg_os_constant.gobjType_List,
          v_list_object_list
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'List object found.. ' || v_list_object_list.count
          );

     end if;

     if v_list_object_list.count > 0
     then

          v_list_object_index := v_list_object_list.first;

          while v_list_object_index is not null
          loop

               if pkg_os_object_io.fn_object_bv_get
                  (
                       in_session_id,
                       in_transaction_id,
                       v_list_object_list(v_list_object_index),
                       pkg_os_constant_bv.gbv_ListLayoutBlockID
                  ) = v_policies_block_id
               then

                    -- Get the select policies from the policies block
                    pkg_db_object.sp_list_selected_objects_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_list_object_list(v_list_object_index),
                         in_object_cache,
                         v_policy_object_list
                    );

                    if v_policy_object_list.count = 0 then

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......... User did not make any selection from the list.'
                              );
                         end if;

                         io_action_outcome_id := 35546;  -- no record selected
                         return;

                    else

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Total Policy selected: ' || v_policy_object_list.count
                                   );

                         end if;

                         v_object_index := v_policy_object_list.first;
                         v_preferred_withdrawal_day := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_action_object_id, gbv_bats_pref_pay_day );

                         while v_object_index is not null
                         loop
						     
							 ----OSPRODUCT-30875
                              begin
                                   
                                   v_policy_id := v_policy_object_list(v_object_index);
                                    begin
                                        select 
                                        p.policy_number
                                   into
                                        v_policy_number
                                   from
                                        dragon_policy p
                                   where
                                        p.policy_id = v_policy_id;
                                        
                                  exception
                                       when no_data_found then
                         v_policy_number := v_policy_id;
                                   
                            end;
                             if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Policy ID: ' || v_policy_number
                    );

                              end if;
                              
                              ----OSPRODUCT-30875

                              -- Create and set up new PT object under each policy selected
                              pkg_db_object.sp_process_action_mini
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_mini_action_id,
                                   v_policy_id  ,
                                   in_object_cache,
								   io_message_list, --OSPRODUCT-30875
                                   io_action_outcome_id,
								   v_page_action,-- OSPRODUCT-30875
                                   in_action_object_id, --OSPRODUCT-30875
                                   v_action_id,
                                   v_action_object_id
                              );
                              -- Create and set up new PT/PTP object under each policy selected (initiate the trx)
                              -- Get the new PT object
                              v_policy_transaction_id := pkg_os_object_io.fn_object_bv_get
                                                         (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              in_session_id,
                                                              pkg_os_constant_bv.gbv_SessionNewObject
                                                         );

                              -- Set the associated bats id for the new PT object
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet, --31866546
                                   in_action_object_id
                              );
							  
							  --OSPRODUCT-30875 START
                                   if pkg_os_object.fn_object_type_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_transaction_id
                                        ) <> 629 --PT 
                                   then

                                        if v_session_control.gLogging_Full then 

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'Change Due Date transaction terminated for policy: ' || v_policy_id || 'and' ||v_policy_number
                                             );
                                        
                                        end if; 

                                        io_action_outcome_id := 76646; -- PTPNotCreated

                                        v_message := 'New transaction not allowed for policy: '|| v_policy_number; -- OSPRODUCT-9879

                                        --v_message := 'There can be an unprocessed Transaction or a future effective transaction on the policy. A new transaction cannot be processed. '; --OSPRODUCT-9870


                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_billing_account_id,
                                             pkg_db_constant.gbv_BAResponsMsg, --- 32835148,
                                             v_message
                                        );

                                        return;

                                   end if;
                                   --OSPRODUCT-30875 end

                              -- Get the policy term id
                              v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_policy_transaction_id,
                                                       gbv_PolicyTrxRefPolicyTerm  --Belongs To reference
                                                  );

                              -- Set the preferred withdrawal day for the term
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_term_id,
                                   gbv_PolicyTerm_pref_PayDay,
                                   v_preferred_withdrawal_day
                              );

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                       in_session_id,
                                       in_transaction_id,
                                       v_procedure_name,
                                       '.. Preferred Withdrawal Day: '|| v_preferred_withdrawal_day ||
                                       '.. Set for term: ' || v_policy_term_id
                                   );

                              end if;

                              -- Create FITrnsaction object under BATS
                              pkg_db_object.sp_fitransaction_create
                              (
                                   in_session_id                      =>    in_session_id,
                                   in_transaction_id                  =>    in_transaction_id,
                                   in_fitrx_parent_fitrxset_id        =>    in_action_object_id,
                                   out_fitransaction_id               =>    v_fi_trx_id,
                                   in_fitrx_type                      =>    gFITrxType_WithdrawalDt_Update,
                                   in_fitrx_ref_associatedpolicy      =>    v_policy_id,
                                   in_fitrx_ref_associatedpoltrx      =>    v_policy_transaction_id,
                                   in_fitrx_ref_actionpolicy          =>    v_policy_id,
                                   in_fitrx_ref_actionpoltrx          =>    v_policy_transaction_id,
                                   in_fitrx_effective_date            =>    to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_action_object_id), pkg_os_constant.DragonDateFormatDefault ),
                                   in_fitrx_object_state              =>    pkg_os_constant.gObjState_Created

                              );

                              -- Refresh the new withdrawal date
                              sp_payment_withdrawal_update
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   'F',
                                   v_billing_acc_id --OSPRODUCT-28491
                              );
							  
							  -- get the session new object
                    
                                  --OSPRODUCT-30875 begin   
                            exception
                                 
                                 when others then
                                      v_message := 'New transaction not allowed for policy: '|| v_policy_number || '. Please refer above message for details.'; /*OSPRODUCT-3877*/

                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_billing_acc_id,
                                             pkg_db_constant.gbv_BAResponsMsg, --- 32835148,
                                             v_message
                                        );
                                   
                            end;
                            --OSPRODUCT-30875 end

                              v_object_index := v_policy_object_list.next( v_object_index );

                         end loop;

                    end if;

                    --io_action_outcome_id := pkg_os_constant.gOutcome_OK;

               end if;

               v_list_object_index := v_list_object_list.next(v_list_object_index);

          end loop;

     end if; -- if able to find the list ...

end sp_ba_payment_withdrawal_upd;

procedure sp_ba_pmnt_withdrawal_process
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     in_object_cache                    in out nocopy  pkg_os_object_cache.t_object_cache,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_ba_payment_withdrawal_process';

     v_fitransaction_list               pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_fitransaction_index              number;

     v_policy_id                        object.object_id%type;
     v_policy_transaction_id            object.object_id%type;

     v_mini_action_id                   constant number := 1278848;--OSPRODUCT-4330
     v_action_id                        action.action_id%type;
     v_action_object_id                 object.object_id%type;
     v_billing_acc_id                   object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id,   in_action_object_id);--OSPRODUCT-28491
     v_datamart_tf                      char(1):= 'T';  --OSPRODUCT-28491

begin

     v_fitransaction_list.delete;

     -- Get the list of FITransacation object under the BATS
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_FITransaction,
          v_fitransaction_list
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '.. Policy Transaction Count: ' || v_fitransaction_list.count
          );

     end if;

     v_fitransaction_index := v_fitransaction_list.first;

     while v_fitransaction_index is not null loop

          v_policy_transaction_id :=  pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_fitransaction_list(v_fitransaction_index),
                                           pkg_db_billing.gbv_FITrxRefPolicyTxn --29744046 ASSOCIATED policy transaction
                                      );

          v_policy_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_fitransaction_list(v_fitransaction_index),
                                           pkg_db_billing.gbv_FITrxRefPolicy --29721146 associated policy
                                      );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   'Processing Policy ID: ' || v_policy_id ||
                   'Policy Transaction ID: ' || v_policy_transaction_id ||
                   'V_billing_acc_id: ' || v_billing_acc_id 
               );

          end if;

          -- Process change withdrawal date for the PT object
          sp_payment_withdrawal_update
          (
               in_session_id,
               in_transaction_id,
               v_policy_transaction_id,
               'T',
               v_billing_acc_id --OSPRODUCT-28491
          );

          -- Create and set up new PT object under each policy selected
          pkg_db_object.sp_process_action_mini
          (
               in_session_id,
               in_transaction_id,
               v_mini_action_id,
               v_policy_transaction_id  ,
               in_object_cache,
               io_action_outcome_id,
               v_action_id,
               v_action_object_id
          );
         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitransaction_list(v_fitransaction_index),
                                            pkg_os_constant_bv.gbv_GenObjObjectState, pkg_db_object.gfitrxstatus_processed);
                                            
         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_fitransaction_list(v_fitransaction_index),
                                            29708446, to_char( pkg_os_time.fn_os_sysdate( 
                                                                         in_session_id, in_transaction_id, in_action_object_id),
                                                                         pkg_os_constant.DragonDateFormatDefault ));
                                                 
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitransaction_list(v_fitransaction_index), v_datamart_tf);  --OSPRODUCT-28491
 
          v_fitransaction_index := v_fitransaction_list.next( v_fitransaction_index );

     end loop;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_ba_pmnt_withdrawal_process;

procedure sp_ba_pmnt_withdrawal_exit
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     in_delete_action_object_tf         in             char default 'T'
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_ba_payment_withdrawal_exit';

     v_fitransaction_list               pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_fitransaction_index              number;

     v_policy_id                        object.object_id%type;
     v_policy_transaction_id            object.object_id%type;
     v_policy_term_id                   object.object_id%type;

     v_billing_acc_id                   object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

begin

     v_fitransaction_list.delete;

     -- Get the list of FITransacation object under the BATS
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_FITransaction,
          v_fitransaction_list
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '.. Policy Transaction Count:' || v_fitransaction_list.count
          );

     end if;

     if v_fitransaction_list.count > 0 then

          v_fitransaction_index := v_fitransaction_list.first;

          -- Delete the associated PT object under each FITransaction object
          while v_fitransaction_index is not null loop

               v_policy_transaction_id :=  pkg_os_object_io.fn_object_bv_get
                                           (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fitransaction_list(v_fitransaction_index),
                                             29744046  -- ASSOCIATED policy transaction
                                           );

               v_policy_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                             in_session_id,
                                             in_transaction_id,
                                             v_fitransaction_list(v_fitransaction_index),
                                             29721146  -- associated policy
                                           );

               -- Get the policy term id
               v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id,
                                        gbv_PolicyTrxRefPolicyTerm  --Belongs To reference
                                   );

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_term_id,
                    gbv_PolicyTerm_pref_PayDay,
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_term_id,
                         32853640  --Previous preferred day
                    )
               );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        'Deleting Policy Transaction ID: ' || v_policy_transaction_id ||
                        '.. Policy ID:' || v_policy_id
                    );

               end if;

               pkg_os_object.sp_object_delete
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_id,
                    v_policy_transaction_id,
                    pkg_os_constant.gObjType_PolicyTransaction
               );

               pkg_os_object.sp_object_delete
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_object_id,
                    v_fitransaction_list(v_fitransaction_index),
                    pkg_db_object.gObjType_FITransaction
               );

               v_fitransaction_index := v_fitransaction_list.next( v_fitransaction_index );

          end loop;

     end if;

     if in_delete_action_object_tf = 'T' then

          pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               v_billing_acc_id,
               in_action_object_id,
               gObjType_BillingAccount
          );

     end if;

     --io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_ba_pmnt_withdrawal_exit;

procedure sp_refresh_ba_schedule
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_id              in             object.object_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_refresh_ba_schedule';
     v_policy_current_term_id           object.object_id%type;
     v_most_recent_ptp_id               object.object_id%type;
     v_pt_trx_id                        object.object_id%type;
     v_policy_id                        object.object_id%type;
     v_mp_enabled_tf                    char(1);
     v_entity_id                        object.object_id%type;

begin

     -- generate the consolidated schedules
     for v_policy in (select policy_id from dragon_policy where responsible_billing_account = in_billing_account_id) loop
         
         v_policy_id := v_policy.policy_id;
         v_mp_enabled_tf := null;
         v_most_recent_ptp_id := null;
         
         --select instr(v_selected_policy, v_policy_id) into v_pos from dual;         
         if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..Regenerating the consolidated schedule for policy id: ' || v_policy_id
               );

         end if;
         
         if v_policy_id is not null then
              
              v_policy_current_term_id := pkg_db_functions.fn_get_policy_current_term
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id
                                           );              
              
              -- get the most recent functional trx
              select nvl(max(pt.policy_trx_id), 0)
                into v_pt_trx_id
                from dragon_policy_trx pt
               where pt.policy_id = v_policy_id
                 and pt.policy_term_id = v_policy_current_term_id
                 and (
                           (
                                pt.policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_NewBusiness -- 9
                                and
                                pkg_os_object.fn_object_state_in_set_tf (pt.policy_trx_object_state_id, pkg_cs_functions.g_ObjStateSet_PrcessedPending) = 'T'
                           )
                           or
                           (
                                pt.policy_trx_object_state_id  = pkg_os_policy_transaction.gState_PolicyTrxProcessed
                                and
                                pkg_os_policy_transaction_type.fn_transaction_type_in_set (policy_trx_type_id, pkg_cs_functions.g_PdTrxSet_All_Non_Floating  ) = 'T' --7846
                           )
                      );

              v_most_recent_ptp_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                            in_session_id,
                                            in_transaction_id,
                                            v_pt_trx_id,
                                            212318 -- Coverage
                                      );
                                      
              v_mp_enabled_tf := pkg_db_multipayer.fn_multipayer_mode
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_most_recent_ptp_id
                                 );
                                 
              if v_session_control.gLogging_Full then

                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '..Current term ID: ' || v_policy_current_term_id ||
                        '..MP enabled? '      || v_mp_enabled_tf     
                   );

              end if;
                                      
              -- OSPRODUCT-2442
              if v_mp_enabled_tf = 1 then

                    -- Get the entity
                    v_entity_id := pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billing_account_id
                                   );

                    -- Get the payer
                    v_most_recent_ptp_id := pkg_os_object_search.fn_object_with_attribute_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_most_recent_ptp_id,
                                                 pkg_db_constant.gobjType_PTPPayer,
                                                 pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr,
                                                 v_entity_id
                                            );

               end if;
               
               if v_session_control.gLogging_Full then

                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '..Action object id: ' || v_most_recent_ptp_id    
                   );

               end if;
               
               if v_most_recent_ptp_id is not null then
               
                    sp_ba_sched_payment_generate
                    (
                         in_session_id,
                         in_transaction_id,
                         v_most_recent_ptp_id
                    );
               
               end if;
         
         end if;
         
     end loop;
     
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          33013948,
          null
     );
     
end sp_refresh_ba_schedule;

procedure sp_ba_change_payplan_trx_setup
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     in_object_cache                    in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list                    in out         pkg_os_message.t_message_list,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_session_control                pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                 constant system_log.program_name%type   := pkg_name||'sp_ba_change_payplan_trx_setup';
     v_rule_exec_type                 number(12) ;

     --v_policy_object_list           pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_object_index                   number;
     v_policy_object_list             pkg_os_token.t_string_table;
     v_new_object_id                  object.object_id%type;    

     v_policy_id                      object.object_id%type;
     
     out_action_id                    action.action_id%type;
     out_action_object_id             object.object_id%type;

     v_billing_account_id             object.object_id%type;
     v_selected_policy                object_bv_value.business_variable_value%type;
     v_message                        object_bv_value.business_variable_value%type;       /*OSPRODUCT-3877*/
     v_policy_number                  object_bv_value.business_variable_value%type;       /*OSPRODUCT-3877*/
     v_is_valid_payer_tf              number;                                             /*OSPRODUCT-3536*/
     v_multipayer_mode_tf             boolean := FALSE;                                   /*OSPRODUCT-3536*/
     v_policy_term_id                 object.object_id%type;                              /*OSPRODUCT-3536*/
     v_policy_term_payer_id           dragon_policy_term_payer.policy_term_payer_id%type; /*OSPRODUCT-3536*/
     v_StartAction                    constant action.action_id%type := 1492746;          /*OSPRODUCT-3536*/
     v_contextaction                  constant action.action_id%type := 1492446;          /*OSPRODUCT-3536*/
     
     v_refresh_consolidated_sched     char(1); 
     
     
begin

     v_rule_exec_type := pkg_os_constant.gActiRuleTime_Pre;


     v_billing_account_id := pkg_os_object.fn_object_parent_get
                            (
                                  in_session_id,
                                  in_transaction_id,
                                  in_action_object_id
                            );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Processing change payment plan transaction for policies under Billing Account: ' || v_billing_account_id ||
               '.. Billing Account Transaction Set:' || in_action_object_id
          );

     end if;

     v_selected_policy := pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               v_billing_account_id,
                               34228046 -- List Selected Objects
                          );
                           
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Billing Account: ' || v_billing_account_id ||
               'Selected Policies: ' || v_selected_policy
          );

     end if;

     pkg_os_token.sp_tokenize_string(v_selected_policy, ',' , v_policy_object_list);

     if v_policy_object_list.count = 0 then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... User did not make any selection from the list.'
               );
          end if;

          io_action_outcome_id := 35546;  -- no record selected
          
          return;

     else

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Total Policy selected: ' || v_policy_object_list.count
               );

          end if;

          v_object_index := v_policy_object_list.first;

          while v_object_index is not null 
          
          loop

               v_policy_id := v_policy_object_list(v_object_index);
			
			-- UTPRODUCT-4270
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id ,gbv_RefObjectOfInterest, in_action_object_id ) ;
               
               v_policy_term_payer_id := Null;
               
               v_is_valid_payer_tf := Null;
               
               begin
                              
                    select 
                         p.policy_number
                    into
                         v_policy_number
                    from
                         dragon_policy p
                    where
                         p.policy_id = v_policy_id;
                                   
               exception
                              
                    when no_data_found then
                         v_policy_number := v_policy_id;
                                   
               end;
               
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Policy ID: ' || v_policy_number
                    );

               end if;
                 
               v_multipayer_mode_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                       (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id
                                       );
                                       
               if v_multipayer_mode_tf = TRUE then
                    
                    v_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id
                                        );
                                        
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Policy Term ID: ' || v_policy_term_id
                         );

                    end if;
                    
                    -- dragon_policy_term_payer
                    begin
                         select
                              policy_term_payer_id
                         into 
                              v_policy_term_payer_id
                         from
                              dragon_policy_term_payer
                         where
                              payer_billing_account_id = v_billing_account_id
                         and 
                              policy_term_id = v_policy_term_id;  
                              
                         v_is_valid_payer_tf :=  pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_policy_term_payer_id,
                                                      gbv_Is_valid_payer_tf --32993324 -- is_valid_payer_tf
                                                 );        
                    
                    exception
                         
                         when others then
                              null;
                         
                    end;
                        
                    if v_policy_term_payer_id is null or v_is_valid_payer_tf = gBooleanFalse then 
                    
                         io_action_outcome_id := 76646; -- PTPNotCreated
                              
                         v_message := 'Payer not found associated with current billing account for policy no: '|| v_policy_number;
                                     
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_account_id,
                              pkg_db_constant.gbv_BAResponsMsg, --32835148, 
                              v_message
                         );
                                                                     
                         return;
                    
                    end if;       
                                                                
               end if;

               begin
                    
                    -- Create and set up new PT/PTP object under each policy selected (initiate the trx)
                    -- Execute the same workflow that is executed for change payplan trx for single policy
                    pkg_db_object.sp_process_action_mini
                    (
                         in_session_id,
                         in_transaction_id,
                         v_StartAction, -- 1492746,
                         v_policy_id  ,
                         in_object_cache,
                         io_message_list, /*OSPRODUCT-3877*/
                         io_action_outcome_id,
                         v_ContextAction, --1492446,
                         in_action_object_id,
                         out_action_id,
                         out_action_object_id
                    );

                    -- get the session new object
                    v_new_object_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_session_id,
                                            pkg_os_constant_bv.gbv_SessionNewObject
                                       );

                    if pkg_os_object.fn_object_type_get 
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_new_object_id
                         ) <> 2276904 
                    then
                           
                         if v_session_control.gLogging_Full then --- OSPRODUCT-25901

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Change Pay Plan transaction terminated for policy: ' || v_policy_id
                              );
                         
                         end if; --- OSPRODUCT-25901

                         io_action_outcome_id := 76646; -- PTPNotCreated
                           
                         v_message := 'New transaction not allowed for policy: '|| v_policy_number; -- OSPRODUCT-9879
                         
                         --v_message := 'There can be an unprocessed Transaction or a future effective transaction on the policy. A new transaction cannot be processed. '; --OSPRODUCT-9870


                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_account_id,
                              pkg_db_constant.gbv_BAResponsMsg, --- 32835148,
                              v_message
                         );

                         return;

                    end if;

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'New Object: ' || v_new_object_id ||
                              'Object Type ID: ' || pkg_os_object.fn_object_type_get 
                                                    (
                                                         in_session_id, 
                                                         in_transaction_id, 
                                                         v_new_object_id
                                                    )
                         );

                    end if;

               exception

                    when others then
                        
                         v_message := 'New transaction not allowed for policy: '|| v_policy_number || '. Please refer above message for details.'; /*OSPRODUCT-3877*/
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_account_id,
                              pkg_db_constant.gbv_BAResponsMsg, --- 32835148,
                              v_message
                         );
                         
                         /*v_policy_transaction_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         in_session_id,
                                                         pkg_os_constant_bv.gbv_SessionNewObject
                                                    );

                         -- Validate the new policy trx object
                         -- Mimicking the call for native command OSPolicyTransactionCreateRule.
                         -- Had to execute this again because of the limitation of pkg_db_object.sp_process_action_mini
                         -- i.e, the proc doesnot return the io_message_list to the calling program after running the worflow
                         -- and hence if any validation fails during the mini workflow execution the error message is not
                         -- passed back to UI.
                         -- So with current implementation if there is a splat with UserInputInvalid outcome we will
                         -- re-verify if it is because the transaction is not valid for the respective policy

                         pkg_os_policy_transaction_type.sp_exec_plcy_trxn_rule
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_transaction_id,
                              v_rule_exec_type,
                              io_message_list,
                              io_action_outcome_id
                         );

                         -- If the transaction validation check is passed and the outcome is OK, that means
                         -- some other issue with the workflow. Exception will be raised in that case.
                         if io_action_outcome_id = pkg_os_constant.gOutcome_OK then

                              raise;

                         end if; */
               end;

               v_object_index := v_policy_object_list.next(v_object_index);

          end loop;

     end if;
     
     -- OSPRODUCT-3015
     v_refresh_consolidated_sched := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_billing_account_id,
                                          gbv_BillingAcc_RefreshSched
                                     );
                                     
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Refresh schedule: ' || v_refresh_consolidated_sched
          );

     end if;
                                     
     if v_refresh_consolidated_sched = gYes then
          
          sp_refresh_ba_schedule
          (
               in_session_id,
               in_transaction_id,
               v_billing_account_id
          );
          
     end if;     
     -- end OSPRODUCT-3015
     
end sp_ba_change_payplan_trx_setup;

procedure sp_ba_change_payplan_init
(
     in_session_id            in object.object_id%type,
     in_transaction_id        in object.object_id%type,
     in_action_object_id      in object.object_id%type,
     in_policy_object_list    in pkg_os_token.t_string_table,
     in_object_cache          in out nocopy pkg_os_object_cache.t_object_cache,
     io_message_list          in out pkg_os_message.t_message_list,
     io_action_outcome_id     in out outcome.outcome_id%type
) as

     v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get
                                                                            (
                                                                                in_session_id,
                                                                                in_transaction_id
                                                                            );
     v_procedure_name            constant system_log.program_name%type := pkg_name || 'sp_ba_change_payplan_init';													
     v_billing_acc_id            object.object_id%type; 
     v_policy_object_list        pkg_os_token.t_string_table := in_policy_object_list;
     v_object_index              number;								

     v_policy_id                 object.object_id%type;
     v_cpp_policytrx_id          object.object_id%type;
     v_policy_image_id           object.object_id%type;
     v_policy_term_id            object.object_id%type;
     v_mod_payplan_object_id     object.object_id%type;
	v_term_created_by_trx       object.object_id%type;										

     v_policy_transction_type    number;
    
											
     v_action_id                 action.action_id%type;
     v_action_object_id          object.object_id%type;

     v_datamart_tf               char(1) := 'T';
     v_bill_plan_enabled_tf      char(1);

     v_ba_payplan_timing_id      number;
     v_product_id                number;
     v_term_type_id              number;
     v_mod_payplan_md_id         number;
	v_ba_cpp_start_term_ind     number;--OSPRODUCT-9879										 
     
     v_ptp_payer_id              number;                                         /*OSPRODUCT-3536*/
     v_multipayer_mode_tf        boolean := FALSE;                               /*OSPRODUCT-3536*/
     v_payer_list                pkg_db_multipayer.t_payer_tab;                  /*OSPRODUCT-3536*/
																			    
     v_policy_number             object_bv_value.business_variable_value%type;   /*OSPRODUCT-3536*/
     v_StartAction               constant action.action_id%type := 1291446;      /*OSPRODUCT-3536*/
     v_ContextAction             constant action.action_id%type := 1492946;      /*OSPRODUCT-3536*/
     v_cpp_trx_effective_date    object_bv_value.business_variable_value%type;      --OSPRODUCT-9870

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id,
               v_procedure_name,
               'Processing change payment plan transaction for policies under Billing Account: ' ||
               v_billing_acc_id ||
               '.. Billing Account Transaction Set:' ||
               in_action_object_id
          );

     end if;

     if v_policy_object_list.count = 0 then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id,
                    v_procedure_name,
                    '... Policy List empty ...'
               );
               
          end if;

          io_action_outcome_id := 35546; -- no record selected
          
          return;

     else

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id,
                    v_procedure_name,
                    'Total Policy selected: ' || v_policy_object_list.count
               );

          end if;

          -- Set the override processing flag to True
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               pkg_db_constant.gbv_OverrideProcess_Flag, --34200946, 
               1
          );
          
          v_billing_acc_id := pkg_os_object.fn_object_parent_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_action_object_id
                                 );

          -- Get the current billing account payplan frequency
          v_ba_payplan_timing_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_billing_acc_id,
                                         gbv_BillingAcc_PayPlanTiming
                                    );
                                    
          -- get the change pay plan start term indicator
          -- OSPRODUCT-9879
          v_ba_cpp_start_term_ind := pkg_os_object_io.fn_object_bv_get
                                     (
                                         in_session_id,
                                         in_transaction_id,
                                         v_billing_acc_id,
                                         gbv_BAStartOfTermIndicator
                                     );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id,
                    v_procedure_name,
                    'v_billing_acc_id: ' || v_billing_acc_id ||
                    'Payment Plan Timing: ' || v_ba_payplan_timing_id
               );

          end if;
          
          if nvl(v_ba_payplan_timing_id, 0) <> 0 then
               
               -- 3015          
               pkg_os_object_io.sp_object_bv_set
               (
                      in_session_id,
                      in_transaction_id,
                      v_billing_acc_id,
                      gbv_BillingAcc_RefreshSched,
                      gYes
               );

               v_object_index := v_policy_object_list.first;

               while v_object_index is not null loop

                    v_policy_id := v_policy_object_list(v_object_index);
                         
                    v_ptp_payer_id := null;

                    if v_session_control.gLogging_Full then
                              
                         pkg_os_logging.sp_log
                         ( 
                              in_session_id, 
                              in_transaction_id,
                              v_procedure_name,
                              '... Policy ID : '||v_policy_id
                         );
                         
                    end if;

                    begin

                         select 
                              p.policy_number
                         into
                              v_policy_number
                         from
                              dragon_policy p
                         where
                              p.policy_id = v_policy_id;

                    exception
                              
                         when no_data_found then
                              v_policy_number := v_policy_id;

                    end;

                    declare
                         v_object_list pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
                    begin

                         pkg_os_object_search.sp_object_children_of_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_id,
                              pkg_os_constant.gobjType_PolicyTransaction, --629
                              v_object_list,
                              pkg_db_cash_apply.gbv_GenericInstance_Num --- 211662 OSPRODUCT-23541  pkg_db_constant.gbv_Trx_Seq_Num --- 32214598
                         );

                         v_cpp_policytrx_id := v_object_list(v_object_list.last);

                    end;
                         
                         
                    /*pkg_os_object_io.sp_object_bv_set   --Commneted as OSPRODUCT-9870
                    (
                         in_session_id,
                         in_transaction_id,
                         v_cpp_policytrx_id,
                         pkg_db_constant.gbv_Trx_Eff_Dt, --- 212029,
                         --to_char(sysdate,'YYYYMMDDHH24MISS')
                         substr(to_char(sysdate,pkg_os_constant.DragonDateFormatDefault), 1, 8 ) || pkg_os_time.gPTStartTimeDefault  --OSPRODUCT-5257
                    );*/
                    
                    -- Set transaction effective date
                    -- 9879
                    /*pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                      in_transaction_id,
                                                      v_cpp_policytrx_id,
                                                      212029,
                                                      substr( nvl ( v_cpp_trx_effective_date ,
                                                      to_char(sysdate,pkg_os_constant.DragonDateFormatDefault)), 1, 8 )||pkg_os_time.gPTStartTimeDefault                                                       
                                                      );*/
                    
                    -- Set the associated bats id for the new PT object
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_cpp_policytrx_id,
                         pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,
                         --31866546
                         in_action_object_id
                    );

                    -- Get the transaction type
                    v_policy_transction_type := pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_cpp_policytrx_id,
                                                     gbv_PolicyTrxTransactionType
                                                );

                    -- Get the new PTP object
                    v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_cpp_policytrx_id,
                                              gbv_PolicyTrxRefCoverages
                                         );
                                              
                    -- should raise an exception if policy image id is null
                    -- discuss with Keerthi

                    -- Get the Product ID
                    v_product_id := pkg_os_product.fn_object_product_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_policy_image_id
                                    );

                    -- Get the term that this transaction belongs to
                    v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_cpp_policytrx_id,
                                             gbv_PolicyTrxRefPolicyTerm
                                             --Belongs To reference
                                        );

                    -- Get the term type
                    v_term_type_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_policy_term_id,
                                           gbv_PolicyTermType
                                      );

                    -- Get the payment plan md id
                    begin
                         select 
                              pp.payment_plan_id
                         into   
                              v_mod_payplan_md_id
                         from   
                              payment_plan pp
                         where  
                              (pp.pd_product_id = v_product_id or pp.pd_product_id = pkg_os_constant.gDefaultProductID)
                               -- Assumption - will have separate record in the timing table for the same timing
                               --              but different type
                               --              discuss with Keerthi
                               /*and
                               pp.pd_term_id = v_term_type_id*/
                         and    
                               pp.pd_term_id = v_term_type_id /*OSPRODUCT-3536*/
                         and    
                               (pp.payment_plan_timing_id is not null and pp.payment_plan_timing_id = v_ba_payplan_timing_id)
                         and    
                               (active_tf = 'T' or active_tf is null) --     backward compatible
                         and   
                               (
                                    pp.availability_rule_id is null or
                                    pkg_os_exp.fn_evaluate_expression
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_policy_image_id,
                                         pp.availability_rule_id) = 'F' -- OSPRODUCT-15954
                               )
                         and    
                               pkg_os_policy_transaction_type.fn_transaction_type_in_set
                               (
                                    v_policy_transction_type,
                                    pp.pd_transaction_set_id
                               ) = 'T';

                    exception

                         when others then

                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Policy ID: ' || v_policy_id ||
                                   '.. Policy Image ID: ' || v_policy_image_id ||
                                   '.. Policy Transaction ID: ' || v_cpp_policytrx_id ||
                                   '.. Policy Term ID: ' || v_policy_term_id ||
                                   '.. Product ID: ' || v_product_id ||
                                   '.. Term Type: ' || v_term_type_id ||
                                   '.. Billing Account Pay plan Timing ID: ' || v_ba_payplan_timing_id
                              );

                              raise;
                    end;
                    
                    -- OSPRODUCT-9879
                    -- Do the necessary setup related to start of term indicator
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id ,
                         v_policy_image_id,
                         gbv_ptp_cpp_term_start_ind,
                         v_ba_cpp_start_term_ind
                    );
                    
                    -- OSPRODUCT-9879
                    -- Set the original process date
                    if v_ba_cpp_start_term_ind is not null then
                         
                         -- get the created by transaction
                         v_term_created_by_trx := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id ,
                                                       v_policy_term_id,
                                                       gbv_PolicyTermCreatedByTrx
                                                  );
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id ,
                              v_cpp_policytrx_id,
                              gbv_PTOriginalProcessDate, -- trnsaction original process date
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id ,
                                   v_term_created_by_trx,
                                   pkg_os_constant_bv.gbv_PolicyTranProcessDate --212161 -- NB/Rewrite process date
                              )
                         );
                         
                    else
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id ,
                              v_cpp_policytrx_id,
                              gbv_PTOriginalProcessDate, -- trnsaction original process date
                              null
                         );
                    
                    end if;

                    v_multipayer_mode_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_policy_id
                                             );

                    if v_multipayer_mode_tf = TRUE then 
                              
                         /*OSPRODUCT-3536 START*/
                         begin
                                   
                              select 
                                   ptp_payer_id
                              into 
                                   v_ptp_payer_id
                              from 
                                   dragon_ptp_payer
                              where 
                                   billing_account_id = v_billing_acc_id
                              and 
                                   ptp_id = v_policy_image_id;

                          exception
                                    
                               when others then                                         
                                    null;
                                         
                         end;
                              
                         if v_ptp_payer_id is null then
                                   
                              pkg_db_multipayer.sp_ptp_payers_get
                              (
                                   in_session_id,
                                   in_transaction_id ,
                                   v_policy_image_id,
                                   v_payer_list,
                                   'Y',
                                   pkg_db_multipayer.g_PayerGet_idx_BilingAccount
                              );

                              if v_payer_list.exists(v_billing_acc_id) then
                                        
                                   v_ptp_payer_id := v_payer_list(v_billing_acc_id).PTPayer_object_id;
                                      
                              end if;
                                   
                         end if;
                              
                    end if;

                    -- Get the modified payment Plan object
                    if v_multipayer_mode_tf = TRUE then

                         v_mod_payplan_object_id := pkg_os_object_search.fn_object_with_attribute_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_ptp_payer_id,
                                                         gObjType_PayPlan,
                                                         pkg_os_constant_bv.gbv_PaymentPlanID,
                                                         v_mod_payplan_md_id
                                                    );
                                                    
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ptp_payer_id,
                              gbv_PTPPayer_RefModPayPlan, --32967024,
                              v_mod_payplan_object_id
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_session_id,
                              gbv_RefObjectOfInterest, --28987309, 
                              v_ptp_payer_id
                         );
                              
                    else

                        v_mod_payplan_object_id := pkg_os_object_search.fn_object_with_attribute_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_policy_image_id,
                                                        gObjType_PayPlan,
                                                        pkg_os_constant_bv.gbv_PaymentPlanID,
                                                        v_mod_payplan_md_id
                                                   );
                                                   
                        pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_image_id,
                              gbv_PolicyRefModPayPlan,
                              v_mod_payplan_object_id
                         );
                             
                    end if;
                    /* OSPRODUCT-3536 END*/

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Policy ID: ' || v_policy_id ||
                              '.. Policy Image ID: ' || v_policy_image_id ||
                              '.. Policy Transaction ID: ' || v_cpp_policytrx_id ||
                              '.. Policy Term ID: ' || v_policy_term_id ||
                              '.. Pay plan MD id: ' || v_mod_payplan_md_id ||
                              '.. Modified Payment Plan Object: ' || v_mod_payplan_object_id ||
                              '.. Pay plan timing ' || v_ba_payplan_timing_id
                         );

                    end if;                    

                    pkg_db_object.sp_process_action_mini
                    (
                         in_session_id,
                         in_transaction_id,
                         v_StartAction, --- 1291446,-- start action
                         v_policy_image_id, /*OSPRODUCT-3536*/
                         in_object_cache,
                         io_message_list, /*OSPRODUCT-3877*/
                         io_action_outcome_id,
                         v_ContextAction, --- 1492946,-- context action
                         in_action_object_id,
                         v_action_id,
                         v_action_object_id
                    );                    
                                     
                    -- product specific
                    -- OSPRODUCT-3015
                    -- get bill plan enabled flag 
                    v_bill_plan_enabled_tf := nvl ( pkg_os_object_io.fn_object_bv_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_policy_image_id,
                                                             pkg_db_payment_arrangement.gbv_PTPBillPlanEnabledTF
                                                        ), gNo);
                                                        
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Bill Plan Enabled? ' || v_bill_plan_enabled_tf 
                         );

                    end if; 
                    
                    -- Restrict the execution in env not using bill plan
                    if v_bill_plan_enabled_tf = gYes then
                                     
                         sp_ba_sched_payment_generate
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_image_id,
                              'T'
                         );
                         
                    end if;

                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         in_action_object_id,
                         v_datamart_tf
                    );

                    v_object_index := v_policy_object_list.next(v_object_index);

               end loop;

          end if;

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_ba_change_payplan_init;

procedure sp_ba_change_payplan_process
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     in_object_cache                    in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list                    in out         pkg_os_message.t_message_list, /*OSPRODUCT-3877*/
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_ba_change_payplan_process';

     v_fitransaction_list               pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_fitransaction_index              number;
     v_pt_object_index                  number;

     v_policy_image_id                  object.object_id%type;
     v_policy_transaction_id            object.object_id%type;

     --v_mini_action_id                   constant number := 1099140;--OSPRODUCT-4330
     v_action_id                        action.action_id%type;
     v_action_object_id                 object.object_id%type;
     v_billing_account_id               object.object_id%type;
     v_ultimate_customer_id             object.object_id%type;

     type t_pt_object_list is table of object.object_id%type index by varchar2(12);
     v_pt_object_list                  t_pt_object_list;

     v_pt_new_object_list              object_tt;

     v_datamart_tf                      char(1) := 'T';
      --OSBILLING-6984 start
     type getpttrx_list is table of number;
     getpttrx_list_var getpttrx_list;
     --OSBILLING-6984 end

begin

     v_billing_account_id := pkg_os_object.fn_object_parent_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_action_object_id
                             );

     v_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_billing_account_id,
                                    pkg_os_constant.gObjType_Customer
                               );

     --OSBILLING-6984, created below
	select max(policy_trx_id) --to pick the recent policy trx_id
	  bulk collect
	  into getpttrx_list_var
	  from dragon_policy_trx dpt
	 where CUSTOMER_ID = v_ultimate_customer_id
	   and policy_trx_type_id = gTrxType_Endorse
	   and policy_trx_subtype_id = gChangePaymentPlan
	   and policy_trx_object_state_id in (gObjState_Created)
	 group by policy_id;


      --OSBILLING-6984, commented below
     /*pkg_os_object_search.sp_object_with_attribute_get
     (
          in_session_id,
          in_transaction_id,
          v_ultimate_customer_id,
          pkg_os_constant.gobjType_PolicyTransaction,
          31866546,
          in_action_object_id,
          v_pt_new_object_list
     );*/
	
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '.. Transaction Object Count: ' ||
                 --v_pt_new_object_list.count      --OSBILLING-6984 commented and added below
                 getpttrx_list_var.count
          );

     end if;

     --v_pt_object_index := v_pt_new_object_list.first;  --OSBILLING-6984 commented and added below
      v_pt_object_index := getpttrx_list_var.first;

     -- Loop through each unique PT object
     while v_pt_object_index is not null loop

          --v_policy_transaction_id := v_pt_new_object_list(v_pt_object_index).object_id; ----OSBILLING-6984 commented and added below
          v_policy_transaction_id := getpttrx_list_var(v_pt_object_index);

          v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                               (
                                      in_session_id,
                                      in_transaction_id,
                                      v_policy_transaction_id,
                                      gbv_PolicyTrxRefCoverages --29721146 associated policy
                               );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   'Processing Policy ID: ' || v_policy_image_id ||
                   'Policy Transaction ID: ' || v_policy_transaction_id
               );

          end if;

          -- Create and set up new PT object under each policy selected
          pkg_db_object.sp_process_action_mini
          (
               in_session_id,
               in_transaction_id,
               1316346,
               v_policy_image_id  ,
               in_object_cache,
               io_message_list, /*OSPRODUCT-3877*/
               io_action_outcome_id,
               1492946,
               in_action_object_id,
               v_action_id,
               v_action_object_id
          );

          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               v_datamart_tf
          );

          --v_pt_object_index := v_pt_new_object_list.next(v_pt_object_index); ----OSBILLING-6984 commented and added below
            v_pt_object_index := getpttrx_list_var.next(v_pt_object_index);

     end loop;
	
	pkg_os_object_io.sp_object_bv_set
               (
                      in_session_id,
                      in_transaction_id,
                      v_billing_account_id,
                      gbv_BillingAcc_RefreshSched,
                      null
               );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_ba_change_payplan_process;

procedure sp_ba_change_payplan_exit
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_ba_change_payplan_exit';

     v_pt_object_index                  number;
     v_policy_transaction_id            object.object_id%type;
     v_billing_account_id               object.object_id%type;
     v_ultimate_customer_id             object.object_id%type;
     v_policy_id                        object.object_id%type;
    
     type getpttrx_list is table of number;
     getpttrx_list_var getpttrx_list;
     
     v_refresh_consolidated_sched    char(1);

begin

     v_billing_account_id := pkg_os_object.fn_object_parent_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_action_object_id
                             );

     v_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_billing_account_id,
                                    pkg_os_constant.gObjType_Customer
                               );

	select max(policy_trx_id) --to pick the recent policy trx_id
	  bulk collect
	  into getpttrx_list_var
	  from dragon_policy_trx dpt
	 where customer_id = v_ultimate_customer_id
	   and policy_trx_type_id = 4
	   and policy_trx_subtype_id = 5
	   and policy_trx_object_state_id in (15402)
	 group by policy_id;
      
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '.. Transaction Object Count: ' || getpttrx_list_var.count
          );

     end if;

     v_pt_object_index := getpttrx_list_var.first;

     -- Loop through each unique PT object
     while v_pt_object_index is not null loop

          v_policy_transaction_id := getpttrx_list_var(v_pt_object_index);          

          v_policy_id := pkg_os_object.fn_object_parent_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_transaction_id
                         );		
          
          pkg_cs_db_billing.sp_custom_ba_change_payplan_exit
          (
               in_session_id,
               in_transaction_id,
               v_policy_id
          );
          
          if v_session_control.gLogging_Full then

			pkg_os_logging.sp_log
			(
			    in_session_id,
			    in_transaction_id,
			    v_procedure_name,
			    'Deleting Policy Transaction ID: ' || v_policy_transaction_id
			);

		end if;

		pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               null,
               v_policy_transaction_id,
               null--pkg_os_constant.gObjType_PolicyTransaction
          );
          
          v_pt_object_index := getpttrx_list_var.next(v_pt_object_index);

     end loop;

	pkg_os_object.sp_object_delete
     (
          in_session_id,
          in_transaction_id,
          v_billing_account_id,
          in_action_object_id,
          gObjType_BillingAccountTrxSet
     );
     
     v_refresh_consolidated_sched := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_billing_account_id,
                                             gbv_BillingAcc_RefreshSched
                                        );
     
     if v_refresh_consolidated_sched = gYes then
          
          sp_refresh_ba_schedule
          (
               in_session_id,
               in_transaction_id,
               v_billing_account_id
          );
          
     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_ba_change_payplan_exit;

function fn_get_payplan_timing
(
     in_session_id        in    object.object_id%type,
     in_transaction_id    in    object.object_id%type,
     in_payment_plan_id   in    object.object_id%type
) return payment_plan_timing.payment_plan_timing_id%type
is

     v_payment_plan_md_id               payment_plan.payment_plan_id%type;

begin
     v_payment_plan_md_id := pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_payment_plan_id,
                                  212015
                             );

     return fn_payment_plan_row(v_payment_plan_md_id).payment_plan_timing_id;

end fn_get_payplan_timing;

function fn_get_payplan_timing_name
(
     in_session_id        in    object.object_id%type,
     in_transaction_id    in    object.object_id%type,
     in_payment_plan_id   in    object.object_id%type default null, -- Chosen payment plan
     in_timing_id         in    lookup_list_value.lookup_enum%type default null
) return payment_plan_timing.payment_plan_timing_name%type
is
       v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name           constant system_log.program_name%type   := pkg_name||'fn_get_payplan_timing_name';

     v_pay_plan_timing_name     object_bv_value.business_variable_value%type := null;
     v_pay_plan_timing_id       object_bv_value.business_variable_value%type;

begin

     if in_payment_plan_id is null and in_timing_id is null then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '.. ID not provided.'
               );

          end if;

     elsif in_payment_plan_id is not null and in_timing_id is not null then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '.. Multiple IDs provide.'
               );

          end if;

     else

          if in_payment_plan_id is not null then

               v_pay_plan_timing_id := fn_get_payplan_timing(in_session_id, in_transaction_id, in_payment_plan_id);

          else

               v_pay_plan_timing_id := in_timing_id;

          end if;

          begin

               select
                    ppt.payment_plan_timing_name
               into
                    v_pay_plan_timing_name
               from
                    payment_plan_timing ppt
               where
                    ppt.payment_plan_timing_id = v_pay_plan_timing_id;

          exception

               when NO_DATA_FOUND then
                    v_pay_plan_timing_name := v_pay_plan_timing_id;

          end;

     end if;

     return v_pay_plan_timing_name;

end fn_get_payplan_timing_name;

--OSBILLING-7005

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_clear_scheduled_payments
--
--   %USAGE
--        Given Payment Plan ID,
--
--   %ALGORITHM
--        1. Set Current Stub ID ref as null on Payment plan
--        2. Get list of Schedules under paymetn plan
--        3. Loop through each schedule
--        4. Get List of schedule elements for each schedule
--        5. Loop through each element and delete it.
--        6. Reset Ref Installment and stub count on schedule
--
--
--   %PARAM    in_session_id                      Session ID
--   %PARAM    in_transaction_id                  Transaction ID
--   %PARAM    in_payment_plan_id                 Payment Plan ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clear_scheduled_payments
(
     in_session_id      in object.object_id%type,
     in_transaction_id  in object.object_id%type,
     in_payment_plan_id in object.object_id%type
) as

     v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                               'sp_clear_scheduled_payments';
     v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                        in_transaction_id);

     v_pymntsch_list  pkg_os_object.t_object_list;
     v_pymntsch_index number;
     v_scheduled_element_list  pkg_os_object.t_object_list;
     v_scheduled_element_index number;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| clearing scheduled payments for PaymentPlanID:' ||
               in_payment_plan_id
          );

     end if;

     --        1. Set Current Stub ID ref as null on Payment plan
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gbv_PaymentPlanCurrentStub,
          null
     );

     --        2. Get list of Schedules under paymetn plan


     pkg_os_object_search.sp_object_children_of_type_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_payment_plan_id,
                                gObjType_ScheduledPayment,
                                v_pymntsch_list
                           );

     v_pymntsch_index := v_pymntsch_list.first;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of Scheduled Payments found:' ||
               v_pymntsch_list.count
          );

     end if;

     --        3. Loop through each schedule
     while v_pymntsch_index is not null loop

           --        4. Get List of schedule elements for each schedule

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_pymntsch_list(v_pymntsch_index),
               gObjType_ScheduledElement,
               v_scheduled_element_list
          );

          if v_scheduled_element_list.count > 0 and   v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Deleting  Elements'
               );

          end if;

          v_scheduled_element_index := v_scheduled_element_list.first;

          --        5. Loop through each element and delete it.

          while v_scheduled_element_index is not null loop

               pkg_os_object.sp_object_delete
               (
                    in_session_id,
                    in_transaction_id,
                    v_pymntsch_list(v_pymntsch_index),
                    v_scheduled_element_list(v_scheduled_element_index),
                    gObjType_ScheduledElement,
                    null,
                    false
               );

               v_scheduled_element_index := v_scheduled_element_list.next(v_scheduled_element_index);

          end loop;

          --        6. Reset Ref Installment and stub count on schedule
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
                in_transaction_id,
                v_pymntsch_list(v_pymntsch_index),
                gbv_ScheduledRefInstallment,
                null
           );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_pymntsch_list(v_pymntsch_index),
               gbv_SchedPayment_Stubs_Cnt,
               0
          );
           v_pymntsch_index := v_pymntsch_list.next(v_pymntsch_index);


     end loop;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id,
                                v_procedure_name,
                                '... clearing complete ... ');

     end if;



end sp_clear_scheduled_payments;

-- UTPRODUCT-4119
procedure sp_reset_scheduled_payments
(
     in_session_id      in object.object_id%type,
     in_transaction_id  in object.object_id%type,
     in_payment_plan_id in object.object_id%type,
     in_policy_trx_id   in object.object_id%type
) as

     v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                               'sp_clear_scheduled_payments';
     v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                        in_transaction_id);

     v_pymntsch_list  pkg_os_object.t_object_list;
     v_pymntsch_index number;
     v_scheduled_element_list  pkg_os_object.t_object_list;
     v_scheduled_element_index number;
     v_element_creator_poltrns          object.object_id%type;  

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| clearing scheduled payments for PaymentPlanID:' ||
               in_payment_plan_id||
               'PT id:'|| in_policy_trx_id
          );

     end if;


     --        2. Get list of Schedules under paymetn plan


     pkg_os_object_search.sp_object_children_of_type_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_payment_plan_id,
                                gObjType_ScheduledPayment,
                                v_pymntsch_list
                           );

     v_pymntsch_index := v_pymntsch_list.first;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of Scheduled Payments found:' ||
               v_pymntsch_list.count
          );

     end if;

     --        3. Loop through each schedule
     while v_pymntsch_index is not null loop

           --        4. Get List of schedule elements for each schedule

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_pymntsch_list(v_pymntsch_index),
               gObjType_ScheduledElement,
               v_scheduled_element_list
          );



          v_scheduled_element_index := v_scheduled_element_list.first;

          --        5. Loop through each element and delete it.

          while v_scheduled_element_index is not null loop

               v_element_creator_poltrns     :=   pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      v_scheduled_element_list(v_scheduled_element_index),
                                                                      gbv_ElementRefCreatorPolTrns
                                                                 );

               if v_element_creator_poltrns = in_policy_trx_id then
                    if   v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Elements ID '|| v_scheduled_element_list(v_scheduled_element_index)||
                              'v_element_creator_poltrns:'||v_element_creator_poltrns
                         );

                    end if;                              

                         
                    if   v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Deleting element '|| v_scheduled_element_list(v_scheduled_element_index)
                         );

                    end if;                           
                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pymntsch_list(v_pymntsch_index),
                         v_scheduled_element_list(v_scheduled_element_index),
                         gObjType_ScheduledElement,
                         null,
                         false
                    );
               end if;

               v_scheduled_element_index := v_scheduled_element_list.next(v_scheduled_element_index);

          end loop;

         
           v_pymntsch_index := v_pymntsch_list.next(v_pymntsch_index);


     end loop;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id,
                                v_procedure_name,
                                '... clearing complete ... ');

     end if;



end sp_reset_scheduled_payments;

--OSBILLING-7005

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_copy_account_payplan
--
--   %USAGE
--        Given Policy transaction policy id, it will copy the schedules from existing policy
--
--   %ALGORITHM
--        1. Fetch Policy Expiration date and Bill plan
--        2. Identify Previous policy image from which schedules are to be copied
--           If Bill Plan is set on PTP, which means that payment arrangement is on. Pick First policy (PTP) bound for selected Bill Plan
--           If Bill Plan is not set on PTP, which means that Payment arrangement is Off. Pick first customer billed policy(PTP) bound on the customer.
--        3. If policy image is identified from #2, delete all payment plans which are present under current PTP and copy the payment plans from previous PTP.
--        4. Delete elements and extra stub schedules.
--        5. Set chossen Payplan on Current PTP
--        6. Set Spread and Stub as True
--        7. Call sp_payment_schedule_update to generate schedule elements
--        8. If no policy image is identified from #2, set outcome as ChangeBillPlan. Which means that we can not bundle with existing schedules
--
--
--   %PARAM    in_session_id                      Session ID
--   %PARAM    in_transaction_id                  Transaction ID
--   %PARAM    in_policy_image_id                 PTP ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_copy_account_payplan
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_image_id            in             object.object_id%type,
     in_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
as
     v_procedure_name      constant     system_log.program_name%type     :=     pkg_name||'.sp_copy_account_payplan';

     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


     v_object_id                        object.object_id%type;
     v_product_id                       object.object_id%type ;
     v_filing_id                        object.object_id%type ;
     v_payplan_index                    number;
     v_payment_plan_list                pkg_os_object.t_object_list;
     v_payment_plan_index               number;
     v_bill_plan                        object.object_id%type ;
     v_newPayerPaymentPlan_id           object.object_id%type;
     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;
     v_existing_PTP_id                  object.object_id%type;
     v_old_chosen_payplan               object.object_id%type;
     v_ultimate_customer_id             object.object_id%type;
     v_use_existing_plan                number;
     v_chosen_payment_plan_id          object.object_id%type;
     v_policy_exp_date                 object_bv_value.business_variable_value%type;
     v_payplan_timing_id               object_bv_value.business_variable_value%type; --15991
     v_payplan_md_id                   object_bv_value.business_variable_value%type; --15991
     v_policy_term_type                object_bv_value.business_variable_value%type; --15991
begin

     --        1. Fetch Policy Expiration date and Bill plan
     v_bill_plan :=pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          pkg_db_Constant.gbv_ptp_associated_Billlan
     );

     v_policy_exp_date :=pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          pkg_os_policy_transaction.gbv_PolicyExpirationDate
     );

     v_ultimate_customer_id    := pkg_os_object_search.fn_object_get_parent_of_type
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          pkg_os_constant.gObjType_Customer
     );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '..coping account payplan for policy image id:'|| in_policy_image_id
               ||'v_bill_plan:'||v_bill_plan
               ||'v_policy_exp_date:'||v_policy_exp_date
               ||'v_ultimate_customer_id:'||v_ultimate_customer_id

          );

     end if;


     --        2. Identify Previous policy image from which schedules are to be copied
     --           If Bill Plan is set on PTP, which means that payment arrangement is on. Pick First policy (PTP) bound for selected Bill Plan
     --           If Bill Plan is not set on PTP, which means that Payment arrangement is Off. Pick first customer billed policy(PTP) bound on the customer.

     select min(ptp_id) into v_existing_PTP_id from dragon_policy_trx ptrx
     where customer_id=v_ultimate_customer_id
     and
     (
          (
          v_bill_plan is null
          and
          NVL((select direct_billed_to_id from dragon_policy pol where pol.policy_id= ptrx.policy_id ),0)=1
          )
     or

--OSPRODUCT-2665
          --(  select pref_bill_plan_id from dragon_policy_term pterm where pterm.policy_term_id= ptrx.policy_term_id )=v_bill_plan
          ( pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ptrx.ptp_id, pkg_db_constant.gbv_PTP_Associated_Billlan) = v_bill_plan )
     )
     and trunc(policy_trx_image_exp_date) =trunc(to_date(v_policy_exp_date,pkg_os_constant.DragonDateFormatDefault))
     ;
     
     v_existing_PTP_id := nvl(pkg_cs_db_payplan.fn_override_ptp_to_copy(in_session_id, in_transaction_id, in_policy_image_id, v_existing_ptp_id),v_existing_ptp_id);


     --        3. If policy image is identified from #2, delete all payment plans which are present under current PTP and copy the payment plans from previous PTP.

     if v_existing_PTP_id is not null
          then

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               pkg_os_constant.gobjType_PaymentPlanOption,
               v_payment_plan_list
          );

          if v_session_control.gLogging_Full
               then
               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id,
                    v_procedure_name,
                    '...... Found PaymentPlan objects, count: ' ||
                    v_payment_plan_list.count
               );

          end if;

          --
          -- if any Payment Plan found, delete those
          --

          if v_payment_plan_list.count > 0 then

               if v_session_control.gLogging_Full
                    then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Loop through Payment Plan objects and delete it'
                    );
               end if;

               v_payment_plan_index := v_payment_plan_list.first;

               while v_payment_plan_index is not null loop

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'deleting payplan ' || v_payment_plan_list(v_payment_plan_index)

                    );

                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id,
                         v_payment_plan_list(v_payment_plan_index),
                         pkg_os_constant.gobjType_PaymentPlanOption
                    );

                    v_payment_plan_index := v_payment_plan_list.next(v_payment_plan_index);
               end loop;



          end if;


          v_old_chosen_payplan :=pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_existing_PTP_id,
               gbv_PolicyRefChosenPlan
          );

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_existing_PTP_id,
               pkg_os_constant.gobjType_PaymentPlanOption,
               v_payment_plan_list
          );

          if v_session_control.gLogging_Full
               then
               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id,
                    v_procedure_name,
                    '...... Found PaymentPlan objects, count: ' ||
                    v_payment_plan_list.count
                    || 'for old PTP:'||v_existing_PTP_id
               );

          end if;

          --
          -- if any Payment Plan found under old PTP, copy those under current PTP
          --

          if v_payment_plan_list.count > 0 then

               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Loop through Payment Plan objects and copy that'
                    );
               end if;

               v_payment_plan_index := v_payment_plan_list.first;

               while v_payment_plan_index is not null loop

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'copying payplan ' || v_payment_plan_list(v_payment_plan_index)

                    );
                    
                    --OSPRODUCT-15991
                    v_payplan_timing_id := pkg_os_object_io.fn_object_bv_path_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_payment_plan_list(v_payment_plan_index),
                         pkg_db_payment_arrangement.gbv_PaymentPlanTimingMDID -- 34204746
                    );
                    
                    v_policy_term_type := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_image_id ,
                         PKG_OS_CONSTANT_BV.gbv_PolicyTerm
                    );
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id,
                              v_procedure_name,
                              '...... Payment plan timing id ' ||v_payplan_timing_id
                              || ' policy term id:'||v_policy_term_type
                         );
                    
                    end if;							                  
                    
                    begin
                         
                         select
                              payment_plan_id
                         into
                              v_payplan_md_id
                         from
                              payment_plan 
                         where
                              (
                                   pd_product_id = pkg_os_product.fn_object_product_get (in_session_id, in_transaction_id, in_policy_image_id)
                                   or
                                   pd_product_id = pkg_os_constant.gDefaultProductID
                              )
                              and
                                   (payment_plan_timing_id is not null and payment_plan_timing_id = v_payplan_timing_id)
                              and
                                   pd_term_id = v_policy_term_type
                              and
                                   (
                                        active_tf = 'T'
                                        or
                                        active_tf is null     --     backward compatible
                                   );
                                   
                    exception
                         
                         when no_data_found then
                              
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, in_transaction_id,
                                        v_procedure_name,
                                        '..No payment plan found for the timing ID: '||v_payplan_timing_id
                                   );
                              
                              end if;
                              v_payment_plan_index := v_payment_plan_list.next(v_payment_plan_index);
                              continue;
                         
                    
                    end;                                     
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id,
                              v_procedure_name,
                              '......Payplan md id:'||v_payplan_md_id
                         );
                    
                    end if;
                    

                    v_object_copy_excluded_types( gObjType_ScheduledElement                        ) := 0;

                    pkg_os_object_copy.sp_object_copy
                    (
                         in_session_id                  =>  in_session_id,
                         in_transaction_id              =>  in_transaction_id,
                         in_from_object_id              =>  v_payment_plan_list(v_payment_plan_index),
                         in_to_parent_id                =>  in_policy_image_id,                                                             -- in        object.object_id%type,
                         in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                         in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                         io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                         io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                         out_object_id                  =>  v_newPayerPaymentPlan_id,                                                     -- out       object.object_id%type,
                         in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                         in_recursive_copy_tf           =>  'T', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                         in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                         in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                         in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                         in_resolve_references          =>  TRUE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                         in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                    );
					                                             
                    --OSPRODUCT-15991
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_newPayerPaymentPlan_id,
                         gbv_PaymentPlanMDID,
                         v_payplan_md_id
                    );
                     pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'created payplan ' || v_newPayerPaymentPlan_id

                    );

                    --        4. Delete elements and extra stub schedules.

                    sp_clear_scheduled_payments
                    (
                         in_session_id,
                         in_transaction_id,
                         v_newPayerPaymentPlan_id
                    );
                    sp_purge_outdated_stubs
                    (
                         in_session_id,
                         in_transaction_id,
                         v_newPayerPaymentPlan_id
                    );

                    --        5. Set chossen Payplan on Current PTP
                    if v_payment_plan_list(v_payment_plan_index)= v_old_chosen_payplan
                    then
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_image_id,
                              gbv_PolicyRefChosenPlan,
                              v_newPayerPaymentPlan_id
                         );
                    end if;



                    v_payment_plan_index := v_payment_plan_list.next(v_payment_plan_index);

               end loop;



          end if;

          --        6. Set Spread and Stub as True
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Spread_Amount,
               pkg_os_constant.gBoolean_True
          );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               gbv_PTP_Generate_Stub,
               pkg_os_constant.gBoolean_True
          );

          --        7. Call sp_payment_schedule_update to generate schedule elements
          pkg_db_payplan_modify.sp_payment_schedule_update
          (
               in_session_id,
               in_transaction_id,
               in_policy_image_id,
               io_action_outcome_id,
               in_new_term => pkg_os_constant.gBoolean_False
          );
         io_action_outcome_id:=pkg_os_constant.gOutcome_OK;
     else
         --        8. If no policy image is identified from #2, set outcome as ChangeBillPlan. Which means that we can not bundle with existing schedules
         io_action_outcome_id := pkg_db_constant.gOutcome_Change_Bill_pay ;
     end if;

end sp_copy_account_payplan;

function fn_validate_bill_plan
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_image_id            in             object.object_id%type
) return char
as
     v_procedure_name      constant     system_log.program_name%type     :=     pkg_name||'.fn_validate_bill_plan';

     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_existing_policy_id               object.object_id%type;
     v_object_id                        object.object_id%type;
     v_bill_plan                        object.object_id%type ;
     v_ultimate_customer_id             object.object_id%type;
     v_existing_bill_plan              object.object_id%type;

begin

     --        1. Fetch Bill plan on current policy
     v_bill_plan :=pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          pkg_db_Constant.gbv_ptp_associated_Billlan
     );

     v_ultimate_customer_id    := pkg_os_object_search.fn_object_get_parent_of_type
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          pkg_os_constant.gObjType_Customer
     );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Verifying v_bill_plan:'||v_bill_plan
               ||'and v_ultimate_customer_id:'||v_ultimate_customer_id

          );

     end if;


     --        2. Identify first policy bound for this customer.
     --         If null is returned, that means that it's first policy on customer and need to return 'T'

     select min(policy_id) into v_existing_policy_id from dragon_policy
     where customer_id=v_ultimate_customer_id;

     if v_existing_policy_id is null then
          return 'T';

     else
          --        3. If policy is found, get the pref_bill_plan_id(v_existing_bill_plan) for that policy.
          --         If bill plan is null on old as well as current policy Or or it's not null on both, that means that payment arrangement property is not changed.
          --         So, return 'T'
          --         Else return 'F' (means property is changed)

          select min(pref_bill_plan_id) into v_existing_bill_plan from dragon_policy_term where policy_id=v_existing_policy_id;

          if (v_bill_plan is null and v_existing_bill_plan is null)
          or (v_bill_plan is not null and v_existing_bill_plan is not null)
          then
               return 'T';
          else
               return 'F';
          end if;

     end if;

     return 'T';
end fn_validate_bill_plan;

----------------------------------------------------------------------------------------------------------------------------------------------------
-- Start OSPRODUCT-1607
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_restriction_payplan_tf
--
--   %USAGE
--        The method has been written to derterming the payment plan based on the selected payment mode. 
--
--   %ALGORITHM
--        No.
--
--   %PARAM
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_restriction_payplan_tf
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_policy_image_id                 in        object.object_id%type,
     in_payplan_object_id               in        object.object_id%type,
     in_payplan_md_id                   in        payment_plan.restriction_rule_id%type
)    return char
is

     v_payment_plan_md_row              getPaymentPlanList%rowtype;
     v_availability_payplan_tf           char(1) := 'F';   -- OSPRODUCT-1947

begin

     v_payment_plan_md_row   :=   pkg_db_payplan_modify.fn_payment_plan_row(in_payplan_md_id);


     if v_payment_plan_md_row.availability_rule_id is not null then -- OSPRODUCT-1947

          v_availability_payplan_tf := pkg_os_exp.fn_evaluate_expression
                                      (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             v_payment_plan_md_row.availability_rule_id  -- OSPRODUCT-1947
                                      );
     end if;

     if v_availability_payplan_tf = 'T' then

        v_availability_payplan_tf := 'T';

     end if;

     return v_availability_payplan_tf;

end fn_restriction_payplan_tf;
-- End OSPRODUCT-1607

procedure sp_set_inst_reinstate_balance
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_transaction_id           in             object.object_id%type
)
is

     v_session_control             pkg_os_session.r_dragon_session_control      :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name              constant  system_log.program_name%type       :=   pkg_name||'sp_set_inst_reinstate_balance';
     v_balance_amount              number := 0;
     v_term_id                     object.object_id%type;
     v_basis_cancellation_id       object.object_id%type;
     v_canc_associated_batch       object.object_id%type;
     v_credit_apply_batch          object.object_id%type;
     v_installment_id              object.object_id%type;
     v_policy_id                   object.object_id%type; 
     v_billing_account_id          object.object_id%type;
     v_action_object_type_id       object.object_id%type;
     v_policy_image_id             object.object_id%type;
     
     v_transaction_eff_date        date;
     v_cancellation_eff_date       date;
     
     v_multipayer_enabled_tf       char(1);
     
     v_term_installment_list       pkg_os_object.t_object_list;
     v_policy_transaction_id       object_type.object_type_id%type;
     v_installment_list_idx        number;
     v_transaction_type            number;
     v_fitem_balance               number;
     v_disburse_amt                number;
     v_cash_applied_amt            number;
     v_installment_balance_amt     number := 0;

begin
     
     -- Get obejct type
     v_action_object_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_Session_id,
                                     in_transaction_id,
                                     in_policy_transaction_id
                                );
     
     case
          when v_action_object_type_id = pkg_os_constant.gobjType_PolicyTrxPolicy then
               
               v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               in_policy_transaction_id
                                          );
                                          
          else
               
               v_policy_transaction_id := in_policy_transaction_id;
               
     end case;
     
     -- Get the basis cancellation transaction
     v_basis_cancellation_id := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_policy_transaction_id,
                                     gbv_PolicyTrx_BasisRefTrx -- 22605205 -- basis transaction id
                                );
                                
     
     -- get the transaction id
     -- Transaction type
     begin
          select 
               pt.policy_trx_type_id,
               pt.policy_trx_eff_date,
               pt.policy_term_id,
               pt.ptp_id
          into
               v_transaction_type,
               v_transaction_eff_date,
               v_term_id,
               v_policy_image_id
          from
               dragon_policy_trx pt
          where
               pt.policy_trx_id = v_policy_transaction_id;
               
     exception
          when no_data_found then
               null;
               
     end;
     
     -- Get cancellation effective date     
     begin
          select
               pt.policy_trx_eff_date
          into
               v_cancellation_eff_date
          from
               dragon_policy_trx pt
          where
               pt.policy_trx_id = v_basis_cancellation_id;
               
     exception
          when no_data_found then
               null;
               
     end;
     
     -- Get attributes not found in DM
     begin
     
          if v_transaction_type is null then
               
               v_transaction_type := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_policy_transaction_id,
                                          pkg_os_constant_bv.gbv_PolicyTranType --212030 -- transaction type 
                                     );
                                     
          end if;
          
          if v_transaction_eff_date is null then
               
               v_transaction_eff_date := to_date ( pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_policy_transaction_id,
                                                        pkg_os_constant_bv.gbv_PolicyTranEffectiveDate --212030 -- transaction type 
                                                   ), pkg_os_constant.DragonDateFormatDefault );
          end if;
          
          if v_cancellation_eff_date is null then
               
               v_cancellation_eff_date := to_date ( pkg_os_object_io.fn_object_bv_get
                                                    (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        v_basis_cancellation_id,
                                                        pkg_os_constant_bv.gbv_PolicyTranEffectiveDate --212030 -- transaction type 
                                                    ), pkg_os_constant.DragonDateFormatDefault );
                                                    
          end if;
          
          if v_policy_image_id is null then
               
               v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_policy_transaction_id,
                                          gbv_PolicyTrxRefCoverages --212030 -- transaction type 
                                     );
                                     
          end if;
     
     end;     
     
     -- Get the MP flag
     v_multipayer_enabled_tf := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_policy_image_id,
                                     pkg_db_multipayer.gbv_MultiPayerEnabled_PTP -- 22605205 -- basis transaction id
                                );
                           
     if v_session_control.gLogging_Full then               
          
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Transaction ID :'    || v_policy_transaction_id ||
               '.. Transaction Type: '  || v_transaction_type      ||
               '.. Transaction Effective Date: ' || v_transaction_eff_date ||
               '.. Cancellation EFfective Date: ' || v_cancellation_eff_date ||
               '.. Multipayer Enabled: '          || v_multipayer_enabled_tf
          );
                 
     end if;
                           
     if v_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Reinstatement 
        and
        trunc(v_transaction_eff_date) = trunc(v_cancellation_eff_date)
        and
        nvl(v_multipayer_enabled_tf, gNo) = gNo
     then
          
          if v_term_id is null then
     
               -- Get the term ID
               v_term_id := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_transaction_id,
                                 pkg_os_constant_bv.gbv_RefPolcyTrxnBelongsTo --29728801 -- belongs to 
                            );
                       
          end if;
                                     
          --get the auto credt apply batch created by cancellation transaction
          v_canc_associated_batch := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_basis_cancellation_id,
                                          31866546 -- associated batch
                                     );
                                     
          v_billing_account_id := pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_canc_associated_batch
                                   );
                                     
          v_credit_apply_batch := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_canc_associated_batch,
                                          31756446 -- created batch
                                     );  
                                     
          if v_session_control.gLogging_Full then               
          
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Term ID:' || v_term_id ||
                    '.. Policy Transaction ID: ' || v_policy_transaction_id ||
                    '.. Basis Cancellation ID: ' || v_basis_cancellation_id ||
                    '.. Cancellation Batch ID: ' || v_canc_associated_batch ||
                    '.. Credit Apply Batch ID: ' || v_credit_apply_batch ||
                    '.. Billing Account ID: '    || v_billing_account_id 
               );
                 
          end if;
          
          -- get the total disbursement amount
          select 
               nvl(sum(nvl(batch_amount,0)),0)
          into
               v_disburse_amt
          from
               dragon_billingaccounttrxset 
          where 
               parent_billing_Account_id = v_billing_account_id
          and
               billingaccounttrxset_id > v_canc_associated_batch
          and 
               batch_type_id = 2301 -- 'Disbursement'          
          and 
               batch_status_id in (39846, 52046) -- Processed, Pending Request Sent to AP
          and 
               nvl(value_stream,1) <> 2; -- filter out claim trx
               
          /*select 
               sum(nvl(fchg.action_delta,0))
          into
               v_disburse_amt
          from 
               dragon_fichange fchg
          where
               fchg.billing_account_id = v_billing_account_id
          and
               fchg.installment in (select installment_id from DRAGON_SCHEDULED_INSTALLMENT where policy_term_id = v_term_id and current_pay_plan_inst = 'Yes')
          and 
               fchg.fitem_type_id = 146
          and
               fchg.fitem_category_id not in (646 , 1546, 946 ,5746)
          and
               fchg.fitem_sub_category_id not in (62246)
          and
               fchg.sum_include_tf = 1
          and 
               fchg.billingaccounttrxset_id > v_canc_associated_batch
          and 
               fchg.fitem_transaction_type_id = 901;*/
               
          if v_session_control.gLogging_Full then               
          
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Disbursement Balance: ' || v_disburse_amt
               );
                                
          end if;

          for v_term_inst in ( select installment_id from DRAGON_SCHEDULED_INSTALLMENT where policy_term_id = v_term_id and current_pay_plan_inst = 'Yes' order by billing_due_date ) loop

               v_installment_id := v_term_inst.installment_id;
               v_installment_balance_amt := 0;
               
               if v_session_control.gLogging_Full then               
          
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Considering installment ID: ' || v_installment_id
                    );
                      
               end if;
                                          
               begin
               
                    select
                         nvl(sum(action_delta),0)
                    into
                         v_installment_balance_amt
                    from
                         dragon_fichange
                    where                    
                         billing_account_id = v_billing_account_id
                    and
                         installment = v_installment_id
                    and
                         fitem_type_id = 146
                    and
                         fitem_category_id not in (646 , 1546, 946 ,5746)
                    and
                         fitem_sub_category_id not in (62246)
                    and
                         sum_include_tf = 1
                    and                         
                         nvl(value_stream,1) <> 2
                    and
                    (
                         billingaccounttrxset_id < v_canc_associated_batch
                         or
                         (
                              billingaccounttrxset_id > v_canc_associated_batch                               
                              and 
                              (
                                   fitem_transaction_type_id not in (1601,604,901)-- auto credit apply, disbursement , auto write off  
                                   or
                                   (
                                        fitem_transaction_type_id in (1601,604,901)-- auto credit apply, disbursement , auto write off  
                                        and                                   
                                        pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, billingaccounttrxset_id, 210153) = 51219
                                   )
                              )
                         )
                    );                         
                    
               end;
               
               --end loop;
               
               if v_session_control.gLogging_Full then               
          
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Installment bal excluding writeoff, disbursement and credit apply post cancellation:' || v_installment_balance_amt
                         
                    );
                      
               end if;
               
               if v_disburse_amt > 0 then
               
                    if v_session_control.gLogging_Full then               
          
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Applying disbursement amount on installment.'                              
                         );
                           
                    end if;
               
                    -- Get the cash applied
                    select                              
                         nvl(abs(sum(action_delta)),0)
                    into
                         v_cash_applied_amt
                    from
                         dragon_fichange fc, dragon_fitransaction fi
                    where
                         fc.fitransaction = fi.fitransaction_id 
                    and 
                         fc.installment = v_installment_id
                    and 
                         nvl(fc.value_stream,1) <> 2
                    and
                         fc.fitem_transaction_type_id = 101 -- cash apply       
                    and
                         action_delta < 0
                    and
                         fi.status_enum = 37646; 
                         
                    v_installment_balance_amt := v_installment_balance_amt + least(v_disburse_amt, v_cash_applied_amt);
                    v_disburse_amt := v_disburse_amt - v_cash_applied_amt;
                    
                    if v_session_control.gLogging_Full then               
          
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Installment cash applied amount: ' || v_cash_applied_amt ||
                              '.. Disbursement balance updated to: ' || v_disburse_amt ||
                              '.. Reinstatement Balance post considering disbursement ' || v_installment_balance_amt
                         );
                                     
                    end if;
                    
               end if;
               
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_installment_id,
                    pkg_db_constant.gbv_InstallmentReinstateBalAmt, -- added the declaration in pkg_db_constant
                    nvl(v_installment_balance_amt,0)
               );               

               --v_installment_list_idx := v_term_installment_list.next( v_installment_list_idx );

          end loop;
     elsif 
          v_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Reinstatement 
     and
          trunc(v_transaction_eff_date) = trunc(v_cancellation_eff_date)
     and
          nvl(v_multipayer_enabled_tf, gNo) = gYes
     then
          if v_term_id is null then

               -- Get the term ID
               v_term_id := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_transaction_id,
                                 pkg_os_constant_bv.gbv_RefPolcyTrxnBelongsTo --29728801 -- belongs to 
                            );

          end if;
          
          for payer in
          (
               Select 
                    policy_term_payer_id, 
                    payer_entity_id, 
                    payer_billing_account_id, 
                    payer_type, 
                    policy_term_id, 
                    policy_id, 
                    composite_search_key, 
                    pref_bill_plan_id
               from 
                    dragon_policy_term_payer tp
               where 
                    tp.policy_term_id = v_term_id 
          )
          loop
               
               --get the auto credt apply batch created by cancellation transaction
               v_canc_associated_batch := pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_basis_cancellation_id,
                                               31866546 -- associated batch
                                          );

               v_billing_account_id := payer.payer_billing_account_id;

               if v_session_control.gLogging_Full then               

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Term ID:' || v_term_id ||
                         '.. Policy Transaction ID: ' || v_policy_transaction_id ||
                         '.. Basis Cancellation ID: ' || v_basis_cancellation_id ||
                         '.. Cancellation Batch ID: ' || v_canc_associated_batch ||
                         '.. Credit Apply Batch ID: ' || v_credit_apply_batch ||
                         '.. Billing Account ID: '    || v_billing_account_id 
                    );

               end if;

               -- get the total disbursement amount
               select 
                    nvl(sum(nvl(batch_amount,0)),0)
               into
                    v_disburse_amt
               from
                    dragon_billingaccounttrxset 
               where 
                    parent_billing_Account_id = v_billing_account_id
               and
                    billingaccounttrxset_id > v_canc_associated_batch
               and 
                    batch_type_id = 2301 -- 'Disbursement'          
               and 
                    batch_status_id in (39846, 52046) -- Processed, Pending Request Sent to AP
               and 
                    nvl(value_stream,1) <> 2; -- filter out claim trx


               if v_session_control.gLogging_Full then               

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Disbursement Balance: ' || v_disburse_amt
                    );

               end if;

               for v_term_inst in 
               ( 
                    select 
                         i.installment_id ,i.balance_amount
                    from 
                         dragon_scheduled_installment i
                    where 
                         policy_term_id = v_term_id 
                    and 
                         current_pay_plan_inst = 'Yes'
                    and 
                         i.payer_id = payer.policy_term_payer_id
                    order by 
                         billing_due_date 
               ) loop

                    v_installment_id := v_term_inst.installment_id;
                    v_installment_balance_amt := 0;
                    --v_installment_balance_amt := v_term_inst.balance_amount;
                    
                    if v_session_control.gLogging_Full then               

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Considering installment ID: ' || v_installment_id
                         );

                    end if;

                    begin

                         select
                              nvl(sum(action_delta),0)
                         into
                              v_installment_balance_amt
                         from
                              dragon_fichange
                         where                    
                              billing_account_id = v_billing_account_id
                         and
                              installment = v_installment_id
                         and
                              fitem_type_id = 146
                         and
                              fitem_category_id not in (646 , 1546, 946 ,5746)
                         and
                              fitem_sub_category_id not in (62246)
                         and
                              sum_include_tf = 1
                         and                         
                              nvl(value_stream,1) <> 2
                         and
                         (
                              billingaccounttrxset_id < v_canc_associated_batch
                              or
                              (
                                   billingaccounttrxset_id > v_canc_associated_batch                               
                                   and 
                                   (
                                        fitem_transaction_type_id not in (1601,604,901)-- auto credit apply, disbursement , auto write off  
                                        or
                                        (
                                             fitem_transaction_type_id in (1601,604,901)-- auto credit apply, disbursement , auto write off  
                                             and                                   
                                             pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, billingaccounttrxset_id, 210153) = 51219
                                        )
                                   )
                              )
                         );                         

                    end;

                    --end loop;

                    if v_session_control.gLogging_Full then               

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Installment bal excluding writeoff, disbursement and credit apply post cancellation:' || v_installment_balance_amt

                         );

                    end if;

                    if v_disburse_amt > 0 then

                         if v_session_control.gLogging_Full then               

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Applying disbursement amount on installment.'                              
                              );

                         end if;

                         -- Get the cash applied
                         select                              
                              nvl(abs(sum(action_delta)),0)
                         into
                              v_cash_applied_amt
                         from
                              dragon_fichange fc, dragon_fitransaction fi
                         where
                              fc.fitransaction = fi.fitransaction_id 
                         and 
                              fc.installment = v_installment_id
                         and 
                              nvl(fc.value_stream,1) <> 2
                         and
                              fc.fitem_transaction_type_id = 101 -- cash apply       
                         and
                              action_delta < 0
                         and
                              fi.status_enum = 37646; 

                         v_installment_balance_amt := v_installment_balance_amt + least(v_disburse_amt, v_cash_applied_amt);
                         v_disburse_amt := v_disburse_amt - v_cash_applied_amt;

                         if v_session_control.gLogging_Full then               

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Installment cash applied amount: ' || v_cash_applied_amt ||
                                   '.. Disbursement balance updated to: ' || v_disburse_amt ||
                                   '.. Reinstatement Balance post considering disbursement ' || v_installment_balance_amt
                              );

                         end if;

                    end if;
                    if v_session_control.gLogging_Full then               

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Payer: ' || payer.policy_term_payer_id ||
                              '.. Installment balance: ' || v_installment_balance_amt
                         );

                    end if;
                         
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_installment_id,
                         pkg_db_constant.gbv_InstallmentReinstateBalAmt, -- added the declaration in pkg_db_constant
                         nvl(v_installment_balance_amt,0)
                    );               

                    --v_installment_list_idx := v_term_installment_list.next( v_installment_list_idx );

               end loop;
          end loop;
     end if;

exception when others then

     raise;

end sp_set_inst_reinstate_balance;

-- UTPRODUCT-3925
function fn_actual_effective_date_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_policy_image_id            in  object.object_id%type,
     in_payer_id                   in  object.object_id%type
)
return date
is
     
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_payer_effective_date_get'; 
     v_utemplet_id                 object.object_id%type;
     v_PT_id                       object.object_id%type;
     v_effective_date              DATE;
     v_start_of_of_the_term_flag   number;
     v_payer_effective_date        DATE;
             

begin
     
     v_start_of_of_the_term_flag           := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , in_policy_image_id , gbv_ptp_cpp_term_start_ind);                                      
     
     v_effective_date     :=  to_date
                                   (
                                        pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             pkg_os_constant_bv.gbv_PolicyEffectiveDate

                                        ),pkg_os_constant.DragonDateFormatDefault
                                   );  
                                   
     if in_payer_id is not null and v_start_of_of_the_term_flag is not null
     then
          v_payer_effective_date :=to_date(pkg_os_object_io.fn_object_bv_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                            in_payer_id,
                                                            pkg_db_constant.gbv_payer_effective_date
                                                        ),pkg_os_constant.DragonDateFormatDefault
                                                  );  
          if  NVL(v_payer_effective_date,v_effective_date) >   v_effective_date
               then
                    v_effective_date :=   v_payer_effective_date;
          end if;                                            
     end if;                                        
     return v_effective_date;
                                                                            
end fn_actual_effective_date_get;							 

-- UTPRODUCT-4119
procedure sp_set_bal_CPP_strt_trm_elem
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_pay_plan_id                 in             object.object_id%type
     
)
is

     v_procedure_name                   constant system_log.program_name%type      :=     pkg_name||'sp_set_bal_CPP_strt_trm_elem';
     v_session_control                  pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_schedule_element_id              object.object_id%type;
     v_coverage_object_id               object.object_id%type;
     v_scheduled_payment_index          number;
     v_scheduled_element_index          number;
     v_element_amount                   float:= 0;
     v_element_amount_total             float;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_element_debit_category           number;
     v_element_debit_subcategory        number;
     v_element_credit_category          number;
     v_element_credit_subcategory       number;
     v_element_creator_poltrns          object.object_id%type;
     v_IncludeInPayScheduleTF           char(1);
     v_create_debit_tf                  char(1);
     v_create_credit_tf                 char(1);
     v_PaymentPlan_md                   constant business_variable.business_variable_id%type        :=   212015;
     v_payment_md_id                    object.object_id%type;
     v_credit_billing_account           object.object_id%type;
     v_debit_billing_account            object.object_id%type;
     v_cur_total_amount                 float;
     v_cur_total_amount_start           float;
     v_pol_applied_amount_tot           float;
     v_billing_element_md_row           db_billing_element%rowtype;
     v_payable_earned_amount            float;
     v_category_applied_amount          float;
     v_category_total_applied           float;
     v_element_final_amount             float;
     v_installment_index                number := 0;
     v_installment_list                 pkg_db_billing_modify.t_AllInstallment;
     -- Arun - Start
     v_modified_pay_plan_flag           number := 0;
     v_policy_transaction_sub_type      number := 0;
     v_pol_applied_amount_tota          float;
     v_payment_plan_parent_id           object.object_id%type;
     v_ptp_id                           object.object_id%type;
     v_pt_id                            object.object_id%type;
     v_element_md_id                    number;
     v_element_total_paid_amount        float;
     v_element_balance_amount           float;
     v_billing_account_id               object.object_id%type;
     v_policy_id                        object.object_id%type;
     
     
     -- Arun - End


     cursor c_element_row is
     select e.db_billing_element_id from
               db_billing_element e,
               db_payment_plan_detail a
          where
               e.db_billing_element_id=a.db_billing_element_id
               and 
               a.payment_plan_id = v_payment_md_id
               and
               e.active_tf= 'T'         -- Keerthi
               and
               e.create_debit_tf = 'T'     -- Keerthi
               and
               e.payment_schedule_tf = 'T';
  

begin
 
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...... Considering PaymentPlan  '|| in_pay_plan_id
          );

     end if;    
               
     v_payment_md_id    :=    pkg_os_object_io.fn_object_bv_get
          (
          in_session_id,
          in_transaction_id,
          in_pay_plan_id,
          v_PaymentPlan_md
          );
     v_payment_plan_parent_id      :=            pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_pay_plan_id);                  
            
     v_ptp_id   :=pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_pay_plan_id,2276904);
             
     v_pt_id    :=pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptp_id);                                                                 
            
     if v_payment_plan_parent_id <> v_ptp_id
     then
          v_billing_account_id  := pkg_os_object_io.fn_object_bv_path_get
          (
               in_session_id,
               in_transaction_id,
               v_payment_plan_parent_id,
               '32714824.29704646'
          );
          
     else
            
          v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_pt_id);
          v_billing_account_id := pkg_os_object_io.fn_object_bv_get
          (
          in_session_id,
          in_transaction_id,
          v_policy_id,
          33887946
          );
     end if;  
     
     if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_ptp_id , gbv_ptp_cpp_term_start_ind) is not null
     or pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_billing_account_id , 32914248) is not null
     then                                   
                    
          
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_payment_md_id  '|| v_payment_md_id||
               'v_payment_plan_parent_id'||v_payment_plan_parent_id||
               'v_ptp_id'||v_ptp_id||
               'v_pt_id:'||v_pt_id||
               'v_billing_account_id:'||v_billing_account_id
               );

          end if;   
          
        
          
          for v_element_row in  c_element_row
          loop
      
               v_element_md_id := v_element_row.db_billing_element_id;
               
               v_element_total_paid_amount := 0;
               
               pkg_db_payplan_modify.sp_cash_applied_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_ptp_id,
                    v_pt_id,
                    v_element_md_id,
                    null,
                    null,
                    v_element_total_paid_amount,
                    'T' ,
                    null,
                    v_billing_account_id                                --OSBILLING-4363
               );
               
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......looping billing_md_id '|| v_element_row.db_billing_element_id||
                    'paid amount:'||v_element_total_paid_amount
                    );

               end if;  
               if v_element_total_paid_amount =0
               then
                    continue;
               end if; 
               
               if v_scheduled_payment_list.count =0 then                                        
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_pay_plan_id,
                         gObjType_ScheduledPayment,
                         v_scheduled_payment_list,
                         gbv_ScheduledPayment_num
                    );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'number of installments '|| v_scheduled_payment_list.count
                         );

                    end if; 
               end if; 
               if v_scheduled_payment_list.count > 0 -- loop thru each payment
               then

                    v_scheduled_payment_index    :=    v_scheduled_payment_list.first;

                    
                    while v_scheduled_payment_index is not null
                    loop
      
                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Considering PaymentPlanScheduledPayment Object ID: '
                              ||v_scheduled_payment_list(v_scheduled_payment_index)||
                              'v_element_total_paid_amount:'||v_element_total_paid_amount
                              );

                         end if;


                         if v_element_total_paid_amount =0
                         then
                              exit;
                         end if;     
                         v_scheduled_element_list.delete;

                         -- Get the elements for the payment
                         pkg_os_object_search.sp_object_children_of_type_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_scheduled_payment_list(v_scheduled_payment_index),
                              gObjType_ScheduledElement,
                              v_scheduled_element_list
                         );


                         if v_scheduled_element_list.count > 0
                         then

                              v_scheduled_element_index := v_scheduled_element_list.first;

                              while v_scheduled_element_index is not null loop

                                   -- Loop thru each element of the installnent to see if matches the element we are on
                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '...... For PaymentPlanScheduledPaymenElement Objects : '
                                             ||v_scheduled_element_list(v_scheduled_element_index)||
                                             'v_element_total_paid_amount:'||v_element_total_paid_amount 
                                        );
                                   end if;
                                   
                                   if v_element_total_paid_amount = 0 
                                   then   
                                        exit;
                                   end if;       

                                   v_schedule_element_id := v_scheduled_element_list(v_scheduled_element_index);

                                   v_billing_element_md_id  :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                        in_session_id,
                                        in_transaction_id,
                                        v_schedule_element_id,
                                        gbv_billing_element_id
                                        );
                                        
                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'v_schedule_element_id'||v_schedule_element_id||
                                             'v_billing_element_md_id:'||v_billing_element_md_id ||
                                             'v_element_md_id:'||v_element_md_id
                                        );
                                   end if;                                   

                                   if v_billing_element_md_id = v_element_md_id
                                   then

                                        -- they equal so need to add amount to total of element
                                        v_element_amount         :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                             in_session_id,
                                             in_transaction_id,
                                             v_schedule_element_id,
                                             gbv_element_amount
                                             );

                                        if v_session_control.gLogging_Full
                                        then

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'Before Adjusting: v_element_amount'||v_element_amount||
                                                  'v_element_total_paid_amount:'||v_element_total_paid_amount
                                             );
                                        end if; 
                                                            
                                        if v_element_total_paid_amount >= v_element_amount 
                                        then
                                             v_element_balance_amount := 0;
                                             v_element_total_paid_amount := v_element_total_paid_amount- v_element_amount;
                                        
                                             pkg_os_object_io.sp_object_bv_set
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_schedule_element_id,
                                                  33028848,
                                                  v_element_balance_amount
                                             );
                                        else
                                             v_element_balance_amount := v_element_amount-v_element_total_paid_amount;
                                             v_element_total_paid_amount :=0;
                                             pkg_os_object_io.sp_object_bv_set
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_schedule_element_id,
                                                  33028848,
                                                  v_element_balance_amount
                                             );                                   
                                        
                                        end if; 
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'After Adjusting: v_element_balance_amount'||v_element_balance_amount||
                                                  'v_element_total_paid_amount:'||v_element_total_paid_amount
                                             );
                                        end if;                                        
                                        
                                        -- Set the BV here     
                                        
                                   end if; -- if v_billing_element_md_id = r_element_id.db_billing_element_id

                                   v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                              end loop;  --v_scheduled_element_index

                              
                         end if;

                         v_scheduled_payment_index     :=     v_scheduled_payment_list.next(v_scheduled_payment_index);

                    end loop;     -- while v_scheduled_payment_index is not null loop

               end if;  -- if v_scheduled_payment_list.count > 0

          end loop;

     end if;
     exception

     when others then

     pkg_os_logging.sp_log_error
     (
     in_session_id,
     in_transaction_id,
     v_procedure_name,
     '...... Exception '||
     sqlerrm(sqlcode)
     );

     raise no_data_found;

end sp_set_bal_CPP_strt_trm_elem;


-- UTPRODUCT-4159
procedure sp_set_bal_CPP_strt_trm_inst
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_pay_plan_id                     in             object.object_id%type,
     in_chosen_payplan_id               in             object.object_id%type           
     
)
is

     v_procedure_name                   constant system_log.program_name%type      :=     pkg_name||'sp_set_bal_CPP_strt_trm_inst';
     v_session_control                  pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_schedule_element_id              object.object_id%type;
     v_coverage_object_id               object.object_id%type;
     v_scheduled_payment_index          number;
     v_scheduled_element_index          number;
     v_element_amount                   float:= 0;
     v_include_in_payment               number;
     v_element_amount_total             float;
     v_billing_element_md_id            db_billing_element.db_billing_element_id%type;
     v_element_debit_category           number;
     v_element_debit_subcategory        number;
     v_element_credit_category          number;
     v_element_credit_subcategory       number;
     v_element_creator_poltrns          object.object_id%type;
     v_IncludeInPayScheduleTF           char(1);
     v_create_debit_tf                  char(1);
     v_create_credit_tf                 char(1);
     v_PaymentPlan_md                   constant business_variable.business_variable_id%type        :=   212015;
     v_payment_md_id                    object.object_id%type;
     v_credit_billing_account           object.object_id%type;
     v_debit_billing_account            object.object_id%type;
     v_cur_total_amount                 float;
     v_cur_total_amount_start           float;
     v_pol_applied_amount_tot           float;
     v_billing_element_md_row           db_billing_element%rowtype;
     v_payable_earned_amount            float;
     v_category_applied_amount          float;
     v_category_total_applied           float;
     v_element_final_amount             float;
     v_installment_index                number := 0;
     v_installment_list                 pkg_db_billing_modify.t_AllInstallment;
     -- Arun - Start
     v_modified_pay_plan_flag           number := 0;
     v_policy_transaction_sub_type      number := 0;
     v_pol_applied_amount_tota          float;
     v_payment_plan_parent_id           object.object_id%type;
     v_ptp_id                           object.object_id%type;
     v_pt_id                            object.object_id%type;
     v_term_id                          object.object_id%type;
     v_element_md_id                    number;
     v_total_paid_amount                float;
     v_element_balance_amount           float;
     v_billing_account_id               object.object_id%type;
     v_policy_id                        object.object_id%type;
     v_element_paid_amount              float;
     
     
     -- Arun - End


     cursor c_element_row is
     select e.db_billing_element_id,e.debit_fitem_category, e.debit_fitem_sub_category from
               db_billing_element e,
               db_payment_plan_detail a
          where
               e.db_billing_element_id=a.db_billing_element_id
               and 
               a.payment_plan_id = v_payment_md_id
               and
               e.active_tf= 'T'         -- Keerthi
               and
               e.create_debit_tf = 'T'     -- Keerthi
               and
               e.payment_schedule_tf = 'T';
  

begin
 
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...... Considering PaymentPlan  '|| in_pay_plan_id
          );

     end if;    
               
     v_payment_md_id    :=    pkg_os_object_io.fn_object_bv_get
          (
          in_session_id,
          in_transaction_id,
          in_pay_plan_id,
          v_PaymentPlan_md
          );
     v_payment_plan_parent_id      :=            pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_pay_plan_id);                  
            
     v_ptp_id   :=pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_pay_plan_id,2276904);
             
     v_pt_id    :=pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptp_id);
     
     v_term_id := pkg_os_object_io.fn_object_bv_get
               (
               in_session_id,
               in_transaction_id,
               v_pt_id,
               29728801
               );
               
     v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_pt_id);
          
     if v_payment_plan_parent_id <> v_ptp_id
     then
          v_billing_account_id  := pkg_os_object_io.fn_object_bv_path_get
          (
               in_session_id,
               in_transaction_id,
               v_payment_plan_parent_id,
               '32714824.29704646'
          );
          
     else
            
          v_billing_account_id := pkg_os_object_io.fn_object_bv_get
          (
          in_session_id,
          in_transaction_id,
          v_policy_id,
          33887946
          );
     end if;  
     
     if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_ptp_id , gbv_ptp_cpp_term_start_ind) is not null
     or pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_billing_account_id , pkg_db_constant.gbv_ba_cpp_term_start_ind) is not null
     then                                   
                    
          
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_payment_md_id  '|| v_payment_md_id||
               'v_payment_plan_parent_id'||v_payment_plan_parent_id||
               'v_ptp_id'||v_ptp_id||
               'v_pt_id:'||v_pt_id||
               'v_billing_account_id:'||v_billing_account_id
               );

          end if;   
          
          v_total_paid_amount := 0; 

         --UTXPRODUCT-315 start
         for v_element_row in  c_element_row
          loop

               v_element_md_id := v_element_row.db_billing_element_id;


               v_element_paid_amount    := 0;

              select
                  nvl((sum(fic.action_delta)*-1), 0)
              into
                  v_element_paid_amount
              from
                  dragon_fichange fic , dragon_fitem fit
              where
                  fit.policy_id= v_policy_id
              and    
                 fit.billing_account_id=v_billing_account_id 
              and 
                  fit.policy_term_id=v_term_id
            
              and
                  (    fit.fitem_type_id = pkg_db_object.gFItem_Debit
                       and
                       fic.Fitem_Transaction_Type_Id in (gFITrxType_Cash_Apply,gFITrxType_CashApply_Rev,gFITrxType_CreditApply,gFITrxType_CreditApply_Rev,gFITrxType_Disbursement,PKG_DB_FUNCTIONS.gFITrxType_WriteOff,gFITrxType_Disburse_Reversal,PKG_DB_FUNCTIONS.gBatch_AutoCashApply,gFITrxType_cashCrdTrnsfer_Rev ,PKG_DB_FUNCTIONS.gFITrxType_CashCreditTransfer,gFITrxType_CreditApp_Rev,gFITrxType_Credit_Transfer,gFITrxType_Credit_Apply_rev)
                  )
              and
                  fic.fitem_id = fit.fitem_id
             and
                  fit.fitem_category_id = v_element_row.debit_fitem_category
             and 
                  fit.fitem_sub_category_id = v_element_row.debit_fitem_sub_category     
             and 
                  fit.billing_element_md_id=v_element_row.db_billing_element_id 
                  ;

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......looping billing_md_id '|| v_element_row.db_billing_element_id||
                    'paid amount:'||v_element_paid_amount
                    );

               end if;

               v_total_paid_amount := v_total_paid_amount + NVL(v_element_paid_amount,0);

          end loop;
			
          
         /* v_total_paid_amount := fn_payplan_bal_get
                              (
                              in_session_id,
                              in_transaction_id,
                              in_chosen_payplan_id
                              );
                              
*/
          -- UTXPRODUCT-315 end                    
          if v_total_paid_amount <=0
          then
               return;
          end if; 
                                       
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_pay_plan_id,
               gObjType_ScheduledPayment,
               v_scheduled_payment_list,
               gbv_ScheduledPayment_num
          );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'number of installments '|| v_scheduled_payment_list.count
               );

          end if; 
          if v_scheduled_payment_list.count > 0 -- loop thru each payment
          then

               v_scheduled_payment_index    :=    v_scheduled_payment_list.first;

                    
               while v_scheduled_payment_index is not null
               loop
      
                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Considering PaymentPlanScheduledPayment Object ID: '
                         ||v_scheduled_payment_list(v_scheduled_payment_index)||
                         'v_total_paid_amount:'||v_total_paid_amount
                         );

                    end if;


                    if v_total_paid_amount <=0
                    then
                         return;
                    end if;     
                    v_scheduled_element_list.delete;

                    -- Get the elements for the payment
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_scheduled_payment_list(v_scheduled_payment_index),
                         gObjType_ScheduledElement,
                         v_scheduled_element_list,
                         33032448
                    );


                    if v_scheduled_element_list.count > 0
                    then

                         v_scheduled_element_index := v_scheduled_element_list.first;

                         while v_scheduled_element_index is not null loop

                              -- Loop thru each element of the installnent to see if matches the element we are on
                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... For PaymentPlanScheduledPaymenElement Objects : '
                                        ||v_scheduled_element_list(v_scheduled_element_index)||
                                        'v_total_paid_amount:'||v_total_paid_amount 
                                   );
                              end if;
                                   
                              if v_total_paid_amount <= 0
                              then   
                                   return;
                              end if;       

                              v_include_in_payment   := pkg_os_object_io.fn_object_bv_get
                                   (
                                   in_session_id,
                                   in_transaction_id,
                                   v_scheduled_element_list(v_scheduled_element_index),
                                   31975846
                                   );
                                   
                              if NVL(v_include_in_payment,0) =1
                                   then
                                   v_element_amount         :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                        in_session_id,
                                        in_transaction_id,
                                        v_scheduled_element_list(v_scheduled_element_index),
                                        gbv_element_amount
                                        );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'Before Adjusting: v_element_amount'||v_element_amount||
                                             'v_total_paid_amount:'||v_total_paid_amount
                                        );
                                   end if; 
                                                                 
                                   if v_total_paid_amount >= v_element_amount 
                                   then
                                        v_element_balance_amount := 0;
                                        v_total_paid_amount := v_total_paid_amount- v_element_amount;

                                   else
                                        v_element_balance_amount := v_element_amount-v_total_paid_amount;
                                        v_total_paid_amount :=0;
                                       
                                             
                                   end if;
                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_scheduled_element_list(v_scheduled_element_index),
                                        33028848,
                                        v_element_balance_amount
                                   );  
                                   
                                   
                                             
                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'After Adjusting: v_element_balance_amount'||v_element_balance_amount||
                                             'v_total_paid_amount:'||v_total_paid_amount
                                        );
                                   end if;                                        
                              
                              end if;          
                              -- Set the BV here     
                                        
                              
                              v_scheduled_element_index := v_scheduled_element_list.next( v_scheduled_element_index );

                         end loop;  --v_scheduled_element_index

                              
                    end if;

                    v_scheduled_payment_index     :=     v_scheduled_payment_list.next(v_scheduled_payment_index);

               end loop;     -- while v_scheduled_payment_index is not null loop

          end if;  -- if v_scheduled_payment_list.count > 0



     end if;
     exception

     when others then

     pkg_os_logging.sp_log_error
     (
     in_session_id,
     in_transaction_id,
     v_procedure_name,
     '...... Exception '||
     sqlerrm(sqlcode)
     );

     raise no_data_found;

end  sp_set_bal_CPP_strt_trm_inst;

-- UTPRODUCT-4159
function fn_sub_category_priority_get
(
     in_fitem_category_id       in        number,
     in_fitem_sub_category_id       in        number
)
return float
is

       v_subcategory_priority       float;
       v_category_priority          float;
       v_output_priority            float;



begin


     select
          sc.fitem_target_priority
     into 
          v_category_priority
     from 
          db_fitem_category sc 
     where 
          sc.db_fitem_category_id = in_fitem_category_id;

     return v_subcategory_priority;
     select
          sc.fitem_target_priority
     into 
          v_category_priority
     from 
          db_fitem_sub_category sc 
     where 
          sc.db_fitem_sub_category_id = in_fitem_sub_category_id;

    
     v_output_priority := to_number(to_char(floor(v_category_priority))||to_char(v_category_priority));

     return v_output_priority;
     
end fn_sub_category_priority_get;						 

function fn_payplan_bal_get
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_pay_plan_id                 in             object.object_id%type
)
return float
is

     v_procedure_name                   constant system_log.program_name%type      :=     pkg_name||'fn_payplan_bal_get';
     v_session_control                  pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_payment_index          number;
     v_total_paid_amount                float := 0;
     v_balance_amount                   float;
     v_initial_amount                   float;
     v_term_schedule_installment_id     object.object_id%type;
     
     --OSPRODUCT-14192 start   
     v_ptpPayer_id                      object.object_id%type;
     v_ptp_id                           object.object_id%type;
     v_pt_id                            object.object_id%type;
     v_policy_term_id                   object.object_id%type;
     v_is_inst_relevant                 number;
     v_payment_installment_list         pkg_os_object.t_object_list;
     v_payment_installment_index        number;
     v_object_type_id                   object_type.object_type_id%type;
     v_PTAssociatedPayer_list           pkg_os_object.t_object_list;
     v_PTAssociatedPayer_index          number;
     v_chosen_payer                     object.object_id%type    :=   null;
     --OSPRODUCT-14192 end
     
begin

 
     --OSPRODUCT-14192 start
          
     -- Get obejct type
     v_object_type_id    :=   pkg_os_object.fn_object_type_get
                              (
                                   in_Session_id,
                                   in_transaction_id,
                                   in_pay_plan_id
                              );
     
     if v_object_type_id =  PKG_DB_MULTIPAYER.gObjType_PTPPayerPaymentPlan --3348124--PTPPayerPaymentPlan
     then
          v_ptpPayer_id  :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_pay_plan_id);
          v_ptp_id  :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptpPayer_id);
          v_pt_id   :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptp_id);
          v_policy_term_id    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_pt_id,gbv_PolicyTrxRefPolicyTerm);
          
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_policy_term_id,
               PKG_DB_MULTIPAYER.gObjType_PolicyTermAccPayer ,--3349024,--PTAssociatedPayer
               v_PTAssociatedPayer_list
          );
          if v_PTAssociatedPayer_list.count > 0 -- loop thru each payment
          then
               v_PTAssociatedPayer_index    :=    v_PTAssociatedPayer_list.first;
               while v_PTAssociatedPayer_index is not null
               loop
                    if   pkg_os_object_io.fn_object_bv_get
                         (    in_session_id,
                              in_transaction_id,
                              v_PTAssociatedPayer_list(v_PTAssociatedPayer_index),
                              PKG_DB_PROFILES.gbv_Ref_TermPayerEntity
                         ) =  pkg_os_object_io.fn_object_bv_get
                              (    in_session_id,
                                   in_transaction_id,
                                   v_ptpPayer_id,
                                   PKG_DB_PROFILES.gbv_Ref_TermPayerEntity
                              )
                    then
                         v_chosen_payer :=   v_PTAssociatedPayer_list(v_PTAssociatedPayer_index);
                    end if;
                    v_PTAssociatedPayer_index   :=   v_PTAssociatedPayer_list.next(v_PTAssociatedPayer_index);
               end loop;
          end if;
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......PayPlan ID : '|| in_pay_plan_id   ||
                    ' Ptp Payer ID : '   || v_ptpPayer_id  ||
                    ' PTP ID : '         || v_ptp_id         ||
                    ' Policy Transaction ID : '|| v_pt_id ||
                    ' Policy Term ID : '|| v_policy_term_id ||
                    ' Chosen Payer : ' || v_chosen_payer
               );
          end if;          
     else 
          v_ptp_id  :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_pay_plan_id);
          v_pt_id   :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptp_id);
          v_policy_term_id    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_pt_id,gbv_PolicyTrxRefPolicyTerm);
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......PayPlan ID : '|| in_pay_plan_id   ||
                    ' PTP ID : '         || v_ptp_id         ||
                    ' Policy Transaction ID : '|| v_pt_id ||
                    ' Policy Term ID : '|| v_policy_term_id
               );
          end if;
     end if;
     
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_policy_term_id,
          gObjType_ScheduledInstallment,
          v_payment_installment_list
     );
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'number of installments '|| v_payment_installment_list.count
          );
     end if; 
     
     if v_payment_installment_list.count > 0 -- loop thru each payment
     then
          v_payment_installment_index    :=    v_payment_installment_list.first;
           
          while v_payment_installment_index is not null
          loop          
               v_is_inst_relevant  :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payment_installment_list(v_payment_installment_index),
                                             PKG_DB_BILLING_MODIFY.gbv_Install_IsCrrntPayPlanInst --33820646 --current payment plan
                                        ); 
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Considering installment ID '|| v_payment_installment_list(v_payment_installment_index) ||
                         ' Is this current installment ? ' || v_is_inst_relevant
                    );
               end if; 
               if v_chosen_payer is not null 
               then
                    if v_chosen_payer = pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,
                                        v_payment_installment_list(v_payment_installment_index),PKG_DB_MULTIPAYER.gbv_Installment_Ref_PTermPayer)--Belongs to Payer                                     
                    then
                         v_is_inst_relevant  :=   1;
                    else
                         v_is_inst_relevant  :=   2;
                    end if;
               end if;
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Considering installment ID '|| v_payment_installment_list(v_payment_installment_index) ||
                         ' Is this installment relevant? ' || v_is_inst_relevant
                    );
               end if;                
               
               
               if nvl(v_is_inst_relevant,0) = 1
               then
                 /*   v_initial_amount    :=   NVL(pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payment_installment_list(v_payment_installment_index),
                                                  pkg_db_constant.gbv_Installment_initial_amt
                                             ),0);

                    v_balance_amount    :=   NVL(pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payment_installment_list(v_payment_installment_index),
                                                  pkg_db_billing_modify.gbv_Installment_balance
                                             ),0);
                  */


                    select
                         nvl(sum(initial_amount),0)
                    into
                         v_initial_amount
                    from
                         dragon_fitem
                    where
                         fitem_type_id = pkg_db_functions.gFItemType_Debit
                    and
                         fitem_category_id not in  ( pkg_db_functions.gFItem_Category_Cash, pkg_db_functions.gFItem_Category_Writeoff, pkg_db_functions.gFItem_Category_Comm, pkg_db_functions.gFItem_Category_DefPremComm, pkg_db_functions.gFitem_category_LossGain)--OSPRODUCT-12759
                    and
                         fitem_sub_category_id not in ( pkg_db_functions.gFitem_SubCat_PLRRetroAdj) --PMADEV-565 exclude PLR Retro Adj
                    and
                         fitem_transaction_type_id <>  pkg_db_functions.gFITransactionType_Reversal --OSBILLING-7354
                    and
                         installment_id =  v_payment_installment_list(v_payment_installment_index)

                    and billing_element_md_id is not null ;


                    select
                         nvl(sum(balance),0)
                    into
                         v_balance_amount
                    from
                         dragon_fitem f
                    where
                          policy_id= pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_policy_term_id)   --OSPRODUCT-1764
                     and
                         fitem_type_id = pkg_db_functions.gFItemType_Debit
                    and
                         fitem_category_id not in  (pkg_db_functions.gFItem_Category_Cash,pkg_db_functions.gFItem_Category_Writeoff,pkg_db_functions.gFItem_Category_Comm,pkg_db_functions.gFItem_Category_DefPremComm,pkg_db_functions.gFitem_category_LossGain)--OSPRODUCT-12759
                    and
                         fitem_sub_category_id not in (pkg_db_functions.gFitem_SubCat_PLRRetroAdj) --PMADEV-565 exclude PLR Retro Adj
                    and
                         installment_id =  v_payment_installment_list(v_payment_installment_index)

                        and f.billing_element_md_id is not null ;


                    
                    v_total_paid_amount := v_total_paid_amount + (v_initial_amount-v_balance_amount);
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Considering PaymentPlanScheduledPayment Object ID: '||v_payment_installment_list(v_payment_installment_index)||
                              ' initial amount : '||v_initial_amount||
                              ' balance_amount : '||v_balance_amount||
                              ' v_total_balance_amount : '||v_total_paid_amount
                         );
                    end if;
               end if;
               v_payment_installment_index   :=   v_payment_installment_list.next(v_payment_installment_index);
          end loop;
     end if;

return v_total_paid_amount;
     
end fn_payplan_bal_get;	

--UTXPRODUCT-315
function fn_term_has_credits
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_ptp_id                          in             object.object_id%type
)
return char
is

     v_procedure_name                   constant system_log.program_name%type      :=     pkg_name||'fn_term_has_credits';
     v_session_control                  pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_scheduled_payment_list           pkg_os_object.t_object_list;
     v_scheduled_payment_index          number;
     v_total_paid_amount                float := 0;
     v_balance_amount                   float;
     v_initial_amount                   float;
     v_term_schedule_installment_id     object.object_id%type;

     --OSPRODUCT-14192 start
     v_policy_id                        object.object_id%type;
     v_ptp_id                           object.object_id%type;
     v_pt_id                            object.object_id%type;
     v_policy_term_id                   object.object_id%type;
     v_is_inst_relevant                 number;
     v_payment_installment_list         pkg_os_object.t_object_list;
     v_payment_installment_index        number;
     v_object_type_id                   object_type.object_type_id%type;
     v_PTAssociatedPayer_list           pkg_os_object.t_object_list;
     v_PTAssociatedPayer_index          number;
     v_chosen_payer                     object.object_id%type    :=   null;
     v_payment_md_id                    number;
     v_element_md_id                    object.object_id%type;     
     v_amount                           float:=0;
     v_product_id                       object.object_id%type;   
     --OSPRODUCT-14192 end


begin

          
     v_pt_id    :=pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_ptp_id);
     
     v_policy_term_id := pkg_os_object_io.fn_object_bv_get
               (
               in_session_id,
               in_transaction_id,
               v_pt_id,
               29728801
               );
               
     v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_pt_id);
                    
          select
               (nvl(sum(balance),0))- (sum(nvl( CURR_DISBURSEMENT_AMOUNT,0)))--OSPRODUCT-3715
          into
               v_amount
          from
               dragon_fitem df
               --20180814 Cheryl osbilling-4755
               --  join
               --       table(v_billing_accont_tab) ba
               --  on
               --       (ba.id = dragon_fitem.billing_account_id)
          where
               policy_id = v_policy_id
          and 
               policy_term_id=v_policy_term_id
          and df.billing_element_md_id is not null     
          and
               value_stream is null -- [KR]
               -- and
               -- billing_account_id = v_cust_billing_acc_id
          and
               fitem_category_id   not in (PKG_DB_FUNCTIONS.gFItem_Category_Cash,PKG_DB_FUNCTIONS.gFITEM_Category_Comm,PKG_DB_FUNCTIONS.gFItem_Category_DefPremComm, PKG_DB_FUNCTIONS.gFItem_Category_Disburse)--GCNA-2813  --20180820 Cheryl GCNA-3105 Add 5046 disbursement
          and
               nvl(fitem_sub_category_id,0) <> PKG_DB_FUNCTIONS.gFItem_SubCat_PayPlanChange
          and
               balance <=-0.01
               -- 20180814 Cheryl osbilling-4755
               -- OSPRODUCT-2431          adding gv_department_of_surcharge
          and
               nvl(df.billing_account_type_id,1501) not in (1501, 1946,1514, PKG_DB_FUNCTIONS.gv_department_of_surcharge)--GCNA-2813
          --and
               --df.disbursement_batch_id is null -- OSPRODUCT-3712

          ;

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'credit amount:'||v_amount
               );

          end if;
               
          if v_amount <0
               then
                    return 'T';

         end if;

return 'F';

end fn_term_has_credits;

--OSPRODUCT-21916
function fn_check_start_term_indicator(
     in_session_id              in        object.object_id%type,
     in_transaction_id          in        object.object_id%type,
     in_ptp_id                  in        object.object_id%type,
     in_policy_id               in        object.object_id%type
)
return number
is

     v_procedure_name        constant system_log.program_name%type      :=     pkg_name||'fn_check_start_term_indicator';
     v_session_control       pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_ptp_id                object.object_id%type := 0; 
     v_pol_trx_subtype_id    object.object_id%type;   
     v_policy_trx_id         object.object_id%type;   
     v_start_term_flag_old   number;
     v_start_term_flag_new   number;
     v_return                number    :=   0;

begin
     begin
          with latestptp as 
               (
                    select 
                         nvl(max(dpt.ptp_id), 0) ptp_id
                    from  
                         dragon_policy_trx dpt
                    where
                         policy_id = in_policy_id --13602465258
                    and 
                         policy_trx_object_state_id = pkg_db_late_process.gPolicyTrxProcessed  ---106 -- processed
                    and 
                         policy_trx_type_id = gtrxtype_endorse -- endorsement
                         and 
                         ( policy_trx_subtype_id = gchangepaymentplan
                               or ( policy_trx_subtype_id = gTrxSubType_Endorsement
                                    and pkg_os_object_io.fn_object_bv_get(
                                                                             in_session_id, 
                                                                             in_transaction_id, 
                                                                             dpt.ptp_id, 
                                                                             pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd ---31934046
                                                                          ) = 1 
                                  ) 
                         )
               )
          select
               nvl (dpt.ptp_id, 0),
               dpt.policy_trx_subtype_id,
               dpt.policy_trx_id
          into
               v_ptp_id, 
               v_pol_trx_subtype_id, 
               v_policy_trx_id
          from
               dragon_policy_trx   dpt,
               latestptp           ltp1
          where
               dpt.policy_id = in_policy_id ---13602465258
          and 
               dpt.ptp_id = ltp1.ptp_id; --- osproduct-22399
               
          exception
               when others then null;
          end;

     if nvl(v_ptp_id, 0) = 0 THEN
          v_return := 1;
          
     else
          v_start_term_flag_old :=  nvl ( pkg_os_object_io.fn_object_bv_get(
                                                                      in_session_id, 
                                                                      in_transaction_id, 
                                                                      v_ptp_id, 
                                                                      gbv_ptp_cpp_term_start_ind --32907548 
                                                                      ), 1 );
     
          v_start_term_flag_new :=  nvl ( pkg_os_object_io.fn_object_bv_get(
                                                                      in_session_id, 
                                                                      in_transaction_id, 
                                                                      in_ptp_id, 
                                                                      gbv_ptp_cpp_term_start_ind --32907548 
                                                                      ), 1 ); 

          if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' ................ Input PTP:: '|| in_ptp_id ||
                    ', Max PTP:: ' || v_ptp_id ||
                    ', Trxn SubType:: ' || v_pol_trx_subtype_id ||
                    ', Policy trxn Id:: ' || v_policy_trx_id ||
                    ', Old term indicator: : '  || v_start_term_flag_old ||
                    ', New term indicator: ' || v_start_term_flag_new 
               );
          end if;

               if v_start_term_flag_old <> v_start_term_flag_new
               then
                    v_return := 0;
               else
                    v_return := 1;
     
               end if;
               
          end if;

     return v_return;

end fn_check_start_term_indicator;

--OSPRODUCT-21916

-- OSPRODUCT-22131 Start 
function fn_future_inst_invoiced_tf
(
     in_session_id                 object.object_id%type,
     in_transaction_id             object.object_id%type,
     in_current_payment_id         object.object_id%type,
     in_current_instalment_id      object.object_id%type
)    return number
is

     v_procedure_name        constant system_log.program_name%type      :=     pkg_name||'fn_future_inst_invoiced_tf';
     v_session_control       pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_future_inst_invoiced_tf          number := 2;
     v_scheduled_payment_index          number;
     v_current_payment_id               object.object_id%type;
     v_current_installment_id           object.object_id%type;
     v_invoiced_tf                      number default 2;
     v_break_tf                         char(1) := 'F';   
     v_in_current_payment_due_date      date; 
     v_current_payment_due_date         date;                    
     
begin
               
     if pkg_db_payplan_modify.g_payment_cache.count > 0
     then 
          
          v_in_current_payment_due_date      := to_date
                                             (
          
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_current_payment_id,
                                                       gbv_billing_due_date 
                                                  ),pkg_os_constant.DragonDateFormatDefault
                                             ); 
                                                    
                                                    
     
          v_scheduled_payment_index   := pkg_db_payplan_modify.g_payment_cache.first;                                          
          
          while v_scheduled_payment_index is not null
          and   v_break_tf  = 'F'
          loop     
                  
               v_current_payment_id            := pkg_db_payplan_modify.g_payment_cache(v_scheduled_payment_index);      
               
               v_current_payment_due_date      := to_date
                                                  (
                                                            
                                                       pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_current_payment_id,
                                                            gbv_billing_due_date 
                                                       ),pkg_os_constant.DragonDateFormatDefault
                                                  ); 
                             
               if v_session_control.gLogging_Full then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..v_current_payment_id: '|| v_current_payment_id ||
                         ',v_current_payment_due_date:' ||v_current_payment_due_date||
                         ',in_current_payment_id: '|| in_current_payment_id ||
                         ',v_in_current_payment_due_date:'||v_in_current_payment_due_date||
                         ',v_break_tf :'|| v_break_tf
                    );
               end if;
                       
               if trunc(v_current_payment_due_date) > trunc(v_in_current_payment_due_date)
               then
                    
                    v_current_installment_id      := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_current_payment_id,
                                                       gbv_ScheduledRefInstallment--29705446
                                                  );
                    
                    if v_current_installment_id is not null 
                    then            
                         v_invoiced_tf              := pkg_os_object_io.fn_object_bv_get
                                                       (   
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_current_installment_id,
                                                            pkg_db_payplan_modify.gbv_installment_invoiced_tf
                                                       );
                                                                
                         if nvl(v_invoiced_tf,2) =  1
                         then                             
                                        
                              v_future_inst_invoiced_tf := 1;
                              v_break_tf := 'T';
                                                                                      
                                     
                         end if; 
                    else 
                          
                          v_break_tf := 'T';
                          
                    end if;      
                    
                    if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..v_current_payment_id: '|| v_current_payment_id||
                         ',v_current_installment_id: '|| v_current_installment_id ||
                         ',v_invoiced_tf: ' || v_invoiced_tf ||
                         ',v_break_tf: '||v_break_tf
                    );
                    end if;
                           
               end if; 
 
              -- Advance the index value to reach the next interation 
               v_scheduled_payment_index       := pkg_db_payplan_modify.g_payment_cache.next( v_scheduled_payment_index );
                
          end loop; 
               
     end if; 
     
      if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..v_future_inst_invoiced_tf: '|| v_future_inst_invoiced_tf
          );
     end if;
     
     return v_future_inst_invoiced_tf;
  
end fn_future_inst_invoiced_tf;
--OSPRODUCT-22131 End

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     Initialize package cache information ...
--
----------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-25266 Start
function fn_billingaccount_found_tf
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,	
     in_policy_image_id            in        object.object_id%type   
)
return char
is
	 
      v_procedure_name        constant system_log.program_name%type      :=     pkg_name||'fn_billingaccount_found_tf';
      v_session_control       pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

      v_chosen_payment_plan                  object.object_id%type;
	 v_start_installment_number             number := 1;
	 v_product_id                           payment_plan_detail.pd_product_id%type;
      v_filing_id                            payment_plan_detail.pd_filing_id%type;
	 v_payment_plan_md_id                   payment_plan.payment_plan_id%type;
      v_payment_plan_md_row                  getPaymentPlanList%rowtype;--OSPRODUCT-3108
      v_billing_element_md_row               db_billing_element%rowtype;
      v_policy_transaction_id                object.object_id%type;
      v_policy_trx_effective_date            date;
      v_stub_payment_id                      number;
      v_modifying_payment_plan               object.object_id%type;
      v_transaction_spread_tf                char;
      v_chosen_payplan_id                    object.object_id%type;  
      v_coverage_object_type_id              object_type.object_type_id%type; 
      v_policy_object_type_id                object_type.object_type_id%type; 
      v_coverage_object_list                 pkg_os_object.t_object_list;
      v_coverage_object_index                number;  
      v_debit_billing_account_id             object.object_id%type;
      v_credit_billing_account_id            object.object_id%type;
      v_coverage_object_id                   object.object_id%type;
      v_message                              object_bv_value.business_variable_value%type := null;       /*OSPRODUCT-3877*/
      v_policy_number                        object_bv_value.business_variable_value%type;   /*OSPRODUCT-3536*/
      v_billing_account_id                   object.object_id%type;
      v_element_name                         object_bv_value.business_variable_value%type;
      v_return_value                         char(1) := 'T';
      v_payment_plan_list                    pkg_os_object.t_object_list;
      v_stat_object_list                     pkg_os_object.t_object_list;--OSPRODUCT-14266
      v_stat_count                           number := 0; --OSPRODUCT-14266
      v_stat_record                          dragon_transaction_stats%rowtype;
      v_coverage_name                        pc_coverage.pc_coverage_name%type;
      v_element_total_change_amount          number;
      v_element_total_earned_amount          number;

      v_element_total_current_amount         number;
      
      cursor c_payment_plan_detail
      (
          in_payment_plan_id in payment_plan_detail.payment_plan_id%type,
          in_product_id      in payment_plan_detail.pd_product_id%type,
          in_filing_id       in payment_plan_detail.pd_filing_id%type
      )
      is
      select a.db_billing_element_id,
             b.create_debit_tf,
             b.create_credit_tf,
             b.billing_element_name,
             b.debit_billing_account_path,
             b.credit_billing_account_path,
             b.payer_billing_account_path as payer_billing_account_path,  -- #MP
             b.rule_to_debit_billing_account as rule_to_debit_billing_account, -- OSBILLING-7680
             c.pc_coverage_id
      from   db_payment_plan_detail a, db_billing_element b, db_billing_element_map c
     where   a.payment_plan_id = in_payment_plan_id
       and   a.db_billing_element_id = b.db_billing_element_id
       and   b.db_billing_element_id = c.db_billing_element_id
       and   (a.pd_product_id in
             (in_product_id, pkg_os_reference_lookup.gDefaultProductID) or
             a.pd_product_id is null)
       and   (a.pd_filing_id <= in_filing_id or a.pd_filing_id is null)
       and   (a.last_pd_filing_id >= in_filing_id or
             a.last_pd_filing_id is null)
       and   nvl(b.active_tf, 'T') = 'T'
       and   nvl(a.active_tf, 'T') = 'T'
     order by
          a.apply_order, a.db_billing_element_id;
          

begin
     
     v_policy_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_policy_image_id );
     
     v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_policy_image_id
                                );
     
     v_product_id := pkg_os_product.fn_object_product_get
                     ( 
                          in_session_id, 
                          in_transaction_id, 
                          in_policy_image_id
                     );
								  
	v_filing_id := pkg_os_product.fn_policy_filing_get 
                          ( 
                               in_session_id, 
                               in_transaction_id, 
                               in_policy_image_id, 
                               v_product_id 
                          );
                          
     pkg_os_object_search.sp_object_children_of_type_get
     (
             in_session_id,
             in_transaction_id,
             in_policy_image_id,
             pkg_db_payplan_modify.gObjType_PayPlan,
             v_payment_plan_list
     ); 
                                         
     v_chosen_payplan_id := v_payment_plan_list(v_payment_plan_list.first);
                                
     v_payment_plan_md_id  := pkg_os_object_io.fn_object_bv_get
                                (
                                      in_session_id,
                                      in_transaction_id,
                                      v_chosen_payplan_id,
                                      pkg_os_constant_bv.gbv_PaymentPlanID
                                ); 
                                
     if v_session_control.gLogging_Full
     then
                              
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '...Payment Plan: ' || v_chosen_payplan_id ||
              '...Policy Image: ' || in_policy_image_id ||
              '...Payplan MD ID: ' || v_payment_plan_md_id
         );

     end if;
                                
     for r_payment_plan_detail in c_payment_plan_detail( v_payment_plan_md_id, v_product_id, v_filing_id ) loop
          
          select
               pc_coverage_object_type_id
          into
               v_coverage_object_type_id
          from
               pc_coverage
          where
               pc_coverage_id = r_payment_plan_detail.pc_coverage_id;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Searching for instances of Coverage ObjectTypeID:'||pkg_os_object_type.fn_object_type_name_get( v_coverage_object_type_id ) );
          end if;

          v_coverage_object_list.delete;

          if pkg_os_object_search.fn_object_type_equivalent_tf( v_coverage_object_type_id, v_policy_object_type_id ) = 'T'
          then

               v_coverage_object_list(1) := in_policy_image_id;

          else

               --
               --   If both types are different then get all instances of Coverage Object Type that are children of the Input Context Object Type
               --

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_coverage_object_type_id,
                    v_coverage_object_list,
                    null,
                    true,
                    false --- Do not exclude soft-deleted objects ...
               );

               if v_coverage_object_list.count = 0
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Unable to find instances of ObjectTypeID:'||v_coverage_object_type_id );

               end if;

          end if; -- is the coverage object the same as the policy-image object?

          --
          --   Loop through each Coverage Object instance and create scheduled payment elements ...
          --

          v_coverage_object_index := v_coverage_object_list.first;

          while v_coverage_object_index is not null loop
               
               v_coverage_object_id := v_coverage_object_list(v_coverage_object_index);
               
               v_billing_element_md_row := pkg_db_payplan_modify.fn_billing_element_row
                                                (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       r_payment_plan_detail.db_billing_element_id
                                                );
                                           
               if not pkg_os_object_type.fn_object_persistence_type_get(in_session_id,in_transaction_id,PKG_OS_POLICY_STAT.gObjType_PolicySTAT)= pkg_os_object_type.gPersistence_Relational
               then
                    
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_transaction_id,
                         PKG_OS_POLICY_STAT.gObjType_PolicySTAT,
                         v_stat_object_list,
                         null,
                         true,
                         false
                    );
                    
               end if;
               
               v_stat_count := v_stat_object_list.count;

               if v_session_control.gLogging_Full
               then
                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,'... Considering CoverageID:'||r_payment_plan_detail.pc_coverage_id
                   );

               end if;

               --OSPRODUCT-14266 start
               if v_stat_count > 0
               then
                         
                    v_stat_record := pkg_os_policy_stat.fn_get_stat_record_raw
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_transaction_id,
                                             pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, v_coverage_object_id ),
                                             null,
                                             r_payment_plan_detail.pc_coverage_id,
                                             v_stat_object_list
                                        );
                                             
               else
                         
                    v_stat_record :=  pkg_os_policy_stat.fn_get_stat_record_raw
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_transaction_id,
                                             pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id,v_coverage_object_id ),
                                             null,
                                             r_payment_plan_detail.pc_coverage_id
                                        );
               end if;
               --OSPRODUCT-14266 end

               v_coverage_name                    := v_stat_record.coverage_name;--OSBILLING-6800
               v_element_total_current_amount     := v_stat_record.current_amount; 
               v_element_total_change_amount      := v_stat_record.change_amount;
               v_element_total_earned_amount      := v_stat_record.earned_amount;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name, '...... Coverage Totals'
                         ||' Current Amount: ' ||v_element_total_current_amount
                         ||' Change Amount: '  ||v_element_total_change_amount
                         ||' Earned Amount: '  ||v_element_total_earned_amount 
                         ||' Stats change amount: '||v_stat_record.change_amount
                    );
               end if;

               if not (v_element_total_current_amount = 0 and v_element_total_change_amount = 0) then
               
                    v_element_name := v_billing_element_md_row.billing_element_name;
                    
                    if v_session_control.gLogging_Full
                    then
                                   
                        pkg_os_logging.sp_log
                        (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '... Coverage Object ID: ' || v_coverage_object_id
                        );

                    end if;
                              
                    if v_billing_element_md_row.create_debit_tf = 'T'
                    then

                         --
                         --  Check if Payment Element is Splittable and then identify the Debit Billing Account based on the relevant columns of DB_BILLING_ELEMENT
                         --                   
                         if v_billing_element_md_row.rule_to_debit_billing_account is not null
                         then

                              v_debit_billing_account_id := pkg_os_exp.fn_evaluate_expression
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_coverage_object_id,
                                                                 v_billing_element_md_row.RULE_TO_DEBIT_BILLING_ACCOUNT
                                                            );

                              if v_session_control.gLogging_Full
                              then
                                   
                                  pkg_os_logging.sp_log
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_procedure_name,
                                       '... Using Rule: ' || v_billing_element_md_row.RULE_TO_DEBIT_BILLING_ACCOUNT
                                  );

                              end if;

                         else

                              --
                              -- Get from Path
                              --

                              v_debit_billing_account_id := pkg_os_object_io.fn_object_bv_path_get
                                                                (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      v_coverage_object_id,
                                                                      v_billing_element_md_row.debit_billing_account_path
                                                                );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Using Path: ' || v_billing_element_md_row.debit_billing_account_path
                                   );

                              end if;


                         end if; -- Debit Billing Account - Rule or Path

                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Billing Element Name: ' || v_element_name ||
                                   ', Debit Billing Account ID: ' || v_debit_billing_account_id
                              );

                         end if;

                         --     end if; -- Debit Billing Element

                         -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
                         if v_debit_billing_account_id is null Then
                              
                              if v_session_control.gLogging_Full
                              then
                                   
                                   pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '... Unable to fnd Debit Billing Account ID '
                                             || ' Billing Element Name: ' || v_element_name
                                             || ' System could not find the billing account to create the debit entry for the  Billing Element ID - '
                                             || v_billing_element_md_row.db_billing_element_id
                                        );
                                   
                              end if;
                                   
                              v_message := 'Unable to find the Debit Billing Account to create the debit entry for the Billing Element ID - '|| v_billing_element_md_row.db_billing_element_id || ' Billing Element Name - '|| v_element_name;
                              v_return_value := 'F';
                              exit;
                            
                        end if;
                        
                    end if; -- Debit Billing Element

                    --
                    -- For CREDIT Payment Schedule Element
                    --

                    if v_billing_element_md_row.create_credit_tf = 'T'
                    then
                         --
                         -- Check if there is a Rule or a Path to identify the Debit Billing Account
                         --

                         if v_billing_element_md_row.rule_to_credit_billing_account is not null
                         then

                              v_credit_billing_account_id    :=   pkg_os_exp.fn_evaluate_expression
                                                                (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      v_coverage_object_id,
                                                                      v_billing_element_md_row.RULE_TO_CREDIT_BILLING_ACCOUNT
                                                                );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Using Rule: ' || v_billing_element_md_row.RULE_TO_CREDIT_BILLING_ACCOUNT
                                   );

                              end if;


                         else

                              --
                              -- Get from Path
                              --

                              v_credit_billing_account_id    :=   pkg_os_object_io.fn_object_bv_path_get
                                                                (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      v_coverage_object_id,
                                                                      v_billing_element_md_row.credit_billing_account_path
                                                                );

                              if v_session_control.gLogging_Full
                              then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Using Path: ' || v_billing_element_md_row.credit_billing_account_path
                                   );

                              end if;


                         end if; -- Credit Billing Account - Rule or Path

                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Billing Element Name: ' || v_element_name||
                                   ', Credit Billing Account ID: ' || v_credit_billing_account_id
                              );

                         end if;

                         If v_credit_billing_account_id is null Then
                              
                              if v_session_control.gLogging_Full
                              then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Unable to find Credit Billing Account '
                                        || ' Billing Element Name: ' || v_element_name
                                        || ' System could not find the billing account to create the credit entry for the  Billing Element ID - '
                                        || v_billing_element_md_row.db_billing_element_id
                                   );
                              
                              end if;
                              
                              v_message := 'Unable to find the Credit Billing Account to create the credit entry for the Billing Element ID - '|| v_billing_element_md_row.db_billing_element_id || ' Billing Element Name - '|| v_element_name; 
            
                              v_return_value := 'F';
                              
                              exit;
                              
                        end if;
                   
                    end if;
                    
               else
                    
                    if v_session_control.gLogging_Full
                    then
                         
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name, 
                              '.. Skipping the validation for the billing element: ' || v_billing_element_md_row.billing_element_name ||
                              '.. Coverage ID: ' || r_payment_plan_detail.pc_coverage_id
                         );
                         
                    end if;
                    
               end if;

               v_coverage_object_index := v_coverage_object_list.next(v_coverage_object_index);
               
          end loop; 
          
          if v_return_value = 'F' then
               
               if v_session_control.gLogging_Full
               then
                              
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Exit'
                    );
                         
               end if;
               
               exit;
               
          end if;  
	
     end loop;
     
     if v_message is not null then
          
     
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               pkg_db_payplan_modify.gbv_BillingResponse_ErrorMessage, --- 34467748 Billing Response Error Message
               v_message
          );
     
     end if;
     
     return v_return_value;
     --return 'T';

end fn_billingaccount_found_tf;
--OSPRODUCT-25266 End
------------------------------------------------------------------------------------
-- start OSPRODUCT-32901
function  fn_element_amount_get                    
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_coverage_id                     in        pc_coverage.pc_coverage_id%type,
     in_change_tf                       in        char default 'F',   -- T - return change amount, F - return total amount     
     in_policy_image_id                 in        object.object_id%type     
)
return     number is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'fn_element_amount_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_stat_record                      dragon_transaction_stats%rowtype;     
     v_coverage_object_type_id          object.object_id%type;
     v_policy_transaction_id            object.object_id%type;
     v_stat_object_list                 pkg_os_object.t_object_list;
     v_stat_count                       number := 0; 
     v_coverage_object_list             pkg_os_object.t_object_list;
begin

	v_policy_transaction_id       :=   pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_image_id,
                                             pkg_os_constant.gobjType_PolicyTransaction
                                        );

     if v_session_control.gLogging_Full
     then
       pkg_os_logging.sp_log
       (
      in_session_id,
      in_transaction_id,
      v_procedure_name,'... v_policy_transaction_id:' || v_policy_transaction_id
       );

     end if;

	
	if not pkg_os_object_type.fn_object_persistence_type_get(in_session_id,in_transaction_id,PKG_OS_POLICY_STAT.gObjType_PolicySTAT)= pkg_os_object_type.gPersistence_Relational
		then
                    
			pkg_os_object_search.sp_object_children_of_type_get
			(
				 in_session_id,
				 in_transaction_id,
				 v_policy_transaction_id,
				 PKG_OS_POLICY_STAT.gObjType_PolicySTAT,
				 v_stat_object_list,
				 null,
				 true,
				 false
			);
                    
      end if;
               
     v_stat_count := v_stat_object_list.count;

     if v_session_control.gLogging_Full
     then
	     pkg_os_logging.sp_log
	     (
			in_session_id,
			in_transaction_id,
			v_procedure_name,'... v_stat_count:' || v_stat_count
	     );

     end if;
     
        select
               pc_coverage_object_type_id
            into
               v_coverage_object_type_id
            from
               pc_coverage
            where
               pc_coverage_id = in_coverage_id;
               
               

      pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_image_id,
                    v_coverage_object_type_id,
                    v_coverage_object_list,
                    null,
                    true,
                    false --- Do not exclude soft-deleted objects ...
               );
               
               

     if v_stat_count > 0
     then
               
          v_stat_record := pkg_os_policy_stat.fn_get_stat_record_raw
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, v_coverage_object_list(v_coverage_object_list.first) ),
                                   null,
                                   in_coverage_id,
                                   v_stat_object_list
                              );
                                   
     else
               
          v_stat_record :=  pkg_os_policy_stat.fn_get_stat_record_raw
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id,v_coverage_object_list(v_coverage_object_list.first) ),
                                   null,
                                   in_coverage_id
                              );
     end if;

         if v_session_control.gLogging_Full
         then
              pkg_os_logging.sp_log
              (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... v_policy_transaction_id :'|| v_policy_transaction_id ||
                    '... v_coverage_object_type_id :'|| v_coverage_object_type_id ||
                    '... v_stat_record.change_amount :'|| v_stat_record.change_amount ||
                    '... v_stat_record.current_amount :'|| v_stat_record.current_amount ||
                    '...  v_coverage_object_list(v_coverage_object_list.first) :' ||
                    v_coverage_object_list(v_coverage_object_list.first) ||
                    '... fn_object_utemplate_get :' ||
                    pkg_os_policy_endorsement.fn_object_utemplate_get( in_session_id, in_transaction_id, v_coverage_object_list(v_coverage_object_list.first) )
              );
          end if;
		
     if in_change_tf = 'T'
     then
	     return   v_stat_record.change_amount;
     else
	     return  v_stat_record.current_amount;
     end if;
         

end fn_element_amount_get;
------------------------------------------------------------------------------------
--Kiran start OSPRODUCT-29817
--   %NAME
--        sp_element_associate
--
--   %USAGE
--   Procedure to set the relationship between the billing elements for the given payment plan within the policy transaction.
--
--   %ALGORITHM
--   1. Loop the records from DB_ELEMENT_ASSOCIATON table for a given product
--	   a. Loop the billing elements for the payment plan within the policy transaction.
--         i. Identify the billing and offset elements which matches with DB_ELEMENT_ASSOCIATON records
--         ii.Associate the relationship between the billing and offset elements on the element BV whcih is mapped in the metadata

--	Exceptions
--   1. Throw exception when we have duplicate records in DB_ELEMENT_ASSOCIATON unless the element bv and fitem bv are different
--   2. Throw exception when we have the same element mapped as offset element in DB_ELEMENT_ASSOCIATON.
--

--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_product_id                       Product Id
--   %PARAM    in_policy_image_id                  Policy Image Id
--   %PARAM    in_policy_trx_id                    Policy transaction Id
--   %PARAM    in_payment_plan_id                  Payment plan
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_element_associate
(
     in_session_id                in object.object_id%type,
     in_transaction_id            in object.object_id%type,
     in_product_id                in object.object_id%type,
     in_policy_image_id           in object.object_id%type,
     in_policy_trx_id             in object.object_id%type,
     in_payment_plan_id           in object.object_id%type
     
) 
as
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_element_associate';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policy_trx_subtype_id            pd_transaction_sub_type.pd_transaction_sub_type_id%type;
     
     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch_index                   number;
     
     v_scheduled_element_list           pkg_os_object.t_object_list;
     v_scheduled_element_index          number;
               
     v_scheduled_element_md_id          number;
     v_element_relation_id              number;
     v_associated_element_relation_id   number;
     v_element_created_by               number;
     
     v_fitem_relation_bv_store          number;
     v_element_relation_bv_store        number;

     v_count                            number default 0;
     v_db_billing_element_id            number;
     v_element_debit_credit             number;
     v_db_billing_offset_element_id     number;
     v_offset_debit_credit              number;
     v_element_bv_path                  db_element_association.element_bv_path%type;
     v_financial_bv_path                db_element_association.financial_bv_path%type;
     v_pd_product_id                    number;
     v_active                           char;
     
     duplicate_records                  exception;
     same_elements                      exception;
 
     -- Cursor for getting the Elements association for a given product.
     cursor c_element_association 
     is
          select
               dea.db_element_association_id,
               dea.db_billing_element_id,
               dea.element_debit_credit,
               dea.db_billing_offset_element_id,
               dea.offset_debit_credit,
               dea.element_bv_path,
               dea.financial_bv_path
          from
               db_element_association dea
          where
               dea.pd_product_id = in_product_id
          and 
               active = 'T'
          order by
               dea.db_billing_element_id,
               dea.db_element_association_id;

          
begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Identifying the schedule Payment objects for Payment plan:' ||in_payment_plan_id
          );
     end if;

     --
     -- Get the scheduled payment objects 
     --
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_payment_plan_id,
          gObjType_ScheduledPayment,
          v_pymntsch_list
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Number of Scheduled Payments found :' ||
               v_pymntsch_list.count ||' for the payment plan:'||in_payment_plan_id
          );
     end if;

     
begin
  
     -- 
     -- Throw exception when we dont have any records in DB_ELEMENT_ASSOCIATON
     -- Throw exception when we have duplicate records in DB_ELEMENT_ASSOCIATON unless the element bv and fitem bv are different
     --
       select
          db_billing_element_id,
          element_debit_credit,
          db_billing_offset_element_id,
          offset_debit_credit,
          element_bv_path,
          financial_bv_path,
          pd_product_id,
          active,
          count(*)
     into 
          v_db_billing_element_id,
          v_element_debit_credit,
          v_db_billing_offset_element_id,
          v_offset_debit_credit,
          v_element_bv_path,
          v_financial_bv_path,
          v_pd_product_id,
          v_active,
          v_count
     from
          db_element_association
     where
          pd_product_id = in_product_id
     and  
          active = 'T'        
     group by
          db_billing_element_id,
          element_debit_credit,
          db_billing_offset_element_id,
          offset_debit_credit,
          element_bv_path,
          financial_bv_path,
          pd_product_id,
          active
     having count(*)>1 ;
    
     exception when no_data_found
          then
               null; 
     end;     

 
     if v_count > 1 
          then
          raise duplicate_records;
     end if;
     
     select
          count(*)
     into 
          v_count
     from
          db_element_association
     where
          pd_product_id = in_product_id
     and 
          active = 'T'
     and 
          db_billing_element_id = db_billing_offset_element_id;
          
     if v_count >= 1 
          then
          raise same_elements;
     end if;
     
     if v_session_control.gLogging_Full 
          then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Element association started:'
          );
     end if;
     
     for v_element_association in  c_element_association
     loop
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Association logic started for  '||v_element_association.db_billing_element_id
               );
          end if;
          
          v_pymntsch_index           := v_pymntsch_list.first;          

          --Loop for each payment plan
          while v_pymntsch_index is not null
          loop
               if v_session_control.gLogging_Full then
          
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Looping for the Schedule Payment Plan object id:'||v_pymntsch_list(v_pymntsch_index)
                    );
               end if;              

               v_scheduled_element_list.delete;

               v_element_relation_id              := null;
               v_associated_element_relation_id   := null;               

               pkg_os_object_search.sp_object_children_of_type_get
               (    
                    in_session_id,
                    in_transaction_id,
                    v_pymntsch_list(v_pymntsch_index),
                    gObjType_ScheduledElement,
                    v_scheduled_element_list
               );
               v_scheduled_element_index := v_scheduled_element_list.first;

               --Loop the billing elements for the payment plan
               while v_scheduled_element_index is not null 
               loop
                    v_element_created_by     :=   pkg_os_object_io.fn_object_bv_get
                                                  (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_scheduled_element_list(v_scheduled_element_index),
                                                      PKG_DB_CONSTANT.gbv_ElementCreatedBy
                                                  );
                     
                     if v_element_created_by = in_policy_trx_id   then   
                         v_scheduled_element_md_id     :=   pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_scheduled_element_list(v_scheduled_element_index),
                                                                 gbv_billing_element_id--Billing Element MD ID under SchElement
                                                            );
                         if v_session_control.gLogging_Full then
                    
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......... Billing element object: ' ||v_scheduled_element_list(v_scheduled_element_index)||
                                   ' and Billing element MD Id:' ||v_scheduled_element_md_id
                              );
                         end if;
                              
                         if v_scheduled_element_md_id = v_element_association.db_billing_element_id then
                                   
                              v_element_relation_id := v_scheduled_element_list(v_scheduled_element_index);
                              if v_session_control.gLogging_Full then
                    
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.........     Element MD Id and Element Association Billing Element MD Id Matched'
                                   );
                              end if;
                              
                          end if;    
                                                    
                         if v_scheduled_element_md_id = v_element_association.db_billing_offset_element_id then    
                              
                              v_associated_element_relation_id     := v_scheduled_element_list(v_scheduled_element_index);
                              if v_session_control.gLogging_Full then
                    
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.........     Offset Element MD Id and Element Association Billing Element MD Id Matched'
                                   );
                              end if;
                         end if;--v_scheduled_element_md_id = v_element_association.db_billing_offset_element_id                                
                              
                         --- [KR] there should be a seperate if conditon with v_element_relation_id not null and v_associated_element_relation_id not null 
                         if v_element_relation_id is not null and v_associated_element_relation_id is not null then

                              if v_session_control.gLogging_Full then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Associating the elements '|| v_element_relation_id ||' and '||v_associated_element_relation_id
                                        ||'... Setting this relationship on the BV: '||v_element_association.element_bv_path
                                   );
                              end if;
                              
                              --Associate the relationship between the billing and offset elements      
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_element_relation_id,
                                   substr(v_element_association.element_bv_path,1, instr( v_element_association.element_bv_path, PKG_DB_CONSTANT.gObjType_ScheduledElement)-2),
                                   v_associated_element_relation_id
                              );
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_associated_element_relation_id,
                                   substr(v_element_association.element_bv_path,1, instr( v_element_association.element_bv_path, PKG_DB_CONSTANT.gObjType_ScheduledElement)-2),
                                   v_element_relation_id
                              );

                              exit;
                                                                 
                         end if;--v_element_relation_id is not null and v_associated_element_relation_id is not null
                    
                    end if; -- PTP condition
                    
                    v_scheduled_element_index := v_scheduled_element_list.next(v_scheduled_element_index);
                              
               end loop; -- v_scheduled_element_list loop 
                             
               v_pymntsch_index := v_pymntsch_list.next(v_pymntsch_index);
                              
          end loop;--v_pymntsch_list(v_pymntsch_index)
          
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Association logic ended for  '||v_element_association.db_billing_element_id
               );
          end if;          
     
     end loop;-- DB_ELEMENT_ASSOCIATION Loop

exception
     when duplicate_records then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'DB_ELEMENT_ASSOCIATION Configuration Error : There are duplicate records present in the table for the product '|| in_product_id ||  
               'Billing Element ID /Billing Element Debit/Credit? and Offset Billing Element ID /Offset Element Debit/Credit should not be the same.'
               ||'If there are more rows for Billing Element ID /Billing Element Debit/Credit?, then the  Business Variable should be different'
          );
          
          raise duplicate_records; -- [KR] Raise the same exception duplicate_records and print the product id in log  
                    
     when same_elements then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'DB_ELEMENT_ASSOCIATION Configuration Error : There are records present in the table for the product '|| in_product_id ||  
               'which have same Billing and Offset element configured for the same record'
          );

          raise same_elements; -- [KR] Raise the same exception same_elements and print the product id in log  
               
end sp_element_associate;

--Kiran end OSPRODUCT-29817
----------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-34837 start
function fn_cp_check_start_term_indicator(
     in_session_id              in        object.object_id%type,
     in_transaction_id          in        object.object_id%type,
     in_ptp_id                  in        object.object_id%type,
     in_policy_id               in        object.object_id%type
)
return number
is

     v_procedure_name        constant system_log.program_name%type      :=     pkg_name||'fn_check_start_term_indicator';
     v_session_control       pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_ptp_id                object.object_id%type := 0;
     v_start_term_flag_old   number;
     v_return                number    :=   0;

begin
     begin
          
          select
               nvl(max(dpt.ptp_id), 0) ptp_id
          into
               v_ptp_id
          from
               dragon_policy_trx dpt
          where
               policy_id = in_policy_id --13602465258
          and
               policy_trx_object_state_id = pkg_db_late_process.gPolicyTrxProcessed  ---106 -- processed
          and
               policy_trx_type_id = gtrxtype_endorse -- endorsement
               and
               ( policy_trx_subtype_id = gchangepaymentplan
                     or ( policy_trx_subtype_id = gTrxSubType_Endorsement
                          and pkg_os_object_io.fn_object_bv_get(
                                                                   in_session_id,
                                                                   in_transaction_id,
                                                                   dpt.ptp_id,
                                                                   pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd ---31934046
                                                                ) = 1
                        )
               );

               if v_session_control.gLogging_Full then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '  select query execution '|| 
                         ', Max PTP:: ' || v_ptp_id
                    );
               end if;

     exception
          
          when others then null;
               
               if v_session_control.gLogging_Full then
                   pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Going in exception:: '|| 
                         ', Max PTP:: ' || v_ptp_id
                    );
               end if;               
     end;

     if nvl(v_ptp_id, 0) = 0 THEN
          
          if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' considering PD property '||
                    ', Max PTP:' || v_ptp_id
               );
          end if;     
          
          case when nvl 
                      ( 
                           pkg_os_product.fn_product_property_get
                           ( 
                                in_session_id,
                                in_transaction_id,
                                in_ptp_id,
                                18248 --PD_PROPERTY_TYPE
                           ),
                           1
                      ) =  1
               then 
                    v_return := 0;
               else 
                    v_return := null;
          end case;

     else
          v_start_term_flag_old :=  pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_ptp_id,
                                         gbv_ptp_cpp_term_start_ind --32907548
                                    );

          if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '  Policy has priot PTP Transaction' ||
                    '  Input PTP:: '|| in_ptp_id ||
                    ', Prior PTP:: ' || v_ptp_id ||
                    ', Old term indicator: : '  || v_start_term_flag_old
               );
          end if;
          
          v_return := v_start_term_flag_old;                                                           

     end if;

     return v_return; 

end fn_cp_check_start_term_indicator;

function fn_get_cpp_start_term_indicator(
     in_session_id              in        object.object_id%type,
     in_transaction_id          in        object.object_id%type,
     in_ptp_id                  in        object.object_id%type,
     in_policy_id               in        object.object_id%type
)
return number
is

begin

return null;

end fn_get_cpp_start_term_indicator;
--OSPRODUCT-34837 end
----------------------------------------------------------------------------------------------------------------------------
begin

     sp_clear_sched_payment_cache( 0, 0 );


end PKG_DB_PAYPLAN_MODIFY;
/
