CREATE OR REPLACE PACKAGE BODY PKG_DB_MULTIPAYER
-------------
-- $Workfile: $
-- $Revision: 122682 $
--   $Author: hichauhan@OSHQ.ONESHIELD.COM $
--     $Date: 2019-10-23 05:57:46 -0400 (Wed, 23 Oct 2019) $


-------------
AS
     cannot_reindex_payer_list    exception;

     no_billing_account_found     exception;

     no_policy_term_found         exception;

     no_default_payer_found       exception;

     no_payer_found               exception;

     no_nb_image_found            exception;

     no_policy_image_found        exception;
     
     change_payer_type_failure    exception; -- OSPRODUCT-18769     
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     Function and Procedure Definitions ...
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_print_payer_plans
--
--     %USAGE
--          For the payer record in question, prints out payment plans created under the PTPPayer object.
--
--     %ALGORITHM
--      1.    Find all child objects of type PaymentPlan under the PTPPayer object
--      1.1.     Print out every child Payment Plan
--      1.1.1.      Mark chosen payment plan to differentiate it from others.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_print_payer_plans
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_payer_rec                  in out nocopy r_payer
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_print_payer_plans';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_payment_plan_list    pkg_os_object.t_object_list;
     v_idx                  binary_integer;
begin

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_object_id            =>    in_payer_rec.PTPayer_object_id,
          in_child_object_type_id =>    gObjType_PaymentPlan,
          in_object_list          =>    v_payment_plan_list
     );

     v_idx := v_payment_plan_list.first;

     while v_idx is not null
     loop
         if v_idx = v_payment_plan_list.first
         then
              dbms_output.put_line(
                                    '........Avialable payment plans :'
                                   );

              if v_session_control.gLogging_Full
              then
                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        '........Avialable payment plans :'
                   );
              end if;

         end if;

         if v_session_control.gLogging_Full
         then
              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '.............' ||
                   pkg_os_object.fn_object_name_get
                   (
                        in_session_id,
                        in_transaction_id,
                        v_payment_plan_list(v_idx)
                   ) ||
                   ',       ' || v_payment_plan_list(v_idx)||
                   case when in_payer_rec.chosen_payment_plan = v_payment_plan_list(v_idx)
                        then ' (Chosen)'
                        else ''
                    end
              );
         end if;

         dbms_output.put_line(
                               '.............' ||
                               pkg_os_object.fn_object_name_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_payment_plan_list(v_idx)
                               ) ||
                               ',       ' || v_payment_plan_list(v_idx)||
                               case when in_payer_rec.chosen_payment_plan = v_payment_plan_list(v_idx)
                                    then ' (Chosen)'
                                    when in_payer_rec.modified_payment_plan = v_payment_plan_list(v_idx) -- VAULTDEV-6645
                                    then ' (Modified)'
                                    else ''
                                end
                             );

         v_idx := v_payment_plan_list.next(v_idx);
     end loop;

end sp_print_payer_plans;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_print_payer_list                                                                                            |
--
--     %USAGE
--          Print out list of Payer.
--
--     %ALGORITHM
--      The procedure does no search.
--      The list of payer is already populated and is passed as a parameter in_payer_list
--      1.    For each element in the in_payer_list
--      1.1.       Print attributes of the r_payer structure defined in the package spec
--      1.1.1.          Print out available payment plans by calling sp_print_payer_plans
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_print_payer_list
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_payer_list                 in out nocopy  t_payer_tab
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_print_payer_list';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_idx                         long;
begin
     dbms_output.put_line('-- List of payers -------------------------------------------------------------------');

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '-- List of payers -------------------------------------------------------------------'
          );
     end if;

     v_idx := in_payer_list.first;

     while v_idx is not null
     loop
          dbms_output.put_line(
                               '.....'||
                               pkg_os_object.fn_object_name_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_payer_list(v_idx).PayerEntity_object_id
                               )                                                                      ||
                               ' PayerEntity object ID:'||in_payer_list(v_idx).PayerEntity_object_id  ||
                               ', Billing Account:'     ||in_payer_list(v_idx).PayerBillingAccount_id ||
                               ', of type:'             ||in_payer_list(v_idx).payer_type             ||
                               '. PTPyaer object ID:'   ||in_payer_list(v_idx).PTPayer_object_id      ||
                               '. Chosen plan:'         ||in_payer_list(v_idx).chosen_payment_plan    ||
                               '. Modified plan:'       ||in_payer_list(v_idx).modified_payment_plan  ||-- VAULTDEV-6645
                               '. Invoice Profile:'     ||in_payer_list(v_idx).invoice_profile        ||
                               '.   Index value:' ||v_idx
                              );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.....'||
                    pkg_os_object.fn_object_name_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_payer_list(v_idx).PayerEntity_object_id
                    )                                                                    ||
                    ' PayerEntity object ID:'||in_payer_list(v_idx).PayerEntity_object_id ||
                    ', Billing Account:'     ||in_payer_list(v_idx).PayerBillingAccount_id||
                    ', of type:'             ||in_payer_list(v_idx).payer_type            ||
                    '. PTPPyaer object ID:'  ||in_payer_list(v_idx).PTPayer_object_id     ||
                    '. Chosen plan:'  ||in_payer_list(v_idx).chosen_payment_plan          ||
                    '. Modified plan:'       ||in_payer_list(v_idx).modified_payment_plan ||-- VAULTDEV-6645
                    '.   Index value:' ||v_idx
               );
          end if;

          PKG_DB_MULTIPAYER.sp_print_payer_plans
          (
                in_session_id,
                in_transaction_id,
                in_payer_list(v_idx)
          );

          v_idx := in_payer_list.next(v_idx);
     end loop;

     dbms_output.put_line('--/ List of payers ------------------------------------------------------------------');

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '--/ List of payers -------------------------------------------------------------------'
          );
     end if;

end sp_print_payer_list;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_payer_list_reindex                                                                                      |
--
--     %USAGE
--          Used in the end of the sp_policy_image_payer_create when payers have been initially created under the PTP.
--      Used in the
--
--     %ALGORITHM
--      The procedure does no search.
--      The list of payer is already populated and is passed as a parameter in_payer_list
--      The in_payer_list gets re-indexed by chosen pay plan (initially it is indexed by payer's billing account as
--      far as there is not chosen pay plan yet).
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_payer_list_reindex
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_payer_list                 in out nocopy t_payer_tab,
     in_index_by                   in            varchar2, -- Possible values: g_PayerGet_idx_ChosenPlan
                                                           --                  g_PayerGet_idx_CustmrPartnr
                                                           --                  g_PayerGet_idx_PTPayer
                                                           --                  g_PayerGet_idx_BilingAccount
                                                           --
     in_print_tf                   in            varchar2 default null -- if T, print out reindexed list
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payer_list_reindex';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_idx                              long;

     v_new_idx                          long;
     v_index_by_txt                     varchar2(50);
     v_new_payer_list                   t_payer_tab; -- reindexed list

begin
     if in_index_by not in (
                                g_PayerGet_idx_ChosenPlan,
                                g_PayerGet_idx_CustmrPartnr,
                                g_PayerGet_idx_PTPayer,
                                g_PayerGet_idx_BilingAccount,
                                g_payerget_idx_modifiedplan-- VAULTDEV-6645
                           )
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......ERROR: unable to reidex by index type ' || nvl(in_index_by,'NULL')
          );

          return;
     else
          v_index_by_txt := case in_index_by
                                 when g_PayerGet_idx_ChosenPlan     then 'Chosen Pay Plan ID'
                                 when g_PayerGet_idx_ModifiedPlan     then 'Modified Pay Plan ID' -- VAULTDEV-6645
                                 when g_PayerGet_idx_CustmrPartnr   then 'Customer/Partner ID'
                                 when g_PayerGet_idx_PTPayer        then 'PTP/PolicyTerm Payer ID'
                                 when g_PayerGet_idx_BilingAccount  then 'Billing Account ID'
                                 else NULL
                            end;
     end if;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......Getting started reindexing Payer List by ' || v_index_by_txt
          );
     end if;

     v_idx := in_payer_list.first;
     while v_idx is not null
     loop
          -- v_old_idx_list(v_old_idx_list.count+1) := v_idx;

          -- Copy recored to the new list with new index
          --
          v_new_idx := case in_index_by
                            when g_PayerGet_idx_ChosenPlan     then in_payer_list(v_idx).chosen_payment_plan
                            when g_PayerGet_idx_ModifiedPlan   then in_payer_list(v_idx).modified_payment_plan-- VAULTDEV-6645
                            when g_PayerGet_idx_CustmrPartnr   then in_payer_list(v_idx).PayerEntity_object_id
                            when g_PayerGet_idx_PTPayer        then in_payer_list(v_idx).PTPayer_object_id
                            when g_PayerGet_idx_BilingAccount  then in_payer_list(v_idx).PayerBillingAccount_id
                            else NULL
                       end;

          -- Be smart !!! if a new index is the same as existing one , just quit.
          --
          if v_idx = in_payer_list.first -- Check only for first row
             and
             v_new_idx = v_idx
          then
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......INFO: no need to reindex as the list is already indexed by ' || v_index_by_txt
                    );
               end if;

               return;
          end if;

          if v_new_idx is null
          then
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......ERROR: unable to reindex by ' || v_index_by_txt || '. Index value is NULL.'
               );

               return;
          end if;

          v_new_payer_list(v_new_idx) := in_payer_list(v_idx);

          v_idx := in_payer_list.next(v_idx);
     end loop;

     -- Once we get ther, the copy process was completed successfully. Purge the in_payer_list and initialize it with the reindexed list
     --
     in_payer_list.delete;

     in_payer_list := v_new_payer_list;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......Payer List reindexed successfuly.'
          );
     end if;

     if in_print_tf = 'T'
     then
          PKG_DB_MULTIPAYER.sp_print_payer_list
          (
               in_session_id,
               in_transaction_id,
               in_payer_list
          );
     end if;

end sp_payer_list_reindex;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_payer_type_get
-----------------------------------------------------------------------------------------------------------------------------------------------------
--UTPRODUCT-1570 start commented below and added
/*function fn_payer_type_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_entity_id                  in  object.object_id%type
)
return varchar2
is
begin
     -- VAULTDEV-13033 
     return   case when pkg_os_object_io.fn_object_bv_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_entity_id,
                             gbv_Entity_BusinessLegalEntity -- 29236514
                        ) = genum_SoleProprietor                   
                   then 
                        g_DbPayerType_Insured                   
                   else 
                        case when pkg_os_object_search.fn_object_get_parent_of_type
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_entity_id,
                                       gObjType_Partner -- 63
                                  ) is not null 
                             then
                                  g_DbPayerType_Mortgagee -- assumption here, a partner entity will never be placed in a Customer hierarchy
                             else 
                                  g_DbPayerType_Insured  
                        end
              end;
end fn_payer_type_get;*/

--UTPRODUCT-1570 end
-----------------------------------------------------------------------------------------------------------------------------------------------------
--UTPRODUCT-1570 start
function fn_payer_type_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_payer_type_enum            in  db_payer_type.db_payer_type_enum%type 
)
return varchar2
is
     v_db_payer_type_id            db_payer_type.db_payer_type_id%type;  
     v_procedure_name    constant  system_log.program_name%type := pkg_name||'fn_payer_type_get'; 

begin
     
         select DB_PAYER_TYPE_ID into v_db_payer_type_id 
         from db_payer_type
         where DB_PAYER_TYPE_ENUM =  in_payer_type_enum;
         
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Payer type Id from the DB_PAYER_TYPE is '||v_db_payer_type_id
          );
         
         return v_db_payer_type_id; 
         
         exception
         
               when no_data_found 
               then select DB_PAYER_TYPE_ID into v_db_payer_type_id 
               from db_payer_type
               where DB_PAYER_TYPE_ENUM = 0;
              
               return v_db_payer_type_id; 
         
               when too_many_rows 
               then 
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Multiple entries found in configuration for payer_Type enum '||in_payer_type_enum
               );
               raise too_many_rows;
         
               when others then 
               raise;
                     
          
end fn_payer_type_get;
--UTPRODUCT-1570 end
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_payer_in_set
--
--     %USAGE
--          Determines if a payer type is belongs to a payer type set
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payer_in_set
(
     in_payer_type_id          db_payer_type_set_map.db_payer_type_id%type,
     in_payer_type_set_id      db_payer_type_set_map.db_payer_type_set_id%type
)
return char
$if not dbms_db_version.ver_le_10 $then
RESULT_CACHE
$end
is
     v_return_value char;
begin
     select
          $if not dbms_db_version.ver_le_10 $then
               /*+RESULT_CACHE*/
          $end
          decode( count(1), 0, 'F', 'T' )
     into
          v_return_value
     from
          db_payer_type_set_map
     where
          db_payer_type_set_id = in_payer_type_set_id
     and
          db_payer_type_id = in_payer_type_id;


     return v_return_value;

end fn_payer_in_set;
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- UTPRODUCT-4905
--
--     %NAME
--          fn_policy_term_PTP_get
--
--     %USAGE
--          Get a PTP for a given Policy Term. This logic was added as part of OSPRODUCT-11624
--
--     %ALGORITHM
--       1. Get a Polcy Transaction as
--         1.1. Get the most recent processed transaction
--         1.2. If not found, get the most recent transaction
--         1.3. If not found, the transaction that created the term 
--       2. Get a PTP as child of PT
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_policy_term_PTP_get -- UTPRODUCT-4905
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_policy_term_id             in            object.object_id%type
)
return object.object_id%type
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_policy_term_PTP_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_image_id                  object_bv_value.business_variable_value%type;
begin

     -- The logic was added as part of OSPRODUCT-11624

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Getting a PTP for Policy Term: ' ||  in_policy_term_id
          );
     end if;
     
     v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id , in_policy_term_id ,  pkg_db_constant.gbv_mostrecent_processed_trx),
                               pkg_db_constant.gbv_PolicyTrxRefCoverages
                          );

     if v_policy_image_id is not null
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Policy Image ID (Got from most recent PROCESSED transaction): ' ||  v_policy_image_id
               );
          end if;
     else
          v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id , in_policy_term_id ,  pkg_db_constant.gbv_mostrecent_trx ),
                                    pkg_db_constant.gbv_PolicyTrxRefCoverages
                               );  
                               
          if v_policy_image_id is not null
          then
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Policy Image ID (Got from most recent transaction): ' ||  v_policy_image_id
                    );
               end if;           
          else
               v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id , in_policy_term_id , pkg_db_constant.gbv_PolicyTermCreatedByTrx ),
                                         pkg_db_constant.gbv_PolicyTrxRefCoverages
                                    );

               if v_policy_image_id is not null
               then
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Policy Image ID (Got from the term creator transaction): ' ||  v_policy_image_id
                         );
                    end if;                
               else
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. WARNING: not able to get a policy image for Policy Term:  ' || in_policy_term_id ||
                              '.  None of the xRef - Term._refMostRecentProcessedTRX, Term._refMostRecentTRX, Term._refCreatedByTRX - are not set.'
                         );
                    end if;
               end if;                         
          end if;     
     end if;

     return v_policy_image_id;
     
end fn_policy_term_PTP_get;   
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_multipayer_mode_tf
--
--     %USAGE
--          for the Policy Image or Policy in question, returns True is there are more than one payer exists
--
--     %ALGORITHM
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_multipayer_mode_tf
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_object_id                  in  object.object_id%type  -- Policy Image ID or policy term ID or Policy ID
)
return boolean
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_multipayer_mode_tf';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_id                   object.object_id%type; 
     v_policy_image_id                  object.object_id%type;
     v_object_type                      object.object_type_id%type;
     
begin
     -- OSPRODUCT-11624
     -- VAULTDEV-6645 starts
     v_object_type:= pkg_os_object.fn_object_type_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 in_object_id
                            );
                            
     if v_session_control.gLogging_Full then
                         
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Object ID: '        || in_object_id||
               '.. Object type ID: '   || v_object_type
          );
               
     end if;  
          
     if v_object_type = pkg_os_constant.gobjType_Policy
     then     

          v_policy_term_id := pkg_os_object_io.fn_object_bv_get 
                              ( 
                                   in_session_id, 
                                   in_transaction_id , 
                                   in_object_id, 
                                   pkg_db_constant.gbv_policy_current_term 
                              );
                              
          v_policy_image_id := fn_policy_term_PTP_get -- UTPRODUCT-4905
                               (
                                   in_session_id,
                                   in_transaction_id ,
                                   v_policy_term_id
                               );
          
     elsif v_object_type = pkg_os_constant.gobjType_PolicyTerm
     then
          v_policy_image_id := fn_policy_term_PTP_get -- UTPRODUCT-4905
                               (
                                   in_session_id,
                                   in_transaction_id ,
                                   in_object_id
                               );
       
     elsif v_object_type = pkg_os_constant.gobjType_PolicyTrxPolicy
     then 
                                 
          v_policy_image_id := in_object_id;
          
     end if;
          
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Policy Image ID: '|| v_policy_image_id
          );
     end if;
     
     return case pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_image_id,
                         PKG_DB_MULTIPAYER.gbv_MultiPayerEnabled_PTP
                    )
                    when genum_Yes then TRUE
                    else                FALSE
                    end;


end;
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_multipayer_mode
(
      in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_object_id                  in  object.object_id%type  -- Policy Image ID or policy term ID or Policy ID
)
return number
is

begin

     -- VAULTDEV-6645

     if  fn_multipayer_mode_tf(in_session_id,in_transaction_id,in_object_id)
     then

          return 1;
     else
          return 2;

     end if;
end fn_multipayer_mode;

-- VAULTDEV-6645 ends
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_mp_mode_policy_set
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_policy_id                  in  object.object_id%type,
     in_mode_enum                  in  object_bv_value.business_variable_value%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_nb_ptp_for_term_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... BV set of MultiPayerEnabled flag ='||in_mode_enum||' for policy:'|| in_policy_id
          );
     end if;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          gbv_MultiPayerEnabled_Policy,
          in_mode_enum
     );
end sp_mp_mode_policy_set;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_mp_mode_policy_merge
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_policy_id                  in  object.object_id%type,
     in_policy_trx_id              in  object.object_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_mp_mode_policy_merge';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_image_id                  object_bv_value.business_variable_value%type;
begin

     -- Try to take a policy image from policy transaction (will not work for non-functional transactions like Rollback, Canceleation, Audit etc.)
     --
     v_policy_image_id := pkg_os_object_io.fn_object_bv_get  -- 1. Get New Business policy image
                          (
                                in_session_id,
                                in_transaction_id,
                                in_policy_trx_id,
                                pkg_db_constant.gbv_PolicyTrxRefCoverages
                          );

     -- If policy image cannot be determined from policy transaction, take it one from the most recent functional transaction
     --
     if v_policy_image_id is null
     then
          v_policy_image_id := pkg_os_object_io.fn_object_bv_path_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_id,
                                    pkg_db_constant.gbv_path_PolRefRctFuncTrxImg  -- Policy._Reference_MostRecentFunctionalTransaction._Reference_PolicyImage
                               );
     end if;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... For Policy ID: ' || in_policy_id     ||
               ',  Policy Trx ID:'   || in_policy_trx_id ||
               ' found Policy Image:'|| v_policy_image_id
          );
     end if;

     if v_policy_image_id is null
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ERROR: Policy Image is not found'
          );

          raise no_policy_image_found;
     end if;

     sp_mp_mode_policy_set                        -- 3. Set Multipayer mode BV on Policy levele with the same value what the NB policy image has.
     (
          in_session_id ,
          in_transaction_id,
          in_policy_id,
          pkg_os_object_io.fn_object_bv_get       -- 2. Get Multipayer mode BV from New Business policy image
          (
               in_session_id,
               in_transaction_id,
               v_policy_image_id,
               PKG_DB_MULTIPAYER.gbv_MultiPayerEnabled_PTP
          )
     );
end sp_mp_mode_policy_merge;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--           fn_nb_ptp_for_term_get
--
--     %USAGE
--           returns New Business PTP id for given Policy Term
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_nb_ptp_for_term_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_policy_id                  in  object.object_id%type
)
return object_bv_value.business_variable_value%type
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_nb_ptp_for_term_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_nb_trx_id                        object_bv_value.business_variable_value%type;
     v_policy_image_id                  object_bv_value.business_variable_value%type;
begin

     -- 2.    Get NB Transaction using a reference
     --
     v_nb_trx_id :=  pkg_os_object_io.fn_object_bv_get
                       (
                             in_session_id,
                             in_transaction_id,
                             in_policy_id,
                             gbv_Policy_Ref_NBTrx
                       );


     -- 3.    Get NB image id using a reference
     --
     v_policy_image_id :=  pkg_os_object_io.fn_object_bv_get
                           (
                                 in_session_id,
                                 in_transaction_id,
                                 v_nb_trx_id,
                                 pkg_db_stmt.gbv_PolicyTrxRefCoverages
                           );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... For Policy ID:'          || in_policy_id       ||
               ' found New Bisiness Trx ID:' || v_nb_trx_id       ||
               ' and its Image ID: '         || v_policy_image_id
          );
     end if;

     if v_policy_image_id is null
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ERROR: New Business Image is not found'
          );

          raise no_nb_image_found;
     end if;

     return v_policy_image_id;

end fn_nb_ptp_for_term_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--           fn_defatul_payer_get
--
--     %USAGE
--           returns a payer of type CustomerEntity from the PolicyTransactionPolicy level for the single payer mode.
--
--     %ALGORITHM
--     1.     Try to get a payer using path PolicyTransactionPolicy._Reference_Bill To Person._Reference_Master CustomerEntity
--     2.     If this returns NULL
--     2.1       Try another way, that is more simple and probably more backward compatible as far as the path above may not
--               exist in older configurations:
--     2.1.1        Get the grandparent Master Customer. This works for both Quote PTP and Policy PTP.
--     2.1.2        Get Primary Customer Entity
--     3.     If the payer is still NULL, do splat
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_default_payer_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_ptp_object_id              in  object.object_id%type
)
return object_bv_value.business_variable_value%type
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_default_payer_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_payer_id                         object_bv_value.business_variable_value%type;
     v_policy_billing_method            object_bv_value.business_variable_value%type;
     -- kiran start OSPRODUCT-29368 / 29370
     v_ptp_agency_requires_billing      number;
     -- kiran end OSPRODUCT-29368 / 29370    	 
begin

     v_policy_billing_method  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_ptp_object_id,
                                        pkg_db_billing.gbv_PolicyBillingMethod
                                    );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Policy Image ID: '||in_ptp_object_id||
               ' Policy Billing Method: '||v_policy_billing_method||' - '||
               pkg_os_lookup.fn_lookup_list_text_get(pkg_db_billing.PolicyBillingMethodList, v_policy_billing_method)
          );
     end if;

     --OSBILLING-5592
     if v_policy_billing_method is null
     then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Bill method is not yet set. So, we can not identify Default payer'
               );
          end if;

          return null;
     end if;
	 
	 -- kiran start OSPRODUCT-29368 / 29370
     v_ptp_agency_requires_billing := pkg_os_object_io.fn_object_bv_get
                                      (
                                            in_session_id,
                                            in_transaction_id,
                                            in_ptp_object_id,
                                            PKG_DB_CONSTANT.gbv_AgencyRequiresBilling
                                      );     
     -- kiran end OSPRODUCT-29368 / 29370
	 
     if v_policy_billing_method = pkg_db_billing.gBillingMethod_Direct
     -- kiran start OSPRODUCT-29368 / 29370
        or
        (v_policy_billing_method = pkg_db_billing.gBillingMethod_Agency and v_ptp_agency_requires_billing = PKG_OS_CONSTANT.gBoolean_Yes)
     -- kiran end OSPRODUCT-29368 / 29370   	 
     then
          begin
               --     1.     Try to get a payer using path PolicyTransactionPolicy._Reference_Bill To Person._Reference_Master CustomerEntity
               --
               v_payer_id := pkg_os_object_io.fn_object_bv_path_get
                             (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ptp_object_id,
                                   gbv_PTP_Ref_BillToPerson||'.'||gbv_CustEnt_Ref_MasterCustEnt -- '32607124.32086746'
                             );

               if v_payer_id is null
               then
                    --     2.     If this returns NULL
                    --
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Warning: the system was not able to find a default payer using path PolicyTransactionPolicy._Reference_Bill To Person._Reference_Master CustomerEntity.'||
                              'Trying to get the it by Master Customer._Ref_Primary_Cusotmer_Entity....'
                         );
                    end if;

                    --     2.1       Try another way, that is more simple and probably more backward compatible as far as the path above may not
                    --               be exist in older configurations:
                    --
                    v_payer_id :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        --     2.1.1        Get the grandparent Master Customer. This works for both Quote PTP and Policy PTP.
                                        --
                                        pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_ptp_object_id,
                                             gObjType_Customer
                                        ),
                                        gbv_Customr_Ref_Primary_Entity --     2.1.2        Get Primary Customer Entity
                                   );
               end if;
          end;
     elsif v_policy_billing_method = pkg_db_billing.gBillingMethod_Agency
     then
          begin
               -- Get the Producing Agency
               --
               v_payer_id :=   pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_ptp_object_id,
                                    pkg_os_constant_bv.gbv_GenObjProducingAgency
                               );
          end;
     else
          v_payer_id := null;
     end if;

     if v_payer_id is null
     then
          --     3.     If the payer is still NULL, do splat
          --
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'ERROR. Not able to determine default payer'
          );

          raise no_default_payer_found;
     else
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Found a default payer: ' || pkg_os_object.fn_object_name_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_payer_id
                                                  ) || '(' || v_payer_id || ')'
               );
          end if;

          return v_payer_id;
     end if;

end fn_default_payer_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--           sp_policy_image_payer_create
--
--     %USAGE
--          Creates PolicyTransactionPolicyPayer objects and thier childs PTPPayerPaymentPlan.
--
--     %ALGORITHM
--       Prerequisites:
--       Rating has been completed.
--       Rating has created one or many PaymentPlan objects available for policy owner  along with PaymentPlanPaymentScheduleElements.
--       @@@VG: Should this not be per policy payer? Does rating know about payers? I suspect not. If not, why is rating doing this, and then we have to do it again per payer.
--
--       1.      Loop through all the coverages and create a distinct list of Payers.
--       1.1.        During this search we can determine the Payer Type using meta data from the DB_BILLNG_ELEMENT table.
--       1.2.        If it is not possible to determine a payer's billing account, do SPLAT
--
--       2.      Check the Payer list.
--       2.1.        If there are more than one payer
--                   OR
--                   If there is one payer and the payer the NOT the default one
--       2.1.1            Set Policy.MultiPayerEnabled_TF = 'T' and continue
--       2.2.        else (If there is only one payer and the payer is the default one)
--       2.2.1              Set Policy.MultiPayerEnabled_TF = 'F'
--       2.2.2              EXIT (system will continue existing flow for single payer)
--
--       3.      Loop the Payer list, for each Payer
--       3.1.        Create an instance of a PolicyTransactionPolicyPayer object, be sure to set a Payer Type.
--       4.      Starting from the PTP, search for direct childs of type PaymentPlan.
--       5.      For each payment plan loop the payers
--       5.1.        Check if the payment plan in question is accessible for the payer in question
--       5.1.1.         Clone this PaymentPlan and its PaymentPlanScheduledPayments
--
--                Note:??for??backward compatibility, the??PaymentPlan??object retains a child of PolicyTransactionPolicy?? (PTP)
--                      In the new object model, a PaymentPlan logically belongs to a Payer (new object type
--                      PolicyTransactionPolicyPayer).
--
--                      To Implement this, another new object PTPPayerPaymentPlan (type of PolicyPlan) will be added as a child of
--                      PolicyTransactionPolicyPayer. Each instance of a payer specific payemnt plan will be transmuted into the
--                                               PTPPayerPaymentPlan, thus it will becode a child of Payer.
--
--       5.1.2.         Make a Payment plan to be specific for a payer: "place" them under the
--                      PTPPayer object via pkg_os_object.sp_object_transmute
--
--       5.1.3.(TEST )  For testing from pl/sql block, set the chosen payment plan as just the first available one...
--                      This should done from UI page 500406
--     %PARAM
--     %PARAM
--     %PARAM
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_policy_image_payer_create
(
     in_session_id                 in     object.object_id%type,
     in_transaction_id             in     object.object_id%type,
     in_ptp_object_id              in     object.object_id%type,
     io_action_outcome_id          in out outcome.outcome_id%type
     -- debuggin, unit testing
     , in_set_chosen_plan_tf       in     boolean  default FALSE
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_image_payer_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_payer_billing_account            object.object_id%type;

     v_payment_plan_common_list         pkg_os_object.t_object_list;
     v_idx_payplan_common               binary_integer;
     v_payplan_common_table             ID_PAIR_TAB := ID_PAIR_TAB();
     v_newPayerPaymentPlan_id           object.object_id%type;

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;

     v_object_cache                     pkg_os_object_cache.t_object_cache;
     v_found_in_cache_tf                char(1);
     v_card_placeholder_id              object.object_id%type;
     v_eft_placeholder_id               object.object_id%type;
     v_chk_placeholder_id               object.object_id%type;
     v_dwn_pmnt_card_plchldr_id         object.object_id%type;
     v_dwn_pmnt_eft_plchldr_id          object.object_id%type;
     v_dwn_pmnt_chk_plchldr_id          object.object_id%type;
     v_recurring_existing_prf_id        object.object_id%type;
     v_different_dwn_pmnt_prf           char(1);
     
     v_payer_account_type               number;
     v_basis_ptppayer_id                object.object_id%type;
     v_bill_plan_id                     object.object_id%type;
     v_pay_plan_timing_id               object.object_id%type;
     v_bill_plan_timing_id               object.object_id%type;

     v_payer_list                       t_payer_tab;
     v_payer_list_idx                   long;
     v_existing_payer_entity_id         object.object_id%type;
     v_existing_payer_BA_list           pkg_os_object.t_object_list;
     v_policy_transaction_id            object.object_id%type;
     v_policy_trx_type_id               number;
     v_previous_image_flag              object.object_id%type;
     v_datamart_tf                      char(1):= 'T'; -- OSPRODUCT-2908
     
     v_basis_ptp_id                     object.object_id%type;
     v_old_PolicyMultiPayerEnabled      boolean;
     v_PolicyMultiPayerEnabled          boolean;
     v_default_payer_id      constant   object_bv_value.business_variable_value%type :=  PKG_DB_MULTIPAYER.fn_default_payer_get
                                                                                         (
                                                                                              in_session_id,
                                                                                              in_transaction_id,
                                                                                              in_ptp_object_id
                                                                                         );
                                                                                        
     v_bill_plan_enable_tf              char(1); --OSPRODUCT-1245
     v_payer_type_enum                  varchar2(50);--UTPRODUCT-1570
     v_payer_type                       varchar2(50);--OSPRODUCT-15577
     v_basis_trx_id                     object.object_id%type;
     
     -- UTPRODUCT-3878
     v_entity_object_type_id            number;
     v_entity_ultimate_parent_id        object.object_id%type;
     v_customerentity_list              object_tt := new object_tt();  
     v_basis_billplan_id                object.object_id%type; -- UTPRODUCT-4446
     
     v_payer_profile_list               t_profile_tab;

     --UTPRODUCT2-1
     v_term_id                          object.object_id%type;
     v_invoice_preference               object.object_id%type;
     v_withdrawal_day                   varchar2(50);--OSPRODUCT-19874

     -- UTXPRODUCT-817 Start
     v_new_term                         number;                      
     -- UTXPRODUCT-817 End

     -- Kiran start OSPRODUCT-32846 Changes
     v_policy_billing_method            object_bv_value.business_variable_value%type;
     -- Kiran end OSPRODUCT-32846 Changes     
     -- kiran start OSPRODUCT-29368 / 29370
     v_agency_requires_billing          number        default    PKG_OS_CONSTANT.gBoolean_No;
     -- kiran end OSPRODUCT-29368 / 29370

     -- kiran start OSPRODUCT-29003
     v_ptp_bill_plan_enabled_tf         number        default PKG_DB_CONSTANT.g_No;
     -- kiran end OSPRODUCT-29003	 
	 
begin
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... creating PTP Payer objects for policy image id:'||in_ptp_object_id
          );

     end if;

     v_policy_transaction_id := pkg_os_object.fn_object_parent_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ptp_object_id
                              );

     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   pkg_os_constant_bv.gbv_PolicyTranType
                              );

     -- UTXPRODUCT-817 Start                         
     v_new_term               := pkg_db_payplan_modify.fn_trx_starts_new_term(v_policy_trx_type_id); 
     -- UTXPRODUCT-817 Start                     
	 
     -- kiran start OSPRODUCT-29368 / 29370
     v_policy_billing_method         := pkg_os_object_io.fn_object_bv_path_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          in_ptp_object_id,
                                          PKG_DB_CONSTANT.gbv_PTP_BillingMethod
                                         );
     -- kiran end OSPRODUCT-29368 / 29370										 
	 
     pkg_db_payment_arrangement.sp_set_billplan_enable_flag
     (
          in_session_id,
          in_transaction_id,
          in_ptp_object_id,
          io_action_outcome_id
     );
     
     v_term_id :=   pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_policy_transaction_id,
                         pkg_db_billing_modify.gbv_PolicyTrxRefPolicyTerm
                    ); --OSPRODUCT-19874
                    
     v_withdrawal_day    :=   nvl(
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_ptp_object_id,
                                        PKG_DB_CONSTANT.gbv_prfe_withdr_date
                                   ),
                                   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_id,
                                        PKG_DB_PAYPLAN_MODIFY.gbv_PolicyTerm_pref_PayDay
                                   )
                              ); --OSPRODUCT-19874
     
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' withdrawal day : '||    v_withdrawal_day

               );
          end if;--OSPRODUCT-19874
                    
     --OSPRODUCT-1245 Starts
     -- Get bill plan enabled flag
     v_bill_plan_enable_tf := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_ptp_object_id,
                                             pkg_db_payment_arrangement.gbv_PTPBillPlanEnabledTF
                                        );
     --OSPRODUCT-1245 Ends
     --
     --   @@@ Move all of this to a different procedure which returns the list of existing billing accounts/entities ...
     --

     declare

          v_object_list               pkg_os_object.t_object_list;
          v_idx                       binary_integer;
          -- Kiran start OSPRODUCT-32846 Changes
          v_del_idx                   binary_integer;
          -- Kiran end OSPRODUCT-32846 Changes          

     begin


          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_Id              =>    in_session_id,
               in_transaction_id          =>    in_transaction_id,
               in_object_id               =>    in_ptp_object_id,
               in_child_object_type_id    =>    gObjType_PTPPayer,
               in_object_list             =>    v_object_list,
               in_exclude_object_id       =>    null,
               in_exclude_object_type_id  =>    gObjType_PolicyTerm -- KD: in my unit tests PolicyTerm resides under the PTP. Term has Payers that are type of PTPPayer. Need to exclude them.
          );

          -- @@@ Log how many found?
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... No of existing payer:'||v_object_list.count
               );

          end if;
          -- Kiran start OSPRODUCT-32846 Changes
          v_policy_billing_method  :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_ptp_object_id,
                                        pkg_db_billing.gbv_PolicyBillingMethod
                                    );
          --kiran start OSPRODUCT-29003
          v_ptp_bill_plan_enabled_tf   := pkg_os_object_io.fn_object_bv_get
                                         (
                                             in_session_id,
                                             in_transaction_id,
                                             in_ptp_object_id,
                                             PKG_DB_CONSTANT.gbv_PTPBillPlanEnabledTF
                                         ); 
          --kiran end OSPRODUCT-29003                               
          
          --kiran start OSPRODUCT-29003 Commented the below if condition and added new one
          
		  --if v_policy_billing_method = pkg_db_billing.gBillingMethod_Agency and
          if v_ptp_bill_plan_enabled_tf = PKG_DB_CONSTANT.g_No and
          
          --kiran end OSPRODUCT-29003
             v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_NewBusiness
          then
               v_del_idx := v_object_list.first;
               
               while v_del_idx is not null
               loop
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Deleting PTPPayerobjects for Agency Bill PolicyTransactionPolicyPayer Object ID :'||v_object_list(v_del_idx)
                         );
     
                    end if;
                    pkg_os_object.sp_object_delete
                              (
                                   in_session_id              =>  in_session_id,
                                   in_transaction_id          =>  in_transaction_id,
                                   in_parent_object_id        =>  in_ptp_object_id,
                                   in_object_id               =>  v_object_list(v_del_idx),
                                   in_object_type_id          =>  gObjType_PTPPayer,
                                   in_soft_delete_tf          =>  FALSE -- hard delete
                              );
                    
                    v_del_idx := v_object_list.next(v_del_idx);
               end loop; 
               v_object_list.delete;
                              
          end if;
          
          if v_object_list.count > 0
          then
          -- Kiran end OSPRODUCT-32846 Changes
               v_idx := v_object_list.first;
          -- Kiran start OSPRODUCT-32846 Changes
          else 
               v_idx := null;
          end if;
          -- Kiran end OSPRODUCT-32846 Changes

          while v_idx is not null
          loop
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Processing PolicyTransactionPolicyPayer Object ID:'||v_object_list(v_idx)
                    );

               end if;

               --
               --   Delete existing PolicyTransactionPolicyPayer objects in the event this transaction is starting a new term.
               --   This also deletes Payer specific payment plan as far it is a child of PolicyTransactionPolicyPayer and got deleted along with it.
               --
               if v_policy_trx_type_id in
                      (
                         --pkg_os_policy_transaction.gPolicyTrxType_Renewal, -- -- OSPRODUCT-19527
                         pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,
                         pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,
                         pkg_os_policy_transaction.gPolicyTrxType_Reissue,
                         pkg_os_policy_transaction.gPolicyTrxType_Rewrite

                       )
               then
                    
                    --4031
                    v_chk_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_object_list(v_idx),
                                                  pkg_db_profiles.gbv_Ref_PTPPayerPlchldrPrfInpt
                                             );

                    -- get the referenced profile placeholder and delete those
                    v_card_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_object_list(v_idx),
                                                  gbv_RefPTPPayerCardPlaceholder
                                             );
                                             
                    v_eft_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      gbv_RefPTPPayerEFTPlaceholder
                                                 );
                    
                    v_dwn_pmnt_card_plchldr_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_profiles.gbv_Ref_PayerDwnPmCardPlchldr
                                                  );
                                                  
                    v_dwn_pmnt_eft_plchldr_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_profiles.gbv_Ref_PayerDwnPmEFTPlchldr
                                                  );
                                                  
                    v_dwn_pmnt_chk_plchldr_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_profiles.gbv_Ref_PayerDwnPlchldrPrfInpt
                                                  );
                                                  
                    v_recurring_existing_prf_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_profiles.gbv_Ref_PTPPayerCurrentProfile
                                                   );
                    
                    v_different_dwn_pmnt_prf := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_object_list(v_idx),
                                                      pkg_db_profiles.gbv_PayerDifferentAdhocPrf
                                                   );
                                                   
                    -- UTXPRODUCT-462
                    if v_policy_trx_type_id in
                       (
                         pkg_os_policy_transaction.gPolicyTrxType_NewBusiness
                       )
                    then                         
                                                 
                         v_existing_payer_entity_id := pkg_os_object_io.fn_object_bv_path_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_object_list(v_idx),
                                                            gbv_PTPPayer_Ref_CustmrPartnr
                                                       );
                                                       
                                                 
                         if v_existing_payer_entity_id is not null then
                              
                              if not v_payer_profile_list.exists(v_existing_payer_entity_id) then
                                   
                                   v_payer_profile_list(v_existing_payer_entity_id).RecurringCardPlchldrProfile := v_card_placeholder_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).RecurringEFTPlchldrProfile  := v_eft_placeholder_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).RecurringChkPlchldrProfile  := v_chk_placeholder_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).DwnPmntCardPlchldrProfile   := v_dwn_pmnt_card_plchldr_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).DwnPmntEFTPlchldrProfile    := v_dwn_pmnt_eft_plchldr_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).DwnPmntChkPlchldrProfile    := v_dwn_pmnt_chk_plchldr_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).RecurringExistingProfile    := v_recurring_existing_prf_id;
                                   v_payer_profile_list(v_existing_payer_entity_id).DifferentPrfForDwnPmnt      := v_different_dwn_pmnt_prf;
                                   
                              end if;

                         end if;
                         
                    else

                         if v_chk_placeholder_id is not null then

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id              =>  in_session_id,
                                   in_transaction_id          =>  in_transaction_id,
                                   in_parent_object_id        =>  NULL,
                                   in_object_id               =>  v_chk_placeholder_id,
                                   in_object_type_id          =>  NULL,
                                   in_soft_delete_tf          =>  FALSE -- hard delete
                              );

                         end if;

                         if v_eft_placeholder_id is not null then

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id              =>  in_session_id,
                                   in_transaction_id          =>  in_transaction_id,
                                   in_parent_object_id        =>  NULL,
                                   in_object_id               =>  v_eft_placeholder_id,
                                   in_object_type_id          =>  NULL,
                                   in_soft_delete_tf          =>  FALSE -- hard delete
                              );

                         end if;

                         if v_card_placeholder_id is not null then

                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id              =>  in_session_id,
                                   in_transaction_id          =>  in_transaction_id,
                                   in_parent_object_id        =>  NULL,
                                   in_object_id               =>  v_card_placeholder_id,
                                   in_object_type_id          =>  NULL,
                                   in_soft_delete_tf          =>  FALSE -- hard delete
                              );

                         end if;
                         
                    end if;
                    -- end UTXPRODUCT-462                    
                                             
                    pkg_os_object.sp_object_delete
                    (
                         in_session_id              =>  in_session_id,
                         in_transaction_id          =>  in_transaction_id,
                         in_parent_object_id        =>  NULL,
                         in_object_id               =>  v_object_list(v_idx),
                         in_object_type_id          =>  NULL,
                         in_soft_delete_tf          =>  FALSE -- hard delete
                    ); 

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... This is a new term, so deleted the old payer and the referenced profile placeholders..' ||
                              '... Card Placeholder: ' || v_card_placeholder_id ||
                              '... EFT Placeholder: '  || v_eft_placeholder_id
                         );

                    end if;

               else

                    v_existing_payer_BA_list.delete;
                    v_existing_payer_entity_id := pkg_os_object_io.fn_object_bv_path_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_object_list(v_idx),
                         gbv_PTPPayer_Ref_CustmrPartnr
                    );

                   pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_Id           =>    in_session_id,
                         in_transaction_id       =>    in_transaction_id,
                         in_object_id            =>    v_existing_payer_entity_id,
                         in_child_object_type_id =>    2365346, -- @@@VG: Why is this hard-coded!
                         in_object_list          =>    v_existing_payer_BA_list,
                         in_recurse_flag         =>    false

                         -- @@@ Add a recurse = F flag, to force only the selection of immediate children. This is because we do not want to entertain
                         -- grand-chidren, as is the case with DragonUser, which is a child of Partner, but also has its own Billing Account.
                    );

                    if v_existing_payer_BA_list.count = 0 then

                         --- @@@ Add a logging statement ...
                         if v_session_control.gLogging_error
                         then
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... billing account is not found for payer:'||v_existing_payer_entity_id
                              );
                         end if;
                         raise no_data_found;

                    elsif v_existing_payer_BA_list.count > 1 then

                         --- @@@ Add a logging statement ...
                         if v_session_control.gLogging_error
                         then
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Multiple billing account are found for payer:'||v_existing_payer_entity_id
                              );
                         end if;
                         raise no_data_found;

                    else
                         -- @@@    Simplify by simply adding to the list of existing payer, and adding an attribute which tells whether this is a new payer
                         --        introduced in this transaction. For the new payers ... we'll end up creating payer objects ... so really, our record, needs
                         --        to have entity id, ba id and payer id ... and if payer id is null, then we should create a payer.

                         v_payer_billing_account := v_existing_payer_BA_list(v_existing_payer_BA_list.first);

                         if v_payer_list.exists(v_payer_billing_account)
                         then


                              null; -- this payer has been already added to the v_payer_list list.

                         else
                              -- Note: the v_payer_list will be indexed by payer's billing account ID.
                              --
                              v_payer_list_idx := v_payer_billing_account;

                              v_payer_list(v_payer_list_idx).PayerEntity_object_id :=  v_existing_payer_entity_id;

                              v_payer_list(v_payer_list_idx).PayerBillingAccount_id := v_payer_billing_account;

                              v_payer_list(v_payer_list_idx).PTPayer_object_id  := v_object_list(v_idx);

                              v_payer_list(v_payer_list_idx).payer_type :=  --UTPRODUCT-1570 start commented below and added
                                                                           /*fn_payer_type_get
                                                                            (
                                                                                 in_session_id,
                                                                                 in_transaction_id,
                                                                                 v_payer_list(v_payer_list_idx).PayerEntity_object_id
                                                                            );*/
                              
                                                                                pkg_os_object_io.fn_object_bv_get
                                                                                (
                                                                                    in_session_id,
                                                                                    in_transaction_id,
                                                                                    v_object_list(v_idx),
                                                                                    gbv_PTPPayer_PayerType
                                                                                );
                                                                           --UTPRODUCT-1570 end  
                               v_payer_list(v_payer_list_idx).is_new_payer :=   'F';

                              -- @@@VG: Raise an exception if unable to get entity or payer type ...

                               --VAULTDEV-6645
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Added billingaccount in payer list :'|| v_payer_billing_account
                                   );
                              end if;


                         end if;

                    end if;

               end if; -- for transactions which do NOT start a term.

               v_idx := v_object_list.next(v_idx);

          end loop; -- for each payer found ...

     end;

     begin
          -- 1.      Loop through all the coverages and create a distinct list of Payers.
          -- 1.1.        During this search we can determine the Payer Type using meta data from the DB_BILLNG_ELEMENT table.
          --
          for r_payers in c_payers -- @@@ rename cur to r_payer
          (
               in_ptp_object_id
          )
          loop
               -- Check the payer billing account path configurations in the following order:
               -- 1. payer_billing_account_path
               -- 2. rule_to_debit_billing_account
               -- 3. debit_billing_account_path
               --
               v_payer_billing_account := case when r_payers.payer_billing_account_path is not null
                                               then pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         r_payers.coverage_object_id,
                                                         r_payers.payer_billing_account_path
                                                    )
                                               when r_payers.rule_to_debit_billing_account is not null
                                               then pkg_os_exp.fn_evaluate_expression
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         r_payers.coverage_object_id,
                                                         r_payers.rule_to_debit_billing_account
                                                    )
                                               else
                                                    pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         r_payers.coverage_object_id,
                                                         r_payers.debit_billing_account_path
                                                    )
                                          end;

               -- kiran start OSPRODUCT-29003
			   
			   -- Kiran start OSPRODUCT-34429
               -- Commenting the below code as relation is not setting for the 1st payer when we have Direct bill Multipayer policy. 
               -- Moving this code to below after adding the payer to the list.
               /*if v_payer_list.count > 0 then
                  if v_payer_list(v_payer_list_idx).PTPayer_business_relation_id is null then
                     v_payer_list(v_payer_list_idx).PTPayer_business_relation_id := r_payers.business_relation_id;
                  end if;
               end if;*/
               -- Kiran end OSPRODUCT-34429
               
               -- kiran end OSPRODUCT-29003
			   
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'found coverage for billingaccount:'||v_payer_billing_account||
                         'r_payers.coverage_object_id:'||r_payers.coverage_object_id||
                         'r_payers.coverage_id:'||r_payers.pc_coverage_id
                         --Kiran start OSPRODUCT-28998
                         ||'Billing element r_payers.db_billing_element_id:'||r_payers.db_billing_element_id
                         --Kiran end OSPRODUCT-28998
                         -- kiran start OSPRODUCT-29003
                         ||' Business relation (r_payers.business_relation_id) :'||r_payers.business_relation_id
                         ||' No of Payers in the list (v_payer_list):'||v_payer_list.count
                         -- kiran end OSPRODUCT-29003					 
                    );

               end if;
			   
			                                   
              --UTPRODUCT-1570 start                            
              v_payer_type_enum    :=   pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         r_payers.coverage_object_id,
                                                         r_payers.payer_type_path
                                                    );
               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Found payer_type enum as '||v_payer_type_enum
                    );
                    
               end if;                                       
              
              --UTPRODUCT-1570 end   

               if v_payer_billing_account is null
               then
                    --       1.2.        If it is not possible to determine a payer's billing account, do SPLAT.
                    --                   DB_BILING_ELEMENT.debit_billing_account_path should be reconfigured
                    --
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'ERROR. Not able to determine billing account for coverage object ' || r_payers.coverage_object_id ||
                         ' using payer billing account path "' || r_payers.payer_billing_account_path || '"' ||
                         '. Check the db_billing_element ' || r_payers.db_billing_element_id ||
                         ', pc_coverage ' ||  r_payers.pc_coverage_id ||
                         ', coverage_object_type ' || r_payers.pc_coverage_object_type_id ||'.'

                    );

                    raise no_billing_account_found;

               elsif
                    -- @@@    Simplify by simply adding to the list of existing payer, and adding an attribute which tells whether this is a new payer
                    --        introduced in this transaction. For the new payers ... we'll end up creating payer objects ... so really, our record, needs
                    --        to have entity id, ba id and payer id ... and if payer id is null, then we should create a payer.

                    v_payer_list.exists(v_payer_billing_account)
               then
                      -- null; -- this payer has been already added to the v_payer_list list.
                      
                      -- OSPRODUCT-15577
                      --
                      -- Get a payer type of the new payer
                      --
                      v_payer_type := fn_payer_type_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_payer_type_enum
                                      );                      
                           
                      -- A billing account may play only ONE role (ie one payer type) is the policy
                      -- If the same billing account is used as more than one payer role, we should stop.
                      -- The sistem is not ready this.
                      -- As a short terum solution, the system will show an error message and does not allow such a 'payer type variation' for the same billing account.
                      --                      
                      -- As a long term solution we need to create a new payer. This will lead to change of consept how we identify a Payer.
                      -- Currently, a Payer is getting identified by BillingAccountID. This should be changed to a combination of 
                      -- BillingAccountID and PayerType
                      --

                      if v_payer_list(v_payer_billing_account).payer_type <> v_payer_type
                      then
                           pkg_os_logging.sp_log_error
                           (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'ERROR. There is EITHER an attempt to change payer type from ' || v_payer_list(v_payer_billing_account).payer_type ||
                                ' to ' || v_payer_type || ' for Partner Entity object ID' || v_payer_list(v_payer_billing_account).PayerEntity_object_id ||
                                ' (Billing Account ID = '|| v_payer_list(v_payer_billing_account).PayerBillingAccount_id || ') ' || 
                                ' OR to use the same Billing Account twice as different payer types. ' ||
                                '. This operation is not supported. Terminating the processes.'                                
                           );
                           
                           io_action_outcome_id := pkg_os_constant.gOutcome_ValidationFailure; -- Note: do not use the pkg_os_constant.gOutcome_UserInputInvalid, the system will not show the error message.

                           return; -- Termintate the process
                           
                      end if;                         
                      -- / OSPRODUCT-15577
					  
					  --  OSPRODUCT-19527
                      if v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Renewal then
                           
                           v_payer_list(v_payer_billing_account).is_valid_payer := 'T';
                           
                           if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Billing Account is present in the list:  '||v_payer_billing_account ||
                                   '.. valid flag updated'
                              );

                           end if;
                      
                      end if;
					  
               else
                    -- Note: the v_payer_list will be indexed by payer's billing account ID.
                    --
                    v_payer_list_idx := v_payer_billing_account;

                    v_payer_list(v_payer_list_idx).PayerEntity_object_id :=  pkg_os_object.fn_object_parent_get  -- Customer Entity / Partner
                                                                             (
                                                                                  in_session_id,
                                                                                  in_transaction_id,
                                                                                  v_payer_billing_account
                                                                             );


                    v_payer_list(v_payer_list_idx).PayerBillingAccount_id := v_payer_billing_account;

                    v_payer_list(v_payer_list_idx).payer_type :=  fn_payer_type_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       --v_payer_list(v_payer_list_idx).PayerEntity_object_id
                                                                       v_payer_type_enum   --UTPRODUCT-1570 commented above parameter and added
                                                                  );

                    v_payer_list(v_payer_list_idx).is_new_payer :=   'T';
                    -- @@@VG: Raise an exception if unable to get entity or payer type ...
					
					--  OSPRODUCT-19527
                    if v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Renewal then
                         
                         v_payer_list(v_payer_list_idx).is_valid_payer := 'T';
                         
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Valid flag updated'
                              );

                         end if;
                                          
                    end if;

                     --VAULTDEV-6645
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Adding billingaccount in payer list for which new payer objects need to be created:'||v_payer_billing_account
                         );
                    end if;


               end if;

          end loop;

          -- The code above shoudl go into a separate procedure ...

          -- @@@VG: This message should be more descriptive ...
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Payer count: ' || v_payer_list.count
               );
          end if;
		  
		  --  OSPRODUCT-19527          
          if v_policy_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Renewal then
               
               if (v_payer_list.count ) > 1 then
               
                    v_payer_list_idx := v_payer_list.first;

                    while v_payer_list_idx is not null loop
                         
                         if v_session_control.gLogging_Full
                         then
                              
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Billing acoount: ' || v_payer_list_idx ||
                                   '.. Valid flag: '      || v_payer_list(v_payer_list_idx).is_valid_payer
                              );
                              
                         end if;
                         
                         if v_payer_list(v_payer_list_idx).is_valid_payer is null then
                              
                              --4031
                              v_chk_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                                            pkg_db_profiles.gbv_Ref_PTPPayerPlchldrPrfInpt
                                                       );

                              -- get the referenced profile placeholder and delete those
                              v_card_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                                            gbv_RefPTPPayerCardPlaceholder
                                                       );
                                                       
                              v_eft_placeholder_id := pkg_os_object_io.fn_object_bv_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,
                                                                v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                                                gbv_RefPTPPayerEFTPlaceholder
                                                           );
                                                           
                              if v_chk_placeholder_id is not null then

                                   pkg_os_object.sp_object_delete
                                   (
                                        in_session_id              =>  in_session_id,
                                        in_transaction_id          =>  in_transaction_id,
                                        in_parent_object_id        =>  NULL,
                                        in_object_id               =>  v_chk_placeholder_id,
                                        in_object_type_id          =>  NULL,
                                        in_soft_delete_tf          =>  FALSE -- hard delete
                                   );

                              end if;

                              if v_eft_placeholder_id is not null then

                                   pkg_os_object.sp_object_delete
                                   (
                                        in_session_id              =>  in_session_id,
                                        in_transaction_id          =>  in_transaction_id,
                                        in_parent_object_id        =>  NULL,
                                        in_object_id               =>  v_eft_placeholder_id,
                                        in_object_type_id          =>  NULL,
                                        in_soft_delete_tf          =>  FALSE -- hard delete
                                   );

                              end if;

                              if v_card_placeholder_id is not null then

                                   pkg_os_object.sp_object_delete
                                   (
                                        in_session_id              =>  in_session_id,
                                        in_transaction_id          =>  in_transaction_id,
                                        in_parent_object_id        =>  NULL,
                                        in_object_id               =>  v_card_placeholder_id,
                                        in_object_type_id          =>  NULL,
                                        in_soft_delete_tf          =>  FALSE -- hard delete
                                   );

                              end if;
                              
                              pkg_os_object.sp_object_delete
                              (
                                   in_session_id              =>  in_session_id,
                                   in_transaction_id          =>  in_transaction_id,
                                   in_parent_object_id        =>  NULL,
                                   in_object_id               =>  v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                   in_object_type_id          =>  NULL,
                                   in_soft_delete_tf          =>  FALSE -- hard delete
                              );

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... This is renewal term, so deleted the payer objects that are not valid..' ||
                                        '... Payer: ' || v_payer_list(v_payer_list_idx).PTPayer_object_id ||
                                        '... Card Placeholder: ' || v_card_placeholder_id ||
                                        '... EFT Placeholder: '  || v_eft_placeholder_id
                                   );

                              end if;
							  
							  -- UTXPRODUCT-522
                              v_payer_list.delete(v_payer_list_idx);
                         
                         end if;                     
                         
                         v_payer_list_idx := v_payer_list.next(v_payer_list_idx);
                         
                    end loop;
               
               end if;      
                                          
          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'count of total payers:'||v_payer_list.count

               );
          end if;

          -- 2.      Check the Payer list.
          --
               --VAULTDEV-6645

               v_previous_image_flag    :=   pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_ptp_object_id,
                    gbv_MultiPayerEnabled_PTP
               );


               -- @@@VG: By consolidating our lists, this logic will become much simpler ...

               if (v_payer_list.count ) > 1
                  or
                 ( 
                  v_payer_list.count =1
                    and
                    v_payer_list(v_payer_list.first).PayerEntity_object_id <> v_default_payer_id

                  )
                 or NVL(v_previous_image_flag,genum_No) =genum_Yes
               then
                    -- 2.1.        If there are more than one payer
                    --             OR
                    --             Preceding transaction was multipayer
                    --             OR
                    --             If there is one payer and the payer the NOT the default one
                    --             Set Policy.MultiPayerEnabled_TF = 'T' and continue
                    --
                    if v_session_control.gLogging_Full
                    then
                    
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Entering MultiPayer flow. There are '||(v_payer_list.count)||' payers in this quote' ||
                              case when v_payer_list.count =1
                                        and
                                        v_payer_list(v_payer_list.first).PayerEntity_object_id <> v_default_payer_id
                                   then
                                        ', but the only payer is not a Customer. Payer ID:'||v_payer_list(v_payer_list.first).PayerEntity_object_id
                                   else '.'
                              end
                         );
                    end if;


                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_ptp_object_id,
                         gbv_MultiPayerEnabled_PTP,
                         genum_Yes
                    );

               else
                    -- 2.2.        else (If there is only one payer and the payer is the default one)
                    --                     Set Policy.MultiPayerEnabled_TF = 'F'
                    --                     EXIT (system will continue existing flow for single payer)
                    --
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Terminating MultiPayer flow. There is only one payer in this quote'
                         );
                    end if;

                         -- VAULTDEV-6645
                    if NVL(v_previous_image_flag,genum_No) =genum_Yes
                    then
                         null;
                         -- Once a multipayer policy,
                         -- flag should not get changed to single payer even if there is just 1 payer and that's a default payer.
                         -- We'll keep multipayer object model
                    else


                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_ptp_object_id,
                              gbv_MultiPayerEnabled_PTP,
                              genum_No
                         );

                     end if;

                    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

                    return;

               end if;

     end;

      --VAULTDEV-6645
     -- By now, it's determind that it's a multipayer policy. So, we'll check that if default payer is not yet added to payer list, add is now.

      -- Check multipayer mode on PTP..

     v_PolicyMultiPayerEnabled := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_ptp_object_id
                             );


     -- Check multipayer mode on basis PTP..

     v_basis_ptp_id := pkg_os_object_io.fn_object_bv_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_policy_transaction_id,
                            21912302
                       );

     v_old_PolicyMultiPayerEnabled := pkg_db_multipayer.fn_multipayer_mode_tf
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_basis_ptp_id
                                      );

     -- Is this transaction is changing policy from single payer to multipayer, we need to  add default payer as well.
     if v_PolicyMultiPayerEnabled and v_basis_ptp_id is not null and not v_old_PolicyMultiPayerEnabled
        and
        v_policy_trx_type_id not in
                    (
                         pkg_os_policy_transaction.gPolicyTrxType_Renewal,
                         pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,
                         pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,
                         pkg_os_policy_transaction.gPolicyTrxType_Reissue,
                         pkg_os_policy_transaction.gPolicyTrxType_Rewrite
                    )
     then

          v_payer_billing_account := pkg_os_object_search.fn_object_11_child_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_default_payer_id,
                                          pkg_db_multipayer.gObjType_BillingAccount
                                     );

           if not v_payer_list.exists(v_payer_billing_account) then


                -- Note: the v_payer_list will be indexed by payer's billing account ID.

                v_payer_list_idx := v_payer_billing_account;

                v_payer_list(v_payer_list_idx).PayerEntity_object_id :=  pkg_os_object.fn_object_parent_get  -- Customer Entity / Partner
                                                                                  (
                                                                                       in_session_id,
                                                                                       in_transaction_id,
                                                                                       v_payer_billing_account
                                                                                  );

                v_payer_list(v_payer_list_idx).PayerBillingAccount_id := v_payer_billing_account;

                v_payer_list(v_payer_list_idx).payer_type :=  fn_payer_type_get
                                                                       (
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            --v_payer_list(v_payer_list_idx).PayerEntity_object_id
                                                                            genum_PayerType_Insured   -- UTPRODUCT-1570 commented above parameter and added
                                                                       );

                v_payer_list(v_payer_list_idx).is_new_payer :=   'T';

                if v_session_control.gLogging_Full
                then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'It is multipayer policy but default payer is not yet created. So, adding it:'||v_payer_billing_account
                    );

                end if;

           end if;

      end if;

      -- 3. Loop the Payer list, for each Payer
      --
      --VAULTDEV-6645
      begin -- Create instances of a PolicyTransactionPolicyPayer object

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Creating instances of a PolicyTransactionPolicyPayer object, be sure to set a Payer Type....'||v_payer_list.first
               );
          end if;


          v_payer_list_idx := v_payer_list.first;

          while v_payer_list_idx is not null
          loop
               -- 3.1.        Create an instance of a PolicyTransactionPolicyPayer object, be sure to set a Payer Type.
               --
               if v_payer_list(v_payer_list_idx).is_new_payer = 'T' then

                    v_payer_account_type := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_payer_list(v_payer_list_idx).PayerBillingAccount_id,
                                                 pkg_db_billing_modify.gbv_BillingAccountType
                                            );

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Creating instances of a PolicyTransactionPolicyPayer object,for object.'|| v_payer_list_idx ||
                              '..Billing Account ID: ' || v_payer_list(v_payer_list_idx).PayerBillingAccount_id ||
                              '..Payer Type: '         || v_payer_account_type
                         );
                    end if;

                    pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_PTPPayer,
                         in_ptp_object_id,
                         v_payer_list(v_payer_list_idx).PTPayer_object_id
                    );

                    v_bv_table.delete;

                    v_bv_table(gbv_PTPPayer_PayerType        ).business_variable_value         :=   v_payer_list(v_payer_list_idx).payer_type;
                    v_bv_table(gbv_PTPPayer_Ref_CustmrPartnr ).business_variable_value         :=   v_payer_list(v_payer_list_idx).PayerEntity_object_id;
                    
                    -- UTPRODUCT-3878 start
			
                    v_entity_object_type_id                  := pkg_os_object.fn_object_type_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       v_payer_list(v_payer_list_idx).PayerEntity_object_id
                                                                  );
                                                                      
                    if  NVL(v_entity_object_type_id,0) =pkg_db_object.gObjTypeCustomerEntity   then
                                                                   
                         v_entity_ultimate_parent_id              := pkg_os_object_io.fn_object_bv_get
                                                                     ( 
                                                                          in_session_id,
                                                                          in_transaction_id,
                                                                          v_payer_list(v_payer_list_idx).PayerEntity_object_id, 
                                                                          pkg_db_object.gbv_FItem_RefUltimateTempID
                                                                     );                                                                                                             
                         v_customerentity_list.delete;
						   
							   
																			   
						 
                         pkg_os_object_search.sp_object_with_attribute_get
                         (
                              in_session_id                 => in_session_id,
                              in_transaction_id             => in_transaction_id,
                              in_parent_object_id           => in_ptp_object_id,
                              in_object_type_id             => pkg_db_object.gObjTypeCustomerEntity,
                              in_business_variable_id       => pkg_db_object.gbv_FItem_RefUltimateTempID,
                              in_business_variable_value    => v_entity_ultimate_parent_id,
                              out_object_list               => v_customerentity_list
                         );
                         
                         if v_customerentity_list.count > 0 then
                              
                              v_bv_table(gbv_PTPPayer_Ref_LocalEntity ).business_variable_value         :=   v_customerentity_list(v_customerentity_list.first).object_id;         
                         
                         end if;   
                         
                         
                    end if;

                    -- UTPRODUCT-3878 end
                    
                    v_bv_table(PKG_DB_PAYMENT_ARRANGEMENT.gbv_PTPayerPrefWithdrawalDay).business_variable_value   :=  v_withdrawal_day;
                    --OSPRODUCT-19874

                    -- kiran start OSPRODUCT-29003
                    v_bv_table(PKG_DB_CONSTANT.gbv_PTPayerBusinessRelation).business_variable_value          :=  v_payer_list(v_payer_list_idx).PTPayer_business_relation_id;
                    -- kiran end OSPRODUCT-29003
                    
                    -- Get the profile placeholders
                    -- UTXPRODUCT-462                    
                    if v_payer_profile_list.exists(v_payer_list(v_payer_list_idx).PayerEntity_object_id) then
                         
                         v_bv_table(pkg_db_profiles.gbv_Ref_PTPPayerCardPlchldr).business_variable_value     := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringCardPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PTPPayerPlchldrPrfInpt).business_variable_value  := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringChkPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PTPPayerEFTPlchldr).business_variable_value      := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringEFTPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PayerDwnPmCardPlchldr).business_variable_value   := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntCardPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PayerDwnPmEFTPlchldr).business_variable_value    := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntEFTPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PayerDwnPlchldrPrfInpt).business_variable_value  := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntChkPlchldrProfile;
                         v_bv_table(pkg_db_profiles.gbv_Ref_PTPPayerCurrentProfile).business_variable_value  := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringExistingProfile;                                                                                       
                         v_bv_table(pkg_db_profiles.gbv_PayerDifferentAdhocPrf).business_variable_value      := v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DifferentPrfForDwnPmnt; 
                         
                         --Set the reference creator of CTF on the CTF object as the references were deleted above --OSPRODUCT-32302
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringCardPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringChkPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).RecurringEFTPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntCardPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntEFTPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_payer_profile_list(v_payer_list(v_payer_list_idx).PayerEntity_object_id).DwnPmntChkPlchldrProfile,pkg_db_profiles.gbv_CTFCreator,v_payer_list(v_payer_list_idx).PTPayer_object_id);
                         
                    end if;
                    
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_payer_list(v_payer_list_idx).PTPayer_object_id,
                         v_bv_table
                    ); 
                    
                    --OSPRODUCT-1478 ends
               end if;
               
               -- OSPRODUCT-2908
               pkg_os_datamart.sp_datamart_update_row (in_session_id, in_transaction_id, v_payer_list(v_payer_list_idx).PTPayer_object_id, v_datamart_tf);
               
               v_payer_list_idx := v_payer_list.next(v_payer_list_idx);

          end loop;


          pkg_db_multipayer.sp_print_payer_list
          (
               in_session_id,
               in_transaction_id,
               v_payer_list
          );
     end;



     begin --  Selective copying of payement plans...

          v_payment_plan_common_list.delete;

          -- 4.      Starting from the PTP, search for direct childs of type PaymentPlan.
          --
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_Id              =>    in_session_id,
               in_transaction_id          =>    in_transaction_id,
               in_object_id               =>    in_ptp_object_id,
               in_child_object_type_id    =>    gObjType_PaymentPlan,
               in_object_list             =>    v_payment_plan_common_list,
               in_exclude_object_id       =>    null,
               in_exclude_object_type_id  =>    gObjType_PTPPayer -- exclude multipyaer's payment plans
          );

          v_idx_payplan_common := v_payment_plan_common_list.first;

          v_payplan_common_table.extend(v_payment_plan_common_list.count);

          while v_idx_payplan_common is not null
          loop
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......Caching Payment Plan:'||v_payment_plan_common_list(v_idx_payplan_common)
                    );
               end if;


               v_payplan_common_table(v_idx_payplan_common) := ID_PAIR_REC(
                                                                            id1 => v_payment_plan_common_list(v_idx_payplan_common), -- PaymentPlan object ID
                                                                            id2 => pkg_os_object_io.fn_object_bv_get                 -- PaymentPlan ID from PAYMENT_PLAN MD table
                                                                                   (
                                                                                        in_session_id,
                                                                                        in_transaction_id,
                                                                                        v_payment_plan_common_list(v_idx_payplan_common),
                                                                                        gbv_PaymentPlan_ID
                                                                                   )
                                                                          );

               v_idx_payplan_common := v_payment_plan_common_list.next(v_idx_payplan_common);
          end loop;


          -- 5.      For each payment plan loop the payers
          --
          -- OSPRODUCT-4811 start
          v_basis_trx_id := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_policy_transaction_id,
                                 pkg_db_functions.gbv_policytrx_basisreftrx
                            );

          if v_basis_trx_id is null then

               pkg_os_object_io.sp_object_bv_set
               (
                     in_session_id,
                     in_transaction_id,
                     in_ptp_object_id,
                     pkg_db_rating_payplan.gbv_ChosenPaymentPlanObjectID,
                     null
               );

          end if;
          -- OSPRODUCT-4811 end
          for c_pp in (
                       select
                            ppct.id1                     as payment_plan_object_id,
                            ppct.id2                     as payment_plan_id,
                            pp.payment_plan_name         as payment_plan_name,
                            pp.db_payer_type_set_id      as payer_type_set,
                            pts.db_payer_type_set_name   as payer_type_set_name,
                            pp.default_tf                as default_tf -- OSPRODUCT-4811
                       from
                            payment_plan   pp
                       join
                            table(v_payplan_common_table) ppct  on (pp.payment_plan_id = ppct.id2)
                       left join
                            db_payer_type_set             pts   on (pts.db_payer_type_set_id = pp.db_payer_type_set_id)
                       order by                   -- OSPRODUCT-5113        
                             pp.display_order     -- OSPRODUCT-5113  
                      )
          loop
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Processing Payment Plan object ID:'||c_pp.payment_plan_object_id||
                         '(plan ID:'||c_pp.payment_plan_id||')'||
                         ', plan name:' || c_pp.payment_plan_name ||
                         ', Payer Type Set:'||c_pp.payer_type_set || '(name '||c_pp.payer_type_set_name||')'
                    );
               end if;


               v_payer_list_idx := v_payer_list.first;

               while v_payer_list_idx is not null
               loop
                    -- 5.1.        Check if the payment plan in question is accessible for the payer in question
                    --


                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Check if the plan is available for Payer '||v_payer_list(v_payer_list_idx).PayerEntity_object_id ||' of type ' || v_payer_list(v_payer_list_idx).payer_type
                              || 'v_payer_list(v_payer_list_idx).PTPayer_object_id'||v_payer_list(v_payer_list_idx).PTPayer_object_id||
                              'v_payer_list(v_payer_list_idx).is_new_payer:'||v_payer_list(v_payer_list_idx).is_new_payer
                         );
                    end if;


                    if  v_payer_list(v_payer_list_idx).is_new_payer =   'T'
                    then

                    if  PKG_DB_MULTIPAYER.fn_payer_in_set
                        (
                             in_payer_type_id      =>  v_payer_list(v_payer_list_idx).payer_type,
                             in_payer_type_set_id  =>  c_pp.payer_type_set
                        ) = 'T'
                        or
                        v_payer_list(v_payer_list_idx).payer_type = g_DbPayerType_Insured
                    then
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......Payment Plan is available for payer. Copying the payment plan....'
                              );
                         end if;


                         begin
                              -- 5.1.1.         Clone this PaymentPlan and its PaymentPlanScheduledPayments
                              --
                              pkg_os_object_copy.sp_object_copy
                              (
                                   in_session_id                  =>  in_session_id,
                                   in_transaction_id              =>  in_transaction_id,
                                   in_from_object_id              =>  c_pp.payment_plan_object_id,
                                   in_to_parent_id                =>  in_ptp_object_id,                                                             -- in        object.object_id%type,
                                   in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                                   in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                                   io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                                   io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                                   out_object_id                  =>  v_newPayerPaymentPlan_id,                                                     -- out       object.object_id%type,
                                   in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                                   in_recursive_copy_tf           =>  'T', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                                   in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                                   in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                                   in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                                   in_resolve_references          =>  TRUE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                                   in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                              );

                              -- 5.1.2.         Make a Payment plan to be specific for a payer: "place" them under the
                              --                PTPPayer object via pkg_os_object.sp_object_transmute
                              --
                              pkg_os_object.sp_object_transmute
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_newPayerPaymentPlan_id,                             -- object to transmute
                                   v_payer_list(v_payer_list_idx).PTPayer_object_id,     -- new object parent
                                   gObjType_PTPPayerPaymentPlan                          -- new object type
                              );
                                   
                                   -- OSPRODUCT-4811 start
                                   if (v_basis_trx_id is null and c_pp.default_tf = 'T')
                                      -- UTXPRODUCT-817 start
                                      or 
                                      (
                                            v_basis_trx_id is not null
                                            and c_pp.default_tf = 'T'
                                            and v_new_term = 1
                                            and 
                                            pkg_os_object_io.fn_object_bv_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                                  gbv_PTPPayer_Ref_ChosenPayPlan
                                            ) is null
                                      ) 
                                      -- UTXPRODUCT-817 end  
                                   then
                                        
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             gbv_PTPPayer_Ref_ChosenPayPlan,
                                             v_newPayerPaymentPlan_id
                                        );                                             
                                             
                                        if v_session_control.gLogging_Full then
                                        
                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'Default Plan set on PTPpayer ...'
                                              );
                                              
                                        end if;

                                   end if;
                                   -- OSPRODUCT-4811 End
													 
                              -- debug mode
                              --
                              -- 5.1.3.         For testing from pl/sql block, set the chosen payment plan as just the first available one...
                              --                This should done from UI page 500406
                              --
                                   -- OSBILLING-2281
                                   -- Modified the condition and reverted it to what it originally was
                                   if in_set_chosen_plan_tf then
                                             
                                   if v_payer_list(v_payer_list_idx).chosen_payment_plan is null
                                   then
                                        --  Add to the cache
                                        --
                                        v_payer_list(v_payer_list_idx).chosen_payment_plan := v_newPayerPaymentPlan_id;

                                        -- Set ref BV
                                        --
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             gbv_PTPPayer_Ref_ChosenPayPlan,
                                             v_newPayerPaymentPlan_id
                                        );
                                   end if;

                              end if; -- /debug mode
                         end; -- /Cloning the payment plan....

                         -- VAULTDEV-6645
                         -- Is this transaction is changing policy from single payer to multipayer, we need to  set choosen payplan on payer
                         if v_PolicyMultiPayerEnabled and v_basis_ptp_id is not null and not v_old_PolicyMultiPayerEnabled
                              then

                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'this payer:'||v_payer_list(v_payer_list_idx).PayerEntity_object_id
                                        ||'default payer:'||fn_default_payer_get(in_session_id ,in_transaction_id,in_ptp_object_id)

                                   );
                              end if;

                              if v_payer_list(v_payer_list_idx).PayerEntity_object_id = fn_default_payer_get(in_session_id ,in_transaction_id,in_ptp_object_id)
                               and c_pp.payment_plan_id=pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_ptp_object_id,'212021.212015')
                                then


                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             gbv_PTPPayer_Ref_ChosenPayPlan,
                                             v_newPayerPaymentPlan_id
                                        ); 
                                             
                                        -- Set the UTemplate id so that payplan can not be changed for this payer
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             26725601,
                                             v_basis_ptp_id
                                        );
                                        
                                        --UTPRODUCT-4446
                                        
                                        v_basis_billplan_id := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_basis_ptp_id, pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt);
                                        
                                        -- Set the Bill Plan
                                        -- OSPRODUCT-2281
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan,
                                             v_basis_billplan_id
                                        );
                                        
                                        
                                        
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             pkg_db_payment_arrangement.gbv_Ref_TermPayerPrefBillPlan,
                                             v_basis_billplan_id
                                        );
                                        
                                        --UTPRODUCT-4446 end
                                        
                                        --OSPRODUCT-7172 start
                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                             pkg_db_payment_arrangement.gbv_PTPayerDownPaymentMode,
                                             null
                                        );
                                        --OSPRODUCT-7172 end
                                        if v_session_control.gLogging_Full then
                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.. Setting the Bill Plan and Payment Plan on the default payer..'
                                             );
                              end if;
                                        -- OSPRODUCT-1413 -- to be changed to get BVs from PTP and set on payer (v_payer_list(v_payer_list_idx).PTPayer_object_id)
                                             -- UTPRODUCT2-1 start as policy is changing to SP to MP, get the preference from term and add on insured payer.
                                             
                                             v_invoice_preference :=  pkg_os_object_io.fn_object_bv_get
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           v_term_id,
                                                                           pkg_db_object.gbv_PTerm_InvoicePref
                                                                      ); 
                                                                      
                                             if v_session_control.gLogging_Full then

                                                  pkg_os_logging.sp_log
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_procedure_name,
                                                       'copying invoice pref from PT: ' ||v_policy_transaction_id
                                                       || ' from term:'||v_term_id
                                                       || ' to  PTPpayer: '||v_term_id
                                                       || ' value :'||v_invoice_preference
                                                  );

                                             end if; 
                                             
                                             if v_invoice_preference is not null then   
                                                                         
                                                  pkg_os_object_io.sp_object_bv_set
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_payer_list(v_payer_list_idx).PTPayer_object_id,
                                                       pkg_db_object.gbv_PTPPayer_InvoicePref,
                                                       v_invoice_preference
                                                  );
                                             
                                             end if;   
                                             
                                             -- UTPRODUCT2-1 end                      
                                                                      
                                       end if;
                                   end if;
                         else
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......Payment Plan is NOT available for payer'
                              );
                         end if;

                    end if;

                    end if;
                    v_payer_list_idx := v_payer_list.next(v_payer_list_idx);

               end loop;   --/ Payers Loop
          end loop;   --/ Payment Plans Loop

          PKG_DB_MULTIPAYER.sp_print_payer_list
          (
               in_session_id,
               in_transaction_id,
               v_payer_list
          );

          --  Make the Payer List to be inedexed by chosen
          --  !!!! This will fail once we remove " 5.1.3. For testing from pl/sql block, set the chosen payment plan as just the first available one"
          --  Leave the Payer List be indexed by billng account. Acutally, the list is a local varialbe and we should not care of it at all.
          --
          --/*
          if in_set_chosen_plan_tf
          then
               PKG_DB_MULTIPAYER.sp_payer_list_reindex
               (
                    in_session_id,
                    in_transaction_id,
                    v_payer_list,
                    g_PayerGet_idx_ChosenPlan
               );
          end if;

          --*/

     end;   -- Selective copying of payement plans...

     --OSBILLING-7451
      pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id,
                                        32967224,  -- payer changed
                                        0--yes
                                   );
     -- set chossen payplan on default payer


     -- VAULTDEV-6645
     -- delete unused payers
     sp_policy_image_payer_delete(in_session_id,in_transaction_id,in_ptp_object_id,io_action_outcome_id);

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     --raise no_data_found;

end sp_policy_image_payer_create;
----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_payers_get
--
--   %USAGE
--        This proc is been invoked from sp_policy_term_payers_get and sp_ptp_payers_get to rertun an indexed list of payer records.
--        Each of the procedure passed a list of object (result of object search). This list of object will transformed into unified
--        list of r_payer records.
--        Unified list can be easily compared.
--
--
--   %ALGORITHM
--        Main assumption: a Payer is represented by an instance one of this object types:
--                     a) PolicyTransactionPolicyPayer
--                     b) PolicyTermAssociatedPayer (that is a type of PolicyTransactionPolicyPayer (see a). )
--        The b) is a type of a). This make possible to have common code to populate Payer structure - r_payer type defined in this package, especially Payer entity.
--
--        1.        Get Multipayer flag. If PolicyMultiPayerEnabled = 'N', just use existing logic.
--        1.1.        If multi payer mode is ON
--        1.1.1.        Get the index by which a the returned payer list will be indexed
--        1.1.2.        Add a payer to the list
--        1.1.2.1         Set attributes of the r_payer structure:
--                              PayerEntity_object_id
--                              PayerBillingAccount_id
--                              payer_type
--                              PTPayer_object_id
--                              chosen_payment_plan
--                              scheduled_payment_list
--                              invoice_profile

--        1.2.        Else (multi payer mode is OFF - aka single payer mode)
--                    There will be ONLY one payer in the returned list and this payer will be determined by
--                    the fn_default_payer_get defined in this package.
--        1.2.1.        Get the index by which a the returned payer list will be indexed
--        1.2.2.        Add a payer to the list
--        1.2.2.1         Set attributes of the r_payer structure:
--                              PayerEntity_object_id := fn_default_payer_get
--                              PayerBillingAccount_id
--                              payer_type            := NULL
--                              PTPayer_object_id     := NULL as far as there is no
--                              chosen_payment_plan
--                              scheduled_payment_list
--                              invoice_profile
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_payers_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_ptp_object_id              in            object.object_id%type,
     in_multipayer_tf              in            boolean,
     io_payer_list                 in out nocopy pkg_db_multipayer.t_payer_tab, -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
     io_payer_search_list          in out nocopy pkg_os_object.t_object_list,      -- result of child search. List of object IDs.
     in_print_list                 in            char     default 'N',
     in_index_by                   in            varchar2 default g_PayerGet_idx_ChosenPlan -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payers_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_idx                              binary_integer;
     v_idx_io                           long;
     v_PolicyMultiPayerEnabled          boolean;
     
     -- OSPRODUCT-3235
     v_payer_type_id                    object.object_id%type;
     v_entity_id                        object.object_id%type;
     v_billing_account_id               object.object_id%type;
     v_object_type_id                   object_type.object_type_id%type;
     v_update_dm_tf                     char(1) := 'F';
     -- end OSPRODUCT-3235
	v_datamart_tf                      char(1) := 'T';
     
begin

     if in_multipayer_tf                     -- Multipayer mode = True is passed via parameter
     then
          
          v_PolicyMultiPayerEnabled := true;  --    believe in the input parameter and assume it is Multipayer mode

     elsif not nvl(in_multipayer_tf, false ) -- single payer mode OR in_multipayer_tf is NULL - need to check the Multipayer mode on PTP level
           and
           in_ptp_object_id is not null
     then
          --
          --  1. Get Multipayer flag. If PolicyMultiPayerEnabled = 'N', just use existing logic.
          --
          v_PolicyMultiPayerEnabled := pkg_db_multipayer.fn_multipayer_mode_tf
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_ptp_object_id
                                       );
     else
          
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ERROR: Unable to get payers - parameter in_multipayer_tf = False and policy image is not specified.'
          );

          raise no_payer_found;

     end if;

     io_payer_list.delete;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Policy Image ID : ' || in_ptp_object_id ||
               ', Payer Count: '        || io_payer_search_list.count ||
               ', Multipayer Enabled :'|| case when in_multipayer_tf is null then 'NULL'
                                               when in_multipayer_tf         then 'TRUE'
                                               else                               'FALSE'
                                          end ||
               '. Calculated PolicyMultiPayerEnabled = '|| case when v_PolicyMultiPayerEnabled
                                                       then 'Yes'
                                                       else 'No'
                                                   end
          );
          
     end if;

     if v_PolicyMultiPayerEnabled
     then -- multi payer logic -----------------------------------------------------------
          --        1.1.        If multi payer mode is ON
          --
          -- 
          
          begin

               v_idx := io_payer_search_list.first;
               
               if v_idx is not null then
               
                    v_object_type_id := pkg_os_object.fn_object_type_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             io_payer_search_list(v_idx)
                                        );
                                        
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Object type ID: ' || v_object_type_id
                         );
                              
                    end if;
                                        
               end if;
                                   
               while v_idx is not null
               loop
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Payer ID: ' || io_payer_search_list(v_idx)
                         );
                              
                    end if;
                    
                    v_payer_type_id := null;
                    v_entity_id := null;
                    v_billing_account_id := null;
                    v_update_dm_tf := 'F';
                    
                    -- OSPRODUCT-3235
                    if v_object_type_id = gObjType_PTPPayer then
                         
                         begin
                              
                              select
                                   pp.payer_type_id,
                                   pp.primary_entity_id,
                                   pp.billing_account_id
                              into
                                   v_payer_type_id,
                                   v_entity_id,
                                   v_billing_account_id
                              from
                                   dragon_ptp_payer pp
                              where
                                   pp.ptp_payer_id = io_payer_search_list(v_idx);
                                   
                         exception
                              
                              when others then
                                                      
                                   v_update_dm_tf := 'T';
                                   
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '..Could not find the values in datamart..'
                                        );
                                        
                                   end if;
                                   
                         end;
                         
                    end if;
                    
                    if v_entity_id is null then
                                        
                         v_entity_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            io_payer_search_list(v_idx),
                                            pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                        );
                                                       
                    end if;
                                   
                    if v_billing_account_id is null then
                                        
                         v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_entity_id,
                                                      pkg_db_multipayer.gObjType_BillingAccount
                                                 );
                                                                
                    end if;
                                   
                    if v_payer_type_id is null then
                                        
                         v_payer_type_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  io_payer_search_list(v_idx),
                                                  gbv_PTPPayer_PayerType   
                                            );
                                                           
                    end if;        
                    -- end OSPRODUCT-3235
                         
                    --        1.1.1.        Get the index by which a the returned payer list will be indexed
                    --
                    if in_index_by = g_PayerGet_idx_ChosenPlan then
                         
                         -- Payer list will be indexed by ChosenPayPlan ID
                         --
                         v_idx_io := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          io_payer_search_list(v_idx),
                                          pkg_db_multipayer.gbv_PTPPayer_Ref_ChosenPayPlan
                                     );
                                     
                    elsif in_index_by = g_PayerGet_idx_ModifiedPlan  --VAULTDEV-6645
                    then
                         
                         -- Payer list will be indexed by ChosenPayPlan ID
                         --
                         v_idx_io := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          io_payer_search_list(v_idx),
                                          32967024
                                     );
                                                    
                    elsif in_index_by = g_PayerGet_idx_CustmrPartnr
                    then
                         
                         -- Payer list will be indexed by Customer Entity / Partner ID
                         --
                         -- OSPRODUCT-3235
                         /*v_idx_io :=  pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           io_payer_search_list(v_idx),
                                           pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                      );*/
                         
                         v_idx_io := v_entity_id;
                                      
                    elsif in_index_by = g_PayerGet_idx_PTPayer
                    then
                         
                         -- Payer list will be indexed by PTPPayerID/ PolicyTermPayerID
                         --
                         v_idx_io :=  io_payer_search_list(v_idx);

                    elsif in_index_by = g_PayerGet_idx_BilingAccount
                    then
                         
                         -- Payer list will be indexed by Billing Account ID
                         --
                         -- OSPRODUCT-3235
                         /*v_idx_io := pkg_os_object_search.fn_object_11_child_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          pkg_os_object_io.fn_object_bv_get
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               io_payer_search_list(v_idx),
                                               PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_CustmrPartnr
                                          ),
                                          PKG_DB_MULTIPAYER.gObjType_BillingAccount
                                     );*/
                         
                         v_idx_io := v_billing_account_id;

                    else
                         -- Payer list will be empty
                         --
                         v_idx_io := null;
                         
                    end if;
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Index: ' || v_idx_io
                         );
                              
                    end if;

                    if v_idx_io is not null  -- null means, the chosen plan has not yet been set.
                                             -- Not a problem, we will not leave those page until all payer has a chosen payplan.
                                             -- So, for each payer, one-by-one, it will be set.
                    then
                         
                         io_payer_list(v_idx_io).PTPayer_object_id := io_payer_search_list(v_idx);

                         io_payer_list(v_idx_io).chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                                                         (
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              io_payer_search_list(v_idx),
                                                                              PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_ChosenPayPlan
                                                                         );

                         io_payer_list(v_idx_io).invoice_profile := pkg_os_object_io.fn_object_bv_get
                                                                         (
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              io_payer_search_list(v_idx),
                                                                              PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_InvProfile
                                                                         );
                                                                         
                         -- VAULTDEV-6645                                      
                         io_payer_list(v_idx_io).modified_payment_plan := pkg_os_object_io.fn_object_bv_get
                                                                           (
                                                                                in_session_id,
                                                                                in_transaction_id,
                                                                                io_payer_search_list(v_idx),
                                                                                32967024
                                                                           ); 
                                                                           
                         -- OSPRODUCT-3235
                         /*io_payer_list(v_idx_io).PayerEntity_object_id := pkg_os_object_io.fn_object_bv_get
                                                                           (
                                                                                in_session_id,
                                                                                in_transaction_id,
                                                                                io_payer_search_list(v_idx),
                                                                                PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_CustmrPartnr
                                                                           );*/
                                                                           
                         io_payer_list(v_idx_io).PayerEntity_object_id := v_entity_id;

                         /*io_payer_list(v_idx_io).PayerBillingAccount_id := pkg_os_object_search.fn_object_11_child_get
                                                                           (
                                                                                in_session_id,
                                                                                in_transaction_id,
                                                                                io_payer_list(v_idx_io).PayerEntity_object_id,
                                                                                PKG_DB_MULTIPAYER.gObjType_BillingAccount
                                                                           );*/
                                                                           
                         io_payer_list(v_idx_io).PayerBillingAccount_id := v_billing_account_id;

                         /*io_payer_list(v_idx_io).payer_type := pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      io_payer_search_list(v_idx),
                                                                      gbv_PTPPayer_PayerType   
                                                                 ); --UTPRODUCT-1570 end*/
                                                                 
                         io_payer_list(v_idx_io).payer_type := v_payer_type_id;                                                                 
                         
                                                         
                    end if; -- /v_idx_io is not null for multi payer
                    
                    -- OSPRODUCT-3235 Update datamart
                    if v_update_dm_tf = 'T' then
                              
                         begin
                                   
                              insert into DRAGON_PTP_PAYER (
                                    PTP_TRANSACTION_ID
                                   ,PTP_ID
                                   ,PRIMARY_ENTITY_ID
                                   ,PTP_PAYER_ID
                                   ,PAYER_NAME
                                   ,PAYER_TYPE_ID
                                   ,BILLING_ACCOUNT_ID
                                   ,ACCOUNT_TYPE_ID
                              ) values (
                                    pkg_os_object.fn_object_parent_get (in_session_id, in_transaction_id, in_ptp_object_id)
                                   ,in_ptp_object_id
                                   ,io_payer_list(v_idx_io).PayerEntity_object_id
                                   ,io_payer_search_list(v_idx)
                                   ,pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, io_payer_search_list(v_idx),'32714824.29704646.211882' )
                                   ,io_payer_list(v_idx_io).payer_type
                                   ,io_payer_list(v_idx_io).PayerBillingAccount_id
                                   ,pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, io_payer_list(v_idx_io).PayerBillingAccount_id, 29711346)
                              );
                              
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '..Datamart updated..'
                                   );
                                   
                              end if;
                              
                         exception
                              -- UTPRODUCT-3923
                              when others then
                                   
                                   pkg_os_datamart.sp_datamart_update_row
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        io_payer_search_list(v_idx),
                                        v_datamart_tf
                                   );
                                   
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '..Datamart updated..'
                                        );
                                        
                                   end if;
                                   
                         end;
                              
                    end if;
                    
                    v_idx := io_payer_search_list.next(v_idx); 
                    
               end loop;
               
          end;
          
     else -- single payer logic -----------------------------------------------------------
          --        1.2.        Else (multi payer mode is OFF - aka single payer mode)
          --
          begin
               if in_index_by = g_PayerGet_idx_ChosenPlan
               then
                    -- Payer list will be indexed by ChosenPayPlan ID
                    --
                    v_idx_io := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_ptp_object_id,
                                     pkg_db_payplan_modify.gbv_PolicyRefChosenPlan
                                );
                elsif in_index_by = g_PayerGet_idx_ModifiedPlan--VAULTDEV-6645
                    then
                         -- Payer list will be indexed by ChosenPayPlan ID
                         --
                         v_idx_io := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_ptp_object_id,
                                          31906646
                                     );                
                elsif in_index_by in (g_PayerGet_idx_CustmrPartnr, g_PayerGet_idx_PTPayer)
                then
                    -- Payer list will be indexed by Customer Entity / Partner ID
                    --
                    v_idx_io :=  PKG_DB_MULTIPAYER.fn_default_payer_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_ptp_object_id
                                 );
                elsif in_index_by = g_PayerGet_idx_BilingAccount
                then
                    -- Payer list will be indexed by Billing Account ID
                    --
                    v_idx_io := pkg_os_object_search.fn_object_11_child_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     PKG_DB_MULTIPAYER.fn_default_payer_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_ptp_object_id
                                     ),
                                     PKG_DB_MULTIPAYER.gObjType_BillingAccount
                                );
                else
                    -- Payer list will be empty
                    --
                    v_idx_io := null;
                end if;

                if v_idx_io is not null -- see explanation above
                then
                     io_payer_list(v_idx_io).PTPayer_object_id   :=  null; -- there is no Payer object in the single payer mode

                     io_payer_list(v_idx_io).chosen_payment_plan :=  pkg_os_object_io.fn_object_bv_get
                                                                     (
                                                                          in_session_id,
                                                                          in_transaction_id,
                                                                          in_ptp_object_id,
                                                                          pkg_db_payplan_modify.gbv_PolicyRefChosenPlan
                                                                     );
                         --VAULTDEV-6645                                                             
                     io_payer_list(v_idx_io).modified_payment_plan :=  pkg_os_object_io.fn_object_bv_get
                                                                     (
                                                                          in_session_id,
                                                                          in_transaction_id,
                                                                          in_ptp_object_id,
                                                                          31906646
                                                                     );                                                

                     io_payer_list(v_idx_io).invoice_profile     :=  pkg_os_object_io.fn_object_bv_get
                                                                     (
                                                                          in_session_id,
                                                                          in_transaction_id,
                                                                          in_ptp_object_id,
                                                                          PKG_DB_MULTIPAYER.gbv_PTP_Ref_InvoiceProfile
                                                                     );

                     io_payer_list(v_idx_io).PayerEntity_object_id :=  PKG_DB_MULTIPAYER.fn_default_payer_get
                                                                       (
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            in_ptp_object_id
                                                                       );

                     io_payer_list(v_idx_io).PayerBillingAccount_id := pkg_os_object_search.fn_object_11_child_get
                                                                       (
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            io_payer_list(v_idx_io).PayerEntity_object_id,
                                                                            PKG_DB_MULTIPAYER.gObjType_BillingAccount
                                                                       );
                end if; -- /v_idx_io is not null for sing payer
           end;
     end if; --   v_PolicyMultiPayerEnabled =1

     if in_print_list = 'Y'
     then
          PKG_DB_MULTIPAYER.sp_print_payer_list
          (
               in_session_id,
               in_transaction_id,
               io_payer_list
          );
     end if;

end sp_payers_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_policy_term_payers_get
--
--   %USAGE
--        An interface to the sp_payer_get for Policy Term
--
--
--   %ALGORITHM
--        Main assumption: a Payer is represented by an instance one of this object types:
--        1.        Search PolicyTermAssociatedPayer childs under the PolicyTerm
--        2.        Call sp_payers_get to transform the the list of child Payers to a list of unified payer structures (r_payer)
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_policy_term_payers_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_policy_term_id             in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab, -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
     in_print_list                 in            char     default 'N',
     in_index_by                   in            varchar2 default g_PayerGet_idx_ChosenPlan, -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     in_ptp_object_id              in            object.object_id%type default null
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_term_payers_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_payer_list           pkg_os_object.t_object_list; -- result of child search. List of object IDs.

     v_policy_id                        object_bv_value.business_variable_value%type;
     v_PolicyMultiPayerEnabled          boolean;
     v_ptp_object_id                    object_bv_value.business_variable_value%type := in_ptp_object_id;
begin

     -- Get Policy ID
     --
     v_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_term_id,
                    pkg_os_constant.gobjType_Policy
               );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Policy ID : '        || v_policy_id ||
               ' Policy Term ID : '     || in_policy_term_id  ||
               ' PTP Object ID : '      || in_ptp_object_id
          );
     end if;

     -- Get Multipayer flat from Policy level. This is the fastest way. This requires the flag to be set before this call.
     -- For New Business transation this is done in the pkg_db_object.sp_billing_acct_trx_process by calling PKG_DB_MULTIPAYER.sp_mp_mode_policy_merge
     --
     --
/*     v_PolicyMultiPayerEnabled := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_policy_id
                                  );
*/
     -- Get Multipayer flat from Policy level. This is the fastest way. This requires the flag to be set before this call.
     -- For New Business transation this is done in the pkg_db_object.sp_billing_acct_trx_process by calling PKG_DB_MULTIPAYER.sp_mp_mode_policy_merge
     --OSBILLING-5420
     --
     -- VAULTDEV-6645 starts
     v_PolicyMultiPayerEnabled := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       case
                                           when in_ptp_object_id is not null 
                                           then in_ptp_object_id
                                           else in_policy_term_id
                                       end -- KR
                                  );

     if  v_PolicyMultiPayerEnabled
     then
          v_ptp_object_id := NULL; -- we do not need the PTP while getting Payer list on Policy Term level in the Multipayer mode.
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......Policy is in MULTIPAYER MODE ENABLED '
               );
          end if;
     else
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......Policy is in MULTIPAYER MODE DISABLED '
               );
          end if;
          -- single payer mode
          --
          if in_ptp_object_id is null
          then
               v_ptp_object_id := fn_policy_term_PTP_get -- UTPRODUCT-4905
                                  (
                                      in_session_id,
                                      in_transaction_id ,
                                      in_policy_term_id
                                  );
                                  
               if v_ptp_object_id is null
               then
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Getting New Business Policy Image....'
                         );
                    end if;                
                    
                    v_ptp_object_id := PKG_DB_MULTIPAYER.fn_nb_ptp_for_term_get
                             (
                                  in_session_id        =>    in_session_id,
                                  in_transaction_id    =>    in_transaction_id,
                                  in_policy_id         =>    v_policy_id
                             );
               end if;
               
          else
               v_ptp_object_id := in_ptp_object_id;  -- the PTP id can be passed explicitelly
          end if;
     end if;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......Considering PTP Object : ' || v_ptp_object_id ||
               ', Getting Policy Term Payer List....'
          );
     end if;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id              =>    in_session_id,
          in_transaction_id          =>    in_transaction_id,
          in_object_id               =>    in_policy_term_id,
          in_child_object_type_id    =>    gObjType_PolicyTermAccPayer,
          in_object_list             =>    v_policy_term_payer_list
          --in_exclude_object_id       =>    null,
          --in_exclude_object_type_id  =>    gObjType_PTPPayer
     );

     PKG_DB_MULTIPAYER.sp_payers_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_ptp_object_id        =>    v_ptp_object_id,
          in_multipayer_tf        =>    v_PolicyMultiPayerEnabled,
          io_payer_list           =>    io_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
          io_payer_search_list    =>    v_policy_term_payer_list,  -- result of child search. List of object IDs.
          in_print_list           =>    in_print_list,
          in_index_by             =>    in_index_by                -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     );
end sp_policy_term_payers_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_policy_term_payer_cache_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     io_cached_payer_lists         in out nocopy PKG_DB_MULTIPAYER.t_policy_payer_tab,
     in_policy_term_id             in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab, -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
     in_print_list                 in            char     default 'N',
     in_index_by                   in            varchar2 default g_PayerGet_idx_ChosenPlan, -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     in_ptp_object_id              in            object.object_id%type default null
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_term_payer_cache_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
begin
     -- Check if a payer list exists in the cache
     --
     if io_cached_payer_lists.exists(in_policy_term_id)
     then
          io_payer_list := io_cached_payer_lists(in_policy_term_id);

          --  Reindex found list if needed.
          --
          pkg_db_multipayer.sp_payer_list_reindex
          (
               in_session_id,
               in_transaction_id,
               in_payer_list   => io_payer_list,
               in_index_by     => in_index_by,
               in_print_tf     => 'F'
          );

     else

          pkg_db_multipayer.sp_policy_term_payers_get
          (
               in_session_id,
               in_transaction_id,
               in_policy_term_id   => in_policy_term_id,
               io_payer_list       => io_payer_list,
               in_print_list       => in_print_list,
               in_index_by         => in_index_by,
               in_ptp_object_id    => in_ptp_object_id
          );

          -- Add the payer list to a cache
          --
          io_cached_payer_lists(in_policy_term_id) := io_payer_list;
     end if;

end sp_policy_term_payer_cache_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_ptp_payers_get
--
--   %USAGE
--        An interface to the sp_payer_get for Policy Image
--
--   %ALGORITHM
--        Main assumption: a Payer is represented by an instance one of this object types:
--        1.        Search PTPPayer childs under the PolicyTerm
--        2.        Call sp_payers_get to transform the the list of child Payers to a list of unified payer structures (r_payer)
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ptp_payers_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_ptp_object_id              in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab, -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
     in_print_list                 in            char     default 'N',
     in_index_by                   in            varchar2 default g_PayerGet_idx_ChosenPlan -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_ptp_payers_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_payer_list                   pkg_os_object.t_object_list; -- result of child search. List of object IDs.
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Getting Policy Image Payer List....'
          );
     end if;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id              =>    in_session_id,
          in_transaction_id          =>    in_transaction_id,
          in_object_id               =>    in_ptp_object_id,
          in_child_object_type_id    =>    gObjType_PTPPayer,
          in_object_list             =>    v_ptp_payer_list,
          in_exclude_object_id       =>    null,
          in_exclude_object_type_id  =>    gObjType_PolicyTerm
     );

     PKG_DB_MULTIPAYER.sp_payers_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_ptp_object_id        =>    in_ptp_object_id,
          in_multipayer_tf        =>    NULL,               -- when invoked from sp_ptp_payers_get, do full analysis on the PTP level
          io_payer_list           =>    io_payer_list,      -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
          io_payer_search_list    =>    v_ptp_payer_list,   -- result of child search. List of object IDs.
          in_print_list           =>    in_print_list,
          in_index_by             =>    in_index_by         -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     );
end sp_ptp_payers_get;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ptp_payers_cache_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     io_cached_payer_lists         in out nocopy PKG_DB_MULTIPAYER.t_policy_payer_tab,
     in_ptp_object_id              in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab, -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
     in_print_list                 in            char     default 'N',
     in_index_by                   in            varchar2 default g_PayerGet_idx_ChosenPlan -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_ptp_payers_cache_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
begin
     -- Check if a payer list exists in the cache
     --
     if io_cached_payer_lists.exists(in_ptp_object_id)
     then

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Getting PTP payer list from the cache for policy image ' || in_ptp_object_id
               );
          end if;

          io_payer_list := io_cached_payer_lists(in_ptp_object_id);

          --  Reindex found list if needed.
          --
          pkg_db_multipayer.sp_payer_list_reindex
          (
               in_session_id,
               in_transaction_id,
               in_payer_list   => io_payer_list,
               in_index_by     => in_index_by,
               in_print_tf     => 'F'
          );

     else
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Pyaer list is missing in the cache for policy image ' || in_ptp_object_id
               );
          end if;

          pkg_db_multipayer.sp_ptp_payers_get
          (
               in_session_id,
               in_transaction_id,
               in_ptp_object_id   => in_ptp_object_id,
               io_payer_list      => io_payer_list,
               in_print_list      => in_print_list,
               in_index_by        => in_index_by
          );

          -- Add the payer list to a cache
          --
          io_cached_payer_lists(in_ptp_object_id) := io_payer_list;
     end if;

end sp_ptp_payers_cache_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_policy_term_payer_create
--
--   %USAGE
--
--   %ALGORITHM
--        Main assumption: a Payer is represented by an instance one of this object types:
--        1.        Search PTPPayer childs under the PolicyTerm
--        2.        Call sp_payers_get to transform the the list of child Payers to a list of unified payer structures (r_payer)
--
--   1.     For the PTP in qutesiton, find the identify the Policy Term.
--   2.     If Policy Term is not found, do splat
--   3.     Get a list of payers from the PTP (indexed by chosen pay plan)
--   4.     Get a list of payers from the PolicyTerm (it is empty for the NB transaction).
--          The list is indexed by Customer/Partner entity ID
--   5.     Compare PTP payer list and Term payer list
--   5.1       Loop the PTP payer list. For each payer in the PTP list
--   5.1.1        Check if this payer presents in the Policy Term payer list
--   5.1.2        If presents, check the next payer in the PTP list
--   5.1.3        If does not present, create a copy of the PTP payer, put it under the Policy Term
--   5.1.3.1         Transmute new Payer object to be a type of PolicyTermAssociatedPayer
--   6.     Once completed, print out the list of Policy Term payer

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_policy_term_payer_create
(
     in_session_id                 in     object.object_id%type,
     in_transaction_id             in     object.object_id%type,
     in_ptp_object_id              in     object.object_id%type default null,
     io_action_outcome_id          in out outcome.outcome_id%type
     --
     -- debbuging and test mode
     --
     ,in_ptp_mode_tf               in     boolean default FALSE
     ,in_delete_term               in     char default 'Y'
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_term_payer_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_list                 pkg_os_object.t_object_list;
     v_policy_term_id                   object.object_id%type;
     v_policy_trx                       object.object_id%type;

     v_policy_term_payer_id             object.object_id%type;

     v_ptp_payer_list                   PKG_DB_MULTIPAYER.t_payer_tab; -- indexed by g_PayerGet_idx_ChosenPlan
     v_term_payer_list                  PKG_DB_MULTIPAYER.t_payer_tab; -- indexed by g_PayerGet_idx_CustmrPartnr

     v_idx                              binary_integer;
     v_idx_ptp                          long;

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;
     v_datamart_tf                      char(1):= 'T';


           -- VAULTDEV-8585
     v_chosen_payment_plan_id           object.object_id%type;
     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type;
     v_policyterm_objectlist            pkg_os_object.t_object_list;
     v_policyterm_object_index          number;

begin
     if in_ptp_mode_tf -- if test mode ON
     then
          -- for test purpose only, create PolicyTerm under the PTP
          --
          begin
               v_policy_term_list.delete;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_Id           =>    in_session_id,
                    in_transaction_id       =>    in_transaction_id,
                    in_object_id            =>    in_ptp_object_id,
                    in_child_object_type_id =>    gObjType_PolicyTerm,
                    in_object_list          =>    v_policy_term_list
               );

               if in_delete_term = 'Y'
               then
                    v_idx := v_policy_term_list.first;

                    while v_idx is not null
                    loop
                         pkg_os_object.sp_object_delete
                         (
                              in_session_id              =>  in_session_id,
                              in_transaction_id          =>  in_transaction_id,
                              in_parent_object_id        =>  NULL,
                              in_object_id               =>  v_policy_term_list(v_idx),
                              in_object_type_id          =>  NULL,
                              in_soft_delete_tf          =>  FALSE -- hard delete
                         );

                         v_idx := v_policy_term_list.next(v_idx);
                    end loop;

                    v_policy_term_list.delete;
               end if;

               if v_policy_term_list.count =0
               then
                    pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_PolicyTerm,
                         in_ptp_object_id,
                         v_policy_term_id
                    );
               else
                    v_policy_term_id := v_policy_term_list(v_policy_term_list.first);
               end if;
          end; -- /create PolicyTerm under the PTP
     else -- if test mode OFF
          --   1.     For the PTP in qutesiton, find the identify the Policy Term.
          --
          v_policy_trx     := pkg_os_object.fn_object_parent_get  -- Customer Entity / Partner
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ptp_object_id
                              );

          v_policy_term_id         :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_trx,
                                             pkg_db_billing_modify.gbv_PolicyTrxRefPolicyTerm
                                        );
     end if; -- / if test mode


     v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_trx,
                                        pkg_os_constant_bv.gbv_PolicyTranType
                                   );


     --   2.     If Policy Term is not found, do splat
     --
     if v_policy_term_id is null
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...ERROR: not able to find a Policy Term for '||
               ' Policy Image:' || in_ptp_object_id ||
               ', Policy Transaction:' || v_policy_trx
          );

          raise no_policy_term_found;
     else
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Starting payer creation for Policy Term ' || v_policy_term_id
               );
          end if;
     end if;

     -- get payer list from PTP level
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Getting PTP payers list'
          );
     end if;

     --   3.     Get a list of payers from the PTP (indexed by chosen pay plan)
     --
     PKG_DB_MULTIPAYER.sp_ptp_payers_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_ptp_object_id        =>    in_ptp_object_id,
          io_payer_list           =>    v_ptp_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
          in_print_list           =>    'Y',
          in_index_by             =>    g_PayerGet_idx_ChosenPlan                -- -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     );

     -- Debugging
     --
     if in_ptp_mode_tf  -- only in test mode. add one payer to the Term
        and
        in_delete_term = 'Y'
     then
          -- copy one payer and place it under the PolicyTerm
          --
          pkg_os_object_copy.sp_object_copy
          (
               in_session_id                  =>  in_session_id,
               in_transaction_id              =>  in_transaction_id,
               in_from_object_id              =>  v_ptp_payer_list(v_ptp_payer_list.first).PTPayer_object_id,
               in_to_parent_id                =>  in_ptp_object_id,--v_policy_term_id, --OSPRODUCT-32305
               in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
               in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
               io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
               io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
               out_object_id                  =>  v_policy_term_payer_id,
               in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
               in_recursive_copy_tf           =>  'f', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
               in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
               in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
               in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
               in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
               in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
          );

          pkg_os_object.sp_object_transmute
          (
               in_session_id,
               in_transaction_id,
               v_policy_term_payer_id,            -- object to transmute
               v_policy_term_id,                  -- new object parent
               gObjType_PolicyTermAccPayer        -- pkg_os_constant.gObjType_Policy -- new object type
          );

          pkg_os_object.sp_object_parent_set --OSPRODUCT-32305
          (
               in_session_id,
               in_transaction_id,
               v_policy_term_payer_id,
               v_policy_term_id
          );
     end if; -- / Debugging

     

     --   4.     Get a list of payers from the PolicyTerm (it is empty for the NB transaction). The list is indexed by Customer/Partner entity ID
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Getting Policy Term payers list for policy term '||v_policy_term_id
          );
     end if;

   -- VAULTDEV-8585
     -- If it is a new term transaction , we need to delete all the exisitng term payers and create at fresh
     --

     if pkg_db_payplan_modify.fn_trx_starts_new_term(v_policy_trx_type_id) = pkg_os_constant.gBoolean_True
     then

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,



               v_policy_term_id,
               gObjType_PolicyTermAccPayer,
               v_policyterm_objectlist
          );





          if ( v_policyterm_objectlist.count > 0 ) then

               v_policyterm_object_index := v_policyterm_objectlist.first;

               while (v_policyterm_object_index is not null)
               loop

                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,


                         v_policy_term_id,
                         v_policyterm_objectlist(v_policyterm_object_index),
                         gObjType_PolicyTermAccPayer
                    );

                    v_policyterm_object_index := v_policyterm_objectlist.next(v_policyterm_object_index);

               end loop;

          end if;
     end if;

      -- VAULTDEV-8585

     --   4.     Get a list of payers from the PolicyTerm (it is empty for the NB transaction)
     --
     PKG_DB_MULTIPAYER.sp_policy_term_payers_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_policy_term_id       =>    v_policy_term_id,
          in_ptp_object_id        =>    in_ptp_object_id,
          io_payer_list           =>    v_term_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
          in_print_list           =>    'Y',
          in_index_by             =>    g_PayerGet_idx_CustmrPartnr      -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
     );

     --  5.     Compare PTP payer list and Term payer list
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Comparing PTP payer list and Policy Term payer list'
          );
     end if;

     v_idx_ptp := v_ptp_payer_list.first;
     --   5.1       Loop the PTP payer list. For each payer in the PTP list
     --
     while v_idx_ptp is not null
     loop
          --   5.1.1        Check if this payer presents in the Policy Term payer list
          --
          if v_term_payer_list.exists(v_ptp_payer_list(v_idx_ptp).PayerEntity_object_id)
          then
               --   5.1.2        If presents, check the next payer in the PTP list
               --
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Payer '|| pkg_os_object.fn_object_name_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_ptp_payer_list(v_idx_ptp).PayerEntity_object_id
                                    )||
                         ' already Associated with the PolicyTerm'
                    );
               end if;
               --2281               
               -- set the valid flag
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_term_payer_list(v_ptp_payer_list(v_idx_ptp).PayerEntity_object_id).PTPayer_object_id,
                    32993324,
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ptp_payer_list(v_idx_ptp).PTPayer_object_id,
                         32993324
                    )
               );               

          else
               --   5.1.3        If does not present, create a copy of the PTP payer, put it under the Policy Term
               --
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Associating payer '|| pkg_os_object.fn_object_name_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_ptp_payer_list(v_idx_ptp).PayerEntity_object_id
                                               )||
                                    ' with the PolicyTerm....'
                    );
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Cloning the payer '||v_ptp_payer_list(v_idx_ptp).PayerEntity_object_id||' ....'
                    );
               end if;

               pkg_os_object_copy.sp_object_copy
               (
                    in_session_id                  =>  in_session_id,
                    in_transaction_id              =>  in_transaction_id,
                    in_from_object_id              =>  v_ptp_payer_list(v_idx_ptp).PTPayer_object_id,
                    in_to_parent_id                =>  in_ptp_object_id,--v_policy_term_id,--OSPRODUCT-32305
                    in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                    in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                    io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                    io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                    out_object_id                  =>  v_policy_term_payer_id,
                    in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                    in_recursive_copy_tf           =>  'F', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                    in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                    in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                    in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                    in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                    in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
               );

               --   5.1.3.1         Transmute new Payer object to be a type of PolicyTermAssociatedPayer
               --
               pkg_os_object.sp_object_transmute
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_term_payer_id,            -- object to transmute
                    v_policy_term_id,                  -- new object parent
                    gObjType_PolicyTermAccPayer        -- new object type
               );

               pkg_os_object.sp_object_parent_set   --OSPRODUCT-32305
               (
                   in_session_id,
                   in_transaction_id,
                   v_policy_term_payer_id,
                   v_policy_term_id
               );

               --2017-10-10 Add datamart Cheryl
               --
               -- Update the DRAGON_POLICY_TERM_PAYER Datamart
               --

               pkg_os_datamart.sp_datamart_update_row
               (
                  in_session_id,
                  in_transaction_id,
                  v_policy_term_payer_id,
                  v_datamart_tf
               );

          end if;

          v_idx_ptp := v_ptp_payer_list.next(v_idx_ptp);
     end loop;
     
     -- OSPRODUCT-2815 
     -- OSPRODUCT-2861    
     /*begin
     
          pkg_os_object_io.global_object_children_cache.delete
                    (
                         v_policy_term_id||
                         'x'||
                         32719324
                    );
     exception
          
          when no_data_found then          
               null; -- Ignore missing cache entry
               
     end;*/
     
     --  Debugging
     --
     if in_ptp_mode_tf
     then
          PKG_DB_MULTIPAYER.sp_policy_term_payers_get
          (
               in_session_Id           =>    in_session_id,
               in_transaction_id       =>    in_transaction_id,
               in_ptp_object_id        =>    in_ptp_object_id,
               in_policy_term_id       =>    v_policy_term_id,
               io_payer_list           =>    v_term_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
               in_print_list           =>    'Y',
               in_index_by             =>    g_PayerGet_idx_CustmrPartnr     -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
          );
     end if; -- /Debugging

     --   6.     Once completed, print out the list of Policy Term payer
     --
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Getting Policy Term payers list after merging from PTP payer list'
          );

          PKG_DB_MULTIPAYER.sp_policy_term_payers_get
          (
               in_session_Id           =>    in_session_id,
               in_transaction_id       =>    in_transaction_id,
               in_ptp_object_id        =>    in_ptp_object_id,
               in_policy_term_id       =>    v_policy_term_id,
               io_payer_list           =>    v_term_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
               in_print_list           =>    'Y',
               in_index_by             =>    g_PayerGet_idx_CustmrPartnr     -- Possible values: g_PayerGet_idx_ChosenPlan / g_PayerGet_idx_CustmrPartnr
          );
     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_policy_term_payer_create;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--  fn_payer_exists
--
--      Search a payer in the payer list by any related ID
--
--      The in_related_id  may be :  Chosen PayPlan ID / PTP Payer ID / Term Payer ID / Billing Account ID / Payaer Entity ID
--
--      Returns TRUE and an index of the recored that fits the in_related_id to the output parameter
--      Return  FALSE and NULL to the output parameter is no data found.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payer_exists
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_related_id                 in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab,
     out_idx                       out           long
)
return boolean
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_payer_exists';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_idx            long;
     v_return         boolean := FALSE;
     v_found_by       varchar2(50);
     -- v_indexed_by     varchar2(50);
begin
     v_idx := io_payer_list.first;

     /*
     if v_idx is not null
     then
          v_indexed_by := case to_number(v_idx)
                               when io_payer_list(v_idx).chosen_payment_plan     then 'Chosen Pay Plan ID'
                               when io_payer_list(v_idx).PayerEntity_object_id   then 'Customer/Partner ID'
                               when io_payer_list(v_idx).PTPayer_object_id       then 'PTP/PolicyTerm Payer ID'
                               when io_payer_list(v_idx).PayerBillingAccount_id  then 'Billing Account ID'
                               else NULL
                          end;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Payer list is indexed by ' || v_indexed_by
               );
          end if;
     end if;
     */

     while v_idx is not null
     loop
          v_found_by := case in_related_id
                             when io_payer_list(v_idx).chosen_payment_plan     then 'Chosen Pay Plan ID'
                             when io_payer_list(v_idx).PayerEntity_object_id   then 'Customer/Partner ID'
                             when io_payer_list(v_idx).PTPayer_object_id       then 'PTP/PolicyTerm Payer ID'
                             when io_payer_list(v_idx).PayerBillingAccount_id  then 'Billing Account ID'
                             when io_payer_list(v_idx).modified_payment_plan   then 'Modified Pay Plan ID'--VAULTDEV-6645
                             else NULL
                        end;

          if v_found_by is not null
          then
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Payer found in the list. Idx = ' || v_idx ||
                         '. Found by ' || v_found_by || in_related_id
                    );
               end if;

               out_idx   := v_idx;

               return TRUE;
          end if;

          v_idx := io_payer_list.next(v_idx);
     end loop;

     -- If we get here, no payer was found
     --
     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          'ERROR: Payer not found in the payer list by ID  '|| in_related_id
     );

     sp_print_payer_list
     (
          in_session_id,
          in_transaction_id,
          io_payer_list
     );

     raise no_payer_found;
end fn_payer_exists;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_payer_validate
(
     in_session_id                 in              object.object_id%type,
     in_transaction_id             in              object.object_id%type,
     io_payer_rec                  in out nocopy   PKG_DB_MULTIPAYER.r_payer,
     io_inv_multipayer_mode        in out          boolean,
     in_policy_id                  in              object.object_id%type,
     in_policy_term_id             in              object.object_id%type,
     in_payer_entity_id            in              object.object_id%type default null,
     in_term_payer_id              in              object.object_id%type default null,
     in_policy_image_id            in              object.object_id%type default null   --VAULTDEV-6645
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payer_validate';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_term_payer_list                  PKG_DB_MULTIPAYER.t_payer_tab;
     v_payer_rec                        PKG_DB_MULTIPAYER.r_payer;
     v_inv_multipayer_mode              boolean := FALSE;
     v_idx                              long;

     v_payer_id                         object.object_id%type;

begin
     --VAULTDEV-6645
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... vaidating multipayer for in_policy_id '|| in_policy_id ||
               ' for in_policy_term_id '         || in_policy_term_id             ||
               ' and in_payer_entity_id  '    || in_payer_entity_id  ||
               'in_policy_image_id='|| in_policy_image_id ||', in_term_payer_id=' || in_term_payer_id
          );
     end if;

     --
     -- Check if this is a single payer mode
     --
     if (in_payer_entity_id is null and in_term_payer_id is null)
        and
        in_policy_id is not null
     then
          -- most likely, this is a single payer mode. Check on PTP, Policy term or policy level and return if it is so
          --
            --VAULTDEV-6645
          v_inv_multipayer_mode := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        case
                                             when in_policy_image_id is not null then
                                             in_policy_image_id
                                             when in_policy_term_id is not null then
                                             in_policy_term_id
                                             else in_policy_id
                                        end -- KR
                                   );
          if v_inv_multipayer_mode
          then
               -- Multi payer mode. Alarm!!!!
               --
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... ERROR: Multipayer mode is ON for policy '|| in_policy_id || ', but a payer is not specified.'
               );

               raise no_payer_found;
          else
               -- Single payer mode
               --
               io_payer_rec           := v_payer_rec;           -- an empty record
               io_inv_multipayer_mode := v_inv_multipayer_mode; -- FALSE

               return;

          end if;

     end if; -- / check if this is a single payer mode

     -- Check the multi-payer mode, if ON, put the payer into the v_payer_rec record.
     --
     --VAULTDEV-6645
    v_inv_multipayer_mode := PKG_DB_MULTIPAYER.fn_multipayer_mode_tf
                         (
                              in_session_id,
                              in_transaction_id,
                              case
                                   when in_policy_image_id is not null then
                                   in_policy_image_id
                                   when in_policy_term_id is not null then
                                   in_policy_term_id
                                   else in_policy_id
                              end -- KR
                         );

 /*   pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ERROR: v_inv_multipayer_mode '|| case when boolean_var then 'true' else 'false' end
          );
    */

     if not v_inv_multipayer_mode
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ERROR: Multi-payer mode is OFF for policy '|| in_policy_id
          );

          raise no_payer_found;
     else

          if  in_payer_entity_id is not null
          then
               v_payer_id          := in_payer_entity_id;
          elsif
              in_term_payer_id is not null
          then
               v_payer_id          := in_term_payer_id;

          else
               v_payer_id  := null;

          end if;


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Multi-payer mode is ON. Validating payer '|| v_payer_id ||
                    ' for policy '         || in_policy_id             ||
                    ' and policy term '    || in_policy_term_id  ||
                    '(in_payer_entity_id='|| in_payer_entity_id ||', in_term_payer_id=' || in_term_payer_id ||')'
               );
          end if;


          -- Get all payers from Policy Term level
          --
          PKG_DB_MULTIPAYER.sp_policy_term_payers_get
          (
               in_session_Id           =>    in_session_id,
               in_transaction_id       =>    in_transaction_id,
               in_policy_term_id       =>    in_policy_term_id,
               io_payer_list           =>    v_term_payer_list,
               in_print_list           =>    'Y',
               in_index_by             =>    PKG_DB_MULTIPAYER.g_PayerGet_idx_CustmrPartnr,
               in_ptp_object_id        =>    in_policy_image_id --VAULTDEV-6645
          );

          if fn_payer_exists
             (
                  in_session_id,
                  in_transaction_id,
                  in_related_id      => v_payer_id,
                  io_payer_list      => v_term_payer_list,
                  out_idx            => v_idx
             )
          then
               v_payer_rec           := v_term_payer_list(v_idx);
               v_inv_multipayer_mode := TRUE;
          else
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'ERROR: unable to find payer in the multipayer list for Payer Entity ID '|| v_payer_id ||
                    ' and policy term = ' || in_policy_term_id
               );

               raise no_payer_found;

          end if;

     end if;


     io_payer_rec           := v_payer_rec;
     io_inv_multipayer_mode := v_inv_multipayer_mode;

end sp_payer_validate;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--  sp_shrink_payer_list
--
--      Search a payer in the payer list by any related ID, if one is found, delete other payers from the list.
--
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_payer_list_shrink
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_related_id                 in            object.object_id%type,
     io_payer_list                 in out nocopy PKG_DB_MULTIPAYER.t_payer_tab
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_payer_list_shrink';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_idx                              long;
     v_current_payer                    PKG_DB_MULTIPAYER.r_payer;
     v_payer_exists                      boolean := FALSE;
begin
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Shrinking payer list to have only one payer ' || in_related_id
          );
     end if;

     v_payer_exists := fn_payer_exists
                       (
                            in_session_id,
                            in_transaction_id,
                            in_related_id      => in_related_id,
                            io_payer_list      => io_payer_list,
                            out_idx            => v_idx
                       );

     if v_payer_exists
     then
          -- shrink payer list and leave only one current payer
          --
          v_current_payer := io_payer_list(v_idx);

          io_payer_list.delete;

          io_payer_list(v_idx) := v_current_payer;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Shrinked payer list. ' || io_payer_list.count || ' payer left in the list'
               );

               pkg_db_multipayer.sp_print_payer_list
               (
                    in_session_id,
                    in_transaction_id,
                    io_payer_list
               );
          end if;

     else
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'ERROR: a Payer not found in the payer list by ID  '|| in_related_id
          );

          sp_print_payer_list
          (
               in_session_id,
               in_transaction_id,
               io_payer_list
          );

          raise no_payer_found;
     end if;
-----------------------------------------------------------------------------------------------------------------------------------------------------

end sp_payer_list_shrink;

--VAULTDEV-6645 starts
procedure sp_policy_image_payer_delete
(
     in_session_id                 in     object.object_id%type,
     in_transaction_id             in     object.object_id%type,
     in_ptp_object_id              in     object.object_id%type,
     io_action_outcome_id          in out outcome.outcome_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_policy_image_payer_delete';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_payer_billing_account            object.object_id%type;

     v_payment_plan_common_list         pkg_os_object.t_object_list;
     v_idx_payplan_common               binary_integer;
     v_payplan_common_table             ID_PAIR_TAB := ID_PAIR_TAB();
     v_newPayerPaymentPlan_id           object.object_id%type;
	 v_term_payer_id                    object.object_id%type;

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;

     v_coverage_payer_list              t_payer_tab;
     v_ptp_payer_list                   t_payer_tab;--VAULTDEV-6645
     v_idx                               long;
     v_idx_payer_list                   long;
     v_existing_payer_entity_id         object.object_id%type;
     v_existing_payer_BA_idx             binary_integer;
     v_existing_payer_BA_list           pkg_os_object.t_object_list;
     v_existing_BA_list                 t_payer_tab;--VAULTDEV-6645
     v_policy_transaction_id            object.object_id%type;
     v_policy_trx_type_id               number;
     v_previous_image_flag              object.object_id%type;
     v_default_payer_id      constant   object_bv_value.business_variable_value%type :=  PKG_DB_MULTIPAYER.fn_default_payer_get
                                                                                         (
                                                                                              in_session_id,
                                                                                              in_transaction_id,
                                                                                              in_ptp_object_id
                                                                                         );
																						 
     v_payer_type_enum                  varchar2(50);--UTPRODUCT-1570
     -- ----------------------------------------------------------------------------------------------------------------
begin



          -- 1.      Loop through all the coverages and create a distinct list of Payers.
          -- 1.1.        During this search we can determine the Payer Type using meta data from the DB_BILLNG_ELEMENT table.
          --
          for cur in c_payers
                     (
                          in_ptp_object_id
                     )
          loop
               -- Check the payer billing account path configurations in the following order:
               -- 1. payer_billing_account_path
               -- 2. rule_to_debit_billing_account
               -- 3. debit_billing_account_path
               --
               v_payer_billing_account := case when cur.payer_billing_account_path is not null
                                               then pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         cur.coverage_object_id,
                                                         cur.payer_billing_account_path
                                                    )
                                               when cur.rule_to_debit_billing_account is not null
                                               then pkg_os_exp.fn_evaluate_expression
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         cur.coverage_object_id,
                                                         cur.rule_to_debit_billing_account
                                                    )
                                               else
                                                    pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         cur.coverage_object_id,
                                                         cur.debit_billing_account_path
                                                    )
                                          end;

               if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'found coverage billingaccount:'||v_payer_billing_account
                         );
                    end if;
					
			   --UTPRODUCT-1570 start                            
               v_payer_type_enum    :=   pkg_os_object_io.fn_object_bv_path_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         cur.coverage_object_id,
                                                         cur.payer_type_path
                                                    );
               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Found payer_type enum as '||v_payer_type_enum
                    );
                    
               end if;                                       
              
               --UTPRODUCT-1570 end        	

               if v_payer_billing_account is null
               then
                    --       1.2.        If it is not possible to determine a payer's billing account, do SPLAT.
                    --                   DB_BILING_ELEMENT.debit_billing_account_path should be reconfigured
                    --
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'ERROR. Not able to determine billing account for coverage object ' || cur.coverage_object_id ||
                         ' using payer billing account path "' || cur.payer_billing_account_path || '"' ||
                         '. Check the db_billing_element ' || cur.db_billing_element_id ||
                         ', pc_coverage ' ||  cur.pc_coverage_id ||
                         ', coverage_object_type ' || cur.pc_coverage_object_type_id ||'.'

                    );

                    raise no_billing_account_found;
               elsif
                    not v_coverage_payer_list.exists(v_payer_billing_account)

               then
                    -- Note: the v_payer_list will be indexed by payer's billing account ID.
                    --
                    v_idx_payer_list := v_payer_billing_account;

                    v_coverage_payer_list(v_idx_payer_list).PayerEntity_object_id :=  pkg_os_object.fn_object_parent_get  -- Customer Entity / Partner
                                                                             (
                                                                                  in_session_id,
                                                                                  in_transaction_id,
                                                                                  v_payer_billing_account
                                                                             );

                    v_coverage_payer_list(v_idx_payer_list).PayerBillingAccount_id := v_payer_billing_account;

                    v_coverage_payer_list(v_idx_payer_list).payer_type :=  fn_payer_type_get
                                                                  (
                                                                       in_session_id,
                                                                       in_transaction_id,
                                                                       --v_coverage_payer_list(v_idx_payer_list).PayerEntity_object_id
                                                                       v_payer_type_enum   --UTPRODUCT-1570 commented above parameter and added
                                                                  );
                     --VAULTDEV-6645
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'adding coverage billingaccount to the distict list:'||v_payer_billing_account
                         );
                    end if;
               else
                    null; -- this payer has been already added to the v_payer_list list.
               end if;
          end loop;

         if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'v_coverage_payer_list.count:'||v_coverage_payer_list.count
               );
          end if;



          sp_ptp_payers_get
          (
               in_session_id,
               in_transaction_id ,
               in_ptp_object_id,
               v_ptp_payer_list,
               'Y',
               pkg_db_multipayer.g_PayerGet_idx_BilingAccount
          );
          v_idx := v_ptp_payer_list.first; -- in the Single Payer mode, there is the only member in this list.

          while v_idx is not null
          loop

                if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'checking if PTP payer exists in the coverage list( payer is still valid):'||v_idx
                    );
               end if;
               if v_coverage_payer_list.exists(v_ptp_payer_list(v_idx).PayerBillingAccount_id)
               then
                     if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'payer is present in coverage list. So,it is a valid payer:'||v_ptp_payer_list(v_idx).PayerBillingAccount_id
                         );
                    end if;
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ptp_payer_list(v_idx).PTPayer_object_id,
                         32993324,
                         1
                    );
               else
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'payer is not present in coverage list. So,it is an invalid payer:'||v_ptp_payer_list(v_idx).PayerBillingAccount_id
                         );
                    end if;
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ptp_payer_list(v_idx).PTPayer_object_id,
                         32993324,
                         2
                    );
                    -- set the value at term associated payer as well 
                    -- 2281
                    -- Get the term payer
                    v_term_payer_id := pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_ptp_payer_list(v_idx).PTPayer_object_id,
                                            32578848
                                       );
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Payer Object ID: '||  v_ptp_payer_list(v_idx).PTPayer_object_id ||
                              '..Term Payer ID: '  ||  v_term_payer_id   
                         );
                    end if;
                    if v_term_payer_id is not null then
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_term_payer_id,
                              32993324,
                              2
                         );
                    end if;
               end if;
               v_idx := v_ptp_payer_list.next(v_idx); --#MP
          end loop;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     --raise no_data_found;

end sp_policy_image_payer_delete;
--VAULTDEV-6645 ends

function fn_get_termpayer_for_ptppayer
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_ptp_payer_id               in            object.object_id%type
)
return object.object_id%type
as

     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_payer_exists';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_associated_term_payer            object.object_id%type;
     v_ptp_payer_entity_id              object.object_id%type;
     v_ptp_transaction_id               object.object_id%type;
     v_master_policy_id                 object.object_id%type;
     v_policy_term_id                   object.object_id%type;

begin

     -- Get the payer entity id
     v_ptp_payer_entity_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ptp_payer_id,
                                   gbv_PTPPayer_Ref_CustmrPartnr
                              );

     -- get the policy id
     v_ptp_transaction_id := pkg_os_object_search.fn_object_get_parent_of_type
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_ptp_payer_id,
                                  pkg_os_constant.gobjType_PolicyTransaction
                             );

     v_master_policy_id := pkg_os_object.fn_object_parent_get
                           (
                                in_session_id,
                                in_transaction_id,
                                v_ptp_transaction_id
                           );


     v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_ptp_transaction_id,
                              29728801
                         );

     begin

          select
               tp.policy_term_payer_id
          into
               v_associated_term_payer
          from
               dragon_policy_term_payer tp
          where
               tp.payer_entity_id = v_ptp_payer_entity_id
          and
               tp.policy_id = v_master_policy_id
          and
               tp.policy_term_id = v_policy_term_id;

     exception
		
          when others then
               
               -- OSPRODUCT-6717
               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... No associated term payer found for the ptp payer: ' || in_ptp_payer_id
                    );
                    v_associated_term_payer := null;
                    
               end if;
               
     end;

     return v_associated_term_payer;

end fn_get_termpayer_for_ptppayer;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_billed_to_payer_type_tf                                                                                            |
--
--     %USAGE
--          To Check  a policy billed payer type.
--
--     %ALGORITHM
--      Not specified. 
--      
--     %PARAMETER
--      
--     User Session ID 
--     Trasnaciton ID 
--     Action Obejct ID  - Policy/ Policy Term or PolicyTransactonPolicy object ID 
--     Payer Tyep        - Payer Type  like 10424 Mortgagee,10824 Premium Finance Company,1062 Additional Insured,10224 Insured
-----------------------------------------------------------------------------------------------------------------------------------------------------
--    OSBILLING-7603
function fn_billed_to_payer_type_tf
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type,             --    policy id/term id or PTP ID
     in_payer_type_id              in             number                             --    payer type

) return char
is

     v_session_control                      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name              constant system_log.program_name%type  := pkg_name||'fn_billed_to_payer_type_tf';

     v_action_object_type_id                object.object_type_id%type;
     v_payer_list                           pkg_os_object.t_object_list;
     v_payer_idx                            number;
     v_current_term_id                      object.object_id%type ;
     v_payer_type_id                        number;
     v_billing_to_payer_type_tf      char  := 'F' ;
     v_policy_id                            object.object_id%type ;
     v_policy_trx_id                        object.object_id%type ;
   
begin

     -- Get the object type for the input object.
     v_action_object_type_id:= pkg_os_object.fn_object_type_get
                              (
                                 in_session_id,
                                 in_transaction_id,
                                 in_action_object_id
                              );


     if   v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Entering with Action Object ID: ' || in_action_object_id ||
               '...In Action Object Type: ' || v_action_object_type_id
          );

     end if;
     

     Case
     when v_action_object_type_id in (pkg_os_constant.gobjType_Policy) then

          v_policy_id   := in_action_object_id;
      
     when v_action_object_type_id in (gObjType_PolicyTerm) then    
     
           v_policy_id   := pkg_os_object.fn_object_parent_get
                            (
                                  in_session_id,
                                  in_transaction_id,
                                  in_action_object_id
                            );      
           
     when v_action_object_type_id in (pkg_os_constant.gobjType_PolicyTrxPolicy) then

          v_policy_trx_id   :=  pkg_os_object.fn_object_parent_get
                                   (
                                       in_session_id,
                                       in_transaction_id,
                                       in_action_object_id
                                   );

          v_policy_id   :=  pkg_os_object.fn_object_parent_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_policy_trx_id
                             );
     end case;

     
     Case
     when v_action_object_type_id in (pkg_os_constant.gobjType_Policy, gObjType_PolicyTerm) 
     then 
          
          if v_action_object_type_id in (pkg_os_constant.gobjType_Policy) then  
               -- Get current Policy Term Object.
               v_current_term_id  := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_action_object_id,
                                             pkg_db_constant.gbv_policy_current_term     -- _Ref Current Term based on Rolled Date
                                        );
          else 
          
                v_current_term_id  := in_action_object_id;
                                        
          end if;                          

          v_payer_list.delete;

          -- Prepare list of the Policy term payer
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_current_term_id,
               gObjType_PolicyTermAccPayer,         --  Policy Term Payer
               v_payer_list,
               null,
               false
          );

          if v_payer_list.count > 0 then

               v_payer_idx    :=    v_payer_list.first;

               while v_payer_idx is not null
               loop
                    -- Get the Payer Type ID
                    v_payer_type_id  := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_idx),
                                             gbv_PTPPayer_PayerType
                                        );

                    -- Check, Is Payer Type Mortgagee.
                    if v_Payer_Type_id = in_payer_type_id then

                         v_billing_to_payer_type_tf := 'T';
                         exit;

                    end if;

                    v_payer_idx   :=   v_payer_list.next(v_payer_idx);

               end loop;


          end if;

     when v_action_object_type_id in (pkg_os_constant.gobjType_PolicyTrxPolicy) 
     then 

         
          v_payer_list.delete;

          -- Prepare list of the PTP Payer
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PTPPayer,                 -- PTP Payer
               v_payer_list,
               null,
               false
          );
 
          if v_payer_list.count > 0 then

               v_payer_idx := v_payer_list.first;

               while v_payer_idx is not null
               loop
                    -- Get Payer Type
                    v_payer_type_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_payer_idx),
                                             gbv_PTPPayer_PayerType
                                        );

                    -- Check, Is Payer Type Mortgagee 
                    if v_Payer_Type_id = in_payer_type_id then  

                         v_billing_to_payer_type_tf := 'T';
                         exit;

                    end if;

                    v_payer_idx   :=   v_payer_list.next(v_payer_idx);

               end loop;

          end if;
     else
          null;

     end case;

     if   v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Policy ID : ' || v_policy_id ||
               ': Policy billed to payer typer True or False: ' || v_billing_to_payer_type_tf
          );

     end if;

     return v_billing_to_payer_type_tf;

exception
     when others then
           
           return null;

end fn_billed_to_payer_type_tf;
--    OSBILLING-7603

-- OSPRODUCT-4545 start
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_payer_in_set
--
--     %USAGE
--          Return Payer type value
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payer_type_desc_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_db_payer_type_id           in  db_payer_type.db_payer_type_id%type
)
return varchar2
is
     v_db_payer_type_name            db_payer_type.db_payer_type_name%type;  
     v_procedure_name      constant  system_log.program_name%type := pkg_name||'fn_payer_type_desc_get'; 

begin

     select
          db_payer_type_name
     into
          v_db_payer_type_name 
     from
          db_payer_type
     where
          db_payer_type_id = in_db_payer_type_id;
         
     return v_db_payer_type_name; 

exception

     when no_data_found then

          select
               db_payer_type_name
          into
               v_db_payer_type_name 
          from
               db_payer_type
          where
               db_payer_type_enum = 0;

          return v_db_payer_type_name; 
         
     when too_many_rows then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Multiple entries found in configuration for payer_Type_id'||in_db_payer_type_id
          );

          raise too_many_rows;

     when others then

          raise;

end fn_payer_type_desc_get;
--UTPRODUCT-3925 start
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_payer_effective_date_get
--
--     %USAGE
--          Return effetive date of PT in which this payer was added initially
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payer_effective_date_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_ptptpayer_id               in  object.object_id%type
)
return date
is
     
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_payer_effective_date_get'; 
     v_utemplet_id                 object.object_id%type;
     v_PT_id                       object.object_id%type;
     v_Trx_effective_date          DATE;
             

begin
     
     v_utemplet_id                 := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_ptptpayer_id,
                                              pkg_os_constant_bv.gbv_Ultimate_Template
                                         );

     v_PT_id                        := pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_utemplet_id,
                                             629
                                        ); 
                                                                              

     v_Trx_effective_date           := to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_PT_id,
                                                  pkg_os_constant_bv.gbv_PolicyTranEffectiveDate
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        );  
     return v_Trx_effective_date;
                                                                            
end fn_payer_effective_date_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_payer_process_date_get
--
--     %USAGE
--          Return process date of PT in which this payer was added initially
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_payer_process_date_get
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_ptptpayer_id               in  object.object_id%type
)
return date
is
     
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'fn_payer_process_date_get'; 
     v_utemplet_id                 object.object_id%type;
     v_PTP_id                      object.object_id%type;
     v_PT_id                       object.object_id%type;
     v_Trx_process_date            DATE;
     v_PT_Type_id                  number;
             

begin
     
     v_utemplet_id                 := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              in_ptptpayer_id,
                                              pkg_os_constant_bv.gbv_Ultimate_Template
                                         );
                                    
     
     v_PT_id                        := pkg_os_object_search.fn_object_get_parent_of_type
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_utemplet_id,
                                             pkg_os_constant.gobjType_PolicyTransaction
                                        ); 
     

                                         
     v_Trx_process_date             := to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_PT_id,
                                                  pkg_os_constant_bv.gbv_PolicyTranProcessDate
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        );  
     if(   v_Trx_process_date is null)
     then
           v_PT_Type_id                    := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_PT_id,
                                         pkg_os_constant_bv.gbv_PolicyTranType
                                    );                                                                     
          if(NVL(v_PT_Type_id,0) in (pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,pkg_os_policy_transaction.gPolicyTrxType_Rewrite) )
          then
               v_PT_id                    := pkg_os_object_io.fn_object_bv_path_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_PT_id,
                                                   '29605909.26590007'
                                              );    
               v_Trx_process_date             := to_date
                                        (
                                             pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_PT_id,
                                                  pkg_os_constant_bv.gbv_PolicyTranProcessDate
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        );                                  
                                                                                                                             
          end if;
     end if;     
    
     return v_Trx_process_date;
                                                                            
end fn_payer_process_date_get;
--OSPRODUCT-9915 Starts
procedure ptppayer_datamart_refresh
(
     in_session_id                 in     object.object_id%type,
     in_transaction_id             in     object.object_id%type,
     in_policy_transaction_id      in     object.object_id%type,
     io_action_outcome_id          in out outcome.outcome_id%type     
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'ptppayer_datamart_refresh';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_payer_billing_account            object.object_id%type;
     v_payer_list                       t_payer_tab;
     v_payer_list_idx                   long;
     v_existing_payer_entity_id         object.object_id%type;
     v_existing_payer_BA_list           pkg_os_object.t_object_list;
     v_policy_transaction_id            object.object_id%type;
     v_ptp_object_id                    object.object_id%type;
     v_policy_trx_type_id               number;
     v_payer_exists                     number;
     v_datamart_tf                      char(1):= 'T';                                                                                        
     v_bill_plan_enable_tf              char(1);
     v_object_list               pkg_os_object.t_object_list;
     v_idx                       binary_integer;
     v_payer_type_id             object.object_id%type;     
begin

     v_ptp_object_id := pkg_os_object_io.fn_object_bv_get
                          (
                              in_session_id, 
                              in_transaction_id,
                              in_policy_transaction_id,
                              pkg_db_billing.gbv_PolicyTrxRefCoverages
                          );

     if v_ptp_object_id is not null
     then

          begin

               select
                    count(ptp_payer_id)
               into
                    v_payer_exists
               from
                    dragon_ptp_payer pp
               where
                    pp.ptp_id = v_ptp_object_id;

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'count of total payers in Datamart:'||v_payer_exists||
                         ' for PTP id:'||v_ptp_object_id
                    );

               end if;               

          exception

               when others then
                    v_payer_exists := 0;

          end;

          --If PTP-Payer is does not exists in Datamart; Perform object search
          if v_payer_exists = 0 then

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_Id              =>    in_session_id,
                    in_transaction_id          =>    in_transaction_id,
                    in_object_id               =>    v_ptp_object_id,
                    in_child_object_type_id    =>    gObjType_PTPPayer,
                    in_object_list             =>    v_object_list,
                    in_exclude_object_id       =>    null,
                    in_exclude_object_type_id  =>    gObjType_PolicyTerm
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... no of existing payer:'||v_object_list.count
                    );

               end if;

               -- Process datamart refresh for each payer
               v_idx := v_object_list.first;

               while v_idx is not null
               loop

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Processing PolicyTransactionPolicyPayer Object ID:'||v_object_list(v_idx)
                         );

                    end if;

                    pkg_os_datamart.sp_datamart_update_row (in_session_id, in_transaction_id, v_object_list(v_idx), v_datamart_tf);

                    v_idx := v_object_list.next(v_idx);

               end loop; -- for each payer found ...

          end if; 

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end ptppayer_datamart_refresh;
--OSPRODUCT-9915 End
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_bats_ass_entity_get
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- UTPRODUCT-4822 Starts
function fn_bats_ass_entity_get
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_billingacctrxset_id        in        object.object_id%type,
     in_billingaccount_id          in        object.object_id%type    
)    return number
is

     v_procedure_name                    constant        system_log.program_name%type := pkg_name||'fn_bats_ass_entity_get';
     v_session_control                   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_BillAccTrxSet_RefPolTrx           object.object_id%type;
     v_BillAccTrxSet_CurrTrx             object.object_id%type;
     v_policy_id                         object.object_id%type;
     v_Policy_RefMostRctFuncTrx          object.object_id%type;
     v_PolicyTrxRefCoverages             object.object_id%type;
     v_entiry_id                         object.object_id%type :=null;
     
begin

      if v_session_control.gLogging_Full
      then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, '... Get Associated Entity for BATS ID ' ||in_billingacctrxset_id 
           );
      end if;
      
     -- 1. First check if Billingaccounttrxset has associated PolicyTransaction. If it's null, use most recent functional transaction.
     v_BillAccTrxSet_RefPolTrx := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_billingacctrxset_id,
                                   pkg_db_object.gbv_BillAccTrxSet_RefPolTrx  
                              ); 
                              
     if v_BillAccTrxSet_RefPolTrx  is null 
     then                          

          v_BillAccTrxSet_CurrTrx := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_billingacctrxset_id,
                                             pkg_db_object.gbv_BillAccTrxSet_CurrTrx 
                                        ); 
                                        
          v_policy_id         := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_BillAccTrxSet_CurrTrx,
                                   pkg_db_object.gbv_FITrx_RefAssociatedPolicy 
                              ); 
          
                                                  
          v_Policy_RefMostRctFuncTrx := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_policy_id,
                                                  pkg_db_constant.gbv_Policy_RefMostRctFuncTrx  
                                             ); 
                                             
          v_BillAccTrxSet_RefPolTrx   := v_Policy_RefMostRctFuncTrx;                                
                                             
     end if;                                           
                                                  
     -- 2. get the ref_coverage for getting PTP                         
     v_PolicyTrxRefCoverages  := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_BillAccTrxSet_RefPolTrx,
                                        pkg_db_constant.gbv_PolicyTrxRefCoverages 
                                   );                         
                       
     begin
                             
          select 
             ptpp.primary_entity_id 
          into 
             v_entiry_id                                            
          from  
             dragon_ptp_payer ptpp 
          where 
             ptpp.ptp_id = v_PolicyTrxRefCoverages 
          and 
             ptpp.ptp_transaction_id =v_BillAccTrxSet_RefPolTrx
          and 
             ptpp.billing_account_id =  in_billingaccount_id;   
                         
     exception
                    
        when others then 
             v_entiry_id := pkg_os_object.fn_object_parent_get
                            (
                              in_session_id,
                              in_transaction_id,
                              in_billingaccount_id
                            );   
     end; 
          
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, 
               ' BillAccTrxSet_RefPolTrx:' || v_BillAccTrxSet_RefPolTrx||
               ':BillAccTrxSet_CurrTrx:'|| v_BillAccTrxSet_CurrTrx||
               ':Policy ID:'||v_policy_id || 
               ':Policy_RefMostRctFuncTrx:'||v_Policy_RefMostRctFuncTrx|| 
               ':PolicyTrxRefCoverages:'||v_PolicyTrxRefCoverages|| 
               ':Entiry_id:'||v_entiry_id
           );
     end if;

     return v_entiry_id;

end fn_bats_ass_entity_get;
-- UTPRODUCT-4822 Starts


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_term_payer_idx_by_entity_get
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
-----------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-15248 Starts. 
procedure sp_term_payer_idx_by_entity_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_policy_term_id             in            object.object_id%type,
     io_payer_list                 in out nocopy pkg_db_multipayer.t_payer_idx_by_entity_tab -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_term_payer_idx_by_entity_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_term_payer_list           pkg_os_object.t_object_list; -- result of child search. List of object IDs.
     v_idx                              binary_integer;
     v_idx_io                           long;
     v_entity_id                        object.object_id%type;

begin
     -- Clear the input list of the payeres
     io_payer_list.delete;
               
     if v_session_control.gLogging_Full
     then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...Getting Policy Term Payer List. Policy Term ID : ' || in_policy_term_id  
     );
     end if;
     
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id              =>    in_session_id,
          in_transaction_id          =>    in_transaction_id,
          in_object_id               =>    in_policy_term_id,
          in_child_object_type_id    =>    gObjType_PolicyTermAccPayer,
          in_object_list             =>    v_policy_term_payer_list
     );
 
    if v_session_control.gLogging_Full
    then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...sp_term_payer_idx_by_entity_get ' || v_policy_term_payer_list.count
          );
     end if;

     if v_policy_term_payer_list.count >0 
     then     
     
          v_idx := v_policy_term_payer_list.first;
          while v_idx is not null
          loop
                              
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..Term Payer ID: ' || v_policy_term_payer_list(v_idx)
                    );
               end if;
                                   
               v_entity_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_term_payer_list(v_idx),
                                   pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                              );
                                        
               v_idx_io := v_entity_id;

               io_payer_list(v_idx_io).PTPayer_object_id     := v_policy_term_payer_list(v_idx);
               io_payer_list(v_idx_io).PayerEntity_object_id := v_entity_id; 


               v_idx := v_policy_term_payer_list.next(v_idx); 

          end loop;
     
     end if; 

end sp_term_payer_idx_by_entity_get;
--OSPRODUCT-15248  Ends. 
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_ptp_payer_idx_by_entity_get
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
-----------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-15248 Starts.
procedure sp_ptp_payer_idx_by_entity_get
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_ptp_id                     in            object.object_id%type,
     io_payer_list                 in out nocopy pkg_db_multipayer.t_payer_idx_by_entity_tab -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_term_payer_idx_by_entity_get';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_payer_list                   pkg_os_object.t_object_list; -- result of child search. List of object IDs.
     v_idx                              binary_integer;
     v_idx_io                           long;
     v_entity_id                        object.object_id%type;

begin
     -- Clear the input list of the payeres
     io_payer_list.delete;
               
     if v_session_control.gLogging_Full
     then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...Getting PTP Payer List. PTP ID : ' || in_ptp_id  
     );
     end if;
     
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id              =>    in_session_id,
          in_transaction_id          =>    in_transaction_id,
          in_object_id               =>    in_ptp_id,
          in_child_object_type_id    =>    gObjType_PTPPayer,
          in_object_list             =>    v_ptp_payer_list,
          in_exclude_object_id       =>    null,
          in_exclude_object_type_id  =>    gObjType_PolicyTerm
     );
 
    if v_session_control.gLogging_Full
    then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...sp_term_payer_idx_by_entity_get ' || v_ptp_payer_list.count
          );
     end if;

     if v_ptp_payer_list.count >0 
     then     
     
          v_idx := v_ptp_payer_list.first;
          while v_idx is not null
          loop
                              
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..PTP Payer ID: ' || v_ptp_payer_list(v_idx)
                    );
               end if;
                                   
               v_entity_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_ptp_payer_list(v_idx),
                                   pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                              );
                                        
               v_idx_io := v_entity_id;

               io_payer_list(v_idx_io).PTPayer_object_id     := v_ptp_payer_list(v_idx);
               io_payer_list(v_idx_io).PayerEntity_object_id := v_entity_id;

               v_idx := v_ptp_payer_list.next(v_idx); 

          end loop;
     
     end if; 

end sp_ptp_payer_idx_by_entity_get;
--OSPRODUCT-15248 Ends.
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          sp_term_payer_status_reset
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
-----------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-15248 Start.
procedure sp_term_payer_status_reset
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_term_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type
)
is
     v_session_control                  pkg_os_session.r_dragon_session_control    :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type      :=     pkg_name||'sp_term_payer_status_reset';
 
     g_ptp_payer_list                   pkg_db_multipayer.t_payer_idx_by_entity_tab; --#mp  -- indexed by chosen payment plan id
     g_term_payer_list                  pkg_db_multipayer.t_payer_idx_by_entity_tab; --#mp  -- indexed by customer/partner id
     v_idx                              number;
     v_term_payer_valid_tf              number; 
     v_ptp_payer_valid_tf               number; 
     v_valid_false                      number := 2; 
          
begin
 
     g_term_payer_list.delete;
     g_ptp_payer_list.delete;
     
     --  get list of payers from Policy Term level
     pkg_db_multipayer.sp_term_payer_idx_by_entity_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_policy_term_id       =>    in_policy_term_id,
          io_payer_list           =>    g_term_payer_list             
     );

     --  get list of payers from Policy Image level
     pkg_db_multipayer.sp_ptp_payer_idx_by_entity_get
     (
          in_session_id         => in_session_id,
          in_transaction_id     => in_transaction_id,
          in_ptp_id             => in_policy_image_id,
          io_payer_list         => g_ptp_payer_list           
     );
     
     if g_ptp_payer_list.count > 0 and g_term_payer_list.count > 0 
     then 

          v_idx := g_term_payer_list.first;

          while v_idx is not null
          loop --loop of payers starts
               
               if g_ptp_payer_list.exists(g_term_payer_list(v_idx).PayerEntity_object_id)
               then 
                    v_term_payer_valid_tf := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  g_term_payer_list(v_idx).PTPayer_object_id, 
                                                  pkg_db_functions.gbv_payer_is_valid_tf 
                                             );
                                                                      
                    v_ptp_payer_valid_tf := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  g_ptp_payer_list(g_term_payer_list(v_idx).PayerEntity_object_id).PTPayer_object_id, 
                                                  pkg_db_functions.gbv_payer_is_valid_tf 
                                             );
                                      
                    if v_term_payer_valid_tf <> v_ptp_payer_valid_tf
                    then 
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              g_term_payer_list(v_idx).PTPayer_object_id, 
                              pkg_db_functions.gbv_payer_is_valid_tf, 
                              v_ptp_payer_valid_tf
                         );
                         
                    end if; 
                    
                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '....PTP Payere:' ||g_term_payer_list(v_idx).PTPayer_object_id||
                              ':PTP PAyere Valid:' || v_ptp_payer_valid_tf ||
                              ':Trem Payere:' || g_ptp_payer_list(g_term_payer_list(v_idx).PayerEntity_object_id).PTPayer_object_id||
                              ':Term PAyere Valid:' || v_term_payer_valid_tf 
                         );

                    end if;  
               else
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         g_term_payer_list(v_idx).PTPayer_object_id, 
                         pkg_db_functions.gbv_payer_is_valid_tf, 
                         v_valid_false
                    );
                    
                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Term  Payere not found :' ||g_term_payer_list(v_idx).PTPayer_object_id||
                              ' at Image Level: Policy Image id :' ||in_policy_image_id
                         );

                    end if;   
              
               end if;                             
                             
               v_idx := g_term_payer_list.next(v_idx); 
               
          end loop; -- loop payers  -- 
     end if; 
          
end sp_term_payer_status_reset;
-- OSPRODUCT-15248 Ends.  

-----------------------------------------------------------------------------------------------------------------------------------------------------

--OSPRODUCT-2567
procedure sp_ptp_payer_payment_schedule_create
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_action_object_id           in            object.object_id%type,
     io_action_outcome_id          in out        outcome.outcome_id%type
)
is
     v_chosen_payment_plan_id        object.object_id%type;
     v_modified_payment_plan_id      object.object_id%type;
     v_policy_image_id               object.object_id%type;
     v_policy_transaction_id         object.object_id%type;
     v_modifying_payment_plan        char(1);
     v_payment_plan_id               object.object_id%type;
     v_new_term                      number;
     v_transaction_type_id           number;
     v_current_date_time             date;   -- Added for OSPRODUCT-2567
     v_current_payer_date_time       date;   -- Added for OSPRODUCT-2567
     v_procedure_name                system_log.program_name%type := pkg_name||'sp_ptp_payer_payment_schedule_create';   -- Added for OSPRODUCT-2567
begin
     
     v_chosen_payment_plan_id :=  pkg_os_object_io.fn_object_bv_get
     (
       in_session_id,
       in_transaction_id,
       in_action_object_id, -- expect this to be a PolicyTransactionPolicyPayer
       PKG_DB_MULTIPAYER.gbv_PTPPayer_Ref_ChosenPayPlan
     );

     v_modified_payment_plan_id :=  pkg_os_object_io.fn_object_bv_get
     (
       in_session_id,
       in_transaction_id,
       in_action_object_id, -- expect this to be a PolicyTransactionPolicyPayer
       32967024
     );

     v_policy_image_id := pkg_os_object.fn_object_parent_get
     (
           in_session_id,
           in_transaction_id,
           in_action_object_id    -- expect this to be a PolicyTransactionPolicyPayer
     );
             
     v_current_date_time := pkg_os_time.fn_os_sysdate
     (
           in_session_id,
           in_transaction_id,
           in_action_object_id
     );
             
     

     --OSPRODUCT-2424
     v_policy_transaction_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_policy_image_id );
     v_transaction_type_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
     v_new_term := pkg_db_payplan_modify.fn_trx_starts_new_term(v_transaction_type_id);

         
     if v_modified_payment_plan_id is null or v_chosen_payment_plan_id = v_modified_payment_plan_id
     then
          --
          --   Either I'm generating a payment plan for the first time, or I have not changed the payment plan ...
          --

          v_modifying_payment_plan := 'F';
          v_payment_plan_id := v_chosen_payment_plan_id;
          v_policy_transaction_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_policy_image_id );
          v_transaction_type_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
          --OSPRODUCT-2424
          --v_new_term := pkg_db_payplan_modify.fn_trx_starts_new_term(v_transaction_type_id);
     else
          
          v_modifying_payment_plan := 'T';
          v_payment_plan_id := v_modified_payment_plan_id;
          --OSPRODUCT-2424
          --v_new_term := pkg_os_constant.gBoolean_True;

     end if;
     --OSBILLING-7831
     
     v_current_date_time := nvl(
                               pkg_db_functions.fn_get_processed_date
                               (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_image_id -- PRODUCT-3926
                               ),  v_current_date_time
                           );
     -- utproduct-3925
     if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_policy_image_id ,pkg_db_payplan_modify. gbv_ptp_cpp_term_start_ind) is not null
     then
          v_current_payer_date_time   :=  to_date(pkg_os_object_io.fn_object_bv_get
                                                    (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_action_object_id,
                                                        pkg_db_constant.gbv_payer_process_date
                                                    ),pkg_os_constant.DragonDateFormatDefault);
          if v_current_payer_date_time is not null
                then
                v_current_date_time :=  v_current_payer_date_time;
          end if;

     end if;
     
     if v_modifying_payment_plan = 'F' then
          
          pkg_db_payplan_modify.sp_restore_payment_schedule
          (
               in_session_id,
               in_transaction_id,
               v_policy_image_id,
               in_action_object_id
          );
          
     end if;

     pkg_db_payplan_modify.sp_payment_schedule_generate
     (
       in_session_id,
       in_transaction_id,
       v_policy_image_id,
       v_new_term,
       v_payment_plan_id ,
       v_current_date_time,
       null,
       in_change_payplan=> v_modifying_payment_plan,
       io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
     );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;
        
end sp_ptp_payer_payment_schedule_create;

--OSPRODUCT-2567 Ends.
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-18769
--
--     %NAME
--          sp_change_payer_type_failure
--
--     %USAGE
--          This procdure terminates a UI flow that uses a naitve command DBPolicyImageCreatePayers. There is no legal way but splat to terminate and rollback a UI flow.
--          This procdure is getting called by a native command 'DBChangePayerTypeFailure'
--
--     %ALGORITHM
--          Raise an exception. This will terminate and rollback a UI flow
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-18769
procedure sp_change_payer_type_failure
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_action_object_id           in            object.object_id%type,
     io_action_outcome_id          in out        outcome.outcome_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_change_payer_type_failure';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

      pkg_os_logging.sp_log_error
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           '... ERROR: The same entity cannot be used for different payer types. Please return to the Application|Additional Interest tab and make necessary corrections which may require creating a new partner.' ||
           ' Action object ID '|| in_action_object_id
      );
           
      raise change_payer_type_failure;
           
end sp_change_payer_type_failure;
--------------------------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-19527
function fn_get_termbillplan_for_entity
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_term_id                    in            object.object_id%type,
     in_entity_id                  in            object.object_id%type
)
return object.object_id%type
as

     v_procedure_name  constant    system_log.program_name%type := pkg_name||'fn_get_pref_prf_for_entity';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_term_payer_id                object.object_id%type := null;
     v_term_payer_bill_plan         object.object_id%type := null;   
begin
     
     pkg_os_logging.sp_log_error
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           '... Term ID: ' || in_term_id ||
           '... Entity ID: ' || in_entity_id
      );
     
     begin
          
		select p.policy_term_payer_id
		  into v_term_payer_id
		  from dragon_policy_term_payer p
		 where p.payer_entity_id = in_entity_id
             and p.policy_term_id = in_term_id;
             
          pkg_os_logging.sp_log_error
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '.. Term Payer ID: ' || v_term_payer_id
           );  
     
     exception
          
          when others then
               v_term_payer_id := pkg_os_object_search.fn_object_with_attribute_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_term_id,
                                        gObjType_PolicyTermAccPayer,
                                        gbv_PTPPayer_Ref_CustmrPartnr,
                                        in_entity_id
                                   );
                                   
               pkg_os_logging.sp_log_error
                (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     '..From exception block Term Payer ID: ' || v_term_payer_id
                ); 
                                   
     end;
     
     v_term_payer_bill_plan := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_term_payer_id,
                                         32574148
                                    );
                                    
      pkg_os_logging.sp_log_error
      (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           '..Payer bill plan ' || v_term_payer_bill_plan
      ); 

     return v_term_payer_bill_plan;

end fn_get_termbillplan_for_entity;

-----------------------------------------------------------------------------------------------
-- OSPRODUCT-19116 begins
-----------------------------------------------------------------------------------------------

function fn_get_term_profile_for_entity
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_term_id                    in            object.object_id%type,
     in_entity_id                  in            object.object_id%type
)
return object.object_id%type
as

     v_procedure_name  constant    system_log.program_name%type := pkg_name||'fn_get_pref_prf_for_entity';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_term_payer_id                object.object_id%type := null;
     v_term_payer_pref_profile      object.object_id%type := null;   
begin
     
     if in_term_id is null then 
          return null;
     end if;    
			
      if v_session_control.gLogging_Full
      then
           
           pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Term ID: ' || in_term_id ||
                '... Entity ID: ' || in_entity_id
           );
      end if;
     
      begin
          
		select p.policy_term_payer_id
		  into v_term_payer_id
		  from dragon_policy_term_payer p
		 where p.payer_entity_id = in_entity_id
		   and p.policy_term_id = in_term_id;  
                 
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '.. Term Payer ID: ' || v_term_payer_id
              );
          end if;  
     
      exception
           
           when others then
               v_term_payer_id := pkg_os_object_search.fn_object_with_attribute_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_term_id,
                                        gObjType_PolicyTermAccPayer,
                                        gbv_PTPPayer_Ref_CustmrPartnr,
                                        in_entity_id
                                   );
                                   
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '..From exception block Term Payer ID: ' || v_term_payer_id
                    );
               end if;
                                   
     end;
     
     v_term_payer_pref_profile := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_term_payer_id,
                                         pkg_db_profiles.gbv_TermPayerPrefPayProf --32574248
                                    );
                                    
	if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '..Payer preferred profile: ' || v_term_payer_pref_profile
          );
          
     end if;

     return v_term_payer_pref_profile;

end fn_get_term_profile_for_entity;
---------------------------------------------------------------------------------------------

function fn_validate_profile_for_payer
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_ptp_payer_id               in            object.object_id%type,
     in_policy_id                  in            object.object_id%type,
     in_entity_id                  in            object.object_id%type,
     in_prior_term_id              in            object.object_id%type
)
return char
as

     v_procedure_name  constant    system_log.program_name%type := pkg_name||'fn_validate_profile_for_payer';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_term_payer_id                       object.object_id%type := null;
     v_term_payer_pref_prof_id             object.object_id%type := null;   
     v_change_billplan_flag                object.object_id%type := null; 
     v_billpayer_plan                      object.object_id%type := null;
     v_object_state                        object.object_id%type := null;
     v_associated_cash_transfer_profile    object.object_id%type := null;
     v_parent_policy                       object.object_id%type := null;
     v_change_payment_profile              object.object_id%type := null;
     v_modified_bill_plan                  object.object_id%type;
     v_modified_ctf_id                     object.object_id%type;
     v_policy_term                         object.object_id%type;
     v_chosen_bill_plan                    object.object_id%type;
     v_chosen_ctf_id                       object.object_id%type;
     v_chosen_ctf_object_state             object.object_id%type;
     v_chosen_ctf_card_expired             char(1) := 'F';
     v_is_card_expired                     char(1) := 'F';
     v_return_value                        char(1) := 'F';
     v_billplan_new_or_existing            char(1);
begin
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Term ID: ' || in_ptp_payer_id
          );
     end if;
     
     v_term_payer_id := pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               in_ptp_payer_id,
                               pkg_db_profiles.gbv_AssociatedTermPayer --32578848
                          );
                          
     v_term_payer_pref_prof_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_term_payer_id,
                                         pkg_db_profiles.gbv_TermPayerPrefPayProf --32574248
                                    );

     v_change_billplan_flag := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_ptp_payer_id,
                                         pkg_db_payment_arrangement.gbv_PTPPayerChangeBillPlanTF --32711148
                                    );
                                    
     v_billplan_new_or_existing := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_ptp_payer_id,
                                         pkg_db_payment_arrangement.gbv_PTPayerBillPlanNewExisting --32578948
                                    );
																		
	v_change_payment_profile := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_ptp_payer_id,
                                         pkg_db_payment_arrangement.gbv_PTPPayerChangePayProfileTF --32711248
                                    );															
                                    
     v_modified_bill_plan := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_ptp_payer_id,
                                         pkg_db_payment_arrangement.gbv_Ref_PTPayerModBillPlan --32576248
                                    );
                                    
     v_modified_ctf_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_modified_bill_plan,
                                         pkg_db_payment_arrangement.gbv_Ref_PmntArrangementCTF --34204646
                                    );
                                    
     v_object_state := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_modified_ctf_id,
                                         pkg_db_stmt.gGeneric_object_status --210153
                                    );
                                    
                                    
     v_is_card_expired := pkg_db_profiles.fn_is_card_expired
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_modified_ctf_id,
                                         pkg_db_functions.fn_get_policy_current_date (in_session_id, in_transaction_id, in_policy_id)
                                    );
                                    
     v_chosen_bill_plan := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_ptp_payer_id,
                                         pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan --32573848
                                    );
                                    
     v_chosen_ctf_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_chosen_bill_plan,
                                         pkg_db_payment_arrangement.gbv_Ref_PmntArrangementCTF --34204646
                                    );
                                    
     v_chosen_ctf_object_state := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_chosen_ctf_id,
                                         pkg_db_stmt.gGeneric_object_status --210153
                                    );
                                    
                                    
     v_chosen_ctf_card_expired := pkg_db_profiles.fn_is_card_expired
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_chosen_ctf_id,
                                         pkg_db_functions.fn_get_policy_current_date (in_session_id, in_transaction_id, in_policy_id)
                                    );
																		
																		
	if v_session_control.gLogging_Full
     then
		 pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Term Payer ID: ' || v_term_payer_id ||
                '... Term Payer Preferred Profile ID: ' || v_term_payer_pref_prof_id ||
                '... Change Bill Plan Flag: ' || v_change_billplan_flag ||
                '... Bill Plan New or Existing: '|| v_billplan_new_or_existing ||
                '... Change Payment Profile: ' || v_change_payment_profile ||
                '... Modified Bill Plan: ' || v_modified_bill_plan ||
                '... Modified CTF ID: ' || v_modified_ctf_id ||
                '... Object State: ' || v_object_state ||
                '... Is card Expired: ' || v_is_card_expired ||
                '.... Chose Bill Plan: ' || v_chosen_bill_plan ||
                '.... Chosen CTF id : '|| v_chosen_ctf_id ||
                '.... Chosen Object State: ' || v_chosen_ctf_object_state ||
                '.... Chosen is card expired: '|| v_chosen_ctf_card_expired					 
           );
     end if;
                                                         
     if (
             (
                  v_change_billplan_flag is null -- not changing bill plan
                  or
                  (
                       v_change_billplan_flag = 1 -- changing bill plan
                       and
                       v_change_payment_profile is null -- not changing profile
                  )
             )
             and
             (
                  v_term_payer_pref_prof_id is not null -- preferred profile is found
                  or
                  fn_get_term_profile_for_entity -- prior term preferred profile is found
                  (
                        in_session_id,
                        in_transaction_id,
                        in_entity_id,
                        in_prior_term_id
                  ) is not null
                  or
                  (
                       v_chosen_ctf_object_state = 75 -- profile associated with chosen bill plan's profile is active
                       and
                       nvl(v_chosen_ctf_card_expired,'F') = 'F'
                  )
             )
        )
        or
        (
             v_change_billplan_flag = 1 -- changing bill plan
             and
             v_change_payment_profile  = 1 -- changing profile
             and
             v_billplan_new_or_existing = 1 -- new bill plan setup 
        )
        or
        ( 
             v_change_billplan_flag = 1 
             and 
             v_billplan_new_or_existing = 2 
             and
             v_object_state =75 
             and
             nvl(v_is_card_expired,'F') = 'F'
        )
	then
          v_return_value := 'T';
     else
          v_return_value := 'F';
     end if;

     return v_return_value;

end fn_validate_profile_for_payer;

function fn_validate_profile_for_ptp
(
     in_session_id                 in            object.object_id%type,
     in_transaction_id             in            object.object_id%type,
     in_policy_id                  in            object.object_id%type,
     in_ptp_id                     in            object.object_id%type,
     in_term_pref_profile          in            object.object_id%type,
     in_prior_term_profile         in            object.object_id%type,     
     in_change_bill_plan_flag      in            char,
     in_change_pay_prf_flag        in            char,
     in_bill_plan_new_or_existing  in            char,
     in_chosen_bill_plan_id        in            object.object_id%type,
     in_chosen_ctf_id              in            object.object_id%type,
     in_modified_bill_plan_id      in            object.object_id%type,
     in_modified_ctf_id            in            object.object_id%type
)
return char
as

     v_procedure_name  constant    system_log.program_name%type := pkg_name||'fn_validate_profile_for_payer';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_modified_ctf_object_state   number;
     v_chosen_ctf_object_state     number;
     v_policy_current_date         date := pkg_db_functions.fn_get_policy_current_date (in_session_id, in_transaction_id, in_policy_id);
     v_return_value                char(1) := 'F';
begin
     /*if v_session_control.gLogging_Full
     then
		 pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Term Payer ID: ' || v_term_payer_id ||
                '... Term Payer Preferred Profile ID: ' || v_term_payer_pref_prof_id ||
                '... Change Bill Plan Flag: ' || v_change_billplan_flag ||
                '... Bill Plan New or Existing: '|| v_billplan_new_or_existing ||
                '... Change Payment Profile: ' || v_change_payment_profile ||
                '... Modified Bill Plan: ' || v_modified_bill_plan ||
                '... Modified CTF ID: ' || v_modified_ctf_id ||
                '... Object State: ' || v_object_state ||
                '... Is card Expired: ' || v_is_card_expired ||
                '.... Chose Bill Plan: ' || v_chosen_bill_plan ||
                '.... Chosen CTF id : '|| v_chosen_ctf_id ||
                '.... Chosen Object State: ' || v_chosen_ctf_object_state ||
                '.... Chosen is card expired: '|| v_chosen_ctf_card_expired					 
           );
     end if;*/
     
     v_chosen_ctf_object_state := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_chosen_ctf_id,
                                         pkg_db_stmt.gGeneric_object_status --210153
                                    );
                                    
     v_modified_ctf_object_state := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_modified_ctf_id,
                                         pkg_db_stmt.gGeneric_object_status --210153
                                    );
     
     if (
             (
                  in_change_bill_plan_flag is null
                  or
                  (
                       in_change_bill_plan_flag = 1
                       and
                       in_change_pay_prf_flag is null
                  )
             )
             and
             (
                  in_term_pref_profile is not null
                  or
                  in_prior_term_profile is not null
                  or
                  (
                       v_chosen_ctf_object_state = 75
                       and
                       nvl (pkg_db_profiles.fn_is_card_expired(in_session_id,in_transaction_id,in_chosen_ctf_id, v_policy_current_date), 'F') = 'F'
                  )
             )
     )
     or
     (
        in_change_bill_plan_flag = 1
        and
        in_bill_plan_new_or_existing = 1
        and
        in_change_pay_prf_flag = 1
     )
     or
     (
        in_change_bill_plan_flag = 1
        and
        in_bill_plan_new_or_existing = 2
        and
        v_modified_ctf_object_state = 75
        and 
        nvl (pkg_db_profiles.fn_is_card_expired(in_session_id,in_transaction_id,in_modified_ctf_id, v_policy_current_date), 'F') = 'F'
     )
     then
          v_return_value := 'T';
     else
          v_return_value := 'F';
     end if;

     return v_return_value;

end fn_validate_profile_for_ptp;
-------------------------------------------------------------------------------
-- OSPRODUCT-19116 ends
-------------------------------------------------------------------------------
function fn_valid_payer_tf
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_payer_type_enum            in  db_payer_type.db_payer_type_enum%type
)
return char
is
        v_procedure_name    constant  system_log.program_name%type := pkg_name||'fn_valid_payer_tf';
        v_return_value                char(1) := 'F';

begin

        if in_payer_type_enum in (pkg_db_constant.gBillingAcType_Customer, pkg_db_constant.gBillAccType_FinanInst, pkg_db_constant.gBillAccType_payer) 
        then
            v_return_value := 'T';
        else
            v_return_value := 'F';
        end if;

        return v_return_value;
        
end fn_valid_payer_tf;
-------------------------------------------------------------------------------

--OSPRODUCT-33530 Start
function fn_get_payment_schedule_amt
(
     in_session_id        in  object.object_id%type,
     in_transaction_id    in  object.object_id%type,
     in_payplan_id        in  object.object_id%type,
     in_bv_id             in  number
)
return 
number is

     v_procedure_name  constant               system_log.program_name%type := pkg_name||'fn_get_payment_schedule_amt';
     v_session_control                        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_return_value        			          char(1) := 'F';
     v_schedule_element_create_pt             object.object_id%type;
     v_payplan_parent_pt            	      object.object_id%type;
     v_payment_plan_sch_element               pkg_os_object.t_object_list;
     v_sum                                    number:=0;
     v_idx                                    number;
     v_create_debit_tf                        object_bv_value.business_variable_value%type;
     v_element_debit_subcategory              object_bv_value.business_variable_value%type;
     v_element_include_in_payment_sche_tf     object_bv_value.business_variable_value%type;
     v_amount number;
     --second rule
     v_credit_category                        object_bv_value.business_variable_value%type;
     v_payment_plan_valid_element_tf          object_bv_value.business_variable_value%type;
     --3rd rule
     v_payment_plan_sch_element_ref_pt        object_bv_value.business_variable_value%type;
     v_pt_ref_basic_trx                       object_bv_value.business_variable_value%type;
     v_ptp_parent_policy_trx                  object_bv_value.business_variable_value%type;
     --4th rule
     v_balance_amount                         number;
begin
												  
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_Id           =>    in_session_id,
          in_transaction_id       =>    in_transaction_id,
          in_object_id            =>    in_payplan_id,
          in_child_object_type_id =>    pkg_db_billing.gObjType_ScheduledElement, --2365546
          in_object_list          =>    v_payment_plan_sch_element
     );
     --1st rule 8231646 to 15946848
     if in_bv_id = pkg_db_billing_modify.gbv_ScheduledPayCalAmount   --29756446 
     then
                             
          v_idx:= v_payment_plan_sch_element.first;
                
          while v_idx is not null
          loop
               v_create_debit_tf  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_create_debit_flag); --29712446
               v_element_debit_subcategory := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_debit_sub_category); --29712646
               v_element_include_in_payment_sche_tf  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing_modify.gbv_IncludeInPayScheduleTF); --31975846
                       
               if (v_create_debit_tf= genum_Yes and v_element_debit_subcategory <> pkg_db_functions.g_FItem_SubCat_CommCedingRec and v_element_include_in_payment_sche_tf = genum_Yes)
               then  
                    v_amount := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_element_amount),0); --29713846
                    v_sum := v_sum + v_amount;
               end if;  
          v_idx := v_payment_plan_sch_element.next(v_idx);   
          end loop;
 
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ':Payment Amount - Total' ||
                    ':Debit creation' ||v_create_debit_tf||
                    ':Debit subcategory:' || v_element_debit_subcategory ||
                    ':Element included in payment?:' || v_element_include_in_payment_sche_tf||
                    ':Element amount:' || v_amount ||
                    ':Sum of the element amount:' || v_sum ||
                    ':element object:' || v_idx 
               );
          end if;
 
      --Second rule 10326646 to 15947048
     elsif in_bv_id = pkg_db_payplan_modify.gbv_SchedCalcCommAmount  --32740846 
     then
          
          v_idx:= v_payment_plan_sch_element.first;
     
          while v_idx is not null
          loop
               v_credit_category  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_credit_category); --29712846
               v_payment_plan_valid_element_tf := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx),pkg_db_billing_modify.gbv_ElementValidTF); -- 34002346
                  
               if (nvl(v_credit_category,0) = pkg_db_functions.gFItem_Cat_Commission and nvl(v_payment_plan_valid_element_tf,genum_Yes) <> genum_No )
               then
                    v_amount := nvl((pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_element_amount)),0); -- 29713846
                    v_sum := round((v_sum + v_amount),2);
               end if;
          v_idx := v_payment_plan_sch_element.next(v_idx);   
          end loop;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ':Total Commission Amount' ||
                    ':credit category' ||v_credit_category ||
                    ':Valid element:' || v_payment_plan_valid_element_tf ||
                    ':Element amount:' || v_amount ||
                    ':Sum of the element amount:' || v_sum ||
                    ':element object:' || v_idx 
               );
          end if;
   
     --3rd rule 10819348 to 15947348 after processing reinstatement trx
     elsif in_bv_id = gbv_ReinstatePayTotalCalAmount --32883248
     then
          v_pt_ref_basic_trx := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_payplan_id,'29105506.212018.28555404.22605205'); --22605205
          v_ptp_parent_policy_trx := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_payplan_id,'29105506.212018.28555404'); -- 28555404 
			   
          v_idx:= v_payment_plan_sch_element.first;
     
          while v_idx is not null
          loop
               v_create_debit_tf  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_create_debit_flag); --29712446
               v_element_debit_subcategory := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_debit_sub_category); -- 29712646
               v_element_include_in_payment_sche_tf  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing_modify.gbv_IncludeInPayScheduleTF); -- 31975846
               v_payment_plan_sch_element_ref_pt := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing_modify.gbv_ElementRefCreatorPolTrns ); --31983746

                                          
               if (v_create_debit_tf = genum_Yes 
                   and v_element_debit_subcategory <> pkg_db_functions.g_FItem_SubCat_CommCedingRec 
                   and v_element_include_in_payment_sche_tf =genum_Yes 
                   and v_payment_plan_sch_element_ref_pt not in(v_pt_ref_basic_trx, v_ptp_parent_policy_trx )
                  )
               then  
                    v_amount := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_element_amount),0); -- 29713846
                    v_sum := v_sum + v_amount;
                    
               end if;  
               
          v_idx := v_payment_plan_sch_element.next(v_idx);   
          end loop;
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ':Reinstatement Payment Amount' ||
                    ':Debit creation' ||v_create_debit_tf||
                    ':Debit subcategory:' || v_element_debit_subcategory ||
                    ':Element included in payment?:' || v_element_include_in_payment_sche_tf||
                    ':Payment Plan element reference' || v_payment_plan_sch_element_ref_pt ||
                    ':Policy trx reference' || v_pt_ref_basic_trx ||
                    ':PTP parent policy trx' || v_ptp_parent_policy_trx ||
                    ':Element amount:' || v_amount ||
                    ':Sum of the element amount:' || v_sum ||
                    ':element object:' || v_idx
               );
          end if;           
  
     --4th rule 10819348 after processing reinstatement trx
     elsif in_bv_id = pkg_db_billing_modify.gbv_installmentbalanceamount   -- 33028948 
     then
          
          v_idx := v_payment_plan_sch_element.first;
     
          while v_idx is not null
          loop
               v_element_include_in_payment_sche_tf  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing_modify.gbv_IncludeInPayScheduleTF); -- 31975846
             
               if (v_element_include_in_payment_sche_tf = genum_Yes)
               then  
                    v_balance_amount := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), gbv_ElementBal); --33028848
                    v_amount := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_payment_plan_sch_element(v_idx), pkg_db_billing.gbv_element_amount); -- 29713846
                    v_sum := v_sum + nvl(v_balance_amount,v_amount);
               end if;  
                
          v_idx := v_payment_plan_sch_element.next(v_idx);   
          end loop;
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ':Installment Balance amount' ||
                    ':Reinstatement Payment Amoun' ||
                    ':Element include in payment schedule' ||v_element_include_in_payment_sche_tf||
                    ':Balance amount:' || v_balance_amount ||
                    ':Element amount:' || v_amount ||
                    ':Sum of the element amount:' || v_sum ||
                    ':element object:' || v_idx
               );
          end if;                    
             
     end if;
          
     return v_sum;
 
end fn_get_payment_schedule_amt;
--OSPRODUCT-33530 End
-------------------------------------------------------------------------------
--Kiran start OSPRODUCT-28998 Start
--   %NAME
--        fn_billing_account_type_tf
--
--   %USAGE
--        Function to return 'T' if the billing account type is Agency/Broker.
--
--   %ALGORITHM
--   
--   1.Retrieve the Billing Account as per the below preferences.
--     	a.First preference is given to PolicyTermAssociatePayer object type when the policy is Multi Payer policy.
--     	b.Second preference is given to PolicyTransactionPolicyPayer object type when the policy have Multi Payers for an In-house policy.
--     	c.Third preference is given to PTP object type when the policy is single payer policy.
--   2.Retrieve the Billing Account Type from Billing Account.
--   3.Return 'T' if the Billing Account Type is same as the input parameter in_billing_account_type_id.
--
--   %PARAM    in_session_id                       Session Id
--   %PARAM    in_transaction_id                   Transaction Id
--   %PARAM    in_ptp_id                           Policy Transaction Policy Id
--   %PARAM    in_policyterm_payer_id              PolicyTerm Associated Payer Id
--   %PARAM    in_ptp_payer_id                     Policy Transaction Policy Payer Id
--   %PARAM    in_billing_account_type_id          Billing account type
-----------------------------------------------------------------------------------------------
function fn_billing_account_type_tf
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_ptp_id                     in  object.object_id%type,
     in_policyterm_payer_id        in  object.object_id%type,
     in_ptp_payer_id               in  object.object_id%type,
     in_billing_account_type_id    in  number
)
return char
is

     v_procedure_name                         constant               system_log.program_name%type := pkg_name||'fn_billing_account_type_tf';
     v_session_control                        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_return_value                           char(1) := 'F';
     v_billing_account_id                     number;
     v_billing_account_type_id                number;
begin
     if v_session_control.gLogging_Full then
          
        pkg_os_logging.sp_log
        (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'in_ptp_id:' ||in_ptp_id||
               'in_policyterm_payer_id:' ||in_policyterm_payer_id||
               'in_ptp_payer_id:' || in_ptp_payer_id 
        );
        
     end if;
     --
     -- Retrieving the Billing Account Type
     --
     if in_policyterm_payer_id is not null then          
        
        v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                (
                                       in_session_id,
                                       in_transaction_id,
                                       pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_policyterm_payer_id,
                                            pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                       ),
                                       pkg_db_constant.gObjType_BillingAccount
                                );
                                                           
     elsif in_ptp_payer_id is not null then
        
        v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                (
                                       in_session_id,
                                       in_transaction_id,
                                       pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_ptp_payer_id,
                                            pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                       ),
                                       pkg_db_constant.gObjType_BillingAccount
                                );
     else
          
        v_billing_account_id := pkg_os_object_io.fn_object_bv_get
                                (
                                       in_session_id,
                                       in_transaction_id,
                                       in_ptp_id,
                                       pkg_db_constant.gbv_Ref_ResponsibleBillingAccount
                                );
     end if;
     
     -- Retrieving the Billing Account Type from Billing Account
     v_billing_account_type_id := pkg_os_object_io.fn_object_bv_get
                                                      (
                                                           in_session_id,
                                                           in_transaction_id,
                                                           v_billing_account_id,
                                                           pkg_db_billing_modify.gbv_BillingAccountType
                                                      ); 
                                                      
     -- Verifying if the Billing Account Type is same as the input parameter
     if nvl(v_billing_account_type_id,0) = in_billing_account_type_id then
     --if nvl(v_billing_account_type_id,0) = pkg_db_constant.gBillingAcType_AgentBroker then
         v_return_value := 'T';
     else
          v_return_value := 'F';
     end if;
                                                      
     return v_return_value;

end fn_billing_account_type_tf;
--Kiran start OSPRODUCT-28998 End
-------------------------------------------------------------------------------
END PKG_DB_MULTIPAYER;
/
