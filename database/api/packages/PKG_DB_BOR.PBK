create or replace PACKAGE BODY PKG_DB_BOR
-------------
-- $Workfile:   PKG_DB_BOR.pbk  $
-- $Revision:    $
-- $Author:   $
-- $Date:   $
-------------
AS
----------------------------------------------------------------------------------------------------------------------------------------------------
--  Package Body Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- Constant Values --
--
pkg_name                              constant system_log.program_name%type                       := 'PKG_DB_BOR.';
gbv_UserSession_UserName_Path         constant varchar2(100)                                      := '210086.211882';
gbv_PolTermInstlmnt_invoiced          constant business_variable.business_variable_id%type        := 31212946;
gbv_FItemAgingStatusDaysID            constant business_variable.business_variable_id%type        := 32572240;
gbv_PolicyTermNID                     constant business_variable.business_variable_id%type        := 31194146;

--UTPRODUCT-354
gbv_Ref_Pref_BillPlan_id              constant business_variable.business_variable_id%type        := 34232446;   
-----------------------------------------------------------------------------------------------------------------------------------------------------
type gType_bv_snapshot_rec is record
(
     object_type_id    business_variable.container_object_type_id%type,
     bv_id             business_variable.business_variable_id%type,
     bv_name           business_variable.business_variable_name%type
);

type gType_bv_snapshot_refCur is ref cursor return gType_bv_snapshot_rec;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      f_refC_bv_list_late
--
--  %USAGE
--     A stored query for the Late Process BV synchronization.
--     Describes what business vairableS (BV IDs) should be backed up for a given object type.
--
--  %ALGORITHM
--     1. Read from md table BUSINESS_VARIABLE with a filter for object type ( in_object_type_id)
--     2. Opens a cursor
--     3. returns pointer REF CURSOR to this cursor
--
--  %PARAM    in_object_type_id          object type to get a set of BV IDs
-----------------------------------------------------------------------------------------------------------------------------------------------------
function f_refC_bv_list_late
(
     in_object_type_id   number
)
return  gType_bv_snapshot_refCur
is
     c    gType_bv_snapshot_refCur;
begin

     open c 
     for
     select
          t_bv_list.*
     from
     (
          -- POLICY -----------------------------------------------------------------------------------------------------------------
          select 
               -- bv.container_object_type_id     as object_type_id,
               pkg_os_constant.gobjType_Policy as object_type_id,
               bv.business_variable_id         as bv_id,
               business_variable_name          as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_os_constant.gobjType_Policy -- 24 -- POLICY
                                             )
               and
               bv.business_variable_id in (
                                             -- pkg_db_late_process.gbv_Ref_CurrPolPendCancel  , -- this will be processed seperatly
                                             pkg_db_late_process.gbv_PolicyDateCancellation ,
                                             pkg_db_late_process.gbv_PolLatePaymentIndicator,
                                             pkg_db_late_process.gbv_PolLatePaymentCount    ,
                                             pkg_db_late_process.gbv_PolLastActionPerformed
                                          )
          -- Policy TRANSACTION -----------------------------------------------------------------------------------------------------
          --     union all
          --     select 
          --          pkg_os_constant.gobjType_PolicyTransaction as object_type_id,
          --          bv.business_variable_id                    as bv_id,
          --          business_variable_name                     as bv_name
          --      from
          --          business_variable  bv     
          --     where
          --          (
          --               bv.container_object_type_id in
          --                                             (
          --                                                pkg_os_constant.gObjType_Generic, 
          --                                                pkg_os_constant.gobjType_PolicyTransaction -- 629 -- Policy Transaction
          --                                             )
          --               and
          --               bv.business_variable_id in (
          --                                             pkg_db_functions.gbv_NonPayCanelDays
          --                                          )
          --          )
          -- Policy TERM ------------------------------------------------------------------------------------------------------------
          union all
          select 
               pkg_os_constant.gobjType_PolicyTerm as object_type_id,
               bv.business_variable_id             as bv_id,
               business_variable_name              as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_os_constant.gobjType_PolicyTerm -- 2389401 --- PolicyTerm
                                             )
               and
               bv.business_variable_id in (
                                             32689346, -- Policy Term.Last NSF/Reversal
                                             pkg_db_late_process.gbv_PolicyTerm_BillingStatus  ,
                                             pkg_db_late_process.gbv_PolicyTerm_PASStatus      ,
                                             --pkg_db_late_process.gbv_Recon_DueDate             ,  -- ???
                                             --pkg_db_late_process.gbv_Recon_TotalDue            ,  -- ???
                                             pkg_db_late_process.gbv_ScheduledPay_Invoice_TF   ,
                                             pkg_db_late_process.gbv_ScheduledPayInst_DueDate  ,
                                             pkg_db_late_process.gbv_PolicyPenCan_TarCanceldate,
                                             pkg_db_late_process.gbv_TermLatePaymentIndicator  ,
                                             pkg_db_late_process.gbv_TermLatePaymentCount
                                          )
          -- BILING ACCOUNT -----------------------------------------------------------------------------------------------------------------
          union all
          select 
               pkg_db_object.gObjType_BillingAccount as object_type_id,
               bv.business_variable_id               as bv_id,
               business_variable_name                as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_db_object.gObjType_BillingAccount -- 2365346 -- BillingAccount
                                             )   
               and
               bv.business_variable_id in (
                                             pkg_db_late_process.gbv_AccLatePaymentIndicator,
                                             pkg_db_late_process.gbv_AccLatePaymentCount
                                          )
     ) t_bv_list
     where
          object_type_id = in_object_type_id          
    ;
     
    return c;
    
end f_refC_bv_list_late;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      f_refC_bv_list_susp
--
--  %USAGE
--     A stored query for the Susension BV synchronization.
--     Describes what business vairableS (BV IDs) should be backed up for a given object type.
--
--  %ALGORITHM
--     1. Read from md table BUSINESS_VARIABLE with a filter for object type ( in_object_type_id)
--     2. Opens a cursor
--     3. returns pointer REF CURSOR to this cursor
--
--  %PARAM    in_object_type_id          object type to get a set of BV IDs
-----------------------------------------------------------------------------------------------------------------------------------------------------
function f_refC_bv_list_susp
(
     in_object_type_id   number
)
return  gType_bv_snapshot_refCur
is
     c    gType_bv_snapshot_refCur;
begin

     open c 
     for
     select
          t_bv_list.*
     from
     (
          -- POLICY -----------------------------------------------------------------------------------------------------------------
          select 
               -- bv.container_object_type_id     as object_type_id,
               pkg_os_constant.gobjType_Policy as object_type_id,
               bv.business_variable_id         as bv_id,
               business_variable_name          as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_os_constant.gobjType_Policy -- 24 -- POLICY
                                             )
               and
               bv.business_variable_id in (
                                             pkg_db_suspension.gbv_Billing_Suspension     ,
                                             pkg_db_suspension.gbv_Policy_Stop_UW_Trnx    ,
                                             pkg_db_suspension.gbv_Policy_Stop_Credit_Disb,
                                             pkg_db_suspension.gbv_Policy_Stop_Late_Notice,
                                             pkg_db_suspension.gbv_Policy_Stop_EFTCC_Pulls,
                                             pkg_db_suspension.gbv_Policy_Bill_Susp_Type  
                                          )
          -- Policy TERM ------------------------------------------------------------------------------------------------------------
          union all
          select 
               pkg_os_constant.gobjType_PolicyTerm as object_type_id,
               bv.business_variable_id             as bv_id,
               business_variable_name              as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_os_constant.gobjType_PolicyTerm -- 2389401 --- PolicyTerm
                                             )
               and
               bv.business_variable_id in (
                                             pkg_db_suspension.gbv_PolicyTerm_Susp_Status      ,
                                             pkg_db_suspension.gbv_PolicyTerm_Billing_Susp     ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_UW_Trnx     ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_Cred_Disb   ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_Late_Notce  ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_EFT_Req     ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_WriteOff    ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_Invoices    ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_Late_Proc   ,
                                             pkg_db_suspension.gbv_PolicyTerm_Bill_Susp_Type   ,
                                             --pkg_db_suspension.gbv_PolicyTerm_RefCurrSusp      ,  -- this will be processed seperatly
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_LateNotce1  ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_LateNotce2  ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_Pend_Canc   ,
                                             pkg_db_suspension.gbv_PolicyTerm_Stop_NonPayCanc  ,
                                             32525348                                            -- PolicyTerm - Set - Suspension Transactions
                                          )
          -- BILING ACCOUNT -----------------------------------------------------------------------------------------------------------------
          union all
          select 
               pkg_db_object.gObjType_BillingAccount as object_type_id,
               bv.business_variable_id               as bv_id,
               business_variable_name                as bv_name
           from
               business_variable  bv
          where
               bv.container_object_type_id in
                                             (
                                                pkg_os_constant.gObjType_Generic,
                                                pkg_db_object.gObjType_BillingAccount -- 2365346 -- BillingAccount
                                             )   
               and
               bv.business_variable_id in (
                                             pkg_db_suspension.gbv_BillAcc_Status
                                             -- pkg_db_suspension.gbv_BillAcc_CurrSuspension   -- xRef -- this will be processed seperatly
                                          )
     ) t_bv_list
     where
          object_type_id = in_object_type_id          
    ;
     
    return c;
    
end f_refC_bv_list_susp;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- Date Constant Declarations - Retain the declarations in the package body
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure show_version
is
begin
    dbms_output.put_line('$Workfile:   BASE_API.PKG_DB_BOR.PBK  $');
    dbms_output.put_line('$Revision:   1.0  $');
    dbms_output.put_line('$Author:   kdubin  $');
    dbms_output.put_line('$Date:   02 DEC 2019 18:50:00  $');
exception
    when others then
        dbms_output.put_line(sqlerrm(sqlcode));
end show_version;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--   %NAME
--        sp_log
--
--
--   %USAGE
--        Redirect log message to dbms_output for debugging
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_log
(
     in_session_id       in   object.object_id%type,
     in_transaction_id   in   object.object_id%type,
     in_program_name     in   varchar2,
     in_log_description  in   varchar2
)
is
begin
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          in_program_name,
          in_log_description
     );

     dbms_output.put_line (in_log_description);
end sp_log;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_get_bor_prorata_factor
--
--  %USAGE
--      Function to get a pro-rata factor to adjust commission amounts for old Broker in Cx transaction and for new Broker in Rewrite transaction
--
--  %ALGORITHM
--      Having the a BOR Transfer Request Id find a Policy Id from bor_agency_transfer_details table.
--      Calculate pro-rata factor using formula:
--             (c.borReq_eff_date - c.policy_or_trx_eff_date) / (c.policy_exp_date - c.policy_or_trx_eff_date)
--
--      if in_policy_trx_id is not specified a pro-rata factor is calculated for a full term. This is applicable for flat CX in original policy and 
--      RW in BORed policy. 
--      Any PNBT transaction in Original policy will be rolled back and then rolled forward in BORed policy. A pro-rata factor for a PNBT transaction
--      should be calculated individually basing on PNBT transaction effective data.
--      Formula: 
--             (c.borReq_eff_date - c.policy_or_trx_eff_date) / (c.policy_exp_date - c.policy_or_trx_eff_date);
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_bor_included_object_id      
--  %PARAM    in_policy_trx_id               default null.  if specified, a pro-rata factor will be calculated based on policy trx effective date (Needed for PNBT)
--                                                          if not specified,  a pro-rata factor will be calculated based on policy effective date (RW, flat CX)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_bor_prorata_factor
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_bor_included_object_id     in   object.object_id%type,
     in_policy_trx_id              in   object.object_id%type default null   -- if specified, a pro-rata factor will be calculated based on in_policy_trx_id.effective_date (not policy effective date)
)
return float
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'fn_get_bor_prorata_factor';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_bor_prorata_factor               float;
     v_policy_trx_desc                  varchar2(300);
begin
     for c in (
                select 
                     --,(trunc(p.policy_expiration_date,'dd') - trunc(bor.async_batch_execution_dt,'dd')) /
                     -- (trunc(p.policy_expiration_date,'dd') - trunc(nvl(ptrx.policy_trx_eff_date, p.policy_effective_date), 'dd'))      as bor_prorata
                     --
                     bor_d.bor_transfer_request_id,
                     bor_d.bor_included_object_id,
                     bor_d.old_producer,
                     bor_d.new_producer,
                     p.policy_id, 
                     p.policy_number,
                     p.policy_effective_date,
                     p.policy_expiration_date,
                     bor.async_batch_execution_dt,
                     --                
                     --trunc(nvl(ptrx.policy_trx_eff_date, p.policy_effective_date),'dd')  as policy_eff_date,
                     --trunc(p.policy_expiration_date,                              'dd')  as policy_exp_date,
                     --trunc(bor.async_batch_execution_dt,                          'dd')  as borReq_eff_date     
                     nvl(ptrx.policy_trx_eff_date, p.policy_effective_date)  as policy_or_trx_eff_date,  -- policy eff date for flat CX and RW, Transaction eff data of PNBT
                     p.policy_expiration_date                                as policy_exp_date,
                     bor.async_batch_execution_dt                            as borReq_eff_date 
                     --
                     , ptrx.policy_trx_id||' '||ptrx.policy_trx_type_name||'('||ptrx.policy_trx_object_state_name||') ' as pas_trx
                from 
                     bor_agency_transfer_details   bor_d
                join
                     bor_agency_transfer           bor    on (bor_d.bor_transfer_request_id = bor.bor_transfer_request_id)
                join 
                     dragon_policy                 p      on (bor_d.policy_id = p.policy_id)     
                left join 
                     dragon_policy_trx             ptrx   on (
                                                               ptrx.policy_id = p.policy_id
                                                               and
                                                               ptrx.policy_trx_id = in_policy_trx_id
                                                             )
                where 
                     bor_d.bor_included_object_id = in_bor_included_object_id
              )
     loop
     
          if c.policy_or_trx_eff_date >= c.borReq_eff_date
          then
               v_bor_prorata_factor := 0; -- no pro-rata if policy trx eff data is after the BOR eff date
          else
               v_bor_prorata_factor := (c.borReq_eff_date - c.policy_or_trx_eff_date) / (c.policy_exp_date - c.policy_or_trx_eff_date);
          end if;

          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '............. calculated pro-rata factor ' || v_bor_prorata_factor ||
                    ' for policy ' || c.policy_number ||'(ID '||c.policy_id||')'|| 
                    ', PAS Trx ID = '|| case when in_policy_trx_id is not null
                                             then c.pas_trx
                                             else '<Not Specified>'
                                        end ||                                        
                    ', old producer ' || c.old_producer || ' new producer ' ||c.new_producer ||
                    ', bor transfer request '|| c.bor_transfer_request_id ||' effective from '||c.async_batch_execution_dt||', bor included object ' || c.bor_included_object_id ||
                    '.'|| case when in_policy_trx_id is not null
                               then ' Policy Transaction '
                               else ' Policy '
                          end || 'effective ' || c.policy_or_trx_eff_date ||
                    ' policy exired ' || c.policy_exp_date
               );
          end if;  
          
          v_policy_trx_desc := substr(c.pas_trx,1,300);
          
     end loop;
     
     if v_session_control.gLogging_Full
     then          
          sp_log
          --pkg_os_logging.sp_log          
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.......... returning pro-rata factor ' || v_bor_prorata_factor ||
               case when in_policy_trx_id is not null
                    then ' for PAS Trx ID=' || v_policy_trx_desc
                    else ' for entire Policy'
               end
          );
     end if;     

     return v_bor_prorata_factor;

--exception
--     when others then return 1;     
end fn_get_bor_prorata_factor;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_prorata_adj_bor_cmsn
--
--  %USAGE
--      Procedure to create pro-rata adjustment for commisson financials after processing BOR Cx and Rw transactions.
--
--  %CALL FROM
--
--      PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy
--      line 5081
--                   -- OSBILLING-7397. KD. Get pro-rata factor
--                   --
--                   v_bor_prorata_factor      float := pkg_db_bor.fn_get_bor_prorata_factor
--                                                      (
--                                                           in_session_id,
--                                                           in_transaction_id,
--                                                           in_bor_included_object_id  => in_action_object_id -- BORIncludedObject
--                                                      );
--                   -- /OSBILLING-7397. KD. Get pro-rata factor
--
--      PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy
--      line 5383          
--              -- OSBILLING-7397. KD. Create pro-rated adjustments for commission for CX
--              --
--              pkg_db_bor.sp_prorata_adj_bor_cmsn
--              (
--                    in_session_id            => in_session_id,
--                    in_transaction_id        => in_transaction_id,
--                    in_policy_trx_id         => v_new_policy_trx_id,
--                    in_bor_prorata_factor    => v_bor_prorata_factor
--              );
--              -- / OSBILLING-7397. KD. Create pro-rated adjustments for commission for CX
--              
--      line 5584
--              -- OSBILLING-7397. KD. Create pro-rated adjustments for commission for RW
--              --
--              pkg_db_bor.sp_prorata_adj_bor_cmsn
--              (
--                    in_session_id            => in_session_id,
--                    in_transaction_id        => in_transaction_id,
--                    in_policy_trx_id         => v_new_policy_trx_rew_id,
--                    in_bor_prorata_factor    => v_bor_prorata_factor
--              );
--              -- / OSBILLING-7397. KD. Create pro-rated adjustments for commission for RW
--              
--              
--      
--  %ALGORITHM
--
--      1. Create Billing batch of type 'Commission Adjustment' - Payables_Earning_Adjustment 
--         1.1 set xRef to the Billing batch created by the PAS trx in_policy_trx_id
--      2. Create Billing transaction of type 'Debit generation'
--      3. Create Billing transaction of type 'Credit generation'
--      4. Find all commission fitems created as part of PAS transaction (Cx or Rw). 
--         For each fitem:
--         4.1 Create a clone of the fitem object and link to appopriate 'Credit generation' or 'Debit generation' transaction
--         4.2 Create brand new fichange of type 'Create'
--
--             NOTE about sign for adjustment fitmes:
--                Do revert sign for adjustment fitmes for :
--                    - 'non-reversal' transactions in a BORed policy, ie  RW, Endorsement
--                    - 'reversal' transaction in Original policy, ie Cx, Rollback
--                and opposite, DO NOT revert sign for :
--                    - 'reversal' transactions in a BORed policy, ie  Cx, Rollback
--                    - 'non-reversal' transactions in an Original policy, ie  NB, Endorsement
--
--         4.3 Do BVsets
--      5. Do BVsets for Billing Transactions, datamart update
--      6. Do BVsets for Billing Batch , datamart update
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_policy_trx_id               PAS trx - Cx or RW
--  %PARAM    in_bor_prorata_factor          BOR pro-rata factor
--  %PARAM    in_revert_sign_tf              should we revert a sign for adjustment fitems? Defaul 'Y' yes.
--                                                              -- Do revert sign for adjustment fitmes for :
--                                                              --   -  'non-reversal' transactions in a BORed policy, ie  RW, Endorsement
--                                                              --   -  'reversal' transaction in Original policy, ie Cx, Rollback
--                                                              --
--                                                              -- and opposite, DO NOT revert sign for :
--                                                              --   -  'reversal' transactions in a BORed policy, ie  Cx, Rollback
--                                                              --   -  'non-reversal' transactions in an Original policy, ie  NB, Endorsement
--
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_prorata_adj_bor_cmsn
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_policy_trx_id              in   object.object_id%type,
     in_bor_prorata_factor         in   float   default 1,
     in_revert_sign_tf             in   char    default 'Y'   -- Do revert sign for adjustment fitmes for :
                                                              --   -  'non-reversal' transactions in a BORed policy, ie  RW, Endorsement
                                                              --   -  'reversal' transaction in Original policy, ie Cx, Rollback
                                                              --
                                                              -- and opposite, DO NOT revert sign for :
                                                              --   -  'reversal' transactions in a BORed policy, ie  Cx, Rollback
                                                              --   -  'non-reversal' transactions in an Original policy, ie  NB, Endorsement
)   
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_prorata_adj_bor_cmsn';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     gbv_FItem_associatedDisbBatch      constant business_variable.business_variable_id%type   :=   32005946;     
     genum_Payables_Earning_Adjstm      constant lookup_list_value.lookup_enum%type            :=   2201;

     v_current_date                     date :=   pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id);

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;     

     v_new_fitem_id                     object.object_id%type;
     v_new_fichange_create_id           object.object_id%type;
     v_initial_amount_prorata           float;     
     v_billing_account_id               object.object_id%type;
     v_billing_batch_id                 object.object_id%type;
     v_billing_credit_trx_id            object.object_id%type;
     v_billing_debit_trx_id             object.object_id%type;
     v_billing_tmp_trx_id               object.object_id%type;
     v_billing_Cr_De_trx_id             object.object_id%type;
     v_fi_credit_trx_amount             float;
     v_fi_debit_trx_amount              float;     
     v_FiTrxSet_of_pasTrx_id            object.object_id%type;
     v_policy_id                        object.object_id%type := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_policy_trx_id);
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)      := 'T';
     v_sign                             number       := case when in_revert_sign_tf ='Y' then -1 else 1 end ;
     v_rounding_precision               number := 2;
	 v_action_outcome_id                outcome.outcome_id%type;--OSPRODUCT-12721_1
	 v_policy_trx_type             object.object_id%type; -- OSPRODUCT-30832
     v_policy_trx_sub_type          object.object_id%type; -- OSPRODUCT-30832
   
     
     type t_r_rollup_rounding 
     is record
     (
          amnt_rounded_total       number,          
          amnt_left                number,
          amnt_collected           number,
          items_count              number,
          items_processed          number
     );
     
     type t_t_rollup_rounding is table of t_r_rollup_rounding index by varchar2(100);
     
     v_rollup_rounding_table     t_t_rollup_rounding;
     
     
     

     -- Find all commission fitems created as part of PAS transaction (Cx or Rw). 
     --
     cursor c_cmsn_fitems
            (
                 p_policy_trx_id    in  number
            )
     is
     select
          billing_account_id||billing_element_md_id||fitem_type_id||sign(fi.initial_amount) as fi_rollup_idx,
          --
          sum(fi.initial_amount)over(partition by billing_account_id, 
                                                  billing_element_md_id, 
                                                  fitem_type_id,
                                                  sign(initial_amount)
                                     )                                                      as fi_rollup_initial,
          count(1)over(partition by billing_account_id, 
                                    billing_element_md_id, 
                                    fitem_type_id, 
                                    sign(fi.initial_amount)
                      )                                                                     as fi_rollup_count,
          --
          fi.*
     from
          dragon_fitem fi
     where
          fi.policy_transaction_id = p_policy_trx_id
     and
          fi.fitem_category_id IN (
                                    946,   -- commission
                                    5746   -- deferred premium commission
                                  ) 
     --
     -- TBD
     --
     -- and 
     --      not exists (
     --                     check if bor prorata adjustments have already been craated...
     --                 )
     order by  -- do not change this sorting. It may effect rounding !!!!!!
          fi.billing_account_id, 
          fi.billing_element_md_id, 
          fi.fitem_type_id,
          fi.initial_amount,
          sign(fi.initial_amount)
     ;

begin

     -- OSPRODUCT-30832 - Start
     v_policy_trx_type         := pkg_os_object_io.fn_object_bv_get
                                        ( 
                                             in_session_id,
                                             in_transaction_id, 
                                             in_policy_trx_id,
                                             pkg_os_policy_transaction.gbv_PolicyTrxType 
                                        );     
                                        
     
     v_policy_trx_sub_type     := pkg_os_object_io.fn_object_bv_get
                                        ( 
                                             in_session_id,
                                             in_transaction_id, 
                                             in_policy_trx_id,
                                             pkg_os_policy_transaction.gbv_PolicyTrxSubType 
                                        );     
                                                            

     if   v_policy_trx_type        =    pkg_os_policy_transaction.gPolicyTrxType_Endorsement   and
          v_policy_trx_sub_type    =    pkg_db_billing_modify.gTrxSubType_changepayplan     
     then

          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Commission adjustment is not required for Change payment plan transaction.' 
                    || ' Policy Trx ID: - ' || in_policy_trx_id
                    || ' Policy Trx Type ID: - ' || v_policy_trx_type
                    || ' Policy Trx Sub Type ID: - ' || v_policy_trx_sub_type
               );
          end if;
          
          return; 
     
     end if;
	 
	      -- OSPRODUCT-30832 - End

	 
	 
     -- Create Billing batch
     begin
          v_FiTrxSet_of_pasTrx_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                         in_session_id,
                                         in_transaction_id,
                                         in_policy_trx_id,
                                         pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                     );

          v_billing_account_id := pkg_os_object.fn_object_parent_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_FiTrxSet_of_pasTrx_id
                                  );

          pkg_os_object.sp_object_create
          (
              in_session_id,
              in_transaction_id,
              pkg_db_object.gObjType_BillingAccountTrxSet,
              v_billing_account_id,
              v_billing_batch_id
          );

          v_bv_table.delete;

          v_bv_table(pkg_db_object.gbv_FITrxSet_BatchType      ).business_variable_value := genum_Payables_Earning_Adjstm;               
          v_bv_table(pkg_db_object.gbv_FITrxSet_CreatedbyBatch ).business_variable_value := v_FiTrxSet_of_pasTrx_id;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_batch_id,
               v_bv_table
          );  

          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......... Created BOR Billing Batch of type Payables Earning Adjustment: ' || v_billing_batch_id ||
                    ', xRefFiTrxSetCreatedBy: '||v_FiTrxSet_of_pasTrx_id ||
                    ' for billing acount ' || v_billing_account_id
               );
          end if;
          
          --OSPRODUCT-12721_1
          --Call to Document Processing
          pkg_db_object.sp_billing_doc_processing
          (
               in_session_id,
               in_transaction_id,
               v_billing_batch_id,    
               v_action_outcome_id
          );
     end;          
     -- /Create Billing batch

     -- Create Credit and Debit Billing transactions
     for c_btrx in (
                      select pkg_db_object.gFITrxType_Cr_Generate  as btrx_type from dual where v_billing_credit_trx_id is null
                      union
                      select pkg_db_object.gFITrxType_Dr_Generate  as btrx_type from dual where v_billing_debit_trx_id  is null
                   )
     loop                                                   
          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billing_batch_id,
               out_fitransaction_id            =>  v_billing_tmp_trx_id,
               in_fitrx_type                   =>  c_btrx.btrx_type,
               in_fitrx_ref_associatedpolicy   =>  v_policy_id,
               in_fitrx_ref_associatedpoltrx   =>  null,             -- This xReft should be NULL. There is no PAS trx / STATs for this billing trx.
               in_fitrx_ref_actionpolicy       =>  v_policy_id,
               in_fitrx_ref_actionpoltrx       =>  null              -- in_policy_trx_id  Cx/Rw. Do we need it ?????????
          );

          v_bv_table.delete;

          v_bv_table ( pkg_db_object.gbv_FITrx_RefBillingAccount ).business_variable_value := v_billing_account_id;
          v_bv_table ( pkg_db_object.gbv_FITrx_EffectiveDate     ).business_variable_value := to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
          v_bv_table ( pkg_db_object.gbv_FITrx_PostedDate        ).business_variable_value := to_char(v_current_date, pkg_os_constant.dragondateformatdefault); -- FITransaction - Date - Date Posted
          v_bv_table ( 32244046                                  ).business_variable_value := 1; -- FITransaction - List - Indicator to mark whether GLs are created

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_tmp_trx_id,
               v_bv_table
          );

          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......... Created BOR '||case when c_btrx.btrx_type  = pkg_db_object.gFITrxType_Cr_Generate 
                                                    then 'Credit'
                                                    else 'Debit'
                                               end
                    ||' Generation Billing Transaction: ' || v_billing_tmp_trx_id
               );
          end if;

          if  c_btrx.btrx_type  = pkg_db_object.gFITrxType_Cr_Generate
          then
               v_billing_credit_trx_id := v_billing_tmp_trx_id;
          else
               v_billing_debit_trx_id  := v_billing_tmp_trx_id;
               --
               -- Set current transaction for Billing Batch
               --
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_batch_id,
                    pkg_db_object.gbv_BillAccTrxSet_CurrTrx,
                    v_billing_tmp_trx_id
               );                                        
          end if;

          -- Update datamarts for Billing Transactions
          --
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_tmp_trx_id, v_datamart_tf);     

          v_billing_tmp_trx_id := null;

     end loop;                                             
     -- /Create Credit and Debit Billing transactions

     for c in c_cmsn_fitems (
                              p_policy_trx_id  => in_policy_trx_id
                            )
     loop       
          -- Rounding 
          if  -- initializatin
             not v_rollup_rounding_table.EXISTS(c.fi_rollup_idx)
          then
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Rounding. Initialization. Group index ' || c.fi_rollup_idx
                    );                    
               end if;
               -- This should be a roolup for rounded pro-rata amounts
               v_rollup_rounding_table(c.fi_rollup_idx).amnt_rounded_total := v_sign * round(
                                                                                               c.fi_rollup_initial * in_bor_prorata_factor,  
                                                                                               v_rounding_precision
                                                                                             );
                                                                                             
               v_rollup_rounding_table(c.fi_rollup_idx).amnt_left := v_rollup_rounding_table(c.fi_rollup_idx).amnt_rounded_total;     
               
               v_rollup_rounding_table(c.fi_rollup_idx).amnt_collected  := 0;
               
               v_rollup_rounding_table(c.fi_rollup_idx).items_count     := c.fi_rollup_count;
               
               v_rollup_rounding_table(c.fi_rollup_idx).items_processed := 0;
               
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.............. .. amnt_rounded_total=' || v_rollup_rounding_table(c.fi_rollup_idx).amnt_rounded_total ||
                         '------.. amnt_left=' || v_rollup_rounding_table(c.fi_rollup_idx).amnt_left
                    );
               end if;
          end if;
          
          -- get rounded pro-rata amount for inidividual fitem
          v_initial_amount_prorata := v_sign *  --round 
                                                trunc ( 
                                                        c.initial_amount * in_bor_prorata_factor,  
                                                        v_rounding_precision
                                                      );
                                                      
          v_rollup_rounding_table(c.fi_rollup_idx).amnt_left := v_rollup_rounding_table(c.fi_rollup_idx).amnt_left - v_initial_amount_prorata;
          
          v_rollup_rounding_table(c.fi_rollup_idx).items_processed := v_rollup_rounding_table(c.fi_rollup_idx).items_processed + 1;
          
          if v_session_control.gLogging_Full
          then               
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......rounding .. amnt_rounded_total=' || v_rollup_rounding_table(c.fi_rollup_idx).amnt_rounded_total ||
                    '------.. amnt_left=' || v_rollup_rounding_table(c.fi_rollup_idx).amnt_left ||
                    '------.. v_initial_amount_prorata='||v_initial_amount_prorata ||
                    '. Items total/processed ' || v_rollup_rounding_table(c.fi_rollup_idx).items_count || '/' || v_rollup_rounding_table(c.fi_rollup_idx).items_processed
               );
          end if;
                              
          -- if this is the last fitem in the group, add the reminder to get in sync with amnt_rounded_total for this group. 
          -- Thus we will avoid rounding issue
          --
          if v_rollup_rounding_table(c.fi_rollup_idx).items_count = v_rollup_rounding_table(c.fi_rollup_idx).items_processed
          then
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.........................adjustment for v_initial_amount_prorata='||v_rollup_rounding_table(c.fi_rollup_idx).amnt_left
                    );
               end if;
               
               v_initial_amount_prorata := v_initial_amount_prorata + v_rollup_rounding_table(c.fi_rollup_idx).amnt_left;
          end if;
          
          v_rollup_rounding_table(c.fi_rollup_idx).amnt_collected := v_rollup_rounding_table(c.fi_rollup_idx).amnt_collected + v_initial_amount_prorata ;
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.............. .. ...... adjusted v_initial_amount_prorata='||v_initial_amount_prorata ||
                    '------.. amnt_collected='||v_rollup_rounding_table(c.fi_rollup_idx).amnt_collected
               );
          end if;
          
          -- / Rounding
          
          -- Create fitems
          --               
          --v_initial_amount_prorata := v_sign * c.initial_amount * in_bor_prorata_factor;

          if c.fitem_type_id = pkg_db_object.gFItem_Credit
          then
               v_fi_credit_trx_amount := v_fi_credit_trx_amount + v_initial_amount_prorata;
               v_billing_Cr_De_trx_id := v_billing_credit_trx_id;
          else
               v_fi_debit_trx_amount  := v_fi_debit_trx_amount + v_initial_amount_prorata;
               v_billing_Cr_De_trx_id := v_billing_debit_trx_id;
          end if;

          pkg_os_object_copy.sp_object_copy
          (
               in_session_id,
               in_transaction_id,
               in_from_object_id             => c.fitem_id,
               in_to_parent_id               => c.billing_account_id,
               in_excluded_types             => v_object_copy_excluded_types,
               in_included_types             => v_object_copy_included_types,
               io_object_map                 => v_object_copy_list,
               io_counter                    => v_object_copy_counter,
               out_object_id                 => v_new_fitem_id,
               in_reset_utemplate            => 'F', -- in        char default 'F',
               in_recursive_copy_tf          => 'F', -- in        char default 'T',
               in_bv_copy                    => 'T'  --in        char default 'T',
               -- in_object_state_id            in        object.object_state_id%type default null,
               -- in_exclude_deleted_objects_tf in        boolean default  true,
               -- in_resolve_references         in        boolean default  false,
               -- in_persist_template_tf        in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
          );
                              
          --
          -- Create FIChange of type CREATE for the adhoc fitem
          --
          pkg_db_object.sp_fichange_create
          (
               in_session_id,
               in_transaction_id,
               in_parent_fitransaction_id     =>  v_billing_Cr_De_trx_id,
               out_fichange_id                =>  v_new_fichange_create_id,
               in_fichange_action             =>  pkg_db_object.gfichange_create,
               in_fichange_action_delta       =>  v_initial_amount_prorata,
               in_fichange_ref_fitem          =>  v_new_fitem_id,
               in_fichange_sum_include        =>  pkg_db_object.gfichange_yes,
               in_fichange_process_date       =>  to_char(v_current_date, pkg_os_constant.dragondateformatdefault ),
               in_fichange_ref_pol            =>  c.policy_id,
               in_fichange_belongs_to         =>  v_billing_Cr_De_trx_id
          );

          v_bv_table.delete;             

          -- BVs
          --
          v_bv_table(210151                                   ).business_variable_value    := to_char(v_current_date, pkg_os_constant.dragondateformatdefault); -- Creation date
          v_bv_table(pkg_db_object.gbv_FItemRefCreatorFiChange).business_variable_value    := v_new_fichange_create_id;

          v_bv_table(pkg_db_object.gbv_FItem_Earning_Status    ).business_variable_value   :=  pkg_db_object.gfitem_unearned;           
          -- OSPRODUCT-15900
          v_bv_table(pkg_db_object.gbv_FItem_Earning_Date    ).business_variable_value     :=  null;
          -- OSPRODUCT-15900
          v_bv_table(pkg_db_object.gbv_fitem_unearned_amount   ).business_variable_value   :=  v_initial_amount_prorata;
          v_bv_table(pkg_db_object.gbv_fitem_earned_amount     ).business_variable_value   :=  0;
          v_bv_table(pkg_db_object.gbv_fitem_paid_amount       ).business_variable_value   :=  0;   
          --
          -- xRefereces
          --
          v_bv_table(pkg_db_object.gbv_FItem_RefAssWithFItrx   ).business_variable_value   :=   v_billing_Cr_De_trx_id;
          --                                                                                                
          -- v_bv_table(pkg_db_object.gbv_FItem_RefPolicyTrx      ).business_variable_value   :=   null;      -- KD. Try....
          v_bv_table(pkg_db_object.gbv_Current_recon_batch_id  ).business_variable_value   :=   null;
          v_bv_table(pkg_db_object.gbv_Related_recon_batch_id  ).business_variable_value   :=   null;
          --
          -- Unlink the disbursement Batch if there is any
          v_bv_table(gbv_FItem_associatedDisbBatch             ).business_variable_value   :=   null;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_fitem_id,
               v_bv_table
          ); 

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_fichange_create_id, v_datamart_tf);
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_fitem_id,           v_datamart_tf);
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.............. Cloned '||c.debit_credit||' fitem '||c.fitem_id ||' >>> new fitem '|| v_new_fitem_id ||  
                    '. initial amount old : new '||c.initial_amount||' : '|| round(v_initial_amount_prorata,6) ||
                    '. Billing account '|| c.billing_account_id
               );
          end if;
     end loop;

     -- Do BVsets for Billing Transactions, datamart update
     for c_btrx in (
                      select v_billing_credit_trx_id as fi_trx_id, v_fi_credit_trx_amount  as fi_trx_amount from  dual
                      union
                      select v_billing_debit_trx_id,               v_fi_debit_trx_amount                    from  dual
                   )
     loop                                                   
          v_bv_table.delete;

          v_bv_table( pkg_db_billing.gbv_fitransaction_amount  ).business_variable_value := c_btrx.fi_trx_amount;
          v_bv_table( pkg_os_constant_bv.gbv_GenObjObjectState ).business_variable_value := pkg_db_object.gfitrxstatus_processed;
/* 
         v_bv_table( pkg_db_object.gbv_FITrx_AccntingPeriod   ).business_variable_value := pkg_db_functions.fn_get_fitransaction_acct_prd
                                                                                            (
                                                                                                 in_session_id,
                                                                                                 in_transaction_id,
                                                                                                 pkg_os_object_io.fn_object_bv_get
                                                                                                 (
                                                                                                      in_session_id,
                                                                                                      in_transaction_id,
                                                                                                      v_FiTrxSet_of_pasTrx_id, -- FiTrxSet of in_policy_trx_id
                                                                                                      pkg_db_object.gbv_BillAccTrxSet_CurrTrx
                                                                                                 )
                                                                                            );
*/ -- This is giving as exception , the bv get on v_FiTrxSet_of_pasTrx_id  pkg_db_object.gbv_BillAccTrxSet_CurrTrx is giving null so commenting it out fo rnow 

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               c_btrx.fi_trx_id,
               v_bv_table
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, c_btrx.fi_trx_id , v_datamart_tf);

     end loop;

     -- Do BVsets for Billing Batch , datamart update
     v_bv_table.delete;

     v_bv_table( pkg_db_object.gbv_FITrxSet_TotalAmount     ).business_variable_value := v_fi_debit_trx_amount;
     v_bv_table( pkg_db_object.gbv_BillAccTrxSet_ScrtyStatus).business_variable_value := 3;
     v_bv_table( pkg_db_object.gbv_FITrxSet_ExternalBatchId ).business_variable_value := 'Batch'||to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
     v_bv_table( pkg_db_object.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,gbv_UserSession_UserName_Path) ;
     v_bv_table( pkg_db_object.gbv_FITrxSet_EntryType       ).business_variable_value := pkg_db_object.gBatchEntryMethod_System;
     v_bv_table( pkg_db_object.gbv_FITrxSet_DatePosted      ).business_variable_value := to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
     v_bv_table( pkg_os_constant_bv.gbv_GenObjObjectState   ).business_variable_value := pkg_db_object.gBatchStatus_Processed;
     v_bv_table( pkg_db_object.gbv_BillAccTrxSet_ProcessDate).business_variable_value := to_char(v_current_date, pkg_os_constant.dragondateformatdefault);

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_billing_batch_id,
          v_bv_table
     );

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_batch_id      , v_datamart_tf);

end sp_prorata_adj_bor_cmsn;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_syncup_inv_bor_rw
--
--  %USAGE
--    Call after creating all financials AND adjustments (credit apply for premium and adjustments for commissions) for BORed policy, including roll fwd PNBTs.
--    Invoked from PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy.
--
--  %ALGORITHM
--    Compare all installments from Original and BORed policies. To comperizon of fitems metadata level (split by Credit/Debit and billing element MD ID).
--    Get in sync :
--       1)  Policy Term Installment objects
--              BV 31212946 PolTermInstlmnt_invoiced
--       2)  Fitems
--              The core of the logic is the c_inv_syncup cursor that compares 'invoicing info' for installemtn + fitem Type (Credit / Debit) + billing element MD ID
--              The following attributes from dragon_fitems is getting comperd and synced up
--                         fitem_billed_tf
--                         fitem_billed_date
--                         aging_status_id
--                         aging_status_change_date
--                         aging_status_days_id
--       3)  NID
--              BV 31194146 PolicyTermNID
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_policy_id_cx                Policy ID of the Original policy
--  %PARAM    in_policy_id_rw                Policy ID of the BORed policy
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*procedure sp_syncup_inv_bor_rw
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_policy_id_cx               in   object.object_id%type,
     in_policy_id_rw               in   object.object_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_inv_bor_rw';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_bv_table                         pkg_os_object_io.t_bv_table;
     
     type t_ids                         is table of object.object_id%type index by binary_integer;
     v_t_fitem_id                       t_ids;

     v_datamart_tf                      char(1)      := 'T';

     v_orig_policy_BASIS_trx_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_policy_id_cx,        -- original polcy
                                                                      --
                                                                      -- !!!!! This will fail in case Renewal or CX/RW was proceses for origianl policy BEFORE a BOR request!!!!
                                                                      --
                                                                      gbv_xREF_Pol_NBTrx      -- Policy - _Reference_New Business Transaction
                                                                 );
                                                                 
     v_BORed_policy_BASIS_trx_id        object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_policy_id_rw,        -- BORed polcy
                                                                      gbv_xREF_Pol_NBTrx      -- Policy - _Reference_New Business Transaction
                                                                 );
     
     v_orig_policy_term_id              object.object_id%type := pkg_db_functions.fn_get_policy_current_term(in_session_id, in_transaction_id, in_policy_id_cx);
     v_BORed_policy_term_id             object.object_id%type := pkg_db_functions.fn_get_policy_current_term(in_session_id, in_transaction_id, in_policy_id_rw);
     
     v_NID                              object_bv_value.business_variable_value%type;

     cursor c_BORed_fitems
            (
                 p_BORed_policy_id         number,
                 p_BORed_policy_trx_id     number,
                 p_installment_number      number,
                 p_fitem_type_id           number,
                 p_billing_element_md_id   number
            )
     is
     select
          fi.fitem_id
     From
          dragon_fitem fi
     where
          fi.policy_id =             p_BORed_policy_id
     and
          fi.policy_transaction_id = p_BORed_policy_trx_id
     and
          fi.installment_number =    p_installment_number
     and
          fi.fitem_type_id =         p_fitem_type_id
     and
          fi.billing_element_md_id = p_billing_element_md_id
     ;
     
     cursor c_inv_syncup
            (
                 p_orig_policy_id            number,
                 p_BORed_policy_id           number,
                 p_org_policy_BASIS_trx_id   number,
                 p_BORed_policy_BASIS_trx_id number
            )
     is
     with inst_data as 
     (
     select 
          inst.policy_id,
          inst.installment_number,
          max(inst.INVOICE_FLAG) as inst_inv_flag,
          max(inst.installment_id) as inst_ID,
          --
          fi.fitem_type_id, -- 246 Credit / 146 Debit
          fi.billing_element_md_id,
          --
          fi.policy_transaction_id,
          fi.policy_trx_type,   -- needed for debugging only
          fi.policy_transaction_id  as policy_trx_join,
          --
          max(fi.sub_category)             as fi_subcat,     -- !!!! Performance killer. Retrieveing this field levels up query cost significantly. Needed only for user firendly system log. Can be commented out
          --
          max(fi.fitem_billed_tf)          as fi_billed_tf,                   -- BV_ID 29998046 FItem.Is this Fitem Billed?           | pkg_db_object.gbv_FItem_Billed_TF
          max(fi.fitem_billed_date)        as fi_billed_date,                 -- BV_ID 29998146 FItem.Billed Date                     | pkg_db_object.gbv_FItem_Billed_Date
          max(fi.aging_status_id)          as fi_aging_status_id,             -- BV_ID 30750546                                       | pkg_db_object.gbv_Fitem_AgingStatus
          max(fi.aging_status_change_date) as fi_aging_status_change_date,    -- BV_ID 30750646 FItem.Aging Status Change Date        | pkg_db_object.gbv_FItemAgingStatusChangeDt
          max(fi.aging_status_days_id)     as fi_aging_status_days_id         -- BV_ID 32572240 FItem.Aging Status-Days               |               gbv_FItemAgingStatusDaysID          
     from
          dragon_scheduled_installment inst  --on (inst.policy_term_id = ptrx.policy_term_id)
     join
          dragon_fitem                 fi    on (fi.installment_id= inst.installment_id)
     group by 
          inst.policy_id,
          fi.policy_transaction_id,
          fi.policy_trx_type,  -- needed for debugging only
          inst.installment_number,
          fi.fitem_type_id, -- 246 Credit / 146 Debit
          fi.billing_element_md_id
     )
     select 
          inst_data_cx.* 
          ,'***' x,
          case when row_number()over(partition by inst_data_cx.policy_id, 
                                                  inst_data_cx.installment_number, 
                                                  inst_data_rw.rw_policy_id, 
                                                  inst_data_rw.rw_installment_number 
                                                  --   NOTE:  we should not add policy_transaction_id here.... 
                                                  --   this is a an installemnt level and should not be split by Policy TRX
                                     order by --1
                                              inst_data_rw.rw_fitem_type_id,
                                              inst_data_rw.rw_billing_element_md_id
                                     ) =1
               then case when inst_data_cx.policy_id is not null 
                              and  
                              inst_data_rw.rw_policy_id is not null
                         then 'Y'
                         else ''
                    end 
               else ''
          end isnt_upd,     
          case when
                   ( 
                     inst_data_cx.policy_id is not null 
                     and  
                     inst_data_rw.rw_policy_id is not null
                   )
               and 
                   (
                       nvl(inst_data_cx.fi_billed_tf               ,1)               <> nvl(inst_data_rw.rw_fi_billed_tf               ,1)             
                    or nvl(inst_data_cx.fi_billed_date             ,trunc(sysdate))  <> nvl(inst_data_rw.rw_fi_billed_date             ,trunc(sysdate))
                    or nvl(inst_data_cx.fi_aging_status_id         ,1)               <> nvl(inst_data_rw.rw_fi_aging_status_id         ,1)             
                    or nvl(inst_data_cx.fi_aging_status_change_date,trunc(sysdate))  <> nvl(inst_data_rw.rw_fi_aging_status_change_date,trunc(sysdate))
                    or nvl(inst_data_cx.fi_aging_status_days_id    ,1)               <> nvl(inst_data_rw.rw_fi_aging_status_days_id    ,1)             
                   )
               then
                    'Y'
               else
                    ''
          end fitem_upd,
          inst_data_rw.* 
     from
          (
            select * from inst_data where policy_id =  p_orig_policy_id
          ) inst_data_cx
     full outer join
          (
            select
                policy_id                     as rw_policy_id                   ,
                installment_number            as rw_installment_number          ,
                inst_inv_flag                 as rw_inst_inv_flag               ,
                inst_ID                       as rw_inst_ID                     ,
                fitem_type_id                 as rw_fitem_type_id               ,
                billing_element_md_id         as rw_billing_element_md_id       ,
                -- -------------------------------------------------------------
                policy_transaction_id         as rw_policy_transaction_id       ,
                policy_trx_type               as rw_policy_trx_type             ,   -- needed for debugging only
                --
                case when policy_transaction_id = p_BORed_policy_BASIS_trx_id
                     then
                          -- We are inside a block for BORed policy. if an Fitem belongs to an RW transacsion (aka NB for BORed policy),
                          -- we have to find corresponing  NB or Renewal (or it may even be a RW processd before BOR) trnasaction.
                          --
                          p_org_policy_BASIS_trx_id  -- original polcy trx ID
                     else
                          -- We are inside a block for BORed policy. if Fitem belongs to any PNBT (rather than Rweri transacsion (aka NB for BORed policy)
                          -- we have to find corresponing  NB or Renewal (or it may even RW bfore BOR) trnasaction.
                          --
                          to_number(pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         policy_transaction_id,
                                         gbv_xREF_PolTrx_RollFWDTrx
                                    ))
                end                           as rw_policy_trx_join             ,
                -- -------------------------------------------------------------
                fi_subcat                     as rw_fi_subcat                   ,
                fi_billed_tf                  as rw_fi_billed_tf                , 
                fi_billed_date                as rw_fi_billed_date              , 
                fi_aging_status_id            as rw_fi_aging_status_id          , 
                fi_aging_status_change_date   as rw_fi_aging_status_change_date , 
                fi_aging_status_days_id       as rw_fi_aging_status_days_id     
           from 
                inst_data 
           where 
                policy_id =  p_BORed_policy_id
          ) inst_data_rw   
     on   (
            inst_data_cx.policy_trx_join       =  inst_data_rw.rw_policy_trx_join            -- transaction ID
            and
            inst_data_cx.installment_number    = inst_data_rw.rw_installment_number          -- installment number
            and
            inst_data_cx.billing_element_md_id = inst_data_rw.rw_billing_element_md_id       -- billing element ID
            and
            inst_data_cx.fitem_type_id         = inst_data_rw.rw_fitem_type_id               -- Debit / Credit
          )      
     --
     -- Sorting kills performance !!!!!
     -- We can get rid of this, really
     --
     order by 
          rw_installment_number      nulls last,
          rw_policy_transaction_id,
          rw_fitem_type_id,
          rw_billing_element_md_id
     ;
     
     --UTPRODUCT-354
     v_BillPlan_ID                           object.object_id%type; 
     io_datamart_tf                          char(1); 
begin
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Getting in sync invoices for policies CX:' || in_policy_id_cx || ' and RW:' || in_policy_id_rw
          );
     end if;
     
     for c in c_inv_syncup
              (
                   p_orig_policy_id             => in_policy_id_cx,
                   p_BORed_policy_id            => in_policy_id_rw,
                   p_org_policy_BASIS_trx_id    => v_orig_policy_BASIS_trx_id,
                   p_BORed_policy_BASIS_trx_id  => v_BORed_policy_BASIS_trx_id
              )
     loop
          -- Get in sync Polcy Term Installment
          --
          if c.isnt_upd = 'Y'
          then
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    c.rw_inst_ID,                   -- set value for RW policy
                    gbv_PolTermInstlmnt_invoiced,
                    c.inst_inv_flag                 -- take value from CX policy
               );
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, c.rw_inst_ID, v_datamart_tf);
               
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... updated PolcyTermInstallment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'): installment Invoiced Flag=' ||c.inst_inv_flag
                    );
               end if;
               
          end if; -- / Get in sync Polcy Term Installment
          
          -- Get in sync Fitems
          --
          if c.fitem_upd = 'Y'
          then
               -- Syncing up...
               --
               begin 
                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Updating a group of Fitems for installment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'),'||
                              case when c.rw_fitem_type_id = 246
                                   then 'Credit'
                                   else 'Debit'
                              end || ', ' ||c.rw_fi_subcat ||
                              ', billing element MD ID:' || c.rw_billing_element_md_id                         
                         );
                    end if;
                         
                    for c_fi in c_BORed_fitems
                                (
                                    p_BORed_policy_id       => c.rw_policy_id,
                                    p_BORed_policy_trx_id   => c.rw_policy_transaction_id,
                                    p_installment_number    => c.rw_installment_number,                                    
                                    p_fitem_type_id         => c.rw_fitem_type_id,
                                    p_billing_element_md_id => c.rw_billing_element_md_id
                                )
                    loop
                         v_bv_table.delete;
                         
                         v_bv_table(pkg_db_object.gbv_FItem_Billed_TF         ).business_variable_value :=         c.fi_billed_tf;
                         v_bv_table(pkg_db_object.gbv_FItem_Billed_Date       ).business_variable_value := to_char(c.fi_billed_date, pkg_os_constant.dragondateformatdefault);
                         v_bv_table(pkg_db_object.gbv_Fitem_AgingStatus       ).business_variable_value :=         c.fi_aging_status_id;
                         v_bv_table(pkg_db_object.gbv_FItemAgingStatusChangeDt).business_variable_value := to_char(c.fi_aging_status_change_date, pkg_os_constant.dragondateformatdefault);
                         v_bv_table(              gbv_FItemAgingStatusDaysID  ).business_variable_value :=         c.fi_aging_status_days_id;
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              c_fi.fitem_id,
                              v_bv_table
                         );
                         
                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '......... updated Fitem ' ||c_fi.fitem_id ||
                                   ', Billed_TF='          ||         c.fi_billed_tf ||
                                   ', Billed_Date='        || to_char(c.fi_billed_date, pkg_os_constant.dragondateformatdefault) ||
                                   ', AgingStatus='        ||         c.fi_aging_status_id  ||
                                   ', AgingStatusChangeDt='|| to_char(c.fi_aging_status_change_date, pkg_os_constant.dragondateformatdefault) ||
                                   ', AgingStatusDaysID='  ||         c.fi_aging_status_days_id
                              );
                         end if;
                         
                         -- We should not update datamart here as we are inside a cursor that reads this fitem from the datamart
                         -- Fitem datamart will be updated later in a separate loop
                         --
                         -- pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, c_fi.fitem_id, v_datamart_tf);
                         --
                         v_t_fitem_id(v_t_fitem_id.count+1) := c_fi.fitem_id;
                         
                    end loop;
               end;
               -- / Syncing up...
          else
               -- All in sync OR SKIPPING to sync
               --
               if c.policy_id is not null
                  and
                  c.rw_policy_id is not null
               then
                    -- All in sync
                    --
                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... All in sync: there is no need to update a group of Fitems for installment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'),'||
                              case when c.rw_fitem_type_id = 246
                                   then 'Credit'
                                   else 'Debit'
                              end || ', ' ||c.rw_fi_subcat ||
                              ', billing element MD ID:' || c.rw_billing_element_md_id                         
                         );
                    end if;
               else
                    -- SKIPPING to sync a group of Fitems
                    --
                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... SKIPPING to sync a group of Fitems for installment #'||nvl(c.installment_number, c.rw_installment_number) || '('||nvl(c.inst_ID,c.rw_inst_ID)||'),'||
                              case when nvl(c.fitem_type_id, c.rw_fitem_type_id) = 246
                                   then 'Credit'
                                   else 'Debit'
                              end || ', ' ||nvl(c.fi_subcat, c.rw_fi_subcat) ||
                              ', billing element MD ID:' || nvl(c.billing_element_md_id, c.rw_billing_element_md_id) ||'. '||
                              case when c.policy_id is null
                                   then 'CX'
                                   else 'RW'
                              end || ' policy cannot be matched.'
                         );
                    end if;
               end if;   -- / SKIPPING to sync a group of Fitems          
          end if; -- / All in sync OR SKIPPING to sync
     end loop;
     
     --  refreshing datamart for Fitem
     --
     for i in 1..v_t_fitem_id.count
     loop
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... refreshing datamart for Fitem ' || v_t_fitem_id(i)
               );
          end if;
          
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_t_fitem_id(i), v_datamart_tf); 
          
     end loop;
     
     -- Sync NID
     begin
          v_NID := pkg_os_object_io.fn_object_bv_path_get
                   (
                        in_session_id,
                        in_transaction_id,
                        v_orig_policy_term_id,
                        gbv_PolicyTermNID
                   );
                   
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_BORed_policy_term_id,
               gbv_PolicyTermNID,
               v_NID
          );
          
          --UTPRODUCT-354 Start 
          v_BillPlan_ID := pkg_os_object_io.fn_object_bv_path_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_BORed_policy_term_id,
                                  gbv_Ref_Pref_BillPlan_id    
                             );     
                             
          --
          -- Update DataMart for the BillPlan when NID for term changes. 
          if v_BillPlan_ID is not null
          then 
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BillPlan_ID, io_datamart_tf);
          end if; 
          --UTPRODUCT-354 End 
                         
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_policy_term_id, v_datamart_tf); 
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Syncing up the NID for CX policy term:' || v_orig_policy_term_id ||
                    'and RW policy term:' || v_BORed_policy_term_id ||
                    ', NID = ' || v_NID
               );
          end if;
     end;
     -- / Sync NID
     
end sp_syncup_inv_bor_rw;
*/

procedure sp_syncup_inv_bor_rw
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_policy_id_cx               in   object.object_id%type,
     in_policy_id_rw               in   object.object_id%type,
     in_process_date               in   date default null -- OSPRODUCT-11738
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_inv_bor_rw';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_bv_table                         pkg_os_object_io.t_bv_table;

     type t_ids                         is table of object.object_id%type index by binary_integer;
     v_t_fitem_id                       t_ids;

     v_datamart_tf                      char(1)      := 'T';

     v_orig_policy_BASIS_trx_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_policy_id_cx,        -- original polcy
                                                                      --
                                                                      -- !!!!! This will fail in case Renewal or CX/RW was proceses for origianl policy BEFORE a BOR request!!!!
                                                                      --
                                                                      gbv_xREF_Pol_NBTrx      -- Policy - _Reference_New Business Transaction
                                                                 );

     v_BORed_policy_BASIS_trx_id        object.object_id%type := pkg_os_object_io.fn_object_bv_get
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_policy_id_rw,        -- BORed polcy
                                                                      gbv_xREF_Pol_NBTrx      -- Policy - _Reference_New Business Transaction
                                                                 );

     v_orig_policy_term_id              object.object_id%type := pkg_db_functions.fn_get_policy_current_term(in_session_id, in_transaction_id, in_policy_id_cx);
     v_BORed_policy_term_id             object.object_id%type := pkg_db_functions.fn_get_policy_current_term(in_session_id, in_transaction_id, in_policy_id_rw);

     v_NID                              object_bv_value.business_variable_value%type;
	 v_bord_NID                         object_bv_value.business_variable_value%type;

     v_inst_process_date                date;
     v_inst_related_invoice             object.object_id%type;
     -- OSPRODUCT-23609
     v_customer_id_rw                   object.object_id%type;
     v_customer_id_cx                   object.object_id%type;
     v_bord_ba_id                       object.object_id%type;
     -- end OSPRODUCT-23609

     cursor c_BORed_fitems
            (
                 p_BORed_policy_id         number,
                 p_BORed_policy_trx_id     number,
                 p_installment_number      number,
                 p_fitem_type_id           number,
                 p_billing_element_md_id   number,
                 p_BORed_BillingAcc_id     number -- OSPRODUCT-23609
            )
     is
     select
          fi.fitem_id
     From
          dragon_fitem fi
     where
          fi.policy_id =             p_BORed_policy_id
     and
          fi.policy_transaction_id = p_BORed_policy_trx_id
     and
          fi.installment_number =    p_installment_number
     and
          fi.fitem_type_id =         p_fitem_type_id
     and
          fi.billing_element_md_id = p_billing_element_md_id
     and
          fi.billing_account_id    = p_BORed_BillingAcc_id
     ;

     cursor c_inv_syncup
            (
                 p_orig_policy_id            number,
                 p_BORed_policy_id           number,
                 p_org_policy_BASIS_trx_id   number,
                 p_BORed_policy_BASIS_trx_id number
            )
     is
     with inst_data as
     (
     select
          inst.policy_id,
          inst.installment_number,
          max(inst.INVOICE_FLAG) as inst_inv_flag,
          max(inst.installment_id) as inst_ID,
          --
          fi.fitem_type_id, -- 246 Credit / 146 Debit
          fi.billing_element_md_id,
          fi.billing_account_id,
          --
          fi.policy_transaction_id,
          fi.policy_trx_type,   -- needed for debugging only
          fi.policy_transaction_id  as policy_trx_join,
          --
          max(fi.sub_category)             as fi_subcat,     -- !!!! Performance killer. Retrieveing this field levels up query cost significantly. Needed only for user firendly system log. Can be commented out
          --
          max(fi.fitem_billed_tf)          as fi_billed_tf,                   -- BV_ID 29998046 FItem.Is this Fitem Billed?           | pkg_db_object.gbv_FItem_Billed_TF
          max(fi.fitem_billed_date)        as fi_billed_date,                 -- BV_ID 29998146 FItem.Billed Date                     | pkg_db_object.gbv_FItem_Billed_Date
          max(fi.aging_status_id)          as fi_aging_status_id,             -- BV_ID 30750546                                       | pkg_db_object.gbv_Fitem_AgingStatus
          max(fi.aging_status_change_date) as fi_aging_status_change_date,    -- BV_ID 30750646 FItem.Aging Status Change Date        | pkg_db_object.gbv_FItemAgingStatusChangeDt
          max(fi.aging_status_days_id)     as fi_aging_status_days_id         -- BV_ID 32572240 FItem.Aging Status-Days               |               gbv_FItemAgingStatusDaysID
     from
          dragon_scheduled_installment inst  --on (inst.policy_term_id = ptrx.policy_term_id)
     join
          dragon_fitem                 fi    on (fi.installment_id = inst.installment_id)
     group by
          inst.policy_id,
          fi.billing_account_id,
          fi.policy_transaction_id,
          fi.policy_trx_type,  -- needed for debugging only
          inst.installment_number,
          fi.fitem_type_id, -- 246 Credit / 146 Debit
          fi.billing_element_md_id
     )
     select
          inst_data_cx.*
          ,'***' x,
          case when row_number()over(partition by inst_data_cx.policy_id,
                                                  inst_data_cx.installment_number,
                                                  inst_data_cx.billing_account_id,
                                                  inst_data_rw.rw_policy_id,
                                                  inst_data_rw.rw_installment_number,
                                                  inst_data_rw.rw_billing_account_id
                                                  --   NOTE:  we should not add policy_transaction_id here....
                                                  --   this is a an installemnt level and should not be split by Policy TRX
                                     order by --1
                                              inst_data_rw.rw_fitem_type_id,
                                              inst_data_rw.rw_billing_element_md_id
                                     ) =1
               then case when inst_data_cx.policy_id is not null
                              and
                              inst_data_rw.rw_policy_id is not null
                         then 'Y'
                         else ''
                    end
               else ''
          end isnt_upd,
          case when
                   (
                     inst_data_cx.policy_id is not null
                     and
                     inst_data_rw.rw_policy_id is not null
                   )
               and
                   (
                       nvl(inst_data_cx.fi_billed_tf               ,1)               <> nvl(inst_data_rw.rw_fi_billed_tf               ,1)
                    or nvl(inst_data_cx.fi_billed_date             ,trunc(sysdate))  <> nvl(inst_data_rw.rw_fi_billed_date             ,trunc(sysdate))
                    or nvl(inst_data_cx.fi_aging_status_id         ,1)               <> nvl(inst_data_rw.rw_fi_aging_status_id         ,1)
                    or nvl(inst_data_cx.fi_aging_status_change_date,trunc(sysdate))  <> nvl(inst_data_rw.rw_fi_aging_status_change_date,trunc(sysdate))
                    or nvl(inst_data_cx.fi_aging_status_days_id    ,1)               <> nvl(inst_data_rw.rw_fi_aging_status_days_id    ,1)
                   )
               then
                    'Y'
               else
                    ''
          end fitem_upd,
          inst_data_rw.*
     from
          (
            select * from inst_data where policy_id =  p_orig_policy_id
          ) inst_data_cx
     full outer join
          (
            select
                policy_id                     as rw_policy_id                   ,
                installment_number            as rw_installment_number          ,
                inst_inv_flag                 as rw_inst_inv_flag               ,
                inst_ID                       as rw_inst_ID                     ,
                fitem_type_id                 as rw_fitem_type_id               ,
                billing_element_md_id         as rw_billing_element_md_id       ,
                billing_account_id            as rw_billing_account_id          ,
                -- -------------------------------------------------------------
                policy_transaction_id         as rw_policy_transaction_id       ,
                policy_trx_type               as rw_policy_trx_type             ,   -- needed for debugging only
                --
                /*case when policy_transaction_id = p_BORed_policy_BASIS_trx_id
                     then
                          -- We are inside a block for BORed policy. if an Fitem belongs to an RW transacsion (aka NB for BORed policy),
                          -- we have to find corresponing  NB or Renewal (or it may even be a RW processd before BOR) trnasaction.
                          --
                          p_org_policy_BASIS_trx_id  -- original polcy trx ID
                     else
                          -- We are inside a block for BORed policy. if Fitem belongs to any PNBT (rather than Rweri transacsion (aka NB for BORed policy)
                          -- we have to find corresponing  NB or Renewal (or it may even RW bfore BOR) trnasaction.
                          --
                          to_number(pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         policy_transaction_id,
                                         gbv_xREF_PolTrx_RollFWDTrx
                                    ))
                end                           as rw_policy_trx_join             ,*/
                -- OSPRODUCT-20600
                fn_get_pt_from_bor_policy(in_session_id,in_transaction_id,policy_transaction_id) as rw_policy_trx_join,
                -- OSPRODUCT-23609
                fn_get_ba_in_bor_customer(in_session_id,in_transaction_id,v_customer_id_cx, billing_account_id) as rw_billingacc_trx_join,
                -- -------------------------------------------------------------
                fi_subcat                     as rw_fi_subcat                   ,
                fi_billed_tf                  as rw_fi_billed_tf                ,
                fi_billed_date                as rw_fi_billed_date              ,
                fi_aging_status_id            as rw_fi_aging_status_id          ,
                fi_aging_status_change_date   as rw_fi_aging_status_change_date ,
                fi_aging_status_days_id       as rw_fi_aging_status_days_id
           from
                inst_data
           where
                policy_id =  p_BORed_policy_id
          ) inst_data_rw
     on   (
            inst_data_cx.policy_trx_join       =  inst_data_rw.rw_policy_trx_join            -- transaction ID
            and
            inst_data_cx.installment_number    = inst_data_rw.rw_installment_number          -- installment number
            and
            inst_data_cx.billing_element_md_id = inst_data_rw.rw_billing_element_md_id       -- billing element ID
            and
            inst_data_cx.fitem_type_id         = inst_data_rw.rw_fitem_type_id               -- Debit / Credit
            and
            inst_data_cx.billing_account_id    = inst_data_rw.rw_billingacc_trx_join -- OSPRODUCT-23609
          )
     --
     -- Sorting kills performance !!!!!
     -- We can get rid of this, really
     --
     order by
          rw_installment_number      nulls last,
          rw_policy_transaction_id,
          rw_fitem_type_id,
          rw_billing_element_md_id
     ;

     --UTPRODUCT-354
     v_BillPlan_ID                           object.object_id%type;
     io_datamart_tf                          char(1);
begin
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Getting in sync invoices for policies CX:' || in_policy_id_cx || ' and RW:' || in_policy_id_rw
          );
     end if;
     
     -- OSPRODUCT-23609     
     v_customer_id_cx := pkg_os_object.fn_object_parent_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_id_cx
                              );
                         
     v_customer_id_rw := pkg_os_object.fn_object_parent_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_id_rw
                         );
                         
     -- end OSPRODUCT-23609

     for c in c_inv_syncup
         (
              p_orig_policy_id             => in_policy_id_cx,
              p_BORed_policy_id            => in_policy_id_rw,
              p_org_policy_BASIS_trx_id    => v_orig_policy_BASIS_trx_id,
              p_BORed_policy_BASIS_trx_id  => v_BORed_policy_BASIS_trx_id
         )
     loop

          -- Get in sync Polcy Term Installment
          --
          -- get the installment process date
          -- OSPRODUCT-11738
          v_inst_related_invoice := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         c.inst_ID,
                                         31213146 -- related invoice
                                    );

          v_inst_process_date := to_date ( pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_inst_related_invoice,
                                                pkg_db_stmt.gbv_FITrxSetDatePosted --- updated to posted date29707246 -- related invoice -- OSPRODUCT-22771
                                           ), pkg_os_constant.DragonDateFormatDefault);

          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Installment related invoice batch: ' || v_inst_related_invoice ||
                    '.. Installment Process date: '          || v_inst_process_date    ||
                    '.. Old Installment ID: ' || c.inst_ID ||
                    '.. installment upd: '    || c.isnt_upd ||
                    '.. fitem update: '       || c.fitem_upd ||
                    '.. Process Date: '       || in_process_date ||
                    '.. Old customer ID: '    || v_customer_id_cx ||
                    '.. New customer ID: '    || v_customer_id_rw
               );
          end if;
          
          -- OSPRODUCT-11738
          if in_process_date is null
             or
             v_inst_process_date is null -- OSPRODUCT-30081
             or
             (
                  in_process_date is not null
                  and
                  v_inst_process_date < in_process_date
             )
          then
               
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Old Installment ID: ' || c.inst_ID ||
                         '.. installment upd: '    || c.isnt_upd ||
                         '.. fitem update: '       || c.fitem_upd
                    );
               end if;
               
               -- OSPRODUCT-30081
               if in_process_date is null
                  or
                  (in_process_date is not null and v_inst_process_date is not null) --OSPRODUCT-29175  
                  or
                  (in_process_date is not null and v_inst_process_date is null and c.fi_billed_date < in_process_date)
               then
               -- end OSPRODUCT-30081

                    if c.isnt_upd = 'Y'
                    then
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              c.rw_inst_ID,                   -- set value for RW policy
                              gbv_PolTermInstlmnt_invoiced,
                              c.inst_inv_flag                 -- take value from CX policy
                         );

                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, c.rw_inst_ID, v_datamart_tf);

                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... updated PolcyTermInstallment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'): installment Invoiced Flag=' ||c.inst_inv_flag
                              );
                         end if;

                    end if; -- / Get in sync Polcy Term Installment

                    -- Get in sync Fitems
                    --
                    if c.fitem_upd = 'Y'
                    then
                         -- Syncing up...
                         --
                         begin
                              
                              -- OSPRODUCT-23609
                              v_bord_ba_id := pkg_db_bor.fn_get_ba_in_bor_customer
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_customer_id_rw,
                                                   c.billing_account_id
                                              );
                              if v_session_control.gLogging_Full
                              then
                                   sp_log
                                   --pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... Updating a group of Fitems for installment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'),'||
                                        case when c.rw_fitem_type_id = 246
                                             then 'Credit'
                                             else 'Debit'
                                        end || ', ' ||c.rw_fi_subcat ||
                                        ', billing element MD ID:' || c.rw_billing_element_md_id ||
                                        ', billing account ID: ' || c.billing_account_id ||
                                        ', new billing acc id: ' || c.rw_billing_account_id ||
                                        ', Bord BA under new customer: ' || v_bord_ba_id
                                        
                                   );
                              end if;                         

                              for c_fi in c_BORed_fitems
                                          (
                                              p_BORed_policy_id       => c.rw_policy_id,
                                              p_BORed_policy_trx_id   => c.rw_policy_transaction_id,
                                              p_installment_number    => c.rw_installment_number,
                                              p_fitem_type_id         => c.rw_fitem_type_id,
                                              p_billing_element_md_id => c.rw_billing_element_md_id,
                                              p_BORed_BillingAcc_id   => v_bord_ba_id -- OSPRODUCT-23609
                                          )
                              loop
                                   v_bv_table.delete;

                                   v_bv_table(pkg_db_object.gbv_FItem_Billed_TF         ).business_variable_value :=         c.fi_billed_tf;
                                   v_bv_table(pkg_db_object.gbv_FItem_Billed_Date       ).business_variable_value := to_char(c.fi_billed_date, pkg_os_constant.dragondateformatdefault);
                                   v_bv_table(pkg_db_object.gbv_Fitem_AgingStatus       ).business_variable_value :=         c.fi_aging_status_id;
                                   v_bv_table(pkg_db_object.gbv_FItemAgingStatusChangeDt).business_variable_value := to_char(c.fi_aging_status_change_date, pkg_os_constant.dragondateformatdefault);
                                   v_bv_table(              gbv_FItemAgingStatusDaysID  ).business_variable_value :=         c.fi_aging_status_days_id;

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        c_fi.fitem_id,
                                        v_bv_table
                                   );

                                   if v_session_control.gLogging_Full
                                   then
                                        sp_log
                                        --pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '......... updated Fitem ' ||c_fi.fitem_id ||
                                             ', Billed_TF='          ||         c.fi_billed_tf ||
                                             ', Billed_Date='        || to_char(c.fi_billed_date, pkg_os_constant.dragondateformatdefault) ||
                                             ', AgingStatus='        ||         c.fi_aging_status_id  ||
                                             ', AgingStatusChangeDt='|| to_char(c.fi_aging_status_change_date, pkg_os_constant.dragondateformatdefault) ||
                                             ', AgingStatusDaysID='  ||         c.fi_aging_status_days_id ||
                                             ', BillingAccountID='   || c.rw_billing_account_id
                                        );
                                   end if;

                                   -- We should not update datamart here as we are inside a cursor that reads this fitem from the datamart
                                   -- Fitem datamart will be updated later in a separate loop
                                   --
                                   -- pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, c_fi.fitem_id, v_datamart_tf);
                                   --
                                   v_t_fitem_id(v_t_fitem_id.count+1) := c_fi.fitem_id;

                              end loop;
                         end;
                         -- / Syncing up...
                    else
                         -- All in sync OR SKIPPING to sync
                         --
                         if c.policy_id is not null
                            and
                            c.rw_policy_id is not null
                         then
                              -- All in sync
                              --
                              if v_session_control.gLogging_Full
                              then
                                   sp_log
                                   --pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... All in sync: there is no need to update a group of Fitems for installment #' ||c.rw_installment_number || '('||c.rw_inst_ID||'),'||
                                        case when c.rw_fitem_type_id = 246
                                             then 'Credit'
                                             else 'Debit'
                                        end || ', ' ||c.rw_fi_subcat ||
                                        ', billing element MD ID:' || c.rw_billing_element_md_id
                                   );
                              end if;
                         else
                              -- SKIPPING to sync a group of Fitems
                              --
                              if v_session_control.gLogging_Full
                              then
                                   sp_log
                                   --pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... SKIPPING to sync a group of Fitems for installment #'||nvl(c.installment_number, c.rw_installment_number) || '('||nvl(c.inst_ID,c.rw_inst_ID)||'),'||
                                        case when nvl(c.fitem_type_id, c.rw_fitem_type_id) = 246
                                             then 'Credit'
                                             else 'Debit'
                                        end || ', ' ||nvl(c.fi_subcat, c.rw_fi_subcat) ||
                                        ', billing element MD ID:' || nvl(c.billing_element_md_id, c.rw_billing_element_md_id) ||'. '||
                                        case when c.policy_id is null
                                             then 'CX'
                                             else 'RW'
                                        end || ' policy cannot be matched.'
                                   );
                              end if;
                         end if;   -- / SKIPPING to sync a group of Fitems
                    end if; -- / All in sync OR SKIPPING to sync
                    
               -- OSPRODUCT-30081
               end if;

          end if;
          
     end loop;

     --  refreshing datamart for Fitem
     --
     for i in 1..v_t_fitem_id.count
     loop
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... refreshing datamart for Fitem ' || v_t_fitem_id(i)
               );
          end if;

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_t_fitem_id(i), v_datamart_tf);

     end loop;

     -- Sync NID
     -- OSPRODUCT-16824
     declare          
          v_term_list    pkg_db_stmt_policy.t_policy_term_list;
          v_nid_upd_tf   char(1) := 'F';
          v_term_payer   object.object_id%type;
     begin
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
        
                    in_transaction_id,            v_procedure_name,
                    '... Syncing up the NID for CX policy term:' || v_orig_policy_term_id ||
                    'and RW policy term:' || v_BORed_policy_term_id
               );
          end if;
          
          if v_BORed_policy_term_id is not null
          then
               v_term_list(v_BORed_policy_term_id) := in_policy_id_rw;
          end if;
          
          /*v_NID := pkg_os_object_io.fn_object_bv_path_get
                   (
                        in_session_id,
                        in_transaction_id,
                        v_orig_policy_term_id,
                        gbv_PolicyTermNID
                   );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_BORed_policy_term_id,
               gbv_PolicyTermNID,
               v_NID
          );*/
          
          --UTPRODUCT-354 Start
          for term_payer in (select policy_term_payer_id from dragon_policy_term_payer p where policy_term_id = v_BORed_policy_term_id) loop
               
               v_nid_upd_tf := 'T';
               
               v_term_payer := term_payer.policy_term_payer_id;
               
               v_BillPlan_ID := pkg_os_object_io.fn_object_bv_path_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_term_payer,
                                       32574148
                                  );
               
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Payer ID: ' || v_term_payer ||
                         '.. NID update flag?: ' || v_nid_upd_tf ||
                         '.. Bill Plan NID: ' || v_BillPlan_ID
                    );
               end if;
                                  
               pkg_db_stmt_policy.sp_term_next_invoice_date_set
               (
                  in_session_id,
                  in_transaction_id,
                  v_BillPlan_ID,
                  v_term_list     -- UTPRODUCT-4469
               );
               
          end loop;

          if v_nid_upd_tf = 'F' then
          
               v_BillPlan_ID := pkg_os_object_io.fn_object_bv_path_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_BORed_policy_term_id,
                                       gbv_Ref_Pref_BillPlan_id
                                  );
               
               pkg_db_stmt_policy.sp_term_next_invoice_date_set
               (
                  in_session_id,
                  in_transaction_id,
                  v_BillPlan_ID,
                  v_term_list     -- UTPRODUCT-4469
               );
               
               v_NID := pkg_os_object_io.fn_object_bv_path_get
                   (
                        in_session_id,
                        in_transaction_id,
                        v_orig_policy_term_id,
                        gbv_PolicyTermNID
                   );
                   
               v_bord_NID := pkg_os_object_io.fn_object_bv_path_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_BORed_policy_term_id,
                                  gbv_PolicyTermNID
                             );
                        
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Syncing up the NID for CX policy term:' || v_orig_policy_term_id ||
                         'and RW policy term:' || v_BORed_policy_term_id ||
                         ', NID = ' || v_NID || ', BOR NID: ' || v_bord_NID
                    );
               end if;
               
          end if;

          /*--
          -- Update DataMart for the BillPlan when NID for term changes.
          if v_BillPlan_ID is not null
          then
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BillPlan_ID, io_datamart_tf);
          end if;
          --UTPRODUCT-354 End*/

          --pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_policy_term_id, v_datamart_tf);
          
     end;
     -- end OSPRODUCT-16824
     -- / Sync NID

end sp_syncup_inv_bor_rw;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_bv_snapshot_create
--
--  %USAGE
--    Populates the io_obj_bv_value_snapshot
--
--    Invoked form sp_syncup_suspension_init / sp_syncup_late_process_init to get a snaphot of BV ID and BV values.
--
--
--  %ALGORITHM
--     Takes a pointer to a data set (meta data) that describes what business vairableS  should be backed up for a given object type.
--     This meta data is described in the f_refC_bv_list_late (for Late Process) and f_refC_bv_list_susp (for Suspensions).
--     The metadata  data set ultimately has a list of BV IDs that we need to back up for a particular object type for a particular case.
--     As of now, there are two cases: Late Process and Suspension  that are served by f_refC_bv_list_late and f_refC_bv_list_susp respectively
--     For ech BV from the data set
--       1. Do BV get from the in_source_object_id
--       2. Write Object Type, BV ID and BV value to the io_obj_bv_value_snapshot
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_source_object_id            source object ID for BV get
--  %PARAM    in_bv_list_refCur              a pointer to a data set formed by special functions (f_refC_bv_list_late and f_refC_bv_list_susp)
--  %PARAM    io_obj_bv_value_snapshot       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_bv_snapshot_create
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_source_object_id           in   object.object_id%type,
     in_bv_list_refCur             in   gType_bv_snapshot_refCur,
     io_obj_bv_value_snapshot    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_bv_snapshot_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_source_object_type_id            object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_source_object_id);
     
     v_bv_id                            number;
     v_bv_value                         object_bv_value.business_variable_value%type;
     
     v_row_count                        number;
     v_row_id                           number;
          
     v_system_log_output_offset         varchar2(20) := '......';
     
     c                                  gType_bv_snapshot_rec;

     procedure p_insert
     is
     begin
          io_obj_bv_value_snapshot.extend(1);                             
          io_obj_bv_value_snapshot(io_obj_bv_value_snapshot.LAST) := OBJECT_BV_VALUE_REC
                                                                     (
                                                                            object_id                 => in_source_object_id, -- number,
                                                                            business_variable_id      => v_bv_id,             -- number,
                                                                            transaction_id            => null,                -- number(38,0),
                                                                            object_type_id            => v_source_object_type_id, -- number(12,0),
                                                                            business_variable_value   => v_bv_value, -- varchar2(500 byte),
                                                                            --- this will be a rowID
                                                                            persistence_partition_id  => io_obj_bv_value_snapshot.LAST
                                                                     );
     end p_insert;
begin     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               v_system_log_output_offset ||
               '... Start BV Backup from a source object ' || in_source_object_id ||
               '. Object type '|| v_source_object_type_id
          );
     end if; 
          
     -- for c in gC_bv_list_late_susp ( v_source_object_type_id )
     loop
          FETCH in_bv_list_refCur INTO c;                    
          EXIT WHEN in_bv_list_refCur%NOTFOUND;
      
          v_bv_id    := c.bv_id;
          
          v_bv_value := pkg_os_object_io.fn_object_bv_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_source_object_id,
                             v_bv_id
                        );   
                          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    v_system_log_output_offset ||
                    '...... Backing up BV ID=' || v_bv_id || '('||c.bv_name||'), value=' || v_bv_value
               );
          end if;
          
          -- Processing as kind of 'MERGE' DML statement for the in-memory io_obj_bv_value_snapshot table
          --          
          select 
               count(1),
               max(persistence_partition_id) as row_id
          into
               v_row_count, 
               v_row_id
          from
               table(io_obj_bv_value_snapshot) t
          where
               t.object_id = in_source_object_id
          and
               t.business_variable_id = c.bv_id
          ;
          
          if v_row_count = 0   -- insert
          then
               p_insert();               
               
          elsif v_row_count = 1 -- update
          then
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         v_system_log_output_offset ||
                         '......... Updating existing record. ' ||
                         'Old vlaue='|| io_obj_bv_value_snapshot(v_row_id).business_variable_value||
                         ', New value='||v_bv_value
                    );
               end if;               
               
               -- Update
               --
               if io_obj_bv_value_snapshot.exists(v_row_id)
               then                   
                    io_obj_bv_value_snapshot(v_row_id).business_variable_value   := v_bv_value;
                    io_obj_bv_value_snapshot(v_row_id).object_type_id            := v_source_object_type_id;
               else 
                    -- This is hardly possible, but if the v_row_id is not correct, it may happen. 
                    --   Note: The v_row_id is manually supported table index (aka rowid in real table)
                    p_insert();            
               end if;
               
               -- Test
               -- p_insert();
               -- /Test
                              
          else  -- delete / insert
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         v_system_log_output_offset ||
                         '......... Deleting duplicates....'
                    );
               end if;
               
               -- Delete
               --
               for c_del in (
                              select                                    
                                    persistence_partition_id as row_id
                              from
                                   table(io_obj_bv_value_snapshot) t
                              where
                                   t.object_id = in_source_object_id
                              and
                                   t.business_variable_id = c.bv_id
                             )
               loop
                    io_obj_bv_value_snapshot.delete(c_del.row_id);
                    
                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              v_system_log_output_offset ||
                              '............ Deleted row_id ' || c_del.row_id
                         );
                    end if;
               end loop;
               
               -- Insert
               --
               p_insert();

               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         v_system_log_output_offset ||
                         '............ Added row_id ' || io_obj_bv_value_snapshot.LAST
                    );
               end if;
          end if;
          --
          -- /Processing as kind of 'MERGE' DML statement for the in-memory io_obj_bv_value_snapshot table
          
     end loop;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               v_system_log_output_offset ||
               '... Completed BV Backup.'
          );
     end if;
         
     -- print out the table
     --
     if 1=0
     then
          for c_print in (select                                    
                               object_id                 ,
                               business_variable_id      ,
                               transaction_id            ,
                               object_type_id            ,
                               business_variable_value   ,
                               persistence_partition_id  as row_id
                               --
                               ,row_number()over(order by persistence_partition_id) as rn
                          from
                               table(io_obj_bv_value_snapshot) t
                          order by 
                               rn
                         )
          loop
               if v_session_control.gLogging_Full
               then
                    if c_print.rn = 1
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              v_system_log_output_offset ||
                              '... io_obj_bv_value_snapshot :'
                         );
                    end if;
                    
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         v_system_log_output_offset ||
                         '......' ||
                         ' row_id'          ||'='|| c_print.row_id                 ||   
                         ', Object type'    ||'='|| c_print.object_type_id         ||
                         ', Object ID'      ||'='|| c_print.object_id              ||
                         ', BV ID'          ||'='|| c_print.business_variable_id   ||
                         ', BV value'       ||'='|| c_print.business_variable_value
                          --', transaction_id'    ||'='|| c_print.transaction_id                    
                    );
               end if;      
          end loop;
     end if; -- / print out the table
     
     if in_bv_list_refCur%ISOPEN
     then
          close in_bv_list_refCur;
     end if;
exception
     when others then     
          if in_bv_list_refCur%ISOPEN
          then
               close in_bv_list_refCur;
          end if;
          
          raise;
end sp_bv_snapshot_create;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_bv_snapshot_merge
--
--  %USAGE
--    The io_obj_bv_value_snapshot is getting populated - in sp_syncup_suspension_init / sp_syncup_late_process_init by sp_bv_snapshot_create.
--
--    The sp_bv_snapshot_merge is getting invoked from sp_syncup_late_process and sp_syncup_suspension
--
--  %ALGORITHM
--     Read rows (BV ID and BV value) from the io_obj_bv_value_snapshot for particular object type ( object type of the in_target_object_id)
--     and do a BV set for in_target_object_id.
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_target_object_id            target object ID for BV set
--  %PARAM    io_obj_bv_value_snapshot       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_bv_snapshot_merge
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,   
     in_target_object_id           in   object.object_id%type,
     io_obj_bv_value_snapshot      in   OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_bv_snapshot_merge';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_target_object_type_id            object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_target_object_id);
     
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)      := 'T';
     
     v_system_log_output_offset         varchar2(20) := '......';
     
     cursor c_bv_list
            (
                 p_object_type_id   number
            )
     is
     select
          s.object_id,
          s.object_type_id,
          s.business_variable_id     as bv_id,
          s.business_variable_value  as bv_value,
          bv.logical_data_type_id,
          bv.business_variable_calculation
          -- persistence_partition_id  as  row_id
     from
          table(io_obj_bv_value_snapshot) s ,
          business_variable bv
     where
          s.business_variable_id = bv.BUSINESS_VARIABLE_ID
          and  s.object_type_id = p_object_type_id
     ;

begin
   
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               v_system_log_output_offset ||
               '... Start BV merge to a target object '||in_target_object_id||'. Object type '|| v_target_object_type_id
          );
     end if; 
          
     v_bv_table.delete;
     
     for c in c_bv_list(
                            v_target_object_type_id
                        )
     loop
          
          if c.logical_data_type_id <>  pkg_os_constant.gTypeReferenceLookupValue
          then
               if c.business_variable_calculation is null
               then
                    v_bv_table(c.bv_id).business_variable_value := c.bv_value;

                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              v_system_log_output_offset ||
                              '...... merging from object '||c.object_id||': BV ID=' || c.bv_id || '('|| pkg_os_bv.fn_bv_name_get(c.bv_id) ||'), value=' || c.bv_value ||                    
                              '/old value='||pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_target_object_id,
                                                   c.bv_id
                                              )||'.'
                         );
                    end if;
               end if;
          end if;
     end loop;
     
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id,
          v_bv_table
     );
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               v_system_log_output_offset ||
               '... Completed BV merge. Number of BVs merged: ' ||v_bv_table.count ||'.'
          );
     end if;     
     
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_target_object_id , v_datamart_tf);
     
end sp_bv_snapshot_merge;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_get_policy_holder_ba
--
--  %USAGE
--      Local function to get the Policy Holder Billing Account ID for a given policy ID
--      Called from sp_syncup_late_process, sp_syncup_suspension
--
--  %ALGORITHM
--     Customer
--     ...Primary Entity
--     .....Billing Account
--     ...Policy (start point)
--     
--     Policy >>> 1. go UP to Customer >>> 2. go DOWN to Primary_Entity >>> 3. go DOWN to Billing Account
--
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_policy_holder_ba
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_policy_id                  in   number
)
return object.object_id%type
is
begin      
     -- Customer
     -- ...Primary Entity
     -- .....Billing Account
     -- ...Policy (start point)
     -- 
     -- Policy >>> 1. go UP to Customer >>> 2. go DOWN to Primary_Entity >>> 3. go DOWN to Billing Account
     --
     --
     return pkg_os_object_search.fn_object_11_child_get                   -- 3. go DOWN to Billing Account
            (
                  in_session_id,
                  in_transaction_id,
                  pkg_os_object_io.fn_object_bv_get                       -- 2. go DOWN to Primary_Entity
                  (
                       in_session_id,
                       in_transaction_id,
                       pkg_os_object_search.fn_object_get_parent_of_type  -- 1. go UP to Customer
                       (
                            in_session_id,
                            in_transaction_id,
                            in_policy_id,                                 -- START POINT : policy
                            pkg_os_constant.gObjType_Customer -- 1.
                       ),
                       pkg_db_multipayer.gbv_Customr_Ref_Primary_Entity -- 2.
                  ),
                  pkg_db_object.gObjType_BillingAccount -- 3.
             );                                                 
end fn_get_policy_holder_ba;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_syncup_late_process_init
--
--  %USAGE
--       There is a io_bv_backup_beforeBOR_t - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--       The io_bv_backup_beforeBOR_t is getting populated here - in the pkg_db_bor.sp_syncup_late_process_init. 
--       The pkg_db_bor.sp_syncup_late_process_init is called from PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy BEFORE a BOR request is processed.
--        
--  %ALGORITHM
--    Backing up BV values
--       Read BV values from the original policy objects (POLICY , POLICY TERM, BILLING ACCOUNT) and write them to the io_bv_backup_beforeBOR_t
--       The workhorse is pkg_db_bor.sp_bv_snapshot_create. It reads from its REF_CURSOR input parameter. The REF_CURSOR is getting
--       opened here by a dedicated function pkg_db_bor.f_refC_bv_list_late.
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_orig_policy_id              Policy ID of the Original policy
--  %PARAM    io_bv_backup_beforeBOR_t       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_syncup_late_process_init
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     io_bv_backup_beforeBOR_t    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_late_process_init';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_orig_policy_term_id              object.object_id%type := pkg_db_functions.fn_get_policy_current_term
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_orig_policy_id
                                                                 );
     v_orig_BA_id                       object.object_id%type := fn_get_policy_holder_ba
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_orig_policy_id
                                                                 );
begin
     --  24      -- policy
     --  2389401 -- PolicyTerm
     --  2365346 -- BillingAccount
     
     -- emtpy the container
     --
     io_bv_backup_beforeBOR_t.delete;
              
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Backing UP LATE PROCESS BV values for of Policy, PolicyTerm, BillingAccount for'||
               ' original policy ' || in_orig_policy_id ||
               ', original policy Term ' || v_orig_policy_term_id ||
               ', original policy holder Billing Account ' || v_orig_BA_id || 
               ' before processing a BOR request'
          );
     end if;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......  Backing UP POLICY level'
          );
     end if;
                    
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => in_orig_policy_id,
          in_bv_list_refCur        => f_refC_bv_list_late 
                                      (
                                          pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_orig_policy_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Backing UP POLICY TERM level'
          );
     end if;
     
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => v_orig_policy_term_id,
          in_bv_list_refCur        => f_refC_bv_list_late
                                      (
                                           pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_orig_policy_term_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );        
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Backing UP BILLING ACCOUNT level'
          );
     end if;
     
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => v_orig_BA_id,
          in_bv_list_refCur        => f_refC_bv_list_late
                                      (
                                           pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_orig_BA_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );

end sp_syncup_late_process_init;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_syncup_late_process
--
--  %USAGE
--       There is a io_bv_backup_beforeBOR_t - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--       The io_bv_backup_beforeBOR_t is getting populated by pkg_db_bor.sp_syncup_late_process_init. 
--       The pkg_db_bor.sp_syncup_late_process is called from PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy AFTER a BOR request is pocessed.
--        
--  %ALGORITHM
--    Syncing UP BV values
--       Read from io_bv_backup_beforeBOR_t and do a BV set for BORed policy objects (POLICY , POLICY TERM, BILLING ACCOUNT)
--       The sp_bv_snapshot_merge is a workhorse to do a BV set.
--
--    Syncing UP Late Process related objects:  
--     Policy
--     ...PolicyTrx(of type PendingCancellation)
--     ......PolPendCx_object
--     
--     1. Orig: Get Current PolicyPendigCencelation object (xRef 30792946 from Policy) : v_orig_PolPendCx_object_id
--     2. Orig: Get Current PolicyPendigCencelation Transaction as a parent of object v_orig_PolPendCx_object_id : v_orig_PolPendCx_TRX_id
--     3. BORed: Clone Orig_policyPendingCx transaction, place it under the BORed policy : v_BORed_PolPendCx_TRX_id
--     4. BORed: as part the step 3, a BORed policy PendingCancellation object was created (we cloned PendingCx trx recursively). 
--               Get it as a child(type 2537412) of v_BORed_PolPendCx_TRX_id: v_BORed_PolPendCx_object_id 
--     5. BORed: set xRef : BORed_polcy.30792946 to v_BORed_PolPendCx_object_id
--     6. BORed: Fix references for newly created Pending Cancellaion TRX
--  
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_orig_policy_id              Policy ID of the Original policy
--  %PARAM    in_BORed_policy_id             Policy ID of the BORed policy
--  %PARAM    io_bv_backup_beforeBOR_t       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_syncup_late_process
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     in_BORed_policy_id            in   object.object_id%type,
     io_bv_backup_beforeBOR_t    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_late_process';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_orig_policy_term_id              object.object_id%type;
     v_bored_policy_term_id             object.object_id%type;
     
     v_orig_BA_id                       object.object_id%type;
     v_BORed_BA_id                      object.object_id%type;     

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;     
               
     v_orig_PolPendCx_TRX_id            object.object_id%type;
     v_BORed_PolPendCx_TRX_id           object.object_id%type;
     
     v_orig_PolPendCx_object_id         object.object_id%type;
     v_BORed_PolPendCx_object_id        object.object_id%type;
     
     v_BORed_policy_RW_trx_id           object.object_id%type;
     v_BORed_policy_RW_PTP_id           object.object_id%type;
     
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)      := 'T';
                                         
begin
     --  24      -- policy
     --  2389401 -- PolicyTerm
     --  2365346 -- BillingAccount
     
     v_orig_policy_term_id := pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_orig_policy_id,
                                   pkg_db_multipayer.gbv_Policy_Ref_NBTrx||'.'||pkg_os_constant_bv.gbv_RefPolcyTrxnBelongsTo
                              );
                              
     v_BORed_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_BORed_policy_id
                               );
                               
     v_orig_BA_id   := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_orig_policy_id
                       );     
     
     v_BORed_BA_id  := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_BORed_policy_id
                       );     
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Syncing UP LATE PROCESS for'||
               ' original policy ' || in_orig_policy_id || ' - BORed policy '|| in_BORed_policy_id ||
               ', original policy Term ' || v_orig_policy_term_id || ' - BORed policy Term '|| v_BORed_policy_term_id ||
               ', original policy holder Billing Account ' || v_orig_BA_id || ' - BORed policy holder Billing Account '|| v_BORed_BA_id || '.'
          );
     end if;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY level'
          );
     end if;

     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => in_BORed_policy_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY TERM level'
          );
     end if;
     
     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_policy_term_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );    
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP BILLING ACCOUNT level'
          );
     end if;
     
     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_BA_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );  
         
     /*
     create transactions
     Late Process :
      PolicyPendingCancellation object. We need it if PolicyTerm is in Pending Cancel status
     */     
     begin -- Clone PolicyPendingCancellation object
          v_orig_PolPendCx_object_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_orig_policy_id,
                                             pkg_db_late_process.gbv_Ref_CurrPolPendCancel
                                        );
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Original policy Pending CX object ID: ' || v_orig_PolPendCx_object_id
               );
          end if;
          
          if v_orig_PolPendCx_object_id is not null 
          then
               v_orig_PolPendCx_TRX_id := pkg_os_object_search.fn_object_get_parent_of_type
                                          (
                                               in_session_id,
                                               in_transaction_id,
                                               v_orig_PolPendCx_object_id,
                                               pkg_os_constant.gobjType_PolicyTransaction
                                          );
                                          
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......... Original policy Pending CX Transaction ID: ' || v_orig_PolPendCx_TRX_id ||
                         '. Cloning this trnasaciton for BORed policy....'
                    );
               end if;
               
               pkg_os_object_copy.sp_object_copy
               (
                    in_session_id,
                    in_transaction_id,
                    in_from_object_id             => v_orig_PolPendCx_TRX_id,
                    in_to_parent_id               => in_BORed_policy_id,
                    in_excluded_types             => v_object_copy_excluded_types,
                    in_included_types             => v_object_copy_included_types,
                    io_object_map                 => v_object_copy_list,
                    io_counter                    => v_object_copy_counter,
                    out_object_id                 => v_BORed_PolPendCx_TRX_id,
                    in_reset_utemplate            => 'F', -- in        char default 'F',
                    in_recursive_copy_tf          => 'T', -- in        char default 'T',
                    in_bv_copy                    => 'T' -- in        char default 'T',
                    --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                    --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                    --in_resolve_references         => FALSE  -- in        boolean default  false,
                    -- in_persist_template_tf        in        char default 'F'
               );
               
               v_BORed_PolPendCx_object_id := pkg_os_object_search.fn_object_11_child_get
                                              (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_BORed_PolPendCx_TRX_id,
                                                    gobjType_PolicyPendingCancel
                                               );
                                               
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_BORed_policy_id,
                    pkg_db_late_process.gbv_Ref_CurrPolPendCancel,
                    v_BORed_PolPendCx_object_id
               );
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_BORed_policy_id , v_datamart_tf);
               
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......... Cloning completed. BORed policy Pending CX Transaction ID: ' || v_BORed_PolPendCx_TRX_id ||
                         ', Pending CX Object ID: ' || v_BORed_PolPendCx_object_id
                    );
               end if;
               
               -- Fixing references for newly created Pending Cancellaion TRX
               
               v_BORed_policy_RW_trx_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                               in_session_id,
                                               in_transaction_id,
                                               in_BORed_policy_id,
                                               gbv_xREF_Pol_NBTrx --  In case of BORed policy points to first the Rewrite transaction
                                           );
                                          
               v_BORed_policy_RW_PTP_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                               in_session_id,
                                               in_transaction_id,
                                               v_BORed_policy_RW_trx_id,
                                               gbv_xREF_PolTrx_Coverages
                                           );          
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......... Fixing references for newly created Pending Cancellaion TRX' || v_BORed_PolPendCx_TRX_id ||
                         '. RW Trx ID ' || v_BORed_policy_RW_trx_id ||
                         ', RW PTP ID ' || v_BORed_policy_RW_PTP_id ||
                         ', RW Term ' || v_BORed_policy_term_id
                    );
               end if;
               
               v_bv_table.delete;
                         
               v_bv_table(gbv_xREF_PolTrx_Coverages).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
               v_bv_table(gbv_xREF_PolTrx_BasisCvrg).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
               v_bv_table(gbv_xREF_PolTrx_BasisTRX ).business_variable_value := v_BORed_policy_RW_trx_id;  -- RW Trx 
               v_bv_table(gbv_xREF_PolTrx_PolTerm  ).business_variable_value := v_BORed_policy_term_id;    -- Policy Term
               
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_BORed_PolPendCx_TRX_id,
                    v_bv_table
               );                                                         
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_PolPendCx_TRX_id , v_datamart_tf);
               
          end if;
     end; -- / Clone PolicyPendingCancellation object
          
end sp_syncup_late_process;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_syncup_suspension_init
--
--  %USAGE
--       There is a io_bv_backup_beforeBOR_t - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--       The io_bv_backup_beforeBOR_t is getting populated here - in the pkg_db_bor.sp_syncup_suspension_init. 
--       The pkg_db_bor.sp_syncup_suspension_init is called from PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy BEFORE a BOR request is processed.
--        
--  %ALGORITHM
--    Backing up BV values
--       Read BV values from the original policy objects (POLICY , POLICY TERM, BILLING ACCOUNT) and write them to the io_bv_backup_beforeBOR_t
--       The workhorse is pkg_db_bor.sp_bv_snapshot_create. It reads from its REF_CURSOR input parameter. The REF_CURSOR is getting
--       opened here by a dedicated function pkg_db_bor.f_refC_bv_list_susp.
--
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_orig_policy_id              Policy ID of the Original policy
--  %PARAM    io_bv_backup_beforeBOR_t       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_syncup_suspension_init
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     io_bv_backup_beforeBOR_t    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_suspension_init';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_orig_policy_term_id              object.object_id%type := pkg_db_functions.fn_get_policy_current_term
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_orig_policy_id
                                                                 );
     v_orig_BA_id                       object.object_id%type := fn_get_policy_holder_ba
                                                                 (
                                                                      in_session_id,
                                                                      in_transaction_id,
                                                                      in_orig_policy_id
                                                                 );
begin
     --  24      -- policy
     --  2389401 -- PolicyTerm
     --  2365346 -- BillingAccount
     
     -- emtpy the container
     --
     io_bv_backup_beforeBOR_t.delete;
              
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Backing UP Suspension BV values for of Policy, PolicyTerm, BillingAccount for'||
               ' original policy ' || in_orig_policy_id ||
               ', original policy Term ' || v_orig_policy_term_id ||
               ', original policy holder Billing Account ' || v_orig_BA_id || 
               ' before processing a BOR request'
          );
     end if;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '......  Backing UP POLICY level'
          );
     end if;
                    
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => in_orig_policy_id,
          in_bv_list_refCur        => f_refC_bv_list_susp 
                                      (
                                          pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_orig_policy_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Backing UP POLICY TERM level'
          );
     end if;
     
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => v_orig_policy_term_id,
          in_bv_list_refCur        => f_refC_bv_list_susp
                                      (
                                           pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_orig_policy_term_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );        
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Backing UP BILLING ACCOUNT level'
          );
     end if;
     
     sp_bv_snapshot_create
     (
          in_session_id,
          in_transaction_id,
          in_source_object_id      => v_orig_BA_id,
          in_bv_list_refCur        => f_refC_bv_list_susp
                                      (
                                           pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_orig_BA_id)
                                      ),
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );

end sp_syncup_suspension_init;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_syncup_suspension
--
--  %USAGE
--       There is a io_bv_backup_beforeBOR_t - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--       The io_bv_backup_beforeBOR_t is getting populated by pkg_db_bor.sp_syncup_suspension_init. 
--       The pkg_db_bor.sp_syncup_suspension is called from PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy AFTER a BOR request is pocessed.
--        
--  %ALGORITHM
--    Syncing UP BV values
--       Read from io_bv_backup_beforeBOR_t and do a BV set for BORed policy objects (POLICY , POLICY TERM, BILLING ACCOUNT)
--       The sp_bv_snapshot_merge is a workhorse to do a BV set.
--
--    Syncing UP suspension related objects:  
--
--     Policy(24)
--     ...PolicySuspObject (object type ID 3193346 Suspension)
--            xRef to Policy Term : 32233346 PolicySuspension - xRef - _Reference_Current Suspended Term
--     ...PolicyTerm(2389401)
--            xRef to PolicySuspObject  : 32251446 PolicyTerm - xRef - _Reference_Term Current Suspension
--     ...PolicyTRX(629) (Trx type Billing Suspension(6046) : 212030 PolicyTransaction - List - Transaction Type )
--             xRef to PolicySuspObject (the same as PolicyTerm) : 32251946 PolicyTransaction - xRef - _Reference_Associated Suspension
--
--     1. Orig: Get Orig Policy Term
--     2. Orig: Get Current Suspension (xRef 32251446) : Orig_policy_Susp
--     3. BORed: Clone Orig_policy_Susp, place it undre the BORed policy : BORed_polcy_Susp
--     4. BORed: set xRef : BORed_polcy_Susp.32233346  to BORed_policy_term
--     5. BORed: set xRef : BORed_policy_term.32251446 to BORed_polcy_Susp
--     6. Orig: Find Policy Trx of type Billing Suspension(6046).
--        6.1  It must have xRef 32251946 pointing to Orig_policy_Susp (step 2) : Orig_policyTrx_BillingSusp
--     7. BORed: Clone Orig_policyTrx_BillingSusp, place under BORed policy : BORed_policyTrx_BillingSusp
--     8. BORed: set xRef BORed_policyTrx_BillingSusp.32251946 to BORed_polcy_Susp            
--  
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_orig_policy_id              Policy ID of the Original policy
--  %PARAM    in_BORed_policy_id             Policy ID of the BORed policy
--  %PARAM    io_bv_backup_beforeBOR_t       container - a snapshot - that keeps BV values of original policy objects as of BEFORE BOR processing.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- COMMENTING SP_SYNCUP_SUSPENSION as part of osproduct-2013
--and re-writing it with new logic where we can have multiple suspension objects.

/*procedure sp_syncup_suspension
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     in_BORed_policy_id            in   object.object_id%type,
     io_bv_backup_beforeBOR_t    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_suspension';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_orig_policy_term_id              object.object_id%type;
     v_bored_policy_term_id             object.object_id%type;
     
     v_orig_BA_id                       object.object_id%type;
     v_BORed_BA_id                      object.object_id%type;     

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;     
               
     v_orig_PolBillSusp_TRX_id          object.object_id%type;
     v_BORed_PolBillSusp_TRX_id         object.object_id%type;
     
     v_orig_PolSusp_object_id           object.object_id%type;
     v_BORed_PolSusp_object_id          object.object_id%type;

     v_BORed_policy_RW_trx_id           object.object_id%type;
     v_BORed_policy_RW_PTP_id           object.object_id%type;
     
     v_child_search_list                pkg_os_object.t_object_list;
     v_list_idx                         binary_integer;
     
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)      := 'T';
                                         
begin
     --  24      -- policy
     --  2389401 -- PolicyTerm
     --  2365346 -- BillingAccount
     
     v_orig_policy_term_id := pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_orig_policy_id,
                                   pkg_db_multipayer.gbv_Policy_Ref_NBTrx||'.'||pkg_os_constant_bv.gbv_RefPolcyTrxnBelongsTo
                              );
                              
     v_BORed_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_BORed_policy_id
                               );
                               
     v_orig_BA_id   := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_orig_policy_id
                       );     
     
     v_BORed_BA_id  := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_BORed_policy_id
                       );     
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Syncing UP Suspension for'||
               ' original policy ' || in_orig_policy_id || ' - BORed policy '|| in_BORed_policy_id ||
               ', original policy Term ' || v_orig_policy_term_id || ' - BORed policy Term '|| v_BORed_policy_term_id ||
               ', original policy holder Billing Account ' || v_orig_BA_id || ' - BORed policy holder Billing Account '|| v_BORed_BA_id || '.'
          );
     end if;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY level'
          );
     end if;

     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => in_BORed_policy_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY TERM level'
          );
     end if;
     
     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_policy_term_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );    
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP BILLING ACCOUNT level'
          );
     end if;
     
     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_BA_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );  
     
     /*
     Suspension :

         Clone / Create  Suspension Transaction   
           PAS Suspension object 
           and 
           Billing Suspension object
           Important: there is a (with coma separated value) that lists suspened activities.
           
      There is only one   Suspension object in Acitve status (ie only one Acitve suspension is allowed)        
      
      Example:
         Suspension object1
            CPP            
         If we need to add another suspension, we have to resume current active suspension and create a new one.         
         Resume Suspension object1         
         Create new         
         Suspension object2. Active
            CPP (from old supspension), CX (new susspension)
     ================================================================================================================       
        Policy(24)
        ...PolicySuspObject (object type ID 3193346 Suspension)
               xRef to Policy Term : 32233346 PolicySuspension - xReference - _Reference_Current Suspended Term
           
        ...PolicyTerm(2389401)
               xRef to PolicySuspObject  : 32251446 PolicyTerm - xReference - _Reference_Term Current Suspension
           
        ...PolicyTRX(629) (Trx type Billing Suspension(6046) : 212030 PolicyTransaction - List - Transaction Type )
                xRef to PolicySuspObject (the same as PolicyTerm) : 32251946 PolicyTransaction - xReference - _Reference_Associated Suspension
                
        Syncing UP:  
        1. Orig: Get Orig Policy Term
        2. Orig: Get Current Suspension (xRef 32251446) : Orig_policy_Susp
        3. BORed: Clone Orig_policy_Susp, place it undre the BORed policy : BORed_polcy_Susp
        4. BORed: set xRef : BORed_polcy_Susp.32233346  to BORed_policy_term
        5. BORed: set xRef : BORed_policy_term.32251446 to BORed_polcy_Susp
        6. Orig: Find Policy Trx of type Billing Suspension(6046).
           6.1  It must have xRef 32251946 pointing to Orig_policy_Susp (step 2) : Orig_policyTrx_BillingSusp
        7. BORed: Clone Orig_policyTrx_BillingSusp, place under BORed policy : BORed_policyTrx_BillingSusp
        8. BORed: set xRef BORed_policyTrx_BillingSusp.32251946 to BORed_polcy_Susp            
     ================================================================================================================
     */

  /*   begin 
          --1. Orig: Get Orig Policy Term : v_orig_policy_term_id
          --
          --2. Orig: Get Current Suspension (xRef 32251446) : Orig_policy_Susp
          --
          v_orig_PolSusp_object_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_orig_policy_term_id,
                                           pkg_db_suspension.gbv_PolicyTerm_RefCurrSusp
                                      );
          
          if v_orig_PolSusp_object_id is not null
          then
               begin
                    --3. BORed: Clone Orig_policy_Susp, place it undre the BORed policy : BORed_polcy_Susp
                    --
                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Original policy Suspension object ID: ' || v_orig_PolSusp_object_id || '. Cloning this object for BORed policy....'
                         );
                    end if;
                    
                    pkg_os_object_copy.sp_object_copy
                    (
                         in_session_id,
                         in_transaction_id,
                         in_from_object_id             => v_orig_PolSusp_object_id,               -- *
                         in_to_parent_id               => in_BORed_policy_id,                     -- *
                         in_excluded_types             => v_object_copy_excluded_types,
                         in_included_types             => v_object_copy_included_types,
                         io_object_map                 => v_object_copy_list,
                         io_counter                    => v_object_copy_counter,
                         out_object_id                 => v_BORed_PolSusp_object_id,              -- *
                         in_reset_utemplate            => 'F', -- in        char default 'F',
                         in_recursive_copy_tf          => 'T', -- in        char default 'T',
                         in_bv_copy                    => 'T' -- in        char default 'T',
                         --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                         --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                         --in_resolve_references         => FALSE  -- in        boolean default  false,
                         -- in_persist_template_tf        in        char default 'F'
                    );
                    --4. BORed: set xRef : BORed_polcy_Susp.32233346  to BORed_policy_term
                    --
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_BORed_PolSusp_object_id,
                         pkg_db_suspension.gbv_PolSusp_RefCurrSuspPolTerm,
                         v_bored_policy_term_id
                    );               
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_PolSusp_object_id , v_datamart_tf);
                    
                    --5. BORed: set xRef : BORed_policy_term.32251446 to BORed_polcy_Susp
                    --
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_bored_policy_term_id,
                         pkg_db_suspension.gbv_PolicyTerm_RefCurrSusp,
                         v_BORed_PolSusp_object_id
                    );               
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_bored_policy_term_id , v_datamart_tf);
                    
                    --6. Orig: Find Policy Trx of type Billing Suspension(6046). 
                    --
                    v_child_search_list.delete;
                    v_orig_PolBillSusp_TRX_id := null;
                    
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_object_id                     => in_orig_policy_id,
                         in_child_object_type_id          => pkg_os_constant.gobjType_PolicyTransaction,
                         in_object_list                   => v_child_search_list, --in out nocopy pkg_os_object.t_object_list,
                         in_sort_bv_id                    => null, --in            business_variable.business_variable_id%type default null,
                         in_recurse_flag                  => false --in            boolean default true,
                         --in_exclude_deleted_objects_tf    => , --in            boolean default true,
                         --in_child_search_id               => , --in            object_child_search.child_search_id%type default null
                    );
                    --   6.1  It must have xRef 32251946 pointing to Orig_policy_Susp (step 2) : Orig_policyTrx_BillingSusp
                    
                    v_list_idx := v_child_search_list.first;
                    while v_list_idx is not null
                    loop
                         if 6046 = pkg_os_object_io.fn_object_bv_get -- Policy Transaction Type = Billing Suspension
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_child_search_list(v_list_idx),
                                        212030 -- PolicyTransaction - List - Transaction Type
                                    )
                         and
                            v_orig_PolSusp_object_id = pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_child_search_list(v_list_idx),
                                                            32251946 -- PolicyTransaction - xReference - _Reference_Associated Suspension
                                                        )
                         then
                             v_orig_PolBillSusp_TRX_id := v_child_search_list(v_list_idx);
                             
                             exit; -- exit loop
                             
                         end if;
                         
                         v_list_idx := v_child_search_list.next(v_list_idx);
                    end loop;
                    
                    if v_orig_PolBillSusp_TRX_id is not null
                    then                
                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Original policy Billing Suspension TRX ID: ' || v_orig_PolBillSusp_TRX_id || '. Cloning this trnasaciton for BORed policy....'
                              );
                         end if;
                         --7. BORed: Clone Orig_policyTrx_BillingSusp, place under BORed policy : BORed_policyTrx_BillingSusp
                         --
                         pkg_os_object_copy.sp_object_copy
                         (
                              in_session_id,
                              in_transaction_id,
                              in_from_object_id             => v_orig_PolBillSusp_TRX_id,              -- *
                              in_to_parent_id               => in_BORed_policy_id,                     -- *
                              in_excluded_types             => v_object_copy_excluded_types,
                              in_included_types             => v_object_copy_included_types,
                              io_object_map                 => v_object_copy_list,
                              io_counter                    => v_object_copy_counter,
                              out_object_id                 => v_BORed_PolBillSusp_TRX_id,             -- *
                              in_reset_utemplate            => 'F', -- in        char default 'F',
                              in_recursive_copy_tf          => 'T', -- in        char default 'T',
                              in_bv_copy                    => 'T' -- in        char default 'T',
                              --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                              --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                              --in_resolve_references         => FALSE  -- in        boolean default  false,
                              -- in_persist_template_tf        in        char default 'F'
                         );
                         
                         --8. BORed: set xRef BORed_policyTrx_BillingSusp.32251946 to BORed_polcy_Susp            
                         --
                         -- and fixing other references for newly created Billing Suspension TRX
                         --
                         begin                         
                              v_BORed_policy_RW_trx_id := pkg_os_object_io.fn_object_bv_get
                                                          (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              in_BORed_policy_id,
                                                              gbv_xREF_Pol_NBTrx --  In case of BORed policy points to first the Rewrite transaction
                                                          );
                                                         
                              v_BORed_policy_RW_PTP_id := pkg_os_object_io.fn_object_bv_get
                                                          (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              v_BORed_policy_RW_trx_id,
                                                              gbv_xREF_PolTrx_Coverages
                                                          );          
                              if v_session_control.gLogging_Full
                              then
                                   sp_log
                                   --pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Fixing references for newly created Billing Suspension TRX' || v_BORed_PolBillSusp_TRX_id ||
                                        '. RW Trx ID ' || v_BORed_policy_RW_trx_id ||
                                        ', RW PTP ID ' || v_BORed_policy_RW_PTP_id ||
                                        ', RW Term ' || v_BORed_policy_term_id     ||
                                        ', Associated Suspension '|| v_BORed_PolSusp_object_id ||'.'
                                   );
                              end if;
                              
                              v_bv_table.delete;
                                        
                              v_bv_table(gbv_xREF_PolTrx_Coverages).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
                              v_bv_table(gbv_xREF_PolTrx_BasisCvrg).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
                              v_bv_table(gbv_xREF_PolTrx_BasisTRX ).business_variable_value := v_BORed_policy_RW_trx_id;  -- RW Trx 
                              v_bv_table(gbv_xREF_PolTrx_PolTerm  ).business_variable_value := v_BORed_policy_term_id;    -- Policy Term
                              v_bv_table(32251946                 ).business_variable_value := v_BORed_PolSusp_object_id; -- _Reference_Associated Suspension
                              
                              
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_BORed_PolBillSusp_TRX_id,
                                   v_bv_table
                              );
                         end;
                         
                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_PolBillSusp_TRX_id , v_datamart_tf);
                    else
                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Original policy Billing Suspension TRX ID not found.'
                              );
                         end if;
                    end if;
               end;               
          else
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Nothing to sync : there is no Current Suspension object.'
                    );
               end if;
          end if;
     end;               
end sp_syncup_suspension;
*/

procedure sp_syncup_suspension
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     in_BORed_policy_id            in   object.object_id%type,
     io_bv_backup_beforeBOR_t    in out OBJECT_BV_VALUE_TAB
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_suspension';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_orig_policy_term_id              object.object_id%type;
     v_bored_policy_term_id             object.object_id%type;

     v_orig_BA_id                       object.object_id%type;
     v_BORed_BA_id                      object.object_id%type;

     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;

     v_orig_PolBillSusp_TRX_id          object.object_id%type;
     v_BORed_PolBillSusp_TRX_id         object.object_id%type;

     v_orig_PolSusp_object_id           object.object_id%type;
     v_BORed_PolSusp_object_id          object.object_id%type;

     v_BORed_policy_RW_trx_id           object.object_id%type;
     v_BORed_policy_RW_PTP_id           object.object_id%type;

     v_child_search_list                pkg_os_object.t_object_list;
     v_list_idx                         binary_integer;

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_datamart_tf                      char(1)      := 'T';
     v_PolSusp_child_list               pkg_os_object.t_object_list;
     v_PolSusp_child_index              number;
     v_PolSusp_objectState              object_state.object_state_id%type;
     --OSPRODUCT-4266 start
     v_billing_acc_trx_set_id           object.object_id%type;
     v_suspension_type_id               object_type.object_type_id%type;
     v_fi_trx_billing_susp_id           object.object_id%type;
     --OSPRODUCT-4266 end
     v_object_cache                     pkg_os_object_cache.t_object_cache;--OSPRODUCT-16351
     v_action_outcome_id                outcome.outcome_id%type  :=   pkg_os_constant.gOutcome_OK;--OSPRODUCT-16351
     v_current_date_time                date;--OSPRODUCT-16351
     
begin
     --  24      -- policy
     --  2389401 -- PolicyTerm
     --  2365346 -- BillingAccount

     v_orig_policy_term_id := pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_orig_policy_id,
                                   pkg_db_multipayer.gbv_Policy_Ref_NBTrx||'.'||pkg_os_constant_bv.gbv_RefPolcyTrxnBelongsTo
                              );

     v_BORed_policy_term_id := pkg_db_functions.fn_get_policy_current_term
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_BORed_policy_id
                               );

     v_orig_BA_id   := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_orig_policy_id
                       );

     v_BORed_BA_id  := fn_get_policy_holder_ba
                       (
                            in_session_id,
                            in_transaction_id,
                            in_BORed_policy_id
                       );

     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Syncing UP Suspension for'||
               ' original policy ' || in_orig_policy_id || ' - BORed policy '|| in_BORed_policy_id ||
               ', original policy Term ' || v_orig_policy_term_id || ' - BORed policy Term '|| v_BORed_policy_term_id ||
               ', original policy holder Billing Account ' || v_orig_BA_id || ' - BORed policy holder Billing Account '|| v_BORed_BA_id || '.'
          );
     end if;

     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY level'
          );
     end if;

     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => in_BORed_policy_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );

     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP POLICY TERM level'
          );
     end if;

     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_policy_term_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );

     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Syncing UP BILLING ACCOUNT level'
          );
     end if;

     sp_bv_snapshot_merge
     (
          in_session_id,
          in_transaction_id,
          in_target_object_id      => v_BORed_BA_id,
          io_obj_bv_value_snapshot => io_bv_backup_beforeBOR_t
     );

     /*
     Suspension :

         Clone / Create  Suspension Transaction
           PAS Suspension object
           and
           Billing Suspension object
           Important: there is a (with coma separated value) that lists suspened activities.

      There is only one   Suspension object in Acitve status (ie only one Acitve suspension is allowed)

      Example:
         Suspension object1
            CPP
         If we need to add another suspension, we have to resume current active suspension and create a new one.
         Resume Suspension object1
         Create new
         Suspension object2. Active
            CPP (from old supspension), CX (new susspension)
     ================================================================================================================
        Policy(24)
        ...PolicySuspObject (object type ID 3193346 Suspension)
               xRef to Policy Term : 32233346 PolicySuspension - xReference - _Reference_Current Suspended Term

        ...PolicyTerm(2389401)
               xRef to PolicySuspObject  : 32251446 PolicyTerm - xReference - _Reference_Term Current Suspension

        ...PolicyTRX(629) (Trx type Billing Suspension(6046) : 212030 PolicyTransaction - List - Transaction Type )
                xRef to PolicySuspObject (the same as PolicyTerm) : 32251946 PolicyTransaction - xReference - _Reference_Associated Suspension

        Syncing UP:
        1. Orig: Get Orig Policy Term
        2. Orig: Get Current Suspension (xRef 32251446) : Orig_policy_Susp
        3. BORed: Clone Orig_policy_Susp, place it undre the BORed policy : BORed_polcy_Susp
        4. BORed: set xRef : BORed_polcy_Susp.32233346  to BORed_policy_term
        5. BORed: set xRef : BORed_policy_term.32251446 to BORed_polcy_Susp
        6. Orig: Find Policy Trx of type Billing Suspension(6046).
           6.1  It must have xRef 32251946 pointing to Orig_policy_Susp (step 2) : Orig_policyTrx_BillingSusp
        7. BORed: Clone Orig_policyTrx_BillingSusp, place under BORed policy : BORed_policyTrx_BillingSusp
        8. BORed: set xRef BORed_policyTrx_BillingSusp.32251946 to BORed_polcy_Susp
     ================================================================================================================
     */

     begin
          --1. Orig: Get Orig Policy Term : v_orig_policy_term_id
          --
          --2. Orig: Get Current Suspension (xRef 32251446) : Orig_policy_Susp
          --
          -- as part of osproduct-2013, there can be multiple active policy suspension objects under Policy. So instead of copying
          -- only one suspension object, changing the code to loop all the children of type policy suspension and copying the objecst which
          -- has active billing suspension.
          --OSPRODUCT-4266 start
          pkg_db_suspension.sp_get_active_susp_objects
          (
            in_session_id,
            in_transaction_id,
            in_orig_policy_id ,
            v_orig_BA_id,
            v_PolSusp_child_list,
            3 -- Both Policy and BillingAccount Suspension
          );
           /*pkg_os_object_search.sp_object_children_of_type_get
                       (
                            in_session_id,
                            in_transaction_id,
                            in_orig_policy_id ,
                            pkg_db_suspension.gObjType_PolicySuspension,--3193646
                            v_PolSusp_child_list
                       );
           */
           --OSPRODUCT-4266 end
           v_PolSusp_child_index :=v_PolSusp_child_list.first;
           while v_PolSusp_child_index is not null
            loop
            v_PolSusp_objectState:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                          in_session_id,
                                          in_transaction_id,
                                          v_PolSusp_child_list(v_PolSusp_child_index),
                                          pkg_db_suspension.gbv_GenericObj_ObjectState--210153
                                         );
            if v_PolSusp_objectState = 54346 then
--          v_orig_PolSusp_object_id := pkg_os_object_io.fn_object_bv_get
--                                      (
--                                           in_session_id,
--                                           in_transaction_id,
--                                           v_orig_policy_term_id,
--                                           pkg_db_suspension.gbv_PolicyTerm_RefCurrSusp
--                                      );

        --  if v_orig_PolSusp_object_id is not null
        --  then
               begin
                    --OSPRODUCT-4266 start
                    v_suspension_type_id := pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_PolSusp_child_list(v_PolSusp_child_index));

                    if  v_suspension_type_id = pkg_db_suspension.gObjType_BillAccSuspension
                    then
                         -- Verify if it is a  BillingSuspension, if Yes then create a BillingAccounTTrxset

                         pkg_os_object.sp_object_create
                         (
                              in_session_id,
                              in_transaction_id,
                              pkg_db_billing_modify.gObjType_BillingAccountTrxSet,
                              v_BORed_BA_id,
                              v_billing_acc_trx_set_id
                         );

                         --
                         -- Set BV's for BillingAccountTransactionSet
                         --
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_trx_set_id,
                              pkg_db_billing_modify.gbv_FITrxSetBatchType,
                              pkg_db_suspension.g_PolicyTrxType_SuspBilling -- billing suspension type
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_trx_set_id,
                              pkg_db_billing_modify.gbv_FITrxSetExternalBatchId,
                              'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billing_acc_trx_set_id), pkg_os_constant.DragonDateFormatDefault )
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_trx_set_id,
                              pkg_db_billing_modify.gbv_FITrxSetEnteredby,
                              pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882')
                         );

                         --3. BORed: Clone Orig_policy_Susp, place it undre the BORed policy : BORed_polcy_Susp
                         --
                         if v_session_control.gLogging_Full
                         then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Policy Suspension object ID: ' ||  v_PolSusp_child_list(v_PolSusp_child_index) || '.
                              Cloning this object for BORed policy....'
                         );
                         end if;

                         pkg_os_object_copy.sp_object_copy
                         (
                              in_session_id,
                              in_transaction_id,
                              in_from_object_id             => v_PolSusp_child_list(v_PolSusp_child_index),               -- *
                              in_to_parent_id               => v_BORed_BA_id,                     -- *
                              in_excluded_types             => v_object_copy_excluded_types,
                              in_included_types             => v_object_copy_included_types,
                              io_object_map                 => v_object_copy_list,
                              io_counter                    => v_object_copy_counter,
                              out_object_id                 => v_BORed_PolSusp_object_id,              -- *
                              in_reset_utemplate            => 'F', -- in        char default 'F',
                              in_recursive_copy_tf          => 'T', -- in        char default 'T',
                              in_bv_copy                    => 'T' -- in        char default 'T',
                              --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                              --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                              --in_resolve_references         => FALSE  -- in        boolean default  false,
                              -- in_persist_template_tf        in        char default 'F'
                         );
                    else
                    --OSPRODUCT-4266 end
                         pkg_os_object_copy.sp_object_copy
                         (
                              in_session_id,
                              in_transaction_id,
                              in_from_object_id             => v_PolSusp_child_list(v_PolSusp_child_index),               -- *
                              in_to_parent_id               => in_BORed_policy_id,                     -- *
                              in_excluded_types             => v_object_copy_excluded_types,
                              in_included_types             => v_object_copy_included_types,
                              io_object_map                 => v_object_copy_list,
                              io_counter                    => v_object_copy_counter,
                              out_object_id                 => v_BORed_PolSusp_object_id,              -- *
                              in_reset_utemplate            => 'F', -- in        char default 'F',
                              in_recursive_copy_tf          => 'T', -- in        char default 'T',
                              in_bv_copy                    => 'T' -- in        char default 'T',
                              --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                              --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                              --in_resolve_references         => FALSE  -- in        boolean default  false,
                              -- in_persist_template_tf        in        char default 'F'
                         );
                    end if;
                    --4. BORed: set xRef : BORed_polcy_Susp.32233346  to BORed_policy_term
                    --
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_BORed_PolSusp_object_id,
                         pkg_db_suspension.gbv_PolSusp_RefCurrSuspPolTerm,
                         v_bored_policy_term_id
                    );
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_PolSusp_object_id , v_datamart_tf);

                    --5. BORed: set xRef : BORed_policy_term.32251446 to BORed_polcy_Susp
                    --
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_bored_policy_term_id,
                         pkg_db_suspension.gbv_PolicyTerm_RefCurrSusp,
                         v_BORed_PolSusp_object_id
                    );
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_bored_policy_term_id , v_datamart_tf);

                    --6. Orig: Find Policy Trx of type Billing Suspension(6046).
                    --
                    v_child_search_list.delete;
                    v_orig_PolBillSusp_TRX_id := null;

                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_object_id                     => in_orig_policy_id,
                         in_child_object_type_id          => pkg_os_constant.gobjType_PolicyTransaction,
                         in_object_list                   => v_child_search_list, --in out nocopy pkg_os_object.t_object_list,
                         in_sort_bv_id                    => null, --in            business_variable.business_variable_id%type default null,
                         in_recurse_flag                  => false --in            boolean default true,
                         --in_exclude_deleted_objects_tf    => , --in            boolean default true,
                         --in_child_search_id               => , --in            object_child_search.child_search_id%type default null
                    );
                    --   6.1  It must have xRef 32251946 pointing to Orig_policy_Susp (step 2) : Orig_policyTrx_BillingSusp

                    v_list_idx := v_child_search_list.first;
                    while v_list_idx is not null
                    loop
                         if 6046 = pkg_os_object_io.fn_object_bv_get -- Policy Transaction Type = Billing Suspension
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_child_search_list(v_list_idx),
                                        212030 -- PolicyTransaction - List - Transaction Type
                                    )
                         and
                v_PolSusp_child_list(v_PolSusp_child_index) = pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_child_search_list(v_list_idx),
                                                            32251946 -- PolicyTransaction - xReference - _Reference_Associated Suspension
                                                        )
                         then
                             v_orig_PolBillSusp_TRX_id := v_child_search_list(v_list_idx);

                             exit; -- exit loop

                         end if;

                         v_list_idx := v_child_search_list.next(v_list_idx);
                    end loop;

                    if v_orig_PolBillSusp_TRX_id is not null
                    then
                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Original policy Billing Suspension TRX ID: ' || v_orig_PolBillSusp_TRX_id || '. Cloning this trnasaciton for BORed policy....'
                              );
                         end if;
                         --7. BORed: Clone Orig_policyTrx_BillingSusp, place under BORed policy : BORed_policyTrx_BillingSusp
                         --
                         pkg_os_object_copy.sp_object_copy
                         (
                              in_session_id,
                              in_transaction_id,
                              in_from_object_id             => v_orig_PolBillSusp_TRX_id,              -- *
                              in_to_parent_id               => in_BORed_policy_id,                     -- *
                              in_excluded_types             => v_object_copy_excluded_types,
                              in_included_types             => v_object_copy_included_types,
                              io_object_map                 => v_object_copy_list,
                              io_counter                    => v_object_copy_counter,
                              out_object_id                 => v_BORed_PolBillSusp_TRX_id,             -- *
                              in_reset_utemplate            => 'F', -- in        char default 'F',
                              in_recursive_copy_tf          => 'T', -- in        char default 'T',
                              in_bv_copy                    => 'T' -- in        char default 'T',
                              --in_object_state_id            => NULL,-- in        object.object_state_id%type default null,
                              --in_exclude_deleted_objects_tf => TRUE, -- in        boolean default  true,
                              --in_resolve_references         => FALSE  -- in        boolean default  false,
                              -- in_persist_template_tf        in        char default 'F'
                         );

                         --8. BORed: set xRef BORed_policyTrx_BillingSusp.32251946 to BORed_polcy_Susp
                         --
                         -- and fixing other references for newly created Billing Suspension TRX
                         --
                         begin
                              v_BORed_policy_RW_trx_id := pkg_os_object_io.fn_object_bv_get
                                                          (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              in_BORed_policy_id,
                                                              gbv_xREF_Pol_NBTrx --  In case of BORed policy points to first the Rewrite transaction
                                                          );

                              v_BORed_policy_RW_PTP_id := pkg_os_object_io.fn_object_bv_get
                                                          (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              v_BORed_policy_RW_trx_id,
                                                              gbv_xREF_PolTrx_Coverages
                                                          );
                              if v_session_control.gLogging_Full
                              then
                                   sp_log
                                   --pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '......... Fixing references for newly created Billing Suspension TRX' || v_BORed_PolBillSusp_TRX_id ||
                                        '. RW Trx ID ' || v_BORed_policy_RW_trx_id ||
                                        ', RW PTP ID ' || v_BORed_policy_RW_PTP_id ||
                                        ', RW Term ' || v_BORed_policy_term_id     ||
                                        ', Associated Suspension '|| v_BORed_PolSusp_object_id ||'.'
                                   );
                              end if;

                              v_bv_table.delete;

                              v_bv_table(gbv_xREF_PolTrx_Coverages).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
                              v_bv_table(gbv_xREF_PolTrx_BasisCvrg).business_variable_value := v_BORed_policy_RW_PTP_id;  -- RW PTP
                              v_bv_table(gbv_xREF_PolTrx_BasisTRX ).business_variable_value := v_BORed_policy_RW_trx_id;  -- RW Trx
                              v_bv_table(gbv_xREF_PolTrx_PolTerm  ).business_variable_value := v_BORed_policy_term_id;    -- Policy Term
                              v_bv_table(32251946                 ).business_variable_value := v_BORed_PolSusp_object_id; -- _Reference_Associated Suspension


                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_BORed_PolBillSusp_TRX_id,
                                   v_bv_table
                              );
                              --OSPRODUCT-4266 start
                              if v_suspension_type_id = pkg_db_suspension.gObjType_BillAccSuspension
                              then


                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_BORed_PolBillSusp_TRX_id, -- policy trxn id
                                        pkg_db_billing.gbv_PolTrxRefBillingAccTrxSet,
                                        v_billing_acc_trx_set_id
                                   );

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_acc_trx_set_id,
                                        pkg_db_late_process.gbv_BillingAccTrxSetRefPolTxn,  --BATS to PT reference
                                        v_BORed_PolBillSusp_TRX_id
                                   );


                                   pkg_db_object.sp_fitransaction_create
                                   (
                                        in_session_id                   =>  in_session_id,
                                        in_transaction_id               =>  in_transaction_id,
                                        in_fitrx_parent_fitrxset_id     =>  v_billing_acc_trx_set_id,
                                        in_fitrx_ref_billing_account    =>  v_BORed_BA_id,
                                        out_fitransaction_id            =>  v_fi_trx_billing_susp_id,
                                        in_fitrx_type                   =>  pkg_db_suspension.g_PolicyTrxType_Info, -- Informational fitransaction
                                        in_fitrx_ref_associatedpolicy   =>  in_BORed_policy_id,
                                        in_fitrx_ref_associatedpoltrx   =>  v_BORed_PolBillSusp_TRX_id,
                                        in_fitrx_effective_date         =>  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_BORed_PolBillSusp_TRX_id ,pkg_os_constant_bv.gbv_PolicyTranEffectiveDate),
                                        in_fitrx_object_state           =>  37646
                                   );


                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_fi_trx_billing_susp_id,
                                        29708446,
                                        to_char
                                        (
                                             pkg_os_time.fn_os_sysdate
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_fi_trx_billing_susp_id
                                             ),
                                             pkg_os_constant.DragonDateFormatDefault
                                        )
                                   );

                                   --
                                   -- Update the FITransaction Datamart for the Withdrawal Date update transaction
                                   --
                                   pkg_os_datamart.sp_datamart_update_row
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_fi_trx_billing_susp_id,
                                        v_datamart_tf
                                   );

                                   /*pkg_db_object.sp_billingacounttrxset_process
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_acc_trx_set_id,
                                        pkg_db_suspension.g_PolicyTrxType_SuspBilling
                                   );*/--OSPRODUCT-16351
                                   
                                   pkg_db_object.sp_billing_acct_trx_process
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_acc_trx_set_id,
                                        v_object_cache,
                                        v_action_outcome_id,
                                        v_current_date_time
                                   );--OSPRODUCT-16351

                             end if;
                             --OSPRODUCT-4266 end
                         end;

                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_BORed_PolBillSusp_TRX_id , v_datamart_tf);
                    else
                         if v_session_control.gLogging_Full
                         then
                              sp_log
                              --pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '...... Original policy Billing Suspension TRX ID not found.'
                              );
                         end if;
                    end if;
               end;

         end if;
         v_PolSusp_child_index := v_PolSusp_child_list.next(v_PolSusp_child_index);
         end loop;
         if v_PolSusp_child_list.count=0 then
         if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Nothing to sync : there is no Current Suspension object.'
                    );
               end if;
         end if;
     ---ks
     end;
end sp_syncup_suspension;

-- OSPRODUCT-21345
procedure sp_syncup_withdrawal_day_init
(
     in_session_id         in   system_log.user_session_id%type,
     in_transaction_id     in   system_log.transaction_id%type,
     in_from_object_id     in   object.object_id%type,
     in_to_object_id       in   object.object_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_syncup_withdrawal_day_init';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_from_object_type_id              object_type.object_type_id%type;
     v_to_object_type_id                object_type.object_type_id%type;
     v_ptp_withdrawal_day               number;
     v_ptp_payer_list                   pkg_os_object.t_object_list;
     v_idx_ptp_payer                    binary_integer;
     v_from_object_id                   object.object_id%type;
begin
     
     -- Get the object type id:
     v_from_object_type_id := pkg_os_object.fn_object_type_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_from_object_id
                              );
                              
     v_to_object_type_id := pkg_os_object.fn_object_type_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_to_object_id
                              );
                              
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. From object ID: '|| in_from_object_id ||
               '.. From Object Type ID: ' || v_from_object_type_id ||
               '.. To obejct ID: '        || in_to_object_id ||
               '.. To Object Type ID: '   || v_to_object_type_id
          );
     end if;
                              
     if v_from_object_type_id = pkg_os_constant.gobjType_PolicyTransaction then
          
          v_from_object_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_from_object_id, 
                                   212318
                              );
                              
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Overridden from obejct ID: ' || v_from_object_id
               );
          end if;
                              
     else
          v_from_object_id := in_from_object_id;
     end if;
     
     v_ptp_withdrawal_day := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_from_object_id, 
                                   pkg_db_payplan_modify.gbv_PTP_Preferred_Pay_Day
                              );
                              
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Withdrawal Day: ' || v_ptp_withdrawal_day
          );
     end if;
     
     if v_to_object_type_id = pkg_os_constant.gobjType_PolicyTerm then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_to_object_id,
               pkg_db_billing_modify.gbv_prefwithdrwal_day,
               v_ptp_withdrawal_day
          );
          
     elsif v_to_object_type_id = pkg_os_constant.gobjType_PolicyTrxPolicy then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_to_object_id,
               pkg_db_payplan_modify.gbv_PTP_Preferred_Pay_Day, 
               v_ptp_withdrawal_day
          );
          
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_Id              =>    in_session_id,
               in_transaction_id          =>    in_transaction_id,
               in_object_id               =>    in_to_object_id,
               in_child_object_type_id    =>    pkg_db_constant.gobjType_PTPPayer,
               in_object_list             =>    v_ptp_payer_list
          );
          
          v_idx_ptp_payer := v_ptp_payer_list.first;
          
          while v_idx_ptp_payer is not null
          loop
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......Loop Payer ID :'||v_ptp_payer_list(v_idx_ptp_payer)
                    );
               end if;
                    
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_ptp_payer_list(v_idx_ptp_payer),
                    pkg_db_payment_arrangement.gbv_PTPayerPrefWithdrawalDay,
                    v_ptp_withdrawal_day
               );

               v_idx_ptp_payer := v_ptp_payer_list.next(v_idx_ptp_payer);
                    
          end loop;
          
     else
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. To object type not valid.'
               );
          end if;
     
     end if;

end sp_syncup_withdrawal_day_init;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_set_bor_payables
--
--  %USAGE
--    Sets earning status for the original and BORed policy in the end for a mid-Term BOR request process
--
--  %ALGORITHM
--    Call the pkg_db_billing_payable.sp_set_payables_amount for each policy.
--
--    Note: the in_booking_process_tf , in_invoicing_process_tf , in_clerance_process_tf flags should be properly set on the caller side.
--          At the moment of writing this code the caller is PKG_BASE_BOR_TRANSFER.sp_transfer_mid_term_policy and values for Hiscox is :
--             in_booking_process_tf   = T
--             in_invoicing_process_tf = F
--             in_clerance_process_tf  = F
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_orig_policy_id              Policy ID of the Original policy
--  %PARAM    in_BORed_policy_id             Policy ID of the BORed policy
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_set_bor_payables
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_orig_policy_id             in   object.object_id%type,
     in_BORed_policy_id            in   object.object_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_set_bor_payables';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     io_action_outcome_id               outcome.outcome_id%type := pkg_os_constant.gOutcome_OK;
     --OSPRODUCT-5778
     v_multipayer_enabled_tf            boolean;
     v_term_payer_list                  pkg_os_object.t_object_list;
     v_payer_idx                        number;
     --OSPRODUCT-5778
	 v_commission_handelling_mode       number;
	 
begin
    
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Setting earning status for the original policy '|| in_orig_policy_id ||' and BORed policy '  || in_BORed_policy_id 
          );
     end if;
	 
	 -- Get the commission handelling mode
     v_commission_handelling_mode := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_BORed_policy_id,
                                          pkg_pc_bor_action.gbv_policy_commission_mode
                                     );

     if v_session_control.gLogging_Full
     then
          
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Processing the original policy '|| in_orig_policy_id ||
               '... Commission handelling mode (1. Prorata, 2. On Renewal, ): ' || v_commission_handelling_mode
          );
          
     end if;
	 
	 
     --OSPRODUCT-5778 multipayer compatibility enhanced
     v_term_payer_list.delete;
     -- Multipayer enabled?
     v_multipayer_enabled_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_orig_policy_id
                                );
     If v_multipayer_enabled_tf
     then
          Select 
               tp.policy_term_payer_id
          bulk collect into
               v_term_payer_list
          from
               dragon_policy_term_payer tp
          where 
               tp.policy_id = in_orig_policy_id;
     else
          v_term_payer_list(v_term_payer_list.count + 1) := null;
     end if;
     
     v_payer_idx := v_term_payer_list.first;
	 
     while v_payer_idx is not null loop
          
          if v_commission_handelling_mode = pkg_pc_bor_transfer.gBORCommissionMode_Prorata then -- prorata
               
               pkg_db_billing_payable.sp_set_payables_amount
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_id                => in_orig_policy_id,
                    io_action_outcome_id        => io_action_outcome_id,
                    in_policy_transaction_id    => NULL,
                    in_billingacounttrxset_id   => NULL,
                    in_policy_term_payer_id     => v_term_payer_list(v_payer_idx)
               );
               
          else
               
               pkg_db_billing_payable.sp_set_payables_amount
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_id                => in_orig_policy_id,
                    io_action_outcome_id        => io_action_outcome_id,
                    in_policy_transaction_id    => NULL,
                    in_billingacounttrxset_id   => NULL,
                    in_policy_term_payer_id     => v_term_payer_list(v_payer_idx),
                    in_override_bor_tf          => 'Y'
               );          
          
          end if;
                
          v_payer_idx := v_term_payer_list.next(v_payer_idx);
          
     end loop;
     
     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Processing BORed policy '|| in_BORed_policy_id
          );
     end if;
	 
     v_term_payer_list.delete;
	 
     -- Multipayer enabled?
     v_multipayer_enabled_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_BORed_policy_id
                                );
     If v_multipayer_enabled_tf
     then
          Select 
               tp.policy_term_payer_id
          bulk collect into
               v_term_payer_list
          from
               dragon_policy_term_payer tp
          where 
               tp.policy_id = in_BORed_policy_id;
     else
          v_term_payer_list(v_term_payer_list.count + 1) := null;
     end if;
	 
     --OSPRODUCT-5778 start
     v_payer_idx := v_term_payer_list.first;
     
     while v_payer_idx is not null loop
          
          pkg_db_billing_payable.sp_set_payables_amount
          (
               in_session_id,
               in_transaction_id,
               in_policy_id                => in_BORed_policy_id,
               io_action_outcome_id        => io_action_outcome_id,
               in_policy_transaction_id    => NULL,
               in_billingacounttrxset_id   => NULL,
               in_policy_term_payer_id     => v_term_payer_list(v_payer_idx),
               in_override_bor_tf          => 'Y' -- LXPRODUCT-467
          );
          
          v_payer_idx := v_term_payer_list.next(v_payer_idx);
          
     end loop;

     if v_session_control.gLogging_Full
     then
          sp_log
          --pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Setting earning status for the original and BORed policy completed.'
          );
     end if;     
     
end sp_set_bor_payables;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_clone_ctf_to_rewrite_policy
--
--  %USAGE
--      Procedure to clone PRofiles from rewritten Policy to Active Policy in case of policy getting rewritten through BOR.
--
--  %ALGORITHM
--
--      1. Fetch Payment Profile and associated cash transfer profile from olf policy
--      2. Clone above fetched cash transfer profile under new billing account.
--      3. Set it as credit card place holder or eft place holder on new Quote Transaction based on its mode.
--      4. Set Down payment mode on Rewrite PTP
--      5. Set Payment Profile mode as new for both credit card and eft kind of profiles on Rewrite PTP.
--
--  %PARAM    in_session_id           DRAGON Session Id
--  %PARAM    in_transaction_id       DRAGON Transaction Id
--  %PARAM    in_old_policy_id        BOR old policy
--  %PARAM    in_new_customer_id      BOR new policy
--  %PARAM    in_new_qt               New Quote Transaction
--  %PARAM    in_new_ptp              New Rewrite PTP - under old policy
--
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_clone_ctf_to_rewrite_policy
(
     in_session_id                 in   system_log.user_session_id%type,
     in_transaction_id             in   system_log.transaction_id%type,
     in_old_policy_id              in   object.object_id%type,
     in_new_customer_id            in   object.object_id%type,
     in_new_policy_trx_id          in   object.object_id%type, -- Renamed
     in_old_policy_trx_id          in   object.object_id%type default null -- OSPRODUCT-23161
)
is

     v_procedure_name                   constant         system_log.program_name%type := pkg_name||'sp_clone_ctf_to_rewrite_policy';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_old_policy_curr_term             object.object_id%type;
     v_old_ultimate_customer_id         object.object_id%type;
     v_old_primary_entity_id            object.object_id%type;
     v_old_cust_billing_account_id      object.object_id%type;
     v_old_pt_id                        object.object_id%type;
     v_old_ptp_id                       object.object_id%type;
     
     v_new_billing_account_id           object.object_id%type;
     v_new_cust_primary_entity_id       object.object_id%type;  
     v_new_ptp_id                       object.object_id%type;
     
     v_old_payer_entity_id              object.object_id%type;
     v_old_payer_billing_acc_id         object.object_id%type;
     v_old_ptp_payer_id                 object.object_id%type;
     
     v_new_payer_entity_id              object.object_id%type;
     v_new_payer_billing_acc_id         object.object_id%type;
     v_new_ptp_payer_id                 object.object_id%type;
     
     v_payer_billing_acc_type_id        number;
     
     v_old_ctf_profile_id               object.object_id%type;
     v_old_ctf_profile_details          varchar2(500);
     v_old_ctf_token_num                varchar2(500);
     v_old_bill_plan_id                 object.object_id%type;
     v_new_ctf_profile_id               object.object_id%type;
     v_new_ctf_id                       object.object_id%type;     
     v_mode                             number;
     
     v_multipayer_enabled_tf            char(1);
     
     V_action_object_type_id            object_type.object_type_id%type;
     
     v_datamart_tf                      char(1) := 'T';
     v_new_setup_tf                     char(1);
     
     v_ptp_payer_list                   pkg_os_object.t_object_list;
     v_payer_index                      number;
     v_new_payer_entity_ba_list         t_payer_entity_ba_list;
     v_excluded_types                   pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_included_types                   pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     
     v_bill_plan_id                     object.object_id%type := null;
     v_new_policy_id                    object.object_id%type; -- OSPRODUCT-21068
     v_count                            number;
     
     v_object_copy_excluded_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_included_types       pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
     v_object_copy_list                 pkg_os_object_copy.t_object_list;
     v_object_copy_counter              number :=1;
          
begin
     
     -- get current term
     v_old_policy_curr_term := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_old_policy_id,
                                    31844846 -- current term based on rolled date
                               );
     
     -- if new transaction type is Quote then its a new set up
     V_action_object_type_id := pkg_os_object.fn_object_type_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_new_policy_trx_id
                                );
     
     -- OSPRODUCT-21068
     v_new_policy_id := pkg_os_object.fn_object_parent_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_new_policy_trx_id
                        );
                                
     if v_action_object_type_id = pkg_os_constant.gobjType_QuoteTransaction 
        or
        -- OSPRODUCT-21068
        pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_new_policy_id, 26590007) = in_new_policy_trx_id
     then
                    
          v_new_setup_tf := 'T';
          
          -- OSPRODUCT-20600
          /*-- Get the old ptp ID
          -- get the term creator transaction
          v_old_pt_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_old_policy_curr_term,
                              29749301 -- Term creator transaction
                         );      */
                        
     else
                    
          v_new_setup_tf := 'F';
          
          -- OSPRODUCT-20600
          -- Get the rolled back transction
          /*v_old_pt_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_new_policy_trx_id,
                              gbv_xREF_PolTrx_RollFWDTrx --27922805 -- rollsforward
                         );*/
          
          
     end if;
     
     -- Get the rolled back transction
     -- OSPRODUCT-20600
     if in_old_policy_trx_id is null then -- OSPRODUCT-23161
          
          v_old_pt_id := fn_get_pt_from_bor_policy
                         (
                              in_session_id,
                              in_transaction_id,
                              in_new_policy_trx_id
                         ); 
                         
     else
          v_old_pt_id := in_old_policy_trx_id;
          
     end if; -- OSPRODUCT-23161         
     
     -- Get the details from Old Policy
     -- Get the old ptp id
     v_old_ptp_id := pkg_os_object_io.fn_object_bv_get
                     (
                         in_session_id,
                         in_transaction_id,
                         v_old_pt_id,
                         gbv_xREF_PolTrx_Coverages --212318 -- ref coverage
                     );
                     
     -- Get old customer
     v_old_ultimate_customer_id := pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_old_policy_id
                                   );

     -- Get the old primary Customer Entity
     v_old_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_old_ultimate_customer_id,
                                     pkg_db_constant.gbv_CustRefPrimaryEntity
                                );

     -- Get the 1-1 child of the Primary Customer Entity of type Billing Account
     v_old_cust_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_old_primary_entity_id,
                                           pkg_db_constant.gObjType_BillingAccount
                                      );
     -- Get the new PTP
     v_new_ptp_id := pkg_os_object_io.fn_object_bv_get
                     (
                         in_session_id,
                         in_transaction_id,
                         in_new_policy_trx_id,
                         212318 -- ref coverage
                     );                    
                    
     -- OSPRODUCT-10184
     -- Get if the policy is multi payer            
     v_multipayer_enabled_tf := pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_new_ptp_id, --in_new_ptp
                                     pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                                );
                                
     -- get primary entity id
     v_new_cust_primary_entity_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_new_customer_id,
                                          pkg_db_constant.gbv_CustRefPrimaryEntity
                                     );
                                          
     -- Get new policy BA
     v_new_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            v_new_cust_primary_entity_id,
                                            pkg_db_constant.gObjType_BillingAccount
                                       );

     -- Set Bill Plan enabled flag on new BA
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_new_billing_account_id,
          pkg_db_payment_arrangement.gbv_BABillPlanEnabledTF, --32653748, -- bill plan enabled
          pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_old_cust_billing_account_id,
               pkg_db_payment_arrangement.gbv_BABillPlanEnabledTF --32653748 -- bill plan enabled
          )
     );

     if v_session_control.gLogging_Full
     then

          sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. New Policy/Quote Transaction ID: ' || in_new_policy_trx_id ||
               '.. New Customer ID: '                 || in_new_customer_id ||
               '.. New PTP ID: '                      || v_new_ptp_id ||
               '.. New Billing Account: '             || v_new_billing_account_id ||
               '.. Multipayer enabled? '              || v_multipayer_enabled_tf ||
               '.. Old Policy ID: '                   || in_old_policy_id ||
               '.. Old Policy Current Term '          || v_old_policy_curr_term ||
               '.. Old PT ID: '                       || v_old_pt_id ||
               '.. Old PTP ID: '                      || v_old_ptp_id ||
               '.. Old BA: '                          || v_old_cust_billing_account_id ||
               '.. Old  Customer ID: '                || v_old_ultimate_customer_id ||
               '.. New Setup? '                       || v_new_setup_tf
          );

     end if;

     -- OSPRODUCT-10184
     if nvl(v_multipayer_enabled_tf, g_No) = g_Yes then
          
          -- One time cloning
          if v_new_setup_tf = 'T' then
          
               for v_payers in (select distinct tp.payer_entity_id, tp.payer_billing_account_id from dragon_policy_term_payer tp where tp.policy_id = in_old_policy_id) loop

                    -- Get the old payer entity
                    v_old_payer_entity_id := v_payers.payer_entity_id;
                    
                    -- Get the old billing account id
                    v_old_payer_billing_acc_id := v_payers.payer_billing_account_id;
                    
                    -- Account type id
                    v_payer_billing_acc_type_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id, 
                                                        in_transaction_id, 
                                                        v_old_payer_billing_acc_id, 
                                                        pkg_db_billing_modify.gbv_BillingAccountType 
                                                   );
                                                   
                    if v_session_control.gLogging_Full
                    then

                         sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Old Entity ID: ' || v_old_payer_entity_id ||
                              '.. Old Billing Account ID: ' || v_old_payer_billing_acc_id
                         );

                    end if;
                    
                    if v_payer_billing_acc_type_id = pkg_db_constant.gBillingAcType_Customer then
                         
                         -- OSPRODUCT-20220
                         v_new_payer_billing_acc_id := pkg_db_bor.fn_get_ba_in_bor_customer
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_new_customer_id,
                                                            v_old_payer_billing_acc_id                                                            
                                                       );
                                                       
                         v_new_payer_entity_id := pkg_os_object.fn_object_parent_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_new_payer_billing_acc_id
                                                  );
                                                  
                         if not v_new_payer_entity_ba_list.exists(v_old_payer_entity_id) then
                              
                              v_new_payer_entity_ba_list(v_old_payer_entity_id).payer_entity_id := v_new_payer_entity_id;
                              v_new_payer_entity_ba_list(v_old_payer_entity_id).billing_account_id := v_new_payer_billing_acc_id;
                         
                         end if;
                    
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. New Entity ID: '          || v_new_payer_entity_id ||
                                   '.. New Billing Account ID: ' || v_new_payer_billing_acc_id
                              );

                         end if;
                         
                         -- Set the Encrypted Billing Account ID to allow payments through the copied profile
                         -- OSPRODUCT-10205
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_payer_billing_acc_id,
                              gbv_BORdBA_EncryptedAccID,
                              pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_old_payer_billing_acc_id,
                                   gbv_BORdBA_EncryptedAccID
                              )
                         );
                         
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Cloning old active profils..'
                              );

                         end if;
               
                         for v_profiles in ( select ctf.ctf_id
                                               from dragon_cashtransferprofile ctf
                                              where ctf.billing_account_id = v_old_payer_billing_acc_id
                                                --- and ctf.ctf_id <> v_old_ctf_profile_id
                                                and ctf.profile_mode_id in (pkg_db_profiles.g_PaymentMode_Card, pkg_db_profiles.g_PaymentMode_EFT) -- OSPRODUCT-10184
                                                and pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, ctf.ctf_id, 210153) = 75
                                                and nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, ctf.ctf_id), 'F') = 'F'          
                                                AND pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, pkg_db_profiles.gbv_CTFAdhocRecurring -- OSPRODUCT-31411
                                                ) IS NULL
                                                AND pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, pkg_db_profiles.gbv_CTFRecurranceMode) =
                                                pkg_db_profiles.g_RecurrencyMode_Recurring
                                                )
                         loop
                              
                              -- OSPRODUCT-28688 Make it re-enterant
                              -- Copy only if its not copied already
                              begin
                              
                                   select ctf.ctf_id
                                     into v_new_ctf_id
                                     from dragon_cashtransferprofile ctf
                                    where ctf.billing_account_id = v_new_billing_account_id
                                          --- and ctf.ctf_id <> v_old_ctf_profile_id
                                      and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, 26725501) = v_profiles.ctf_id; -- template id
                                   
                                   if v_session_control.gLogging_Full
                                   then

                                        sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. Profile already copied.. ' ||
                                             '.. Old CTF: ' || v_profiles.ctf_id ||
                                             '.. New CTF: ' || v_new_ctf_id 
                                        );

                                   end if;
                                          
                              exception
                                   
                                   when no_data_found then 								  

                                        /*pkg_os_object_copy.sp_object_clone
                                        (
                                             in_session_id                 =>  in_session_id,
                                             in_transaction_id             =>  in_transaction_id,
                                             in_from_object_id             =>  v_profiles.ctf_id,
                                             in_excluded_types             =>  v_excluded_types,
                                             in_included_types             =>  v_included_types,
                                             out_duplicate_object_id       =>  v_new_ctf_id
                                        );*/
                                        
                                        pkg_os_object_copy.sp_object_copy
                                        (
                                             in_session_id                  =>  in_session_id,
                                             in_transaction_id              =>  in_transaction_id,
                                             in_from_object_id              =>  v_profiles.ctf_id,
                                             in_to_parent_id                =>  v_new_billing_account_id,
                                             in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                                             in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                                             io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                                             io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                                             out_object_id                  =>  v_new_ctf_id,
                                             in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                                             in_recursive_copy_tf           =>  'F', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                                             in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                                             in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                                             in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                                             in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                                             in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                                        );
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.. Old CTF: ' || v_profiles.ctf_id ||
                                                  '.. New CTF: ' || v_new_ctf_id
                                             );

                                        end if;

                                        pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_ctf_id,v_datamart_tf);

                              end;
                              
                         end loop;
                    
                    end if;
                    
               end loop;
               
          end if; 
          
          v_old_payer_entity_id := null;
          v_old_payer_billing_acc_id := null;
          v_new_payer_entity_id := null;
          v_new_payer_billing_acc_id := null;          
          
          -- Start pre-setup for bill plan and profile creation
          -- Get the PTP payer
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id              =>    in_session_id,
               in_transaction_id          =>    in_transaction_id,
               in_object_id               =>    v_old_ptp_id,
               in_child_object_type_id    =>    pkg_db_constant.gobjType_PTPPayer,
               in_object_list             =>    v_ptp_payer_list
          );
          
          v_payer_index := v_ptp_payer_list.first;

          while v_payer_index is not null loop

               v_old_ptp_payer_id := v_ptp_payer_list(v_payer_index);
               
               -- OSPRODUCT-21556
               v_bill_plan_id     := null;
               
               -- Get Payer entity
               v_old_payer_entity_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_old_ptp_payer_id,
                                             pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                        );
                                        
               -- Get the BA
               v_old_payer_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_old_payer_entity_id,
                                                  pkg_db_object.gObjType_BillingAccount
                                             );
                                             
               -- Get the account type
               v_payer_billing_acc_type_id := pkg_os_object_io.fn_object_bv_get
                                              (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_old_payer_billing_acc_id,
                                                 pkg_db_billing_modify.gbv_BillingAccountType
                                              );

               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Old PTP Payer ID: '            || v_old_ptp_payer_id ||
                         '.. Old Payer Entity ID: '         || v_old_payer_entity_id ||
                         '.. Old Payer Billing Account ID: ' || v_old_payer_billing_acc_id
                    );

               end if;
                    
               -- Get the old bill plan
               v_old_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_old_ptp_payer_id,
                                              pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan
                                         );
                                              
               v_old_ctf_profile_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_old_bill_plan_id,
                                              pkg_db_payment_arrangement.gbv_Ref_PmntArrangementCTF  --30013046
                                         );
                                              
               -- Set up profile BVs
               v_mode := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_old_ctf_profile_id,
                              pkg_db_profiles.gbv_CTFPaymentMode  --30010546
                         );

               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Old Bill Plan: '    || v_old_bill_plan_id ||
                         '.. Old CTF: '          || v_old_ctf_profile_id ||
                         '.. Mode: '             || v_mode ||
                         '.. Acc Type ID: '      || v_payer_billing_acc_type_id
                    );

               end if;
			   
			   -- OSPRODUCT-20605                                                       
               v_new_payer_billing_acc_id := fn_get_ba_in_bor_customer
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_new_customer_id,
                                                  v_old_payer_billing_acc_id
                                             );
               v_new_payer_entity_id := pkg_os_object.fn_object_parent_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_new_payer_billing_acc_id
                                        );
                    
               begin
                         
                    select p.ptp_payer_id
                      into v_new_ptp_payer_id
                      from dragon_ptp_payer p
                     where p.ptp_id = v_new_ptp_id
                       and p.billing_account_id = v_new_payer_billing_acc_id;
                            
               exception
                         
                    when others then    
                                                   
                         v_new_ptp_payer_id := pkg_os_object_search.fn_object_with_attribute_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_new_ptp_id,
                                                       pkg_db_multipayer.gObjType_PTPPayer,
                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr,
                                                       v_new_payer_entity_id
                                                  );
                                                                 
               end;
                    
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. New Payer Entity ID: '          || v_new_payer_entity_id ||
                         '.. New Billing Account ID: '       || v_new_payer_billing_acc_id ||
                         '.. New PTP Payer ID:' || v_new_ptp_payer_id
                    );

               end if;
               
               -- Profile pre setup
               if v_payer_billing_acc_type_id = pkg_db_constant.gBillingAcType_Customer then
                    
                    -- 3. Get the corresponding new CTF for card or eft
                    if v_mode in (pkg_db_profiles.g_PaymentMode_Card, pkg_db_profiles.g_PaymentMode_EFT) then
                              
                         -- Get the CTF with the same details
                         v_old_ctf_profile_details := pkg_os_object_io.fn_object_bv_get
                                                      (
                                                           in_session_id,
                                                           in_transaction_id,
                                                           v_old_ctf_profile_id,
                                                           32375746
                                                      );
                                                           
                         v_old_ctf_token_num := pkg_os_object_io.fn_object_bv_get
                                                (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_old_ctf_profile_id,
                                                    32834040
                                                );
                                                     
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Old Profile Detail: ' || v_old_ctf_profile_details ||
                                   '.. Old Profile Token Num: ' || v_old_ctf_profile_id 
                              );

                         end if;
                                                                        
                         begin
                                   
                              -- Ideally we should get a perfect match
                              -- But cant if we are going from SP to MP
                            /*  select ctf.ctf_id
                                into v_new_ctf_profile_id
                                from dragon_cashtransferprofile ctf
                               where ctf.billing_account_id = v_new_payer_billing_acc_id
                                 and pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                       in_transaction_id,
                                                                       ctf.ctf_id,
                                                                       32375746) = v_old_ctf_profile_details
                                 and (
                                          v_old_ctf_token_num is null
                                          or
                                          pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,ctf.ctf_id,pkg_db_profiles.gbv_CTFEFTTokenNumber) = v_old_ctf_token_num
                                     );*/

                              select ctf.ctf_id
                              into v_new_ctf_profile_id
                              from dragon_cashtransferprofile ctf
                              where ctf.billing_account_id = v_new_billing_account_id
                              and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, 26725501) = v_old_ctf_profile_id;                                                     
                                    
                                     
                              -- OSPRODUCT-28688
                              -- Condition to validate that the copied profile is still in use
                              if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_new_ctf_profile_id, 210153) <> 75 
                                 or
                                 nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, v_new_ctf_profile_id), 'F') = 'T'
                              then
                                   
                                   if v_session_control.gLogging_Full
                                   then

                                        sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. CTF got copied but is not valid anymore. Hence going ahead with the cheque profile..'
                                        );

                                   end if;
                                   
                                   v_mode := pkg_db_profiles.g_PaymentMode_Cheque;                    
                              
                              end if;
                                          
                         exception
                                   
                              when no_data_found then
                                        
                                   if v_session_control.gLogging_Full
                                   then

                                        sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. CTF not cloned.. Check the reason...'
                                        );

                                   end if;
                                        
                                   -- The CTF is not copied, the reason could be its not active
                                   if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_old_ctf_profile_id, 210153) <> '75' 
                                      or
                                      nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, v_old_ctf_profile_id), 'F') = 'T'
                                   then
                                        -- Deactivated on the old account
                                        -- Create a default cheque profile or??
                                        v_mode := pkg_db_profiles.g_PaymentMode_Cheque;
                                        v_new_ctf_profile_id := null;
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.. As not active creating a cheque profile..'
                                             );

                                        end if;
                                             
                                   else
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             pkg_os_logging.sp_log_error
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.. Something does not seems to be right here. Please analyze...' -- OSPRODUCT-28688
                                             );

                                        end if; 
                                             
                                        -- OSPRODUCT-28688
                                        pkg_os_object_copy.sp_object_copy
                                        (
                                             in_session_id                  =>  in_session_id,
                                             in_transaction_id              =>  in_transaction_id,
                                             in_from_object_id              =>  v_old_ctf_profile_id,
                                             in_to_parent_id                =>  v_new_billing_account_id,
                                             in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                                             in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                                             io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                                             io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                                             out_object_id                  =>  v_new_ctf_id,
                                             in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                                             in_recursive_copy_tf           =>  'F', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                                             in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                                             in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                                             in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                                             in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                                             in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                                        );
                                        -- end OSPRODUCT-28688
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '.. Old CTF: ' || v_old_ctf_profile_id ||
                                                  '.. New CTF: ' || v_new_ctf_profile_id
                                             );

                                        end if;

                                        pkg_os_object.sp_object_parent_set
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            v_new_ctf_profile_id,
                                            v_new_payer_billing_acc_id
                                        );

                                        pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_ctf_id,v_datamart_tf);
                                        
                                        if v_session_control.gLogging_Full
                                        then

                                             sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '..Cloned it..'
                                             );

                                        end if;
                                        
                                   end if;
                                        
                              when others then
                                        
                                   pkg_os_logging.sp_log_error
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        ' Error: ' ||sqlerrm|| dbms_utility.format_error_backtrace
                                   );

                                   raise;
               					                 
                         end;
                              
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. New CTF: ' || v_new_ctf_profile_id ||
                                   '.. Mode: ' || v_mode
                              );

                         end if;
                         
                    end if;
                    
                    -- 4. Pre setup to allow profile setup during process
                    if v_mode = pkg_db_profiles.g_PaymentMode_Card then

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_profiles.gbv_Ref_PTPPayerCurrentProfile,  --33993546
                              v_new_ctf_profile_id
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_profiles.gbv_PTPPayerCardProfileType,  --32068240
                              pkg_db_profiles.g_Profile_Type_Existing
                         );

                    elsif v_mode = pkg_db_profiles.g_PaymentMode_EFT then

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_profiles.gbv_Ref_PTPPayerCurrentProfile,  --33993646
                              v_new_ctf_profile_id
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_profiles.gbv_PTPPayerEFTProfileType,  --32072540
                              pkg_db_profiles.g_Profile_Type_Existing
                         );

                    end if;
                    
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_payer_id,
                         pkg_db_payment_arrangement.gbv_PTPPayerChangePayProfileTF,
                         pkg_db_payment_arrangement.gllv_ChangePayProfile
                    );
                         
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_payer_id,
                         pkg_db_profiles.gbv_PTPPayerDwnPmntMode,  --211929
                         v_mode
                    );
                    
               end if;
               
               -- Bill Plan
               if v_payer_billing_acc_type_id = pkg_db_constant.gBillingAcType_Customer then
                    
                    if v_new_setup_tf = 'T' then
                         
                         -- OSPRODUCT-21556
                         v_bill_plan_id := pkg_db_payment_arrangement.fn_get_duplicate_billplan_id
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_new_ptp_payer_id
                                           );
                                           
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Bill Plan: ' || v_bill_plan_id
                              );

                         end if;
                         
                         if v_bill_plan_id is null then

                              -- Set Bill Plan new or existing flag to new to enforce new object creation under new BA
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_new_ptp_payer_id,
                                   pkg_db_payment_arrangement.gbv_PTPayerBillPlanNewExisting,  --211929
                                   pkg_db_payment_arrangement.gllv_PTPPANew --1 -- New
                              );
                              
                         else
                              
                              -- Set Bill Plan new or existing flag to new to enforce new object creation under new BA
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_new_ptp_payer_id,
                                   pkg_db_payment_arrangement.gbv_PTPayerBillPlanNewExisting,  --211929
                                   pkg_db_payment_arrangement.gllv_PTPPAExisting --1 -- New
                              );
                              
                              -- Set Bill Plan new or existing flag to new to enforce new object creation under new BA
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_new_ptp_payer_id,
                                   32573848,  --chosen bill plan
                                   v_bill_plan_id 
                              );
                              
                         end if;                         
                         -- end OSPRODUCT-21556
                    
                    else
                         
                         -- Set Bill Plan new or existing flag to null 
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_payment_arrangement.gbv_PTPayerBillPlanNewExisting,  --211929
                              null
                         );
                              
                    end if;
                    
                    -- set the current bill plan to null
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_payer_id,
                         pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan, --34207146,  --211929
                         null
                    );
                         
                    -- Set the modified bill plan to null                              
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_payer_id,
                         pkg_db_payment_arrangement.gbv_Ref_PTPayerModBillPlan,
                         null
                    );
                    
               else
                    
                    -- Set Bill Plan new or existing flag to existing as the bill plan is already present 
                    -- New object creation not required
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_payer_id,
                         pkg_db_payment_arrangement.gbv_PTPayerBillPlanNewExisting,  --211929
                         pkg_db_payment_arrangement.gllv_PTPPAExisting
                    );
                    
                    if v_new_setup_tf = 'T' then
                         
                         -- set the current bill plan to null
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan, --34207146,  --211929
                              v_old_bill_plan_id
                         );
                         
                    else
                         
                         -- Set the modified bill plan to null                              
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_new_ptp_payer_id,
                              pkg_db_payment_arrangement.gbv_Ref_PTPayerModBillPlan,
                              v_old_bill_plan_id
                         );
                         
                    end if;
                    
               end if;
               
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Set up completed for payer: ' || v_new_ptp_payer_id
                    );

               end if;
               
               v_payer_index := v_ptp_payer_list.next(v_payer_index);
               
          end loop;
          
     else

          -- if no do what is being done correctly
          -- Set the Encrypted Billing Account ID to allow payments through the copied profile
          -- OSPRODUCT-10205
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_billing_account_id,
               gbv_BORdBA_EncryptedAccID,
               pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_old_cust_billing_account_id,
                    gbv_BORdBA_EncryptedAccID
               )
          );
          
          -- Clone all the active CTF          
          if v_new_setup_tf = 'T' then
               
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Cloning old active profils..'
                    );

               end if;
               
               for v_profiles in ( select ctf.ctf_id
                                     from dragon_cashtransferprofile ctf
                                    where ctf.billing_account_id = v_old_cust_billing_account_id
                                      --- and ctf.ctf_id <> v_old_ctf_profile_id
                                      and ctf.profile_mode_id in (pkg_db_profiles.g_PaymentMode_Card, pkg_db_profiles.g_PaymentMode_EFT) -- OSPRODUCT-10184
                                      and pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, ctf.ctf_id, 210153) = 75
                                      and nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, ctf.ctf_id), 'F') = 'F'          
                                      AND pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, pkg_db_profiles.gbv_CTFAdhocRecurring -- OSPRODUCT-31411
                                          ) IS NULL
                                      AND pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, pkg_db_profiles.gbv_CTFRecurranceMode) =
                                      pkg_db_profiles.g_RecurrencyMode_Recurring
                                    )
               loop
                                           
                    -- OSPRODUCT-28688 Make it re-enterant
                    -- Copy only if its not copied already
                    begin
                    
                         select ctf.ctf_id
                           into v_new_ctf_id
                           from dragon_cashtransferprofile ctf
                          where ctf.billing_account_id = v_new_billing_account_id
                                --- and ctf.ctf_id <> v_old_ctf_profile_id
                            and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, 26725501) = v_profiles.ctf_id; -- template id                            
                                
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Profile already copied.. ' ||
                                   '.. Old CTF: ' || v_profiles.ctf_id ||																			
                                   '.. New CTF: ' || v_new_ctf_id 
                              );						

                         end if;
                                
                    exception
                         
                         when no_data_found then
                                
                              /*pkg_os_object_copy.sp_object_clone
                              (
                                   in_session_id                 =>  in_session_id,
                                   in_transaction_id             =>  in_transaction_id,
                                   in_from_object_id             =>  v_profiles.ctf_id,
                                   in_excluded_types             =>  v_excluded_types,
                                   in_included_types             =>  v_included_types,
                                   out_duplicate_object_id       =>  v_new_ctf_id
                              );*/
                              
                              pkg_os_object_copy.sp_object_copy
                              (
                                   in_session_id                  =>  in_session_id,
                                   in_transaction_id              =>  in_transaction_id,
                                   in_from_object_id              =>  v_profiles.ctf_id,
                                   in_to_parent_id                =>  v_new_billing_account_id,
                                   in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                                   in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                                   io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                                   io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                                   out_object_id                  =>  v_new_ctf_id,
                                   in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                                   in_recursive_copy_tf           =>  'F', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                                   in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                                   in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                                   in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                                   in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                                   in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                              );
                              
                              if v_session_control.gLogging_Full
                              then

                                   sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. Old CTF: ' || v_profiles.ctf_id ||
                                        '.. New CTF: ' || v_new_ctf_id 
                                   );

                              end if;					  

                              pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_ctf_id,v_datamart_tf);
                              
                    end;
                    -- OSPRODUCT-28688

               end loop;
          
          end if;
                                    
          -- Get the old bill plan
          v_old_bill_plan_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_old_ptp_id,
                                         pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt
                                    );
                                    
          v_old_ctf_profile_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_old_bill_plan_id,
                                         pkg_db_payment_arrangement.gbv_Ref_PmntArrangementCTF  --30013046
                                    );
                                    
          -- Set up profile BVs
          v_mode := pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_old_ctf_profile_id,
                         pkg_db_profiles.gbv_CTFPaymentMode  --30010546
                    );

          if v_session_control.gLogging_Full
          then

               sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Old Bill Plan: '    || v_old_bill_plan_id ||
                    '.. Old CTF: '          || v_old_ctf_profile_id ||
                    '.. Mode: '             || v_mode
               );

          end if;

          if v_mode in (pkg_db_profiles.g_PaymentMode_Card, pkg_db_profiles.g_PaymentMode_EFT) then
               
               -- Get the CTF with the same details
               v_old_ctf_profile_details := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_old_ctf_profile_id,
                                                 pkg_db_profiles.gbv_CTFProfileDetails --32375746
                                            );
                                            
               v_old_ctf_token_num := pkg_os_object_io.fn_object_bv_get
                                      (
                                          in_session_id,
                                          in_transaction_id,
                                          v_old_ctf_profile_id,
                                          pkg_db_profiles.gbv_CTFEFTTokenNumber --32834040
                                      );
                                      
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Old Profile Detail: ' || v_old_ctf_profile_details ||
                         '.. Old Profile Token Num: ' || v_old_ctf_token_num 
                    );

               end if;
                                                         
               begin
                    
                    -- Ideally we should get a perfect match
                                            
                    select ctf.ctf_id
                      into v_new_ctf_profile_id
                      from dragon_cashtransferprofile ctf
                     where ctf.billing_account_id = v_new_billing_account_id
                       and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, ctf.ctf_id, 26725501) = v_old_ctf_profile_id;                                                     
                                             
                    /*
				select ctf.ctf_id
                      into v_new_ctf_profile_id
				  from dragon_cashtransferprofile ctf
				 where ctf.billing_account_id = v_new_billing_account_id
				   and pkg_os_object_io.fn_object_bv_get(in_session_id,
												 in_transaction_id,
												 ctf.ctf_id,
												 32375746) = v_old_ctf_profile_details
                       and (
                                v_old_ctf_token_num is null
                                or
                                pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,ctf.ctf_id,pkg_db_profiles.gbv_CTFEFTTokenNumber) = v_old_ctf_token_num												  
                           ); */
                           
                    -- OSPRODUCT-28688
                    -- Condition to validate that the copied profile is still in use
                    if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_new_ctf_profile_id, 210153) <> 75 
                       or
                       nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, v_new_ctf_profile_id), 'F') = 'T'
                    then
                         
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. CTF got copied but is not valid anymore. Hence going ahead with the cheque profile..'
                              );

                         end if;
                         
                         v_mode := pkg_db_profiles.g_PaymentMode_Cheque;                    
                    
                    end if;
                           
               exception
                    
                    when no_data_found then
                         
                         if v_session_control.gLogging_Full
                         then

                              sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. CTF not cloned.. If not active anymore skipp cloning and create a cheque profile instead'
                              );

                         end if;
                         
                         -- The CTF is not copied, the reason could be its not active
                         if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_old_ctf_profile_id, 210153) <> 75 
                            or
                            nvl(pkg_db_profiles.fn_is_card_expired(in_session_id, in_transaction_id, v_old_ctf_profile_id), 'F') = 'T'
                         then
                              
                              -- Deactivated on the old account
                              -- Create a default cheque profile or??
                              v_mode := pkg_db_profiles.g_PaymentMode_Cheque;
                              
                              if v_session_control.gLogging_Full
                              then

                                   sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. As not active creating a cheque profile..'
                                   );

                              end if;
                              
                         else
                              
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Something does not seems to be right here. Please analyze...' -- OSPRODUCT-28688
                              );                          
                              
                              -- OSPRODUCT-28688
                              pkg_os_object_copy.sp_object_copy
                              (
                                   in_session_id                  =>  in_session_id,
                                   in_transaction_id              =>  in_transaction_id,
                                   in_from_object_id              =>  v_old_ctf_profile_id,
                                   in_to_parent_id                =>  v_new_billing_account_id,
                                   in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                                   in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                                   io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                                   io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                                   out_object_id                  =>  v_new_ctf_id,
                                   in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                                   in_recursive_copy_tf           =>  'F', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                                   in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                                   in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                                   in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                                   in_resolve_references          =>  TRUE, --FALSE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                                   in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                              );
                              -- end OSPRODUCT-28688
                              
                              if v_session_control.gLogging_Full
                              then

                                   sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. Old CTF: ' || v_old_ctf_profile_id ||
                                        '.. New CTF: ' || v_new_ctf_id 
                                   );

                              end if;

                              pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_ctf_id,v_datamart_tf);
                                             
                         end if;
                         
                    when others then
                                        
                         pkg_os_logging.sp_log_error
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' Error: ' ||sqlerrm|| dbms_utility.format_error_backtrace
                         );

                         raise;
                                       
               end;
               
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. New CTF: ' || v_new_ctf_profile_id ||
                         '.. Mode: ' || v_mode
                    );

               end if;

               if v_mode = pkg_db_profiles.g_PaymentMode_Card then

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_profiles.gbv_PTPCurrentProfile,  --33993546
                         v_new_ctf_profile_id
                    );

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_profiles.gbv_CardProfileNewOrExisting,  --32068240
                         pkg_db_profiles.g_Profile_Type_Existing
                    );

               elsif v_mode = pkg_db_profiles.g_PaymentMode_EFT then

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_profiles.gbv_PTPCurrentProfile,  --33993646
                         v_new_ctf_profile_id
                    );

                     pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_profiles.gbv_EFTProfileNewOrExisting,  --32072540
                         pkg_db_profiles.g_Profile_Type_Existing
                    );

               end if;

          end if;
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_ptp_id,
               pkg_db_profiles.gbv_PTPDownPmntMode,  --211929
               v_mode
          );
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_ptp_id,
               pkg_db_payment_arrangement.gbv_PTPChangePayProfileTF,
               pkg_db_payment_arrangement.gllv_ChangePayProfile
          );
          
          if v_new_setup_tf = 'T' then
               
               -- OSPRODUCT-21556
               v_bill_plan_id := pkg_db_payment_arrangement.fn_get_duplicate_billplan_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_new_ptp_id
                                 );
                                           
               if v_session_control.gLogging_Full
               then

                    sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..Duplicate Bill Plan: ' || v_bill_plan_id
                    );

               end if;
                         
               if v_bill_plan_id is null then

                    -- Set Bill Plan new or existing flag to new
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_payment_arrangement.gbv_PTPPmntArngmntNewExisting, --34216046,  --211929
                         pkg_db_payment_arrangement.gllv_PTPPANew --1 -- New
                    );
                    
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt,  --chosen bill plan
                         null 
                    );
                              
               else
                              
                    -- Set Bill Plan new or existing flag to new
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_payment_arrangement.gbv_PTPPmntArngmntNewExisting, --34216046,  --211929
                         pkg_db_payment_arrangement.gllv_PTPPAExisting --1 -- New
                    );
                              
                    -- Set Bill Plan new or existing flag to new to enforce new object creation under new BA
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_ptp_id,
                         pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt,  --chosen bill plan
                         v_bill_plan_id 
                    );
                              
               end if;                         
               -- end OSPRODUCT-21556
               
          else
               
               -- set the current bill plan to null
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_new_ptp_id,
                    pkg_db_payment_arrangement.gbv_Ref_PTPAssciatdPmntArngmnt, --34207146,  --211929
                    null -- New
               );
               
          end if;
        
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_new_ptp_id,
               pkg_db_payment_arrangement.gbv_Ref_PTPModifiedPmntArngmnt,
               null
          );
          
     end if;
     
exception
     when others then
          
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Error: ' ||sqlerrm||dbms_utility.format_error_backtrace
          );
                                             
          raise;
          

end sp_clone_ctf_to_rewrite_policy;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_collect_installments
--
--  %USAGE
--      Procedure to create a collection of all fitems for theOLD policy During BOR
--      the procedure will loop all fitems of passed policy and create collection based on index
--      index will include policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--
--  %ALGORITHM
--      1)  Loop through all fitems of passed policy
--      2)  create index by concatinating policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--      3)  check if index is already present in collection
--      4)  If it's present, add balance amount and original amount to existing amount
--      5)  If index is not present, set all the vaules on new index.
--
--  %PARAM     in_session_id                  Session Id
--  %PARAM     in_transaction_id              Transaction Id
--  %PARAM     in_policy_id                   Policy Id
--  %PARAM     io_installment_list            List of indexed records
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_collect_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     io_installment_list                in out   t_installments_tab,
	 io_rb_installment_list             in out   t_installments_tab -- OSPRODUCT-20605
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_collect_installments';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_idx                              varchar2(500); -- OSPRODUCT-22952
     v_policy_transaction_type          number;
     v_policy_transaction_state         number;
	 
	 -- OSPRODUCT-30081
     v_installment                      number;
     v_inst_number                      number;
     v_stub_number                      number;

     cursor All_transaction_fitems
     is
		select *
		  from dragon_fitem
		 where policy_id = in_policy_id
		   and policy_transaction_id is not null
		   and fitem_type_id = pkg_db_billing.gFItem_Debit
		   and fitem_category_id not in
			  (pkg_db_billing.gFItem_Cat_Commission)
		   and billing_account_id not in
			  (select billingaccount_id
				from dragon_billingaccount
			    where account_type_id in
					(pkg_os_admin.genum_PartnerType_WritingComp))
		 order by fitem_id;
           
begin
     
     for r_fitems in All_transaction_fitems
     loop
	 
          -- OSPRODUCT-30081
          select
          	to_number ( 
                              substr 
                              ( 
                                   nvl ( r_fitems.installment_number, 0 )
                                   , 1
                                   , decode ( instr ( nvl ( r_fitems.installment_number, 0 ), '.'), 0, length ( nvl ( r_fitems.installment_number, 0 ) ) + 1, instr( nvl ( r_fitems.installment_number, 0 ), '.') ) - 1
                              )
                         )
          into
               v_inst_number
          from dual;
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Installment number ' || v_inst_number
               );
          end if;
          
          select
          	to_number ( 
                              decode 
                              ( 
                                   instr ( nvl ( r_fitems.installment_number, 0 ),'.')
                                   , 0
                                   , 0
                                   , ( substr ( nvl ( r_fitems.installment_number, 0 ), instr ( nvl ( r_fitems.installment_number, 0 ), '.') + 1 ) ) /100
                              )
                         )
          into
               v_stub_number
          from dual;
          
          v_installment := nvl(v_inst_number,0) + nvl(v_stub_number,0);          
          -- end OSPRODUCT-30081
          
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Stub number: ' || v_stub_number ||
                    '.. Installment number: ' || v_installment
               );
          end if;
          
          -- OSPRODUCT-30081
          v_idx := r_fitems.billing_account_id||'-'|| r_fitems.policy_transaction_id||'-'||v_installment||'-'|| r_fitems.billing_element_md_id||'-'||r_fitems.fitem_asset_id; -- OSPRODUCT-22952
          
          -- if the transaction is rolled back
          v_policy_transaction_type := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             r_fitems.policy_transaction_id,
                                             pkg_os_constant_bv.gbv_PolicyTranType
                                        );
                                        
          
          v_policy_transaction_state := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             r_fitems.policy_transaction_id,
                                             210153
                                        );
                                        
          if v_session_control.gLogging_Full
          then
               sp_log
               --pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..Transaction Type: '   || v_policy_transaction_type || 
                    '..Transaction State: '  || v_policy_transaction_state ||
                    '..Index: '              || v_idx
               );
          end if;
		  
		  if v_policy_transaction_state = 27502 -- rolledback
             or
             v_policy_transaction_type= pkg_os_policy_transaction.gPolicyTrxType_Rollback
          then
               
               if(io_rb_installment_list.exists(v_idx))
               then
                    
                    io_rb_installment_list(v_idx).balance_amount  := io_rb_installment_list(v_idx).balance_amount + r_fitems.balance;
                    io_rb_installment_list(v_idx).initial_amount  := io_rb_installment_list(v_idx).initial_amount + r_fitems.initial_amount;

                    if v_session_control.gLogging_Full
                    then
                         sp_log
                         --pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Rollback list .. Updating balance_amount:'||io_rb_installment_list(v_idx).balance_amount
                              || ' and initial amount:' ||io_rb_installment_list(v_idx).initial_amount
                         );
                    end if;

               else
                    
                    io_rb_installment_list(v_idx).billing_account_id  := r_fitems.billing_account_id;
                    io_rb_installment_list(v_idx).policy_id  := r_fitems.policy_id;
                    --io_installment_list(v_idx).policy_term_id  := r_fitems.policy_term_id;
                    io_rb_installment_list(v_idx).policy_transaction_id  := r_fitems.policy_transaction_id;
                    --io_installment_list(v_idx).installment_id  := r_fitems.installment_id;
                    io_rb_installment_list(v_idx).installment_no  := v_installment; -- OSPRODUCT-30081 r_fitems.installment_number;
                    io_rb_installment_list(v_idx).element_md_id  := r_fitems.billing_element_md_id;
                    io_rb_installment_list(v_idx).balance_amount  := NVL( r_fitems.balance,0);
                    io_rb_installment_list(v_idx).initial_amount  := NVL( r_fitems.initial_amount,0);

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..Rollback list .. Adding balance_amount:'|| io_rb_installment_list(v_idx).balance_amount
                              || ' and initial amount:'|| io_rb_installment_list(v_idx).initial_amount
                         );
                    end if;

               end if;
          
          
          end if;
               
          if(io_installment_list.exists(v_idx))
          then
               io_installment_list(v_idx).balance_amount  := io_installment_list(v_idx).balance_amount + r_fitems.balance;
               io_installment_list(v_idx).initial_amount  := io_installment_list(v_idx).initial_amount + r_fitems.initial_amount;
                              
               if v_session_control.gLogging_Full
               then
                    sp_log
                    --pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......updating balance_amount:'||io_installment_list(v_idx).balance_amount
                         || ' and initial amount:'||io_installment_list(v_idx).initial_amount
                    );
               end if;
                        
          else
               
               io_installment_list(v_idx).billing_account_id  := r_fitems.billing_account_id;
               io_installment_list(v_idx).policy_id  := r_fitems.policy_id;
               --io_installment_list(v_idx).policy_term_id  := r_fitems.policy_term_id;
               io_installment_list(v_idx).policy_transaction_id  := r_fitems.policy_transaction_id;
               --io_installment_list(v_idx).installment_id  := r_fitems.installment_id;
               io_installment_list(v_idx).installment_no  := v_installment; --OSPRODUCT-30081 r_fitems.installment_number;
               io_installment_list(v_idx).element_md_id  := r_fitems.billing_element_md_id;
               io_installment_list(v_idx).balance_amount  := NVL( r_fitems.balance,0);
               io_installment_list(v_idx).initial_amount  := NVL( r_fitems.initial_amount,0);
                              
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......adding balance_amount:'||io_installment_list(v_idx).balance_amount
                         || ' and initial amount:'||io_installment_list(v_idx).initial_amount
                    );
               end if;               
                     
          end if;
              
              
     end loop;
               
end sp_collect_installments;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_credit_apply
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_billing_account_id              in  object.object_id%type,
     in_prior_billing_account           in  object.object_id%type,
     in_policy_id                       in  object.object_id%type,
     in_prior_policy_id                 in  object.object_id%type,
     in_policytrx_id                    in  object.object_id%type,   
     in_installment_no                  in number, 
     in_element_id                      in object.object_id%type,  
     in_debit_fitem_id                  in object.object_id%type, 
     in_credit_fitem_id                 in object.object_id%type, 
     in_debit_balance                   in number,
     io_remaining_credit                in out number,
     io_batrxset_id                     in out object.object_id%type, 
     io_installment_list                in out   t_installments_tab,  
     io_fitem_policy_term_list          in out  pkg_db_credit_apply.t_fitem_policy_term_tab,
     io_fitem_installment_list          in out pkg_db_credit_apply.t_fitem_installment_tab,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type,
     in_remaining_credit_flag           in  number default 0,
     in_fitem_asset_id                  in object.object_id%type default null -- OSPRODUCT-22952
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_credit_apply';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_policy_id                        object.object_id%type;
     v_prior_cancel_trans_id            object.object_id%type;
     v_rewrite_trx                      object.object_id%type;
     v_credit_apply_amt                 number;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_total_amount                     number;
     v_total_items                      number;
     v_fi_trx_cash_apply_id             object.object_id%type;
     v_fitrx_type_id                    number;
     v_current_date_time                date; -- HC set it
       
     v_fitem_installment_id             object.object_id%type;
     
     v_fitem_installment_index          number;
     v_fitem_policy_term_id             object.object_id%type;
     
     v_fitem_policy_term_index          number;
     v_datamart_tf                      char(1) := 'T';
     v_rollforward_trx                  object.object_id%type;
     v_idx                              varchar2(500); -- OSPRODUCT-22952
	 v_old_asset_id                     object.object_id%type; -- OSPRODUCT-22952
	 
     --OSPRODUCT-7199 start
     Cursor c_trx 
     is
          Select 
               policy_trx_id
          from 
               dragon_policy_trx
          where
               policy_id = in_prior_policy_id
          and
               policy_trx_object_state_id = pkg_os_constant.gObjState_TransactionProcessed
          order by 
               policy_trx_id;
     --OSPRODUCT-7199 end
	 
     
     v_pt_term_id  object.object_id%type;
     v_prior_term_id object.object_id%type;
     
begin

     -- We'll find the corresponding transaction on old policy
     -- OSPRODUCT-20600
     v_rollforward_trx := fn_get_pt_from_bor_policy
                          (
                             in_session_id,
                             in_transaction_id,
                             in_policytrx_id
                          );
                          
     /*-- We'll find the corresponding transaction on old policy
     v_rollforward_trx :=pkg_os_object_io.fn_object_bv_get
                         (
                             in_session_id,
                             in_transaction_id,
                             in_policytrx_id,
                             gbv_xREF_PolTrx_RollFWDTrx   -- PolicyTransaction - xReference -  _Reference_Rolls forward
                         );
                         
     if v_session_control.gLogging_Full then
               
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. PT ID: ' || in_policytrx_id ||
               '.. Term creator trx: ' || v_rollforward_trx
          );
               
     end if;

     -- If v_rollforward_trx is null, that means it's the Rewrite transaction .
     -- So, we need to get new_business_transaction on old policy
     if v_rollforward_trx  is null
     then
          -- Get the term it belongs to
          v_pt_term_id := pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  in_policytrx_id,
                                  29728801
                             );
                             
          v_prior_term_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_pt_term_id,
                                       31531746   -- predecessor term
                                  );
                                  
          -- get the tern creator trx
          v_rollforward_trx := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_prior_term_id,
                                    29749301 -- creator trx
                               );
                               
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. PT ID: ' || in_policytrx_id ||
                    '.. PT Term ID: ' || v_pt_term_id ||
                    '.. Corrseponding prior term id: ' || v_prior_term_id ||
                    '.. Term creator trx: ' || v_rollforward_trx
               );
               
          end if;
          
          \*v_rollforward_trx := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_prior_policy_id,
                                       gbv_xREF_Pol_NBTrx   -- Policy - _Reference_New Business Transaction
                                  );
          *\
     end if;*/
                         
     if v_session_control.gLogging_Full then
               
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. PT ID: ' || in_policytrx_id
          );
               
     end if;
     -- end OSPRODUCT-20600
     
     --OSPRODUCT-7199 start
     if in_remaining_credit_flag = g_remaining_credit_flag then
          
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '........... Settling Change Payment Plan credit'
               );
               
          end if;
          for r_trx in c_trx loop
               
               v_old_asset_id := fn_get_old_asset_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      in_fitem_asset_id                                     
                                 );-- OSPRODUCT-22952       
     
               v_idx := in_prior_billing_account|| '-'|| r_trx.policy_trx_id ||'-'||in_installment_no||'-' || in_element_id ||'-' || v_old_asset_id; -- OSPRODUCT-22952
               
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........... v_idx:' || v_idx ||
                         '........... Old asset id: ' || v_old_asset_id
                    );

               end if;

               -- Check if that index is present in passed collection, find the amount balance on this index in old policy
               if io_installment_list.exists(v_idx)
               then
                    
                    v_credit_apply_amt := v_credit_apply_amt + NVL(in_debit_balance,0) - io_installment_list(v_idx).balance_amount;
                    
                    if v_session_control.gLogging_Full then
                         
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '........... Debit balance:' || in_debit_balance ||
                              '........... Balance from old policy: ' || io_installment_list(v_idx).balance_amount
                         );
                              
                    end if;
                         
                    -- cash apply amount should be calculated as current item's balance-old items's balance
                    -- or credit balance in case credit is less
                    if v_credit_apply_amt > 0 then
                         
                         v_credit_apply_amt := least(io_remaining_credit, v_credit_apply_amt);
                         
                         if v_session_control.gLogging_Full then
                              
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '........... Final credit apply amt:' || v_credit_apply_amt
                              );
                              
                         end if;
                         
                    end if;
                    
               end if;
               
          end loop;
          
     else
          
          v_old_asset_id := fn_get_old_asset_id
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 in_fitem_asset_id                                
                            );  -- OSPRODUCT-22952 
               
          --OSPRODUCT-7199 end
          v_idx := in_prior_billing_account|| '-'|| v_rollforward_trx ||'-'||in_installment_no||'-' || in_element_id||'-' || v_old_asset_id; -- OSPRODUCT-22952
          
																													 
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '........... v_idx:' || v_idx || 
                    '........... Old asset id: ' || v_old_asset_id
               );
               
          end if;
          -- Check if that index is present in passed collection, find the amount balance on this index in old policy
          if io_installment_list.exists(v_idx)
          then
               
               v_credit_apply_amt := NVL(in_debit_balance,0) - io_installment_list(v_idx).balance_amount;
			   
			   if v_session_control.gLogging_Full then
                         
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........... Debit balance:' || in_debit_balance ||
                         '........... Balance from old policy: ' || io_installment_list(v_idx).balance_amount
                    );
                              
               end if;

               -- cash apply amount should be calculated as current item's balance-old it's balance
               -- or credit balance in case credit is less
               if v_credit_apply_amt > 0 then

                    v_credit_apply_amt := least(io_remaining_credit, v_credit_apply_amt);

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '........... Final credit apply amt:' || v_credit_apply_amt
                         );

                    end if;
                    
               end if;
          
          else
               
               return;
               
          end if;
			  
     end if;  --OSPRODUCT-7199

     if v_credit_apply_amt > 0
     then
                             
          if io_batrxset_id is null
          then
          --
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_credit_apply.gObjType_BillingAccountTrxSet, -- object type : billing_trx_set
                    in_billing_account_id,          -- #MP Create the billing batch under the primary insured billing account.
                    io_batrxset_id
               );

               -- Set batch Type as AutoCreditApply
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    io_batrxset_id,
                    pkg_db_credit_apply.gbv_FITrxSetBatchType,
                    pkg_db_credit_apply.gBatch_AutoCreditApply
               );    
          end if;              
          --
          --  Get the Installment ID from the Target FItem VSTS9223 Cheryl 20190821
          --

          select
              installment_id, policy_term_id
          into
              v_fitem_installment_id, v_fitem_policy_term_id
          from
              dragon_fitem
          where
              fitem_id = in_debit_fitem_id;

          --
          --  Check if this Installment already exists in the list
          --  If not, then add it to the List OSBILLING-6086
          --

          if v_fitem_installment_id is not null and v_fitem_policy_term_id is not null
          then

               if io_fitem_installment_list.exists(v_fitem_installment_id)
               then

                    if v_session_control.gLogging_Full then

                        pkg_os_logging.sp_log
                        (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '......... Installment ID already exist in the list : '||v_fitem_installment_id
                        );

                    end if;

               else

                    io_fitem_installment_list(v_fitem_installment_id) := v_fitem_installment_id;

               end if;

               if io_fitem_policy_term_list.exists(v_fitem_policy_term_id)
               then

                    if v_session_control.gLogging_Full then

                        pkg_os_logging.sp_log
                        (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '......... Policy Term ID already exist in the list : '||v_fitem_policy_term_id
                        );

                    end if;

               else

                    io_fitem_policy_term_list(v_fitem_policy_term_id) := v_fitem_policy_term_id;

               end if;

          end if;
                                        
          -- Create a Credit Apply FITransaction
          v_bv_table.delete;
          v_bv_table(pkg_db_credit_apply.gbv_FITrx_ApplyCashFItem).business_variable_value := in_credit_fitem_id;
          v_bv_table(pkg_db_credit_apply.gbv_FITrx_ApplyDueFItem).business_variable_value := in_debit_fitem_id;
          v_bv_table(pkg_db_credit_apply.gbv_FITransaction_Amount).business_variable_value := v_credit_apply_amt;

          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                  =>     in_session_id,
               in_transaction_id              =>     in_transaction_id,
               in_fitrx_parent_fitrxset_id    =>     io_batrxset_id,
               in_fitrx_type                  =>     pkg_db_credit_apply.gFITrxType_Credit_Apply, --PMADEV-758 use v_fitrx_type_id
               in_fitrx_ref_associatedpolicy  =>     in_policy_id,
               in_fitrx_ref_associatedpoltrx  =>     in_policytrx_id,
               in_fitrx_ref_actionpolicy      =>     in_policy_id,
               in_fitrx_ref_actionpoltrx      =>     in_policytrx_id,
               in_fitrx_effective_date        =>     v_current_date_time,
               in_bv_table                    =>     v_bv_table,
               out_fitransaction_id           =>     v_fi_trx_cash_apply_id
          );

          v_total_amount     := NVL(v_total_amount,0)+ abs(v_credit_apply_amt);
          v_total_items      := NVL(v_total_items,0)+1;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......... Created FITransaction Object: '||v_fi_trx_cash_apply_id|| ' for Credit Apply'
                    ||' Total Amount: '||v_total_amount
                    ||' Total items: '||v_total_items
               );

          end if;


          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               io_batrxset_id,
               pkg_db_credit_apply.gbv_BillAcctTrxSet_CurrTrx,
               v_fi_trx_cash_apply_id
          );--- Durgesh



          -- Credit Apply call here
          pkg_db_cash_apply.sp_vanilla_cash_apply
          (
               in_session_id,
               in_transaction_id,
               v_fi_trx_cash_apply_id,
               io_action_outcome_id
          );

          -- Update FItem balance in collection. These were already updated to datamart in sp_vanilla_cash_apply
          io_remaining_credit       :=   io_remaining_credit - v_credit_apply_amt;
                                
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......... Remaining credit: '||io_remaining_credit
               );

          end if;

                                
                               
          pkg_db_object.sp_fitransaction_process
          (
               in_session_id,
               in_transaction_id,
               io_batrxset_id,
               v_fi_trx_cash_apply_id,
               io_action_outcome_id,
               in_update_counts_tf => 'T'
          );

                         
     end if;

    
end sp_credit_apply;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_sync_installments
--
--  %USAGE
--      Procedure to apply credits on installments such that it matches the original policy
--      the procedure will loop all fitems of passed policy and create collection based on index
--      index will include policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--
--  %ALGORITHM
--      1)  Loop through all fitems of passed policy
--      2)  create index by concatinating policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--      3)  check if index is already present in collection
--      4)  If it's present, add balance amount and original amount to existing amount
--      5)  If index is not present, set all the vaules on new index.
--
--  %PARAM     in_session_id                  Session Id
--  %PARAM     in_transaction_id              Transaction Id
--  %PARAM     in_policy_id                   Policy Id
--  %PARAM     io_installment_list            List of indexed records
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_sync_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     in_prior_policy_id                 in  object.object_id%type,
     io_installment_list                in out   t_installments_tab,
	 io_rb_installment_list             in out   t_installments_tab, -- OSPRODUCT-20605
     io_action_outcome_id               in out number
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_sync_installments';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_remaining_credit                 number;
     v_batrxset_id                      object.object_id%type;
     v_fitem_policy_term_list           pkg_db_credit_apply.t_fitem_policy_term_tab;
     v_fitem_installment_list           pkg_db_credit_apply.t_fitem_installment_tab;
     v_fitem_installment_index          number;
     v_datamart_tf                      char(1) := 'T';
     v_fitem_policy_term_index          number;
     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_object_cache                     pkg_os_object_cache.t_object_cache;
     v_current_date_dnf                 varchar2(100) := to_char( pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_policy_id), pkg_os_constant.DragonDateFormatDefault );
     v_rollforward_trx                  object.object_id%type;
     v_idx                              varchar2(500);-- OSPRODUCT-22952
     v_ultimate_customer_id             object.object_id%type;
     v_primary_entity_id                object.object_id%type;
     --v_customer_billing_acc_id          object.object_id%type;  --OSPRODUCT-10210
     v_prior_policy_balance             number := 0;
     v_policy_fitem_count               number;             --OSPRODUCT-9914
     v_billing_fitem_count              number;             --OSPRODUCT-9914
     v_action_id                        number := 1461948;  --OSPRODUCT-9914
     v_term_Creator_trx_id              object.object_id%type; 	--OSPRODUCT-10442    
     v_prior_term_id                    object.object_id%type;  --OSPRODUCT-10442    
     v_term_balance                     number := 0;        	--OSPRODUCT-10442    
     v_prior_payer_ba_id                object.object_id%type; 	--OSPRODUCT-10442
     v_multipayer_enabled_tf            boolean;--OSPRODUCT-10690
     v_policy_balance                   number := 0;             --UTPRODUCT-4931
     v_amount                           number := 0; 
     v_target_policy_trx_id             object.object_id%type;
     v_target_billing_acc_id            object.object_id%type;
     v_source_policy_trx_id             object.object_id%type;
     v_source_billing_acc_id            object.object_id%type;
     v_source_fitem_id                  object.object_id%type;        
     v_credit_transfer_btx_id           object.object_id%type;
     v_fitransaction_id                 object.object_id%type;
     v_target_policy_id                 object.object_id%type;
     v_source_policy_id                 object.object_id%type;
     v_balance                          number;
     v_crd_trnsfr_frm_new_plcy_tf       char(1) := 'F';
     v_term_payer_ba_list               pkg_os_object.t_object_list;
     v_ba_idx                           number; -- binary_integer;
     v_credit_transfer_amnt             number := 0;
     v_old_customer_billing_acc_id      object.object_id%type;
     v_transfer_total_items             number := 0;
	 v_old_asset_id                     object.object_id%type;
     
     cursor c_policyterm
     is
     select policy_term_id from dragon_policy_term
     where 
     policy_id = in_policy_id;
     cursor c_credits
     is
          select * from dragon_fitem
          where policy_id =in_policy_id
          and fitem_type_id=pkg_db_billing.gFItem_Debit
          and fitem_category_id not in (pkg_db_billing.gFItem_Cat_Commission)
          and billing_account_id not in (select billingaccount_id from dragon_billingaccount where account_type_id  in (pkg_os_admin.genum_PartnerType_WritingComp))
          and balance<0
          order by fitem_id;
     
     cursor c_debits
     (
          cin_element_md_id            number
     )
     is
          select * from dragon_fitem
          where policy_id =in_policy_id
          and fitem_type_id=pkg_db_billing.gFItem_Debit
          and fitem_category_id not in (pkg_db_billing.gFItem_Cat_Commission)
          and billing_account_id not in (select billingaccount_id from dragon_billingaccount where account_type_id  in (pkg_os_admin.genum_PartnerType_WritingComp))
          and balance > 0
          and 
          (
            billing_element_md_id = cin_element_md_id 
            or
            cin_element_md_id is null
          )
          order by fitem_id;
    
begin

     v_fitem_installment_list.delete;
     v_fitem_policy_term_list.delete;
     --v_prior_policy_balance        :=  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_prior_policy_id,32092840);

     -- Multipayer enabled?
     v_multipayer_enabled_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_prior_policy_id
                                );
                                
     v_ultimate_customer_id        :=  pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_prior_policy_id,pkg_os_constant.gObjType_Customer);
     v_primary_entity_id           :=  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_ultimate_customer_id,pkg_base_customer.gbv_CustRefPrimaryEntity);					  
     v_old_customer_billing_acc_id :=  pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_primary_entity_id,pkg_db_billing_modify.gObjType_BillingAccount);


     for term in c_policyterm
     loop

          -- -- OSPRODUCT-20600
          v_prior_term_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       term.policy_term_id,
                                       31531746   -- predecessor term
                                  );

          if v_session_control.gLogging_Full then
                    
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Corrseponding prior term id: ' || v_prior_term_id 
               );
                    

          end if;   
          
          -- Prior Term ID
          --v_prior_term_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id, v_rollforward_trx, 29728801); -- Belongs to
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id, v_procedure_name,
																		  
                    '.. Prior Term ID: '           || v_prior_term_id
               );

          end if;
          
          -- Get the excess cash
          /*UTPRODUCT-4931*/
          -- To handle excess cash
          begin
               
               select 
                      sum(nvl(df.balance,0))
               into 
                      v_policy_balance
               from
                      dragon_fitem df
               where
                      df.policy_id = in_prior_policy_id
               and
                      df.policy_term_id = v_prior_term_id
               and
                      df.fitem_category_id = 646
               and
                      df.balance <> 0
               and
                      df.fitem_type_id = 246; --146 OSPRODUCT-18216
                      
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '..Excess cash: ' || v_policy_balance ||
                         '..on old Policy: '  || in_prior_policy_id ||
                         '..Term: '           || v_prior_term_id
                    );

               end if;

          exception
                
               when others then
                        
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '.. In exception block when trying to get policy balance: ' || v_policy_balance
                         );

                    end if;
          end;          
          
          -- Get prior term balance
          begin
               
               select
                    nvl(sum(df.balance),0)
               into
                    v_term_balance
               from
                    dragon_fitem df
               where
                    df.policy_id = in_prior_policy_id 
               and
                    df.policy_term_id = v_prior_term_id
               /*and
                    df.fitem_type_id = 146*/
               and
                    df.fitem_category_id not in (pkg_db_functions.gFItem_Category_Cash,pkg_db_functions.gFItem_Category_Writeoff,pkg_db_functions.gFItem_Category_Comm,pkg_db_functions.gFItem_Category_DefPremComm,pkg_db_functions.gFitem_category_LossGain)--OSPRODUCT-12759
               and
                    df.fitem_sub_category_id not in (pkg_db_functions.gFitem_SubCat_PLRRetroAdj)
               and
                    df.billing_account_id not in (select billingaccount_id from dragon_billingaccount where account_type_id is null or account_type_id = 1501);
               
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '..Prior policy term balance (excluding cash) ' || v_term_balance
                    );

               end if;               
               
          exception 
               
               when others then 
                    
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '.. In exception block when trying to get term balance: ' || v_term_balance
                         );

                    end if;                    
          end;
               
          /*v_term_balance            := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_prior_term_id,34110446) + v_policy_balance; -- Term outstanding balance*/
          v_term_balance            := nvl(v_term_balance,0) + nvl(v_policy_balance,0); -- Term outstanding balance -- OSPRODUCT-17230 added nvl
          v_prior_policy_balance    := nvl(v_prior_policy_balance,0) +  v_term_balance;


          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Prior Term ID : ' || v_prior_term_id ||
                    '.. Prior Policy ID : ' || in_prior_policy_id ||
                    '.. Prior Term Balance (including cash) : ' || v_term_balance ||
                    '.. Policy Cash : '     || v_policy_balance ||
                    '.. Total Prior Policy Balance : ' || v_prior_policy_balance
               );

          end if;

          /*UTPRODUCT-4931*/

          if v_term_balance <> 0 then
               
               Select
                    count(1)
               into
                    v_policy_fitem_count
               from
                    dragon_fitem f
               where
                    f.policy_term_id = v_prior_term_id
               and
                    f.billing_account_type_id <> 1501
               and
                    f.fitem_type_id = pkg_db_billing_modify.gFItem_Debit
               and
                    f.balance <> 0 -- OSPRODUCT-18235
               and
                    f.billing_element_md_id is not null;
                    
               
			   if v_session_control.gLogging_Full then
			   
				   pkg_os_logging.sp_log_error
						(
							 in_session_id, in_transaction_id, v_procedure_name,
							 ' Policy Fitem count: ' || v_policy_fitem_count
						);
			   
				   for v_fitem in (Select
									   f.fitem_id,
									   f.balance,
									   f.policy_transaction_id,
									   f.initial_amount
								  from
									   dragon_fitem f
								  where
									   f.policy_term_id = v_prior_term_id
								  and
									   f.billing_account_type_id <> 1501
								  and
									   f.fitem_type_id = pkg_db_billing_modify.gFItem_Debit
								  and
									   f.balance <> 0
								  and
									   f.billing_element_md_id is not null)
				   loop
									   
						pkg_os_logging.sp_log_error
							 (
								  in_session_id, in_transaction_id, v_procedure_name,
								  '.. Fitem ID: ' || v_fitem.fitem_id ||
								  '.. Balance: ' || v_fitem.balance ||
								  '.. PT ID: ' || v_fitem.policy_transaction_id ||
								  '.. Initial Amt: ' || v_fitem.initial_amount
							 );
									   
				   end loop;
			   
			   end if;

               if v_policy_fitem_count > 0 then
			   
					if v_session_control.gLogging_Full then
                         
                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '..Dues left on the old policy..'
                         );
                         
                    end if;
                    
                    if v_multipayer_enabled_tf
                    then
                         
                         Select
                              tp.payer_billing_account_id
                         bulk collect into
                              v_term_payer_ba_list
                         from
                              dragon_policy_term_payer tp
                         where
                              tp.policy_id = in_prior_policy_id
                         and
                              tp.policy_term_id = v_prior_term_id; -- OSPRODUCT-15768
                    else
                         
                         Select
                              v_old_customer_billing_acc_id
                         bulk collect into
                              v_term_payer_ba_list
                         from
                              dual;
                              
                    end if;

                    v_ba_idx := v_term_payer_ba_list.first;

                    while v_ba_idx is not null loop
                         
                         v_target_billing_acc_id := v_term_payer_ba_list(v_ba_idx);
                         --v_credit_transfer_btx_id := null;
                         
                         if v_session_control.gLogging_Full then
                                        
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '.. Considering Billing Account ID: ' || v_target_billing_acc_id                                  
                              );
                                   
                         end if;
                    
                         -- Check for any credit that got used on the old policy.
                         for v_credit_to_transfer in (
                                                       select fi.fitem_id,
                                                              fi.action_delta,
                                                              fi.policy_transaction_id,
                                                              fi.billing_account_id,
                                                              fi.installment_no, 
                                                              fi.fitem_category_id, 
                                                              fi.fitem_sub_category_id
                                                         from dragon_fichange fi,                                                         
                                                              dragon_fitransaction f
                                                        where fi.fitransaction = f.fitransaction_id
                                                          and fi.policy_id = in_prior_policy_id
                                                          and fi.billing_account_id = v_target_billing_acc_id
                                                          and fi.policy_transaction_id is not null
                                                          and fi.action_id = 201 -- change
                                                          and f.batch_type_id in (2401, 2301, 901, 2101)
                                                          -- 901 - automated writeoff
                                                          -- 2101 - manual write off 
                                                          -- 2401 - cash credit transfer
                                                          -- 2301 - Disbusrement                                                         
                                                          and fi.session_id != in_session_id
                                                          and f.status_enum = 37646 -- processed                                                 
                                                       )
                         loop
                              
                              if v_crd_trnsfr_frm_new_plcy_tf = 'F' then
                                   
                                   v_crd_trnsfr_frm_new_plcy_tf := 'T';
                                   
                                   if v_session_control.gLogging_Full then
                                        
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id, 
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '.. Found credits on old policy associated with PTs that were transferred or disbursed..' ||
                                             '.. Transferring such credits from new policy..'                                        
                                        );
                                   
                                   end if;
                              
                              end if;
                              
                              -- Found credits that were used on the old policy
                              -- credit transfer from new to old policy                         
                              v_target_policy_trx_id := v_credit_to_transfer.policy_transaction_id;
                              v_target_policy_id     := in_prior_policy_id;
                              
                              if v_session_control.gLogging_Full then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        '.. Old Policy ID: '         || v_target_policy_id ||
                                        '.. Old Billing Acc ID: '    || v_target_billing_acc_id ||
                                        '.. Policy Trx ID: '         || v_target_policy_trx_id ||
                                        '.. Fitem ID: '              || v_credit_to_transfer.fitem_id ||
                                        '.. Transfer Amt: '          || v_credit_to_transfer.action_delta
                                   );
                                   
                              end if;
                              
                              -- Get the source details
                              -- Transaction from the new policy
                              v_source_policy_id := in_policy_id;
                              
                              v_source_policy_trx_id := fn_get_pt_from_bor_policy
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_target_policy_trx_id,
                                                             'N'
                                                        );
                                                        
                              v_source_billing_acc_id := fn_get_ba_in_bor_customer
                                                         (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             pkg_os_object.fn_object_parent_get
                                                             (
                                                                  in_session_id,
                                                                  in_transaction_id,
                                                                  in_policy_id
                                                             ),
                                                             v_target_billing_acc_id
                                                         );
                                                         
                              -- Get the source fitem id
                              select
                                   fi.fitem_id
                              into
                                   v_source_fitem_id
                              from
                                   dragon_fitem fi
                              where
                                   fi.billing_account_id = v_source_billing_acc_id
                              and
                                   fi.policy_transaction_id = v_source_policy_trx_id
                              and
                                   fi.installment_number = v_credit_to_transfer.installment_no
                              and                              
                                   fi.fitem_category_id = v_credit_to_transfer.fitem_category_id
                              and
                                   fi.fitem_sub_category_id = v_credit_to_transfer.fitem_sub_category_id;
                                   
                              if v_session_control.gLogging_Full then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        '.. Respective credits from new policy.. ' ||
                                        '.. Policy ID: ' || v_source_policy_id ||
                                        '.. Billing Acc ID: ' || v_source_billing_acc_id ||
                                        '.. Policy Trx ID: '  || v_source_policy_trx_id ||
                                        '.. Fitem ID: '       || v_source_fitem_id
                                   );
                                   
                              end if;
                              
                              --   
                              -- Create a BillingAccounTrxSet
                              --
                              if v_credit_transfer_btx_id is null
                              then
                                   
                                   pkg_os_object.sp_object_create
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        pkg_db_credit_apply.gObjType_BillingAccountTrxSet, -- object type : billing_trx_set
                                        v_old_customer_billing_acc_id,          -- #MP this is correct. The billing batch must be created under the primary insured BA,
                                        v_credit_transfer_btx_id
                                   );
                                   
                                   -- Set batch Type as CreditTransfer
                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_credit_transfer_btx_id,
                                        pkg_db_credit_apply.gbv_FITrxSetBatchType,
                                        2401 -- 2401=Cash/Credit Transfer , 4401=Credit Transfer
                                   );
                                   
                                   if v_session_control.gLogging_Full then
                                        
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id, 
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '.. Batch ID: ' || v_credit_transfer_btx_id
                                        );
                                        
                                   end if;

                              end if;
                              
                              --Create a FITransaction
                              v_bv_table.delete;
                              v_bv_table(pkg_db_cash_transfer.gbv_FITrx_SubCategory).business_variable_value := pkg_db_cash_transfer.gFItem_SubCat_TransCash;
                              v_bv_table(pkg_db_object.gbv_FITrx_RefFromAcc).business_variable_value := v_source_billing_acc_id;
                              v_bv_table(pkg_db_object.gbv_FITrx_RefFromPol).business_variable_value := in_policy_id;


                              pkg_db_object.sp_fitransaction_create
                              (
                                   in_session_id                 =>   in_session_id,
                                   in_transaction_id             =>   in_transaction_id,
                                   in_fitrx_ref_billing_account  =>   v_target_billing_acc_id, 
                                   in_fitrx_parent_fitrxset_id   =>   v_credit_transfer_btx_id,
                                   in_fitrx_ref_associatedfitem  =>   v_source_fitem_id,
                                   in_fitrx_ref_actionpolicy     =>   in_prior_policy_id,
                                   in_fitrx_ref_associatedpolicy =>   in_policy_id, 
                                   in_fitrx_amount               =>   (-1 * v_credit_to_transfer.action_delta),
                                   in_fitrx_type                 =>   pkg_db_cash_transfer.gFITrxType_CashTransfer,
                                   in_fitrx_effective_date       =>   v_current_date_dnf,
                                   in_fitrx_gl_date              =>   v_current_date_dnf,
                                   in_fitrx_posted_date          =>   v_current_date_dnf,
                                   in_fitrx_object_state         =>   pkg_db_cash_transfer.gFITrxStatus_InProcess,
                                   in_bv_table                   =>   v_bv_table,
                                   out_fitransaction_id          =>   v_fitransaction_id
                              );

                              if v_session_control.gLogging_Full 
                              then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, in_transaction_id, v_procedure_name,
                                        '.. Transferring using FITransaction: '||v_fitransaction_id
                                   );
                                   
                              end if;

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_credit_transfer_btx_id, 
                                   pkg_db_credit_apply.gbv_BillAcctTrxSet_CurrTrx,
                                   v_fitransaction_id
                              );

                              pkg_db_cash_transfer.sp_vanilla_cash_transfer
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_source_billing_acc_id,
                                   v_credit_transfer_btx_id,
                                   io_action_outcome_id,
                                   in_fitransaction_id    => v_fitransaction_id,
                                   in_policy_dm_update_tf => 'F' 
                              );

                              if (io_action_outcome_id = pkg_os_constant.gOutcome_OK)
                              then
                                                                 
                                   pkg_db_object.sp_fitransaction_process
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_credit_transfer_btx_id,
                                        v_fitransaction_id,
                                        io_action_outcome_id,
                                        in_update_counts_tf => 'F' 
                                   );
                                                                 
                              end if;
                              
                              v_credit_transfer_amnt := v_credit_transfer_amnt + abs(v_credit_to_transfer.action_delta);
                              v_transfer_total_items := v_transfer_total_items +1;
                              
                              if v_credit_transfer_btx_id is not null
                              then
                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_credit_transfer_btx_id,
                                        pkg_db_late_process.gbv_GenObj_ObjectState,
                                        pkg_Db_late_process.gBillingAccTrxSetProcesed
                                   );

                                   pkg_os_datamart.sp_datamart_update_row
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_credit_transfer_btx_id,
                                        v_datamart_tf
                                   );
                              end if;--OSPRODUCT-13706
                              
                         end loop;
                         
                         v_ba_idx := v_term_payer_ba_list.next(v_ba_idx);
                         
                    end loop;
                    
					if v_credit_transfer_btx_id is not null then
                              
                         v_bv_table.delete;
                         v_bv_table(pkg_db_credit_apply.gbv_FITrxSetTotalAmount).business_variable_value     :=   v_credit_transfer_amnt;
                         v_bv_table(pkg_db_credit_apply.gbv_FITrxSetTotalItems).business_variable_value      :=   v_transfer_total_items;                         
                         v_bv_table(pkg_os_constant_bv.gbv_GenObjObjectState).business_variable_value        :=   pkg_db_credit_apply.gBatchStatus_Processed;
                         v_bv_table(pkg_db_object.gbv_BillAccTrxSet_ProcessDate).business_variable_value     :=   v_current_date_dnf;
                         v_bv_table(pkg_db_object.gbv_FITrxSet_DatePosted).business_variable_value           :=   v_current_date_dnf;
                         v_bv_table(pkg_db_object.gbv_FITrxSet_EntryType).business_variable_value            :=   pkg_db_credit_apply.gBatchEntryMethod_System;
                         v_bv_table(pkg_db_object.gbv_FITrxSet_ExternalBatchId).business_variable_value      :=   'Batch'||v_current_date_dnf;
                         v_bv_table(pkg_db_object.gbv_FITrxSet_BATotalBalance).business_variable_value       :=   pkg_os_object_io.fn_object_bv_get
                                                                                                                  (
                                                                                                                     in_session_id,
                                                                                                                     in_transaction_id,
                                                                                                                     pkg_os_object.fn_object_parent_get
                                                                                                                     (
                                                                                                                          in_session_id,
                                                                                                                          in_transaction_id,
                                                                                                                          v_credit_transfer_btx_id
                                                                                                                     ),
                                                                                                                     pkg_db_object.gbv_BillAcc_TotalBalance
                                                                                                                  );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_credit_transfer_btx_id,
                              v_bv_table
                         );
                         
                         pkg_db_object.sp_billing_acct_trx_process
                         (
                              in_session_id,
                              in_transaction_id,
                              v_credit_transfer_btx_id,    -- BillingAccountTransactionSet ID
                              v_object_cache,
                              io_action_outcome_id
                         );
                              
                    end if;
                         
                    if v_crd_trnsfr_frm_new_plcy_tf = 'T' then
                         
                         if v_session_control.gLogging_Full 
                         then
                                        
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, in_transaction_id, v_procedure_name,
                                   '.. Calling credit apply on the old policy..'
                              );
                                        
                         end if;
                              
                         pkg_db_credit_apply.sp_policy_np_auto_credit_apply
                         (
                              in_session_id,
                              in_transaction_id,
                              in_prior_policy_id,         --policy id
                              sysdate,
                              io_action_outcome_id
                         );
                              
                    else
                              
                         pkg_os_logging.sp_log_error
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '..Credit missing on the old policy.. BOR cannot be processed..'
                         );
                              
                         io_action_outcome_id := gOutcome_DuesNotSettled;
                              
                         return;
                         
                    end if;
                    
               else
                    
                 /*   pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_prior_policy_id,
                         gbv_Policy_TaskInd,
                         1
                    );*/
                    pkg_os_logging.sp_log--_error --OSPRODUCT-12150
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Balance is not null due to some Billing element such as adhoc journal, Installment fee, Late fee or Extra cash'
                    );

                    --OSPRODUCT-20956 They are Fitems that are no tied to element ID 
                    
                    -- call sp_move_nonelement_financials procedure 
                    sp_move_nonelement_financials
                    (
                       in_session_id,
                       in_transaction_id,
                       in_prior_policy_id,
                       in_policy_id,
                       v_prior_term_id,
                       term.policy_term_id,
                       io_action_outcome_id
                                                                                         
                    );    
					
               end if;

          end if;
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id, v_procedure_name,
                    '.. Inside Loop v_prior_policy_balance 1 :' || v_prior_policy_balance ||
                    '.. in_prior_policy_id : ' || in_prior_policy_id ||
                    '.. v_term_Creator_trx_id : ' || v_term_Creator_trx_id ||
                    '.. v_rollforward_trx : ' || v_rollforward_trx  ||
                    '.. v_prior_term_id : ' || v_rollforward_trx     ||
                    '.. term.policy_term_id : ' || term.policy_term_id
               );

          end if;

     end loop;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. After Loop v_prior_policy_balance 1 :' || v_prior_policy_balance ||
               '.. in_prior_policy_id : ' || in_prior_policy_id
          );

     end if;
	 
     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Start : Credit apply Operations: Before Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
     
     -- Run Credit apply On Category level first
     for r_credit in c_credits
     loop
          --OSPRODUCT-10442
          begin
                    
               if v_multipayer_enabled_tf -- Added if and else OSPRODUCT-10690
               then

                    -- OSPRODUCT-20220
                    v_prior_payer_ba_id := fn_get_ba_in_bor_customer
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                pkg_os_object.fn_object_parent_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     in_prior_policy_id
                                                ),
                                                r_credit.billing_account_id
                                           );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Multi payer policy: ' || in_prior_policy_id || 
                              '.. Prior payer ID: '     || v_prior_payer_ba_id                         
                         );

                    end if;

                    /*select
                         max(tp.payer_billing_account_id)
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy_term_payer tp, dragon_billingaccount ba
                    where
                         tp.policy_id = in_prior_policy_id
                    and
                         tp.payer_billing_account_id = ba.billingaccount_id
                    and
                         upper(ba.partner_name) = (
                                                       Select
                                                            upper(ba1.partner_name) -- OSPRODUCT-11370
                                                       from
                                                            dragon_billingaccount ba1
                                                       where
                                                            ba1.billingaccount_id = r_credit.billing_account_id
                                                  );*/
                                                  
                    -- end OSPRODUCT-17852
                    
               else

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Single Payer policy :' || in_prior_policy_id
                         );

                    end if;

                    Select
                         p.responsible_billing_account
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy p
                    where
                         p.policy_id = in_prior_policy_id;

               end if;
                    
          exception
              when no_data_found then
                   null;
          end;
          --OSPRODUCT-10442
          --
          -- For each Credit FItem, Loop through each Due FItem, until all credit is exhausted from
          -- the Credit FItem or required Dues are cleared.
          --
                    
          if r_credit.policy_transaction_id is not null
          then
               
               -- OSPRODUCT-20600
               /*-- We'll find the corresponding transaction on old policy
               v_rollforward_trx :=pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    r_credit.policy_transaction_id,
                    gbv_xREF_PolTrx_RollFWDTrx   -- PolicyTransaction - xReference -  _Reference_Rolls forward
               );*/
               
               v_rollforward_trx := fn_get_pt_from_bor_policy
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         r_credit.policy_transaction_id
                                    );
                                    
               -- OSPRODUCT-22952
			   v_old_asset_id := fn_get_old_asset_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      r_credit.fitem_asset_id
                                 );
                                    
               -- end OSPRODUCT-20600

               --OSPRODUCT-10442
               --v_idx := v_customer_billing_acc_id|| '-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id;
               v_idx := v_prior_payer_ba_id|| '-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id || '-' || v_old_asset_id; -- OSPRODUCT-22952

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........... v_idx:' || v_idx ||
                         '........... Old asset ID: ' || v_old_asset_id ||
                         '........... New Asset ID: ' || r_credit.fitem_asset_id
                    );

               end if;
                                   
               -- Check if that index is present in passed collection, find the amount balance on this index in old policy
               if io_installment_list.exists(v_idx)
               then
                  v_remaining_credit := abs(r_credit.balance)- abs(io_installment_list(v_idx).balance_amount);
               else
                  v_remaining_credit := abs(NVL(r_credit.balance,0));
               end if;  
                               
          else
               v_remaining_credit := abs(NVL(r_credit.balance,0));
          end if;
                    
          for r_debit in c_debits(r_credit.billing_element_md_id)
          loop

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Category level: FItem Loop Credit FItem.......:' || r_credit.fitem_id ||
                         ' Due FItem:' || r_debit.fitem_id ||
                         ' Source Billing Account:' || r_credit.billing_account_id ||
                         ' Target Billing Account:' || r_debit.billing_account_id ||
                         ' Credit Policy ID:' || r_credit.policy_id ||
                         ' Due Policy ID:' || r_debit.policy_id ||
                         ' Debit Amt:' || r_debit.balance ||
                         ' Credit Amt:' || r_credit.balance ||
                         ' v_remaining_credit ' || v_remaining_credit ||
                         ' r_debit.fitem_asset_id ' || r_debit.fitem_asset_id -- OSPRODUCT-22952
                    );                    

               end if;
               
               sp_credit_apply
               (
                    in_session_id,
                    in_transaction_id,
                    r_debit.billing_account_id,
                    v_prior_payer_ba_id,
                    in_policy_id,
                    in_prior_policy_id,
                    r_debit.policy_transaction_id,
                    r_debit.installment_number,
                    r_debit.billing_element_md_id,
                    r_debit.fitem_id,
                    r_credit.fitem_id,
                    r_debit.balance,
                    v_remaining_credit,
                    v_batrxset_id,
                    io_installment_list,
                    v_fitem_policy_term_list,
                    v_fitem_installment_list,
                    io_action_outcome_id,
                    in_fitem_asset_id => r_debit.fitem_asset_id -- OSPRODUCT-22952
               );

               -- if Credit FItem has no more credit available, move on to the next one.

               if (v_remaining_credit = 0)
               then

                  exit;     -- Exit this loop and continue with next Credit FItem

               end if;



          end loop;     -- Due FItem Loop

      

     end loop;     -- Credit FItem Loop
         
     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed: Credit apply On Category level: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
     
     --OSPRODUCT-7199 start
     -- Run Credit Apply for any left out credit due to Chang Payment Plan
     for r_credit in c_credits
     loop
          
          --OSPRODUCT-20220
          v_prior_payer_ba_id := fn_get_ba_in_bor_customer
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      pkg_os_object.fn_object_parent_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_prior_policy_id
                                      ),
                                      r_credit.billing_account_id
                                 );
                                           
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '.. Prior billing account id: ' || v_prior_payer_ba_id
               );

          end if;

          /*--OSPRODUCT-10442
          begin

               if v_multipayer_enabled_tf -- Added if and else OSPRODUCT-10690
               then

                    select
                         max(tp.payer_billing_account_id)
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy_term_payer tp, dragon_billingaccount ba
                    where
                         tp.policy_id = in_prior_policy_id
                    and
                         tp.payer_billing_account_id = ba.billingaccount_id
                    and
                         upper(ba.partner_name) = (
                                                       Select
                                                            upper(ba1.partner_name) -- OSPRODUCT-11370
                                                       from
                                                            dragon_billingaccount ba1
                                                       where
                                                            ba1.billingaccount_id = r_credit.billing_account_id
                                                  );



               else

                    Select
                         p.responsible_billing_account
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy p
                    where
                         p.policy_id = in_prior_policy_id;

               end if;
          exception
              when no_data_found then
                   null;
          end;
          --OSPRODUCT-10442*/
          -- end --OSPRODUCT-20220
          
          --
          -- For each Credit FItem, Loop through each Due FItem, until all credit is exhausted from
          -- the Credit FItem or required Dues are cleared.
          --
          if r_credit.policy_transaction_id is not null
          then
               
               -- OSPRODUCT-20600
               -- We'll find the corresponding transaction on old policy
               /*v_rollforward_trx :=pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    r_credit.policy_transaction_id,
                    gbv_xREF_PolTrx_RollFWDTrx   -- PolicyTransaction - xReference -  _Reference_Rolls forward
               );*/
               
               v_rollforward_trx := fn_get_pt_from_bor_policy
               (
                    in_session_id,
                    in_transaction_id,
                    r_credit.policy_transaction_id-- PolicyTransaction - xReference -  _Reference_Rolls forward
               );
               -- end OSPRODUCT-20600
               
               -- OSPRODUCT-22952
			   v_old_asset_id := fn_get_old_asset_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      r_credit.fitem_asset_id
                                 );
                                 

               --OSPRODUCT-10442
               --v_idx := v_customer_billing_acc_id||'-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id;
               v_idx := v_prior_payer_ba_id||'-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id||'-' || v_old_asset_id; -- OSPRODUCT-22952
               
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........... v_idx:' || v_idx ||
                         '........... Old asset ID: ' || v_old_asset_id ||
                         '........... New Asset ID: ' || r_credit.fitem_asset_id
                    );

               end if;

               -- Check if that index is present in passed collection, find the amount balance on this index in old policy
               if io_installment_list.exists(v_idx)
               then
                    v_remaining_credit := abs(r_credit.balance)- abs(io_installment_list(v_idx).balance_amount);
               else
                    v_remaining_credit := abs(NVL(r_credit.balance,0));
               end if;

          else
               v_remaining_credit := abs(NVL(r_credit.balance,0));
          end if;

          for r_debit in c_debits(r_credit.billing_element_md_id)
          loop

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Change Payment Plan: FItem Loop Credit FItem.......:' || r_credit.fitem_id ||
                         ' Due FItem:' || r_debit.fitem_id ||
                         ' Source Billing Account:' || r_credit.billing_account_id ||
                         ' Target Billing Account:' || r_debit.billing_account_id ||
                         ' Credit Policy ID:' || r_credit.policy_id ||
                         ' Due Policy ID:' || r_debit.policy_id ||
                         ' Debit Amt:' || r_debit.balance ||
                         ' Credit Amt:' || r_credit.balance ||
                         ' v_remaining_credit ' || v_remaining_credit ||
                         ' Debit item asset id: ' || r_debit.fitem_asset_id
                    );

               end if;

               sp_credit_apply
               (
                    in_session_id,
                    in_transaction_id,
                    r_debit.billing_account_id,
                    v_prior_payer_ba_id,
                    in_policy_id,
                    in_prior_policy_id,
                    r_debit.policy_transaction_id,
                    r_debit.installment_number,
                    r_debit.billing_element_md_id,
                    r_debit.fitem_id,
                    r_credit.fitem_id,
                    r_debit.balance,
                    v_remaining_credit,
                    v_batrxset_id,
                    io_installment_list,
                    v_fitem_policy_term_list,
                    v_fitem_installment_list,
                    io_action_outcome_id,
                    g_remaining_credit_flag,
                    in_fitem_asset_id => r_debit.fitem_asset_id -- OSPRODUCT-22952
               );

               -- if Credit FItem has no more credit available, move on to the next one.

               if (v_remaining_credit = 0)
               then

                  exit;     -- Exit this loop and continue with next Credit FItem

               end if;

          end loop;     -- Due FItem Loop
     end loop;     -- Credit FItem Loop
     --OSPRODUCT-7199 end

     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed: Credit Apply for any left out credit due to Chang Payment Plan: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
     
     
     -- Run Credit Apply on Hybrid level
     for r_credit in c_credits
     loop
          
          --OSPRODUCT-20220
          v_prior_payer_ba_id := fn_get_ba_in_bor_customer
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      pkg_os_object.fn_object_parent_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_prior_policy_id
                                      ),
                                      r_credit.billing_account_id
                                 );
                                           
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '.. Prior billing account id: ' || v_prior_payer_ba_id
               );

          end if;
          /*
          --OSPRODUCT-10442
          begin

               if v_multipayer_enabled_tf -- Added if and else OSPRODUCT-10690
               then

                    select
                         max(tp.payer_billing_account_id)
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy_term_payer tp, dragon_billingaccount ba
                    where
                         tp.policy_id = in_prior_policy_id
                    and
                         tp.payer_billing_account_id = ba.billingaccount_id
                    and
                         upper(ba.partner_name) = (
                                                       Select
                                                            upper(ba1.partner_name) -- OSPRODUCT-11370
                                                       from
                                                            dragon_billingaccount ba1
                                                       where
                                                            ba1.billingaccount_id = r_credit.billing_account_id
                                                  );
               else

                    Select
                         p.responsible_billing_account
                    into
                         v_prior_payer_ba_id
                    from
                         dragon_policy p
                    where
                         p.policy_id = in_prior_policy_id;

               end if;
          exception
              when no_data_found then
                   null;
          end;*/
          --OSPRODUCT-10442
          -- end OSPRODUCT-20220
          
          --
          -- For each Credit FItem, Loop through each Due FItem, until all credit is exhausted from
          -- the Credit FItem or required Dues are cleared.
          --
          if r_credit.policy_transaction_id is not null
          then
               
               -- OSPRODUCT-20600
               -- We'll find the corresponding transaction on old policy
               /*v_rollforward_trx :=pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    r_credit.policy_transaction_id,
                    gbv_xREF_PolTrx_RollFWDTrx   -- PolicyTransaction - xReference -  _Reference_Rolls forward
               );*/
               
               v_rollforward_trx := fn_get_pt_from_bor_policy
               (
                    in_session_id,
                    in_transaction_id,
                    r_credit.policy_transaction_id
               );
               
               v_old_asset_id := fn_get_old_asset_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      r_credit.fitem_asset_id
                                 );
               
               -- end OSPRODUCT-20600

               --OSPRODUCT-10442
               --v_idx := v_customer_billing_acc_id||'-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id;
               v_idx := v_prior_payer_ba_id||'-'||v_rollforward_trx||'-'||r_credit.installment_number||'-' || r_credit.billing_element_md_id||'-' || v_old_asset_id; -- OSPRODUCT-22952
               
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........... v_idx:' || v_idx ||
                         '........... Old asset ID: ' || v_old_asset_id ||
                         '........... New Asset ID: ' || r_credit.fitem_asset_id
                    );

               end if;
                                   
               -- Check if that index is present in passed collection, find the amount balance on this index in old policy
               if io_installment_list.exists(v_idx)
               then
                  v_remaining_credit := abs(r_credit.balance)- abs(io_installment_list(v_idx).balance_amount);
               else
                  v_remaining_credit := abs(NVL(r_credit.balance,0));
               end if;  
                               
          else
               v_remaining_credit := abs(NVL(r_credit.balance,0));
          end if;
          
          for r_debit in c_debits(null)
          loop

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Hybrid Level: FItem Loop Credit FItem.......:' || r_credit.fitem_id ||
                         ' Due FItem:' || r_debit.fitem_id ||
                         ' Source Billing Account:' || r_credit.billing_account_id ||
                         ' Target Billing Account:' || r_debit.billing_account_id ||
                         ' Credit Policy ID:' || r_credit.policy_id ||
                         ' Due Policy ID:' || r_debit.policy_id ||
                         ' Debit Amt:' || r_debit.balance ||
                         ' Credit Amt:' || r_credit.balance ||
                         ' v_remaining_credit ' || v_remaining_credit ||
                         '........... Asset id: ' || r_debit.fitem_asset_id
                    );

               end if;
               
               sp_credit_apply
               (
                    in_session_id,
                    in_transaction_id,
                    r_debit.billing_account_id,
                    v_prior_payer_ba_id,
                    in_policy_id,
                    in_prior_policy_id,
                    r_debit.policy_transaction_id,
                    r_debit.installment_number,
                    r_debit.billing_element_md_id,
                    r_debit.fitem_id,
                    r_credit.fitem_id,
                    r_debit.balance,
                    v_remaining_credit,
                    v_batrxset_id,
                    io_installment_list,
                    v_fitem_policy_term_list,
                    v_fitem_installment_list,
                    io_action_outcome_id,
                    in_fitem_asset_id => r_debit.fitem_asset_id -- OSPRODUCT-22952
               );

               -- if Credit FItem has no more credit available, move on to the next one.

               if (v_remaining_credit = 0)
               then

                  exit;     -- Exit this loop and continue with next Credit FItem

               end if;

          end loop;     -- Due FItem Loop

     end loop;     -- Credit FItem Loop

     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed: Credit Apply on Hybrid level: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
          
     -- Process the credit apply transaction
     if v_batrxset_id is not null --OSBILLING-6873
     then
          v_bv_table.delete;
          -- v_bv_table(gbv_FITrxSetTotalAmount).business_variable_value                         :=   v_credit_transfer_amnt;
          v_bv_table(pkg_os_constant_bv.gbv_GenObjObjectState).business_variable_value        :=   pkg_db_credit_apply.gBatchStatus_Processed;
          v_bv_table(pkg_db_object.gbv_BillAccTrxSet_ProcessDate).business_variable_value     :=   v_current_date_dnf;
          v_bv_table(pkg_db_object.gbv_FITrxSet_DatePosted).business_variable_value           :=   v_current_date_dnf;
          v_bv_table(pkg_db_object.gbv_FITrxSet_EntryType).business_variable_value            :=   pkg_db_credit_apply.gBatchEntryMethod_System;
          v_bv_table(pkg_db_object.gbv_FITrxSet_ExternalBatchId).business_variable_value      :=   'Batch'||v_current_date_dnf;
          --
          -- OSBILLING-1816 : persist Billing Account Total Balance
          --
          v_bv_table(pkg_db_object.gbv_FITrxSet_BATotalBalance     ).business_variable_value := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 pkg_os_object.fn_object_parent_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_batrxset_id
                                 ),
                                 pkg_db_object.gbv_BillAcc_TotalBalance
                            );



          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_batrxset_id,
               v_bv_table


          );
          --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
          -- Call to process the cash transfer batch
          pkg_db_object.sp_billing_acct_trx_process
          (

               in_session_id,
               in_transaction_id,
               v_batrxset_id,    -- BillingAccountTransactionSet ID
               v_object_cache,
               io_action_outcome_id

          );



     end if;
     
     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed: Process the credit apply transaction: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
     --
     --  Update the Datamart of all unique Installments associated with this Cash Apply process VSTS9223 Cheryl 20190821
     --

     if v_fitem_installment_list.count > 0
     then

          v_fitem_installment_index := v_fitem_installment_list.first;

          while v_fitem_installment_index is not null
          loop

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Updating the Datamart for Installment ID: '
                         || v_fitem_installment_list(v_fitem_installment_index)
                    );

               end if;

               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitem_installment_list(v_fitem_installment_index),
                    v_datamart_tf
               );

               v_fitem_installment_index := v_fitem_installment_list.next(v_fitem_installment_index);

          end loop;


     end if;

     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed: Datamart of all unique Installments associated with this Cash Apply: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
     --
     --  Update the Datamart of all unique Policy Terms associated with this Cash Apply process VSTS9223 Cheryl 20190821
     --

     if v_fitem_policy_term_list.count > 0
     then

          v_fitem_policy_term_index := v_fitem_policy_term_list.first;

          while v_fitem_policy_term_index is not null
          loop

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Updating the Datamart for Policy Term ID: '
                         || v_fitem_policy_term_list(v_fitem_policy_term_index)
                    );

               end if;

               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitem_policy_term_list(v_fitem_policy_term_index),
                    v_datamart_tf
               );

               v_fitem_policy_term_index := v_fitem_policy_term_list.next(v_fitem_policy_term_index);

          end loop;


     end if;    
          
     -- UTPRODUCT-5007
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed:  Datamart of all unique Policy Terms associated with this Cash Apply process: Outcome' || io_action_outcome_id 
          );

     end if;
     -- UTPRODUCT-5007
          
     sp_reconcile_installments
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          in_prior_policy_id,
          io_installment_list,
          io_rb_installment_list -- OSPRODUCT-20605
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Completed:  sp_reconcile_installments: Outcome' || io_action_outcome_id 
          );

     end if;
     
     --
     -- UTPRODUCT-5007
     -- Handling of the outcome if credit apply Bats is not created and 
     -- outcome is still pkg_db_credit_apply.OutcomeCredApplyTrxNotCreated. 
     if io_action_outcome_id = pkg_db_credit_apply.OutcomeCredApplyTrxNotCreated then 
        io_action_outcome_id := pkg_os_constant.gOutcome_OK; 
     end if; 
     -- UTPRODUCT-5007
     
end sp_sync_installments;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_reconcile_installments
--
--  %USAGE
--      Procedure to create a collection of all fitems for theOLD policy During BOR
--      the procedure will loop all fitems of passed policy and create collection based on index
--      index will include policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--
--  %ALGORITHM
--      1)  Loop through all fitems of passed policy
--      2)  create index by concatinating policy_id, policy_term_id,policy_transaction_id,installment_id, installment_number and element_md_id
--      3)  check if index is already present in collection
--      4)  If it's present, add balance amount and original amount to existing amount
--      5)  If index is not present, set all the vaules on new index.
--
--  %PARAM     in_session_id                  Session Id
--  %PARAM     in_transaction_id              Transaction Id
--  %PARAM     in_policy_id                   Policy Id
--  %PARAM     io_installment_list            List of indexed records
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_reconcile_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     in_old_policy_id                   in  object.object_id%type,
     io_installment_list                in out   t_installments_tab,
     io_rb_installment_list             in out   t_installments_tab -- OSPRODUCT-20605
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_reconcile_installments';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_idx                              varchar2(500); -- OSPRODUCT-22952
     v_rollforward_trx                  object.object_id%type;
     v_ultimate_customer_id             object.object_id%type;
     v_primary_entity_id                object.object_id%type;
     v_customer_billing_acc_id          object.object_id%type;
     --OSPRODUCT-5778
     v_ba_idx                           number; -- binary_integer;
     v_multipayer_enabled_tf            boolean;
     v_term_payer_ba_list               pkg_os_object.t_object_list;
     --OSPRODUCT-5778
     v_prior_payer_ba_id                object.object_id%type;
     v_prior_term_id                    object.object_id%type;
     
     -- OSPRODUCT-20605
     v_old_term_balance                 number;
     v_new_term_balance                 number;
     v_reconcile_fail_tf                char(1) := 'F';
     v_balance_difference               number;
	 v_old_asset_id                     object.object_id%type;
     
     cursor c_debits(cin_billing_account_id object.object_id%type)
     is
          select
               *
          from
               dragon_fitem f
          where
               policy_id =in_policy_id
          and
               fitem_type_id=pkg_db_billing.gFItem_Debit
          and
               installment_number is not null  --OSPRODUCT-3698
          and
                f.billing_element_md_id is not null -- OSPRODUCT-20956 			   
          and
               fitem_category_id not in (pkg_db_billing.gFItem_Cat_Commission)
          and
               billing_account_id not in (select
                                               billingaccount_id
                                          from
                                               dragon_billingaccount
                                          where
                                               account_type_id in (pkg_os_admin.genum_PartnerType_WritingComp)
                                          )-- to exclude debit fitems on writing company
          and billing_account_id = cin_billing_account_id
          order by fitem_id;

begin

     -- OSPRODUCT-15768
     v_ultimate_customer_id        :=  pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_policy_id,pkg_os_constant.gObjType_Customer);
     --v_ultimate_customer_id      :=  pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_old_policy_id,pkg_os_constant.gObjType_Customer);
     v_primary_entity_id           :=  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_ultimate_customer_id,pkg_base_customer.gbv_CustRefPrimaryEntity);
     v_customer_billing_acc_id     :=  pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_primary_entity_id,pkg_db_billing_modify.gObjType_BillingAccount);

      --OSPRODUCT-5778 start multipayer compatibility enhanced
     v_multipayer_enabled_tf := pkg_db_multipayer.fn_multipayer_mode_tf
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     in_old_policy_id
                                );
     
     if v_session_control.gLogging_Full then
          
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '..New customer BA ID: ' || v_customer_billing_acc_id
          );
          
     end if;

     if v_multipayer_enabled_tf
     then
          
          Select
               distinct tp.payer_billing_account_id -- OSPRODUCT-22514
          bulk collect into
               v_term_payer_ba_list
          from
               dragon_policy_term_payer tp
          where
               tp.policy_id = in_policy_id; -- OSPRODUCT-15768
     else
          
          Select
               v_customer_billing_acc_id
          bulk collect into
               v_term_payer_ba_list
          from
               dual;
               
     end if;

     v_ba_idx := v_term_payer_ba_list.first;

     while v_ba_idx is not null loop
          
          -- OSPRODUCT-20605
          v_new_term_balance := 0;
          v_old_term_balance := 0;
          
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '..For Billing Account ID: ' || v_term_payer_ba_list(v_ba_idx)
               );
               
          end if;
          
          -- OSPRODUCT-20220
          v_prior_payer_ba_id := fn_get_ba_in_bor_customer
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      pkg_os_object.fn_object_parent_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_old_policy_id
                                      ),
                                      v_term_payer_ba_list(v_ba_idx)
                                 );

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Old Policy ID: '  || in_old_policy_id || 
                    '.. Old Billing Acc ID: ' || v_prior_payer_ba_id                         
               );

          end if;
          
          -- OSPRODUCT-15768
          -- get the corresponding old BA
          /*if v_multipayer_enabled_tf then

               select
                    max(tp.payer_billing_account_id)
               into
                    v_prior_payer_ba_id
               from
                    dragon_policy_term_payer tp, dragon_billingaccount ba
               where
                    tp.policy_id = in_old_policy_id
               and
                    tp.payer_billing_account_id = ba.billingaccount_id
               and
                    upper(ba.partner_name) = (
                                                  Select
                                                       upper(ba1.partner_name) -- OSPRODUCT-11370
                                                  from
                                                       dragon_billingaccount ba1
                                                  where
                                                       ba1.billingaccount_id = v_term_payer_ba_list(v_ba_idx)
                                             );



          else

               select
                    p.responsible_billing_account
               into
                    v_prior_payer_ba_id
               from
                    dragon_policy p
               where
                    p.policy_id = in_old_policy_id;

          end if;
          */
          -- end OSPRODUCT-20220          

          --for r_fitems in c_debits
          for r_fitems in c_debits(v_term_payer_ba_list(v_ba_idx))
          --OSPRODUCT-5778 end
          loop
               
               -- OSPRODUCT-20600
               -- We'll find the corresponding transaction on old policy               
               v_rollforward_trx := fn_get_pt_from_bor_policy
                                    (
                                       in_session_id,
                                       in_transaction_id,
                                       r_fitems.policy_transaction_id
                                    );
                                    
               if v_session_control.gLogging_Full then
                         
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Old Rollforward trx: ' || v_rollforward_trx
                    );
                         
               end if;
               
               -- OSPRODUCT-22952
			   v_old_asset_id := fn_get_old_asset_id
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      r_fitems.fitem_asset_id
                                 );
                                 
               -- OSPRODUCT-15768
               v_idx := v_prior_payer_ba_id || '-' ||v_rollforward_trx||'-'||r_fitems.installment_number||'-' || r_fitems.billing_element_md_id||'-'||v_old_asset_id; --OSPRODUCT-22952
                      
               -- Check if that index is present in passed collection, find the amount original amount and balance on this index in old policy
               if io_installment_list.exists(v_idx)
               then

                    if io_installment_list(v_idx).initial_amount <>  r_fitems.initial_amount
                       or
                       io_installment_list(v_idx).balance_amount <>  r_fitems.balance
                    then
					
                         pkg_os_logging.sp_log_error
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '.. Reconcilation error - there is mismatch: old initial_amount:'||io_installment_list(v_idx).initial_amount
                              ||', new initial amount: ' ||  r_fitems.initial_amount
                              ||', old balance amount '  ||  io_installment_list(v_idx).balance_amount
                              ||', new balance amount: ' ||  r_fitems.balance
                              ||', v_idx: '              ||  v_idx
                              ||', old transaction id: ' ||  v_rollforward_trx
                         );	

                         --raise no_data_found;   -- Kostya. commenting out temporarily in 108.2.2. This should be uncommented in 109.x
                         v_reconcile_fail_tf := 'T';
                         
                    else
                         
                           if v_session_control.gLogging_Full then
                              
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, in_transaction_id, v_procedure_name,
                                   '.. Financials Reconciled.. old initial_amount:'||io_installment_list(v_idx).initial_amount
                                   ||', new initial amount: '  || r_fitems.initial_amount
                                   ||', old balance amount '   || io_installment_list(v_idx).balance_amount
                                   ||', new balance amount: '  || r_fitems.balance
                                   ||', v_idx: '               || v_idx
                              );
                              
                         end if;

                    end if;

               else									   
                         
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Reconcilation error - there is no old item for new initial amount:'||r_fitems.initial_amount
                         || 'new balance amount:'|| r_fitems.balance
                         || 'v_idx:'|| v_idx
                    );	   

                     --raise no_data_found; -- Kostya. commenting out temporarily in 108.2.2. This should be uncommented in 109.x
                     v_reconcile_fail_tf := 'T';
                     
               end if;
               
               v_new_term_balance := v_new_term_balance + r_fitems.balance;
               
          end loop;
          
          if v_session_control.gLogging_Full then
               
               pkg_os_logging.sp_log
               (
                    in_session_id, in_transaction_id, v_procedure_name,
                    '.. New term balance: '|| v_new_term_balance
               );
               
          end if;
          
          -- Validate if the sum of balances are tallying
          if v_reconcile_fail_tf = 'T' then
               
               v_idx := io_installment_list.first;
                    
               while v_idx is not null loop
                         
                    if instr(v_idx,v_prior_payer_ba_id) <> 0 then
                              
                         v_old_term_balance := v_old_term_balance + nvl(io_installment_list(v_idx).balance_amount, 0);
                         
                         -- OSPRODUCT-21556
                         /*if v_session_control.gLogging_Full then
               
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '.. Old term balance: ' || v_old_term_balance ||
                                   '.. io_installment_list(v_idx).balance_amount ' || io_installment_list(v_idx).balance_amount
                              );
                              
                         end if;*/
                              
                    end if;
                         
                    v_idx := io_installment_list.next(v_idx);
                         
               end loop;
                    
               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Old term balance: ' || v_old_term_balance
                              
                    );
                         
               end if;
               
               if v_new_term_balance = v_old_term_balance then
                    
                    if v_session_control.gLogging_Full then
                              
                         pkg_os_logging.sp_log
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '.. Reconciliation error found but total balances tallied.'
                                   
                         );
                              
                    end if;
                                  
               else
                    
                    -- OSPRODUCT-21556
                    -- Special handelling where new financials will be created.
                    -- First will have to identify the case.
                    /*if io_rb_installment_list.count > 0 then                    
                         
                         v_balance_difference := v_old_term_balance - v_new_term_balance;
                              
                         pkg_os_logging.sp_log_error
                         (
                              in_session_id, in_transaction_id, v_procedure_name,
                              '.. Balances do not tally.. '|| v_balance_difference
                                   
                         );
                    
                    end if;*/
                         
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. ERROR: Reconciliation failed. Balance mismatch...'
                    );
                    
                    --raise no_data_found;               
                         
               end if;
               
          else
               
               if v_session_control.gLogging_Full then
                              
                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         '.. Balance reconciled.. '
                                   
                    );
                              
               end if;
               
               
          end if;
          
          v_ba_idx := v_term_payer_ba_list.next(v_ba_idx);

     end loop;
     
     if v_reconcile_fail_tf = 'T' then
          
          pkg_os_logging.sp_log_error
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. ERROR: Reconciliation failed. Balance mismatch...'
          );
                    
          raise no_data_found;
     
     end if;

end sp_reconcile_installments;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_get_ba_in_bor_customer
--
--  %USAGE
--      function to get the corresponding billing account from the bord policy for a given billing account
--
--  %ALGORITHM
--      Once a policy is BORd, a new customer hierarchy is created and for each object from the old hierarchy 
--      a new corrsponding object is created in the new hierarchy
--      The function will get the respective Billing Account from one hierachy if we have the Billing Account
--      from the other hierarchy. i.e,
--           if BA_old is the billing acc from the old policy and the respective billing account on the new BORd policy is BA_new
--           the function will return BA_new if called with BA_old and the customer id of the new policy
--           and vice versa.
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_bor_customer_id             Customer ID (Send the one under which the required BA exists) 
--  %PARAM    in_billing_acc_id              Billing Account ID
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

function fn_get_ba_in_bor_customer
(
     in_session_id         in   system_log.user_session_id%type,
     in_transaction_id     in   system_log.transaction_id%type,
     in_bor_customer_id    in   object.object_id%type,  
     in_billing_acc_id     in   object.object_id%type
)
return object.object_id%type
is

     v_procedure_name           constant system_log.program_name%type := pkg_name||'fn_get_ba_in_bor_customer';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_billing_acc_type_id      number;
     v_entity_orm_id            object_bv_value.business_variable_value%type;
     v_bor_entity_id            object.object_id%type;
     v_ba_parent_entity_id      object.object_id%type; 
     v_bor_billing_acc_id       object.object_id%type;       
     
begin
     
     -- Get the ba type id
     v_billing_acc_type_id := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id, 
                                    in_transaction_id, 
                                    in_billing_acc_id, 
                                    pkg_db_billing_modify.gbv_BillingAccountType 
                               );
                               
     if v_session_control.gLogging_Full
     then
          
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '...Customer ID: ' || in_bor_customer_id ||
              '...Billing Account ID: ' || in_billing_acc_id ||
              '...Account Type ID: '    || v_billing_acc_type_id
         );
         
     end if;
     
                                    
     if v_billing_acc_type_id = pkg_db_constant.gBillingAcType_Customer then
          
          -- get the entity id
          v_ba_parent_entity_id := pkg_os_object.fn_object_parent_get
                                    (
                                         in_session_id, 
                                         in_transaction_id, 
                                         in_billing_acc_id 
                                    );
          
          -- Entity ORM ID
          v_entity_orm_id := pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id, 
                                    in_transaction_id, 
                                    v_ba_parent_entity_id, 
                                    32234146 --pkg_pc_bor_transfer.gbv_Primary_Entity_ORM_Id--32498348
                               );
                                    
          -- Get the child entity 
          v_bor_entity_id := pkg_os_object_search.fn_object_with_attribute_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_bor_customer_id,
                                        pkg_os_constant.gObjType_CustomerEntity,--205, -- Customer Entity
                                        32234146, -- OSPRODUCT-21538
                                        v_entity_orm_id
                                   );
                                                                      
          -- Get the BA
          v_bor_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_bor_entity_id,
                                        pkg_db_object.gObjType_BillingAccount
                                   );
                                   
          if v_session_control.gLogging_Full
          then
               
              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '...BA Entity ID: '  || v_ba_parent_entity_id ||
                   '...BORd Entity ID: '   	|| v_bor_entity_id ||
                   '...BORd Billing Acc ID: '|| v_bor_billing_acc_id ||
				   '...ORM ID: '             || v_entity_orm_id -- OSPRODUCT-22514
              );
              
          end if;
                                   
     else
          
          v_bor_billing_acc_id := in_billing_acc_id;
     
     end if;
     
     if v_session_control.gLogging_Full
     then
               
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '...BORd Billing Acc ID: '|| v_bor_billing_acc_id
         );
              
     end if;
     
     return v_bor_billing_acc_id;
     
end fn_get_ba_in_bor_customer;


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_get_pt_from_bor_policy
--
--  %USAGE
--      function to get the corresponding PT from the bord policy for a given PT
--
--  %ALGORITHM
--      Once a policy is BORd, a new customer hierarchy is created and for each object from the old hierarchy 
--      a new corrsponding object is created in the new hierarchy
--      The function will get the respective PT from one hierachy if we have the PT
--      from the other hierarchy. i.e,
--           if PT_old is the policy trx from the old policy and the respective policy trx on the new BORd policy is PT_new
--           the function will return PT_new if called with PT_old and the policy_id of the new policy
--           and vice versa.
--
--  %PARAM    in_session_id                  DRAGON Session Id
--  %PARAM    in_transaction_id              DRAGON Transaction Id
--  %PARAM    in_policy_trx_id               Policy Transaction ID
--  %PARAM    in_from_old_policy             Flag to let the function know if we need the PT from old or the new hierarchy
--                                           Y (default) - in_policy_trx_id is from the new policy and the corresponding PT from the old policy is required
--                                           N - in_policy_trx_id is from the old policy and the corresponding PT from the new policy is required 
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function fn_get_pt_from_bor_policy
(
     in_session_id         in   system_log.user_session_id%type,
     in_transaction_id     in   system_log.transaction_id%type,
     in_policy_trx_id      in   object.object_id%type,-- new 
     in_from_old_policy    in   char default 'Y' 
)
return object.object_id%type
is

     v_procedure_name           constant system_log.program_name%type := pkg_name||'fn_get_pt_from_bor_policy';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_pt_from_bor_policy       object.object_id%type;
     v_pt_term_id               object.object_id%type;
     v_term_from_bor_policy     object.object_id%type;
     v_ptp_id                   object.object_id%type;
     v_rewrite_predecessor      object.object_id%type;
     v_rewrite_predecessor_pt   object.object_id%type;
     v_transaction_eff_date     varchar2(500);
begin
                        
     if v_session_control.gLogging_Full then
                                   
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. New to Old? ' || in_from_old_policy ||
               '.. Policy Transaction ' || in_policy_trx_id              
          );
                                        
     end if;
     
     -- in_policy_trx_id is from new policy
     -- get the corresponding transaction from the old policy
     if in_from_old_policy = 'Y' then 
          
          v_pt_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_policy_trx_id,
                                       pkg_db_bor.gbv_xREF_PolTrx_RollFWDTrx
                                  );
                                  
          if v_pt_from_bor_policy is null then -- its the term craetor
          
               -- Get the term it belongs to
               v_pt_term_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_policy_trx_id,
                                       gbv_xREF_PolTrx_PolTerm
                                  );
                                  
               if v_pt_term_id is null then 
                    
                    -- term setup not done yet on the new policy
                    -- get the ptp
                    v_ptp_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_trx_id,
                                        212318 
                                  );
                                  
                    -- get the rewrite predecessor
                    v_rewrite_predecessor := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_ptp_id,
                                                       32752248 
                                                 );
                    
                    v_rewrite_predecessor_pt := pkg_os_object.fn_object_parent_get
                                                (
                                                     in_session_id, 
                                                     in_transaction_id, 
                                                     v_rewrite_predecessor
                                                ); 
                                                 
                    -- belongs to term
                    v_term_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_rewrite_predecessor_pt,
                                                   gbv_xREF_PolTrx_PolTerm 
                                              );
                                                 
                    -- get the tern creator trx
                    v_pt_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_term_from_bor_policy,
                                                  gbv_TermCreatorTrx --29749301 -- creator trx
                                            );
                                            
                    if v_session_control.gLogging_Full then
                                   
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. PTP ID: ' || v_ptp_id ||
                              '.. Rewrite Predecessor ' || v_rewrite_predecessor || 
                              '.. Current Term: ' || v_pt_term_id || '--' || v_transaction_eff_date
                                    
                         );
                                                       
                    end if;
               
               else
                                  
                    v_term_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_pt_term_id,
                                                   gbv_BORdPredecessor_Term --31531746   -- predecessor term
                                              );
                                            
                    -- get the tern creator trx
                    v_pt_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_term_from_bor_policy,
                                                  gbv_TermCreatorTrx --29749301 -- creator trx
                                            );
                                       
                    if v_session_control.gLogging_Full then
                                   
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Current Term: ' || v_pt_term_id ||
                              '.. Predecessor Term: ' || v_term_from_bor_policy || 
                              '.. Rollsforward PT: '  || v_pt_from_bor_policy                  
                         );
                                        
                    end if;
                    
               end if;
          
          end if;
          
     -- in_policy_trx_id is from the old policy
     -- get the corresponding transaction from the new policy, i.e., in_bord_policy_id
     else
          
          v_pt_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_policy_trx_id,
                                         31531846 --GenericObject - xReference - _Reference_Successor
                                    );
                                    
          
          if v_session_control.gLogging_Full then
                                   
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. PT from new policy (using successor bv): '      || v_pt_from_bor_policy              
               );
                                        
          end if;
          
          if v_pt_from_bor_policy is null then
               
               /*v_pt_from_bor_policy := pkg_os_object_search.fn_object_with_attribute_get
                                       (
                                             in_session_id,
                                             in_transaction_id,
                                             in_bord_policy_id,
                                             pkg_os_constant.gobjType_PolicyTransaction,
                                             pkg_db_bor.gbv_xREF_PolTrx_RollFWDTrx,
                                             in_policy_trx_id
                                       );*/
                                       
               if v_session_control.gLogging_Full then
                                   
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. PT from new policy (using child search): '      || v_pt_from_bor_policy          
                    );
                                             
               end if;
          
          end if;
                                    
          if v_pt_from_bor_policy is null then
               
               -- Get the term it belongs to
               v_pt_term_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       in_policy_trx_id,
                                       gbv_xREF_PolTrx_PolTerm
                                  );
                                  
               if v_pt_term_id is not null then 
                                  
                    v_term_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_pt_term_id,
                                                   31531846 -- successor term
                                              );
                                            
                    -- get the tern creator trx
                    v_pt_from_bor_policy := pkg_os_object_io.fn_object_bv_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_term_from_bor_policy,
                                                  gbv_TermCreatorTrx --29749301 -- creator trx
                                            );
                                       
                    if v_session_control.gLogging_Full then
                                   
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Current Term: '      || v_pt_term_id ||
                              '.. Successor Term: '    || v_term_from_bor_policy || 
                              '.. Rollsforward PT: '   || v_pt_from_bor_policy                  
                         );
                                        
                    end if;
               
               end if;
          
          end if;
     
     end if;
     
     if v_session_control.gLogging_Full then
                         
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Rollsforward PT: ' || v_pt_from_bor_policy 
          );
                         
     end if;              
     
     return v_pt_from_bor_policy;
     
end fn_get_pt_from_bor_policy;

function fn_get_old_asset_id
(
     in_session_id              in   system_log.user_session_id%type,
     in_transaction_id          in   system_log.transaction_id%type,
     in_new_asset_id            in   object.object_id%type    
)
return object.object_id%type
is

     v_procedure_name           constant system_log.program_name%type := pkg_name||'fn_get_old_asset_id';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_asset_object_type_id     object_type.object_type_id%type;
     v_utemplate_id             object.object_id%type;
     v_old_asset_id             object.object_id%type;
     v_prior_policy_trx_id      object.object_id%type;
     v_parent_pt_id             object.object_id%type;
     
begin
     
     v_asset_object_type_id := pkg_os_object.fn_object_type_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_new_asset_id
                               );
                                                   
     v_utemplate_id := pkg_os_object_io.fn_object_bv_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_new_asset_id,
                             26725601
                        );
                        
     v_parent_pt_id := pkg_os_object_search.fn_object_get_parent_of_type
                       (
                            in_session_id,
                            in_transaction_id,
                            in_new_asset_id,
                            pkg_os_constant.gobjType_PolicyTransaction
                       );
                       
     v_prior_policy_trx_id := fn_get_pt_from_bor_policy
                               (
                                  in_session_id,
                                  in_transaction_id,
                                  v_parent_pt_id
                               );
                               
     if v_session_control.gLogging_Full then
                                   
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. New asset ID: ' || in_new_asset_id ||
               '.. New PT ID: '    || v_parent_pt_id ||
               '.. Prior PT ID: '  || v_prior_policy_trx_id
          );
                                        
     end if;
                                                 
     v_old_asset_id := pkg_os_object_search.fn_object_with_attribute_get
                       (
                            in_session_id,
                            in_transaction_id,
                            v_prior_policy_trx_id,
                            v_asset_object_type_id,
                            26725601,
                            v_utemplate_id
                       );
                       
     if v_session_control.gLogging_Full then
                                   
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Old asset ID: ' || v_old_asset_id ||
               '.. Ultimate Template ID: ' || v_utemplate_id ||
               '.. Asset Object Type ID: ' || v_asset_object_type_id
          );
                                        
     end if;       
     
     return v_old_asset_id;
     
end fn_get_old_asset_id;

procedure sp_bor_new_fitem_list
(
     in_session_id           in       system_log.user_session_id%type,
     in_transaction_id       in       system_log.transaction_id%type,
     in_old_fitem_list       in       pkg_os_object.t_object_list,
     in_new_fitem_policy_id  in       object.object_id%type,
     io_new_fitem_list       in out   t_fitem_list
)
is

     v_procedure_name                constant system_log.program_name%type := pkg_name||'sp_bor_new_fitem_list';
     v_session_control               pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_old_fitem_id                  object.object_id%type;
     v_old_fitem_pt_id               object.object_id%type;
     v_old_fitem_ba_id               object.object_id%type;
     v_old_billing_md_id             number;
     v_old_fitem_inst_num            number;
     v_old_fitem_cat_id              number;
     v_old_fitem_subcat_id           number;
     
     v_new_fitem_id                  object.object_id%type;
     v_new_fitem_customer_id         object.object_id%type;
     v_new_fitem_ba_id               object.object_id%type;
     v_new_fitem_pt_id               object.object_id%type;
     
     v_idx                           number;
     
begin
     
     if v_session_control.gLogging_Full then
                         
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Old Fitem List count ' || in_old_fitem_list.count ||
               '.. New Fitem Policy ID: ' || in_new_fitem_policy_id 
          );
                         
     end if;
     
     v_idx := in_old_fitem_list.first;
     
     while v_idx is not null loop
          
          v_old_fitem_id := in_old_fitem_list(v_idx);
                  
          select
               fi.billing_account_id,
               fi.policy_transaction_id,
               fi.billing_element_md_id,
               fi.installment_number,
               fi.fitem_category_id,
               fi.fitem_sub_category_id
          into
               v_old_fitem_ba_id,
               v_old_fitem_pt_id,
               v_old_billing_md_id,
               v_old_fitem_inst_num,
               v_old_fitem_cat_id,
               v_old_fitem_subcat_id
          from          
               dragon_fitem fi
          where
               fi.fitem_id = v_old_fitem_id;
                         
          if v_session_control.gLogging_Full then
                              
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. old Fitem ID: ' || v_old_fitem_id ||
                    '.. old Fitem BA ID: ' || v_old_fitem_ba_id ||
                    '.. old Fitem PT ID: ' || v_old_fitem_pt_id ||
                    '.. old Fitem Billing Element MD ID: ' || v_old_billing_md_id ||
                    '.. old Fitem Installment Num: ' || v_old_fitem_inst_num ||
                    '.. old Fitem Category ID: ' || v_old_fitem_cat_id ||
                    '.. old Fitem Sub Category ID: ' || v_old_fitem_subcat_id
               );
                                        
          end if;
          
          v_new_fitem_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_new_fitem_policy_id,
                                          pkg_os_constant.gObjType_Customer
                                     );
          -- Get the new BA
          v_new_fitem_ba_id := fn_get_ba_in_bor_customer
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_new_fitem_customer_id,
                                    v_old_fitem_ba_id
                               );
                               
          v_new_fitem_pt_id := fn_get_pt_from_bor_policy
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_old_fitem_pt_id,
                                    'N'
                               );
                               
          select
               fi.fitem_id
          into
               v_new_fitem_id
          from
               dragon_fitem fi
          where
               fi.billing_account_id = v_new_fitem_ba_id
          and
               fi.policy_transaction_id = v_new_fitem_pt_id
          and
               fi.installment_number = v_old_fitem_inst_num
          and
               (
                    (
                         v_old_billing_md_id is not null
                         and
                         fi.billing_element_md_id = v_old_billing_md_id
                    )
                    or
                    (
                         v_old_billing_md_id is null
                         and
                         fi.fitem_category_id = v_old_fitem_cat_id
                         and
                         fi.fitem_sub_category_id = v_old_fitem_subcat_id
                    )
               );
               
          if v_session_control.gLogging_Full then
                                   
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. New Fitem ID: ' || v_new_fitem_id
               );
                                                  
          end if;
          
          io_new_fitem_list(v_old_fitem_id) := v_new_fitem_id;
          
          v_idx := in_old_fitem_list.next(v_idx);
     
     end loop;
     
      if v_session_control.gLogging_Full then
                                   
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. New count: ' || io_new_fitem_list.count
          );
                                                  
     end if;
     
exception
                    
     when others then
                              
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Error: ' || sqlerrm || dbms_utility.format_error_backtrace
          );
                              
          raise;
     
end sp_bor_new_fitem_list;

procedure sp_bor_old_fitem_list
(
     in_session_id               in        system_log.user_session_id%type,
     in_transaction_id           in        system_log.transaction_id%type,
     in_new_fitem_list           in        pkg_os_object.t_object_list,
     in_old_fitem_policy_id      in        object.object_id%type,
     io_old_fitem_list           in out    t_fitem_list
)
is

     v_procedure_name                constant system_log.program_name%type := pkg_name||'sp_bor_new_fitem_list';
     v_session_control               pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
     v_new_fitem_id                  object.object_id%type;
     v_new_fitem_pt_id               object.object_id%type;
     v_new_fitem_ba_id               object.object_id%type;
     v_new_billing_md_id             number;
     v_new_fitem_inst_num            number;
     v_new_fitem_cat_id              number;
     v_new_fitem_subcat_id           number;
     
     v_old_fitem_id                  object.object_id%type;
     v_old_fitem_customer_id         object.object_id%type;
     v_old_fitem_ba_id               object.object_id%type;
     v_old_fitem_pt_id               object.object_id%type;
     
     v_idx                           number;
     
begin
     
     if v_session_control.gLogging_Full then
                         
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. Old Fitem List count ' || in_new_fitem_list.count ||
               '.. New Fitem Policy ID: ' || in_old_fitem_policy_id 
          );
                         
     end if;
     
     v_idx := in_new_fitem_list.first;
     
     while v_idx is not null loop
          
          v_new_fitem_id := in_new_fitem_list(v_idx);
                  
          select
               fi.billing_account_id,
               fi.policy_transaction_id,
               fi.billing_element_md_id,
               fi.installment_number,
               fi.fitem_category_id,
               fi.fitem_sub_category_id
          into
               v_new_fitem_ba_id,
               v_new_fitem_pt_id,
               v_new_billing_md_id,
               v_new_fitem_inst_num,
               v_new_fitem_cat_id,
               v_new_fitem_subcat_id
          from          
               dragon_fitem fi
          where
               fi.fitem_id = v_new_fitem_id;
                         
          if v_session_control.gLogging_Full then
                              
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. old Fitem ID: ' || v_new_fitem_id ||
                    '.. old Fitem BA ID: ' || v_new_fitem_ba_id ||
                    '.. old Fitem PT ID: ' || v_new_fitem_pt_id ||
                    '.. old Fitem Billing Element MD ID: ' || v_new_billing_md_id ||
                    '.. old Fitem Installment Num: ' || v_new_fitem_inst_num ||
                    '.. old Fitem Category ID: ' || v_new_fitem_cat_id ||
                    '.. old Fitem Sub Category ID: ' || v_new_fitem_subcat_id
               );
                                        
          end if;
          
          v_old_fitem_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_old_fitem_policy_id,
                                          pkg_os_constant.gObjType_Customer
                                     );
          -- Get the new BA
          v_old_fitem_ba_id := fn_get_ba_in_bor_customer
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_old_fitem_customer_id,
                                    v_new_fitem_ba_id
                               );
                               
          v_old_fitem_pt_id := fn_get_pt_from_bor_policy
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    v_new_fitem_pt_id
                               );
                               
          select
               fi.fitem_id
          into
               v_old_fitem_id
          from
               dragon_fitem fi
          where
               fi.billing_account_id = v_old_fitem_ba_id
          and
               fi.policy_transaction_id = v_old_fitem_pt_id
          and
               fi.installment_number = v_new_fitem_inst_num
          and
               (
                    (
                         v_new_billing_md_id is not null
                         and
                         fi.billing_element_md_id = v_new_billing_md_id
                    )
                    or
                    (
                         v_new_billing_md_id is null
                         and
                         fi.fitem_category_id = v_new_fitem_cat_id
                         and
                         fi.fitem_sub_category_id = v_new_fitem_subcat_id
                    )
               );
               
          if v_session_control.gLogging_Full then
                                   
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. New Fitem ID: ' || v_old_fitem_id
               );
                                                  
          end if;
          
          io_old_fitem_list(v_new_fitem_id) := v_old_fitem_id;
          
          v_idx := in_new_fitem_list.next(v_idx);
     
     end loop;
     
      if v_session_control.gLogging_Full then
                                   
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.. New count: ' || io_old_fitem_list.count
          );
                                                  
     end if;
     
exception
                    
     when others then
                              
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Error: ' || sqlerrm || dbms_utility.format_error_backtrace
          );
                              
          raise;
     
end sp_bor_old_fitem_list;

procedure sp_multipayer_create_pymtschedule
(
     in_session_id                      in          system_log.user_session_id%type,
     in_transaction_id                  in          system_log.transaction_id%type,
     in_ptp_id                          in          object.object_id%type,
     in_customer_id                     in          object.object_id%type,
     io_object_cache                    in out      pkg_os_object_cache.t_object_cache,
     io_action_outcome_id               in out      outcome.outcome_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_multipayer_create_pymtschedule';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_payer_list                       pkg_os_object.t_object_list;
     v_idx                              number;
     v_new_customer_entity_id           object.object_id%type;
     v_action_id                        action.action_id%type;
     v_action_object_id                 object.object_id%type;
     v_datamart_tf                      char(1);
     v_payer_type                       object.object_id%type;
     v_new_payer_billing_acc_id         object.object_id%type; --OSPRODUCT-32745
     v_old_payer_billing_acc_id         object.object_id%type; --OSPRODUCT-32745
     v_old_payer_entity_id              object.object_id%type; --OSPRODUCT-32745	 
begin

     if v_session_control.gLogging_Full
     then
         pkg_os_logging.sp_log
         (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '...Policy is multipayer'
         );
     end if;
	 
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id              =>    in_session_id,
          in_transaction_id          =>    in_transaction_id,
          in_object_id               =>    in_ptp_id,
          in_child_object_type_id    =>    pkg_db_constant.gobjType_PTPPayer,
          in_object_list             =>    v_payer_list
     );
     /*     Select
          pp.ptp_payer_id, pp.payer_type_id
     bulk collect into
          v_payer_list
     from
          dragon_ptp_payer pp
     where
          pp.ptp_id = in_ptp_id;*/
     
     v_idx := v_payer_list.first;
     
     while v_idx is not null loop
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_payer_list(v_idx),
               pkg_db_payment_arrangement.gbv_Ref_PTPayerChosenBillPlan,
               null
          );
                    
          v_idx := v_payer_list.next(v_idx);
          
     end loop;
     
     v_idx := v_payer_list.first;
     
     while v_idx is not null loop
          
          if v_session_control.gLogging_Full
          then
              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '...Looping Payer: ' || v_payer_list(v_idx)
              );
          end if;
          v_payer_type := pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_payer_list(v_idx),
                                 pkg_db_multipayer.gbv_PTPPayer_PayerType
                            );
          --OSPRODUCT-10210
          --if v_payer_type = pkg_db_multipayer.g_DbPayerType_Insured then
          if v_payer_type in (pkg_db_multipayer.g_DbPayerType_Insured, g_DbPayerType_AddInsured) then
               
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    in_object_id          => v_payer_list(v_idx),
                    io_datamart_tf        => v_datamart_tf
               );
			   
               --OSPRODUCT-32745 start
               -- Get the old payer entity
               v_old_payer_entity_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_payer_list(v_idx),
                                             pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                        );
                                        
               --get the old payer billing account                         
               v_old_payer_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_old_payer_entity_id,
                                                  pkg_db_object.gObjType_BillingAccount  --old billing account- child of v_payer_list(v_idx)
                                             );
                                             
               --get the new payer billing account by caling function                              
               v_new_payer_billing_acc_id := pkg_db_bor.fn_get_ba_in_bor_customer
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_customer_id,
                                                  v_old_payer_billing_acc_id --required billing account- child of v_payer_list(v_idx)                                                            
                                             );
											 
			   v_new_customer_entity_id := pkg_os_object.fn_object_parent_get 
										   (
												in_session_id,
												in_transaction_id,
												v_new_payer_billing_acc_id
										   );										 
               --OSPRODUCT-32745 end 
               
               --OSPRODUCT-10210
               /*begin
			   
                    
                    Select 
                         pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,ba.billingaccount_id)
                    into
                         v_new_customer_entity_id
                    from 
                         dragon_ptp_payer pp, dragon_billingaccount ba
                    where 
                         pp.ptp_payer_id = v_payer_list(v_idx)
                    and 
                         ba.customer_object_id = in_customer_id
                    and 
                         upper(ba.partner_name) = (Select 
                                                         upper(ba1.partner_name)
                                                    from 
                                                         dragon_billingaccount ba1 
                                                    where 
                                                         ba1.billingaccount_id = pp.billing_account_id);
	          exception
                   when no_data_found then
                        null;
               end;*/
               /* v_new_customer_entity_id := pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                in_customer_id,
                                                pkg_db_multipayer.gbv_Customr_Ref_Primary_Entity
                                           );*/
										   
               if v_session_control.gLogging_Full then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Payer ' || v_payer_list(v_idx) ||
                              '.. Type of Payer : ' || v_payer_type ||
                              '.. old customer entity : ' || v_old_payer_entity_id ||
                              '.. old payer billing account : ' || v_old_payer_billing_acc_id ||
                              '.. new payer billing account : ' || v_new_payer_billing_acc_id ||
                              '.. New customer entity : ' || v_new_customer_entity_id ||
                              '.. customer id : ' || in_customer_id 
                               
                         );
               end if;  --OSPRODUCT-32745	
			   
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_payer_list(v_idx),
                    pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr,
                    v_new_customer_entity_id
               );
               
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    in_object_id          => v_payer_list(v_idx),
                    io_datamart_tf        => v_datamart_tf
               );
          end if;
          pkg_db_object.sp_process_action_mini
          (
               in_session_id            => in_session_id,
               in_transaction_id        => in_transaction_id,
               in_action_id             => 1093924,
               in_action_object_id      => v_payer_list(v_idx),
               io_object_cache          => io_object_cache,
               io_action_outcome_id     => io_action_outcome_id,
               out_action_id            => v_action_id,
               out_action_object_id     => v_action_object_id
          );
          v_idx := v_payer_list.next(v_idx);
     end loop;
end sp_multipayer_create_pymtschedule;

-- OSPRODUCT-20605
procedure sp_collect_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     io_installment_list                in out   t_installments_tab
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_collect_installments_discarded';
     --v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     
begin
     
    pkg_os_logging.sp_log_error
    (
         in_session_id,
         in_transaction_id,
         v_procedure_name,
         '...You are calling the discarded version of the procedure.. 
         Please start using the new version with the same name but modified signature..'
    );
     
end sp_collect_installments;

procedure sp_reconcile_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     in_old_policy_id                   in  object.object_id%type,
     io_installment_list                in out   t_installments_tab
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_reconcile_installments_discarded';
begin
     pkg_os_logging.sp_log_error
     (
         in_session_id,
         in_transaction_id,
         v_procedure_name,
         '...You are calling the discarded version of the procedure.. 
         Please start using the new version with the same name but modified signature..'
     );
     
end sp_reconcile_installments;

procedure sp_sync_installments
(
     in_session_id                      in  system_log.user_session_id%type,
     in_transaction_id                  in  system_log.transaction_id%type,
     in_policy_id                       in  object.object_id%type,
     in_prior_policy_id                 in  object.object_id%type,
     io_installment_list                in out   t_installments_tab,
     io_action_outcome_id               in out number
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_sync_installments_discarded';
     
begin
     
     pkg_os_logging.sp_log_error
     (
         in_session_id,
         in_transaction_id,
         v_procedure_name,
         '...You are calling the discarded version of the procedure.. 
         Please start using the new version with the same name but modified signature..'
     );
     
end sp_sync_installments;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------


procedure sp_move_nonelement_financials
(
     in_session_id                      in          system_log.user_session_id%type,
     in_transaction_id                  in          system_log.transaction_id%type,
     in_old_policy_id                   in          object.object_id%type,   
     in_new_policy_id                   in          object.object_id%type, 
     in_prior_term_id                   in          object.object_id%type,
     in_policy_term_id                  in          object.object_id%type,
     io_action_outcome_id               in out      outcome.outcome_id%type
)
is
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_move_nonelement_financials';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_new_ba_id                        object.object_id%type;
     v_new_ba_ct_id                     object.object_id%type;
     v_billingaccount_id                object.object_id%type := null;
     v_fitem_id                         object.object_id%type;
     v_fitem_RefEntityBelongsTo         object.object_id%type;
     v_billacctrxset_id                 object.object_id%type;
     v_billacctrxset_ct_id              object.object_id%type;
     v_billacctrxset_ctnew_id           object.object_id%type;
     v_bv_table                         pkg_os_object_io.t_bv_table;     
     v_billing_debit_trx_id             object.object_id%type;
     v_fichange_id                      object.object_id%type;
     v_current_date                     object_bv_value.business_variable_value%type:= to_char(pkg_os_time.fn_os_sysdate(in_session_id,in_transaction_id,in_prior_term_id),pkg_os_constant.DragonDateFormatDefault);     
     v_fichange_belongs_to              object.object_id%type;
     v_datamart_tf                      char(1) := 'T';
     genum_Billing_Adjstm_Batch         constant lookup_list_value.lookup_enum%type            :=   2202;
     v_billing_credit_trx_id            object.object_id%type;
     v_new_fitrx_id                     object.object_id%type;
     --v_billing_tmp_trx_id               object.object_id%type; 
     v_customer_id                      object.object_id%type; 
     v_offset_fitem_id                  object.object_id%type; 
     v_instalment_id                    object.object_id%type;   
     v_fi_debit_trx_amount              number; 
     v_fitransaction_id                 object.object_id%type;
     v_total_amount                     number;
     v_object_cache                     pkg_os_object_cache.t_object_cache   ;
     genum_BOR_Cash_Transfer            number := 10;
     v_cash_transfer_bats_list          pkg_os_object.t_object_list;
     v_cash_transfer_bats_index         number;
     v_count                            number := 0;
     
     cursor c_src_cash_item
     is
		 select fi.fitem_id,
			   fi.billing_account_id as old_billing_account,
			   fi.balance
		   from dragon_fitem fi, dragon_billingaccount ba
		  where fi.billing_account_id = ba.billingaccount_id
		    and fi.policy_id = in_old_policy_id
		    and fi.fitem_category_id = pkg_db_functions.gfitem_category_cash
		    and fi.balance < 0
		    and fi.cash_associated_with is null
		    and fi.disbursement_batch_id is null
		    and ba.account_type_id not in (pkg_db_credit_apply.gbillingactype_writingcompany, pkg_os_admin.gbillingactype_carrier)
		  order by fi.billing_account_id;
            
     cursor c_ba
     is
		select distinct (f.billing_account_id)
		  from dragon_fitem f
		 where f.policy_term_id = in_prior_term_id
		   and f.billing_account_type_id <> 1501
		   and f.fitem_type_id = pkg_db_billing_modify.gFItem_Debit
		   and f.balance <> 0 -- OSPRODUCT-18235
		   and f.billing_element_md_id is null
		   and fitem_category_id not in
			  (pkg_db_functions.gFItem_Category_Cash,
			   pkg_db_functions.gFItem_Category_Writeoff,
			   pkg_db_functions.gFItem_Category_Comm,
			   pkg_db_functions.gFItem_Category_DefPremComm,
			   pkg_db_functions.gFitem_category_LossGain) --OSPRODUCT-12759
		   and fitem_sub_category_id not in (pkg_db_functions.gFitem_SubCat_PLRRetroAdj) --PMADEV-565 exclude PLR Retro Adj
		   and fitem_transaction_type_id <> pkg_db_functions.gFITransactionType_Reversal --OSBILLING-7354
		;  
                           	
     cursor c_non_element_fitems (in_billing_account_id object.object_id%type) 
     is
          select *
            from dragon_fitem f
           where f.policy_term_id = in_prior_term_id
             and f.billing_account_id = in_billing_account_id
             and f.billing_account_type_id <> 1501
             and f.fitem_type_id = pkg_db_billing_modify.gFItem_Debit
             and f.balance <> 0 -- OSPRODUCT-18235
             and f.billing_element_md_id is null
             and fitem_category_id not in
                 (pkg_db_functions.gFItem_Category_Cash,
                  pkg_db_functions.gFItem_Category_Writeoff,
                  pkg_db_functions.gFItem_Category_Comm,
                  pkg_db_functions.gFItem_Category_DefPremComm,
                  pkg_db_functions.gFitem_category_LossGain) --OSPRODUCT-12759
             and fitem_sub_category_id not in (pkg_db_functions.gFitem_SubCat_PLRRetroAdj) --PMADEV-565 exclude PLR Retro Adj
             and fitem_transaction_type_id <> pkg_db_functions.gFITransactionType_Reversal --OSBILLING-7354  
          ;     
begin
     
     v_customer_id  :=   pkg_os_object.fn_object_parent_get (in_session_id, in_transaction_id, in_new_policy_id);
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...There is Fee, Ad-hoc journal and/or Cash on old policy. Moving the non element ID financials items to the new BORd policy ' ||
               '...Customer ID: ' || v_customer_id
          );
     end if; 
          
     for b in c_ba
     loop
          -- Get the new Billing Account Id 
          v_new_ba_id    :=   fn_get_ba_in_bor_customer 
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_new_policy_id
                                   ),
                                   b.billing_account_id      
                              );
                              
          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               pkg_db_object.gObjType_BillingAccountTrxSet,
               v_new_ba_id,
               v_billacctrxset_id
          );
          v_bv_table.delete;

          v_bv_table ( pkg_dB_reversal.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
          v_bv_table ( pkg_dB_reversal.gbv_FITrxSetEntryType        ).business_variable_value := pkg_db_reversal.gBatchEntryMethod;
          v_bv_table ( pkg_dB_reversal.gbv_FITrxSetDatePosted       ).business_variable_value := v_current_date;
          v_bv_table ( pkg_dB_reversal.gbv_FITrxSetExternalBatchId  ).business_variable_value := 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_new_policy_id), pkg_os_constant.DragonDateFormatDefault );
          v_bv_table ( pkg_db_reversal.gbv_FITrxSetBatchType          ).business_variable_value := genum_Billing_Adjstm_Batch;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billacctrxset_id,
               v_bv_table
          ); 
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. New BA ID: ' || v_new_ba_id ||
                    '.. Old BA ID: ' || b.billing_account_id ||
                    '.. New Policy ID: ' || in_new_policy_id ||
                    '.. Old Policy ID: ' || in_old_policy_id ||
                    '.. Billing Adjustment Batch ID: ' || v_billacctrxset_id
                    
               );
          end if;
          
          -- OSPRODUCT-27913
          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                   =>  in_session_id,
               in_transaction_id               =>  in_transaction_id,
               in_fitrx_parent_fitrxset_id     =>  v_billacctrxset_id,
               out_fitransaction_id            =>  v_billing_debit_trx_id,
               in_fitrx_type                   =>  pkg_db_object.gFITrxType_Dr_Generate,
               in_fitrx_ref_associatedpolicy   =>  in_new_policy_id,
               in_fitrx_ref_associatedpoltrx   =>  null,             -- This xReft should be NULL. There is no PAS trx / STATs for this billing trx.
               in_fitrx_ref_actionpolicy       =>  in_new_policy_id,
               in_fitrx_ref_actionpoltrx       =>  null              -- in_policy_trx_id  Cx/Rw. Do we need it ?????????
          );
          
          v_bv_table.delete;

          v_bv_table ( pkg_db_object.gbv_FITrx_RefBillingAccount ).business_variable_value := v_new_ba_id;
          v_bv_table ( pkg_db_object.gbv_FITrx_EffectiveDate     ).business_variable_value := v_current_date; --to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
          v_bv_table ( pkg_db_object.gbv_FITrx_PostedDate        ).business_variable_value := v_current_date;--to_char(v_current_date, pkg_os_constant.dragondateformatdefault); -- FITransaction - Date - Date Posted
          v_bv_table ( 32244046                                  ).business_variable_value := 1; -- FITransaction - List - Indicator to mark whether GLs are created
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billing_debit_trx_id,
               v_bv_table
          );
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billacctrxset_id,
               pkg_db_object.gbv_BillAccTrxSet_CurrTrx,
               v_billing_debit_trx_id
          );
          
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_debit_trx_id, v_datamart_tf);

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......... Created BOR Debit Generation Billing Transaction: ' || v_billing_debit_trx_id
               );
               
          end if;
               
         
          /*-- Create Credit and Debit Billing transactions
          for c_btrx in (
                          select pkg_db_object.gFITrxType_Cr_Generate  as btrx_type from dual where v_billing_credit_trx_id is null
                          union
                          select pkg_db_object.gFITrxType_Dr_Generate  as btrx_type from dual where v_billing_debit_trx_id  is null
                       )
          loop
               
               pkg_db_object.sp_fitransaction_create
               (
                    in_session_id                   =>  in_session_id,
                    in_transaction_id               =>  in_transaction_id,
                    in_fitrx_parent_fitrxset_id     =>  v_billacctrxset_id,
                    out_fitransaction_id            =>  v_billing_tmp_trx_id,
                    in_fitrx_type                   =>  c_btrx.btrx_type,
                    in_fitrx_ref_associatedpolicy   =>  in_new_policy_id,
                    in_fitrx_ref_associatedpoltrx   =>  null,             -- This xReft should be NULL. There is no PAS trx / STATs for this billing trx.
                    in_fitrx_ref_actionpolicy       =>  in_new_policy_id,
                    in_fitrx_ref_actionpoltrx       =>  null              -- in_policy_trx_id  Cx/Rw. Do we need it ?????????
               );
               

               v_bv_table.delete;

               v_bv_table ( pkg_db_object.gbv_FITrx_RefBillingAccount ).business_variable_value := v_new_ba_id;
              	v_bv_table ( pkg_db_object.gbv_FITrx_EffectiveDate     ).business_variable_value := v_current_date; --to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
               v_bv_table ( pkg_db_object.gbv_FITrx_PostedDate        ).business_variable_value := v_current_date;--to_char(v_current_date, pkg_os_constant.dragondateformatdefault); -- FITransaction - Date - Date Posted
               v_bv_table ( 32244046                                  ).business_variable_value := 1; -- FITransaction - List - Indicator to mark whether GLs are created

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_tmp_trx_id,
                    v_bv_table
               );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.......... Created BOR '||case when c_btrx.btrx_type  = pkg_db_object.gFITrxType_Cr_Generate
                                                        then 'Credit'
                                                        else 'Debit'
                                                   end
                         ||' Generation Billing Transaction: ' || v_billing_tmp_trx_id
                    );
               end if;

               if c_btrx.btrx_type  = pkg_db_object.gFITrxType_Cr_Generate
               then
                    
                    v_billing_credit_trx_id := v_billing_tmp_trx_id;
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '........ Credit Batch :' || v_billing_credit_trx_id
                         );
                         
                    end if;
                    
               else
                    v_billing_debit_trx_id  := v_billing_tmp_trx_id;
                    --
                    -- Set current transaction for Billing Batch
                    --
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_billacctrxset_id,
                         pkg_db_object.gbv_BillAccTrxSet_CurrTrx,
                         v_billing_tmp_trx_id
                    );
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '........ Debit Batch :' || v_billing_debit_trx_id
                         );
                    end if;
                    
               end if;

               -- Update datamarts for Billing Transactions
               --
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_tmp_trx_id, v_datamart_tf);

               v_billing_tmp_trx_id := null;

          end loop;*/
          -- /Create Credit and Debit Billing transactions
          -- end OSPRODUCT-27913
                                  
          for f in c_non_element_fitems ( b.billing_account_id )
          loop
                      
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Identified and moving the Fitem id ' || f.fitem_id ||
                         ' to the billing account ' || v_new_ba_id||
                         ' Category ' || f.category ||
                         ' Amount ' || f.balance
                    );
               end if;   
                          
               -- Set the Instalment Id, Aging, billed flag correctly for the new Fitem as well                          
			select max(i.installment_id)
			  into v_instalment_id
			  from dragon_scheduled_installment i
			 where i.billing_account_id = f.billing_account_id
			   and i.installment_number = f.installment_number;
                                     
               if v_instalment_id is null 
               then 
				select max(i.installment_id)
				  into v_instalment_id
				  from dragon_scheduled_installment i
				 where i.billing_account_id = f.billing_account_id;               
               end if;
                          
               v_fi_debit_trx_amount :=  v_fi_debit_trx_amount + f.balance;
                                     
               -- Create a new Fitem on the new BA Id          
                          
               pkg_db_object.sp_fitem_create
               (
                    in_session_id                 =>        in_session_id ,
                    in_transaction_id             =>        in_transaction_id,
                    in_parent_object_id           =>        v_new_ba_id,
                    out_fitem_id                  =>        v_fitem_id,
                    out_offset_fitem_id           =>        v_offset_fitem_id,
                    in_fitem_debit_credit         =>        f.fitem_type_id,
                    in_fitem_category             =>        f.fitem_category_id,
                    in_fitem_subcategory          =>        f.Fitem_Sub_Category_Id,
                    in_fitem_effective_date       =>        v_current_date,
                    in_fitem_billing_status       =>        pkg_db_object.gFItemBillStatus_Active,
                    in_fitem_processing_status    =>        pkg_db_object.gFItemProcStatus_Processed,
                    in_FItemRefPolicy             =>        in_new_policy_id,             
                    in_FItemRefEntityBelongsTo    =>        v_fitem_RefEntityBelongsTo,
                    in_FItemRefAssWithFItrx       =>        v_billing_debit_trx_id ,
                    in_FItemRefInstallment        =>        v_instalment_id  ,
                    in_FitemRefPolicyTerm         =>        in_policy_term_id             
               ); 
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_fitem_id ||
                         '........ Offset Fitem: ' || v_offset_fitem_id
                    );
               end if;
                          
                          
               v_bv_table.delete;
               v_bv_table( pkg_db_object.gbv_FItem_Billed_TF     ).business_variable_value :=  pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, f.fitem_id, pkg_db_object.gbv_FItem_Billed_TF);
               v_bv_table( pkg_db_object.gbv_Fitem_AgingStatus ).business_variable_value := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id,  f.fitem_id, pkg_db_object.gbv_Fitem_AgingStatus);
               v_bv_table(pkg_db_object.gbv_FItem_LocalBilngDueDate     ).business_variable_value     :=  pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id,  f.fitem_id, pkg_db_object.gbv_FItem_LocalBilngDueDate);

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitem_id,
                    v_bv_table
               );
               
               -- Create FIChange for new fitem 
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Create,
                    in_fichange_action_delta           =>   f.balance,
                    in_fichange_ref_fitem              =>   v_fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_new_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;
                                                                                  
               -- Create FIChange for the offset fitem 
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Create,
                    in_fichange_action_delta           =>   f.balance*-1 ,
                    in_fichange_ref_fitem              =>   v_offset_fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_new_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_offset_fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;        
                                 
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitem_id,
                    v_datamart_tf
               );
                                 
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_offset_fitem_id,
                    v_datamart_tf
               );   
                          
               -- Create a contra fitem on the source billing account and close them to 0 
               -- Create a new Fitem on the new BA Id          
               pkg_db_object.sp_fitem_create
               (
                    in_session_id                 =>        in_session_id ,
                    in_transaction_id             =>        in_transaction_id,
                    in_parent_object_id           =>        f.billing_account_id,
                    out_fitem_id                  =>        v_fitem_id,
                    out_offset_fitem_id           =>        v_offset_fitem_id,
                    in_fitem_debit_credit         =>        f.fitem_type_id,
                    in_fitem_category             =>        f.fitem_category_id,
                    in_fitem_subcategory          =>        f.Fitem_Sub_Category_Id,
                    in_fitem_effective_date       =>        v_current_date,
                    in_fitem_billing_status       =>        pkg_db_object.gFItemBillStatus_Active,
                    in_fitem_processing_status    =>        pkg_db_object.gFItemProcStatus_Processed,
                    in_FItemRefPolicy             =>        in_old_policy_id,             
                    in_FItemRefEntityBelongsTo    =>        v_fitem_RefEntityBelongsTo,
                    in_FItemRefAssWithFItrx       =>        v_billing_debit_trx_id             
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_fitem_id ||
                         '........ Offset Fitem: ' || v_offset_fitem_id
                    );
               end if;  
               
               -- Create FIChange for new fitem 
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Create,
                    in_fichange_action_delta           =>   f.balance*-1,
                    in_fichange_ref_fitem              =>   v_fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_old_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;
                                                                              
               -- Create FIChange for the offset fitem 
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Create,
                    in_fichange_action_delta           =>   f.balance ,
                    in_fichange_ref_fitem              =>   v_offset_fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_old_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_offset_fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;  
                          
               -- Close the old fitems                         
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Change,
                    in_fichange_action_delta           =>   f.balance ,
                    in_fichange_ref_fitem              =>   v_fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_old_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || v_fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;
                          
               pkg_db_object.sp_fichange_create
               (
                    in_session_id                      =>   in_session_id,
                    in_transaction_id                  =>   in_transaction_id,
                    in_parent_fitransaction_id         =>   v_billing_debit_trx_id,
                    out_fichange_id                    =>   v_fichange_id,
                    in_fichange_action                 =>   pkg_db_object.gFIChange_Change,
                    in_fichange_action_delta           =>   f.balance*-1 ,
                    in_fichange_ref_fitem              =>   f.fitem_id,
                    in_fichange_sum_include            =>   pkg_db_object.gFIChange_Yes,
                    in_fichange_process_date           =>   v_current_date,
                    in_fichange_ref_pol                =>   in_old_policy_id,             
                    in_fichange_belongs_to             =>   v_fichange_belongs_to
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '........ Fitem  :' || f.fitem_id ||
                         '........ Fichange: ' || v_fichange_id
                    );
               end if;                                                
                          
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    f.fitem_id,
                    v_datamart_tf
               );  
                          
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_fitem_id,
                    v_datamart_tf
               );
               
               -- OSPRODUCT-27913
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_offset_fitem_id,
                    v_datamart_tf
               );
                          
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_instalment_id,
                    v_datamart_tf
               );
                      
          end loop;
          
          -- OSPRODUCT-27913
          -- Process the fitransaction
          pkg_db_object.sp_fitransaction_process
          (
              in_session_id,
              in_transaction_id,
              v_billacctrxset_id,
              v_billing_debit_trx_id,
              io_action_outcome_id,
              in_update_counts_tf => 'T'     -- Don't update Trx count and amt
          );
          -- end OSPRODUCT-27913
    
          -- Do BVsets for Billing Batch , datamart update .Process the batch and Fitransaction
          v_bv_table.delete;

          v_bv_table( pkg_db_object.gbv_FITrxSet_TotalAmount     ).business_variable_value := v_fi_debit_trx_amount;
          v_bv_table( pkg_db_object.gbv_FITrxSet_ExternalBatchId ).business_variable_value := 'Batch'||v_current_date ;-- ;to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
          v_bv_table( pkg_db_object.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,gbv_UserSession_UserName_Path) ;
          v_bv_table( pkg_db_object.gbv_FITrxSet_EntryType       ).business_variable_value := pkg_db_object.gBatchEntryMethod_System;
          v_bv_table( pkg_db_object.gbv_FITrxSet_DatePosted      ).business_variable_value := v_current_date;-- to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
          v_bv_table( pkg_os_constant_bv.gbv_GenObjObjectState   ).business_variable_value := pkg_db_object.gBatchStatus_Processed;
          v_bv_table( pkg_db_object.gbv_BillAccTrxSet_ProcessDate).business_variable_value := v_current_date; -- to_char(v_current_date, pkg_os_constant.dragondateformatdefault);
          v_bv_table( pkg_db_object.gbv_FITrxSet_BATotalBalance).business_variable_value := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_new_ba_id,pkg_db_object.gbv_BillAcc_TotalBalance); 

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billacctrxset_id,
               v_bv_table
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billacctrxset_id      , v_datamart_tf);
               
          pkg_os_dxf_exoskeleton.sp_setup_exoskeleton_structure -- changes according to OSPRODUCT-21940
          (
               in_session_id,
               in_transaction_id,
               v_billacctrxset_id,  -- changes according to OSPRODUCT-21940
               io_action_outcome_id
          );
     end loop;                   
     -----------------------------------------------------------------------------------------------------
     for r_src_cash_item in c_src_cash_item
     loop
           
          -- Get the new Billing Account Id 
          v_new_ba_ct_id :=   fn_get_ba_in_bor_customer 
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_new_policy_id
                                   ),
                                   r_src_cash_item.old_billing_account
                              );
                    
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Moving the excess cash Fitem id ' || r_src_cash_item.fitem_id ||
                    ' from the billing account ' || r_src_cash_item.old_billing_account ||
                    ' to the billing account ' || v_billingaccount_id||
                    ' v_new_ba_ct_id ' || v_new_ba_ct_id ||
                    ' Amount ' || r_src_cash_item.balance
               );
          end if; 
          
          if v_billingaccount_id is null or v_billingaccount_id <>  v_new_ba_ct_id
          then
               v_billingaccount_id :=  v_new_ba_ct_id;
               
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_object.gObjType_BillingAccountTrxSet,
                    r_src_cash_item.old_billing_account,
                    v_billacctrxset_ct_id
               );
               v_bv_table.delete;

               v_bv_table ( pkg_dB_reversal.gbv_FITrxSetEnteredby          ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
               v_bv_table ( pkg_dB_reversal.gbv_FITrxSetEntryType          ).business_variable_value := pkg_db_reversal.gBatchEntryMethod;
               v_bv_table ( pkg_dB_reversal.gbv_FITrxSetDatePosted         ).business_variable_value := v_current_date;
               v_bv_table ( pkg_dB_reversal.gbv_FITrxSetExternalBatchId    ).business_variable_value := 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_new_policy_id), pkg_os_constant.DragonDateFormatDefault );
               v_bv_table ( pkg_db_reversal.gbv_FITrxSetBatchType          ).business_variable_value := PKG_DB_CASH_TRANSFER.gBatch_CashTransferBatch;
               v_bv_table ( 31905246 /*CashTransfferedTo*/                 ).business_variable_value := v_new_ba_ct_id;
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billacctrxset_ct_id,
                    v_bv_table
               ); 
               
               v_cash_transfer_bats_list(v_count) :=   v_billacctrxset_ct_id;
               v_count := v_count + 1;
               
          end if;

          v_bv_table.delete;

          v_bv_table(PKG_DB_CASH_TRANSFER.gbv_FITrx_SubCategory  ).business_variable_value     :=   PKG_DB_CASH_TRANSFER.gFItem_SubCat_TransCash;
          v_bv_table(pkg_db_object.gbv_FITrx_RefAssociatedFitem  ).business_variable_value     :=   r_src_cash_item.fitem_id;
          v_bv_table(pkg_db_object.gbv_FITrx_Amount              ).business_variable_value     :=   r_src_cash_item.balance *(-1);
          v_bv_table(pkg_db_object.gbv_FITrx_RefFromAcc          ).business_variable_value     :=   r_src_cash_item.old_billing_account;
          v_bv_table(pkg_db_object.gbv_FITrx_RefFromPol          ).business_variable_value     :=   in_old_policy_id;
          v_bv_table(pkg_db_object.gbv_FITrx_RefBillingAccount   ).business_variable_value     :=   v_billingaccount_id;
          v_bv_table(pkg_db_object.gbv_FITrx_RefActionPolicy     ).business_variable_value     :=   in_new_policy_id;
          v_bv_table(PKG_DB_CASH_APPLY.gbv_FITrxTransferReason   ).business_variable_value     :=   genum_BOR_Cash_Transfer;
          
          pkg_db_object.sp_fitransaction_create
          (
               in_session_id                 =>   in_session_id,
               in_transaction_id             =>   in_transaction_id,
               in_fitrx_parent_fitrxset_id   =>   v_billacctrxset_ct_id,
               out_fitransaction_id          =>   v_fitransaction_id,
               in_fitrx_type                 =>   PKG_DB_CASH_TRANSFER.gFITrxType_CashTransfer,
               in_fitrx_remaining_amount     =>   0,
               in_fitrx_object_state         =>   PKG_DB_CASH_TRANSFER.gFITrxStatus_InProcess,
               in_bv_table                   =>   v_bv_table
          );

          v_total_amount := v_total_amount+r_src_cash_item.balance;
          
          -- OSPRODUCT-27913
          -- Process the fitransaction
          pkg_db_object.sp_fitransaction_process
          (
              in_session_id,
              in_transaction_id,
              v_billacctrxset_ct_id,
              v_fitransaction_id,
              io_action_outcome_id,
              in_update_counts_tf => 'T'     -- Don't update Trx count and amt
          );
          --pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_fitransaction_id, v_datamart_tf);
          -- end OSPRODUCT-27913

     end loop;
     
     v_cash_transfer_bats_index :=v_cash_transfer_bats_list.first;
     
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Cash Transfer BATS index ' || v_cash_transfer_bats_index ||
               ' BATS count  ' || v_cash_transfer_bats_list.count
          );
     end if;  
     
     
     while v_cash_transfer_bats_index is not null
     loop
     
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Cash Transfer BATS ' || v_cash_transfer_bats_list(v_cash_transfer_bats_index)
               );
          end if;  
               
     
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_cash_transfer_bats_list(v_cash_transfer_bats_index),
               pkg_db_object.gbv_FITrxSet_TotalAmount,-- amount
               v_total_amount
          );
          
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_cash_transfer_bats_list(v_cash_transfer_bats_index), v_datamart_tf);
          
          pkg_db_object.sp_billing_acct_trx_process
          (
               in_session_id,
               in_transaction_id,
               v_cash_transfer_bats_list(v_cash_transfer_bats_index),    -- BillingAccountTransactionSet ID
               v_object_cache,
               io_action_outcome_id
          );
          
          v_cash_transfer_bats_index := v_cash_transfer_bats_list.next(v_cash_transfer_bats_index);
     end loop;
     -----------------------------------------------------------------------------------------------------      
     pkg_os_datamart.sp_datamart_update_row
     (
          in_session_id,
          in_transaction_id,
          in_policy_term_id,
          v_datamart_tf
     ); 
     
     pkg_os_datamart.sp_datamart_update_row
     (
          in_session_id,
          in_transaction_id,
          in_prior_term_id,
          v_datamart_tf
     );     
      

end sp_move_nonelement_financials;



------------------
END PKG_DB_BOR;
/
