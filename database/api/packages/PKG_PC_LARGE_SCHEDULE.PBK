CREATE OR REPLACE PACKAGE BODY PKG_PC_LARGE_SCHEDULE

-------------
-- $Workfile:   BASE_API.PKG_PC_LARGE_SCHEDULE.PBK  $
-- $Revision:   1.8  $
--   $Author:   pmedapati  $
--     $Date:   11 Jan 2013 17:50:46  $
-------------
as


-----------------------------------------------------------------------------------------------------------------------------------------------------
--   Package Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------

pkg_name                           constant  system_log.program_name%type     :=   'PKG_PC_LARGE_SCHEDULE.';

procedure show_version
is
begin
     dbms_output.put_line('$Workfile:   BASE_API.PKG_PC_LARGE_SCHEDULE.PBK  $');
     dbms_output.put_line('$Revision:   1.8  $');
     dbms_output.put_line('$Author:   pmedapati  $');
     dbms_output.put_line('$Date:   11 Jan 2013 17:50:46  $');
exception
     when others
     then
          dbms_output.put_line     (sqlerrm (sqlcode));
end show_version;



function fn_get_soft_delete_flag(in_session_id in object.object_id%type,
                                 in_transaction_id in  object.object_id%type,
                                 in_object_id in  object.object_id%type)
return boolean
as                 
    v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    v_policy_tree_tf                   char(1) := 'F';
    v_template_object_id               object.object_id%type ;
    v_soft_delete_tf                   boolean := false;
    v_hard_del_objects_install_tf      boolean := true;
    v_exchange_id                      object.object_id%type := pkg_os_wf_session.fn_exchange_get(in_session_id,in_transaction_id);
    v_procedure_name   varchar2(100) := 'fn_get_soft_delete_flag';
begin

    v_policy_tree_tf := pkg_os_utility.fn_object_of_type_policy_tf(in_session_id,in_transaction_id,in_object_id);

    v_template_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_object_id,pkg_os_constant_bv.gbv_Template);

    if v_template_object_id  is null then -- It is a newly added object

        if v_session_control.gLogging_Performance then

           pkg_os_logging.sp_log (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              ' Delete Object ID: '
              ||in_object_id
              ||' Template Object ID: '
              ||v_template_object_id
              ||' Policy Tree T/F?: '
              ||v_policy_tree_tf
           );

        end if;

        v_soft_delete_tf := false;

    else

      if nvl(pkg_os_exchange.sp_exchange_row(v_exchange_id).hard_delete_objects_tf,pkg_os_constant.gBoolean_True) = pkg_os_constant.gBoolean_True then

         if v_session_control.gLogging_Performance then

            pkg_os_logging.sp_log
            (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' The installation flag is set to HARD delete the objects. '
               ||' Delete Object ID:'
               ||in_object_id
               ||' Template Object ID: '
               ||v_template_object_id
               ||' Policy Tree T/F?: '
               ||v_policy_tree_tf
            );

         end if;

         v_hard_del_objects_install_tf := true;

         v_soft_delete_tf := false;

      else

         v_hard_del_objects_install_tf := false;

         --
         --   Set the soft delete flag to True only for policies
         --

         if v_session_control.gLogging_Performance then

            pkg_os_logging.sp_log
            (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' The installation flag is set to SOFT delete the objects. '
               ||' Delete Object ID:'
               ||in_object_id
               ||' Template Object ID: '
               ||v_template_object_id
               ||' Policy Tree T/F?: '
               ||v_policy_tree_tf

            );

         end if;

         if v_policy_tree_tf = 'T' then

            v_soft_delete_tf := true;

         else

            v_soft_delete_tf := false;

         end if;

      end if;

    end if;
    
  return v_soft_delete_tf;
end fn_get_soft_delete_flag;							
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_object_async_action_update
--
--  %USAGE
--      This procedure is supposed to be executed by the very first action initiated by the Worker action.
--
--     Used by asynchronous processes to set the actor type of executor session with
--      actor type of user session.
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     in_session_id
--  %PARAM     in_transaction_id
--  %PARAM     in_action_object_id         The object on which the job will act
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_object_async_action_update
(
     in_session_id            in    object.object_id%type,
     in_transaction_id        in    object.object_id%type,
     in_action_object_id      in    object.object_id%type
)
is

     v_procedure_name   constant  system_log.program_name%type := pkg_name || 'sp_object_async_action_update';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_action_object_type_id   object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);

     v_user_session_id        object.object_id%type;
     v_user_actor_type        object.object_id%type;

     v_async_object_id      object.object_id%type;
     v_job_submitted_by    object.object_id%type;

     v_ptp_id          object.object_id%type;
     v_pt_id          object.object_id%type;

     v_batch_id async_batch.async_batch_id%type;												
begin

/*
     if ( pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id) <> 325 )
     then

          dbms_lock.sleep(600); -- wait till the parent job sompletes the commit

     end if;
*/

     --
     -- Get Async Definition ID from ObjectAsynchronousAction
     --


     -- UserSession._Reference_Current Async Object
     v_async_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, 30253401);

     -- ObjectAsynchronousAction._Reference_Job Submitted By
     v_job_submitted_by := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_async_object_id, 30253701);
    --29745201ObjectAsynchronousAction - ID - Async Batch Id
     v_batch_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_async_object_id, 29745201); 
  
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
            'in_session_id:' || in_session_id || 'in_transaction_id:' || in_transaction_id || ':in_action_object_id:' || in_action_object_id ||
            ' v_async_object_id:'
            ||v_async_object_id || ' v_job_submitted_by:'||v_job_submitted_by||
            ' v_batch_id:'||v_batch_id
       );
    end if;
     -- Get PTP ID
     -- v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, v_async_object_id, gObjType_PTP);

/*  -- PTP._Reference_Large Schedule Job is set as an initialization rule on the action that submits the job.
     if ( v_ptp_id is not null )
     then

          -- Set PTP._Reference_Large Schedule Job to ObjectAsynchronousAction (31724046)
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ptp_id, 31724046, v_async_object_id);

     end if;
*/
   begin
     select user_session_id
       into v_user_session_id
       from async_job_status
      where job_object_id = in_action_object_id
        and executor_user_session_id = in_session_id;
  exception
    when NO_DATA_FOUND then 
      select ab.async_batch_user_session_id into  v_user_session_id from async_batch ab
      where ab.async_batch_id=v_batch_id;
  end;
  
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          'in_session_id:' || in_session_id ||
          'in_transaction_id:' || in_transaction_id ||
          'v_async_object_id:' || v_async_object_id ||
          'v_job_submitted_by:' || v_job_submitted_by ||
          ' Action Object:' || in_action_object_id
     );
  end if;

     if ( v_job_submitted_by is not null and v_batch_id is  null)
     then

          v_user_actor_type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_job_submitted_by, pkg_os_constant_bv.gbv_UserDragonActorType);

          -- Get the Actor Role of the submitter and assign it to Job's execution session's Actor Role
          -- This is useful when DAP logs in as System Administrator and the workflow doesn't like it.
          -- Better to use the system attributes gateway_username and gateway_password to set the credentials to be used by DAP.
          -- pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionUserActorType, v_user_actor_type);

          -- Store the DragonUser who submitted the job on the Executor Session
          -- Useful for sending email notifications
          pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionUser, v_job_submitted_by );

          if v_session_control.glogging_Error then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.... Updating Executor Session: ' || in_session_id ||    ' to Actor Type:' || v_user_actor_type
               );

          end if;

     end if;

/*
     -- Update Executor Session Logging Level to Performance
     pkg_os_session.sp_session_log_level_update
     (
          in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_logging.G_LOGGING_PERFORMANCE
     );
*/

end sp_object_async_action_update;

procedure sp_policy_ls_controller_create (
     in_session_id            in    object.object_id%type,
     in_transaction_id        in    object.object_id%type,
     in_action_object_id      in    object.object_id%type,
     io_action_outcome_id   in out outcome.outcome_id%type
     
)
is

     v_procedure_name   constant  system_log.program_name%type := pkg_name || 'sp_ls_controller_initialize';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_action_object_type_id   object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);

     v_ls_controller_id    object.object_id%type;
     v_async_object_id   Object.object_id%type;

begin

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Creating LargeScheduleController in_action_object_id:' || in_action_object_id
          );

     end if;

     v_ls_controller_id := pkg_os_object_search.fn_object_11_child_get(
     
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_Policy_LSController
     );

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Found Policy LargeScheduleController: ' || v_ls_controller_id || ' as child of:' || in_action_object_id
          );

     end if;

     if ( v_ls_controller_id is null )
     then

          -- Create a new LargeScheduleController object
          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_Policy_LSController,
               in_action_object_id,
               v_ls_controller_id
          );

          if v_session_control.glogging_Error then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Created new Policy LargeScheduleController: ' || v_ls_controller_id || ' as child of:' || in_action_object_id
               );

          end if;

     end if;

     /*v_async_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,30253401);
     
     if v_async_object_id is not null then 
        pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_ls_controller_id,31916046,v_async_object_id);
     end if;*/
       
     
     io_action_outcome_id:= pkg_os_constant.gOutcome_OK;

end;  
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_ls_controller_initialize
--
--  %USAGE
--     Initializes LargeScheduleController object.
--      Note: LargeScheduleController object is created by Object Constructor as a child of QuoteTransaction/PolicyTransaction
--      Useful for displaying the details of the current job and the prior job.
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     in_session_id
--  %PARAM     in_transaction_id
--  %PARAM     in_action_object_id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ls_controller_initialize
(
     in_session_id            in    object.object_id%type,
     in_transaction_id        in    object.object_id%type,
     in_action_object_id      in    object.object_id%type
)
is

     v_procedure_name   constant  system_log.program_name%type := pkg_name || 'sp_ls_controller_initialize';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_action_object_type_id   object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);
     v_pt_id          object.object_id%type;

     v_async_object_id      object.object_id%type;
     v_async_job_title      varchar2(100);
     v_async_job_status    varchar2(100);
     v_ls_controller_id    object.object_id%type;

     v_c_job_name         varchar2(100);
     v_c_job_status        varchar2(100);
     v_c_job_ts               varchar2(100);

begin

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Initializing LargeScheduleController in_action_object_id:' || in_action_object_id
          );

     end if;

     -- 1) Determine the LargeScheduleController object - this will be a child of PolicyTransaction(PT) or QuoteTransaction (QT)
     -- In Action Object can be an ObjectDocument, PolicyTransaction, or a PTP, as jobs are submitted for these Object Types only

     if ( v_action_object_type_id = gObjType_PTP )
     then

          v_pt_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PT);

     elsif ( v_action_object_type_id = gObjType_ObjectDocument )
     then

          v_pt_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PT);

     elsif ( v_action_object_type_id = gObjType_PT )
     then

          v_pt_id := in_action_object_id;

     end if;

     -- v_ls_controller_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_pt_id, gObjType_LSController);

     v_ls_controller_id := pkg_os_utility.fn_get_one_child_of_type
     (
          in_session_id,
          in_transaction_id,
          v_pt_id,
          gObjType_LSController,
          null
     );

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Found LargeScheduleController: ' || v_ls_controller_id || ' as child of:' || v_pt_id
          );

     end if;

     if ( v_ls_controller_id is null )
     then

          -- Create a new LargeScheduleController object
          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               gObjType_LSController,
               v_pt_id,
               v_ls_controller_id
          );

          if v_session_control.glogging_Error then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Created new LargeScheduleController: ' || v_ls_controller_id || ' as child of:' || v_pt_id
               );

          end if;

     end if;

     -- 2) Get current Job Name and Status from ObjectAsynchronousAction

     -- UserSession._Reference_Current Async Object
     v_async_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, 30253401);

     -- ObjectAsynchronousAction - Reference Lookup Value - Asynchronous Job Title
     v_async_job_title := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_async_object_id, 26506601);

     -- ObjectAsynchronousAction - Reference Lookup Value - Job Status (VVL)
     v_async_job_status := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_async_object_id, 31911646);

     -- 3) Update Job Name and Job Status on LargeScheduleController object
     -- If Current Job/Status BVs are not null, then store them in Prior Task/Status BVs
     --

     -- Current Job Name (31912546)
     v_c_job_name := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ls_controller_id, 31912546);

     if ( v_c_job_name is not null )
     then

          -- Current Job Status (31912646)
          v_c_job_status := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ls_controller_id, 31912646);

          -- Current Job Submitted Timestamp (31912746)
          v_c_job_ts := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ls_controller_id, 31912746);

          -- Set Prior Job Name (31912846)
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31912846, v_c_job_name);

          -- Set Prior Job Status (31912946)
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31912946, v_c_job_status);

          -- Set Prior Job Submitted Timestamp (31913046)
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31913046, v_c_job_ts); -- pkg_os_constant.DragonDateFormatDefault));

     end if;


     -- Update Current Job/Status BVs

     -- Set Current Job Name (31912546)
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31912546, v_async_job_title);

     -- Set Current Job Status (31912646)
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31912646, v_async_job_status);

     -- Set Current Job Submitted Timestamp (31912746)
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ls_controller_id, 31912746, to_char(sysdate, pkg_os_constant.DragonDateFormatDefault));

end sp_ls_controller_initialize;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_job_initialization_routines
--
--  %USAGE
--     Initialization steps to be executed at the start of every Large Schedule process.
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     in_session_id
--  %PARAM     in_transaction_id
--  %PARAM     in_action_object_id         The object on which the job will act
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_job_initialization_routines
(
     in_session_id            in     object.object_id%type,
     in_transaction_id        in     object.object_id%type,
     in_action_object_id      in     object.object_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
is

     v_procedure_name   constant  system_log.program_name%type := pkg_name || 'sp_job_initialization_routines';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

begin

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'in_session_id:' || in_session_id || 'in_transaction_id:' || in_transaction_id || ':in_action_object_id:' || in_action_object_id
          );

     end if;

     -- 1) Store Current Job information on PTP

     sp_object_async_action_update
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id
     );

     -- 2) Update Task Name and Task Status on LargeScheduleController object
/*
     sp_ls_controller_initialize
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id
     );
*/

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception
     when others then

          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Error encountered while initializing LSController Attributes. Error: ' ||sqlerrm ||
               ' Error Trace:' || dbms_utility.format_error_backtrace
          );

end sp_job_initialization_routines;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_sched_item_datamart_update
--
--  %USAGE
--      This procedure does an Object Child Search and updates the datamart, for the given schedule item
--
--  %ALGORITHM
--
--  %PARAM    in_session_id                    Session Id
--  %PARAM    in_transaction_id                Transaction Id
--  %PARAM    in_parent_object_id              Action Object Id
--  %PARAM    in_schedule_object_type_id       Action Object Type Id
--  %PARAM    io_action_outcome_id             Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_sched_item_datamart_update
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_parent_object_id           in             object.object_id%type,
     in_schedule_object_type_id    in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is

     v_procedure_name       constant  system_log.program_name%type := pkg_name || 'sp_sched_item_datamart_update';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_datamart_tf          char(1);
     v_object_list                 pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_rec_count          number;

begin

     pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               'Updating schedule datamart for Schedule Item:' || in_parent_object_id);

     -- Search for given Schedule Object
     v_object_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_parent_object_id,
          in_schedule_object_type_id,
          v_object_list
     );

     pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               '... ... Found ' || v_object_list.count || ' schedule items.');

     if ( v_object_list.count > 0 )
     then

          for i in v_object_list.first..v_object_list.last
          loop

               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

          end loop;

     else

          pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               '... There are no schedule items imported. Please import schedule.');

     end if;


     io_action_outcome_id := pkg_os_constant.gOutcome_Ok;

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Updated Large Schedule Datamart for schedule item: ' || in_schedule_object_type_id
     );

exception
  when others then
     io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Error encountered while updating the schedule item datamart. Error: ' ||sqlerrm
     );
     raise;

end sp_sched_item_datamart_update;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_schedule_datamart_update
--
--  %USAGE
--      If all the property's are already in the datamart table, this procedure reads each property
--     and updates the datamart. If there are no property's, this procedure does an Object Child Search
--     and updates the datamart.
--
--  %ALGORITHM
--
--  %PARAM    in_session_id                    Session Id
--  %PARAM    in_transaction_id                Transaction Id
--  %PARAM    in_action_object_id              Action Object Id
--  %PARAM    io_action_outcome_id             Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_schedule_datamart_update
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is

     v_procedure_name       constant  system_log.program_name%type := pkg_name || 'sp_schedule_datamart_update';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_datamart_tf          char(1);
     v_object_list                 pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_rec_count          number;

     v_policy_commercial_id      object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_action_object_id, gObjType_PolicyCommercial);
     v_policy_cpp_id               object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_commercial_id, gObjType_PolicyCPP);
     v_policy_cppcf_id         object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_cpp_id, gObjType_PolicyCPPCF);

     v_lob_cf_ind          business_variable.business_variable_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_cpp_id, gbv_CPP_LOB_Property_Sel_Ind);
     v_lob_gl_ind          business_variable.business_variable_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_cpp_id, gbv_CPP_LOB_GL_Sel_Ind);

     v_product_id                  pd_product.pd_product_id%type := pkg_os_product.fn_object_product_get( in_session_id, in_transaction_id, in_action_object_id );
     v_filing                      pd_filing.pd_filing_id%type   := pkg_os_product.fn_policy_filing_get(in_session_id,in_transaction_id,in_action_object_id,v_product_id);

begin

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          'Updating schedule datamart for PTP:' || in_action_object_id ||
          ' Property LOB Ind:' || v_lob_cf_ind || ' GL LOB Ind:' || v_lob_gl_ind||
          ' trace:'||dbms_utility.format_call_stack
     );

     -- If Property LOB is Selected
     if (v_lob_cf_ind is not null)
     then
     -- Update datamart for all CFBuilding objects
          --sp_sched_item_datamart_update(in_session_id, in_transaction_id, in_action_object_id, gObjType_PolicyCFBuilCoverage, io_action_outcome_id);

          -- Search for CFBuilding

          v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PolicyCFBuilCoverage,
               v_object_list
          );

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ... Found ' || v_object_list.count || ' buildings for Property LOB.'
          );

          if ( v_object_list.count > 0 )
          then

               for i in v_object_list.first..v_object_list.last
               loop

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

               end loop;

          else

               pkg_os_logging.sp_log_info
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... There are no buildings for Property LOB. Please import schedule.'
               );

          end if;

          -- Search for CFLocation

          v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PolicyCFLocation,
               v_object_list
          );

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ... Found ' || v_object_list.count || ' locations for Property LOB.'
          );

          if ( v_object_list.count > 0 )
          then

               for i in v_object_list.first..v_object_list.last
               loop

                    -- Calculate TIV for Location
                    pkg_os_object_counter.sp_object_counter_set
                    (
                         in_session_id,
                         in_transaction_id,
                         319615,       -- CL_PolicyCPP_PropertyLocationDetail_PG
                         v_object_list(i),
                         v_product_id,
                         v_filing
                    );

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

               end loop;

          else

               pkg_os_logging.sp_log_info
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... There are no locations for Property LOB. Please import schedule.'
               );

          end if;

          -- Search for CFJurisdiction

          v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PolicyCFJurisdiction,
               v_object_list
          );

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ... Found ' || v_object_list.count || ' jurisdictions for Property LOB.'
          );

          if ( v_object_list.count > 0 )
          then

               for i in v_object_list.first..v_object_list.last
               loop

                    -- Calculate TIV for Jurisdiction
                    pkg_os_object_counter.sp_object_counter_set
                    (
                         in_session_id,
                         in_transaction_id,
                         319815,       -- CL_PolicyCPP_PropertyJurisdictionDetails_PG
                         v_object_list(i),
                         v_product_id,
                         v_filing
                    );

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

               end loop;

          else

               pkg_os_logging.sp_log_info
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... There are no jurisdictions for Property LOB. Please import schedule.'
               );

          end if;

          -- Calculate TIV for Property LOB
          pkg_os_object_counter.sp_object_counter_set
          (
               in_session_id,
               in_transaction_id,
               319915,         -- CL_PolicyCPP_PropertyMain_PG
               v_policy_cppcf_id,
               v_product_id,
               v_filing
          );


     end if;

     -- If GL LOB is Selected
     if ( v_lob_gl_ind is not null )
     then

          -- Search for GLLocation

          v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PolGLLocLiabltyCov,
               v_object_list
          );

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ... Found ' || v_object_list.count || ' locations for General Liability LOB.'
          );

          if ( v_object_list.count > 0 )
          then

               for i in v_object_list.first..v_object_list.last
               loop

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

               end loop;

          else

               pkg_os_logging.sp_log_info
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... There are no locations for General Liability LOB. Please import schedule.'
               );

          end if;

          -- Search for GLJurisdiction

          v_object_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_action_object_id,
               gObjType_PolGLJurisLiabltyCov,
               v_object_list
          );

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... ... Found ' || v_object_list.count || ' jurisdictions for General Liability LOB.'
          );

          if ( v_object_list.count > 0 )
          then

               for i in v_object_list.first..v_object_list.last
               loop

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), v_datamart_tf);

               end loop;

          else

               pkg_os_logging.sp_log_info
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... There are no jurisdictions for General Liability LOB. Please import schedule.'
               );

          end if;

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_Ok;

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Property Schedule Datamart Updated... '
     );

exception
  when others then
     io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Error encountered while updating the datamarts. Error: ' ||sqlerrm
     );
     raise;

end sp_schedule_datamart_update;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_property_tree_create_all
--
--   %USAGE
--        Creates a mini-tree and parent mini-trees for Location and Jurisdiction
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_property_tree_create_all
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_property_tree_create_all';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_tree_id   object.object_id%type;
     v_property_object_type  object_type.object_type_id%type;

     v_tree_load_action    action.action_id%type;
     v_quote_or_nb_ind      char(1);
     v_policy_trx_type      object.object_id%type;

     v_property_sequence       integer := 1;

     v_referral_outcome_id   outcome.outcome_id%type;
     v_object_uwalerts_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_datamart_tf          char(1);

     -- Select properties who are included
     cursor cur_property_schedule
     is
     select
          d.property_schedule_id,
          d.jurisdiction_name ||
               (case when d.location_name is not null then ', ' || d.location_name else null end) ||
               (case when d.building_name is not null then ', ' || d.building_name else null end) as property_name,
          (count(*) over()) as total_count
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_action_object_id
     and
          d.lob_selected_ind is not null
     and (
               ( d.building_id is not null and d.building_include_tf = 'Yes' )
               or
               ( d.location_id is not null and d.location_include_tf = 'Yes' )
               or
               ( d.jurisdiction_id is not null and d.jurisdiction_include_tf = 'Yes' )
          )
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     and 
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.property_schedule_id;

begin

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Creating trees for all Properties...'
     );

     -- Get Transaction Type
     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, in_action_object_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;


     -- Get the Policy Tree or create one if there is none.
     -- Ideally there would be one, if the user calls validate from within the tree
     -- But for PolicyTransactions, where the policy image is created and then validate is called,
     -- we need to build the Policy Tree first

     if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 819046;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 896746;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if;

     pkg_os_tree.sp_tree_create
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          v_tree_load_action,
          in_action_object_id,
          gObjType_PTP,
          io_action_outcome_id,
          'F'             -- Don't perform Tree Completion now
     );

     v_policy_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);

     -- First delete all mini-trees
     pkg_os_tree.sp_mini_tree_delete_all(in_session_id, in_transaction_id, v_policy_tree_id);

     -- 2nd, update datamart
     sp_schedule_datamart_update(in_session_id, in_transaction_id, in_action_object_id, io_action_outcome_id);

     -- 3rd, for each 'Covered' property, build a new tree
     for c1 in cur_property_schedule
     loop

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '..... Property: ' || v_property_sequence || ' of ' || c1.total_count || ' - ' || c1.property_name
          );

          v_property_object_type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, c1.property_schedule_id);

          if ( v_property_object_type = gObjType_PolicyCFBuilCoverage )   -- PolicyCFBuildingCoverage
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 871246;      --CL_PolicyCFBuildingCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 871346;      --CL_PolicyCFBuildingCoverage_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolicyCFLocation) -- PolicyCFLocation
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 859146;      -- CL_PolicyCFLocation_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 871646;      -- CL_PolicyCFLocation_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolicyCFJurisdiction)
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 948746;      -- CL_PolicyCFJurisdiction_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 949246;      -- CL_PolicyCFJurisdiction_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolGLLocLiabltyCov )  -- PolicyGLLocationLiabilityCoverage
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 953646;      -- CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 953446;      -- CL_PolicyGLJurisdiction_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolGLJurisLiabltyCov )
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 953646;      --CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 953746;      --CL_PolicyGLLocationLiabilityCoverage_PNBT_MiniTreeLoad_DB

               end if;

          end if;

          --
          --   Set the PolicyTree as the Session Tree as this BV will be used in various tree related algorithms...
          --

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               pkg_os_constant_bv.gbv_SessionCurrentTree,
               v_policy_tree_id
          );

          --
          -- Build tree and perform tree completion.
          --

          pkg_os_tree.sp_minitree_load
          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               v_tree_load_action,
               c1.property_schedule_id,
               v_property_object_type,
               io_action_outcome_id,
               'F'             -- Don't perform Tree Completion now
          );

          v_property_sequence :=  v_property_sequence + 1;

     end loop;

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_property_tree_create_all;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_list_locs_covered_ind
--
--   %USAGE
--        Updated Covered Location for the selected Locations (one or more)
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    in_selected_object_id      Selected Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_list_locs_covered_ind
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_selected_object_id   in             object.object_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_list_locs_covered_ind';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_object_id              object.object_id%type;
     v_datamart_tf         char;
     v_object_type_id         object_type.object_type_id%type;

     v_covered_ind_yn   lookup_list_value.lookup_enum%type;

     v_child_object_list      pkg_os_object.t_object_list;
     v_child_object_index     number;

     v_session_current_tree_id     object.object_id%type;
     v_master_tree_id          object.object_id%type;
     v_mini_tree_id          object.object_id%type;

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Updating Covered Indicator for selected object:' || in_selected_object_id
          );

     end if;

     v_session_current_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);
     v_master_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_session_current_tree_id, pkg_os_constant_bv.gbv_objTreeMasterTree);

     v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_selected_object_id);

     if v_object_type_id = gObjType_PolicyCFLocation  -- PolicyCFLocation
     then

          -- Since the user had selected Set/UnSet on a Location, the change should reflect on all child Buildings
          v_covered_ind_yn := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFLoc_PropLocInd);

          if ( nvl(v_covered_ind_yn, gCovered_Indicator_Yes) = gCovered_Indicator_Yes )
          then

               -- Get all child Buildings and exclude from Coverage
               for x in ( select d.building_id
                              from dragon_property_schedule d where d.location_id = v_object_id 
                              and nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed    )
               loop

                    -- Exclude from Coverage
                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, x.building_id, gbv_PolicyCFBuild_PropBuildInd, gCovered_Indicator_No);

                    -- Identify the Mini Tree for Building and delete it
                    pkg_os_tree.sp_mini_tree_delete(in_session_id, in_transaction_id, v_master_tree_id, x.building_id);

                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, x.building_id, v_datamart_tf);

               end loop;

               -- Exclude Location from Coverage
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFLoc_PropLocInd, gCovered_Indicator_No);

               -- Identify the Mini Tree for Location and delete it
               pkg_os_tree.sp_mini_tree_delete(in_session_id, in_transaction_id, v_master_tree_id, v_object_id);
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_id, v_datamart_tf);

          else

               -- Include Location
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFLoc_PropLocInd, gCovered_Indicator_Yes);

               -- Get all child Buildings and include in Coverage
               for x in ( select d.building_id
                              from dragon_property_schedule d where d.location_id = v_object_id
                              and nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   )
               loop

                    -- Include all the child buildings
                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, x.building_id, gbv_PolicyCFBuild_PropBuildInd, gCovered_Indicator_Yes);
                    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, x.building_id, v_datamart_tf);

               end loop;

               -- Recreate mini-trees

          end if;

     elsif v_object_type_id = gObjType_PolicyCFBuilCoverage  -- PolicyCFBuildingCoverage
     then

          -- Since the user had selected Set/UnSet on a Location, the change should reflect on all child Buildings
          v_covered_ind_yn := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFBuild_PropBuildInd);

          if ( nvl(v_covered_ind_yn, gCovered_Indicator_Yes) = gCovered_Indicator_Yes )
          then

               -- Exclude from Coverage
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFBuild_PropBuildInd, gCovered_Indicator_No);

          else

               -- Include in Coverage
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_id, gbv_PolicyCFBuild_PropBuildInd, gCovered_Indicator_Yes);

          end if;

     elsif v_object_type_id = gObjType_PolicyCFJurisdiction  -- PolicyCFJurisdiction
     then

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_object_id,
               gbv_PolicyCFJuris_PropJurisInd,
               gCovered_Indicator_Yes
          );

     elsif v_object_type_id = gObjType_PolGLJurisLiabltyCov  -- PolicyGLJurisdictionLiabilityCoverage
     then

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_object_id,
               gbv_PolicyGLJuris_GLJurisInd,
               gCovered_Indicator_Yes
          );

     elsif v_object_type_id = gObjType_PolGLLocLiabltyCov  -- PolicyGLLocationLiabilityCoverage
     then

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_object_id,
               gbv_PolicyGLLoc_GLLocInd,
               gCovered_Indicator_Yes
          );

     end if;

     pkg_os_datamart.sp_datamart_update_row
     (
          in_session_id,
          in_transaction_id,
          v_object_id,
          v_datamart_tf
     );

end sp_list_locs_covered_ind;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_list_selected_locs_delete
--
--   %USAGE
--        Updated Covered Location for the selected Locations (one or more)
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    in_selected_object_id    Selected Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_list_selected_locs_delete
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_selected_object_id         in             object.object_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type,
     io_message_list               in out nocopy  pkg_os_message.t_message_list
)
as

     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_list_selected_locs_delete';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_parent_object_id            object.object_id%type;
     v_object_type_id              object_type.object_type_id%type;
     v_parent_object_type_id       object_type.object_type_id%type;

     v_session_current_tree_id     object.object_id%type;
     v_master_tree_id              object.object_id%type;
     v_child_count                 number := 0;
     v_child_count_loc             number;
     v_soft_delete_tf              boolean := false;
     v_object_list                 pkg_os_object.t_object_list;
     v_object_list_loc             pkg_os_object.t_object_list;
     v_grandparent_object_id       object.object_id%type;
     v_great_grandparent_object_id object.object_id%type;
     v_ptp_id                      object.object_id%type;
     v_jurisdiction                object.object_id%type;
     v_primaryriskaddress          object.object_id%type;
     v_primaryrisk_juris           object.object_id%type;
     v_building_instance_number    number;
     v_message_str                 varchar2(100);

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Deleting selected object:'||in_selected_object_id
          );
     end if;

     v_session_current_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);
     v_master_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_session_current_tree_id, pkg_os_constant_bv.gbv_objTreeMasterTree);
     v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_selected_object_id);
     v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_selected_object_id);
     v_parent_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_parent_object_id);
     v_grandparent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_parent_object_id);
     v_great_grandparent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_grandparent_object_id);
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, v_grandparent_object_id, gObjType_PTP);

     if (v_object_type_id = gObjType_PolicyCFBuilCoverage or v_object_type_id=gObjType_PolCABALocation)
     then
          v_jurisdiction := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_parent_object_id, 31914546);
     elsif (v_object_type_id=gObjType_PolCABAVehicle)
     then
          v_jurisdiction := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_parent_object_id, 33871678);
     elsif (v_object_type_id = gObjType_PolicyCFLocation)
     then
          v_jurisdiction := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_parent_object_id, 34919348);
     end if;
     v_primaryriskaddress := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ptp_id, 32497148);
     v_primaryrisk_juris := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_primaryriskaddress, 210419);
      
	  if (v_object_type_id=gObjType_PolicyCFLocation or v_object_type_id=gObjType_PolCABALocation)
      then
           pkg_os_object_search.sp_object_children_of_type_get
           (
             in_session_id,
             in_transaction_id,
             v_parent_object_id,
             v_object_type_id,
             v_object_list_loc,
             null,
             true
            );
       else
            pkg_os_object_search.sp_object_children_of_type_get
            (
             in_session_id,
             in_transaction_id,
             v_grandparent_object_id,
             v_parent_object_type_id,
             v_object_list_loc,
             null,
             true
             );
       end if;
       v_child_count_loc := v_object_list_loc.count;
       pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| location count:'||v_child_count_loc
          );
        for x in v_object_list_loc.first..v_object_list_loc.last
          loop
               pkg_os_logging.sp_log
               (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '|||||| Checking children count for location: '||v_object_list_loc(x)
                );
               pkg_os_object_search.sp_object_children_of_type_get
               (
                in_session_id,
                in_transaction_id,
                v_object_list_loc(x),
                v_object_type_id,
                v_object_list,
                null,
                true
                );
                v_child_count := v_child_count + v_object_list.count;

          end loop;
       
       
    if (v_object_type_id=gObjType_PolicyCFLocation or v_object_type_id=gObjType_PolCABALocation)
    then
         if ((v_jurisdiction=v_primaryrisk_juris and v_child_count_loc=1))
         then
              pkg_os_logging.sp_log
              (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Cannot delete'
               );
               v_message_str := 'Atleast one location should be present for the primary jurisdiction';
               pkg_os_message.sp_message_add(io_message_list, v_message_str);
               io_action_outcome_id := gOutcome_NoDelete;
          else
              pkg_os_tree.sp_mini_tree_delete(in_session_id, in_transaction_id, v_master_tree_id, in_selected_object_id);
              v_soft_delete_tf := fn_get_soft_delete_flag(in_session_id,in_transaction_id,in_selected_object_id);
              pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, v_parent_object_id, in_selected_object_id, v_object_type_id,null,v_soft_delete_tf);
          end if;
 
    elsif(v_object_type_id=gObjType_PolicyCFBuilCoverage or v_object_type_id=gObjType_PolCABAVehicle)
    then
         if ((v_jurisdiction=v_primaryrisk_juris and v_child_count=1))
         then
              pkg_os_logging.sp_log
              (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Cannot delete'
               );
               v_message_str := 'Atleast one building/vehicle should be present for the primary jurisdiction';
               pkg_os_message.sp_message_add(io_message_list, v_message_str);
               io_action_outcome_id := gOutcome_NoDelete;
    
          else
              pkg_os_tree.sp_mini_tree_delete(in_session_id, in_transaction_id, v_master_tree_id, in_selected_object_id);
              v_soft_delete_tf := fn_get_soft_delete_flag(in_session_id,in_transaction_id,in_selected_object_id);
              pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, v_parent_object_id, in_selected_object_id, v_object_type_id,null,v_soft_delete_tf);
          end if;
     else
         pkg_os_tree.sp_mini_tree_delete(in_session_id, in_transaction_id, v_master_tree_id, in_selected_object_id);
         v_soft_delete_tf := fn_get_soft_delete_flag(in_session_id,in_transaction_id,in_selected_object_id);
         pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, v_parent_object_id, in_selected_object_id, v_object_type_id,null,v_soft_delete_tf);
  
  
    end if;
end sp_list_selected_locs_delete;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_list_object_global_update
--
--   %USAGE
--        Do a Global Update on the selected Buildings
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    in_selected_object_id    Selected Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_list_object_global_update
(
     in_session_id                 in      object.object_id%type,
     in_transaction_id             in      object.object_id%type,
     in_action_id          in       action.action_id%type,
     in_template_object_id   in   object.object_id%type,
     in_selected_object_id   in   object.object_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_list_object_global_update';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_id          object.object_id%type;

     v_datamart_tf      char;

     -- Select properties who are included
     cursor cur_property_schedule
     is
     select
          d.property_schedule_id,
          d.jurisdiction_name ||
               (case when d.location_name is not null then ', ' || d.location_name else null end) ||
               (case when d.building_name is not null then ', ' || d.building_name else null end) as property_name,
          (count(*) over()) as total_count
     from
          dragon_property_schedule d
     where
          d.ptp_id = v_ptp_id
     and
          d.lob_selected_ind is not null
     and
          ( d.building_id is not null and d.building_include_tf = 'Yes' )
     and
          d.object_state_id <> gObjState_GlobalUpdateTemplate -- Exclude Template Objects
     and nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.property_schedule_id;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Global Updating selected object:'||in_selected_object_id ||
               ' using Template object:' || in_template_object_id
          );

     end if;

     if ( in_selected_object_id is null )
     then

          -- Get PTP ID
          v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_template_object_id, gObjType_PTP);

          for x in cur_property_schedule
          loop

               pkg_os_product_object_copy.sp_pd_object_update
               (
                    in_session_id,
                    in_transaction_id,
                    in_template_object_id,
                    in_action_id,
                    x.property_schedule_id  -- Westborough, MA
               );

               -- Cleanse the building tree
               pkg_os_policy_cleanse.sp_policy_cleanse
               (
                    in_session_id => in_session_id,
                    in_transaction_id => in_transaction_id,
                    in_action_id => in_action_id,
                    in_action_object_id => x.property_schedule_id,
                    in_tree_definition1_id => 201,
                    in_tree_definition2_id => null
               );

               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, x.property_schedule_id, v_datamart_tf);

          end loop;

     else

          pkg_os_product_object_copy.sp_pd_object_update
          (
               in_session_id,
               in_transaction_id,
               in_template_object_id,
               in_action_id,
               in_selected_object_id -- Westborough, MA
          );

          -- Cleanse the building tree
          pkg_os_policy_cleanse.sp_policy_cleanse
          (
               in_session_id => in_session_id,
               in_transaction_id => in_transaction_id,
               in_action_id => in_action_id,
               in_action_object_id => in_selected_object_id,
               in_tree_definition1_id => 201,
               in_tree_definition2_id => null
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_selected_object_id, v_datamart_tf);

     end if;

end sp_list_object_global_update;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_global_update_selected
--
--   %USAGE
--        Gets the list of selected objects from a 1-M list, and calls Global Update for selected Objects
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_global_update_selected
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_global_update_selected';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_list_object_id         object.object_id%type              := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, in_session_id, 211282); --pkg_os_constant_bv.gbv_SessionCurrentObject   );
     v_child_object_type_id   object_type.object_type_id%type    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListElementObjectType   );
     v_child_list_element_id  object.object_id%type              := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListSelectedElement     );
     v_selected_object_str       varchar2(4000)              := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListElementsSelected       );
     v_selected_object_list     pkg_os_token.t_string_table;

     v_select_object_id  object.object_id%type;
     v_datamart_tf           char;
     v_object_type_id              object_type.object_type_id%type;

     v_ptp_id              object.object_id%type;
     v_global_updae_object_id         object.object_id%type;
     v_list_object_list    pkg_os_object.t_object_list;

begin




     pkg_os_object_cache_search.sp_obj_cache_bv_objects_get
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          pkg_os_constant_bv.gbv_ListElementsSelected,
          v_list_object_list
     );

     if ( v_list_object_list.count > 0 )
     then

          v_selected_object_str    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, io_object_cache, v_list_object_list(1), pkg_os_constant_bv.gbv_ListElementsSelected);

     end if;
	 -- Get PTP ID
	 v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
													  in_transaction_id => in_transaction_id,
													  in_object_id      => in_action_object_id); 

	 -- The PTP._Reference_Template Object for Global Update is set in the initialization rule

	 v_global_updae_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ptp_id, gbv_PTP_Refers_TemplateObject);
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Global Updating selected objects:'||v_selected_object_str ||
               ' In Action Object ID:' || in_action_object_id ||
               ' List Object ID:' || v_list_object_id ||
               '  Selected count:'|| v_list_object_list.count
          );
     end if;
     
     if ( length(v_selected_object_str) > 0 )
     then



          --
          -- Split selected locations into tokens
          --
          if v_session_control.gLogging_Full
          then
              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '|||||| Global object:'||v_global_updae_object_id
              );
          end if;
          
          pkg_os_token.sp_tokenize_string(v_selected_object_str, ',',  v_selected_object_list);

          for x in v_selected_object_list.first..v_selected_object_list.last
          loop

               v_select_object_id := pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, io_object_cache, v_selected_object_list(x), pkg_os_constant_bv.gbv_ListElementObject );
               v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_select_object_id);

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '|||||| Object ID :'||v_select_object_id || ' Object Type ID : '||v_object_type_id
                    );
               end if;

               -- Global Update All will need a DAP job, whereas Update Selected will/may not need a DAP job.
               sp_list_object_global_update(in_session_id, in_transaction_id, in_action_id, v_global_updae_object_id, v_select_object_id);

          end loop;

     end if;

     -- Delete the Template Building
     pkg_os_object.sp_object_delete
     (
          in_session_id,
          in_transaction_id,
          pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_global_updae_object_id),
          v_global_updae_object_id,
          pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_global_updae_object_id)
     );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_global_update_selected;

procedure sp_list_selected_add(
  in_session_id         in object.object_id%type,
  in_transaction_id     in object.object_id%type,
  in_object_cache       in out  pkg_os_object_cache.t_object_cache,
  in_action_object_id   in object.object_id%type,
    in_message_list       in out pkg_os_message.t_message_list,
  io_action_outcome_id  in out outcome.outcome_id%type,
  in_action_id    in action.action_id%type)
as

  v_session_control    pkg_os_session.r_dragon_session_control:= pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

  v_procedure_name     varchar2(100):= 'sp_list_selected_add';

  v_list_object_id object.object_id%type:= pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, in_object_cache, in_session_id,   pkg_os_constant_bv.gbv_GenObjCurrentList     );
  v_child_object_id object.object_id%type:= pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, in_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListObjectsSelected );
  v_action_id action.action_id%type:= in_action_object_id;
  v_action_object_type_id       action.object_type_id%type := pkg_os_action.fn_action_row( in_action_id ).object_type_id;
  v_new_object_id object.object_id%type;
  v_child_object_type object_type.OBJECT_TYPE_ID%type;
  v_relationship_record                                  object_relationship%rowtype;

  v_driver_parent_object_id object.object_id%type;

  v_new_driver_object_id object.object_id%type;

begin 
  
  pkg_os_object_cache_io.sp_obj_cache_bv_set(in_session_id =>in_session_id,
     in_transaction_id => in_transaction_id,
     in_object_cache => in_object_cache,
     in_object_id => in_action_object_id,
     in_bv_id  =>pkg_os_constant_bv.gbv_GenObjCurrentList,
     in_bv_value  =>v_list_object_id);
     
  if v_session_control.gLogging_Full
  then

    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
     '... Executing multiplicity add/delete ...'||v_action_id|| ' v_list_object_id:'||v_list_object_id||
     ' v_child_object_id:'||v_child_object_id );

  end if;

 /* pkg_os_action.sp_execute_action
  (
    in_session_id,
    in_transaction_id,
    in_object_cache,
    in_message_list,
    189,
    in_action_object_id,
    io_action_outcome_id
  );*/

    pkg_os_action_object.sp_multiplicity_create_child
    (
         in_session_id,
         in_transaction_id,
         in_object_cache,
         in_message_list,
         in_action_id,
         in_action_object_id,
         v_action_object_type_id,
         io_action_outcome_id
    );
    --get newly created child 
   v_new_object_id:= pkg_os_object_io.fn_object_bv_get(in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_constant_bv.gbv_SessionNewObject);
  
  v_child_object_type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                                          in_transaction_id => in_transaction_id,
                                                          in_object_id      => v_new_object_id);
  
  pkg_os_logging.sp_log(in_session_id,in_transaction_id ,  v_procedure_name,
  ' Created object:'|| v_new_object_id|| '  v_child_object_type:'||v_child_object_type);
  
  for v_relationship_record in(    select   *  from  object_relationship
       where
            object_type_id                = v_child_object_type and 
            object_relationship_type_id   = pkg_os_constant.gObjRelation_Refers_to and
            reference_constraint_type_id  = pkg_os_constant.gReferenceC_Tied) loop 
      if v_relationship_record.reference_bv_id is not null then 
      
          if pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_new_object_id, v_relationship_record.reference_bv_id ) is null then 

            v_driver_parent_object_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_new_object_id, v_relationship_record.reference_constraint_path );  

            if v_driver_parent_object_id is null then

                 pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to find driver object parent ...' );
                 raise no_data_found;


            end if;
            
            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 v_relationship_record.RELATED_OBJECT_TYPE_ID,
                 v_driver_parent_object_id,
                 v_new_driver_object_id
            );
            if v_session_control.gLogging_Full then

                 pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Created Driver ObjectID:'||v_new_driver_object_id||' Child of ObjectID:'||v_driver_parent_object_id );

            end if;

            --
            --   Set up the relationship between the new object, and the new driver object.
            --

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_new_object_id, v_relationship_record.reference_bv_id, v_new_driver_object_id );

            
          end if;
        
      
      end if;
   end loop;
   --set session new object id
   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id,
          pkg_os_constant_bv.gbv_SessionNewObject,  v_new_object_id);
             
  io_action_outcome_id:= pkg_os_constant.gOutcome_OK;
end sp_list_selected_add;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_multiplicity_list_command
--
--   %USAGE
--        Gets the list of selected objects from a 1-M list, and applies the command
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_multiplicity_list_command
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type,
     in_command_type               in         number
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_multiplicity_list_command';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

    -- v_list_object_id         object.object_id%type              := in_action_object_id;
     v_list_object_id         object.object_id%type  :=pkg_os_object_cache_io.fn_obj_cache_object_bv_get  ( in_session_id, in_transaction_id, io_object_cache,in_session_id,pkg_os_constant_bv.gbv_GenObjCurrentList);
     v_child_object_type_id   object_type.object_type_id%type    := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListElementObjectType   );
     v_child_list_element_id  object.object_id%type              := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListSelectedElement     );
     v_selected_locs_str       varchar2(4000)              := pkg_os_object_cache_io.fn_obj_cache_object_bv_get   ( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListElementsSelected       );
     v_selected_locs_list     pkg_os_token.t_string_table;

     v_object_id              object.object_id%type;
     v_datamart_tf         char;
     v_object_type_id         object_type.object_type_id%type;

     v_ptp_id          object.object_id%type;

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Updating selected objects:'||v_selected_locs_str ||
               ' In Action Object ID:' || in_action_object_id ||
               ' List Object ID:' || v_list_object_id ||
               ' Command Type:' || in_command_type
          );
     end if;

     if ( length(v_selected_locs_str) > 0 )
     then

          --
          -- Split selected locations into tokens
          --

          pkg_os_token.sp_tokenize_string(v_selected_locs_str, ',',  v_selected_locs_list);

          for x in v_selected_locs_list.first..v_selected_locs_list.last
          loop

               v_object_id := pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, io_object_cache, v_selected_locs_list(x), pkg_os_constant_bv.gbv_ListElementObject );
               v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_object_id);

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '|||||| Object ID :'||v_object_id || ' Object Type ID : '||v_object_type_id
                    );
               end if;

               case in_command_type
                    when 1 then
                         sp_list_locs_covered_ind(in_session_id, in_transaction_id, v_object_id);

                    when 2 then
                         sp_list_selected_locs_delete(in_session_id, in_transaction_id, v_object_id,io_action_outcome_id,io_message_list);

                    when 3 then
                         sp_list_object_global_update(in_session_id, in_transaction_id, in_action_id, in_action_object_id, v_object_id);
                    when 4 then 
                         sp_list_selected_add(in_session_id, in_transaction_id,io_object_cache,in_action_object_id,io_message_list,io_action_outcome_id,in_action_id);																																									 
               end case;

          end loop;

     else

          -- If user has not selected any, update all of them
          if ( in_command_type = 3 )
          then

               -- Get PTP ID
               v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ptp_id, gbv_PTP_Refers_TemplateObject, in_action_object_id);

               -- Global Update All will need a DAP job, whereas Update Selected will/may not need a DAP job.
               sp_list_object_global_update(in_session_id, in_transaction_id, in_action_id, in_action_object_id, null);
               -- null;

          end if;


     end if;
	        if (in_command_type=2 and io_action_outcome_id = gOutcome_NoDelete)
            then
                 io_action_outcome_id:=gOutcome_NoDelete;
    
            else
                 io_action_outcome_id := pkg_os_constant.gOutcome_OK;
            end if;



end sp_multiplicity_list_command;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_schedule_tree_validate
--
--   %USAGE
--        Creates a mini-tree and parent mini-trees for Location and Jurisdiction
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_schedule_tree_validate
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_schedule_tree_validate';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_tree_id   object.object_id%type;
     v_property_object_type  object_type.object_type_id%type;

     v_tree_load_action    action.action_id%type;
     v_quote_or_nb_ind      char(1);
     v_policy_trx_type      object.object_id%type;
     v_product_id           pd_product.pd_product_id%type := pkg_os_product.fn_object_product_get( in_session_id, in_transaction_id, in_action_object_id );
     v_property_sequence       integer := 1;

     v_referral_outcome_id   outcome.outcome_id%type;
     v_object_uwalerts_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_datamart_tf          char(1);

     v_policy_commercial_id      object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_action_object_id, gObjType_PolicyCommercial);

     v_policy_cpp_id               object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_commercial_id, gObjType_PolicyCPP);

     v_lob_cf_ind     business_variable.business_variable_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_cpp_id, gbv_CPP_LOB_Property_Sel_Ind);
     v_lob_cppca_ind  business_variable.business_variable_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_cpp_id, gbv_CPP_LOB_BAuto_Sel_Ind);
begin

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Starting Large Schedule Validation'
     );

     -- Get Transaction Type
     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, in_action_object_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;


     -- Get the Policy Tree or create one if there is none.
     -- Ideally there would be one, if the user calls validate from within the tree
     -- But for PolicyTransactions, where the policy image is created and then validate is called,
     -- we need to build the Policy Tree first
     -- Master tree action id
     if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 819046;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 896746;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if;

     pkg_os_tree.sp_tree_create
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          v_tree_load_action,
          in_action_object_id,
          gObjType_PTP,
          io_action_outcome_id,
          'F'             -- Don't perform Tree Completion now
     );

     v_policy_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);

     -- First delete all mini-trees
     pkg_os_tree.sp_mini_tree_delete_all(in_session_id, in_transaction_id, v_policy_tree_id);

     -- 2nd, update datamart
     sp_schedule_datamart_update(in_session_id, in_transaction_id, in_action_object_id, io_action_outcome_id);
	 
	 if (v_product_id = 2805)
     then
       if v_lob_cf_ind is not null then
     -- Validate properties
         sp_property_tree_validate
         (
              in_session_id,
              in_transaction_id,
              io_object_cache,
              io_message_list,
              in_action_id,
              in_action_object_id,
              in_action_object_type_id,
              io_action_outcome_id,
              false
         );
       end if;
       if v_lob_cppca_ind is not null then
       -- Validate vehicles
       sp_vehicle_tree_validate
       (
            in_session_id,
            in_transaction_id,
            io_object_cache,
            io_message_list,
            in_action_id,
            in_action_object_id,
            in_action_object_type_id,
            io_action_outcome_id
       );
       end if;	 
	 elsif (v_product_id=115448)
     then
     --Validate CA vehicles
     sp_ca_vehicle_tree_validate
    (
     in_session_id,
     in_transaction_id,
     io_object_cache,
     io_message_list,
     in_action_id,
     in_action_object_id,
     in_action_object_type_id,
     io_action_outcome_id,
     false
     );
     end if;

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Starting Large Schedule Underwriting'
     );
     -- 4th, run underwriting rules
     pkg_os_underwrite.sp_underwrite_boolean_plan
     (
        in_session_id,
        in_transaction_id,
        in_action_id,
        in_action_object_id,
        pkg_os_underwrite.gUWRuleType_Underwriting,
        null,
        v_referral_outcome_id
     );

     -- Outcomes returned by pkg_os_underwrite.sp_underwrite_boolean_plan are:
     -- a) UnderwritingFailed (81) b) UnderwritingIncomplete (18505) c) UnderwritingPassed (80) d) UnderwritingReferral (82)

     -- Scan each UW Trigger and update datamart
     -- Search for PolicyUnderwritingTriggerDetail
     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Update Underwriting trigger datamart'
     );
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          pkg_os_underwrite.gObjPolicyUWTrigger,
          v_object_uwalerts_list
     );

     if ( v_object_uwalerts_list.count > 0 )
     then

          for i in v_object_uwalerts_list.first..v_object_uwalerts_list.last
          loop

               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_uwalerts_list(i), v_datamart_tf);

          end loop;

     end if;

     -- 5. Validate all trees
     -- Outcomes returned by pkg_os_tree_completion.sp_validate_trees are:
     -- a) TreeComplete (8201) b) TreeIncomplete (8301)

     --
     --   Set the PolicyTree as the Session Tree as this BV will be used in various tree related algorithms...
     --

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_session_id,
          pkg_os_constant_bv.gbv_SessionCurrentTree,
          v_policy_tree_id
     );
     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Validate trees'
     );
     pkg_os_tree_completion.sp_validate_trees
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          in_action_id,
          in_action_object_id,
          in_action_object_type_id,
          io_action_outcome_id,
          'F'             -- in_affected_trees_tf
     );

/*
     for x in (select tree_id from tree_mini_tree_details where master_tree_id = v_policy_tree_id)
     loop

          pkg_os_tree_completion.sp_tree_branch_completion
          (
               in_session_id,
               in_transaction_id,
               io_message_list,
               in_tree_node_id => null,
               in_current_node_id => null,
               in_tree_id => x.tree_id
          );

     end loop;
*/

     -- If Tree is Incomplete, return this Outcome.
     if ( io_action_outcome_id = 8201 )
     then

          io_action_outcome_id := greatest(v_referral_outcome_id, pkg_os_constant.gOutcome_OK);

     end if;


/*
exception
  when others then
     io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Error encountered while validating all trees for object:' || in_action_object_id || ' Error: ' ||sqlerrm
     );
     raise;
*/

end sp_schedule_tree_validate;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_property_tree_validate
--
--   %USAGE
--        Creates a mini-tree and parent mini-trees for Location and Jurisdiction
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_property_tree_validate
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type,
     in_underwrite_execute         in boolean default true
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_property_tree_validate';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_tree_id   object.object_id%type;
     v_property_object_type  object_type.object_type_id%type;

     v_tree_load_action    action.action_id%type;
     v_quote_or_nb_ind      char(1);
     v_policy_trx_type      object.object_id%type;

     v_property_sequence       integer := 1;

     v_referral_outcome_id   outcome.outcome_id%type;
     v_object_uwalerts_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_datamart_tf          char(1);

     -- Select properties who are included
     cursor cur_property_schedule
     is
     select
          d.property_schedule_id,
          d.jurisdiction_name ||
               (case when d.location_name is not null then ', ' || d.location_name else null end) ||
               (case when d.building_name is not null then ', ' || d.building_name else null end) as property_name,
          (count(*) over()) as total_count
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_action_object_id
     and
          d.lob_selected_ind is not null
     and (
               ( d.building_id is not null and d.building_include_tf = 'Yes' )
               or
               ( d.location_id is not null and d.location_include_tf = 'Yes' )
               or
               ( d.jurisdiction_id is not null and d.jurisdiction_include_tf = 'Yes' )
          )
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     and nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.property_schedule_id;

begin

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Starting Property Validation'
     );

     -- Get Transaction Type
     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, in_action_object_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;


     -- Get the Policy Tree or create one if there is none.
     -- Ideally there would be one, if the user calls validate from within the tree
     -- But for PolicyTransactions, where the policy image is created and then validate is called,
     -- we need to build the Policy Tree first

     if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 819046;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 896746;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if;

     pkg_os_tree.sp_tree_create
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          v_tree_load_action,
          in_action_object_id,
          gObjType_PTP,
          io_action_outcome_id,
          'F'             -- Don't perform Tree Completion now
     );

     v_policy_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);

     -- First delete all mini-trees
     pkg_os_tree.sp_mini_tree_delete_all(in_session_id, in_transaction_id, v_policy_tree_id);

     -- 2nd, update datamart
    -- sp_schedule_datamart_update(in_session_id, in_transaction_id, in_action_object_id, io_action_outcome_id);

     -- 3rd, for each 'Covered' property, build a new tree
     for c1 in cur_property_schedule
     loop

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '..... Validating Property: ' || v_property_sequence || ' of ' || c1.total_count || ' - ' || c1.property_name
          );

          v_property_object_type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, c1.property_schedule_id);

          if ( v_property_object_type = gObjType_PolicyCFBuilCoverage )   -- PolicyCFBuildingCoverage
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 871246;      --CL_PolicyCFBuildingCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 871346;      --CL_PolicyCFBuildingCoverage_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolicyCFLocation) -- PolicyCFLocation
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 859146;      -- CL_PolicyCFLocation_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 871646;      -- CL_PolicyCFLocation_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolicyCFJurisdiction)
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 948746;      -- CL_PolicyCFJurisdiction_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 949246;      -- CL_PolicyCFJurisdiction_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolGLLocLiabltyCov )  -- PolicyGLLocationLiabilityCoverage
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 953646;      -- CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 953446;      -- CL_PolicyGLJurisdiction_PNBT_MiniTreeLoad_DB

               end if;

          elsif ( v_property_object_type = gObjType_PolGLJurisLiabltyCov )
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 953646;      --CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 953746;      --CL_PolicyGLLocationLiabilityCoverage_PNBT_MiniTreeLoad_DB

               end if;

          end if;

          --
          --   Set the PolicyTree as the Session Tree as this BV will be used in various tree related algorithms...
          --

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               pkg_os_constant_bv.gbv_SessionCurrentTree,
               v_policy_tree_id
          );

          --
          -- Build tree and perform tree completion.
          --

          pkg_os_tree.sp_minitree_load
          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               v_tree_load_action,
               c1.property_schedule_id,
               v_property_object_type,
               io_action_outcome_id,
               'F'             -- Don't perform Tree Completion now
          );

          v_property_sequence :=  v_property_sequence + 1;
          pkg_os_object_cache_io.sp_index_object_cache_clear( in_session_id, in_transaction_id );
          pkg_os_object_io.sp_object_path_cache_clear;
          pkg_os_object_io.sp_bv_value_cache_clear(in_session_id, in_transaction_id, false );

     end loop;

     if in_underwrite_execute then

       -- 4th, run underwriting rules
       pkg_os_underwrite.sp_underwrite_boolean_plan
       (
          in_session_id,
          in_transaction_id,
          in_action_id,
          in_action_object_id,
          pkg_os_underwrite.gUWRuleType_Underwriting,
          null,
          v_referral_outcome_id
       );


       -- Outcomes returned by pkg_os_underwrite.sp_underwrite_boolean_plan are:
       -- a) UnderwritingFailed (81) b) UnderwritingIncomplete (18505) c) UnderwritingPassed (80) d) UnderwritingReferral (82)

       -- Scan each UW Trigger and update datamart
       -- Search for PolicyUnderwritingTriggerDetail
       pkg_os_object_search.sp_object_children_of_type_get
       (
            in_session_id,
            in_transaction_id,
            in_action_object_id,
            pkg_os_underwrite.gObjPolicyUWTrigger,
            v_object_uwalerts_list
       );

       if ( v_object_uwalerts_list.count > 0 )
       then

            for i in v_object_uwalerts_list.first..v_object_uwalerts_list.last
            loop

                 pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_uwalerts_list(i), v_datamart_tf);

            end loop;

       end if;
     end if;
     -- 5. Validate all trees
     -- Outcomes returned by pkg_os_tree_completion.sp_validate_trees are:
     -- a) TreeComplete (8201) b) TreeIncomplete (8301)

     pkg_os_tree_completion.sp_validate_trees
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          in_action_id,
          in_action_object_id,
          in_action_object_type_id,
          io_action_outcome_id,
          'T'             -- in_affected_trees_tf
     );

     -- If Tree is Incomplete, return this Outcome.
     if ( io_action_outcome_id = 8201 )
     then

          io_action_outcome_id := greatest(v_referral_outcome_id, pkg_os_constant.gOutcome_OK);

     end if;


/*
exception
  when others then
     io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

     pkg_os_logging.sp_log_error
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Error encountered while validating all trees for object:' || in_action_object_id || ' Error: ' ||sqlerrm
     );
     raise;
*/

end sp_property_tree_validate;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_fix_xform_merge_bvs
--
--  %USAGE
--      The merge BVs are the Street #, Street Line1, State, Zip Code, Country.
--       This procedure gets these BVs from the CustomerAddress object and updates the merge BVs on
--      all objects that will be impacted by Import Transformation
--
--  %ALGORITHM
--
--  %PARAM    in_session_id                    Session Id
--  %PARAM    in_transaction_id                Transaction Id
--  %PARAM    in_action_object_id              Action Object Id
--  %PARAM    io_action_outcome_id             Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_fix_xform_merge_bvs
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_object_id           in             object.object_id%type
)
is

     v_procedure_name       constant  system_log.program_name%type := pkg_name || 'sp_fix_xform_merge_bvs';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_datamart_tf          char(1);

     v_object_location_list         pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_object_building_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;

     v_policy_commercial_id      object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_action_object_id, gObjType_PolicyCommercial);
     v_policy_cpp_id               object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_commercial_id, gObjType_PolicyCPP);
     v_policy_cppcf_id         object.object_id%type := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_cpp_id, gObjType_PolicyCPPCF);

     v_customer_address_id   object.object_id%type;
     v_customer_location_id      object.object_id%type;

     v_bv_value_list               pkg_os_object_io.t_bv_table;
     v_addr_bv_value_list          pkg_os_object_io.t_bv_table;

     v_imported_object_id          object.object_id%type;      -- gbv_GenericThirdPartyObject

     v_object_address_list         pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;

  cursor cur_property_schedule
     is
     select
          d.property_schedule_id
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_action_object_id
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     order by
          d.property_schedule_id;

begin

     if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.... .... Updating import transformation merge BVs PTP:' || in_action_object_id
               -- ' PolicyCustomer ID:' || v_policycustomer_id
          );

     end if;
     --search for customer address 
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          2304114,
          v_object_address_list
     ); 
     if v_object_address_list.count >0 then 
      for i in v_object_address_list.first..v_object_address_list.last
      loop

         v_addr_bv_value_list.delete;
         v_bv_value_list.delete;
         v_object_building_list.delete;
         
         v_addr_bv_value_list(210423) := null;      -- Import Xform - Location Country
         v_addr_bv_value_list(210419) := null;      -- Import Xform - Location State
         v_addr_bv_value_list(29325214) := null;       -- Import Xform - Location Street Line1
         v_addr_bv_value_list(30018146) := null;       -- Import Xform - Location Street Number
         v_addr_bv_value_list(29327414) := null;       -- Import Xform - Location Zip Code
         v_addr_bv_value_list(29326314) := null;       -- Import Xform - Location City

         pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_object_address_list(i), v_addr_bv_value_list);

         v_addr_bv_value_list(29325214).business_variable_value := upper(regexp_replace(v_addr_bv_value_list(29325214).business_variable_value,'[ ]+',' '));      -- Import Xform - Location Street Line1
         v_addr_bv_value_list(29326314).business_variable_value := initcap(v_addr_bv_value_list(29326314).business_variable_value);      -- Import Xform - Location City

         -- Save the AddressLine1 in Upper case and City in InitCap
         if(
              v_addr_bv_value_list(29325214).business_variable_value is not null
              and
              v_addr_bv_value_list(29326314).business_variable_value is not null)
         then
              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_address_list(i), v_addr_bv_value_list);
         end if;

        
      end loop;
     
     end if; 
        

     -- Search for CustomerLocation
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_CustomerLocation,
          v_object_location_list
     );

     if ( v_object_location_list.count > 0 )
     then

          for i in v_object_location_list.first..v_object_location_list.last
          loop

               v_bv_value_list.delete;
               v_object_building_list.delete;

if v_session_control.glogging_Error then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '.... .... in while loop number ' || i
               -- ' v_customer_address=_id' || v_customer_address_id
               ||'  v_object_location_list(i) ;'||v_object_location_list(i)
          );

     end if;

               -- Get Address BVs
              /*  v_addr_bv_value_list(210423) := null;      -- Import Xform - Location Country
               v_addr_bv_value_list(210419) := null;      -- Import Xform - Location State
               v_addr_bv_value_list(29325214) := null;       -- Import Xform - Location Street Line1
               v_addr_bv_value_list(30018146) := null;       -- Import Xform - Location Street Number
               v_addr_bv_value_list(29327414) := null;       -- Import Xform - Location Zip Code
               v_addr_bv_value_list(29326314) := null;       -- Import Xform - Location City

               pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_customer_address_id, v_addr_bv_value_list);

               v_addr_bv_value_list(29325214).business_variable_value := upper(regexp_replace(v_addr_bv_value_list(29325214).business_variable_value,'[ ]+',' '));      -- Import Xform - Location Street Line1
               v_addr_bv_value_list(29326314).business_variable_value := initcap(v_addr_bv_value_list(29326314).business_variable_value);      -- Import Xform - Location City

               -- Save the AddressLine1 in Upper case and City in InitCap
               if(
                    v_addr_bv_value_list(29325214).business_variable_value is not null
                    and
                    v_addr_bv_value_list(29326314).business_variable_value is not null)
               then
                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_address_id, v_addr_bv_value_list);
               end if;
               */

               -- If this CustomerLocation was created manually, populate the Xform Merge BVs
               v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_GenericThirdPartyObject);

               if ( v_imported_object_id is null )
               then
                   v_addr_bv_value_list.delete;
                   -- Get _Reference_Located_At.CustomerAddress
                   v_customer_address_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_CustLocation_RefLocatedAt);
 
                   v_addr_bv_value_list(210423) := null;      -- Import Xform - Location Country
                   v_addr_bv_value_list(210419) := null;      -- Import Xform - Location State
                   v_addr_bv_value_list(29325214) := null;       -- Import Xform - Location Street Line1
                   v_addr_bv_value_list(30018146) := null;       -- Import Xform - Location Street Number
                   v_addr_bv_value_list(29327414) := null;       -- Import Xform - Location Zip Code
                   v_addr_bv_value_list(29326314) := null;       -- Import Xform - Location City

                   pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_customer_address_id, v_addr_bv_value_list);

                    -- Set CustomerLocation BVs
                    v_bv_value_list(31917946).business_variable_value := v_addr_bv_value_list(210423).business_variable_value;   -- Import Xform - Location Country
                    v_bv_value_list(31915546).business_variable_value := v_addr_bv_value_list(210419).business_variable_value;   -- Import Xform - Location State
                    v_bv_value_list(31915646).business_variable_value := v_addr_bv_value_list(29325214).business_variable_value;    -- Import Xform - Location Street Line1
                    v_bv_value_list(31915746).business_variable_value := v_addr_bv_value_list(30018146).business_variable_value;    -- Import Xform - Location Street Number
                    v_bv_value_list(31915846).business_variable_value := v_addr_bv_value_list(29327414).business_variable_value;    -- Import Xform - Location Zip Code
                    v_bv_value_list(31920446).business_variable_value := v_addr_bv_value_list(29326314).business_variable_value;    -- Import Xform - Location City

                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_location_list(i), v_bv_value_list);

               end if;

               -- Search for CustomerBuilding within the Location
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_object_location_list(i),
                    gObjType_CustomerBuilding,
                    v_object_building_list
               );

               if ( v_object_building_list.count > 0 )
               then

                    for j in v_object_building_list.first..v_object_building_list.last
                    loop

                         v_bv_value_list.delete;
                         v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_building_list(j), gbv_GenericThirdPartyObject);

                         -- If this CustomerBuilding was created manually, populate the Xform Merge BVs
                         if ( v_imported_object_id is null )
                         then

                              -- Set CustomerBuilding BVs
                              v_bv_value_list(31918346).business_variable_value := v_addr_bv_value_list(210423).business_variable_value;   -- Import Xform - Location Country
                              v_bv_value_list(31918446).business_variable_value := v_addr_bv_value_list(210419).business_variable_value;   -- Import Xform - Location State
                              v_bv_value_list(31918546).business_variable_value := v_addr_bv_value_list(29325214).business_variable_value;    -- Import Xform - Location Street Line1
                              v_bv_value_list(31918646).business_variable_value := v_addr_bv_value_list(30018146).business_variable_value;    -- Import Xform - Location Street Number
                              v_bv_value_list(31918746).business_variable_value := v_addr_bv_value_list(29327414).business_variable_value;    -- Import Xform - Location Zip Code
                              v_bv_value_list(31920346).business_variable_value := v_addr_bv_value_list(29326314).business_variable_value;    -- Import Xform - Location City

                              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_building_list(j), v_bv_value_list);

                         end if;

                    end loop;

               end if;

          end loop;

     end if;

     -- Search for PolicyCFLocation
     v_object_location_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolicyCFLocation,
          v_object_location_list
     );

     if ( v_object_location_list.count > 0 )
     then

          for i in v_object_location_list.first..v_object_location_list.last
          loop

               v_addr_bv_value_list.delete;
               v_bv_value_list.delete;
               v_object_building_list.delete;

               -- Get _Reference_CoveredLocation.CustomerLocation
               v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_CFLocation_RefCovered);

               -- Get CustomerLocation BVs
               v_addr_bv_value_list(31917946) := null;    -- Import Xform - Location Country
               v_addr_bv_value_list(31915546) := null;    -- Import Xform - Location State
               v_addr_bv_value_list(31915646) := null;    -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31915746) := null;    -- Import Xform - Location Street Number
               v_addr_bv_value_list(31915846) := null;    -- Import Xform - Location Zip Code
               v_addr_bv_value_list(31920446) := null;    -- Import Xform - Location City

               pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_customer_location_id, v_addr_bv_value_list);

               v_addr_bv_value_list(31915646).business_variable_value := upper(regexp_replace(v_addr_bv_value_list(31915646).business_variable_value,'[ ]+',' '));      -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31920446).business_variable_value := initcap(v_addr_bv_value_list(31920446).business_variable_value);      -- Import Xform - Location City

               v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_GenericThirdPartyObject);

               -- If this PolicyCFLcoation was created manually, populate the Xform Merge BVs
               if ( v_imported_object_id is null )
               then

                    -- Set PolicyCFLocation BVs
                    v_bv_value_list(31918046).business_variable_value := v_addr_bv_value_list(31917946).business_variable_value;   -- Import Xform - Location Country
                    v_bv_value_list(31914546).business_variable_value := v_addr_bv_value_list(31915546).business_variable_value;   -- Import Xform - Location State
                    v_bv_value_list(31914446).business_variable_value := v_addr_bv_value_list(31915646).business_variable_value;   -- Import Xform - Location Street Line1
                    v_bv_value_list(31914346).business_variable_value := v_addr_bv_value_list(31915746).business_variable_value;   -- Import Xform - Location Street Number
                    v_bv_value_list(31914646).business_variable_value := v_addr_bv_value_list(31915846).business_variable_value;   -- Import Xform - Location Zip Code
                    v_bv_value_list(31920546).business_variable_value := v_addr_bv_value_list(31920446).business_variable_value;   -- Import Xform - Location City

                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_location_list(i), v_bv_value_list);

               end if;

               -- Search for PolicyCFBuildingCoverage
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_object_location_list(i),
                    gObjType_PolicyCFBuilCoverage,
                    v_object_building_list
               );

               if ( v_object_building_list.count > 0 )
               then

                    for j in v_object_building_list.first..v_object_building_list.last
                    loop

                         v_bv_value_list.delete;

                         v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_building_list(j), gbv_GenericThirdPartyObject);

                         -- If this PolicyCFBuildingCoverage was created manually, populate the Xform Merge BVs
                         if ( v_imported_object_id is null )
                         then

                              -- Set PolicyCFBuildingCoverage BVs
                              v_bv_value_list(31918146).business_variable_value := v_addr_bv_value_list(31917946).business_variable_value;   -- Import Xform - Location Country
                              v_bv_value_list(31914946).business_variable_value := v_addr_bv_value_list(31915546).business_variable_value;   -- Import Xform - Location State
                              v_bv_value_list(31914846).business_variable_value := v_addr_bv_value_list(31915646).business_variable_value;   -- Import Xform - Location Street Line1
                              v_bv_value_list(31914746).business_variable_value := v_addr_bv_value_list(31915746).business_variable_value;   -- Import Xform - Location Street Number
                              v_bv_value_list(31915046).business_variable_value := v_addr_bv_value_list(31915846).business_variable_value;   -- Import Xform - Location Zip Code
                              v_bv_value_list(31920646).business_variable_value := v_addr_bv_value_list(31920446).business_variable_value;   -- Import Xform - Location City

                              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_building_list(j), v_bv_value_list);

                         end if;

                    end loop;

               end if;

          end loop;

     end if;

     -- GL Location Coverage
     v_object_location_list.delete;

     -- Search for PolicyGLLocationCoverage
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolGLLocLiabltyCov,
          v_object_location_list
     );

     if ( v_object_location_list.count > 0 )
     then

          for i in v_object_location_list.first..v_object_location_list.last
          loop

               v_addr_bv_value_list.delete;
               v_bv_value_list.delete;
               v_object_building_list.delete;

               -- Get _Reference_CoveredLocation.CustomerLocation
               v_customer_location_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_GLLocation_RefCovered);

               -- Get CustomerLocation BVs
               v_addr_bv_value_list(31917946) := null;    -- Import Xform - Location Country
               v_addr_bv_value_list(31915546) := null;    -- Import Xform - Location State
               v_addr_bv_value_list(31915646) := null;    -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31915746) := null;    -- Import Xform - Location Street Number
               v_addr_bv_value_list(31915846) := null;    -- Import Xform - Location Zip Code
               v_addr_bv_value_list(31920446) := null;    -- Import Xform - Location City

               pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_customer_location_id, v_addr_bv_value_list);

               v_addr_bv_value_list(31915646).business_variable_value := upper(regexp_replace(v_addr_bv_value_list(31915646).business_variable_value,'[ ]+',' '));      -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31920446).business_variable_value := initcap(v_addr_bv_value_list(31920446).business_variable_value);      -- Import Xform - Location City

               v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_GenericThirdPartyObject);

               -- If this PolicyGLLocationCoverage was created manually, populate the Xform Merge BVs
               if ( v_imported_object_id is null )
               then

                    -- Set PolicyGLLocationCoverage BVs
                    v_bv_value_list(31918846).business_variable_value := v_addr_bv_value_list(31917946).business_variable_value;   -- Import Xform - Location Country
                    v_bv_value_list(31918946).business_variable_value := v_addr_bv_value_list(31915546).business_variable_value;   -- Import Xform - Location State
                    v_bv_value_list(31919046).business_variable_value := v_addr_bv_value_list(31915646).business_variable_value;   -- Import Xform - Location Street Line1
                    v_bv_value_list(31919146).business_variable_value := v_addr_bv_value_list(31915746).business_variable_value;   -- Import Xform - Location Street Number
                    v_bv_value_list(31919246).business_variable_value := v_addr_bv_value_list(31915846).business_variable_value;   -- Import Xform - Location Zip Code
                    v_bv_value_list(31920746).business_variable_value := v_addr_bv_value_list(31920446).business_variable_value;   -- Import Xform - Location City

                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_location_list(i), v_bv_value_list);

               end if;

               -- Search for PolicyGLLocationAdditionalClassCode
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_object_location_list(i),
                    gObjType_PolGLLocAddlClassCode,
                    v_object_building_list
               );

               if ( v_object_building_list.count > 0 )
               then

                    for j in v_object_building_list.first..v_object_building_list.last
                    loop

                         v_bv_value_list.delete;

                         v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_building_list(j), gbv_GenericThirdPartyObject);

                         -- If this PolicyGLLocationAdditionalClassCode was created manually, populate the Xform Merge BVs
                         if ( v_imported_object_id is null )
                         then

                              -- Set PolicyGLLocationAdditionalClassCode BVs
                              v_bv_value_list(31919846).business_variable_value := v_addr_bv_value_list(31917946).business_variable_value;   -- Import Xform - Location Country
                              v_bv_value_list(31919946).business_variable_value := v_addr_bv_value_list(31915546).business_variable_value;   -- Import Xform - Location State
                              v_bv_value_list(31920046).business_variable_value := v_addr_bv_value_list(31915646).business_variable_value;   -- Import Xform - Location Street Line1
                              v_bv_value_list(31920146).business_variable_value := v_addr_bv_value_list(31915746).business_variable_value;   -- Import Xform - Location Street Number
                              v_bv_value_list(31920246).business_variable_value := v_addr_bv_value_list(31915846).business_variable_value;   -- Import Xform - Location Zip Code
                              v_bv_value_list(31920846).business_variable_value := v_addr_bv_value_list(31920446).business_variable_value;   -- Import Xform - Location City

                              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_building_list(j), v_bv_value_list);

                         end if;

                    end loop;

               end if;

          end loop;

     end if;

          -- Search for PolicyCABALocation
     v_object_location_list.delete;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolCABALocation,
          v_object_location_list
     );

     if ( v_object_location_list.count > 0 )
     then

          for i in v_object_location_list.first..v_object_location_list.last
          loop

               v_addr_bv_value_list.delete;
               v_bv_value_list.delete;
               v_object_building_list.delete;

               -- Get _Reference_CoveredLocation.CustomerLocation
               v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_CABALocation_RefCovered);

               -- Get CustomerLocation BVs
               v_addr_bv_value_list(31917946) := null;    -- Import Xform - Location Country
               v_addr_bv_value_list(31915546) := null;    -- Import Xform - Location State
               v_addr_bv_value_list(31915646) := null;    -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31915746) := null;    -- Import Xform - Location Street Number
               v_addr_bv_value_list(31915846) := null;    -- Import Xform - Location Zip Code
               v_addr_bv_value_list(31920446) := null;    -- Import Xform - Location City

               pkg_os_object_io.sp_object_bv_get(in_session_id, in_transaction_id, v_customer_location_id, v_addr_bv_value_list);

               v_addr_bv_value_list(31915646).business_variable_value := upper(regexp_replace(v_addr_bv_value_list(31915646).business_variable_value,'[ ]+',' '));      -- Import Xform - Location Street Line1
               v_addr_bv_value_list(31920446).business_variable_value := initcap(v_addr_bv_value_list(31920446).business_variable_value);      -- Import Xform - Location City

               v_imported_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_location_list(i), gbv_GenericThirdPartyObject);

               -- If this PolicyCABALcoation was created manually, populate the Xform Merge BVs
               if ( v_imported_object_id is null )
               then

                    -- Set PolicyCABALocation BVs
                    v_bv_value_list(33871478).business_variable_value := v_addr_bv_value_list(31920446).business_variable_value;   -- Import Xform - Location City
                    v_bv_value_list(33871578).business_variable_value := v_addr_bv_value_list(31917946).business_variable_value;   -- Import Xform - Location Country
                    v_bv_value_list(33871678).business_variable_value := v_addr_bv_value_list(31915546).business_variable_value;   -- Import Xform - Location State
                    v_bv_value_list(33871778).business_variable_value := v_addr_bv_value_list(31915646).business_variable_value;   -- Import Xform - Location Street Line1
                    v_bv_value_list(33871878).business_variable_value := v_addr_bv_value_list(31915746).business_variable_value;   -- Import Xform - Location Street Number
                    v_bv_value_list(33871978).business_variable_value := v_addr_bv_value_list(31915846).business_variable_value;   -- Import Xform - Location Zip Code

                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_location_list(i), v_bv_value_list);

               end if;

          end loop;

     end if;


end sp_fix_xform_merge_bvs;


procedure sp_transform_object
(
     in_session_id      in object.object_id%type,
     in_transaction_id      in     object.object_id%type,
     in_action_id         in   action.action_id%type,
     in_mini_object_list    in                pkg_os_object.t_object_list,
     in_schedule_object_type_id  in object_type.object_type_id%type,
     io_action_outcome_id     out   outcome.outcome_id%type,
     in_product_id in pd_product.pd_product_id%type												   
)
is
 -- pragma      autonomous_transaction;
  v_message_list                   pkg_os_message.t_message_list;
  v_object_cache                   pkg_os_object_cache.t_object_cache;
  v_object_index number;
  v_procedure_name       constant system_log.program_name%type          := pkg_name||'sp_transform_object';
  v_obj_rec object%rowtype;						   
begin
     v_object_index := in_mini_object_list.first;

     while v_object_index is not  null loop
        pkg_os_logging.sp_log_info( in_session_id,  in_transaction_id, v_procedure_name,
                         '..... Transforming mini Object Sequence:' || v_object_index || ' of ' || in_mini_object_list.count );

        v_obj_rec.object_id := in_mini_object_list(v_object_index);
        v_obj_rec.object_type_id:= in_schedule_object_type_id;
        v_obj_rec.parent_object_id := null;
        pkg_os_object.cached_object_attribute_tab(in_mini_object_list(v_object_index)):=v_obj_rec;
         pkg_os_xformer.sp_object_transform(     in_session_id => in_session_id,
                                                 in_transaction_id => in_transaction_id,
                                                 io_object_cache  => v_object_cache,
                                                 io_message_list => v_message_list,
                                                 in_action_id  =>  in_action_id,
                                                 in_action_object_id  => in_mini_object_list(v_object_index),
                                                 in_action_object_type_id  => in_schedule_object_type_id,
                                                 io_action_outcome_id  => io_action_outcome_id,
                                                 in_jurisdiction_id =>null,
                                                 in_product_id      => in_product_id,
                                                 in_transaction_type_id  => null);
        pkg_os_object.cached_object_attribute_tab.delete(in_mini_object_list(v_object_index));
        v_object_index := in_mini_object_list.next( v_object_index );

     end loop;

    --pkg_os_object_cache_io.sp_index_object_cache_clear( in_session_id, in_transaction_id );
    pkg_os_object_io.sp_object_path_cache_clear;
    pkg_os_object_io.sp_bv_value_cache_clear(in_session_id, in_transaction_id, false );
    pkg_os_object_io.sp_bv_value_cache_start(in_session_id ,in_transaction_id, true);

     --commit;
end;


procedure update_building_schedule(in_document_id     in  object.object_id%type,
      in_policy_customer_id in object.object_id%type,
      in_policy_cppcf_id in object.object_id%type,
      in_ptp_object_id in object.object_id%type,
    in_object_type_id  in object_type.object_type_id%type,
    in_POLICYCA_BAUTO_OBJECT_ID  in object.object_id%type)
  as
    pragma      autonomous_transaction;
  begin
    if in_object_type_id = 2357746 then
      update
         cppcf_building_schedule
      set
         policy_customer_object_id = in_policy_customer_id,
         policy_cppcf_object_id = in_policy_cppcf_id,
         ptp_id = in_ptp_object_id
      where
         batch_id = in_document_id ;

    elsif  in_object_type_id = 2357646 then
       update
         cppgl_location_schedule
       set
         policy_customer_object_id = in_policy_customer_id,
         policy_cppgl_object_id = in_policy_cppcf_id,
         ptp_id = in_ptp_object_id
       where
         batch_id = in_document_id;

    elsif  in_object_type_id = 2602646  then -- OSCore_PolicyCPPCAVehicleImport

       update
                                   CPPCA_VEHICLE_SCHEDULE
                          set
                                   policy_customer_object_id = in_policy_customer_id,
                                   POLICY_CPPCA_OBJECT_ID = in_policy_cppcf_id,
                                   ptp_id = in_ptp_object_id,
							POLICYCA_BAUTO_OBJECT_ID=in_POLICYCA_BAUTO_OBJECT_ID
                          where
                                   batch_id = in_document_id;

    end if;

    commit;

  end;

procedure sp_property_jurisdiction_import(in_session_id      in object.object_id%type,
     in_transaction_id      in     object.object_id%type,
     in_batch_id         in   object.object_id%type,
     in_action_id        in action.ACTION_ID%type,
     in_ptp_id           in object.object_id%type,
     in_schedule_object_type_id in  object_type.OBJECT_TYPE_ID%type,
     io_action_outcome_id in out outcome.outcome_id%type,
     in_product_id pd_product.pd_product_id%type
     )
as
     v_object_list                    pkg_os_object.t_object_list;
     v_object_index          number;
    -- v_schedule_object_type_id object_type.OBJECT_TYPE_ID%type ;
begin
     pkg_os_logging.sp_log_info(in_session_id      => in_session_id,
                                in_transaction_id  => in_transaction_id,
                                in_program_name    => 'sp_property_jurisdiction_import',
                                in_log_description => 'Transformation start for Jurisdiction' );
                                
     select dragon_object_id   bulk collect into  v_object_list  
     from cppcf_building_schedule cbs,
      (select  location_state , min(rowid) row_id  from  cppcf_building_schedule c 
      where batch_id =in_batch_id group by location_state ) t
     where   t.row_id=cbs.rowid;
     
     for i in 1..v_object_list.count 
     loop
       
       pkg_os_object_io.sp_object_bv_set(in_session_id               =>in_session_id ,
                                             in_transaction_id           => in_transaction_id,
                                             in_object_id                => v_object_list(i),
                                             in_bv_id                    => 35038548,
                                             in_bv_value                 => 1);
       update cppcf_building_schedule set TYPE_OF_TRANSFORMATION=1
       	 where dragon_object_id = v_object_list(i);
       
     end loop;

     sp_transform_object
      (
         in_session_id,
         in_transaction_id,
         in_action_id,
         v_object_list,
         in_schedule_object_type_id,
         io_action_outcome_id,
         in_product_id
        );
     for i in 1..v_object_list.count 
     loop
       update cppcf_building_schedule set TYPE_OF_TRANSFORMATION=null where dragon_object_id = v_object_list(i);

            
     end loop;
end;

procedure sp_property_location_import(in_session_id      in object.object_id%type,
     in_transaction_id      in     object.object_id%type,
     in_batch_id         in   object.object_id%type,
     in_action_id        in action.ACTION_ID%type,
     in_ptp_id           in object.object_id%type,
     in_cppcf_id         in object.object_id%type,
     in_customer_id      in object.object_id%type,
     in_schedule_object_type_id in  object_type.OBJECT_TYPE_ID%type,
     io_action_outcome_id in out outcome.outcome_id%type,
     in_product_id  in pd_product.pd_product_id%type
     )
as
     v_object_list                    pkg_os_object.t_object_list;
     v_object_index          number;
     v_customer_location_id object.object_id%type;
     v_policycf_location_id object.object_id%type;
    -- v_schedule_object_type_id object_type.OBJECT_TYPE_ID%type;
begin
     --pkg_os_object_io.sp_bv_value_cache_start(in_session_id      => in_session_id);
     pkg_os_logging.sp_log_info(in_session_id      => in_session_id,
                                in_transaction_id  => in_transaction_id,
                                in_program_name    => 'sp_property_location_import',
                                in_log_description => 'Transformation start for Location' );

     select dragon_object_id   bulk collect into  v_object_list  
     from cppcf_building_schedule cbs,
      (select  LOCATION_POSTAL_CODE,LOCATION_STREET,LOCATION_CITY,LOCATION_STATE,LOCATION_COUNTRY , min(rowid) row_id  from  cppcf_building_schedule c 
      where batch_id =in_batch_id group by  LOCATION_POSTAL_CODE,LOCATION_STREET,LOCATION_CITY,LOCATION_STATE,LOCATION_COUNTRY  ) t
     where   t.row_id=cbs.rowid;

    /* select dragon_object_id   bulk collect into  v_object_list
     from cppcf_building_schedule  where   batch_id =in_batch_id;*/

     for i in 1..v_object_list.count 
     loop
       update cppcf_building_schedule set TYPE_OF_TRANSFORMATION=2 where dragon_object_id = v_object_list(i);

            
       pkg_os_object_io.sp_object_bv_set(in_session_id               =>in_session_id ,
                                             in_transaction_id           => in_transaction_id,
                                             in_object_id                => v_object_list(i),
                                             in_bv_id                    => 35038548,
                                             in_bv_value                 => 2);
     end loop;
     sp_transform_object
      (
         in_session_id,
         in_transaction_id,
         in_action_id,
         v_object_list,
         in_schedule_object_type_id,
         io_action_outcome_id,
         in_product_id
        );
     
     for i in 1..v_object_list.count 
     loop
       for r_location in (select lob_id,location_id from dragon_customer_location where 
         import_schedule_object_id = v_object_list(i) and ptp_id=in_ptp_id)
       LOOP
          IF r_location.LOB_ID=in_customer_id THEN 
             v_customer_location_id := r_location.location_id;    
          ELSIF r_location.lob_id=in_cppcf_id THEN 
             v_policycf_location_id:= r_location.location_id;    
          END IF;
       END LOOP;
       
       update cppcf_building_schedule set TYPE_OF_TRANSFORMATION=null,CUSTOMER_LOCATION_OBJECT_ID=v_customer_location_id,
       CPPCF_LOCATION_OBJECT_ID=v_policycf_location_id  where dragon_object_id in (
       select dragon_object_id   from cppcf_building_schedule cbs,
       (select  LOCATION_POSTAL_CODE,LOCATION_STREET,LOCATION_CITY,LOCATION_STATE,LOCATION_COUNTRY   
       from  cppcf_building_schedule c 
         where dragon_object_id =v_object_list(i) and ptp_id=in_ptp_id and batch_id= in_batch_id ) t
         where   cbs.ptp_id=in_ptp_id and cbs.batch_id= in_batch_id and
         t.LOCATION_POSTAL_CODE=cbs.LOCATION_POSTAL_CODE
         and  t.LOCATION_STREET=cbs.LOCATION_STREET and
         t.LOCATION_CITY=cbs.LOCATION_CITY and 
          t.LOCATION_STATE=cbs.LOCATION_STATE and
          t.LOCATION_COUNTRY=cbs.LOCATION_COUNTRY);
            
     end loop;

end;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_property_schedule_import
--
--   %USAGE
--        Imports CPPCF and CPPGL Schedule Objects using transformation
--      Action Object is ObjectDocument which can be a child of PT (for PNBT) or PTP (for Quote)
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_property_schedule_import
(
     in_session_id      in object.object_id%type,
     in_transaction_id      in     object.object_id%type,
     in_user_session_id       in   object.object_id%type,
     in_action_id         in   action.action_id%type,
     in_objectdocument_id     in  object.object_id%type,
     io_action_outcome_id     out   outcome.outcome_id%type
)
as

     v_procedure_name       constant system_log.program_name%type          := pkg_name||'sp_property_schedule_import';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_target_object_id      object.object_id%type;
     v_document_id          object.object_id%type;
     v_schedule_object_type_id     object_type.object_type_id%type;
     v_policy_customer_id          object.object_id%type;
     v_policy_cppcf_id         object.object_id%type;
     v_policy_cppgl_id         object.object_id%type;
     v_policy_cpp_ca_id      object.object_id%type;
     v_policy_ca_id      object.object_id%type;
     v_policy_cpp_ca_ba_id   object.object_id%type;


     v_object_list                    pkg_os_object.t_object_list;
     v_object_index          number;

     v_message_list                   pkg_os_message.t_message_list;
     v_object_cache                   pkg_os_object_cache.t_object_cache;

     v_schedule_tbl_name        varchar2(30);     -- Table Name
     v_new_cnt number;
     v_mini_object_list     pkg_os_object.t_object_list;
    -- v_mini_list_count number :=0;
	
	--Aditya for OSPRODUCT-26481
	   v_product_id                                 pd_product.pd_product_id%type; 
     v_CAUJurisdiction_obj_list                   pkg_os_object.t_object_list;   
     v_CAULocation_obj_list                       pkg_os_object.t_object_list;   
     v_CAUVehicle_obj_list                        pkg_os_object.t_object_list;   
     v_datamart_tf                                char(1) := 'T';
     v_sql varchar2(100);
   v_document_type_id   object_type.OBJECT_TYPE_ID%type;
begin
    v_document_type_id := pkg_os_object.fn_object_type_get(in_session_id => in_session_id,
                                                          in_transaction_id => in_transaction_id,
                                                          in_object_id => in_objectdocument_id); 
    if v_document_type_id = 3361948 then 
      v_target_object_id   := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id ,
                                                                     in_objectdocument_id,'32770648.32770248'); 
    else
      v_target_object_id   := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_objectdocument_id );
    end if;                                       

     
    
     v_document_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_objectdocument_id, pkg_os_constant_bv.gbv_objDocContents );
     v_schedule_object_type_id     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_objectdocument_id, gbv_Doc_ScheduleObjectType );
	 

     -- Get the Relational Table from the Schedule Object Type
     v_schedule_tbl_name := pkg_os_object_type.fn_object_type_row(in_session_id, in_transaction_id, v_schedule_object_type_id).default_table_name;


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
               ' In ObjectDocument ID:'||in_objectdocument_id||
               ' Document ID: ' || v_document_id ||
               ' Target Object:' || v_target_object_id ||
               ' Schedule Object Type:' || v_schedule_object_type_id ||
               ' Schedule Table Name:' || v_schedule_tbl_name);

     end if;

     if pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_target_object_id )   = gObjType_PTP then

          null;

     else

          --
          --  Presumably we have a policy transaction, and need to go down to the PTP ...
          --

          v_target_object_id := pkg_os_object_search.fn_object_11_child_get( in_session_id,in_transaction_id, v_target_object_id, gObjType_PTP );

     end if;
     
     -- set PTP as object of interest on current session which will be used after this transformation action result
     pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,in_session_id,28987309,v_target_object_id);
   --Aditya for OSPRODUCT-26481
     v_product_id                  := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_target_object_id, 211636 );


     if ( v_schedule_object_type_id = 2357746 ) -- OSCore_PolicyCFBuildingScheduleImportObject
     then

          -- Get and Update PolicyCustomer and PolicyCPPCF columns in table. These will be used as the Target Object by Transformation

          -- OneShieldReference220671052276904PolicyTransactionPolicy >> _Child_PolicyCustomer
          v_policy_customer_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '220671052276904' );

          -- OneShieldReference21761001.26916207.264791052276904.363901.2197405PolicyCPP >> _Child_PolicyCPPCF
          v_policy_cppcf_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.26916207.264791052276904.363901.2197405' );

          /*update
               cppcf_building_schedule
          set
               policy_customer_object_id = v_policy_customer_id,
               policy_cppcf_object_id = v_policy_cppcf_id,
               ptp_id = v_target_object_id
          where
               batch_id = v_document_id;*/

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
                    '|||||| Starting the import of Property Schedule - Table Name:' || v_schedule_tbl_name ||
                    ' Batch ID:'||v_document_id|| ' PTP ID:' || v_target_object_id ||
                    ' PolicyCustomer ID:' || v_policy_customer_id || ' PolicyCPPCF ID:' || v_policy_cppcf_id );

          end if;

          if v_document_id is null or v_target_object_id is null or v_policy_customer_id is null or v_policy_cppcf_id is null
          then

               raise no_data_found;

          end if;

          update_building_schedule(v_document_id,v_policy_customer_id,v_policy_cppcf_id,v_target_object_id,v_schedule_object_type_id,null);

          -- Using Document ID, we need to get the list of records read from spreadsheet


         -- first transform jurisdiction
          sp_property_jurisdiction_import(in_session_id  =>in_session_id ,
                                          in_transaction_id => in_transaction_id,
                                          in_batch_id => v_document_id,
                                          in_action_id => in_action_id,
                                          in_ptp_id => v_target_object_id,
                                          in_schedule_object_type_id =>v_schedule_object_type_id,
                                          io_action_outcome_id =>io_action_outcome_id,
                                          in_product_id => v_product_id);
          --transform location
          sp_property_location_import(in_session_id =>in_session_id ,
                                      in_transaction_id => in_transaction_id,
                                      in_batch_id => v_document_id,
                                      in_action_id => in_action_id,
                                      in_ptp_id => v_target_object_id,
                                      in_cppcf_id => v_policy_cppcf_id,
                                      in_customer_id =>v_policy_customer_id,
                                      in_schedule_object_type_id =>v_schedule_object_type_id,
                                      io_action_outcome_id =>io_action_outcome_id,
                                      in_product_id => v_product_id);
         
          --pkg_os_object_io.sp_bv_value_cache_start(in_session_id      => in_session_id);
          select
               c.dragon_object_id
          bulk collect into
               v_object_list
          from
               cppcf_building_schedule c
          where
               c.batch_id = v_document_id;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name, '... Property Schedule Item Count:'||v_object_list.count );

          end if;


     elsif ( v_schedule_object_type_id = 2357646 ) -- OSCore_PolicyGLLocationScheduleImport
     then

          -- Get and Update PolicyCustomer and PolicyCPPGL columns in table. These will be used as the Target Object by Transformation

          -- OneShieldReference220671052276904PolicyTransactionPolicy >> _Child_PolicyCustomer
          v_policy_customer_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '220671052276904' );

          if v_product_id = 4205 then 
             v_policy_cppgl_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.26378605' );
          else
            
          -- OneShieldReference21761001.26916207.264797052276904.363901.2197405PolicyCPP >> _Child_PolicyCPPGL
             v_policy_cppgl_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.26916207.264797052276904.363901.2197405' );
          end if;
          /*update
               cppgl_location_schedule
          set
               policy_customer_object_id = v_policy_customer_id,
               policy_cppgl_object_id = v_policy_cppgl_id,
               ptp_id = v_target_object_id
          where
               batch_id = v_document_id;*/

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
                    '|||||| Starting the import of GL Schedule - Table Name:' || v_schedule_tbl_name ||
                    ' Batch ID:'||v_document_id|| ' PTP ID:' || v_target_object_id ||
                    ' PolicyCustomer ID:' || v_policy_customer_id || ' PolicyCPPGL ID:' || v_policy_cppgl_id );

          end if;

          if v_document_id is null or v_target_object_id is null or v_policy_customer_id is null or v_policy_cppgl_id is null
          then

               raise no_data_found;

          end if;


         update_building_schedule(v_document_id,v_policy_customer_id,v_policy_cppgl_id,v_target_object_id,2357646,null);
          -- Using Document ID, we need to get the list of records read from spreadsheet

          select
               c.dragon_object_id
          bulk collect into
               v_object_list
          from
               cppgl_location_schedule c
          where
               c.batch_id = v_document_id;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name, '... GL Schedule Item Count:'||v_object_list.count );

          end if;

          elsif 
             v_schedule_object_type_id in ( 2602646)  -- OSCore_PolicyCPPCAVehicleImport
       then
           v_policy_customer_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '220671052276904' ); -- PTP.ChildPolicyCustomer

          if v_product_id = 115448 then
								
								v_policy_ca_id       := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.34015548' ); --PTP._Child_PolicyCommercial._Child_PolicyCAU
          
		  else
		  
								v_policy_ca_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.26916207.30522346' );
         
								v_policy_cpp_ca_ba_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_target_object_id, '21761001.26916207.30522346.30526946' );
								
		  end if;
		  
          -- Datamart updates for the objects created from UI : OSPRODUCT-26481
          -- Get the child of PolicyCAUJurisdiction, PolicyCAULoaction and PolicyCAUVehicle sorted by the object id and Pick the first out of them
          
          if v_product_id = 115448 then 
            
            pkg_os_object_search.sp_object_children_of_type_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_policy_ca_id,
                                                             3532948,
                                                             v_CAUJurisdiction_obj_list,
                                                             211343
                                                        );
            
            pkg_os_object_search.sp_object_children_of_type_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_policy_ca_id,
                                                             3533148,
                                                             v_CAULocation_obj_list,
                                                             211343
                                                        );
                                                        
            pkg_os_object_search.sp_object_children_of_type_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             v_policy_ca_id,
                                                             3533048,
                                                             v_CAUVehicle_obj_list,
                                                             211343
                                                        );                                             
          
            if  v_CAUJurisdiction_obj_list.count > 0 then 
                     pkg_os_datamart.sp_datamart_update_row(
                                                                     in_session_id => in_session_id,
                                                                     in_transaction_id => in_transaction_id,
                                                                     in_object_id => v_CAUJurisdiction_obj_list(v_CAUJurisdiction_obj_list.first),
                                                                     io_datamart_tf => v_datamart_tf
                                                                );
                                                                
                    if v_session_control.gLogging_Full then

                      pkg_os_logging.sp_log( 
                                             in_session_id,  
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '...PolicyCAUJurisdiction id     :' || v_CAUJurisdiction_obj_list(v_CAUJurisdiction_obj_list.first)
                                            );

                   end if;  
                                                             
            end if;     
             
            if  v_CAULocation_obj_list.count > 0 then                                    
                     pkg_os_datamart.sp_datamart_update_row(
                                                                     in_session_id => in_session_id,
                                                                     in_transaction_id => in_transaction_id,
                                                                     in_object_id => v_CAULocation_obj_list(v_CAULocation_obj_list.first),
                                                                     io_datamart_tf => v_datamart_tf
                   
                                                             );
                                                             
                    if v_session_control.gLogging_Full then

                      pkg_os_logging.sp_log( 
                                             in_session_id,  
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '...PolicyCAULocation id     :' || v_CAULocation_obj_list(v_CAULocation_obj_list.first)
                                            );

                   end if;      
                                                      
            end if; 
             
            if  v_CAUVehicle_obj_list.count > 0  then
                     pkg_os_datamart.sp_datamart_update_row(
                                                                     in_session_id => in_session_id,
                                                                     in_transaction_id => in_transaction_id,
                                                                     in_object_id => v_CAUVehicle_obj_list(v_CAUVehicle_obj_list.first),
                                                                     io_datamart_tf => v_datamart_tf
                                                                );
                    
                     if v_session_control.gLogging_Full then

                      pkg_os_logging.sp_log( 
                                             in_session_id,  
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '...PolicyCAUVehicle id     :' || v_CAUVehicle_obj_list(v_CAUVehicle_obj_list.first)
                                            );

                   end if;                                            
            end if;          
          -- Datamart updates for the objects created from UI : OSPRODUCT-26481
          end if;
         

          if v_session_control.gLogging_Full then

                      pkg_os_logging.sp_log( 
                                             in_session_id,  
                                             in_transaction_id, 
                                             v_procedure_name,
                                             '...Starting the import of Business Auto Schedule - Table Name      :' || v_schedule_tbl_name ||
                                             ' Batch ID                          :'||v_document_id|| 
                                             ' PTP ID                            :' || v_target_object_id ||
                                             ' PolicyCustomer ID                 :' || v_policy_customer_id || 
                                             ' PolicyCAU ID                      :' || v_policy_ca_id
                                            );

          end if;

          if   v_document_id is null or 
               v_target_object_id is null or 
               v_policy_customer_id is null or 
               v_policy_ca_id is null
          then
               raise no_data_found;
          end if;

          update_building_schedule(v_document_id,v_policy_customer_id,v_policy_ca_id,v_target_object_id,2602646,v_policy_cpp_ca_ba_id);

          --START: Aditya for OSPRODUCT-26481
          
          if v_product_id = 115448 then
              
              update 
                          CPPCA_VEHICLE_SCHEDULE 
              set 
                          TYPE_OF_TRANSFORMATION= 1 
              where
                          batch_id = v_document_id;
                          
          elsif v_product_id = 2805 then
              
              update 
                          CPPCA_VEHICLE_SCHEDULE 
              set 
                          TYPE_OF_TRANSFORMATION= 2 
              where
                          batch_id = v_document_id;
          end if;                
          
          --END: Aditya for OSPRODUCT-26481

          select
               c.dragon_object_id
               bulk collect into
               v_object_list
          from
               CPPCA_VEHICLE_SCHEDULE c 
          where
               c.batch_id = v_document_id;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name, '... Commercial Auto CAU Schedule Item Count:'||v_object_list.count );

          end if;
     else
       v_sql := 'Select dragon_object_id  from '||v_schedule_tbl_name  || ' where batch_id ='|| v_document_id;

       execute immediate v_sql  bulk collect into v_object_list;
       
     end if;

  if v_session_control.gLogging_Full
  then
     pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name, '... Fixing merge BVs using Target Object:'||v_target_object_id );
  end if;
     -- set session policy to v_target_object_id that will used in transformation 
     pkg_os_object_io.sp_object_bv_set(in_session_id,  in_transaction_id,in_session_id,29650546,v_target_object_id);
     -- Fix Merge BVs so that import transformation can use them
     sp_fix_xform_merge_bvs(in_session_id, in_transaction_id, v_target_object_id);

     select count(1) into v_new_cnt from
     dragon_vehicle_schedule
     where ptp_id = v_target_object_id;
     pkg_os_logging.sp_log( in_session_id,  in_transaction_id, 'xxx ls',
                    '|||||| 1 count:' || v_new_cnt );
     --
     --  Transform each item into the appropriate object hierarchy under the target object ...
     --

     v_object_index := v_object_list.first;

     while v_object_index is not  null loop

       if ( v_schedule_object_type_id = 2357746 ) then
         update cppcf_building_schedule set TYPE_OF_TRANSFORMATION=3 where dragon_object_id = v_object_list(v_object_index);


         pkg_os_object_io.sp_object_bv_set(in_session_id               =>in_session_id ,
                                               in_transaction_id           => in_transaction_id,
                                               in_object_id                => v_object_list(v_object_index),
                                               in_bv_id                    => 35038548,
                                               in_bv_value                 => 3);
       end if;
      /*select count(1) into v_new_cnt from
      dragon_vehicle_schedule
      where ptp_id = v_target_object_id;

      pkg_os_logging.sp_log( in_session_id,  in_transaction_id, 'xxx ls',
                '|||||| 2 count:' || v_new_cnt ||' '||v_object_list(v_object_index ));*/

          pkg_os_logging.sp_log_info( in_session_id,  in_transaction_id, v_procedure_name,
                         '..... Transforming Object Sequence:' || v_object_index || ' of ' || v_object_list.count );


      v_mini_object_list(v_mini_object_list.count+1):= v_object_list(v_object_index );
      --v_mini_list_count:= v_mini_list_count+1;
      if v_mini_object_list.count >=100
            or v_object_index = v_object_list.count then

        sp_transform_object
        (
           in_session_id,
           in_transaction_id,
           in_action_id,
           v_mini_object_list,
           v_schedule_object_type_id,
           io_action_outcome_id,
           v_product_id
              );
       -- v_mini_list_count:= 0;
        v_mini_object_list.delete;
      end if;


    /*select count(1) into v_new_cnt from
    dragon_vehicle_schedule
    where ptp_id = v_target_object_id;
    pkg_os_logging.sp_log( in_session_id,  in_transaction_id, 'xxx ls',
              '|||||| 3 count:' || v_new_cnt ||' '||v_object_list(v_object_index ));*/

          v_object_index := v_object_list.next( v_object_index );

     end loop;

     pkg_os_logging.sp_log_info( in_session_id,  in_transaction_id, v_procedure_name, '..... Done transforming Schedule');

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_property_schedule_import;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_property_schedule_export
--
--   %USAGE
--        Export CPPCF and CPPGL Schedule Objects using transformation
--      Action Object is ObjectDocument which can be a child of PT (for PNBT) or PTP (for Quote)
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_property_schedule_export
(
     in_session_id      in object.object_id%type,
     in_transaction_id      in     object.object_id%type,
     in_user_session_id       in   object.object_id%type,
     in_action_id         in   action.action_id%type,
     in_objectdocument_id     in  object.object_id%type,
     io_action_outcome_id     out   outcome.outcome_id%type
)
as

     v_procedure_name       constant system_log.program_name%type          := pkg_name||'sp_property_schedule_export';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     gObjType_PolicyTrxPolicy        constant     object_type.object_type_id%type   := 2276904;
     gObjType_PolicyTransaction   constant  object_type.object_type_id%type  := 629;

     v_target_object_id      object.object_id%type;
     v_target_object_type_id    object_type.object_type_id%type;
     v_document_id          object.object_id%type;
     v_schedule_object_type_id     object_type.object_type_id%type;
     v_policy_customer_id          object.object_id%type;
     v_policy_cppcf_id         object.object_id%type;
     v_policy_cppgl_id         object.object_id%type;

  v_object_list                    pkg_os_object.t_object_list;
     v_object_index          number;

     v_message_list                   pkg_os_message.t_message_list;
     v_object_cache                   pkg_os_object_cache.t_object_cache;

     v_schedule_tbl_name        varchar2(30);     -- Table Name
     v_objectDoc_object_type    object_type.object_type_id%type;
     v_sql varchar2(1000);

begin
     ---considering ExternalObjectDocuemnt implementation vs ObjectDocuemnt
     v_objectDoc_object_type := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_objectdocument_id );
     
     if v_objectDoc_object_type = 3361948 then 
       v_target_object_id   := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id ,in_objectdocument_id,'32770648.32770248');
     else
        v_target_object_id   := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_objectdocument_id );
     end if;
     
     v_document_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_objectdocument_id, pkg_os_constant_bv.gbv_objDocContents );
     
     v_schedule_object_type_id     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_objectdocument_id, gbv_Doc_ScheduleObjectType );

     -- Get the Relational Table from the Schedule Object Type
     v_schedule_tbl_name := pkg_os_object_type.fn_object_type_row(in_session_id, in_transaction_id, v_schedule_object_type_id).default_table_name;


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
               ' In ObjectDocument ID:'||in_objectdocument_id||
               ' Document ID: ' || v_document_id ||
               ' Target Object:' || v_target_object_id ||
               ' Schuedule Object Type:' || v_schedule_object_type_id ||
               ' Schedule Table Name:' || v_schedule_tbl_name);

     end if;

     if pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_target_object_id )   = gObjType_PTP then

          null;

     elsif pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_target_object_id )   = gObjType_PT then
       v_target_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_target_object_id,212318);
     else

          --
          --  Presumably we have a policy transaction, and need to go down to the PTP ...
          --

          v_target_object_id := pkg_os_object_search.fn_object_11_child_get( in_session_id,in_transaction_id, v_target_object_id, gObjType_PTP );

     end if;

     if v_document_id is null or v_target_object_id is null
     then

          raise no_data_found;

     end if;

     v_target_object_type_id   := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_target_object_id );

     if ( v_schedule_object_type_id = 2357746 ) -- OSCore_PolicyCFBuildingScheduleImportObject
     then

          -- Delete records from cppcf_building_schedule for given PTP
          delete from cppcf_building_schedule where ptp_id = v_target_object_id;

          -- Execute export transformation using given action
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
                    '|||||| Starting the export of Property Schedule - Table Name:' || v_schedule_tbl_name ||
                    ' Document ID:'||v_document_id|| ' PTP ID:' || v_target_object_id );

          end if;

     elsif ( v_schedule_object_type_id = 2357646 ) -- OSCore_PolicyGLLocationScheduleImport
     then

          -- Delete records from cppcf_building_schedule for given PTP
          delete from cppgl_location_schedule where ptp_id = v_target_object_id;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name,
                    '|||||| Starting the export of GL Schedule - Table Name:' || v_schedule_tbl_name ||
                    ' Document ID:'||v_document_id|| ' PTP ID:' || v_target_object_id );

          end if;

     else
         v_sql := 'delete from  '||v_schedule_tbl_name||' where ptp_id = '||v_target_object_id;
         execute immediate v_sql;
     end if;

     --
     --  Transform each item into the appropriate object hierarchy under the target object ...
     --

     pkg_os_xformer.sp_object_transform
     (
          in_session_id,
          in_transaction_id,
          v_object_cache,
          v_message_list,
          in_action_id,
          v_target_object_id,
          v_target_object_type_id,
          io_action_outcome_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log( in_session_id,  in_transaction_id, v_procedure_name, '..... Done export transforming  Schedule Items');

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_property_schedule_export;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_object_child_building
--
--  %USAGE
--         For given Location object, this procedure creates a Child Building and it referenced objects.
--      It also sets the Sequence Number and the Building Name--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_action_object_id      Location Object Id
--          in_action_object_type_id Object Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_child_building
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id       in    object.object_id%type,
     in_action_object_type_id    in          object_type.object_type_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_object_child_building';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_building_object_id          object.object_id%type;
     v_ptp_id             object.object_id%type;
     v_customer_location_id      object.object_id%type;
     v_customer_building_id      object.object_id%type;
     v_building_sequence        number;

     v_datamart_tf          char(1);

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Creating building Object for ObjectID:'||in_action_object_id || ' Object Type:' || in_action_object_type_id
          );

     end if;

     pkg_os_object.sp_object_create_child_of_type
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolicyCFBuilCoverage,
          v_building_object_id
     );

     sp_object_create_references
     (
          in_session_id,
          in_transaction_id,
          v_building_object_id,
          io_action_outcome_id
     );

     if ( in_action_object_type_id = gObjType_PolicyCFLocation )
     then

          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, gbv_CFLocation_RefCovered);

     end if;

     -- Get PTP ID
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);

     v_building_sequence := fn_max_building_sequence_get(v_ptp_id, v_customer_location_id) + 1;

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_object_id, gbv_GenericSequenceNumber, v_building_sequence);

     v_customer_building_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_building_object_id, gbv_CFBuilding_RefCovered);

     -- Set the Building Name
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, 21800301, 'Building ' || v_building_sequence);   -- Building Name

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_object_id, v_datamart_tf);

     -- Set Building as Session New Object
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_building_object_id);

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_object_child_building;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_object_create_references
--
--  %USAGE
--         For given object, this procedure gets all references and if there exists no reference
--      attempts to create the referenced object
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_create_references
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id       in    object.object_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_object_create_references';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_action_object_type_id    object_type.object_type_id%type;

     v_reference_object_id   object.object_id%type;
     v_constraining_object_id       object.object_id%type;
     v_datamart_tf              char(1);

begin

     v_action_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating referenced Objects for ObjectID:'||in_action_object_id || ' Object Type:' || v_action_object_type_id
     );
  end if;

     --
     --  Create Tied referenced objects and initialize the reference variable pointing to them ...
     --

     for x in (
          select
               reference_constraint_object_id,
               related_object_type_id,
               pkg_os_token.fn_strip_suffix( reference_constraint_path )  as reference_constraint_path,
               reference_constraint_rule_id,
               reference_bv_id
          from
               object_relationship
          where
               object_type_id = v_action_object_type_id
          and
               reference_constraint_type_id = pkg_os_constant_enum.gReferenceC_Tied -- pkg_os_constant_enum.gReferenceC_Constrained
     )
     loop

          -- Get the current referenced object - if one exists - if the reference is already set, we don't
          -- to need to work further

          v_reference_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, x.reference_bv_id);

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                              '.........Checking Tied reference for ObjectID:'|| in_action_object_id ||
                              ' Referenced ObjectID:'||v_reference_object_id );

          end if;

          if ( v_reference_object_id is null )
          then

               --
               --  Find the constraining object instance ...
               --

               if ( x.reference_constraint_path is not null )
               then

                    v_constraining_object_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_action_object_id, x.reference_constraint_path );

               elsif ( x.reference_constraint_object_id is not null )
               then

                    v_constraining_object_id := pkg_os_object_search.fn_object_get_parent_of_type( in_session_id, in_transaction_id, in_action_object_id, x.reference_constraint_object_id );

               else

                    --
                    --  Unable to find constraint metadata ...
                    --

                    pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '......... Unable to find constraining object-type or constraint-path when trying to create referenced object - ReferenceBVID:'||x.reference_bv_id,159001);

                    raise no_data_found;

               end if;

               --
               --  Unable to find constraint object instance ...
               --

               if v_constraining_object_id is null
               then

                    pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '......... Unable to find constraining object-id ... - ReferenceBVID:'||x.reference_bv_id,159002);

                    raise no_data_found;

               else

                    pkg_os_object.sp_object_create_child_of_type
                    (
                         in_session_id,
                         in_transaction_id,
                         v_constraining_object_id,
                         x.related_object_type_id,
                         v_reference_object_id
                    );

                    --
                    --  Set the reference BV to the reference object ...
                    --

                    pkg_os_object_io.sp_object_bv_set
                    (
                       in_session_id,
                       in_transaction_id,
                       in_action_object_id,
                       x.reference_bv_id,
                       v_reference_object_id
                    );
 
                    pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_reference_object_id,v_datamart_tf);                   

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                                        '......... ... Created Tied reference for ObjectID:'|| in_action_object_id ||
                                        ' Referenced ObjectID:'||v_reference_object_id );

                    end if;

               end if;

          end if;  -- referenced object does not exist

     end loop;

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_object_create_references;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_create_object_tied_refs
--
--  %USAGE
--         For given object, this procedure gets all references and if there exists no reference
--      attempts to create the referenced object
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_create_object_tied_refs
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_child_object_type_id   in    object_type.object_type_id%type,
     in_parent_object_id       in    object.object_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type,
     out_child_object_id       out       object.object_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_create_object_tied_refs';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating child object for Parent ObjectID:'||in_parent_object_id || ' Child Object Type:' || in_child_object_type_id
     );
  end if;


     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          in_child_object_type_id,
          in_parent_object_id,
          out_child_object_id
     );


     sp_object_create_references
     (
          in_session_id,
          in_transaction_id,
          out_child_object_id,
          io_action_outcome_id
     );

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_create_object_tied_refs;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_property_add_peer
--
--  %USAGE
--      The procedure creates a new property object (Jurisdiction, Location, Building along with its driven objects.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_property_add_peer
(
     in_session_id            in        object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     io_object_cache          in out    pkg_os_object_cache.t_object_cache,
     in_action_object_id      in        object.object_id%type,
     in_action_object_type_id in        object_type.object_type_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_property_add_peer';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_id             object.object_id%type;

     v_peer_parent_object_id    object.object_id%type;
     v_jurisdiction_id         object.object_id%type;
     v_location_id          object.object_id%type;
     v_location_seq_num      integer;

     v_building_id          object.object_id%type;
     v_building_seq_num      integer;

     v_datamart_tf          char(1);

     v_policycustomer_id        object.object_id%type;
     v_customer_location_id      object.object_id%type;

begin

     -- In Action Object is PolicyCPPCF
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
     v_policycustomer_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);

     v_peer_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating new Object for ParentObjectID:'||v_peer_parent_object_id||
          ' ChildObjectTypeID:'||in_action_object_type_id ||
          ' PTP ID:' || v_ptp_id
     );
  end if;

     if (in_action_object_type_id = gObjType_PolicyCFJurisdiction) -- PolicyCFJurisdiction
     then

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_jurisdiction_id
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_jurisdiction_id, v_datamart_tf);

          -- Create child Location
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolicyCFLocation,          -- PolicyCFLocation
               v_jurisdiction_id,
               io_action_outcome_id,
               v_location_id
          );

          -- Set Location Sequence Number
          v_location_seq_num := fn_max_location_sequence_get(v_ptp_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          -- Create child building
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolicyCFBuilCoverage,               -- PolicyCFBuildingCoverage
               v_location_id,
               io_action_outcome_id,
               v_building_id
          );

          -- Set Building Sequence Number
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_location_id, gbv_CFLocation_RefCovered);
          v_building_seq_num := fn_max_building_sequence_get(v_ptp_id, v_customer_location_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_jurisdiction_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_jurisdiction_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolicyCFLocation) -- PolicyCFLocation
     then

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,               -- PolicyCFLocation
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_location_id
          );

          -- Set Location Sequence Number
          v_location_seq_num := fn_max_location_sequence_get(v_ptp_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          -- Create child building
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolicyCFBuilCoverage,               -- PolicyCFBuildingCoverage
               v_location_id,
               io_action_outcome_id,
               v_building_id
          );

          -- Set Building Sequence Number
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_location_id, gbv_CFLocation_RefCovered);
          v_building_seq_num := fn_max_building_sequence_get(v_ptp_id, v_customer_location_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_location_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_location_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolicyCFBuilCoverage) -- PolicyCFBuildingCoverage
     then

          -- Set Building Sequence Number
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_peer_parent_object_id, gbv_CFLocation_RefCovered);
          v_building_seq_num := fn_max_building_sequence_get(v_ptp_id, v_customer_location_id) + 1;

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolicyCFBuilCoverage,               -- PolicyCFBuildingCoverage
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_building_id
          );

          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_building_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_building_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolGLJurisLiabltyCov) -- PolicyGLJurisdictionLiabilityCoverage
     then

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,               -- PolicyGLJurisdictionLiabilityCoverage
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_jurisdiction_id
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_jurisdiction_id, v_datamart_tf);

          -- Create child Location
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolGLLocLiabltyCov,         -- PolicyGLLocationLiabilityCoverage
               v_jurisdiction_id,
               io_action_outcome_id,
               v_location_id
          );

          -- Set Location Sequence Number
          v_location_seq_num := fn_max_location_sequence_get(v_ptp_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_jurisdiction_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_jurisdiction_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolGLLocLiabltyCov) -- PolicyGLLocationLiabilityCoverage
     then

          -- Create child Location
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,        -- PolicyGLLocationLiabilityCoverage
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_location_id
          );

          -- Set Location Sequence Number
          v_location_seq_num := fn_max_location_sequence_get(v_ptp_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num + 1 );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_location_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_location_id );

          end if;

     end if;

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_property_add_peer;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_property_add_location
--
--  %USAGE
--      The procedure creates a new PolicyCFLocation object. The user is expected to be on a particular Jurisdiction and then add Location
--      At this point, we don't know which PolicyCFJurisdiction to hang it to. Once the user provides the Location Address,
--      we need to determine the PolicyCFJurisdiction - if it is an existing Jurisdiction, hang it below the correct one.
--      If this is a new Jurisdiction,
--
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_property_add_location
(
     in_session_id            in        object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     io_object_cache          in out    pkg_os_object_cache.t_object_cache,
     in_action_object_id      in        object.object_id%type,
     in_action_object_type_id in        object_type.object_type_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_property_add_location';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_id             object.object_id%type;

     v_peer_parent_object_id    object.object_id%type;
     v_jurisdiction_id         object.object_id%type;
     v_location_id          object.object_id%type;
     v_location_seq_num      number;

     v_building_id          object.object_id%type;
     v_building_seq_num      integer;

     v_datamart_tf          char(1);

     v_policycf_juris_id        object.object_id%type;
     v_policycflocation_id   object.object_id%type;
     v_policy_customer_id          object.object_id%type;
     v_customer_juris_id        object.object_id%type;

     v_customer_address_id   object.object_id%type;
     v_customer_location_id      object.object_id%type;
     
     v_object_type object_type.OBJECT_TYPE_ID%type;
     
     v_new_customer_building object.object_id%type;
     v_cppcf_building_id object.object_id%type;
begin

     -- In Action Object ID is PolicyCPPCFJurisidiction or PolicyCFLocation
     v_object_type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                                       in_transaction_id => in_transaction_id,
                                                       in_object_id      => in_action_object_id);
     -- v_policycppcf_id := in_action_object_id;
     if v_object_type = 2191505 then 
       v_policycf_juris_id := pkg_os_object.fn_object_parent_get(in_session_id     => in_session_id,
                                                                 in_transaction_id => in_transaction_id,
                                                                 in_object_id      => in_action_object_id);
     else
      v_policycf_juris_id := in_action_object_id;
     
     end if;
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
     v_policy_customer_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);

     -- v_policycf_juris := pkg_os_utility.fn_get_one_child_of_type(in_session_id, in_transaction_id, v_policycppcf_id, gObjType_PolicyCFJurisdiction);

     v_customer_juris_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policycf_juris_id, gbv_CFJuris_RefCoveredJuris);
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating new Location using PTP ID:' || v_ptp_id ||
          ' PolicyCustomer:' || v_policy_customer_id ||
          ' PolicyCFJurisdiction:' || v_policycf_juris_id || ' CustomerJurisdiction:' || v_customer_juris_id
     );
  end if;

     -- Create CustomerAddress as child of PolicyCustomer
     pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_CustomerAddress, v_policy_customer_id, v_customer_address_id);

     -- Create CustomerLocation as child of CustomerJurisdiction
     pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_CustomerLocation, v_customer_juris_id, v_customer_location_id);

     -- Set CustomerLocation._Reference_Located At -- OneShieldReference29254314CustomerLocation - xReference - _Reference_LocatedAt
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_location_id, gbv_CustLocation_RefLocatedAt, v_customer_address_id);
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_policycflocation_id,v_datamart_tf);

     ----create customer building
      pkg_os_object.sp_object_create ( in_session_id, in_transaction_id, pkg_os_constant.gObjType_CustomerBuilding,
           v_customer_location_id, v_new_customer_building  );
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_customer_building,v_datamart_tf);
     -- Create PolicyCFLocation as child of PolicyCFJurisdiction
     pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_PolicyCFLocation, v_policycf_juris_id, v_policycflocation_id);

     -- Set PolicyCFLocation._Reference_Covered Location -- OneShieldReference26450005PolicyCFLocation - xReference - _Reference_Covered Location
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policycflocation_id, gbv_CFLocation_RefCovered, v_customer_location_id);
    pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_policycflocation_id,v_datamart_tf);
  
    --- create cflocation building
     pkg_os_object.sp_object_create ( in_session_id, in_transaction_id, gObjType_PolicyCFBuilCoverage, v_policycflocation_id,  v_cppcf_building_id  );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cppcf_building_id, gbv_CFBuilding_RefCovered, v_new_customer_building );
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_cppcf_building_id,v_datamart_tf);
     -- Set Location Sequence Number
     v_location_seq_num := fn_max_location_sequence_get(v_ptp_id) + 1;
	 v_building_seq_num := fn_max_building_sequence_get(v_ptp_id,v_policycflocation_id) +1;
     
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Created new PolicyCFLocation:'||v_policycflocation_id || ' with sequence number:' || v_location_seq_num
     );
  end if;

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policycflocation_id, gbv_GenericSequenceNumber, v_location_seq_num );
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cppcf_building_id, gbv_GenericSequenceNumber, v_building_seq_num );

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_policycflocation_id );


    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_property_add_location;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_object_create_clone
--
--  %USAGE
--         For given object, this procedure creates a copy of the current object
--      gets all its Tied referenced objects and clones the referenced objects
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_action_object_id      Peer Object Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_create_clone
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id       in    object.object_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
as

     v_procedure_name             constant system_log.program_name%type := pkg_name || 'sp_object_create_clone';
     v_session_control                pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_action_object_type_id      object_type.object_type_id%type;
     v_parent_object_type_id      object_type.object_type_id%type;

     v_parent_object_id          object.object_id%type;
     v_cloned_object_id          object.object_id%type;

     v_reference_object_id       object.object_id%type;
     v_ref_parent_object_id         object.object_id%type;
     v_ref_parent_object_type_id      object_type.object_type_id%type;
     v_ref_cloned_object_id         object.object_id%type;
     v_ptp_id              object.object_id%type;
     v_customer_location_id         object.object_id%type;

     v_building_sequence          number;
     v_datamart_tf             char(1);

begin

     v_action_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);
     v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

     -- Get PTP ID
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);

     if ( v_action_object_type_id = gObjType_PolicyCFBuilCoverage )
     then

          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_parent_object_id, gbv_CFLocation_RefCovered);

     end if;

     v_building_sequence := fn_max_building_sequence_get(v_ptp_id, v_customer_location_id) + 1;
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Cloning ObjectID:'||in_action_object_id || ' Object Type:' || v_action_object_type_id ||
          ' with sequence number:' || v_building_sequence
     );
  end if;

     --
     --   Duplicate the current object ...
     --

     pkg_os_object_copy.sp_object_duplicate
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          v_cloned_object_id
     );

     pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_cloned_object_id, v_parent_object_id);
     v_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_parent_object_id );
     pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_cloned_object_id, v_action_object_type_id, v_parent_object_id, v_parent_object_type_id);

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cloned_object_id, gbv_GenericSequenceNumber, v_building_sequence);

     --
     --  Create Tied referenced objects and initialize the reference variable pointing to them ...
     --

     for x in (
          select
               reference_constraint_object_id,
               related_object_type_id,
               pkg_os_token.fn_strip_suffix( reference_constraint_path )  as reference_constraint_path,
               reference_constraint_rule_id,
               reference_bv_id
          from
               object_relationship
          where
               object_type_id = v_action_object_type_id
          and
               reference_constraint_type_id = pkg_os_constant_enum.gReferenceC_Tied -- pkg_os_constant_enum.gReferenceC_Constrained
     )
     loop

          -- Get the current referenced object - if one exists - if the reference is already set, we don't
          -- to need to work further

          v_reference_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, x.reference_bv_id);

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                              '.........Checking Tied reference for ObjectID:'|| in_action_object_id ||
                              ' Referenced ObjectID:'||v_reference_object_id );

          end if;

          if ( v_reference_object_id is not null )
          then

               --
               -- Clone the Reference Object also
               --

               v_ref_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_reference_object_id);

               --
               --   Duplicate the current object ...
               --

               pkg_os_object_copy.sp_object_duplicate
               (
                    in_session_id,
                    in_transaction_id,
                    v_reference_object_id,
                    v_ref_cloned_object_id
               );

               pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, v_ref_parent_object_id);
               v_ref_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_ref_parent_object_id );
               pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_ref_cloned_object_id, x.related_object_type_id, v_ref_parent_object_id, v_ref_parent_object_type_id);

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cloned_object_id, x.reference_bv_id, v_ref_cloned_object_id);
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, gbv_GenericSequenceNumber, v_building_sequence);

               if (pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_ref_cloned_object_id) = gObjType_CustomerBuilding)
               then
                    -- Set the Building Name
                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, 21800301, 'Building ' || v_building_sequence);   -- Building Name

               end if;

          end if;  -- referenced object does not exist

     end loop;

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_cloned_object_id, v_datamart_tf);

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_cloned_object_id);

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_object_create_clone;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_covered_object_status_get
--
--  %USAGE
--      The function gets the tree status of all covered buildings or locations for given LOB
--     and given Status Type
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--      PTP_ID               Object ID of PolicyTransactionPolicy
--      Status Type        Status Type can be TREE, UW, ADDR
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_covered_object_status_get
(
     in_ptp_id                in      object.object_id%type,
     in_status_type           in      varchar2
)
return number
is

     v_return_value          number;

begin

     -- Status Type = TREE
     select
          count(1)
     into
          v_return_value
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_ptp_id
     and
          nvl(d.lob_selected_ind, 'No') = 'Yes'  -- LOB should be selected
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     and
     (
          ( d.building_id is not null and nvl(d.building_include_tf, 'No') = 'Yes' )    -- If Building is Covered it should be Complete
          or
          ( d.location_id is not null and nvl(d.location_include_tf, 'No') = 'Yes' )    -- If Location is Covered it should be Complete
          or
          ( d.jurisdiction_id is not null and nvl(d.jurisdiction_include_tf, 'No') = 'Yes' )  -- If Jurisdiction is Covered it should be Complete
     )
     and
          (   -- Tree Completion Status is null or is Red, return Incomplete
               ( in_status_type = 'Incomplete' and (d.tree_completion_status is null or d.tree_completion_status = 'Red' ) )
          );


     return v_return_value;

end fn_covered_object_status_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_pnbt_change_count_get
--
--  %USAGE
--      The function gets the count of changes from DRAGON_OBJECT_CHANGE_DETAIL
--     This information can be used to verify that the change summary has been executed
--     and that there are changes made in the current transaction
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--      PTP_ID                   Object ID of PolicyTransactionPolicy
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_pnbt_change_count_get
(
     in_ptp_id                in      object.object_id%type
)
return number
is

     v_return_value          number;

begin

     -- Status Type = TREE
     select
          count(1)
     into
          v_return_value
     from
          dragon_object_change_detail d
     where
          d.ptp_id = in_ptp_id;

     return v_return_value;

end fn_pnbt_change_count_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_max_location_sequence_get
--
--  %USAGE
--      The Location Sequence number is unique across the Policy
--     This function returns the maximum Location Sequence number for the given Policy from the datamart.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--      PTP_ID               Object ID of PolicyTransactionPolicy
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_max_location_sequence_get
(
     in_ptp_id        in       object.object_id%type
)
return number
is

     v_return_value          number;

begin

     select
          max(to_number(d.location_sequence))
     into
          v_return_value
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_ptp_id
     and
          d.location_id is not null
     ;

     return v_return_value;

end fn_max_location_sequence_get;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_max_building_sequence_get
--
--  %USAGE
--      The Building Sequence number is unique within its Location
--     This function returns the maximum Building Sequence number within its Location
--      for the given Policy from the datamart.
--
--      Note: Getting the max sequence number from a datamart will be expensive after a certain period of time,
--      especially for  LS quotes/policies.
--      Given the Location Object (the one on the Policy side), it is easier to get the Covered Location
--      on the Customer side and get the _Child CustomerBuilding Count as this is guaranteed to give
--      a unique sequence number.
--
--      To make this function generic across LOBs, provide the CustomerLocation object ID.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--      in_ptp_id           Object ID of PolicyTransactionPolicy
--      in_location_id      CustomerLocation Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_max_building_sequence_get
(
     in_ptp_id        in       object.object_id%type,
     in_location_id       in    object.object_id%type
)
return number
is

     v_return_value          number;

begin

     -- Get the covered CustomerLocation and get the _Child CustomerBuilding Count
     -- This will ensure that we get a unique sequence number within a Location
     -- as some Buildings may have been deleted on the Policy side, but they won't be
     -- on the Customer side.

     v_return_value := pkg_os_object.fn_object_children_count_get(in_location_id, gObjType_CustomerBuilding);

/*
     select
          max(d.building_sequence)
     into
          v_return_value
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_ptp_id
     and
          d.location_id = in_location_id
     and
          d.building_id is not null
     ;
*/

     return v_return_value;

end fn_max_building_sequence_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_building_global_update
--
--  %USAGE
--      Given a PTP, this procedure gets the Template Object from PTP._Reference_Template Object For Global Update
--      Loop through all Buildings and update the BVs with the cell values.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_building_global_update
(
     in_session_id      in        object.object_id%type,
     in_transaction_id      in        object.object_id%type,
     in_ptp_object_id   in        object.object_id%type,
     in_action_id         in    action.action_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_building_global_update';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_template_object_id          object.object_id%type;
     v_property_sequence        integer := 1;
     v_lob_id             object.object_id%type;

     -- Select properties that are included
     cursor cur_property_schedule
     is
     select
          d.property_schedule_id,
          d.jurisdiction_name ||
               (case when d.location_name is not null then ', ' || d.location_name else null end) ||
               (case when d.building_name is not null then ', ' || d.building_name else null end) as property_name,
          (count(*) over()) as total_count
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_ptp_object_id
     and
          ( d.lob_id = v_lob_id and d.lob_selected_ind is not null )
     and
          ( d.building_id is not null and d.building_include_tf = 'Yes' )
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     and nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.property_schedule_id;

    cursor cur_ca_vehicle
    is
     select
        vehicle_id
     from
        dragon_customer_vehicle d
     where
        d.ptp_id = in_ptp_object_id     
     and
        nvl(d.vehicle_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     order by d.vehicle_id;
          
     v_template_object_type_id object_type.OBJECT_TYPE_ID%type;
     v_datamart_tf  char(1);
begin

      pkg_os_system_attribute.sp_update_user_logging_level(in_session_id,
                                                           in_transaction_id,
                                                           in_session_id,
                                                           3 );

     -- Get Template Object
     v_template_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_ptp_object_id, gbv_PTP_Refers_TemplateObject);
     
     v_template_object_type_id := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                                                   in_transaction_id => in_transaction_id,
                                                                   in_object_id      => v_template_object_id);
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Global Updating for PTP ID:'||in_ptp_object_id ||
               ' using Template object:' || v_template_object_id ||
               ' template object type:'|| v_template_object_type_id
          );

     end if;

     if ( v_template_object_id is null )
     then
        if v_session_control.gLogging_Full then

                pkg_os_logging.sp_log_info
                (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     '.... Template Object not available. Please verify that the Template Object exists and is set on the Policy object.'
                );
          end if;

          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          return;

     end if;

     -- for commercial auto product 
     if v_template_object_type_id = 3533048 then
        for l_vehicle in cur_ca_vehicle loop

          if v_session_control.gLogging_Full then

                  pkg_os_logging.sp_log_info
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '....Update vehicle:'|| l_vehicle.vehicle_id ||' From:'||v_template_object_id );
            end if;  
                    
            pkg_os_product_object_copy.sp_pd_object_update
            (
                 in_session_id,
                 in_transaction_id,
                 v_template_object_id,
                 in_action_id,
                 l_vehicle.vehicle_id
            );
            
            pkg_os_datamart.sp_datamart_update_row(in_session_id     => in_session_id,
                                                   in_transaction_id => in_transaction_id,
                                                   in_object_id      => l_vehicle.vehicle_id,
                                                   io_datamart_tf    => v_datamart_tf );
        end loop;
     else
       -- Determine LOB (CF/GL/CM/CR etc) from Template Object

       begin

            select
                 d.lob_id
            into
                 v_lob_id
            from
                 dragon_property_schedule d
            where
                 d.building_id = v_template_object_id;

       exception
            when no_data_found then
                 v_lob_id := null;

                 pkg_os_logging.sp_log_info
                 (
                      in_session_id,
                      in_transaction_id,
                      v_procedure_name,
                      '.... Unable to determine LOB from Template Object. Please verify that the Template Object exists in DRAGON_PROPERTY_SCHEDULE.'
                 );

                 io_action_outcome_id := pkg_os_constant.gOutcome_OK;
                 return;
       end;

       for c1 in cur_property_schedule
       loop

            pkg_os_logging.sp_log_info
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 ' v_template_object_id:'||v_template_object_id|| ' in_action_id:'||in_action_id||' traget:'||c1.property_schedule_id||
                 '..... Global Update - Property: ' || v_property_sequence || ' of ' || c1.total_count || ' - ' || c1.property_name
            );

            pkg_os_product_object_copy.sp_pd_object_update
            (
                 in_session_id,
                 in_transaction_id,
                 v_template_object_id,
                 in_action_id,
                 c1.property_schedule_id
            );

            v_property_sequence := v_property_sequence + 1;

       end loop;

     end if;
     -- Delete Template Object
     pkg_os_object.sp_object_delete
     (
          in_session_id,
          in_transaction_id,
          pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_template_object_id),
          v_template_object_id,
          pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_template_object_id)
     );

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_building_global_update;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_clear_all_native_bvs
--
--  %USAGE
--      Given an Object, this procedure loops through all Objects in the hierarchy and deletes all native BVs
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clear_all_native_bvs
(
     in_session_id      in        object.object_id%type,
     in_transaction_id      in        object.object_id%type,
     in_action_object_id       in        object.object_id%type,
     in_action_id         in    action.action_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_clear_all_native_bvs';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_child_object_list        pkg_os_object.t_object_list;
     v_related_object_list   pkg_os_object.t_object_list;
     v_cache_relational_bv   pkg_os_object_io.t_object_relation := pkg_os_object_io.t_object_relation() ;
begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Clearing all BVs for Object ID:' || in_action_object_id ||
               ' (' || pkg_os_object.fn_object_type_name_get(in_session_id, in_transaction_id, in_action_object_id) || ')'
          );

     end if;

     -- Add the Action Object to the Child Object List
     v_child_object_list(1) := in_action_object_id;

     -- Get all immediate child objects of the given object
     pkg_os_object_search.sp_object_all_children_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          v_child_object_list,
          'F'
     );

     if ( v_child_object_list.count > 0 )
     then

          for x in v_child_object_list.first..v_child_object_list.last
          loop

               v_related_object_list.delete;

               select
                    o.relation_object_id
               bulk collect into
                    v_related_object_list
               from
                    object_relation o, object_relationship r
               where
                    o.object_id  = v_child_object_list(x)
               and
                    o.object_type_id = r.object_type_id
               and
                    r.reference_constraint_type_id = pkg_os_constant.gReferenceC_Tied;


               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....... Clearing all BVs for Object ID:' || v_child_object_list(x) ||
                         ' (' || pkg_os_object.fn_object_type_name_get(in_session_id, in_transaction_id, v_child_object_list(x)) || ')'
                    );

               end if;

              -- preserve all relational bv (OSPRODUCT-24156)
              v_cache_relational_bv.delete;
              v_cache_relational_bv := pkg_os_object_io.fn_object_refs_get(in_session_id,in_transaction_id, v_child_object_list(x),null);

               pkg_os_object_io.sp_object_bv_delete(in_session_id, in_transaction_id, v_child_object_list(x));
               --set relationship bv back except generic object type bv
              if v_cache_relational_bv.count > 0 then
                 for v_idx in 1..v_cache_relational_bv.count
                   loop
                    if  v_cache_relational_bv(v_idx).OBJECT_TYPE_ID <> pkg_os_constant.gObjType_Generic then
                       pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,
                       v_cache_relational_bv(v_idx).OBJECT_ID,
                       v_cache_relational_bv(v_idx).OBJECT_RELATIONSHIP_BV_ID,
                       v_cache_relational_bv(v_idx).RELATION_OBJECT_ID);
                    end if;
                 end loop;
               end if;


               if ( v_related_object_list.count > 0 )
               then

                    for y in v_related_object_list.first..v_related_object_list.last
                    loop

                         if v_session_control.gLogging_Full
                         then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '....... Clearing all BVs for Related Object ID:' || v_related_object_list(y) ||
                                   ' (' || pkg_os_object.fn_object_type_name_get(in_session_id, in_transaction_id, v_related_object_list(y)) || ')'
                              );

                         end if;

                        -- preserve all relational bv (OSPRODUCT-24156)
                         v_cache_relational_bv.delete;
                         v_cache_relational_bv := pkg_os_object_io.fn_object_refs_get(in_session_id,in_transaction_id, v_related_object_list(y),null);

                         pkg_os_object_io.sp_object_bv_delete(in_session_id, in_transaction_id, v_related_object_list(y));
                         if v_cache_relational_bv.count > 0 then
                            for v_idx in 1..v_cache_relational_bv.count
                              loop
                              if  v_cache_relational_bv(v_idx).OBJECT_TYPE_ID <> pkg_os_constant.gObjType_Generic then
                                 pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,
                                 v_cache_relational_bv(v_idx).OBJECT_ID,
                                 v_cache_relational_bv(v_idx).OBJECT_RELATIONSHIP_BV_ID,
                                 v_cache_relational_bv(v_idx).RELATION_OBJECT_ID);
                              end if;
                            end loop;
                          end if;


                    end loop;

               end if;

          end loop;

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_clear_all_native_bvs;

------------------------------------------------------------------------------------------------------------------------

procedure sp_set_session_policy
(
     in_session_id      in        object.object_id%type,
     in_transaction_id      in        object.object_id%type,
     in_action_object_id       in        object.object_id%type
)
is
begin

     -- Set UserSession._Reference_SessionPolicy to PTP ID
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, 29650546, in_action_object_id);

end;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_log_messages
--
--  %USAGE
--      This procedure will reside in PKG_OS_MESSAGE - included here to prevent dependency issues until the Core release.
--      Writes all messages to the System Log with Instruction Type = 5 (Information/User friendly messages)
--      This will be useful for Asynchronous workflows, where the user will not be able to
--      view messages (errors, warnings, messages from action result) that are displayed
--      to the UI, during the execution of a workflow.
--
--      This procedure can be called at the very end of sp_process_action or from within a custom procedure
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     io_message_list    Message List
--  %PARAM     in_error_message_id       Error Message ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_log_messages
(
     in_session_id      in       object.object_id%type,
     in_transaction_id      in               object.object_id%type,
     io_message_list    in out nocopy  pkg_os_message.t_message_list
)
as

     v_procedure_name   constant system_log.program_name%type := pkg_name || 'sp_log_messages';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_msg_indx               number         := io_message_list.first;

begin

     while v_msg_indx is not null loop

          pkg_os_logging.sp_log_info
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               io_message_list(v_msg_indx)
          );

          v_msg_indx := io_message_list.next( v_msg_indx );

     end loop;

end sp_log_messages;
----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_move_loc_under_right_jursdn
--
--  %USAGE
--    The procedure moves the locations to right Jurisdiction based on State code of the associated Addres.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_move_loc_under_right_old
(
    in_session_id            in        object.object_id%type,
    in_transaction_id        in        object.object_id%type,
    in_action_object_id      in        object.object_id%type,
    in_qualification_rule_id in        object_type.object_type_id%type,
    io_object_cache          in out    pkg_os_object_cache.t_object_cache,
    io_action_outcome_id     in out    outcome.outcome_id%type
)
as

  v_procedure_name            constant system_log.program_name%type := pkg_name || 'sp_move_loc_under_right_jursdn';
  v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


  v_policy_customer_id        object.object_id%type;
  v_plcy_PolicyHCPL           object.object_id%type;
  v_PolicyCommercial          object.object_id%type;
  v_new_jurisdiction_id       object.object_id%type;
  v_address                   object.object_id%type;

  v_all_jurisdiction_list     pkg_os_object.t_object_list;
   v_indexed_jursdctn_list    pkg_os_object.t_object_list;
   v_all_loc_under_wrong_jursdctn pkg_os_object.t_object_list;

    v_list_index              number (12);
    v_state_code number(12) := 0;  --varchar2(10);


begin


    v_policy_customer_id      := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, '21761201.21760901.27360105');




    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Moving Location under right Jurisdiction ID for Customer :' || in_action_object_id
        );

    end if;



    --
    -- Get details of all Jurisdiction under the PolicyCustomer
    --

    v_all_jurisdiction_list.delete;
    v_indexed_jursdctn_list.delete;
    v_all_loc_under_wrong_jursdctn.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        v_policy_customer_id,
        PKG_BASE_CUSTOMER.gObjTypeCustomerJurisdiction,
        v_all_jurisdiction_list,
        null,
        false
    );


    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Jurisdiction Count  :' || v_all_jurisdiction_list.count
        );

    end if;

    v_list_index := v_all_jurisdiction_list.first;

    while v_list_index is not null
    loop

        v_state_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_all_jurisdiction_list( v_list_index ), gbv_CustomerJurisState);

        if v_session_control.gLogging_Full
        then
          pkg_os_logging.sp_log
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... v_all_jurisdiction_list( v_list_index ) :' || v_all_jurisdiction_list( v_list_index ) ||' v_state_code: '||v_state_code
          );
        end if;

        if v_indexed_jursdctn_list.exists( v_state_code )
        then
             if v_session_control.gLogging_Full
             then
               pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...v_indexed_jursdctn_list(v_state_code):' || v_indexed_jursdctn_list(v_state_code) --||' v_state_code: '||v_state_code
                  );
              end if;
              null;

         else

              v_indexed_jursdctn_list(v_state_code) := v_all_jurisdiction_list( v_list_index) ;

              --
              -- Get all the Customer Locations created under the Wrong Jurisdiction
              -- Logic to identify the worng locations needs to driven by the Qualifying Rule
              --

              pkg_os_object_search.sp_object_children_of_type_get
              (
                  in_session_id,
                  in_transaction_id,
                  v_all_jurisdiction_list( v_list_index),
                  pkg_base_customer.gobjtypecustomerlocation,
                  v_all_loc_under_wrong_jursdctn,
                  null,
                  false,
                  9724546
              );


            if v_session_control.gLogging_Full
            then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...Location under Wrong Jurisdiction Count  :' || v_all_loc_under_wrong_jursdctn.count
                );

            end if;

         end if;

         v_list_index := v_all_jurisdiction_list.next( v_list_index );

     end loop;


    v_list_index := v_all_loc_under_wrong_jursdctn.first;

    --
    -- Loop through the Locations under the wrong Jurisdiction and move it
    -- under the Correct Jurisdiction
    --
    if v_session_control.gLogging_Full
            then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...v_list_index  :' || v_list_index
                );

            end if;
    while v_list_index is not null
    loop

        v_address  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_all_loc_under_wrong_jursdctn( v_list_index ), pkg_base_customer.gRef_LocatedAt);
        v_state_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_address, 210419); -- pkg_base_placeholder.gbv_zip);




        if v_indexed_jursdctn_list.exists( v_state_code )
        then

            --
            -- One such  Jurisdiction exist so let us set it as the Parent
            -- for the Location with the wrong parent.
            --

            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_indexed_jursdctn_list( v_state_code ) );

            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code ||' exists in tree: '|| v_indexed_jursdctn_list( v_state_code )
                );

        else


            --
            -- Create Customer Jurisdiction, as there is no such Jurisdiction exist
            --

           -- if v_session_control.gLogging_Full
            --then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code --||v_indexed_jursdctn_list(v_state_code)
                );
               -- end if;

            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 pkg_os_constant.gObjType_CustomerJurisdiction,
                 v_policy_customer_id,
                 v_new_jurisdiction_id
            );
            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Created new Juridiction :'   || v_new_jurisdiction_id
                );

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_jurisdiction_id, gbv_CustomerJurisState, v_state_code);

           if v_session_control.gLogging_Full
           then
             pkg_os_logging.sp_log
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... bv set complete'
                );
           end if;
            --
            -- Add the new Jurisdiction to the Indexed List
            --

           -- v_indexed_jursdctn_list(v_state_code) := v_new_jurisdiction_id ;
            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_new_jurisdiction_id ) ; --v_indexed_jursdctn_list( v_state_code ) );


        end if;  -- Jurisdiction exist


         v_list_index := v_all_loc_under_wrong_jursdctn.next( v_list_index );

     end loop;

     io_action_outcome_id := 22;

end sp_move_loc_under_right_old;

procedure sp_move_loc_under_right_jursdn
(
    in_session_id            in        object.object_id%type,
    in_transaction_id        in        object.object_id%type,
    in_action_object_id      in        object.object_id%type, --bop id
    in_qualification_rule_id in        object_type.object_type_id%type,
    io_object_cache          in out    pkg_os_object_cache.t_object_cache,
    io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name                   constant system_log.program_name%type := pkg_name || 'sp_move_loc_under_right_jursdn';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


     v_policy_customer_id               object.object_id%type;
     v_plcy_PolicyHCPL                  object.object_id%type;
     v_PolicyCommercial                 object.object_id%type;
     v_new_jurisdiction_id              object.object_id%type;
     v_address                          object.object_id%type;

     v_all_jurisdiction_list            pkg_os_object.t_object_list;
     v_indexed_jursdctn_list            pkg_os_object.t_object_list;
     v_all_loc_under_wrong_jursdctn     pkg_os_object.t_object_list;

     v_list_index                       number (12);
     v_state_code                       number(12) := 0;  --varchar2(10);

     v_new_bop_jurisdiction_id          object.object_id%type;
     --v_all_bop_jurisdiction_list    pkg_os_object.t_object_list;
     v_policy_bop_loc_id                object.object_id%type;
     v_policy_bop_jurs_state_code       number(12);
     v_covered_loc_state_code           number(12);

     v_loc_jurs_state_code              number(12);
     v_loc_covered_loc_id               object.object_id%type;
     v_policy_bop_id                    object.object_id%type;
     v_bop_juris_list_index             number(12);
     v_covered_juris_id                 object.object_id%type;
     v_policy_commercial_id             object.object_id%type;
     v_loc_node_under_wrong_jursdn      object.object_id%type;
     v_placeholder_jursdn_node          object_bv_value.business_variable_value%type;
begin


    --v_policy_customer_id      := in_customer_objt_id;
    v_policy_bop_id           := in_action_object_id;
    v_policy_customer_id      := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, in_action_object_id, '21761201.21760901.27360105');


    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Moving Location under right Jurisdiction ID for PolicyBOP :' || v_policy_bop_id
        );

    end if;



    --
    -- Get details of all Jurisdiction under the PolicyCustomer
    --

    v_all_jurisdiction_list.delete;
    v_indexed_jursdctn_list.delete;
    v_all_loc_under_wrong_jursdctn.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        v_policy_bop_id,
        370801, --BOP Jurisdiction
        v_all_jurisdiction_list,
        null,
        false
    );


    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Jurisdiction Count  :' || v_all_jurisdiction_list.count
        );

    end if;

    v_list_index := v_all_jurisdiction_list.first;

    while v_list_index is not null
    loop

        v_state_code := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_all_jurisdiction_list( v_list_index ), '21807501.21768101');

        if v_session_control.gLogging_Full
        then
          pkg_os_logging.sp_log
          (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... v_all_jurisdiction_list( v_list_index ) :' || v_all_jurisdiction_list( v_list_index ) ||' v_state_code: '||v_state_code
          );
        end if;

        if v_indexed_jursdctn_list.exists( v_state_code )
        then
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...v_indexed_jursdctn_list(v_state_code):' || v_indexed_jursdctn_list(v_state_code) --||' v_state_code: '||v_state_code
                  );

              null;
          end if;
         else

              v_indexed_jursdctn_list(v_state_code) := v_all_jurisdiction_list( v_list_index) ;

              --
              -- Get all the Customer Locations created under the Wrong Jurisdiction
              -- Logic to identify the worng locations needs to driven by the Qualifying Rule
              --

              pkg_os_object_search.sp_object_children_of_type_get
              (
                  in_session_id,
                  in_transaction_id,
                  v_all_jurisdiction_list( v_list_index),
                  370901, --pkg_base_customer.gobjtypecustomerlocation,
                  v_all_loc_under_wrong_jursdctn,
                  null,
                  false,
                  9724546
              );


            if v_session_control.gLogging_Full
            then

                pkg_os_logging.sp_log
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...Location under Wrong Jurisdiction Count  :' || v_all_loc_under_wrong_jursdctn.count
                );

            end if;

         end if;

         v_list_index := v_all_jurisdiction_list.next( v_list_index );

     end loop;


    v_list_index := v_all_loc_under_wrong_jursdctn.first;

    --
    -- Loop through the Locations under the wrong Jurisdiction and move it
    -- under the Correct Jurisdiction
    --
    --if v_session_control.gLogging_Full
      --      then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...v_list_index  :' || v_list_index
                );

        --    end if;
    while v_list_index is not null
    loop

        --v_address  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_all_loc_under_wrong_jursdctn( v_list_index ), pkg_base_customer.gRef_LocatedAt);
        --v_state_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_address, 210419); -- pkg_base_placeholder.gbv_zip);
        v_state_code  := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_all_loc_under_wrong_jursdctn( v_list_index ), '21805901.29254314.210419') ;




        if v_indexed_jursdctn_list.exists( v_state_code )
        then

            --
            -- One such  Jurisdiction exist so let us set it as the Parent
            -- for the Location with the wrong parent.
            --

            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_indexed_jursdctn_list( v_state_code ) );


               v_loc_covered_loc_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ), 21805901); --_Reference_Covered Location
               v_covered_juris_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_indexed_jursdctn_list( v_state_code ), 21807501) ;--_Reference_Covered Jurisdiction

               pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_loc_covered_loc_id,v_covered_juris_id);

               v_loc_node_under_wrong_jursdn := pkg_os_object_io.fn_object_ref_owner_get(in_session_id, in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ), 21692901); --ObjectTreeNode  _Reference_AssociatedObject
               v_placeholder_jursdn_node     := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_indexed_jursdctn_list( v_state_code ), 21692901); --ObjectTreeNode   _Reference_AssociatedObject
               pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_loc_node_under_wrong_jursdn,v_placeholder_jursdn_node);

            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code ||' exists in tree: '|| v_indexed_jursdctn_list( v_state_code )
                  ||' v_loc_node_under_wrong_jursdn: '||v_loc_node_under_wrong_jursdn||' v_placeholder_jursdn_node: '||v_placeholder_jursdn_node
                );

        else


            --
            -- Create Customer Jurisdiction, as there is no such Jurisdiction exist
            --

           -- if v_session_control.gLogging_Full
            --then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code --||v_indexed_jursdctn_list(v_state_code)
                );
               -- end if;

                pkg_os_object.sp_object_create
                 (
                      in_session_id,
                      in_transaction_id,
                      370801, --BOP Jurisdiction
                      v_policy_bop_id,
                      v_new_bop_jurisdiction_id
                 );


            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 pkg_os_constant.gObjType_CustomerJurisdiction,
                 v_policy_customer_id,
                 v_new_jurisdiction_id
            );

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_bop_jurisdiction_id, 21807501, v_new_jurisdiction_id); --_Reference_Covered Jurisdiction

            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Created new Juridiction :'   || v_new_jurisdiction_id
                );

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_jurisdiction_id, gbv_CustomerJurisState, v_state_code);

           if v_session_control.gLogging_Full
           then
             pkg_os_logging.sp_log
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... bv set complete'
                );
            end if;
            --
            -- Add the new Jurisdiction to the Indexed List
            --

           -- v_indexed_jursdctn_list(v_state_code) := v_new_jurisdiction_id ;
            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_new_bop_jurisdiction_id ) ; --v_indexed_jursdctn_list( v_state_code ) );
            v_loc_covered_loc_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ), 21805901); --_Reference_Covered Location
            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_loc_covered_loc_id,v_new_jurisdiction_id);

            --
            --Create new node for jurisdiction and move location node underneath...
            --
            pkg_base_placeholder.sp_placeholder_create
               (
                    in_session_id,
                    in_transaction_id,
                    io_object_cache,
                    v_new_bop_jurisdiction_id,
                    370801, --BOP Jurisdiction
                    io_action_outcome_id,
                    in_action_object_id
               );

               v_loc_node_under_wrong_jursdn := pkg_os_object_io.fn_object_ref_owner_get(in_session_id, in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ), 21692901); --ObjectTreeNode  _Reference_AssociatedObject
               v_placeholder_jursdn_node     := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject);
               pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_loc_node_under_wrong_jursdn,v_placeholder_jursdn_node);

               if v_session_control.gLogging_Full
               then
                 pkg_os_logging.sp_log
                 (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_loc_node_under_wrong_jursdn: '||v_loc_node_under_wrong_jursdn
                  ||' v_placeholder_jursdn_node: '||v_placeholder_jursdn_node
                 );
               end if;

        end if;  -- Jurisdiction exist


         v_list_index := v_all_loc_under_wrong_jursdctn.next( v_list_index );

     end loop;

     io_action_outcome_id := 22;

end sp_move_loc_under_right_jursdn;

/*
procedure sp_move_loc_under_incorrect
(
    in_session_id            in        object.object_id%type,
    in_transaction_id        in        object.object_id%type,
    in_action_object_id      in        object.object_id%type, --v_policy_bop_loc_id
    in_qualification_rule_id in        object_type.object_type_id%type,
    io_object_cache          in out    pkg_os_object_cache.t_object_cache,
    io_action_outcome_id     in out    outcome.outcome_id%type
)
as

  v_procedure_name            constant system_log.program_name%type := pkg_name || 'sp_move_loc_under_right_jursdn';
  v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;


  v_policy_customer_id        object.object_id%type;
  v_plcy_PolicyHCPL           object.object_id%type;
  v_PolicyCommercial          object.object_id%type;
  v_new_jurisdiction_id       object.object_id%type;
  v_address                   object.object_id%type;

  v_all_jurisdiction_list     pkg_os_object.t_object_list;
   v_indexed_jursdctn_list    pkg_os_object.t_object_list;
   v_all_loc_under_wrong_jursdctn pkg_os_object.t_object_list;

    v_list_index                   number (12);
    v_state_code                   number(12) := 0;  --varchar2(10);
    v_new_Bop_jurisdiction_id      object.object_id%type;
    v_all_bop_jurisdiction_list    pkg_os_object.t_object_list;
     v_policy_bop_loc_id           object.object_id%type;
     v_policy_bop_jurs_state_code  number(12);
     v_covered_loc_state_code      number(12);

     v_loc_jurs_state_code         number(12);
     v_loc_covered_loc_id          object.object_id%type;
     v_policy_bop_id               object.object_id%type;
     v_bop_juris_list_index         number(12);
     v_covered_juris_id            object.object_id%type;

begin


    v_policy_bop_loc_id      := in_action_object_id;
     v_loc_jurs_state_code := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_policy_bop_loc_id, '21806301.21807501.21768101');
     v_covered_loc_state_code:=  pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_policy_bop_loc_id, '21805901.29254314.210419');
     v_loc_covered_loc_id     := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_policy_bop_loc_id, '21805901.29254314');

     if v_policy_bop_jurs_state_code != v_covered_loc_state_code
     then

          v_all_bop_jurisdiction_list.delete;
          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               v_policy_bop_id,
               370801, --BOP Jurisdiction
               v_all_bop_jurisdiction_list,
               null,
               false
          );

          v_bop_juris_list_index := v_all_bop_jurisdiction_list.first;
          while v_bop_juris_list_index is not null
          loop
               v_policy_bop_jurs_state_code := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_all_bop_jurisdiction_list(v_bop_juris_list_index), '21807501.21768101');

               if v_policy_bop_jurs_state_code = v_covered_loc_state_code
               then
                    pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_policy_bop_loc_id,v_all_bop_jurisdiction_list(v_bop_juris_list_index)) ;
                    v_covered_juris_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_all_bop_jurisdiction_list(v_bop_juris_list_index), '29254314');
                    pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_loc_covered_loc_id,v_covered_juris_id) ;

               end if;

               v_bop_juris_list_index := v_all_bop_jurisdiction_list.next(v_bop_juris_list_index);

          end loop;


     else
          --do nothing
          null;

    end if;

    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Moving Location : ' || v_policy_bop_loc_id ||' under right Jurisdiction ID'
        );

    end if;



    --
    -- Get details of all Jurisdiction under the PolicyCustomer
    --

    v_all_jurisdiction_list.delete;
    v_indexed_jursdctn_list.delete;
    v_all_loc_under_wrong_jursdctn.delete;

    pkg_os_object_search.sp_object_children_of_type_get
    (
        in_session_id,
        in_transaction_id,
        v_policy_bop_id,
        370801, --BOP Jurisdiction
        v_all_bop_jurisdiction_list,
        null,
        false
    );


    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Jurisdiction Count  :' || v_all_jurisdiction_list.count
        );

    end if;

    v_bop_juris_list_index := v_all_bop_jurisdiction_list.first;

    while v_bop_juris_list_index is not null
    loop

        --v_state_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_all_jurisdiction_list( v_list_index ), gbv_CustomerJurisState);
        v_state_code := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,  v_bop_juris_list_index( v_bop_juris_list_index ), '21806301.21807501.21768101');

        pkg_os_logging.sp_log
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... v_bop_juris_list_index( v_bop_juris_list_index ) :' || v_bop_juris_list_index( v_bop_juris_list_index ) ||' v_state_code: '||v_state_code
        );

        if v_all_bop_jurisdiction_list.exists( v_state_code )
        then

               pkg_os_logging.sp_log
                  (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...v_indexed_jursdctn_list(v_state_code):' || v_indexed_jursdctn_list(v_state_code) --||' v_state_code: '||v_state_code
                  );

              null;

         else

              v_indexed_jursdctn_list(v_state_code) := v_all_jurisdiction_list( v_list_index) ;

              --
              -- Get all the Customer Locations created under the Wrong Jurisdiction
              -- Logic to identify the worng locations needs to driven by the Qualifying Rule
              --

              pkg_os_object_search.sp_object_children_of_type_get
              (
                  in_session_id,
                  in_transaction_id,
                  v_all_jurisdiction_list( v_list_index),
                  pkg_base_customer.gobjtypecustomerlocation,
                  v_all_loc_under_wrong_jursdctn,
                  null,
                  false,
                  9724546
              );


            if v_session_control.gLogging_Full
            then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...Location under Wrong Jurisdiction Count  :' || v_all_loc_under_wrong_jursdctn.count
                );

            end if;

         end if;

         v_list_index := v_all_jurisdiction_list.next( v_list_index );

     end loop;


    v_list_index := v_all_loc_under_wrong_jursdctn.first;

    --
    -- Loop through the Locations under the wrong Jurisdiction and move it
    -- under the Correct Jurisdiction
    --
    if v_session_control.gLogging_Full
            then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...v_list_index  :' || v_list_index
                );

            end if;
    while v_list_index is not null
    loop

        v_address  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_all_loc_under_wrong_jursdctn( v_list_index ), pkg_base_customer.gRef_LocatedAt);
        v_state_code := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  v_address, 210419); -- pkg_base_placeholder.gbv_zip);




        if v_indexed_jursdctn_list.exists( v_state_code )
        then

            --
            -- One such  Jurisdiction exist so let us set it as the Parent
            -- for the Location with the wrong parent.
            --

            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_indexed_jursdctn_list( v_state_code ) );

            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code ||' exists in tree: '|| v_indexed_jursdctn_list( v_state_code )
                );

        else


            --
            -- Create Customer Jurisdiction, as there is no such Jurisdiction exist
            --

           -- if v_session_control.gLogging_Full
            --then

                pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... v_state_code :'   || v_state_code --||v_indexed_jursdctn_list(v_state_code)
                );
               -- end if;

            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 370801 , --pkg_os_constant.gObjType_BOPJurisdiction,
                 v_policy_customer_id,
                 v_new_Bop_jurisdiction_id
            );
            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 pkg_os_constant.gObjType_CustomerJurisdiction,
                 v_policy_customer_id,
                 v_new_jurisdiction_id
            );
            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_Bop_jurisdiction_id, 21807501, v_new_jurisdiction_id); --_Reference_Covered Jurisdiction


            pkg_os_logging.sp_log_core
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Created new Juridiction :'   || v_new_jurisdiction_id
                );


            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_jurisdiction_id, gbv_CustomerJurisState, v_state_code);
           pkg_os_logging.sp_log
                (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... bv set complete'
                );

            --
            -- Add the new Jurisdiction to the Indexed List
            --

           -- v_indexed_jursdctn_list(v_state_code) := v_new_jurisdiction_id ;

            pkg_os_object.sp_object_parent_set( in_session_id,in_transaction_id,v_all_loc_under_wrong_jursdctn( v_list_index ),v_new_jurisdiction_id ) ; --v_indexed_jursdctn_list( v_state_code ) );


        end if;  -- Jurisdiction exist


         v_list_index := v_all_loc_under_wrong_jursdctn.next( v_list_index );

     end loop;


     io_action_outcome_id := 22;

end sp_move_loc_under_incorrect;
*/
----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_hcpl_custactvty_add_wrk_loc
--
--  %USAGE
--    The procedure creates a new PolicyHCPLCustomerActivity object.
--    Create a new location under the Primary Jurisdiction.
--    At this point, we don't know which PolicyPRLCustomerJurisdiction,once the user provides the Location Address,
--    we need to determine if we need to create new instance of PolicyPRLCustomerJurisdiction and PolicyPRLCustomerLocation
--    objects also need to be created, with references to the appropriate CustomerJurisdiction or CustomerLocation.
--
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM  in_object_id             Object ID
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_object_cache          Object Cache
--          in_action_object_id      Peer Object Id
--          in_action_object_type_id Peer Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_hcpl_custactvty_add_wrk_loc
(
    in_session_id            in        object.object_id%type,
    in_transaction_id        in        object.object_id%type,
    in_action_object_id      in        object.object_id%type,
    in_action_object_type_id in        object_type.object_type_id%type,
    io_object_cache          in out    pkg_os_object_cache.t_object_cache,
    io_action_outcome_id     in out    outcome.outcome_id%type
)
as

  v_procedure_name            constant system_log.program_name%type := pkg_name || 'sp_hcpl_custactvty_add_wrk_loc';
  v_session_control           pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

  v_ptp_id                    object.object_id%type;
  v_customer_address_id       object.object_id%type;
  v_customer_location_id      object.object_id%type;
  v_plcyprljurisdiction_id    object.object_id%type;
  v_policyprllocation_id      object.object_id%type;
  v_policy_customer_id        object.object_id%type;
  v_customer_juris_id         object.object_id%type;
  v_location_seq_num          object.object_id%type;
  v_plcy_PolicyHCPL           object.object_id%type;
  v_PolicyCommercial          object.object_id%type;
  v_hcplcustomeractivity      object.object_id%type;



begin

    v_ptp_id                  := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
    v_policy_customer_id      := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);
    v_customer_juris_id       := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_customer_id, 211194);
    v_PolicyCommercial        := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCommercial);
    v_plcy_PolicyHCPL         := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_PolicyCommercial, gObjType_PolicyHCPL);

    v_plcyprljurisdiction_id  := pkg_os_object_io.fn_object_ref_owner_get(in_session_id,in_transaction_id, v_customer_juris_id,gbv_RefPRLCoveredJurstn);


    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating new Location using PTP ID:' || v_ptp_id ||
          ' PolicyCustomer:'                        || v_policy_customer_id ||
          ' PolicyPRLJurisdiction:'                 || v_plcyprljurisdiction_id   ||
          ' CustomerJurisdiction:'                  || v_customer_juris_id ||
          ' PolicyHCPL : '                          || v_plcy_PolicyHCPL
        );

    end if;



    --
    -- Create a new instance of PolicyHCPLCustomerActivity as child of  PolicyHCPL
    --

    pkg_os_object.sp_object_create(in_session_id, in_transaction_id, 3196446, v_plcy_PolicyHCPL, v_hcplcustomeractivity);


    --
    -- Create CustomerLocation as child of CustomerJurisdiction, this will create adddress details also
    --

    pkg_base_placeholder.sp_placeholder_create
    (
        in_session_id,
        in_transaction_id,
        io_object_cache,
        v_customer_juris_id,
        gObjType_CustomerLocation,
        io_action_outcome_id
    );

    v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject);


    --
    -- PolicyPRLJurisdiction
    --

    if v_plcyprljurisdiction_id is null
    then

        pkg_base_placeholder.sp_placeholder_create
        (
            in_session_id,
            in_transaction_id,
            io_object_cache,
            v_plcy_PolicyHCPL,
            gObjType_PolicyPRLJurisdiction,
            io_action_outcome_id
        );

        v_plcyprljurisdiction_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject);
        pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_plcyprljurisdiction_id, gbv_RefPRLCoveredJurstn, v_customer_juris_id);

    end if;

    --
    -- Create PolicyPRLLocation as child of PolicyPRLJurisdiction
    --

   pkg_base_placeholder.sp_placeholder_create
    (
        in_session_id,
        in_transaction_id,
        io_object_cache,
        v_plcyprljurisdiction_id,
        gObjType_PolicyPRLLocation,
        io_action_outcome_id

    );
  v_policyprllocation_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject);
 -- pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_PolicyPRLLocation, v_plcyprljurisdiction_id, v_policyprllocation_id);

      --
    -- Set PolicyPRLLocation._Reference_Covered Location
    --

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policyprllocation_id, gbv_RefPRLCoveredLoc, v_customer_location_id);

    --
    -- Set Location Sequence Number
    --
    v_location_seq_num := fn_max_location_sequence_get(v_ptp_id) + 1;

    --
    -- Set PolicyPRLCustomerActivity._Reference_Customer Activity Location
    --

   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_hcplcustomeractivity, gbv_RefCustActivityLoc, v_customer_location_id);
   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_hcplcustomeractivity, gbv_RefCustActivityJurstn, v_customer_juris_id);

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policyprllocation_id, gbv_GenericSequenceNumber, v_location_seq_num );
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_policyprllocation_id );
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

    if v_session_control.gLogging_Full
    then

        pkg_os_logging.sp_log_core
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Created new PolicyPRLLocation:'   || v_policyprllocation_id ||
           ' Sequence number:'                   || v_location_seq_num
        );

   end if;



end sp_hcpl_custactvty_add_wrk_loc;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_vehicle_tree_validate
--
--   %USAGE
--        Creates a mini-tree and parent mini-trees for Location and Jurisdiction
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_session_id            Session ID
--   %PARAM    in_transaction_id        Transaction ID
--   %PARAM    io_object_cache          Object Cache ID
--   %PARAM    io_message_list          Message List
--   %PARAM    in_action_id             Action ID
--   %PARAM    in_action_object_id      Action Object ID
--   %PARAM    in_action_object_type_id Action Object Type ID
--   %PARAM    io_action_outcome_id     Action Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_vehicle_tree_validate
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_vehicle_tree_validate';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_tree_id   object.object_id%type;
     v_vehicle_object_type object_type.object_type_id%type;

     v_tree_load_action    action.action_id%type;
     v_quote_or_nb_ind      char(1);
     v_policy_trx_type      object.object_id%type;

     v_vehicle_sequence    integer := 1;

     v_referral_outcome_id   outcome.outcome_id%type;
     v_object_uwalerts_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_datamart_tf          char(1);

     v_vehicle_page_is_valid_tf char(1);

     v_vehicle_node_status_id      integer;

     -- Select vehicles that are included
     cursor cur_vehicle_schedule
     is
     select
          d.VEHICLE_SCHEDULE_ID,
          d.GARAGED_JURIS_NAME ||
               (case when d.GARAGED_LOCATION_NAME is not null then ', ' || d.GARAGED_LOCATION_NAME else null end) ||
               d.VEHICLE_MAKE || '-' || d.VEHICLE_MODEL || '-' || d.VEHICLE_YEAR as vehicle_name,
          (count(*) over()) as total_count
     from
          dragon_vehicle_schedule d
     where
          d.ptp_id = in_action_object_id
/*
     and
          d.lob_selected_ind is not null
     and (
               ( d.GARAGED_LOCATION_ID is not null and d.GARAGED_LOCATION_INCLUDE_TF = 'Yes' )
               or
               ( d.GARAGED_JURIS_ID is not null and d.GARAGED_JURIS_INCLUDE_TF = 'Yes' )
          )
*/
     and
          nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> gObjState_GlobalUpdateTemplate    -- Exclude Template Objects
     and 
           nvl(d.object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed		 
     order by d.VEHICLE_SCHEDULE_ID;

begin

     pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
          '..... Starting Vehicle Validation' );

     -- 3rd, for each 'Covered' vehicle, build a new tree
     for c1 in cur_vehicle_schedule
     loop

          pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               '..... Validating Vehicle: ' || v_vehicle_sequence || ' of ' || c1.total_count || ' - ' || c1.vehicle_name );

          --v_tree_load_action := null;

          v_vehicle_object_type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, c1.vehicle_schedule_id);

          if ( v_vehicle_object_type = gObjType_PolCABAJurisdiction )      -- PolicyCABAJurisdiction
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 1303878;  --CL_PolicyCAJurisdiction_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 1303978;  --CL_PolicyCAJurisdiction_PNBT_MiniTreeLoad_DB

               end if;
/*
          elsif ( v_vehicle_object_type = gObjType_PolCABALocation) -- PolicyCABALocation
          then

               if (v_quote_or_nb_ind = 'T')
               then

                    v_tree_load_action := 859146;      -- CL_PolicyCFLocation_Quote_MiniTreeLoad_DB

               else

                    v_tree_load_action := 871646;      -- CL_PolicyCFLocation_PNBT_MiniTreeLoad_DB

               end if;
*/
          elsif( v_vehicle_object_type = gObjType_PolCABAVehicle)
          then

               /*v_vehicle_page_is_valid_tf := 'T';

               v_vehicle_page_is_valid_tf := pkg_os_tree_validation.fn_node_validate_mandatory
               (
                    in_session_id,
                    in_transaction_id,
                    c1.vehicle_schedule_id,
                    734746, -- CL_PolicyCABAVehicleCoverage_VehicleEdit_PG,
                    io_message_list,
                    'F'    -- in_set_default_tf
               );

               pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
                    '..... Validating Mandatoriness of Vehicle Detail Page for Vehicle: ' || c1.vehicle_schedule_id ||
                    ' Status: ' || v_vehicle_page_is_valid_tf );

               if(v_vehicle_page_is_valid_tf = 'T')
               then

                    -- Validate the vehicle detail page
                    v_vehicle_page_is_valid_tf := pkg_os_wf_rules.fn_semantic_check_rules
                    (
                         in_session_id,
                         in_transaction_id,
                         io_object_cache,
                         734746, -- CL_PolicyCABAVehicleCoverage_VehicleEdit_PG,
                         null,  -- v_context_action_id,
                         c1.vehicle_schedule_id,
                         io_message_list,
                         pkg_os_constant.gActiRuleTime_Post
                    );

                    pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
                         '..... Validating Semantics of Vehicle Detail Page for Vehicle: ' || c1.vehicle_schedule_id ||
                         ' Status: ' || v_vehicle_page_is_valid_tf );

               end if;

               if(v_vehicle_page_is_valid_tf = 'T')
               then
                    v_vehicle_node_status_id := pkg_os_tree_completion.gTreeNodeGreen;
               else
                    v_vehicle_node_status_id := pkg_os_tree_completion.gTreeNodeRed;
               end if;

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, c1.vehicle_schedule_id, 33885778, v_vehicle_node_status_id);*/
			   
			   if (v_quote_or_nb_ind = 'T')
           then

                v_tree_load_action := 3417748;  --AL_PolicyCABAVehicle_LoadMiniTree_DB 

           else

                v_tree_load_action := 3417748;  --AL_PolicyCABAVehicle_LoadMiniTree_DB 

           end if;

          end if;

          --
          --   Get the PolicyTree from the Session Tree as this BV will be used in various tree related algorithms...
          --

          v_policy_tree_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               pkg_os_constant_bv.gbv_SessionCurrentTree
          );

          --
          -- Build tree and perform tree completion.
          --

          --if(v_tree_load_action is not null)
         -- then

               pkg_os_tree.sp_minitree_load
               (
                    in_session_id,
                    in_transaction_id,
                    io_object_cache,
                    io_message_list,
                    v_tree_load_action,
                    c1.vehicle_schedule_id,
                    v_vehicle_object_type,
                    io_action_outcome_id,
                    'T'             
               );

         -- end if;

          v_vehicle_sequence :=  v_vehicle_sequence + 1;
           pkg_os_object_cache_io.sp_index_object_cache_clear( in_session_id, in_transaction_id );
          pkg_os_object_io.sp_object_path_cache_clear;
          pkg_os_object_io.sp_bv_value_cache_clear(in_session_id, in_transaction_id, false );

     end loop;
	 
	 pkg_os_tree_completion.sp_validate_trees
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          in_action_id,
          in_action_object_id,
          in_action_object_type_id,
          io_action_outcome_id,
          'T'             -- in_affected_trees_tf
     );

     -- If Tree is Incomplete, return this Outcome.
     if ( io_action_outcome_id = 8201 )
     then

          io_action_outcome_id := greatest(v_referral_outcome_id, pkg_os_constant.gOutcome_OK);

     end if;

exception
     when others then
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Error encountered while validating all vehicle schedule trees for object:' || in_action_object_id || ' Error: ' ||sqlerrm
          );

          raise;

end sp_vehicle_tree_validate;



function fn_get_child_tree(  in_session_id object.object_id%type ,
                             in_transaction_id object.object_id%type ,
                             in_object_id object.object_id%type )
return object.object_id%type

is
  v_procedure_nm varchar2(100):= 'fn_get_child_tree';
  v_object_type object.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                                                               in_transaction_id => in_transaction_id,
                                                                               in_object_id      => in_object_id);
  --v_child_node_id object_tree_node.OBJECT_TREE_NODE_ID%type;
  v_PTP_ID  object.object_id%type := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id ,
                                                                         in_transaction_id => in_transaction_id,
                                                                         in_object_id      => in_object_id);
  v_mater_tree_id  object.object_id%type := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                                              in_transaction_id        => in_transaction_id,
                                                                              in_tree_driver_object_id => v_PTP_ID,
                                                                              in_tree_definition_id    => 201 );
  v_child_tree_id object.object_id%type;
  v_parent_tree_id object.object_id%type;
begin

   v_parent_tree_id := pkg_os_object_search.fn_object_11_child_get(in_session_id           => in_session_id,
                                              in_transaction_id       => in_transaction_id,
                                              in_parent_object_id     => in_object_id,
                                              in_child_object_type_id => 425);
  /*if v_object_type = 2191505 then  --PolicyCFLocation
    v_child_node_id := 85605;
  elsif v_object_type = 2191405 then --PolicyCFJurisdiction
    v_child_node_id := 85805;
  end if;*/
  begin

    select  min(tree_id) into v_child_tree_id
    from tree_mini_tree_details ttn where  ttn.master_tree_id = v_mater_tree_id
    and ttn.parent_tree_id= v_parent_tree_id
    and ttn.tree_completeness_status='Incomplete';

   if v_child_tree_id is null then

      select  min(tree_id) into v_child_tree_id
      from tree_mini_tree_details ttn where  ttn.master_tree_id = v_mater_tree_id
      and  ttn.parent_tree_id= v_parent_tree_id
      and  ttn.tree_completeness_status='NotQuiteComplete';


      if v_child_tree_id is null then

        select  min(tree_id) into v_child_tree_id
        from tree_mini_tree_details ttn where  ttn.master_tree_id = v_mater_tree_id
        and  ttn.parent_tree_id= v_parent_tree_id
        and ttn.tree_completeness_status='Complete';

      end if;
      -- when all chidren are green set to self
      if v_child_tree_id is null then
         v_child_tree_id := v_parent_tree_id;
      end if;
   end if;

  Exception
    when others then
       pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_nm , 'Error getting child tree for:'||in_object_id|| SQLERRM);
  end;

  return v_child_tree_id;

end fn_get_child_tree;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_max_vehicle_sequence_get
--
--  %USAGE
--      The Vehicle Sequence number is unique within its POLICYCAU object
--     This function returns the maximum vehicle Sequence number
--      for the given Policy from the datamart.
--
--      Note: Getting the max sequence number from a datamart will be expensive after a certain period of time,
--      especially for  LS quotes/policies.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM

--      in_policycau_id      Policy Commercial auto Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_max_vehicle_sequence_get
(

     in_policycau_id       in    object.object_id%type
)
return number
is

     v_return_value          number;

begin
     -- Get the _ChildCount_PolicyCAUVehicle Count from PolicyCAU
     -- This will ensure that we get a unique sequence number within a PolicyCAU

     v_return_value := pkg_os_object.fn_object_children_count_get(in_policycau_id, gObjType_PolicyCAUVehicle);

     return v_return_value;

end fn_max_vehicle_sequence_get;

----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_clone_commercial_auto
--
--  %USAGE
--      Duplicate incoming vehicle object

--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM

--      in_action_object_id      Policy Commercial auto Vehicle Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clone_commercial_auto(in_session_id in object.object_id%type,
                        in_transaction_id  in object.object_id%type,
                        in_action_object_id   in object.object_id%type,
                        io_action_outcome_id in out outcome.outcome_id%type)
 as
    v_new_CAU_Vehicle  object.object_id%type;

    v_parent_PolicyCAU object.object_id%type;

    v_auto_sequence        number;

    v_datamart_tf          char(1);

    v_procedure_name varchar2(100):= pkg_name || 'sp_clone_commercial_auto';

    v_parent_object_type_id      object_type.object_type_id%type;
    v_action_object_type_id      object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);

  begin

    pkg_os_object_copy.sp_object_duplicate(in_session_id                 => in_session_id ,
                                           in_transaction_id             => in_transaction_id,
                                           in_from_object_id             => in_action_object_id,
                                           out_duplicate_object_id       => v_new_CAU_Vehicle,
                                           in_copy_premium_recs_tf       => 'F',
                                           in_resolve_task_references_tf => 'F');


    v_parent_PolicyCAU := pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             in_action_object_id);
    v_parent_object_type_id:= pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_parent_PolicyCAU);
    pkg_os_object.sp_object_parent_set(in_session_id,
                                       in_transaction_id,
                                       v_new_CAU_Vehicle,
                                       v_parent_PolicyCAU);

    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      in_session_id,
                                      pkg_os_constant_bv.gbv_SessionNewObject,
                                      v_new_CAU_Vehicle);

    v_auto_sequence := fn_max_vehicle_sequence_get( v_parent_PolicyCAU) ;

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_CAU_Vehicle, gbv_GenericSequenceNumber, v_auto_sequence);
   --pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_CAU_Vehicle, pkg_os_constant_bv.gbv_GenObjInstanceNumber , v_auto_sequence);
    v_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_parent_PolicyCAU );
    pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_new_CAU_Vehicle,
                                           v_action_object_type_id, v_parent_PolicyCAU, v_parent_object_type_id);

    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_CAU_Vehicle, v_datamart_tf);

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
   exception
     when others then
        pkg_os_logging.sp_log_error(in_session_id,in_transaction_id,v_procedure_name,'Error cloning vehicle'||SQLERRM);
        raise;
 end sp_clone_commercial_auto;


procedure sp_update_ls_customer_dm(in_session_id in object.object_id%type,
                                    in_transaction_id in object.object_id%type,
                                    in_object_id in object.object_id%type ,
                                    io_action_outcome_id in out outcome.outcome_id%type)
is
  v_ptp_id   object.object_id%type;
  v_customer_id object.object_id%type;
  v_customer_object_list pkg_os_object.t_object_list;
  v_location_object_list  pkg_os_object.t_object_list;
  v_building_object_list  pkg_os_object.t_object_list;
  v_object_list   pkg_os_object.t_object_list;
  io_datamart_tf char(1);
  v_program_name varchar2(100);
begin

  v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id ,
                                                  in_transaction_id => in_transaction_id ,
                                                  in_object_id      => in_object_id);

 v_customer_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_ptp_id, gbv_customer_object_path );

 -- get list of all jurisdiction
 pkg_os_object_search.sp_object_children_of_type_get( in_session_id  => in_session_id ,
                                                      in_transaction_id => in_transaction_id ,
                                                      in_object_id => v_customer_id ,
                                                      in_child_object_type_id   => pkg_os_constant.gObjType_CustomerJurisdiction,
                                                      in_object_list   => v_customer_object_list);
 for i in 1..v_customer_object_list.count loop

   pkg_os_logging.sp_log_info(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_program_name => v_program_name,
                              in_log_description => ' Updating datamart for customer:'||v_customer_object_list(i));

   pkg_os_datamart.sp_datamart_update_row(in_session_id     => in_session_id,
                                          in_transaction_id => in_transaction_id,
                                          in_object_id      => v_customer_object_list(i),
                                          io_datamart_tf    => io_datamart_tf) ;
   -- get list of all location
   v_location_object_list.delete;
   pkg_os_object_search.sp_object_children_of_type_get( in_session_id  => in_session_id ,
                                                      in_transaction_id => in_transaction_id ,
                                                      in_object_id => v_customer_object_list(i) ,
                                                      in_child_object_type_id   => pkg_os_constant.gObjType_CustomerLocation,
                                                      in_object_list   => v_location_object_list);
    for j in 1..v_location_object_list.count loop

      pkg_os_logging.sp_log_info(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_program_name => v_program_name,
                              in_log_description => ' Updating datamart for location:'||v_location_object_list(j));
      pkg_os_datamart.sp_datamart_update_row(in_session_id     => in_session_id,
                                            in_transaction_id => in_transaction_id,
                                            in_object_id      => v_location_object_list(j),
                                            io_datamart_tf    => io_datamart_tf) ;

      --get all buildings 
      v_building_object_list.delete;
      pkg_os_object_search.sp_object_children_of_type_get( in_session_id  => in_session_id ,
                                                      in_transaction_id => in_transaction_id ,
                                                      in_object_id => v_location_object_list(j) , 
                                                      in_child_object_type_id   => pkg_os_constant.gObjType_CustomerBuilding,
                                                      in_object_list   => v_building_object_list);     
      for k in 1..v_building_object_list.count loop 
        pkg_os_logging.sp_log_info(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_program_name => v_program_name,
                              in_log_description => ' Updating datamart for Building:'||v_building_object_list(k));
        pkg_os_datamart.sp_datamart_update_row(in_session_id     => in_session_id,
                                            in_transaction_id => in_transaction_id,
                                            in_object_id      => v_building_object_list(k),
                                            io_datamart_tf    => io_datamart_tf) ;           
      end loop;

    end loop;

 end loop;

  v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolicyCFJurisdiction,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
  
  v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolicyCFLocation,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
          
  v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolicyCFBuilCoverage,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
  
 -- Added for GL product
 v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolGLJurisLiabltyCov,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_logging.sp_log_info(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_program_name => v_program_name,
                              in_log_description => ' Updating datamart for GL Juri:'||v_object_list(i));             
            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
  
  v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolGLLocLiabltyCov,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
          
  v_object_list.delete;
  pkg_os_object_search.sp_object_children_of_type_get
  (
       in_session_id,
       in_transaction_id,
       v_ptp_id,
       gObjType_PolGLBuildLiabltyCov,
       v_object_list
  );
  if ( v_object_list.count > 0 )
  then

       for i in v_object_list.first..v_object_list.last
       loop

            pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_list(i), io_datamart_tf);

       end loop;

  end if;  
 io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_update_ls_customer_dm;


function fn_get_customer_jurisdiction(in_session_id in object.object_id%type,
                                in_transaction_id in object.object_id%type,
                                in_ptp_id     in object.object_id%type,
                                in_customer_id in object.object_id%type,
                                in_jurisdiction_text in varchar2)
return number
is
  v_ret number;
  v_jurisdiction_id number := pkg_os_lookup.fn_get_lookup_list_short_enum ( 5050401 , in_jurisdiction_text);
begin
  select min(jurisdiction_id) into v_ret from dragon_customer_jurisdiction
  where PTP_ID=in_ptp_id and customer_id= in_customer_id and jurisdiction_enum=v_jurisdiction_id
  and nvl(object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   ;

  return v_ret;

end;

function fn_get_cppcf_jurisdiction(in_session_id in object.object_id%type,
                                in_transaction_id in object.object_id%type,
                                in_ptp_id     in object.object_id%type,
                                in_cppcf_id in object.object_id%type,
                                in_jurisdiction_text in varchar2)
return number
is
  v_ret number;
  v_jurisdiction_id number := pkg_os_lookup.fn_get_lookup_list_short_enum ( 5050401 , in_jurisdiction_text);
begin
  pkg_os_logging.sp_log_info(in_session_id      => in_session_id,
                             in_transaction_id  => in_transaction_id,
                             in_program_name    => 'fn_get_cppcf_jurisdiction',
                             in_log_description => 'PTP:'||in_ptp_id|| ' lob_id:'||in_cppcf_id||' v_jurisdiction_id:'||v_jurisdiction_id);
  select min(jurisdiction_id) into v_ret from dragon_customer_jurisdiction
  where PTP_ID=in_ptp_id and lob_id= in_cppcf_id and jurisdiction_enum=v_jurisdiction_id
  and nvl(object_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   ;

  return v_ret;

end;

procedure sp_add_customer_jurisdiction(
      in_session_id in  object.object_id%type,
      in_transaction_id in  object.object_id%type,
      in_action_object_id  object.object_id%type, 
      in_object_cache    in out        pkg_os_object_cache.t_object_cache,
      io_message_list    in out        pkg_os_message.t_message_list,
      in_action_id       in            action.action_id%type,
      io_action_outcome_id in out        outcome.outcome_id%type) 
as              
     v_action_object_id         object.object_id%type := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_action_object_id, 30169701);
     v_object_type_id           object_type.object_type_id%type := pkg_os_object.fn_object_type_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_action_object_id
                                                            );
     v_ptp_id                     object.object_id%type;
     v_pd_product_id pd_product.pd_product_id%type  :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_ptp_id, 211636 );
     v_add_delete       number                := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id,v_ptp_id,33528148);
     v_action_id        number ;
     v_tree_id                     object.object_id%type              := pkg_os_tree_action.fn_object_cache_tree_get( in_session_id, in_transaction_id, in_object_cache );
     v_tree_definition_id          object_tree.object_tree_id%type    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_tree_id, pkg_os_constant_bv.gbv_ObjTreeTreeDefinitionID );
     v_new_location_id             object.object_id%type              ;
     v_new_customer_building   object.object_id%type           ;                                         
     v_procedure_nm   varchar2(100) :=  pkg_name||'sp_add_customer_jurisdiction';
     v_juris_object_id          object.object_id%type ;
     v_jurisobject_type_id   object_type.object_type_id%type ;
     v_cppcf_juris_id        object.object_id%type ;
     v_PolicyCMJurisdiction_id object.object_id%type ;
     V_PolicyCRJurisdiction   object.object_id%type ;
     v_cppcf_location_id     object.object_id%type ;
     v_cppcf_building_id     object.object_id%type ;
     v_datamart_update char(1);
     v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                         in_transaction_id);     

     --v_large_sched_ind  object_bv_value.business_variable_value%type;
         
 cursor c_parent_object_id( in_parent_object_type_id    in object_type.object_type_id%type )
     is
          select
               distinct node_assoc_object_id
          from
               tmp_tree_nodes
          where
               tree_id = v_tree_id
          and
          pkg_os_object.fn_object_base_object_type_get( pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,node_assoc_object_id)) 
           = in_parent_object_type_id
          and
               node_deleted_tf = 'F'
          ;

begin
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type
                                                             (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              v_action_object_id,
                                                              gObjType_ptp );
     
     --v_large_sched_ind:= pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_ptp_id, 30746846 );	
     v_action_id := case
            pkg_os_object.fn_object_type_get(in_session_id,
                                             in_transaction_id,
                                             pkg_os_object.fn_object_parent_get(in_session_id,
                                                                                in_transaction_id,
                                                                                v_ptp_id))
             when 2356809 then
              306005
             else
              120302
              end;

 
     if v_object_type_id = gObjType_policycustomer then    
        pkg_os_action_object.sp_multiplicity_create_child
              (
                in_session_id,
                in_transaction_id,
                in_object_cache,
                io_message_list,
                in_action_id,
                v_action_object_id,
                gObjType_CompanyJurisdiction,
                io_action_outcome_id
              );
        v_juris_object_id      := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject );
        v_jurisobject_type_id  := pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id, v_juris_object_id);
  
        pkg_os_tree_driven.sp_create_driven_objects
              (
                in_session_id,
                in_transaction_id,
                in_object_cache
              );
         --2197605PolicyCPPCF
        for r_parent in c_parent_object_id( gObjType_Policycf ) loop

              if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, 'Driven ObjectType ParentObjectID:'||r_parent.node_assoc_object_id);
              end if;
               --2191405PolicyCFJurisdiction
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_PolicyCFJurisdiction,
                    r_parent.node_assoc_object_id,
                    v_cppcf_juris_id
               );
            pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_cppcf_juris_id,v_datamart_update);

               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cppcf_juris_id, gbv_CFJuris_RefCoveredJuris, v_juris_object_id );

          end loop;

         --2197705PolicyCPPCM
       /* for r_parent in c_parent_object_id( 2186505 ) loop

              if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, 'Driven ObjectType ParentObjectID:'||r_parent.node_assoc_object_id);
              end if;
               --2186605PolicyCMJurisdiction
               pkg_os_object.sp_object_create_basic
               (
                    in_session_id,
                    in_transaction_id,
                    2186605,
                    r_parent.node_assoc_object_id,
                    v_PolicyCMJurisdiction_id
               );
            pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_PolicyCMJurisdiction_id,v_datamart_update);
          --26451605PolicyCMJurisdiction - xReference - _Reference_Covered Jurisdiction
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_PolicyCMJurisdiction_id, 26451605, v_juris_object_id );

          end loop;*/
-------------------
         --2197805PolicyCPPCR
        for r_parent in c_parent_object_id( gObjType_PolicyCR ) loop

              if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, 'Driven ObjectType ParentObjectID:'||r_parent.node_assoc_object_id);
              end if;
               --2186105PolicyCRJurisdiction
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_PolicyCRJurisdiction,
                    r_parent.node_assoc_object_id,
                    V_PolicyCRJurisdiction
               );
            pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,V_PolicyCRJurisdiction,v_datamart_update);
          --26451005PolicyCRJurisdiction - xReference - _Reference_Covered Jurisdiction
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, V_PolicyCRJurisdiction, gbv_PolCRJur_RefCoveredJur, v_juris_object_id );

          end loop;
             pkg_os_object_io.sp_object_bv_set
            (
              in_session_id,
              in_transaction_id,
              v_ptp_id,
              33564148,
              1
            ); 
              
         --for jurisdiction create location

            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 gObjType_CustomerLocation,
                 v_juris_object_id,
                 v_new_location_id
            );
            pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_location_id,v_datamart_update);
            pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 pkg_os_constant.gObjType_CustomerBuilding,
                 v_new_location_id,
                 v_new_customer_building
            );
            pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_customer_building,v_datamart_update);
            if v_session_control.gLogging_Full
            then

                 pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, ' ...... Jurisdiction ID:'||v_juris_object_id||' New Location Created:'||v_new_location_id );

            end if;
      
            -- Create driven nodes ...
           --for LS policy 
          if v_cppcf_juris_id is not null then 
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_PolicyCFLocation,
                    v_cppcf_juris_id,
                    v_cppcf_location_id
               );
              -- 26450005PolicyCFLocation - xReference - _Reference_Covered Location
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cppcf_location_id, gbv_CFLocation_RefCovered, v_new_location_id );
               pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_cppcf_location_id,v_datamart_update);
               --2191305PolicyCFBuildingCoverage
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    gObjType_PolicyCFBuilCoverage,
                    v_cppcf_location_id,
                    v_cppcf_building_id
               );
               
               --26449805PolicyCFBuildingCoverage - xReference - _Reference_Covered Building
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_cppcf_building_id, gbv_CFBuilding_RefCovered, v_new_customer_building );
               pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_cppcf_building_id,v_datamart_update);
               if v_session_control.gLogging_Full
               then

                 pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, 
                 ' CPPCF location created:'||v_cppcf_location_id||' Juris id:'||v_cppcf_juris_id );

                end if;            
          end if;
           pkg_os_tree_driven.sp_referencer_nodes_create
            (
                 in_session_id,
                 in_transaction_id,
                 v_tree_id,                 -- tree id
                 v_tree_definition_id,       -- tree definition id
                 v_new_location_id,             -- driver object id
                 gObjType_CustomerLocation       -- driver object-type id
            );
            
            if v_session_control.gLogging_Full
            then

                 pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_nm, ' ...... Jurisdiction ID:'||v_juris_object_id||' New Location Created:'||v_new_location_id );

            end if;

     elsif v_object_type_id = gObjType_CompanyJurisdiction then
            pkg_os_object.sp_object_create
              (
                   in_session_id,
                   in_transaction_id,
                   gObjType_CustomerLocation,
                   v_action_object_id,
                   v_new_location_id
              );
              -- Create driven nodes ...
              PKG_OS_TREE_DRIVEN.sp_referencer_nodes_create
              (
                   in_session_id,
                   in_transaction_id,
                   v_tree_id,                 -- tree id
                   v_tree_definition_id,       -- tree definition id
                   v_new_location_id,             -- driver object id
                   gObjType_CustomerLocation       -- driver object-type id
              );
             pkg_os_object_io.sp_object_bv_set
            (
              in_session_id,
              in_transaction_id,
              v_ptp_id,
              33564148,
              2
            );    
      end if;
      -- Set ptp id on Listobject
      pkg_os_object_io.sp_object_bv_path_set
        (
          in_session_id,
          in_transaction_id,
          in_session_id,
          '210356.34085846.34113246',
          v_ptp_id
        );                
       if v_ptp_id is not null then
             pkg_os_tree.sp_tree_create
              (
                  in_session_id,
                  in_transaction_id,
                  in_object_cache,
                  io_message_list,
                  v_action_id,
                  v_ptp_id,--in_action_object_id,
                  2276904,
                  io_action_outcome_id
              );
       end if;
       io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end sp_add_customer_jurisdiction;      


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_object_child_ca_vehicle
--
--  %USAGE
--      This procedure creates a Child PolicyCAUVehicle and it referenced objects.
--      It also sets the Sequence Number and the vehicle Name--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM
--
--          in_session_id            Session Id
--          in_transaction_id        Transaction Id
--          in_action_object_id      Location Object Id
--          in_action_object_type_id Object Type Id
--          io_action_outcome_id     Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_child_ca_vehicle
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id       in    object.object_id%type,
     in_action_object_type_id    in          object_type.object_type_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
as

     v_procedure_name          constant system_log.program_name%type := pkg_name || 'sp_object_child_ca_vehicle';
     v_session_control         pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ca_vehicle_object_id          object.object_id%type;
     v_ptp_id             object.object_id%type;
     v_vehicle_sequence        number;

     v_datamart_tf          char(1);

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Creating vehicle Object for ObjectID:'||in_action_object_id || ' Object Type:' || in_action_object_type_id
          );

     end if;
     v_ca_vehicle_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_ptp_id,gbv_PTP_Refers_TemplateObject);
     
     if v_ca_vehicle_object_id is null then 
     pkg_os_object.sp_object_create_child_of_type
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolicyCAUVehicle,
          v_ca_vehicle_object_id
     );

     sp_object_create_references
     (
          in_session_id,
          in_transaction_id,
          v_ca_vehicle_object_id,
          io_action_outcome_id
     );
     end if;

     pkg_os_object_io.sp_object_bv_set(in_session_id => in_session_id,
                                     in_transaction_id => in_transaction_id,
                                     in_object_id => v_ca_vehicle_object_id,
                                     in_bv_id    => 210153 ,
                                     in_bv_value => 51746 );
     -- Get PTP ID
     v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id ,
                                         in_transaction_id => in_transaction_id,
                                         in_object_id      => in_action_object_id);

     v_vehicle_sequence := pkg_os_object.fn_object_children_count_get(in_action_object_id, gObjType_PolicyCAUVehicle)+1;

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ca_vehicle_object_id, gbv_GenericSequenceNumber, v_vehicle_sequence);

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_ptp_id,gbv_PTP_Refers_TemplateObject,v_ca_vehicle_object_id);
     
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_ca_vehicle_object_id, v_datamart_tf);

     -- Set Vehicle as Session New Object
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_ca_vehicle_object_id);
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, 29650546, v_ptp_id);

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_object_child_ca_vehicle;

procedure sp_delete_global_udate_veh(in_session_id      in   object.object_id%type,
                                     in_transaction_id      in          object.object_id%type,
                                     in_action_object_id       in    object.object_id%type,
                                     in_action_object_type_id    in          object_type.object_type_id%type,
                                     io_action_outcome_id     in out outcome.outcome_id%type
                                )
as
   v_ptp_id object.object_id%type;
   v_covered_vehile object.object_id%type;
begin
  v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id ,
                                                   in_transaction_id => in_transaction_id,
                                                   in_object_id      => in_action_object_id);
  
  --34014848PolicyCAUVehicle - xReference - _Reference_Covers
  v_covered_vehile := pkg_os_object_io.fn_object_bv_get(in_session_id                 => in_session_id,
                                                        in_transaction_id             => in_transaction_id ,
                                                        in_object_id                  => in_action_object_id,
                                                        in_bv_id                      =>  34014848) ;
  pkg_os_object.sp_object_delete(in_session_id             => in_session_id,
                                 in_transaction_id         => in_transaction_id,
                                 in_parent_object_id       => null,
                                 in_object_id              => v_covered_vehile,
                                 in_object_type_id         => pkg_os_constant.gObjType_CustomerVehicle )   ;                                             

  pkg_os_object.sp_object_delete(in_session_id             => in_session_id,
                                 in_transaction_id         => in_transaction_id,
                                 in_parent_object_id       => null,
                                 in_object_id              => in_action_object_id,
                                 in_object_type_id         => gObjType_PolicyCAUVehicle )   ; 
  --set reference on user session to ptp so next action get the object --Reference session policy
  pkg_os_object_io.sp_object_bv_set(in_session_id => in_session_id,
                                   in_transaction_id => in_transaction_id,
                                   in_object_id => in_session_id,
                                   in_bv_id    => pkg_cs_functions.gbv_Session_RefSessionPolicy ,
                                   in_bv_value => v_ptp_id );
  
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end;

procedure sp_ca_vehicle_tree_validate
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type,
     in_underwrite_execute         in boolean default true
)
as

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_vehicle_tree_validate';
     v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_policy_tree_id   object.object_id%type;
     v_vehicle_object_type  object_type.object_type_id%type;

     v_tree_load_action    action.action_id%type;
     v_quote_or_nb_ind      char(1);
     v_policy_trx_type      object.object_id%type;

     v_vehicle_sequence       integer := 1;

     v_referral_outcome_id   outcome.outcome_id%type;
     v_object_uwalerts_list      pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_datamart_tf          char(1);

     -- Select vehicles who are included
     cursor cur_vehicle_schedule
     is
     select
          d.vehicle_id
          
     from
          dragon_customer_vehicle d
     where
          d.ptp_id = in_action_object_id

     and
          d.vehicle_state_id <> gObjState_GlobalUpdateTemplate -- Exclude Template Objects
     and nvl(d.vehicle_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.vehicle_id;

begin

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Starting Vehicle Validation'
     );

     -- Get Transaction Type
     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, in_action_object_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;


     v_policy_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);

     -- First delete all mini-trees
     pkg_os_tree.sp_mini_tree_delete_all(in_session_id, in_transaction_id, v_policy_tree_id);

     -- 2nd, update datamart
    -- sp_schedule_datamart_update(in_session_id, in_transaction_id, in_action_object_id, io_action_outcome_id);
    
    --Ashwini
     if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 3187748;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 3187748;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if; 


     -- 3rd, for each 'Covered' Vehicle, build a new tree
     for c1 in cur_vehicle_schedule
     loop

           pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               '..... Validating Vehicle: ' || v_vehicle_sequence );


          --
          -- Build tree and perform tree completion.
          --
           
          pkg_os_tree.sp_minitree_load
          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               v_tree_load_action,
               c1.vehicle_id,
               v_vehicle_object_type,
               io_action_outcome_id,
               'T'            
          );

          v_vehicle_sequence :=  v_vehicle_sequence + 1;
          pkg_os_object_cache_io.sp_index_object_cache_clear( in_session_id, in_transaction_id );
          pkg_os_object_io.sp_object_path_cache_clear;
          pkg_os_object_io.sp_bv_value_cache_clear(in_session_id, in_transaction_id, false );

     end loop;

     if in_underwrite_execute then

       -- 4th, run underwriting rules
       pkg_os_underwrite.sp_underwrite_boolean_plan
       (
          in_session_id,
          in_transaction_id,
          in_action_id,
          in_action_object_id,
          pkg_os_underwrite.gUWRuleType_Underwriting,
          null,
          v_referral_outcome_id
       );


       -- Outcomes returned by pkg_os_underwrite.sp_underwrite_boolean_plan are:
       -- a) UnderwritingFailed (81) b) UnderwritingIncomplete (18505) c) UnderwritingPassed (80) d) UnderwritingReferral (82)

       -- Scan each UW Trigger and update datamart
       -- Search for PolicyUnderwritingTriggerDetail
       pkg_os_object_search.sp_object_children_of_type_get
       (
            in_session_id,
            in_transaction_id,
            in_action_object_id,
            pkg_os_underwrite.gObjPolicyUWTrigger,
            v_object_uwalerts_list
       );

       if ( v_object_uwalerts_list.count > 0 )
       then

            for i in v_object_uwalerts_list.first..v_object_uwalerts_list.last
            loop

                 pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_object_uwalerts_list(i), v_datamart_tf);

            end loop;

       end if;
     end if;
     -- 5. Validate all trees
     -- Outcomes returned by pkg_os_tree_completion.sp_validate_trees are:
     -- a) TreeComplete (8201) b) TreeIncomplete (8301)

     pkg_os_tree_completion.sp_validate_trees
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          in_action_id,
          in_action_object_id,
          in_action_object_type_id,
          io_action_outcome_id,
          'T'             -- in_affected_trees_tf
     );

     -- If Tree is Incomplete, return this Outcome.
     if ( io_action_outcome_id = 8201 )
     then

          io_action_outcome_id := greatest(v_referral_outcome_id, pkg_os_constant.gOutcome_OK);

     end if;
end sp_ca_vehicle_tree_validate;


procedure sp_validation_start_init_db(in_session_id         in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
 v_ptp_id object.object_id%type;
 v_object_tree object.object_id%type;
 v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
 v_procedure_name varchar2(100):= 'sp_validation_start_init_db';

 v_object_type object_type.OBJECT_TYPE_ID%type;
 v_product_id pd_product.pd_product_id%type;

begin
  v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                                  in_transaction_id => in_transaction_id,
                                                  in_object_id      => in_action_object_id);
                                                  
  v_object_tree := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                     in_transaction_id        => in_transaction_id,
                                                     in_tree_driver_object_id => v_ptp_id,
                                                     in_tree_definition_id    => 201,
                                                     in_master_tree_id        => null);
                                                     
 
  if v_session_control.gLogging_Full then 
               pkg_os_logging.sp_log (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Validation init proc Image Id:'
              ||v_ptp_id
              ||' Object Tree ID: '
              ||v_object_tree
           );

  end if;
  
  ---set the tree on executor session
  pkg_os_object_io.sp_object_bv_set(in_session_id,in_session_id,in_session_id,pkg_os_constant_bv.gbv_SessionCurrentTree,v_object_tree);
  --set session policy to ptp 29650546UserSession - xReference - _Reference_SessionPolicy
  pkg_os_object_io.sp_object_bv_set(in_session_id,in_session_id,in_session_id, 29650546,v_ptp_id); 
  v_object_type:= pkg_os_object.fn_object_type_get(in_session_id     =>in_session_id ,
                                                    in_transaction_id => in_transaction_id,
                                                    in_object_id      => in_action_object_id);                                                   

  v_product_id := pkg_os_product.fn_object_product_get(in_session_id     => in_session_id,
                                                       in_transaction_id => in_transaction_id,
                                                       in_object_id      => v_ptp_id);
                                                       
 
  --if product is commercial package policy then outcomes will be different 
  if  v_product_id = g_Commercial_package_policy then
    
    if v_object_type =   2191505 then --PolicyCFLocation
       io_action_outcome_id:= 255148;
       
    elsif  v_object_type =   2227307  then--PolicyGLJurisdictionLiabilityCoverage
       io_action_outcome_id:= 255248;
       
    elsif   v_object_type =   2600746  then--PolicyCABAVehicle
       io_action_outcome_id:= 255348;
       
    elsif   v_object_type =   2600146  then--PolicyCABAJurisdicton   
       io_action_outcome_id:= 255448;      
       
    elsif   v_object_type =   2191405  then--PolicyCFJurisdiction   
       io_action_outcome_id:= 255548;
       
    elsif   v_object_type =   2184605  then--PolicyGLLocationLiabilityCoverage 
       io_action_outcome_id:= 255648;
       
    elsif   v_object_type =   2600346  then--PolicyCABALocation 
        io_action_outcome_id:= 255748;       

    elsif   v_object_type =   2191305  then--PolicyCFBuildingCoverage 
       io_action_outcome_id:= 255848;      
    else
       io_action_outcome_id:= pkg_os_constant.gOutcome_OK;
    end if;
  elsif v_product_id = g_General_Liability_policy then 
     if   v_object_type =   2184705  then--PolicyGLBuildingLiabilityCoverage
       io_action_outcome_id:= 293148; 
    elsif  v_object_type =   2227307  then--PolicyGLJurisdictionLiabilityCoverage
       io_action_outcome_id:= 255248;
    elsif   v_object_type =   2184605  then--PolicyGLLocationLiabilityCoverage 
       io_action_outcome_id:= 255648;
    else
       io_action_outcome_id:= pkg_os_constant.gOutcome_OK;
    end if;
  else
     io_action_outcome_id:= pkg_os_constant.gOutcome_OK;
  end if;

end;
procedure sp_delete_mini_trees(in_session_id         in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
 v_policy_tree_id object.object_id%type;
begin
  
     v_policy_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionCurrentTree);

     -- First delete all mini-trees
     pkg_os_tree.sp_mini_tree_delete_all(in_session_id, in_transaction_id, v_policy_tree_id);
     
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end;
 
procedure sp_load_min_tree( in_session_id            in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               io_object_cache       in out nocopy  pkg_os_object_cache.t_object_cache,
                               io_message_list       in out nocopy  pkg_os_message.t_message_list,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
   v_object_type object_type.OBJECT_TYPE_ID%type:= pkg_os_object.fn_object_type_get(in_session_id     => in_session_id ,
                                                                                    in_transaction_id => in_transaction_id,
                                                                                     in_object_id      => in_action_object_id);
   v_product_id    pd_product.pd_product_id%type := pkg_os_product.fn_object_product_get(in_session_id     => in_session_id,
                                                     in_transaction_id => in_transaction_id,
                                                     in_object_id      => in_action_object_id);

  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_tree_load_action    action.ACTION_ID%type;
  v_procedure_name varchar2(100):= 'sp_load_min_tree';
  v_policy_id object.object_id%type := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                                                           in_transaction_id => in_transaction_id,
                                                                           in_object_id      => in_action_object_id);
  v_policy_trx_type  pd_transaction_type.pd_transaction_type_id%type;
  v_quote_or_nb_ind  char(1);
  v_mini_tree_id object.object_id%type;
  v_master_tree_id object.object_id%type;
  v_user_id             object.object_id%type                     := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);

begin


     v_master_tree_id :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_session_id,in_session_id,pkg_os_constant_bv.gbv_SessionCurrentTree);

     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, v_policy_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;
  
     if ( v_object_type = gObjType_PolicyCFBuilCoverage ) then  -- PolicyCFBuildingCoverage
                v_tree_load_action := 3643748;      -- CL_PolicyCFBuildingCoverage_Validation_MiniTreeLoad_DB  
                     
     elsif ( v_object_type = gObjType_PolicyCFLocation) then -- PolicyCFLocation      
                v_tree_load_action := 3643948;      -- CL_PolicyCFLocation_Quote_MiniTreeLoad_DB    
                    
     elsif ( v_object_type = gObjType_PolicyCFJurisdiction) then
                v_tree_load_action := 3644048;  
                
     elsif ( v_object_type = gObjType_PolGLLocLiabltyCov  and v_product_id = g_Commercial_package_policy) then -- PolicyGLLocationLiabilityCoverage
                v_tree_load_action := 3644148;      -- CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_DB
                
     elsif ( v_object_type = gObjType_PolGLJurisLiabltyCov  and v_product_id = g_Commercial_package_policy) then
                v_tree_load_action := 3989748;      --CL_PolicyGLLocationLiabilityCoverage_Quote_MiniTreeLoad_D
                
      elsif ( v_object_type = gObjType_PolGLLocLiabltyCov  and v_product_id = g_General_Liability_policy) then -- PolicyGLLocationLiabilityCoverage
                v_tree_load_action := 4087848;      -- CL_PolicyGLLocationLiability_Val_MiniTreeLoad_DB
                
     elsif ( v_object_type = gObjType_PolGLJurisLiabltyCov  and v_product_id = g_General_Liability_policy) then
                v_tree_load_action := 4087948;      --CL_PolicyGLJurisdiction_Validation_MiniTreeLoad_DB
                
     elsif ( v_object_type = gObjType_PolCABAJurisdiction ) then
              v_tree_load_action := 3644348;  --CL_PolicyCAJurisdiction_Quote_MiniTreeLoad_DB     
                 
     elsif(v_object_type =gObjType_PolCABAVehicle) then

              v_tree_load_action := 3644448;  --AL_PolicyCABAVehicle_LoadMiniTree_DB 
              
     elsif(v_object_type = gObjType_PolicyCAUVehicle) then   

              v_tree_load_action := 3644548;      -- CL_CommercialAutoVehicles_LoadMiniTree_DB
              
     elsif(v_object_type = gObjType_PolGLBuildLiabltyCov) then    -- GL Building

              v_tree_load_action := 4009748; 
              
     end if;
     if v_session_control.gLogging_Full then 
                 pkg_os_logging.sp_log (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Load Mini Tree product:' ||v_product_id
                ||' Object Type: '  ||v_object_type
                ||' tree load action:'  ||v_tree_load_action
                ||' v_quote_or_nb_ind:'|| v_quote_or_nb_ind
             );

     end if;
  if v_master_tree_id is null then 
    
    v_master_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                       in_transaction_id        => in_transaction_id,
                                                       in_tree_driver_object_id => v_policy_id,
                                                       in_tree_definition_id    => 201,
                                                       in_master_tree_id        => null);
  end if;     
  


  if v_tree_load_action is not null then
    ---add entry in object lock for main tree lock
     begin
     insert into wf_tmp_object_lock ( object_id, creation_date, session_id,  user_id, ancestor_list )
     values ( v_master_tree_id,  sysdate, in_session_id, v_user_id,  null );       
     exception when others then 
       update wf_tmp_object_lock set session_id =in_session_id where object_id = v_master_tree_id;
     end;		 
     pkg_os_tree.sp_minitree_load
     (
         in_session_id,
         in_transaction_id,
         io_object_cache,
         io_message_list,
         v_tree_load_action,
         in_action_object_id,
         v_object_type,
         io_action_outcome_id,
         'F'             -- perform Tree Completion now
     );

     pkg_os_object_io.sp_object_bv_set( in_session_id,in_transaction_id, v_master_tree_id ,pkg_os_constant_bv.gbv_objMiniTreeSyncTree ,null);
     pkg_os_object_io.sp_object_bv_set( in_session_id,in_transaction_id, v_master_tree_id ,29747101 ,null);
     pkg_os_object_io.sp_object_bv_set( in_session_id,in_transaction_id, v_master_tree_id ,29751601 ,null);
   delete from wf_tmp_object_lock where object_id=   v_master_tree_id; 
   io_action_outcome_id :=  pkg_os_constant.gOutcome_OK ;
 else
   io_action_outcome_id := 247148;
 
 end if;
 
end;

procedure sp_cleanse_mini_tree(in_session_id            in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               io_object_cache       in out nocopy  pkg_os_object_cache.t_object_cache,
                               io_message_list       in out nocopy  pkg_os_message.t_message_list,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
  v_mini_tree_id object.object_id%type;
  v_master_tree_id object.object_id%type;
begin
     v_master_tree_id :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_session_id,in_session_id,pkg_os_constant_bv.gbv_SessionCurrentTree);

  pkg_os_policy_cleanse.sp_policy_cleanse(in_session_id          => in_session_id,
                                          in_transaction_id      => in_transaction_id ,
                                          in_action_id           => null ,
                                          in_action_object_id    => in_action_object_id,
                                          in_tree_definition1_id => 201,
                                          in_tree_definition2_id => null,
                                          in_delete_tf           => 'T');  

    v_mini_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                     in_transaction_id        => in_transaction_id,
                                                     in_tree_driver_object_id => in_action_object_id,
                                                     in_tree_definition_id    => 201,
                                                     in_master_tree_id        => v_master_tree_id);

    pkg_os_tree_completion.sp_tree_branch_completion
       (
           in_session_id,
           in_transaction_id,
           io_message_list,
           io_object_cache,
           v_mini_tree_id,
           null,
           null
         );
         
																																			 
																										   
																										   
																	   
  io_action_outcome_id :=  pkg_os_constant.gOutcome_OK ;		
 
end;

procedure sp_delete_mini_tree(in_session_id         in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
 v_ptp_id object.object_id%type;
 v_master_tree_id object.object_id%type;
 v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
 v_procedure_name varchar2(100):= 'sp_delete_mini_tree';
 v_mini_tree_id  object.object_id%type;
begin
  v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                                  in_transaction_id => in_transaction_id,
                                                  in_object_id      => in_action_object_id);
                                                  
  v_master_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                     in_transaction_id        => in_transaction_id,
                                                     in_tree_driver_object_id => v_ptp_id,
                                                     in_tree_definition_id    => 201,
                                                     in_master_tree_id        => null);
  

  v_mini_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                     in_transaction_id        => in_transaction_id,
                                                     in_tree_driver_object_id => in_action_object_id,
                                                     in_tree_definition_id    => 201,
                                                     in_master_tree_id        => v_master_tree_id);

   if v_session_control.gLogging_Full then 
               pkg_os_logging.sp_log (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Deelting mini tree:' ||v_mini_tree_id
              ||' for master tree: '  ||v_master_tree_id 
           );

   end if;
  if v_mini_tree_id is not null then 
    
    pkg_os_tree.sp_mini_tree_delete(in_session_id           =>in_session_id ,
                                    in_transaction_id       => in_transaction_id,
                                    in_master_tree_id       => v_master_tree_id,
                                    in_mini_tree_id         => v_mini_tree_id,
                                    in_node_assoc_object_id => in_action_object_id);
  end if;
  
  pkg_os_datamart.sp_datamart_delete_row(in_session_id     => in_session_id,
                                         in_transaction_id => in_transaction_id,
                                         in_object_id      => in_action_object_id);
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end;


procedure sp_validation_assembly_start(in_session_id            in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               io_object_cache       in out nocopy  pkg_os_object_cache.t_object_cache,
                               io_message_list       in out nocopy  pkg_os_message.t_message_list,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
  v_ptp_id               object.object_id%type;
  v_eoc_id               object.object_id%type;
  v_dap_param_block      object.object_id%type;
  v_async_batch_id       async_batch.async_batch_id%type;
  v_batch_object_id      object.object_id%type;
  v_batch_object_type_id object_type.OBJECT_TYPE_ID%type;
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_procedure_name       varchar2(100) := 'sp_validation_assembly_start';
  v_ls_controller_id    object.object_id%type;
  v_PT_object_id         object.object_id%type;
begin
  if v_session_control.gLogging_Full then 
    pkg_os_logging.sp_log_error(1111,1111,v_procedure_name,
    ' in_session_id:'||in_session_id|| ' in_transaction_id:'||in_transaction_id || ' in_action_id:'||in_action_id||
    ' in_action_object_id:'||in_action_object_id);
  end if;
  
  -- get dapparam block from current executer session
  v_eoc_id         := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,in_session_id,pkg_os_constant.gobjtype_ExternalObjectCache);

  v_dap_param_block := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_eoc_id,gObjType_Dap_Param_Block);

  v_async_batch_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_dap_param_block, gBatchParam_Async_batch_Id_BV);

  if v_async_batch_id is null then

      pkg_os_logging.sp_log_error
           (
                in_session_id,
                in_transaction_id,
                V_Procedure_Name,
                'Error - Unable to find asyn batch id'
                || 'in_session_id  ' ||in_session_id
                ||' v_eoc_id  ' ||v_eoc_id
                ||' v_dap_param_block  ' ||v_dap_param_block
                ||' v_async_batch_id  ' ||v_async_batch_id
            );
      raise_application_error(-20616,'Unable to find async batch id for session : '||in_session_id);
  end if;  
  ---get batch object id  30258001AsyncBatch - xReference - _Reference_Batch Current Object	gbv_AsyncBatch_CurrentObjec
  v_batch_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                         in_transaction_id => in_transaction_id,
                                                         in_object_id => v_async_batch_id,
                                                         in_bv_id => pkg_os_dap.gbv_AsyncBatch_CurrentObject);

  if v_batch_object_id is null then

      pkg_os_logging.sp_log_error
           (
                in_session_id,
                in_transaction_id,
                V_Procedure_Name,
                'Error - Unable to find batch object id'
                || 'in_session_id  ' ||in_session_id
                ||' v_eoc_id  ' ||v_eoc_id
                ||' v_dap_param_block  ' ||v_dap_param_block
                ||' v_async_batch_id  ' ||v_async_batch_id
            );
      raise_application_error(-20616,'Unable to find async batch object id for session : '||in_session_id);
  end if;  
  --check if batch object is PTP else get ptp
  v_batch_object_type_id :=  pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                      in_transaction_id => in_transaction_id,
                                      in_object_id      => v_batch_object_id) ;
                                      
  if v_batch_object_type_id = pkg_os_constant.gobjType_PolicyTrxPolicy then
     v_ptp_id := v_batch_object_id;
  elsif v_batch_object_type_id= pkg_os_constant.gobjType_PolicyTransaction then 
     v_ptp_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                   in_transaction_id => in_transaction_id,
                                                   in_object_id => v_batch_object_id,
                                                   in_bv_id => pkg_os_policy_transaction.gbv_PolicyTrxCoverages);

  else
    v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                                    in_transaction_id => in_transaction_id,
                                                    in_object_id      => v_batch_object_id);
  end if;
  
  -- get the reference of largeschedule controller from QT/PT
  v_PT_object_id:= pkg_os_object.fn_object_parent_get(in_session_id     => in_session_id,
                                                      in_transaction_id => in_transaction_id,
                                                      in_object_id      => v_ptp_id);
                                                      
  v_ls_controller_id := pkg_os_object_search.fn_object_11_child_get(  in_session_id,
                                                                      in_transaction_id,
                                                                      v_PT_object_id,
                                                                      gObjType_LSController
                                                                 );
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log(in_session_id,in_transaction_id,v_procedure_name,
     'PT Object:'||v_PT_object_id||'  Ls Controller Id:'||v_ls_controller_id);
  end if; 
  
  if ( v_ls_controller_id is not null ) then 
    -- set executor session on LS
    --31916046LargeScheduleJobController - xReference - _Reference_Current or Most Recent Job
    --30253201_Reference_Executor UserSession
    pkg_os_object_io.sp_object_bv_path_set(in_session_id,in_transaction_id,v_ls_controller_id,'31916046.30253201',in_session_id);
    
  end if;
                                                                 


  -- for object lock set the tree load object on session as object of interest 28987309UserSession - xReference - _Reference_ObjectOfInterest
  pkg_os_object_io.sp_object_bv_set(in_session_id,in_session_id,in_session_id, pkg_os_constant_bv.gbv_SessionObjectOfInterest, v_ptp_id);
 
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;   

end;

procedure sp_validation_assembly_tree(in_session_id            in object.object_id%type,
                               in_transaction_id     in object.object_id%type,
                               io_object_cache       in out nocopy  pkg_os_object_cache.t_object_cache,
                               io_message_list       in out nocopy  pkg_os_message.t_message_list,
                               in_action_id          in        action.action_id%type,
                               in_action_object_id   in object.object_id%type,
                               io_action_outcome_id  in out outcome.outcome_id%type)
is
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_procedure_name       varchar2(100) := 'sp_validation_batch_assembly';
  v_tree_object_id       object.object_id%type;
  
  cursor c_parent_node(in_master_tree_id in object.object_id%type)
  is
  select  parent_node_id,ttd.tree_id,ttd.master_tree_id,tree_completeness_status  from tree_mini_tree_details ttd
  where master_tree_id= in_master_tree_id and parent_node_id is not null and 
  tree_completeness_status in ( 'Incomplete','NotQuiteComplete');
  
  v_master_tree_red        boolean := false;
  v_product_id             pd_product.pd_product_id%type;
  v_object_type            object_type.OBJECT_TYPE_ID%type;
  v_tree_load_action       action.ACTION_ID%type;
  v_mini_tree_id           object.object_id%type;
  
  cursor c_cpp_property_cursor is
      select LOCATION_ID object_id, PTP_ID PTP_ID, object_state_id OBJECT_STATE_ID
    from DRAGON_CUSTOMER_LOCATION  where IMPORT_LOCATION_CITY is not null and PTP_ID=in_action_object_id
    union
    select j.jurisdiction_id object_id ,j.ptp_id PTP_ID ,j.object_state_id OBJECT_STATE_ID
    from DRAGON_CUSTOMER_JURISDICTION  j   where   LOB_ID is not null and PTP_ID =in_action_object_id;

  v_exchange_id       object.object_id%type    := pkg_os_wf_session.fn_exchange_get( in_session_id, in_transaction_id );
  v_timeout_seconds   number                   := pkg_os_exchange.sp_exchange_row(v_exchange_id).exchange_timeout_seconds;

begin
  
   
  ---get the main tree 
  v_tree_object_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                       in_transaction_id        => in_transaction_id,
                                                       in_tree_driver_object_id => in_action_object_id,
                                                       in_tree_definition_id    => 201,
                                                       in_master_tree_id        => null);
                                                         

  -- for property due to issue in object locking create mini tress in aseembly for location and jurisdiction
  v_product_id := pkg_os_product.fn_object_product_get(in_session_id     => in_session_id,
                                                       in_transaction_id => in_transaction_id,
                                                       in_object_id      => in_action_object_id);
  
  if v_session_control.gLogging_Full then
     pkg_os_logging.sp_log(in_session_id,in_transaction_id,v_procedure_name,
     ' Product:'||v_product_id|| ' Master Tree:'||v_tree_object_id);
  end if;  
                                                      
  if v_product_id = 2805 then --cpp 
     
    for l_cpp_property_cursor in c_cpp_property_cursor loop 
      
      v_tree_load_action := null;
      
      v_object_type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,in_transaction_id => in_transaction_id,
                                                        in_object_id      => l_cpp_property_cursor.object_id);
                                                        
      if ( v_object_type = gObjType_PolicyCFLocation) then -- PolicyCFLocation      
                v_tree_load_action := 3643948;      -- CL_PolicyCFLocation_Quote_MiniTreeLoad_DB    
                    
      elsif ( v_object_type = gObjType_PolicyCFJurisdiction) then
                v_tree_load_action := 3644048;
      end if;
      
      if v_session_control.gLogging_Full then
         pkg_os_logging.sp_log(in_session_id,in_transaction_id,v_procedure_name,
         '  Tree load action:'||v_tree_load_action|| ' Object Type:'||v_object_type);
      end if; 
            
      if v_tree_load_action  is not null then 
        
        pkg_os_object_io.sp_object_bv_set(in_session_id,in_session_id,in_session_id,pkg_os_constant_bv.gbv_SessionCurrentTree,v_tree_object_id);

        pkg_os_tree.sp_minitree_load(  in_session_id,  in_transaction_id, io_object_cache,  io_message_list, 
                                       v_tree_load_action, l_cpp_property_cursor.object_id, 
                                       v_object_type, io_action_outcome_id,  'F'    );       
      

        v_mini_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                           in_transaction_id        => in_transaction_id,
                                                           in_tree_driver_object_id => l_cpp_property_cursor.object_id,
                                                           in_tree_definition_id    => 201,
                                                           in_master_tree_id        => v_tree_object_id);

        pkg_os_tree_completion.sp_tree_branch_completion
             (
                 in_session_id,
                 in_transaction_id,
                 io_message_list,
                 io_object_cache,
                 v_mini_tree_id,
                 null,
                 null
               );
             
      end if;     
    
    end loop;
  
  end if;
  
  
  if v_product_id = 4205 then --cpp 
     
    for l_cpp_property_cursor in c_cpp_property_cursor loop 
      
      v_tree_load_action := null;
      
      v_object_type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,in_transaction_id => in_transaction_id,
                                                        in_object_id      => l_cpp_property_cursor.object_id);
                                                        
      if ( v_object_type = gObjType_PolGLLocLiabltyCov) then -- PolicyGLLocationLiability      
                v_tree_load_action := 4087848;      -- CL_PolicyGLLocationLiability_Val_MiniTreeLoad_DB   
                    
      elsif ( v_object_type = gObjType_PolGLJurisLiabltyCov) then
                v_tree_load_action := 4087948;  --CL_PolicyGLJurisdiction_Validation_MiniTreeLoad_DB
      end if;
      
      if v_session_control.gLogging_Full then
         pkg_os_logging.sp_log(in_session_id,in_transaction_id,v_procedure_name,
         '  Tree load action:'||v_tree_load_action|| ' Object Type:'||v_object_type);
      end if; 
            
      if v_tree_load_action  is not null then 
        
        pkg_os_object_io.sp_object_bv_set(in_session_id,in_session_id,in_session_id,pkg_os_constant_bv.gbv_SessionCurrentTree,v_tree_object_id);

        pkg_os_tree.sp_minitree_load(  in_session_id,  in_transaction_id, io_object_cache,  io_message_list, 
                                       v_tree_load_action, l_cpp_property_cursor.object_id, 
                                       v_object_type, io_action_outcome_id,  'F'    );       
      

        v_mini_tree_id := pkg_os_tree.fn_existing_tree_find(in_session_id            => in_session_id,
                                                           in_transaction_id        => in_transaction_id,
                                                           in_tree_driver_object_id => l_cpp_property_cursor.object_id,
                                                           in_tree_definition_id    => 201,
                                                           in_master_tree_id        => v_tree_object_id);

        pkg_os_tree_completion.sp_tree_branch_completion
             (
                 in_session_id,
                 in_transaction_id,
                 io_message_list,
                 io_object_cache,
                 v_mini_tree_id,
                 null,
                 null
               );
             
      end if;     
    
    end loop;
  
  end if;


  -- get all parent nodes from mini tree details and mark them as complete/incomplete
  for  l_parent_node in c_parent_node(v_tree_object_id) loop
      
      if l_parent_node.tree_completeness_status = 'Incomplete'  then 
        
        if v_session_control.gLogging_Full then 
            pkg_os_logging.sp_log_error(in_session_id,in_transaction_id,v_procedure_name,
            ' Setting master node as red:'||l_parent_node.parent_node_id|| 
            ' Parent Tree Id:'||l_parent_node.tree_id|| 
            ' Master tree id:'||l_parent_node.master_tree_id);
        end if;
        
        v_master_tree_red := true;
        ---set the parent node status as incomplete
        pkg_os_object_io.sp_object_bv_set(in_session_id     => in_session_id,
                                          in_transaction_id => in_transaction_id,
                                          in_object_id      => l_parent_node.parent_node_id,
                                          in_bv_id => pkg_os_constant_bv.gbv_NodeCompletenessStatus,
                                          in_bv_value => pkg_os_tree.gTreeNodeIncomplete);
      ---set main tree and current tree as incomplete
        pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, l_parent_node.master_tree_id, 
                                          pkg_os_tree.gbv_TreeCompletionStatus, pkg_os_tree.gTreeNodeRed);

        pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, l_parent_node.tree_id, 
                                          pkg_os_tree.gbv_TreeCompletionStatus, pkg_os_tree.gTreeNodeRed);
      else
         
   
         if l_parent_node.tree_completeness_status = 'NotQuiteComplete' then 
            
           if v_session_control.gLogging_Full then 
              pkg_os_logging.sp_log_error(in_session_id,in_transaction_id,v_procedure_name,
              ' Setting master node as yellow:'||l_parent_node.parent_node_id|| 
              ' Parent Tree Id:'||l_parent_node.tree_id|| 
              ' Master tree id:'||l_parent_node.master_tree_id);
           end if;          
           
           pkg_os_object_io.sp_object_bv_set(in_session_id     => in_session_id,
                                            in_transaction_id => in_transaction_id,
                                            in_object_id      => l_parent_node.parent_node_id,
                                            in_bv_id => pkg_os_constant_bv.gbv_NodeCompletenessStatus,
                                            in_bv_value => pkg_os_tree.gTreeNodeNotQuiteComplete);
          ---set main tree as incomplete
            if not v_master_tree_red then
              pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, l_parent_node.master_tree_id, 
                                                pkg_os_tree.gbv_TreeCompletionStatus, pkg_os_tree.gTreeNodeYellow);
            end if;

            pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, l_parent_node.tree_id, 
                                              pkg_os_tree.gbv_TreeCompletionStatus, pkg_os_tree.gTreeNodeYellow); 
          end if;     
      end if;
      
  end loop;
  
  io_action_outcome_id := pkg_os_constant.gOutcome_OK; 
end;
procedure sp_object_create_validate(in_session_id        in object.object_id%type,
                               in_transaction_id         in object.object_id%type,
                               io_object_cache           in out nocopy  pkg_os_object_cache.t_object_cache,
                               io_message_list           in out nocopy  pkg_os_message.t_message_list,
                               in_action_id              in        action.action_id%type,
                               in_action_object_id       in object.object_id%type,
                               in_action_object_type_id  in             object_type.object_type_id%type,
                               io_action_outcome_id      in out outcome.outcome_id%type)
is
v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_procedure_name       varchar2(100) := 'sp_object_create_validate';
  v_tree_object_id       object.object_id%type;
  v_vehicle_sequence     number;
  v_quote_or_nb_ind      char(1);
  v_tree_load_action    action.action_id%type;
  v_vehicle_object_type object_type.object_type_id%type;
  v_cau_object_id       pkg_os_object.t_object_list;
  cursor cur_vehicle_schedule
     is
     select
          d.vehicle_id
          
     from
          dragon_customer_vehicle d
     where
          d.ptp_id = in_action_object_id

     and
          d.vehicle_state_id <> gObjState_GlobalUpdateTemplate -- Exclude Template Objects
     and nvl(d.vehicle_state_id, pkg_os_constant.gObjState_Alive) <> pkg_os_constant.gObjState_Destroyed   
     order by d.vehicle_id;
  begin
   pkg_os_action_object.sp_object_create_child
          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               in_action_id,
               in_action_object_id,
               in_action_object_type_id,
               io_action_outcome_id
          );
          pkg_os_object_Search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        in_action_object_id,
                                                        gObjType_PolicyCAUVehicle,
                                                        v_cau_object_id);
          /*if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 3187748;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 3187748;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if; 
          for x in v_cau_object_id.first..v_cau_object_id.last 
     loop

           pkg_os_logging.sp_log_info(in_session_id, in_transaction_id, v_procedure_name,
               '..... Validating Vehicle: ' || v_vehicle_sequence );

       v_vehicle_object_type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id,v_cau_object_id(x));
          --
          -- Build tree and perform tree completion.
          --
           
          pkg_os_tree.sp_minitree_load
          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               v_tree_load_action,
               v_cau_object_id(x),
               v_vehicle_object_type,
               io_action_outcome_id,
               'T'            
          );

          v_vehicle_sequence :=  v_vehicle_sequence + 1;
          pkg_os_object_cache_io.sp_index_object_cache_clear( in_session_id, in_transaction_id );
          pkg_os_object_io.sp_object_path_cache_clear;
          pkg_os_object_io.sp_bv_value_cache_clear(in_session_id, in_transaction_id, false );

     end loop;
     pkg_os_tree_completion.sp_validate_trees
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          in_action_id,
          in_action_object_id,
          in_action_object_type_id,
          io_action_outcome_id,
          'T'             -- in_affected_trees_tf
     );

     -- If Tree is Incomplete, return this Outcome.
     if ( io_action_outcome_id = 8201 )
     then

          io_action_outcome_id :=  pkg_os_constant.gOutcome_OK;

     end if;*/
           
          /*pkg_pc_large_schedule.sp_schedule_tree_validate

          (
               in_session_id,
               in_transaction_id,
               io_object_cache,
               io_message_list,
               in_action_id,
               in_action_object_id,
               in_action_object_type_id,
               io_action_outcome_id
               
          );*/
  end;
  
 function fn_get_job_batch_time(in_session_id in object.object_id%type,
                                 in_job_id   in async_job_status.job_id%type,
                                 in_batch_id async_batch.async_batch_id%type) return varchar2
 is
    v_ret varchar2(100);
    v_procedure_name varchar2(100):= 'fn_get_job_batch_time';
 begin
   begin
     if nvl( in_job_id,0) >0   then 
        select case
           when ajs.job_start_date is null
           then null
             else lpad ( trunc ( mod ( ( nvl ( ajs.job_end_date, sysdate ) - ajs.job_start_date ) * 24, 24 ) ), 2, 0 ) ||
                ':'                                                                                                      ||
                lpad ( trunc ( mod ( ( nvl ( ajs.job_end_date, sysdate ) - ajs.job_start_date ) * 24 * 60, 60 ) ), 2, 0 ) ||
                ':'                                                                                                      ||
                 lpad ( trunc ( mod ( ( nvl ( ajs.job_end_date, sysdate ) - ajs.job_start_date ) * 24 * 60 * 60, 60 ) ), 2, 0 )
         end
        into v_ret
        FROM    async_job_status ajs where ajs.job_id=in_job_id;
     elsif  nvl( in_batch_id ,0) >0   then 
        select case
           when ab.async_batch_start_date is null
           then null
             else lpad ( trunc ( mod ( ( nvl ( ab.async_batch_end_date, sysdate ) - ab.async_batch_start_date ) * 24, 24 ) ), 2, 0 ) ||
                ':'                                                                                                      ||
                lpad ( trunc ( mod ( ( nvl (  ab.async_batch_end_date, sysdate ) - ab.async_batch_start_date) * 24 * 60, 60 ) ), 2, 0 ) ||
                ':'                                                                                                      ||
                 lpad ( trunc ( mod ( ( nvl (  ab.async_batch_end_date, sysdate ) - ab.async_batch_start_date) * 24 * 60 * 60, 60 ) ), 2, 0 )
         end
        into v_ret
        FROM    async_batch ab where  ab.async_batch_id= in_batch_id;
     
     END IF;
   exception
     when NO_DATA_FOUND then 
       pkg_os_logging.sp_log_error(in_session_id,in_session_id,v_procedure_name,' Error getting executer time date for batc:'||in_batch_id||
       '  Job:'||in_job_id);
   end;    
   return V_RET;
 end;
 
 function fn_get_job_start_time(  in_session_id in object.object_id%type,
                                 in_job_id   in async_job_status.job_id%type,
                                 in_batch_id async_batch.async_batch_id%type) return varchar2

 is
   v_ret varchar2(100);
   v_procedure_name varchar2(100):= 'fn_get_job_start_time';
 begin
   begin
     if nvl( in_job_id,0) >0   then
       select case
       when ajs.job_start_date is null then 
         null      
       else 
          to_char( ajs.job_start_date,pkg_os_constant.DragonDateFormatDetail)        
       end
       into v_ret
       FROM    async_job_status ajs where ajs.job_id=in_job_id;
     elsif  nvl( in_batch_id ,0) >0   then
       select case
       when ab.async_batch_start_date is null then
          null
       else
          to_char( ab.async_batch_start_date,pkg_os_constant.DragonDateFormatDetail)  
       end
       into v_ret FROM    async_batch ab where  ab.async_batch_id= in_batch_id;  
     end if;
   exception
     when NO_DATA_FOUND then 
       pkg_os_logging.sp_log_error(in_session_id,in_session_id,v_procedure_name,' Error getting start date for batch:'||in_batch_id||
       '  Job:'||in_job_id);
   end;    
   return v_ret;
 end;


 function fn_get_job_end_time(  in_session_id in object.object_id%type,
                                 in_job_id   in async_job_status.job_id%type,
                                 in_batch_id async_batch.async_batch_id%type) return varchar2

 is
   v_ret varchar2(100);
   v_procedure_name varchar2(100):= 'fn_get_job_end_time';
 begin
   begin
     if nvl( in_job_id,0) >0   then
       select case
       when ajs.job_end_date is null then 
         null      
       else 
          to_char( ajs.job_end_date,pkg_os_constant.DragonDateFormatDetail)        
       end
       into v_ret
       FROM    async_job_status ajs where ajs.job_id=in_job_id;
     elsif  nvl( in_batch_id ,0) >0   then
       select case
       when ab.async_batch_end_date is null then
          null
       else
          to_char( ab.async_batch_end_date,pkg_os_constant.DragonDateFormatDetail)  
       end
       into v_ret FROM    async_batch ab where  ab.async_batch_id= in_batch_id;  
     end if;
   
   exception
     when NO_DATA_FOUND then 
       pkg_os_logging.sp_log_error(in_session_id,in_session_id,v_procedure_name,' Error getting end date for batch:'||in_batch_id||
       '  Job:'||in_job_id);
   end; 
   return v_ret;
 end;
 
 function fn_get_job_status(  in_session_id in object.object_id%type,
                                 in_job_id   in async_job_status.job_id%type,
                                 in_batch_id async_batch.async_batch_id%type) return varchar2

 is
   v_ret varchar2(100) := '';
   v_enum  number :=0 ;
   v_procedure_name varchar2(100):= 'fn_get_job_status';
 begin

   begin
     if nvl( in_job_id,0) >0   then
       select nvl(job_status,0)
       into v_enum
       FROM    async_job_status ajs where ajs.job_id=in_job_id;
     elsif nvl( in_batch_id ,0) >0   then
       select  nvl(async_batch_status,0)
       into v_enum FROM    async_batch ab where  ab.async_batch_id= in_batch_id;  
     end if;

        v_ret := pkg_os_lookup.fn_lookup_list_text_get(5344906, v_enum);

    
   exception
     when NO_DATA_FOUND then 
       pkg_os_logging.sp_log_error(in_session_id,in_session_id,v_procedure_name,' Error getting job status for batch:'||in_batch_id||
       '  Job:'||in_job_id);
   end; 

   return v_ret;
 end;


 function fn_get_upload_table_nm(in_session_id in object.object_id%type,
                                 in_content_type_id document_content_type.document_content_type_id%type)
                                 return varchar2
 is 
    v_object_type_id object_type.OBJECT_TYPE_ID%type;
    v_procedure_name varchar2(100):= pkg_name||'fn_get_upload_table_nm';
    v_ret varchar2(100);
    v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_session_id) ;

 begin
    begin
        select dct.document_sched_object_type_id into v_object_type_id
        from document_content_type dct where dct.document_content_type_id=in_content_type_id;
        
        if v_session_control.gLogging_Performance then 
           pkg_os_logging.sp_log_info(in_session_id,in_session_id,v_procedure_name,
           'Object configured for incoming content type:'||in_content_type_id||
           ' is:'||v_object_type_id);
        end if; 
        if v_object_type_id is not null then 
           v_ret := pkg_os_object_type.fn_object_type_row(in_object_type_id => v_object_type_id).default_table_name;
        end if;
    exception
      when NO_DATA_FOUND then 
        pkg_os_logging.sp_log_info(in_session_id,in_session_id,v_procedure_name,
        'Error getting upload object type for content type:'||in_content_type_id);
    end;
        
    return v_ret;
 end;
 
 procedure sp_schedule_import_init(in_session_id        in object.object_id%type,
                               in_transaction_id         in object.object_id%type,
                               in_action_id              in        action.action_id%type,
                               in_action_object_id       in object.object_id%type,
                               in_action_object_type_id  in             object_type.object_type_id%type,
                               io_action_outcome_id      in out outcome.outcome_id%type)
is
   v_base_table_nm varchar2(100);
   v_document_content_id document_content_type.document_content_type_id%type;
   v_object_type_id object_type.OBJECT_TYPE_ID%type;
   v_document_id  document.document_id%type;
   v_sql varchar2(200);
   v_parent_object_id   object.object_id%type;
   v_parent_object_type object_type.OBJECT_TYPE_ID%type;
   
   v_ptp_id  object.object_id%type;
   v_policy_customer_id object_type.OBJECT_TYPE_ID%type;
   v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
   v_procedure_nm  varchar2(100):= pkg_name||'sp_schedule_import_init';
   v_document_type_id   object_type.OBJECT_TYPE_ID%type;
begin
  v_document_type_id := pkg_os_object.fn_object_type_get(in_session_id => in_session_id,
                                                        in_transaction_id => in_transaction_id,
                                                        in_object_id => in_action_object_id); 
  if v_document_type_id = 3361948 then 
    v_parent_object_id   := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id ,
                                                                   in_action_object_id,'32770648.32770248'); 
  else
    v_parent_object_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_action_object_id );
  end if;                                                       
  --from incoming docuemnt get base table name
  v_document_content_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                             in_transaction_id => in_transaction_id,
                                                             in_object_id => in_action_object_id,
                                                             in_bv_id => 200818);
  v_document_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                             in_transaction_id => in_transaction_id,
                                                             in_object_id => in_action_object_id,
                                                             in_bv_id => 201227); 
  
  if v_session_control.gLogging_Performance then 
    pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,v_procedure_nm,
    ' v_document_content_id:'||v_document_content_id||' v_document_id:'||v_document_id);
  end if;
  
  select dct.document_sched_object_type_id into v_object_type_id
  from document_content_type dct where dct.document_content_type_id=v_document_content_id;
  
  v_base_table_nm := pkg_os_object_type.fn_object_type_row(in_object_type_id => v_object_type_id).default_table_name;
  
  
  v_parent_object_type := pkg_os_object.fn_object_type_get(in_session_id => in_session_id,
                                                           in_transaction_id =>in_transaction_id,
                                                           in_object_id => v_parent_object_id );

  if v_parent_object_type = gObjType_PTP then
      v_ptp_id := v_parent_object_id;
  elsif (v_parent_object_type = 629 or v_parent_object_type = 2356809) then  --212318
    
    v_ptp_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                   in_transaction_id => in_transaction_id,
                                                   in_object_id => v_parent_object_id,
                                                   in_bv_id => 212318);
 else
    
    v_ptp_id := pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                                   in_transaction_id => in_transaction_id,
                                                   in_object_id      => v_parent_object_id);
 end if;
 v_policy_customer_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_ptp_id, '22067105' );
  
  v_sql:= ' update '||v_base_table_nm||' set ptp_id='||v_ptp_id ||',policy_customer_object_id='||v_policy_customer_id||'  where batch_id='||v_document_id;


  if v_session_control.gLogging_Performance then 
    pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,v_procedure_nm,
    ' v_sql:'||v_sql);
  end if;  
  
  execute immediate v_sql;
  
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end;

function fn_add_insured_get_cpp_loc(in_session_id in object.object_id%type,
                                    in_transaction_id in object.object_id%type,
                                    in_location_id    in number,
                                    in_asset_state    in varchar2,
                                    in_ptp_id     in object.object_id%type,
                                    in_type_id  in object_type.OBJECT_TYPE_ID%type default null ) return object.object_id%type
is
  v_loc_id object.object_id%type;
  v_loc_state_enum number;
begin
  begin
    v_loc_state_enum := pkg_os_lookup.fn_get_lookup_list_short_enum(20061,upper(in_asset_state));
    
    select LOCATION_ID  into v_loc_id from DRAGON_CUSTOMER_LOCATION dcl 
    where ptp_id=in_ptp_id and LOCATION_SEQUENCE= in_location_id and location_state=v_loc_state_enum and 
    pkg_os_object.fn_object_type_get(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_object_id => dcl.location_id)=2191505;
    
    if in_type_id is not null then 
      --26450005PolicyCFLocation - xReference - _Reference_Covered Location
      v_loc_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_loc_id,26450005);
    end if;
   return v_loc_id;
  exception 
    when TOO_MANY_ROWS then 
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_cpp_loc' ,
                                  'Getting more than one record for location id:'||in_location_id||
                                  ' PTP ID:'|| in_ptp_id);
      return null;
    when NO_DATA_FOUND then
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_cpp_loc' ,
                                  'No record found for location id:'||in_location_id||
                                  ' PTP ID:'|| in_ptp_id); 
     return null;     
   end;
    
  
end;


function fn_add_insured_get_gl_loc(in_session_id in object.object_id%type,
                                    in_transaction_id in object.object_id%type,
                                    in_location_id    in number,
                                    in_asset_state    in varchar2,
                                    in_ptp_id     in object.object_id%type,
                                    in_type_id  in object_type.OBJECT_TYPE_ID%type default null ) return object.object_id%type
is
  v_loc_id object.object_id%type;
  v_loc_state_enum number;
begin
  begin
    v_loc_state_enum := pkg_os_lookup.fn_get_lookup_list_short_enum(20061,upper(in_asset_state));
    
    select LOCATION_ID  into v_loc_id from DRAGON_CUSTOMER_LOCATION dcl 
    where ptp_id=in_ptp_id and LOCATION_SEQUENCE= in_location_id and location_state=v_loc_state_enum and 
    pkg_os_object.fn_object_type_get(in_session_id => in_session_id,in_transaction_id => in_transaction_id,in_object_id => dcl.location_id)=2184605;
    
    if in_type_id is not null then 
      --26378305PolicyGLLocation - xReference - _Reference_Covered Location
      v_loc_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_loc_id,26378305);
    end if;
   return v_loc_id;
  exception 
    when TOO_MANY_ROWS then 
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_gl_loc' ,
                                  'Getting more than one record for location id:'||in_location_id||
                                  ' PTP ID:'|| in_ptp_id);
      return null;
    when NO_DATA_FOUND then
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_gl_loc' ,
                                  'No record found for location id:'||in_location_id||
                                  ' PTP ID:'|| in_ptp_id); 
     return null;     
   end;
    
  
end;


function fn_add_insured_get_vehicle(in_session_id in object.object_id%type,
                                    in_transaction_id in object.object_id%type,
                                    in_vehicle_seq    in number,
                                    --in_asset_state    in varchar2,
                                    in_ptp_id     in object.object_id%type ) return object.object_id%type
is
  v_vehicle_id object.object_id%type;
 -- v_vehicle_state_enum number;
begin
  begin
   -- v_vehicle_state_enum := pkg_os_lookup.fn_get_lookup_list_short_enum(20061,upper(in_asset_state));
    
    select vehicle_id  into v_vehicle_id from DRAGON_CUSTOMER_VEHICLE dcv   
    where ptp_id=in_ptp_id and dcv.vehicle_seq= in_vehicle_seq ;
    

   return v_vehicle_id;
  exception 
    when TOO_MANY_ROWS then 
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_vehicle' ,
                                  'Getting more than one record for vehicle id:'||in_vehicle_seq||
                                  ' PTP ID:'|| in_ptp_id);
      return null;
    when NO_DATA_FOUND then
      pkg_os_logging.sp_log_info(in_session_id ,in_transaction_id , 'fn_add_insured_get_vehicle' ,
                                  'No record found for vehicle id:'||in_vehicle_seq||
                                  ' PTP ID:'|| in_ptp_id); 
     return null;     
   end;
    
  
end;

function fn_get_delivery_pref_addr(in_session_id in object.object_id%type,
                                   in_transaction_id  in object.object_id%type,
                                   in_source_object_id in object.object_id%type,
                                   in_parent_object_id in object.object_id%type,
                                   in_traget_object_type in object_type.OBJECT_TYPE_ID%type ) return object.object_id%type
is
  v_target_obj_list pkg_os_object.t_object_list;
  v_index integer;
  v_source_value  varchar2(200);
  v_target_value  varchar2(200);
  v_ret_object  object.object_id%type;
begin
  --search all the childrens
  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                      in_transaction_id,
                                                      in_parent_object_id,
                                                      in_traget_object_type,
                                                      v_target_obj_list);
 v_source_value:= pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_source_object_id,21783501)||'.'||
 pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,in_source_object_id,'21783501.35778248')||'.'||
 pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,in_source_object_id,'21783501.35778448');
 
 v_index := v_target_obj_list.first;
 loop
   exit when v_index is null;
   v_target_value := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_target_obj_list(v_index),21783501)||'.'||
   pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_target_obj_list(v_index),'29325214')||'.'||
   pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,v_target_obj_list(v_index),'29327414');   
   
   if upper(v_source_value) = upper(v_target_value) then 
     v_ret_object:= v_target_obj_list(v_index);
     exit;
   end if;
   v_index := v_target_obj_list.next(v_index);
 
 end loop;
 
 return v_ret_object;
end;

function fn_get_add_int_partner(in_session_id in object.object_id%type,
                                in_transaction_id in object.object_id%type,
                                in_partner_name in varchar2) return object.object_id%type
is
  v_partner_id object.object_id%type;
begin
  
    select dp.partner_id  into v_partner_id from dragon_partner dp where
    upper(partner_name) = upper(in_partner_name) and partner_state_id=32905 and partner_type_id=1546;

    return v_partner_id;
  
  exception
    when others then 
      return null;


end;

function fn_get_partner_objusage(in_session_id in object.object_id%type,
                                  in_transaction_id in object.object_id%type,
                                  in_transformed_object in object.object_id%type,
                                  in_partner_name in varchar2) return object.object_id%type
is
  v_session_new_object object.object_id%type;
  v_deliverpref_list pkg_os_object.t_object_list;
  v_partner_id object.object_id%type;
  v_delivery_pref_id object.object_id%type;
  v_object_usage_id  object.object_id%type;
  v_index integer;
begin
  --get current transformed object which is DeliveryPreference 
  v_session_new_object := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,pkg_os_constant_bv.gbv_SessionNewObject);
  
  pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,'fn_get_partner_objusage',
  ' Session new Object :'||v_session_new_object);
  
  --check if sessionon new object is not DeliveryPreference
  if v_session_new_object is not null and 
     pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_session_new_object)= 3144746 then
  
      pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,'fn_get_partner_objusage',
      ' Session new Object :'||v_session_new_object||' is of type:'||3144746);
    --get objectusage object below DeliveryPreference and returned the one that matches
       v_object_usage_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id   => in_session_id,
                                                      in_transaction_id             => in_transaction_id,
                                                      in_parent_object_id           => v_session_new_object,
                                                      in_object_type_id             => 2383746,
                                                      in_business_variable_id       => 30000946,
                                                      in_business_variable_value    => 800 );
      pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,'fn_get_partner_objusage',
      ' Got current Object Usage :'||v_object_usage_id);  
  
  else
  
    v_partner_id:= fn_get_add_int_partner( in_session_id,in_transaction_id,in_partner_name);
    
    if v_partner_id is not null then 
    
       v_delivery_pref_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id                 => in_session_id,
                                                      in_transaction_id             => in_transaction_id,
                                                      in_parent_object_id           => v_partner_id,
                                                      in_object_type_id             => 3144746,
                                                      in_business_variable_id       => 21783501,
                                                      in_business_variable_value    => in_transformed_object );
                                                      
       pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,'fn_get_partner_objusage',
       
       ' Delivery Pref  :'||v_delivery_pref_id||' for Parent:'||v_partner_id);
       
        v_object_usage_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id   => in_session_id,
                                                      in_transaction_id             => in_transaction_id,
                                                      in_parent_object_id           => v_delivery_pref_id,
                                                      in_object_type_id             => 2383746,
                                                      in_business_variable_id       => 30000946,
                                                      in_business_variable_value    => 800 );      
       
       pkg_os_logging.sp_log_info(in_session_id,in_transaction_id,'fn_get_partner_objusage',
       ' Got current Object Usage :'||v_object_usage_id);  
    
    end if;
  
  end if;
  
  return v_object_usage_id;

end;

procedure sp_update_obj_insured_dm(in_session_id in object.object_id%type,
                                  in_transaction_id in object.object_id%type,
                                  in_action_object_id in object.object_id%type, 
                                  io_action_outcome_id          in out nocopy  outcome.outcome_id%type)
is
 cursor c_add_in is select object_id from ADDITIONAL_INSURED_DM where 
 ptp_id = in_action_object_id and    OBJECT_TYPE_ID =3365448;
 v_datamart_up char(1);

begin
  for l_add_in in c_add_in loop
     pkg_os_datamart.sp_datamart_update_row(in_session_id     => in_session_id,
                                            in_transaction_id => in_transaction_id,
                                            in_object_id      => l_add_in.object_id,
                                            io_datamart_tf    => v_datamart_up);
  end loop;
   
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end;

----OSPRODUCT-33434

--create XX Objects when added at policy Customer level

procedure sp_list_refer_obj_creation(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
as

     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_list_refer_obj_creation';
     v_list_object_id                   object.object_id%type;
     v_child_object_type_id             object_type.object_type_id%type;
     v_child_parent_obj_type_id         object_type.object_type_id%type;
     v_page_layout_block_id             page_layout_block.page_layout_block_id%type;
     v_object_list                      pkg_os_object.t_object_list             := pkg_os_object.gnull_object_list;
     v_root_object_id                   object.object_id%type;
     v_root_object_type_id              object_type.object_type_id%type;
     v_ref_par_obj_type_id              object_type.object_type_id%type; -- not used
	 v_new_obj_id                       object.object_id%type;
	 v_new_ref_obj_id                   object.object_id%type;
     v_new_parent_next_iteration        object.object_id%type;
	 v_referenced_parent_id             object.object_id%type;
     v_driver_parent_object_id          object.object_id%type;
     v_new_driver_object_id             object.object_id%type;
     v_policy_commercial_id             object.object_id%type;
     v_reference_constraint_path        object_relationship.REFERENCE_CONSTRAINT_PATH%type;
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
   v_ptp_id                          object.object_id%type;
     v_datamart_update                 char(1);

	cursor C_LIST_ADD_REF_OBJECT ( in_block_id in page_layout_block.page_layout_block_id%type)
    is
     select
        *
     from
        LIST_ADD_ASSOC_REF_OBJECT d
     where
        d.BLOCK_ID = in_block_id order by seq;
		
         
begin 
     v_list_object_id                   := pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, io_object_cache, in_session_id,   pkg_os_constant_bv.gbv_GenObjCurrentList     );
     v_child_object_type_id             := pkg_os_object_cache_io.fn_obj_cache_object_bv_get( in_session_id, in_transaction_id, io_object_cache, v_list_object_id, pkg_os_constant_bv.gbv_ListElementObjectType ); -- Holds Blocks 1-M object type
     v_page_layout_block_id             := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_list_object_id, pkg_os_constant_bv.gbv_ListLayoutBlockID ); -- Holds Block ID
     v_new_parent_next_iteration        := null;
	 
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log_core( in_session_id, in_transaction_id, v_procedure_name, '|||||| Adding multiplicity child of Type:'||pkg_os_object_type.fn_object_type_name_get(v_child_object_type_id)||' for PageLayoutBlockID:'||v_page_layout_block_id||' ListObjectID:'||v_list_object_id );
     end if;

     -- The ListExistenceObject BV in the list_object holds the parent object ID.
     --

     v_root_object_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_list_object_id, pkg_os_list.gbv_ListExistenceObjectID ); -- Parent Object ID that drives the 1-M Block

     -- The Parent Object ID should never be null...

     if v_root_object_id is null
     then

          pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, ' ... Unable to find the root object to act as parent for PageLayoutBlockID:'||v_page_layout_block_id||' ListObjectID:'||v_list_object_id );
          raise no_data_found;

     end if;
	 
	 
	 for R_LIST_ADD_REF_OBJECT in C_LIST_ADD_REF_OBJECT( v_page_layout_block_id ) 
	 loop

              if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, 'Child Object to be created for Obj Type: '||R_LIST_ADD_REF_OBJECT.ASSOC_OBJ_TYPE_ID||' Parent Obj ID: '||v_root_object_id);
              end if;
         

      if (R_LIST_ADD_REF_OBJECT.TYPE_OF_REF = 2) then -- refowner
	
	     		 
		 if (v_new_parent_next_iteration is not null) then -- Ensure the first object Child object to be added is child of the Block driven Parent else this logic wont work with V_root_object_id
		    
			  v_root_object_id := v_new_parent_next_iteration;
		 
		 end if;
	
          if (R_LIST_ADD_REF_OBJECT.PARENT_LIST_BLOCK_ID is not null) then

              v_root_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_root_object_id);
			
			  select 
			     ASSOC_OBJ_TYPE_ID into v_child_parent_obj_type_id 
              from 
                 LIST_ADD_ASSOC_REF_OBJECT  
              where 
                 id = R_LIST_ADD_REF_OBJECT.PARENT_LIST_BLOCK_ID;

              if(v_child_parent_obj_type_id != v_root_object_type_id) then

                 pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, ' ... Child Object Type ID to be created doesnt match the parent object type id:'||v_child_parent_obj_type_id||' v_root_object_type_id:'||v_root_object_type_id );
				 exit; -- Exit the loop if the child object type to be created parent doesnt match the existing parent object type id.
              
			  end if;

          end if;		  
		  
			 pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    R_LIST_ADD_REF_OBJECT.ASSOC_OBJ_TYPE_ID,
                    v_root_object_id,
                    v_new_obj_id
               );
         
         pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_obj_id,v_datamart_update);
         
               v_new_parent_next_iteration := v_new_obj_id;
			   
			   
               if (R_LIST_ADD_REF_OBJECT.PARENT_REF_BV_ID is null) then
 
                   v_ptp_id                    := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, v_root_object_id, gObjType_PTP);
                   v_policy_commercial_id      := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCommercial); 
                   v_referenced_parent_id      := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_policy_commercial_id, gObjType_PolicyGL);
                   -- Above GL is directly child of PolicyCPPGL incase of CPPObject model need to drill down one more level to get the object id
               else
                   v_referenced_parent_id := pkg_os_object_io.fn_object_ref_owner_get (in_session_id,
                                                                                       in_transaction_id,
                                                                                       v_root_object_id, -- Customer Jurisdiction
                                                                                       R_LIST_ADD_REF_OBJECT.PARENT_REF_BV_ID
															                          );
			   end if;
			   
																		 
               pkg_os_object.sp_object_create
                 (
                    in_session_id,
                    in_transaction_id,
                    R_LIST_ADD_REF_OBJECT.REF_OBJ_TYPE_ID,
                    v_referenced_parent_id,
                    v_new_ref_obj_id
                  );																				 
            
               pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_ref_obj_id,v_datamart_update);

               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_new_ref_obj_id, R_LIST_ADD_REF_OBJECT.REF_BV_ID, v_new_obj_id );
       
      elsif(R_LIST_ADD_REF_OBJECT.TYPE_OF_REF = 1) then -- Tied Relation 
	  
        if (v_new_parent_next_iteration is not null) then -- Ensure the first object Child object to be added is child of the Block driven Parent else this logic wont work with V_root_object_id
		    
			v_root_object_id := v_new_parent_next_iteration;
		 
		 end if; 
		 
		if (R_LIST_ADD_REF_OBJECT.PARENT_LIST_BLOCK_ID is not null) then

              v_root_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_root_object_id);
			
			  select 
			     ASSOC_OBJ_TYPE_ID into v_child_parent_obj_type_id 
              from 
                 LIST_ADD_ASSOC_REF_OBJECT  
              where 
                 id = R_LIST_ADD_REF_OBJECT.PARENT_LIST_BLOCK_ID;

              if(v_child_parent_obj_type_id != v_root_object_type_id) then

                 pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, ' ... Child Object Type ID to be created doesnt match the parent object type id:'||v_child_parent_obj_type_id||' v_root_object_type_id:'||v_root_object_type_id );
				 exit; -- Exit the loop if the child object type to be created parent doesnt match the existing parent object type id.
              
			  end if;

        end if;
        -- Create Location/Building Objects under Policy XX level and its respective policy Customer level
        pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    R_LIST_ADD_REF_OBJECT.ASSOC_OBJ_TYPE_ID,
                    v_root_object_id,
                    v_new_obj_id
               );
      pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_obj_id,v_datamart_update);

        v_new_parent_next_iteration := v_new_obj_id;         

        begin
          select 
              reference_constraint_path
          into 
              v_reference_constraint_path
          from 
              object_relationship
          where 
            reference_bv_id               = R_LIST_ADD_REF_OBJECT.REF_BV_ID and 
            object_relationship_type_id   = pkg_os_constant.gObjRelation_Refers_to and
            reference_constraint_type_id  = pkg_os_constant.gReferenceC_Tied;
        exception
          when NO_DATA_FOUND then 
            pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, ' ... Unable to find the v_reference_constraint_path:'||R_LIST_ADD_REF_OBJECT.REF_BV_ID);
          raise no_data_found;
        end;
		
        v_driver_parent_object_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_new_obj_id, v_reference_constraint_path );  
		
        if v_driver_parent_object_id is null then

            pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unable to find driver object parent ...' );
            raise no_data_found;

        end if;
		
        pkg_os_object.sp_object_create
            (
                 in_session_id,
                 in_transaction_id,
                 R_LIST_ADD_REF_OBJECT.REF_OBJ_TYPE_ID,
                 v_driver_parent_object_id,
                 v_new_driver_object_id
            );
      
      pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_driver_object_id,v_datamart_update);
    
        if v_session_control.gLogging_Full then

            pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Created Driver ObjectID:'||v_new_driver_object_id||' Child of ObjectID:'||v_driver_parent_object_id );

        end if;
        --
        --   Set up the relationship between the new object, and the new driver object.
        --
        pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_new_obj_id, R_LIST_ADD_REF_OBJECT.REF_BV_ID, v_new_driver_object_id );

            
      end if;
	  
    end loop;

    
  io_action_outcome_id:= pkg_os_constant.gOutcome_OK;
end sp_list_refer_obj_creation;

--OSPRODUCT-32391
function fn_get_GL_Propid_seq
    (
        In_GL_Prop_id   number
     )
return number
as
     v_gl_propid   number    := null  ;

begin

    if (In_GL_Prop_id is null) then

        select  GL_PROPID_SEQ.nextval
          into  v_gl_propid
          from  dual;
    else

        v_gl_propid := In_GL_Prop_id;

    end if;

     return v_gl_propid;

end fn_get_GL_Propid_seq;


procedure sp_create_main_tree
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_message_list               in out nocopy  pkg_os_message.t_message_list,
     in_action_id                  in             action.action_id%type,
     in_action_object_id           in             object.object_id%type,
     in_action_object_type_id      in             object_type.object_type_id%type,
     io_action_outcome_id          in out nocopy  outcome.outcome_id%type
)
			 
as
									   

     v_procedure_name   constant system_log.program_name%type   := pkg_name||'sp_create_main_tree';
     v_policy_trx_type pd_transaction_type.pd_transaction_type_id%type;
     v_quote_or_nb_ind char(1);
     v_tree_load_action integer;
    v_ptp_id  object.object_id%type;
begin
    if pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                        in_transaction_id => in_transaction_id,
                                        in_object_id      => in_action_object_id) =2276904 then 
     
      v_ptp_id:= in_action_object_id;
    elsif  pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                        in_transaction_id => in_transaction_id,
                                        in_object_id      => in_action_object_id) =629 then 
      v_ptp_id := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                    in_transaction_id => in_transaction_id,
                                                    in_object_id => in_action_object_id,in_bv_id => 212318);
    else
      v_ptp_id :=pkg_os_product.fn_policy_object_get(in_session_id     => in_session_id,
                                          in_transaction_id => in_transaction_id,
                                          in_object_id      => in_action_object_id);
    end if;

     pkg_os_logging.sp_log_info
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '..... Creating trees...'
     );

     -- Get Transaction Type
     v_policy_trx_type := pkg_os_policy_transaction_type.fn_object_transaction_get(in_session_id, in_transaction_id, in_action_object_id);

     if ( v_policy_trx_type = pkg_os_constant_enum.gPolicyTran_NewBusiness )
     then
          v_quote_or_nb_ind := 'T';
     else
          v_quote_or_nb_ind := 'F';
     end if;

									 


     if (v_quote_or_nb_ind = 'T')
     then

          v_tree_load_action := 819046;      -- AL_PolicyTransactionPolicy_LS_Quote_TreeLoad_DB

     else

          v_tree_load_action := 896746;      -- AL_Policy_Endorsement_LS_PNBT_TreeLoad_DB

     end if;

     pkg_os_tree.sp_tree_create
     (
          in_session_id,
          in_transaction_id,
          io_object_cache,
          io_message_list,
          v_tree_load_action,
          v_ptp_id,
          gObjType_PTP,
          io_action_outcome_id,
          'F'             -- Don't perform Tree Completion now
     );

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end ;

procedure sp_submit_ls_job(in_session_id                 in             object.object_id%type,
                           in_transaction_id             in             object.object_id%type,
                           in_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
                           io_message_list               in out nocopy  pkg_os_message.t_message_list,
                           in_action_id                  in             action.action_id%type,
                           in_action_object_id           in             object.object_id%type,
                           io_action_outcome_id          in out nocopy  outcome.outcome_id%type
                          )
is

  v_master_customer_id object.object_id%type;
  v_large_schedule_controller  object.object_id%type;
  v_object_type object_type.OBJECT_TYPE_ID%type;
  v_pt_id  object.object_id%type;


  v_ref_current_job  object.object_id%type;
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
  v_procedure_name   varchar2(100) := 'sp_submit_ls_job';
  v_ptp_id  object.object_id%type;
begin
  v_object_type := pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id, in_action_object_id);
  
  if v_object_type = 24 then 

    v_large_schedule_controller := pkg_os_object_search.fn_object_11_child_get(in_session_id => in_session_id,
                                                                             in_transaction_id => in_transaction_id,
                                                                             in_parent_object_id => in_action_object_id,
                                                                             in_child_object_type_id => 3771448);
  elsif v_object_type = 629 or v_object_type=2356809 then 
      
      v_large_schedule_controller := pkg_os_object_search.fn_object_11_child_get(in_session_id => in_session_id,
                                                                             in_transaction_id => in_transaction_id,
                                                                            in_parent_object_id => in_action_object_id,
                                                                             in_child_object_type_id => 3172746);    
  else
      IF v_object_type = 3361948 then
        v_ptp_id   := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id ,in_action_object_id,'32770648.32770248');
        if pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,v_ptp_id )   = gObjType_PT then
          v_pt_id := v_ptp_id;
        else
          v_pt_id :=pkg_os_object_search.fn_object_get_parent_of_type(in_session_id => in_session_id,
                                                                      in_transaction_id => in_transaction_id,
                                                                      in_object_id =>v_ptp_id ,
                                                                      in_parent_object_type_id => 629);
        end if;  
      else
        v_pt_id :=pkg_os_object_search.fn_object_get_parent_of_type(in_session_id => in_session_id,
                                                                    in_transaction_id => in_transaction_id,
                                                                    in_object_id =>in_action_object_id ,
                                                                    in_parent_object_type_id => 629);
      end if;
                                                                  
      v_large_schedule_controller := pkg_os_object_search.fn_object_11_child_get(in_session_id => in_session_id,
                                                                             in_transaction_id => in_transaction_id,
                                                                             in_parent_object_id => v_pt_id,
                                                                             in_child_object_type_id => 3172746);   
  end if;
    
  v_master_customer_id := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id => in_session_id,
                                                                               in_transaction_id => in_transaction_id ,
                                                                               in_object_id => in_action_object_id);
    
  if v_large_schedule_controller is null then 
      --raise error of no LS object found;
      null;
  end if;
    
    ---first submit job
  pkg_os_dap.sp_prepare_dap_job_submission (
             in_session_id,
             in_transaction_id,
             in_object_cache,
             io_message_list,
             io_action_outcome_id,
             in_action_id,
             in_action_object_id
        );
   --get the submitted job id
   --210356.30253401~3172746.310
  v_ref_current_job := pkg_os_object_io.fn_object_bv_get(in_session_id => in_session_id,
                                                          in_transaction_id => in_transaction_id ,
                                                          in_object_id => in_session_id ,
                                                          in_bv_id => 30253401);
  if v_ref_current_job is null then 
     --raise error
     null;
  end if;
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        ' Setting current job reference : '
        ||v_ref_current_job
        ||' LS Controller: '
        || v_large_schedule_controller
        ||' Customer: '
        || v_master_customer_id
     );

  end if;
  IF v_object_type = 3361948 then
    --move objectasyn below PTP
    pkg_os_object.sp_object_parent_set(in_session_id       => in_session_id,
                                       in_transaction_id   => in_transaction_id,
                                       in_object_id        => v_ref_current_job,
                                       in_parent_object_id =>  v_ptp_id);
  end if;
   --set this reference on LargeScheduleController and master customer
   --36115248Customer - xReference - _Reference_Current or Most Recent Job
  pkg_os_object_io.sp_object_bv_set( in_session_id,
                                      in_transaction_id,
                                      v_master_customer_id,
                                      36115248,
                                      v_ref_current_job);
      
  pkg_os_object_io.sp_object_bv_set( in_session_id,
                                      in_transaction_id,
                                      v_large_schedule_controller,
                                      31916046,
                                      v_ref_current_job);                                    
 
  io_action_outcome_id := pkg_os_constant.gOutcome_OK;


end;


procedure sp_GL_Build_create_clone
(
     in_session_id      in   object.object_id%type,
     in_transaction_id      in          object.object_id%type,
     in_action_object_id       in    object.object_id%type,
     io_action_outcome_id     in out outcome.outcome_id%type
)
as

     v_procedure_name                 constant system_log.program_name%type := pkg_name || 'sp_GL_Build_create_clone';
     v_session_control                pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_action_object_type_id          object_type.object_type_id%type;
     v_parent_object_type_id          object_type.object_type_id%type;

     v_parent_object_id               object.object_id%type;
     v_cloned_object_id               object.object_id%type;

     v_reference_object_id            object.object_id%type;
     v_ref_parent_object_id           object.object_id%type;
     v_ref_parent_object_type_id      object_type.object_type_id%type;
     v_ref_cloned_object_id           object.object_id%type;
     v_ptp_id                         object.object_id%type;
     v_customer_location_id           object.object_id%type;

     v_building_sequence              number;
     v_datamart_tf                    char(1);

begin

     v_action_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);
     v_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);

     -- Get PTP ID
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);

     if ( v_action_object_type_id = gObjType_PolGLBuildLiabltyCov )
     then

          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_parent_object_id, gbv_GLLocation_RefCovered);
		  
		  v_building_sequence := (nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, v_parent_object_id),0) + 1);

     end if;

       
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Cloning ObjectID:'||in_action_object_id || ' Object Type:' || v_action_object_type_id ||
          ' with sequence number:' || v_building_sequence
     );
  end if;

     --
     --   Duplicate the current object ...
     --

     pkg_os_object_copy.sp_object_duplicate
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          v_cloned_object_id
     );

     pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_cloned_object_id, v_parent_object_id);
     v_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_parent_object_id );
     pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_cloned_object_id, v_action_object_type_id, v_parent_object_id, v_parent_object_type_id);
	 
	 

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cloned_object_id, gbv_GenericSequenceNumber, v_building_sequence);

     --
     --  Create Tied referenced objects and initialize the reference variable pointing to them ...
     --

     for x in (
          select
               reference_constraint_object_id,
               related_object_type_id,
               pkg_os_token.fn_strip_suffix( reference_constraint_path )  as reference_constraint_path,
               reference_constraint_rule_id,
               reference_bv_id
          from
               object_relationship
          where
               object_type_id = v_action_object_type_id
          and
               reference_constraint_type_id = pkg_os_constant_enum.gReferenceC_Tied -- pkg_os_constant_enum.gReferenceC_Constrained
     )
     loop

          -- Get the current referenced object - if one exists - if the reference is already set, we don't
          -- to need to work further

          v_reference_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, x.reference_bv_id);

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                              '.........Checking Tied reference for ObjectID:'|| in_action_object_id ||
                              ' Referenced ObjectID:'||v_reference_object_id );

          end if;

          if ( v_reference_object_id is not null )
          then

               --
               -- Clone the Reference Object also
               --

               v_ref_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_reference_object_id);

               --
               --   Duplicate the current object ...
               --

               pkg_os_object_copy.sp_object_duplicate
               (
                    in_session_id,
                    in_transaction_id,
                    v_reference_object_id,
                    v_ref_cloned_object_id
               );

               pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, v_ref_parent_object_id);
               v_ref_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_ref_parent_object_id );
               pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_ref_cloned_object_id, x.related_object_type_id, v_ref_parent_object_id, v_ref_parent_object_type_id);

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cloned_object_id, x.reference_bv_id, v_ref_cloned_object_id);
			   
			   
               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, gbv_GenericSequenceNumber, v_building_sequence);

               if (pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_ref_cloned_object_id) = gObjType_CustomerBuilding)
               then
                    -- Set the Building Name
                    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_ref_cloned_object_id, 21800301, 'Building ' || v_building_sequence);   -- Building Name

               end if;

          end if;  -- referenced object does not exist

     end loop;

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_cloned_object_id, v_datamart_tf);
   pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_ref_cloned_object_id, v_datamart_tf);

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_cloned_object_id);

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_GL_Build_create_clone;



procedure sp_GL_property_add_peer
(
     in_session_id            in        object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     io_object_cache          in out    pkg_os_object_cache.t_object_cache,
     in_action_object_id      in        object.object_id%type,
     in_action_object_type_id in        object_type.object_type_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as


     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_GL_property_add_peer';
     v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_id                   object.object_id%type;

     v_peer_parent_object_id    object.object_id%type;
     v_jurisdiction_id          object.object_id%type;
     v_location_id              object.object_id%type;
     v_location_seq_num         integer;

     v_building_id              object.object_id%type;
     v_building_seq_num         integer;

     v_datamart_tf              char(1);

     v_policycustomer_id        object.object_id%type;
     v_customer_location_id     object.object_id%type;
	 v_customer_building_id     object.object_id%type; --gbv_GLBuilding_RefCovered

begin

     -- In Action Object is PolicyCPPCF
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
     v_policycustomer_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);

     v_peer_parent_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_action_object_id);
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating new Object for ParentObjectID:'||v_peer_parent_object_id||
          ' ChildObjectTypeID:'||in_action_object_type_id ||
          ' PTP ID:' || v_ptp_id
     );
  end if;

     if (in_action_object_type_id = gObjType_PolGLJurisLiabltyCov) -- PolicyGLJurisdiction
     then

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_jurisdiction_id
          );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_jurisdiction_id, v_datamart_tf);
		  
		  -- Get Location Sequence Number
          v_location_seq_num := (nvl(fn_max_GL_location_seq_get( v_ptp_id, v_jurisdiction_id),0) + 1);

          -- Create child Location
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolGLLocLiabltyCov,          -- PolicyGLLocation
               v_jurisdiction_id,
               io_action_outcome_id,
               v_location_id
          );

       
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          -- Get Building Sequence Number
		   v_building_seq_num := (nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, v_location_id),0) + 1); 
		   
          -- Create child building
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolGLBuildLiabltyCov,               -- PolicyGLBuildingLiabCoverage
               v_location_id,
               io_action_outcome_id,
               v_building_id
          );
            
			v_customer_building_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_building_id, gbv_GLBuilding_RefCovered);
          -- Set Building Sequence Number
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_location_id, gbv_GLLocation_RefCovered);
		  
		  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_location_id, gbv_GenericSequenceNumber, v_location_seq_num);
		  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_location_id, v_datamart_tf);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);
		  
		   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, gbv_GenericSequenceNumber, v_building_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_jurisdiction_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_jurisdiction_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolGLLocLiabltyCov) -- PolicyGLLocation
     then
	 
         -- Get Location Sequence Number
          v_location_seq_num := (nvl(fn_max_GL_location_seq_get( v_ptp_id, v_peer_parent_object_id),0) + 1);
		  
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               in_action_object_type_id,               -- PolicyGLLocation
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_location_id
          );

          -- Set Location Sequence Number
      
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_location_id, gbv_GenericSequenceNumber, v_location_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_location_id, v_datamart_tf);

          -- Get Building Sequence Number
		   v_building_seq_num := (nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, v_location_id),0) + 1); 

          -- Create child building
          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolGLBuildLiabltyCov,               -- PolicyGLBuildingLiabCoverage
               v_location_id,
               io_action_outcome_id,
               v_building_id
          );
		  
		  		v_customer_building_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_building_id, gbv_GLBuilding_RefCovered);

          -- Set Building Sequence Number
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_location_id, gbv_GLLocation_RefCovered);
           
		   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_location_id, gbv_GenericSequenceNumber, v_location_seq_num);
		 
		  pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_location_id, v_datamart_tf);
		  
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);
		  
		  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, gbv_GenericSequenceNumber, v_building_seq_num);

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_location_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_location_id );

          end if;

     elsif (in_action_object_type_id = gObjType_PolGLBuildLiabltyCov) -- PolicyGLBuildingLiabCoverage
     then
          
          
          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_peer_parent_object_id, gbv_GLLocation_RefCovered);
		  
		  -- Get Building Sequence Number
		   v_building_seq_num := (nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, v_peer_parent_object_id),0) + 1); 
       

          sp_create_object_tied_refs
          (
               in_session_id,
               in_transaction_id,
               gObjType_PolGLBuildLiabltyCov,               -- PolicyGLBuildingLiabCoverage
               v_peer_parent_object_id,
               io_action_outcome_id,
               v_building_id
          );
		  
		  v_customer_building_id  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_building_id, gbv_GLBuilding_RefCovered);

          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_id, gbv_GenericSequenceNumber, v_building_seq_num );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_id, v_datamart_tf);
		  
		  pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, gbv_GenericSequenceNumber, v_building_seq_num );

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_building_id, v_datamart_tf);

          --
          --   Tell the session that a new Object has been created ...
          --

          if ( v_building_id is not null )
          then

               pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_building_id );

          end if;

   
     end if;

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_GL_property_add_peer;  



procedure sp_GL_property_add_location
(
     in_session_id            in        object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     io_object_cache          in out    pkg_os_object_cache.t_object_cache,
     in_action_object_id      in        object.object_id%type,
     in_action_object_type_id in        object_type.object_type_id%type,
     io_action_outcome_id     in out    outcome.outcome_id%type
)
as

     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_property_add_location';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_ptp_id                   object.object_id%type;

     v_peer_parent_object_id    object.object_id%type;
     v_jurisdiction_id          object.object_id%type;
     v_location_id              object.object_id%type;
     v_location_seq_num         number;

     v_building_id              object.object_id%type;
     v_building_seq_num         integer;

     v_datamart_tf              char(1);

     v_policyGL_juris_id        object.object_id%type;
     v_policyGLlocation_id      object.object_id%type;
     v_policy_customer_id       object.object_id%type;
     v_customer_juris_id        object.object_id%type;

     v_customer_address_id      object.object_id%type;
     v_customer_location_id     object.object_id%type;
     
     v_object_type object_type.OBJECT_TYPE_ID%type;
     
     v_new_customer_building    object.object_id%type;
     v_GL_building_id           object.object_id%type;
begin

     -- In Action Object ID is PolicyGLJurisidiction or PolicyGLLocation
     v_object_type := pkg_os_object.fn_object_type_get(in_session_id     => in_session_id,
                                                       in_transaction_id => in_transaction_id,
                                                       in_object_id      => in_action_object_id);
     -- v_policygl_id := in_action_object_id;
     if v_object_type = gObjType_PolGLLocLiabltyCov then  -- GL Location Object type id
       v_policyGL_juris_id := pkg_os_object.fn_object_parent_get(in_session_id     => in_session_id,
                                                                 in_transaction_id => in_transaction_id,
                                                                 in_object_id      => in_action_object_id);
     else
      v_policyGL_juris_id := in_action_object_id;
     
     end if;
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
     v_policy_customer_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);

   

     v_customer_juris_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policyGL_juris_id, gbv_GLJuris_RefCoveredJuris);
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Creating new Location using PTP ID:' || v_ptp_id ||
          ' PolicyCustomer:' || v_policy_customer_id ||
          ' PolicyGLJurisdiction:' || v_policyGL_juris_id || ' CustomerJurisdiction:' || v_customer_juris_id
     );
  end if;
    -- Get Location Sequence Number
     v_location_seq_num  := (nvl(fn_max_GL_location_seq_get( v_ptp_id, v_policyGL_juris_id),0) + 1);
	 
	 
     -- Create CustomerAddress as child of PolicyCustomer
   --  pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_CustomerAddress, v_policy_customer_id, v_customer_address_id);

     -- Create CustomerLocation as child of CustomerJurisdiction
     pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_CustomerLocation, v_customer_juris_id, v_customer_location_id);
     
	 pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_location_id, gbv_GenericSequenceNumber, v_location_seq_num );
     -- Set CustomerLocation._Reference_Located At -- OneShieldReference29254314CustomerLocation - xReference - _Reference_LocatedAt
    -- pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_location_id, gbv_CustLocation_RefLocatedAt, --v_customer_address_id);
	
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_customer_location_id,v_datamart_tf);
  -- pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_customer_address_id,v_datamart_tf);

     
     ----create customer building
      pkg_os_object.sp_object_create ( in_session_id, in_transaction_id, pkg_os_constant.gObjType_CustomerBuilding,
           v_customer_location_id, v_new_customer_building  );
		
        
	  
     pkg_os_object.sp_object_create(in_session_id, in_transaction_id, gObjType_PolGLLocLiabltyCov, v_policyGL_juris_id, v_policyGLlocation_id);

     v_building_seq_num  := (nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, v_policyGLlocation_id),0) + 1);   

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_customer_building, gbv_GenericSequenceNumber, v_building_seq_num );
	 
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_new_customer_building,v_datamart_tf);

     -- Set PolicyGLLocation._Reference_Covered Location -- 26378305 -PolicyGLLocation - xReference - _Reference_Covered Location
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policyGLlocation_id, gbv_GLLocation_RefCovered, v_customer_location_id);
	 
	 pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policyGLlocation_id, gbv_GenericSequenceNumber, v_location_seq_num );
    pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_policyGLlocation_id,v_datamart_tf);
   
        
	 
    
    --- create GLlocation building
     pkg_os_object.sp_object_create ( in_session_id, in_transaction_id, gObjType_PolGLBuildLiabltyCov, v_policyGLlocation_id,  v_GL_building_id  );
     pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_GL_building_id, gbv_GLBuilding_RefCovered, v_new_customer_building );
	 
	 pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_GL_building_id, gbv_GenericSequenceNumber, v_building_seq_num );
	 
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_GL_building_id,v_datamart_tf);
     
   
  if v_session_control.gLogging_Full then

     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '... Created new PolicyGLLocation:'||v_policyGLlocation_id || ' with sequence number:' || v_location_seq_num
     );
  end if;

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_policyGLlocation_id );


    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_GL_property_add_location;


procedure sp_object_child_GL_Building
(
     in_session_id              in     object.object_id%type,
     in_transaction_id          in     object.object_id%type,
     in_action_object_id        in     object.object_id%type,
     in_action_object_type_id   in     object_type.object_type_id%type,
     io_action_outcome_id       in out outcome.outcome_id%type
)
as


     v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_object_child_GL_Building';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_building_object_id        object.object_id%type;
     v_ptp_id                    object.object_id%type;
     v_customer_location_id      object.object_id%type;
     v_customer_building_id      object.object_id%type;
     v_building_sequence         number;

     v_datamart_tf               char(1);

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Creating building Object for ObjectID:'||in_action_object_id || ' Object Type:' || in_action_object_type_id
          );

     end if;
	 
	 -- Get PTP ID
     v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id, in_transaction_id, in_action_object_id, gObjType_PTP);
   
   if ( in_action_object_type_id = gObjType_PolGLLocLiabltyCov )
     then

          -- Get _Reference_Covered Location
          v_customer_location_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_action_object_id, gbv_GLLocation_RefCovered);
		  
		  v_building_sequence := nvl(fn_Max_GL_Building_Sequence_Get(v_ptp_id, in_action_object_id),0) + 1;

     end if;
   
     pkg_os_object.sp_object_create_child_of_type
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gObjType_PolGLBuildLiabltyCov,
          v_building_object_id
     );

     sp_object_create_references
     (
          in_session_id,
          in_transaction_id,
          v_building_object_id,
          io_action_outcome_id
     );

  
     v_customer_building_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_building_object_id, gbv_GLBuilding_RefCovered);
	 
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, gbv_GenericSequenceNumber, v_building_sequence);
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_building_object_id, gbv_GenericSequenceNumber, v_building_sequence);

       
     -- Set the Building Name
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_customer_building_id, 21800301, 'Building ' || v_building_sequence);   -- Building Name

     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_building_object_id, v_datamart_tf);
	 pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_customer_building_id, v_datamart_tf);

     -- Set Building as Session New Object
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_SessionNewObject, v_building_object_id);

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_object_child_GL_Building;



function fn_max_GL_location_seq_get
(
    in_ptp_id          in       object.object_id%type,
	in_Juris_id        in       object.object_id%type
)
return number
is
     v_return_value          number;

begin

     select
          max(d.LOCATION_SEQUENCE)
     into
          v_return_value
     from
          dragon_customer_location d
     where
          d.ptp_id = in_ptp_id
     and
          d.JURISDICTION_ID = in_Juris_id
     and
          d.OBJECT_STATE_ID <> 24 -- Deleted - GenericDestroyed
     and
          d.LOCATION_ID is not null;


   



     return v_return_value;

end fn_max_GL_location_seq_get;

function fn_get_class_code(in_session_id object.object_id%type, 
                           in_transaction_id  object.object_id%type,
                           in_class_code_id in cpp_us_0_property_class.id%type) return cpp_us_0_property_class.property_class_code%type
is
  v_return cpp_us_0_property_class.property_class_code%type;
begin
  begin
     select a.property_class_code
    into
      v_return
    from
      cpp_us_0_property_class a  
    where a.id= in_class_code_id;
  exception when no_data_found then 
     return null;
  end;
  
  return v_return;
  
end;

function fn_get_class_code_desc(in_session_id object.object_id%type, 
                           in_transaction_id  object.object_id%type,
                           in_class_code_id in cpp_us_0_property_class.id%type) return cpp_us_0_property_class.property_class_description%type
is
  v_return cpp_us_0_property_class.property_class_description%type;
begin
  begin
     select a.property_class_description
    into
      v_return
    from
      cpp_us_0_property_class a  
    where a.id= in_class_code_id;
  exception when no_data_found then 
     return null;
  end;
  return v_return;
end ;  

procedure sp_set_export_doc_parent(
  in_session_id      in   object.object_id%type,
  in_transaction_id  in   object.object_id%type   ,
  in_action_object_id       in  object.object_id%type ,
  io_action_outcome_id  in out outcome.outcome_id%type)
is
  

   v_target_eoc    object.object_id%type;
   v_source_eoc    object.object_id%type;

   v_procedure_name           constant system_log.program_name%type := pkg_name || 'sp_set_export_doc_parent';
   v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin
  ---move ExternalObjectDocument from Source usersession to current usersession
  --- get EOC from current usersession
  v_source_eoc := pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,in_action_object_id,'32770648.32769948');
  

  v_target_eoc := pkg_os_object_search.fn_object_11_child_get(in_session_id =>in_session_id ,
                                                              in_transaction_id => in_transaction_id,
                                                              in_parent_object_id => in_session_id,
                                                              in_child_object_type_id => 2266405);
  if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Moving Object:'||in_action_object_id || ' Source EOC:' || v_source_eoc||
               '  Traget EOC:'||v_target_eoc
          );    
  
  end if;
  --when sorce and target eoc are same then do nothing
  if v_source_eoc =  v_target_eoc then 
    if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 '...Source and Targe EOC are same...not doing anything!!!!'
            );    
    
    end if;
    
  else

	  if v_target_eoc is not null then 
		--delete EOC object
		pkg_os_object.sp_object_delete(in_session_id => in_session_id,
									   in_transaction_id => in_transaction_id,
									   in_parent_object_id => in_session_id ,
									   in_object_id => v_target_eoc,
									   in_object_type_id => 2266405);
	  
	  end if;
	  --move source EOC below current usersession
	  pkg_os_object.sp_object_parent_set(in_session_id => in_session_id,
										 in_transaction_id => in_transaction_id,
										 in_object_id => v_source_eoc,
										 in_parent_object_id => in_session_id);
 end if;		
 io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end;

function fn_Max_GL_Building_Sequence_Get
(
     in_ptp_id        in       object.object_id%type,
     in_location_id       in    object.object_id%type
)
return number
is

     v_return_value          number;

begin


    -- v_return_value := pkg_os_object.fn_object_children_count_get(in_location_id, gObjType_CustomerBuilding);


     select
          max(d.building_sequence)
     into
          v_return_value
     from
          dragon_property_schedule d
     where
          d.ptp_id = in_ptp_id
     and
          d.location_id = in_location_id
     and
          d.OBJECT_STATE_ID <> 24 -- Deleted - GenericDestroyed
     and
          d.building_id is not null;


     return v_return_value;

end fn_Max_GL_Building_Sequence_Get;
                    
END PKG_PC_LARGE_SCHEDULE;
/
