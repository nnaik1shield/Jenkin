create or replace package body pkg_db_stmt_policy
as

no_payer_found exception; -- #MP

-- OSPRODUCT-13702
INVALID_DATE_RANGE_FOR_INVOICE EXCEPTION;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_policy_trx_invoice_create  (Entry Point)
--
--
--   %USAGE
--        This procedure is a wrapper for sp_invoice_rollup_create() below, which creates a set of 'reconciliation' objects, that represent a
--        denormalized view of receivables.
--
--
--   %ALGORITHM
--  1.   Basing on policy ID get effective date, billing method and pd properties like Invoice Create Threshold amount
--       and Zero Invoice Generation flag
--  2.   Identify the Invoice recipient
--  3.   Identify payment plan  and policy term
--  4.   Basing on policy object and policy term get installments that are going to be included into invoice and determine
--       start and end date of the billing period being invoiced . Additionally, collect future installments for analysis.
--  5.   Basing on transaction type loop through every fitems that fit the billing period
--          a.   Increase total amount being invoiced
--          b.   Add an fitem to a list of fitems to be invoiced
--  6.   Check if an Invoice should be generated basing on GenerateZeroInvoice flag and InvoiceCreateThreshold amount and
--  7.   If invoice is going to be suppressed due to GenerateZeroInvoice or InvoiceCreateThreshold
--          a.   Mark all the installments that are going to be included into invoice as Suppressed
--          b.   Calculate and set new Next Invoice Date
--          c.   Differentiate two outputs : GenerateZeroInvoice and InvoiceCreateThreshold
--          d.   Exit from the invoice generation routine
--  8.   Invoice generation?
--  9.   Update due date of unbilled included installments
-- 10.   Get the past due
-- 12.   Set the Invoice Created flag for all included Installments/Stubs to Yes
-- 13.   Create the associated billingaccounttrxset
-- 14.   Create installments fee for all the Instalments included
-- 15.   Create a set of 'reconciliation' objects, that represent a de-normalized view of receivables.
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_policy_transaction_id      Invoice Policy Transaction ID.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_policy_trx_invoice_create
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_policy_transaction_id      in        object.object_id%type,
     io_action_outcome_id          in out     outcome.outcome_id%type,
     in_current_date_time          in        date default null
)
as
     v_procedure_name               constant system_log.program_name%type    := pkg_name||'sp_policy_trx_invoice_create';
     v_session_control              pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get (in_session_id,in_transaction_id) ;

     v_master_policy_id             object.object_id%type                    := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_policy_transaction_id);
     v_policy_billing_method_id     object_bv_value.business_variable_value%type;
     v_bill_to                      object_bv_value.business_variable_value%type := NULL;
     v_billing_account_id           object.object_id%type;
     v_billingaccounttrxset_id      object.object_id%type;
     v_chosen_pay_plan_id           object.object_id%type;
     v_current_policy_term_id       object.object_id%type;

     v_most_recent_invoice          object_bv_value.business_variable_value%type;
     v_current_date                 object_bv_value.business_variable_value%type;
     v_loop_sch_latest_id           object.object_id%type;
     v_first_uninvoiced_inst        object.object_id%type; -- OSBILLING-6729
     -- OSPRODUCT-5046
     v_new_invoiced_schedules       varchar2(5000);
     v_new_invoiced_schedules_id    number;									   
     v_billing_period_start_date    date;
     v_billing_period_end_date      date;
     v_starting_balance             object_bv_value.business_variable_value%type := 0;
     v_total_change                 object_bv_value.business_variable_value%type;
     v_reconciliation_type_id       object_bv_value.business_variable_value%type;
     v_due_date                     object_bv_value.business_variable_value%type;
     v_invoice_recipient            object_bv_value.business_variable_value%type;
     v_InvoiceAtPNBT                object_bv_value.business_variable_value%type;
     v_inst_index                   number;
     v_amount_due_late_fee          number;
     v_amount_due                   number;
     v_past_due                     number;
     v_current_due                  number;
     v_available_cash               number;
     v_available_credit             number;
     v_invoice_processed_tf         number;
     v_transaction_type_id          pd_transaction_type.pd_transaction_type_id%type;
     v_policy_basis_trx_id          object.object_id%type;
   --OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
   v_ba_trx_id                    object.object_id%type;
     --OSBILLING-3833 - Merged GCNA code in BaseDEV. End
     v_bv_table                     pkg_os_object_io.t_bv_table;
     v_datamart_tf                  varchar2(1) := 'T';
     v_exclude_audit_tf             pd_property.pd_property_value%type;
     v_generate_credit_invoice          pd_property.pd_property_value%type;
     --DDWIDEV-678
	v_most_rec_invc_id			object.object_id%type;
	v_prev_invc_id				object.object_id%type;
	v_prev_invc_process_dt		date;
	v_term_eff_date			date;
	v_term_create_date			date;
	v_pmt_rollup_tf			pd_property.pd_property_value%type;--payment rollup should be created?
	v_pmt_rollup_start_pt		pd_property.pd_property_value%type;--payment rollup starting point
	v_pmt_rollup_start_dt         date;
     	v_ba_inst_id				 object.object_id%type;--VAULTDEV-8269
	v_past_due_date		      date;
	v_billingtrx_rem_inst_id		 object.object_id%type;--VAULTDEV-8269
	v_pol_acct_level			 number := 2; --Policy
	v_pif_balance			      object_bv_value.business_variable_value%type;
    --v_due_date_criteria           pd_property.pd_property_value%type; -- Invoice Due Date calculation criteria -- OSBILLING-6729
	--/DDWIDEV-678
     --   Get all financial items that were due on or before the statement date
     cursor c_due_fitem
     (
          cin_billing_account_id               object.object_id%type,
          cin_policy_id                         object.object_id%type,
          cin_policy_trx_id                    object.object_id%type,
          cin_recon_type                         object.object_id%type,
          cin_stmt_as_of_date                    date,
          cin_stmt_start_date                    date,
          --
          cin_InvoicingDateCriteria            number -- UTPRODUCT-4864
     )
     is
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
			f.fitem_asset_id,                	    -- VAULTDEV-8269 asset id
			f.policy_term_id
          from
               dragon_fitem f
          where
               --f.due_date is not null
               decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date) is not null-- UTPRODUCT-4864
          and
               --trunc(f.due_date) <= trunc( cin_stmt_as_of_date)
                trunc(decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date)) <= trunc( cin_stmt_as_of_date)
          and
               f.policy_id = cin_policy_id
          and
               f.fitem_type_id = pkg_db_stmt.g_FItem_Debit
          and
               f.fitem_category_id not in (pkg_db_stmt.g_FItem_Cat_Commission)
          and
               f.fitem_billed_tf is null
          and
               cin_recon_type in ( pkg_db_stmt.g_ReconciliationDirectBill,  pkg_db_stmt.g_ReconDirectBillBroker)
          and
               (
                    f.balance >= 0.01
                    or
                   (v_generate_credit_invoice = 'T' and  f.balance <=-0.01)
               )
          and
               f.billing_account_id = nvl(cin_billing_account_id, f.billing_account_id) -- #MP
          and
               f.billing_account_id not in (select billingaccount_id from dragon_billingaccount where account_type_id  in (1501))-- to exclude debit fitems on writing company
     union
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
			f.fitem_asset_id,                     -- VAULTDEV-8269 asset id
			f.policy_term_id--VAULTDEV-9936
          from
               dragon_fitem f
          where
               --trunc(f.due_date) <= trunc(cin_stmt_as_of_date)
               trunc(decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date)) <= trunc(cin_stmt_as_of_date) -- UTPRODUCT-4864
          and
               f.policy_id = cin_policy_id
          and
               f.fitem_type_id =  pkg_db_stmt.g_FItem_Credit
          and
               f.fitem_billed_tf is null
          and
               cin_recon_type =  pkg_db_stmt.g_ReconDirectBillBroker
          and
               f.fitem_category_id =  pkg_db_stmt.g_FItem_Cat_Commission
          and
               (f.balance >= 0.01 or f.balance <=-0.01)
          and
               f.billing_account_id = nvl(cin_billing_account_id, f.billing_account_id) -- #MP

          --this is past due fitems
          union
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
			f.fitem_asset_id, -- VAULTDEV-8269 asset id
			f.policy_term_id--VAULTDEV-9936
          from
               dragon_fitem f
          where
               f.policy_id = cin_policy_id
          and
               --trunc(f.due_date) < trunc(cin_stmt_start_date)
             /*  trunc(decode(nvl(cin_InvoicingDateCriteria,1), 1, f.due_date, f.withdrawal_date)) < trunc(cin_stmt_start_date) -- UTPRODUCT-4864
          and*/ --UTPRODUCT-5044
               f.fitem_type_id =  pkg_db_stmt.g_FItem_Debit
          and
               f.fitem_category_id not in (pkg_db_stmt.g_FItem_Cat_Commission)
          --
          -- <Kostya>
          -- It seems we have an issue with correct Aging Status. At the moment of current invoice generation, previous installment is in 'Current' status,
             --  but for the time being previous billed installment is the 'Past due'. It leads to incorrect past due in the invoice
          -- Replacing [f.aging_status_id=3] with [f.fitem_billed_tf = gBooleanTrue]
          -- </Kostya>
          --     f.aging_status_id     =    3 --past due
          and
               f.fitem_billed_tf =  pkg_db_stmt.gBooleanTrue
          and
               (
                    f.balance >= 0.01
                    or
                   (v_generate_credit_invoice = 'T' and  f.balance <=-0.01)
               )
          and
               f.billing_account_id = nvl(cin_billing_account_id, f.billing_account_id) -- #MP
          and
               f.billing_account_id not in (select billingaccount_id from dragon_billingaccount where account_type_id  in (1501))-- to exclude debit fitems on writing company
          ;
		--VAULTDEV-8269
          -- cursor to fetch the impacted Billing account installment
          --
          cursor c_ba_inst
          (
               cin_billacc_id						object.object_id%type,
               cin_billing_period_start_date           date,
               cin_billing_period_end_date             date
          )
          is
               select
               	distinct(dbc.BA_INSTALMENT_ID) into v_ba_inst_id
               from
               	DRAGON_BA_INSTALMENT db,
               	DRAGON_BA_INSTALMENT_COMPONENT dbc
               where
               	db.BA_INSTALMENT_ID = dbc.BA_INSTALMENT_ID
               and
               	db.BILLING_ACCOUNT_ID = cin_billacc_id
               and
               	trunc(db.WITHDRAWAL_DATE) >= trunc(cin_billing_period_start_date)
               and
               	trunc(db.WITHDRAWAL_DATE) < trunc(cin_billing_period_end_date)--OSBilling-4412_DA
               ;
		--VAULTDEV-8269 Remaining Installments
		cursor c_ba_remaining_inst
          (
          cin_billacc_id						object.object_id%type,
          cin_billing_period_end_date             date, ---object_bv_value.business_variable_value%type,
		cin_acct_pol_level					number
          )
          is
          select
               db.BA_INSTALMENT_ID ,db.WITHDRAWAL_DATE, sum(dbc.AMOUNT) as amount
          from
               DRAGON_BA_INSTALMENT db,
               DRAGON_BA_INSTALMENT_COMPONENT dbc
          where
               db.BA_INSTALMENT_ID = dbc.BA_INSTALMENT_ID
          and
               dbc.BILLING_ACCOUNT_ID = cin_billacc_id
		and
			dbc.POL_OR_ACCT_LEVEL  = cin_acct_pol_level
          and
               trunc(db.WITHDRAWAL_DATE) > trunc(cin_billing_period_end_date)
          group by
			db.BA_INSTALMENT_ID,db.withdrawal_date
		order by db.withdrawal_date;

     v_final_item_list                   pkg_db_stmt.t_fitem_list;

     v_included_inst_list                pkg_db_stmt.t_inst_list;
     v_future_inst_list                  pkg_db_stmt.t_inst_list;
     v_total_balance_amt                number;
     v_invoice_create_threshold_amt     pd_property.pd_property_value%type;
     v_generate_zero_invoice            pd_property.pd_property_value%type;
     v_generate_inv_tf                  boolean := TRUE;
     v_intermediate_outcome             outcome.outcome_id%type;

     -- #MP
     v_payer_rec                        PKG_DB_MULTIPAYER.r_payer;
     v_pt_payer_id                      object.object_id%type;
     v_inv_multipayer_mode              boolean;
     -- /#MP
     v_invoice_based_on                 pd_property.pd_property_value%type; -- UTPRODUCT-4864
begin

											
                                                       
     -- UTPRODUCT-4864
     v_invoice_based_on := nvl(pkg_os_product.fn_product_property_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_master_policy_id,
                                     pkg_db_constant.gInvoicingDateCriteria
                                ),pkg_db_constant.gBillingDueDateInvcCriteria
                              )  ;

     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Entering Invoice Generation for Policy ID: ' || v_master_policy_id ||
               ' trans: ' || in_policy_transaction_id ||
               ', v_invoice_based_on=' || v_invoice_based_on -- UTPRODUCT-4864
          );
     end if;

-----------------------------------------------------------------------------
--
--  1.   Identify payment plan  and policy term
--
-----------------------------------------------------------------------------

     -- v_chosen_pay_plan_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_PolicyRefChosenPlan); -- #MP

     v_current_policy_term_id := pkg_db_stmt_util.fn_get_relevant_policy_term
     (
       in_session_id,
       in_transaction_id,
       v_master_policy_id,
       in_policy_transaction_id
     );
		-- DDWIDEV-678
	v_term_eff_date:= to_date(pkg_os_object_io.fn_object_bv_get
                      (
                           in_session_id,
                           in_transaction_id,
                           v_current_policy_term_id,
                           pkg_db_stmt.gbv_PolicyTermEffDate
                      ), pkg_os_constant.DragonDateFormatDefault);

	v_term_create_date:= to_date(pkg_os_object_io.fn_object_bv_get
                      (
                           in_session_id,
                           in_transaction_id,
                           v_current_policy_term_id,
                           210151
                      ), pkg_os_constant.DragonDateFormatDefault);

	 if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Term Effective Date: ' || v_term_eff_date);

     end if;
     -- #MP
     -- Check the multi-payer mode, if ON, put the payer into the v_payer_rec record.
     --
     --  Get payer in-question, for whom na Invoice will be genrated. The payer must be set in the multi-payer invoice generating flow/routings.
     --  At the moment of writing this code, the payer is set via _ref bv for Invoice Policy Transaction in the pkg_db_multipayer_stmt
     --
     v_pt_payer_id := pkg_os_object_io.fn_object_bv_get
                      (
                           in_session_id,
                           in_transaction_id,
                           in_policy_transaction_id,
                           PKG_DB_MULTIPAYER_STMT.gbv_PolicyTrx_Ref_PTermPayer
                      );

      PKG_DB_MULTIPAYER.sp_payer_validate
      (
           in_session_id,
           in_transaction_id,
           in_term_payer_id         => v_pt_payer_id,
           io_payer_rec             => v_payer_rec,
           io_inv_multipayer_mode   => v_inv_multipayer_mode,
           in_policy_id             => v_master_policy_id,
           in_policy_term_id        => v_current_policy_term_id
      );

      if v_inv_multipayer_mode
      then
           v_chosen_pay_plan_id   := v_payer_rec.chosen_payment_plan;

           v_most_recent_invoice  := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_payer_rec.PTPayer_object_id,
                                          PKG_DB_MULTIPAYER.gbv_PTermPayer_Ref_LastInv
                                     );
      else
           --
           -- Single payer logic
           --
           v_chosen_pay_plan_id   := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_PolicyRefChosenPlan);

           v_most_recent_invoice  := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_Policy_MostRecentInvoice);
      end if;
      -- /#MP

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Searching for PaymentPlanScheduledPaymentInstallment objects under the Current Policy Term ID '  ||
               v_current_policy_term_id || ' and Chosen Payment Plan:' || v_chosen_pay_plan_id );

     end if;
-----------------------------------------------------------------------------
--
--  2.   Basing on policy ID get effective date, billing method and pd properties like Invoice Create Threshold amount
--       and Zero Invoice Generation flag
--
-----------------------------------------------------------------------------

     v_policy_billing_method_id :=  nvl ( pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_current_policy_term_id,pkg_db_stmt.gbv_PolicyTermBillingMethod) ,
                                        pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_PolicyBillingMethod ));

     -- v_most_recent_invoice := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_Policy_MostRecentInvoice); -- #MP

     v_current_date := to_char(pkg_db_functions.fn_get_policy_current_date(in_session_id, in_transaction_id, v_master_policy_id), pkg_os_constant.DragonDateFormatDefault);

     v_invoice_create_threshold_amt := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_master_policy_id,  pkg_db_stmt.gInvoiceCreateThreshhold)
                                           ,0
                                          );
     v_generate_zero_invoice        := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_master_policy_id,  pkg_db_stmt.gGenerateZeroInvoiceTF)
                                           ,'T'
                                          );


     v_generate_credit_invoice        := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_master_policy_id,18446)
                                           ,'T'
                                          );
     v_exclude_audit_tf := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gExcludeAuditInvoiceTF),'F');

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '... Policy Billing Method ID: ' ||v_policy_billing_method_id||
                    ', Most Recent Invoice: '||v_most_recent_invoice );
     end if;
-----------------------------------------------------------------------------
--
--  3.   Identify the Invoice recipient
--
-----------------------------------------------------------------------------

     if v_policy_billing_method_id = pkg_db_stmt.g_BillingMethod_Direct
     then

          v_bill_to := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_PolicyBillTo);

          v_InvoiceAtPNBT := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_stmt.gbv_InvoiceAtPNBT);

          if v_InvoiceAtPNBT = pkg_os_constant.gBoolean_No
          then

               v_invoice_recipient := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_master_policy_id, pkg_db_stmt.gbv_PolicyInvoiceRecipient);

          else

               v_invoice_recipient := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_stmt.gbv_PTInvoiceRecipient);

          end if;

          -- v_billing_account_id := pkg_db_functions.fn_get_policy_billing_account(in_session_id, in_transaction_id, v_master_policy_id); -- #MP
          v_billing_account_id :=  case when v_inv_multipayer_mode
                                        then v_payer_rec.PayerBillingAccount_id
                                        else pkg_db_functions.fn_get_policy_billing_account(in_session_id, in_transaction_id, v_master_policy_id)
                                   end;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '...... Bill To:' || v_bill_to || ' Invoice At PNBT:' || v_InvoiceAtPNBT ||
                         ' Policy Invoice Recipient : ' ||v_invoice_recipient ||
                         -- ' Customer Billing Account ID: ' || v_billing_account_id); -- #MP
                         case when v_inv_multipayer_mode then ' Payer ' else 'Customer ' end || 'Billing Account ID:'|| v_billing_account_id);

          end if;

     end if; -- if v_policy_billing_method_id = pkg_db_stmt.g_BillingMethod_Direct

-----------------------------------------------------------------------------
--
--  4.   Basing on policy object and policy term get installments that are going to be included into invoice and determine
--       start and end date of the billing period being invoiced . Additionally, collect future installments for analysis.
--
-----------------------------------------------------------------------------

  pkg_db_stmt_util.sp_get_pending_installments
  (
    in_session_id,
    in_transaction_id,
    v_master_policy_id,
    v_current_policy_term_id,
    in_policy_transaction_id,
    v_billing_period_start_date,
    v_billing_period_end_date,
    v_included_inst_list,
    v_future_inst_list,
    v_payer_rec.PTPayer_object_id -- #MP
  );

  if v_session_control.gLogging_Full then

       pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
            '... Final Billing Period Start Date: ' || v_billing_period_start_date ||
            ', Final Billing Period End Date: ' || v_billing_period_end_date);
  end if;

     if (
          v_billing_period_start_date is not null
      and
      v_billing_period_end_date is not null
     )
  then

-----------------------------------------------------------------------------
--
--  5.   Basing on transaction type loop through every fitems that fit the billing period
--
-----------------------------------------------------------------------------
     -------------------------------------------------------------------------
     -- Get all unbilled financials with due dates before the billing period end date
     --
     if v_invoice_recipient = 2
     then
          v_reconciliation_type_id := pkg_db_stmt.g_ReconDirectBillBroker;
     else
          v_reconciliation_type_id := pkg_db_stmt.g_ReconciliationDirectBill;
     end if;

     v_policy_basis_trx_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_transaction_id, pkg_db_stmt.gbv_PolicyRefPolicyTrx);
     v_transaction_type_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_basis_trx_id, pkg_db_stmt.gbv_PolicyTransactionType);


    v_total_balance_amt := 0;

   if v_session_control.gLogging_Full
   then
     pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
        '...... Looping the c_due_fitem for transaction type('||v_transaction_type_id||')'
        );
   end if;

   -- #MP
   if v_session_control.gLogging_Full
   then
     pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
        '......... Cursor parameters :' ||
        v_payer_rec.PayerBillingAccount_id || ' as cin_billing_account_id, '                          ||
        v_master_policy_id                 || ' as cin_policy_id, '                                   ||
        in_policy_transaction_id           || ' as cin_policy_trx_id,'                                 ||
        v_reconciliation_type_id           || ' as cin_recon_type , to_date('''                       ||
        v_billing_period_end_date          || ' ,''dd.mm.yy'')as cin_stmt_as_of_date, to_date('''   ||
        v_billing_period_start_date        || ' ,''dd.mm.yy'')as cin_stmt_start_date'
        );
   end if;

   for v_f_rec in c_due_fitem
   (
        -- null,
        v_payer_rec.PayerBillingAccount_id, -- #MP -- this is null in single payer mode as far as the v_payer_rec structure is empty.
        v_master_policy_id,
        in_policy_transaction_id,
        v_reconciliation_type_id,
        v_billing_period_end_date,
        v_billing_period_start_date,
        v_invoice_based_on -- UTPRODUCT-4864        
     )
   loop

        -- Default Rollup is Policy ID, Policy Effective Date, PolicyTransaction ID, Due Date, Category ID

        v_total_balance_amt := v_total_balance_amt + v_f_rec.balance_amt;

        v_final_item_list(v_f_rec.fitem_id) := nvl(v_f_rec.policy_id,'') ||'-'||
                                               nvl(to_char(v_f_rec.policy_effective_date, pkg_os_constant.DragonDateFormatDefault ),'') ||'-'||
                                               nvl(v_f_rec.policy_transaction_id,'') ||'-'||
                                               nvl(v_f_rec.fitem_asset_id,'')||'-'||nvl(v_f_rec.policy_term_id, '')||'-'||  --VAULTDEV-9936
                                               ''||'-' ; -- due date Policy Invoice
                                              -- to_char(v_f_rec.due_date, pkg_os_constant.DragonDateFormatDefault ) ||'-';

        if v_session_control.gLogging_Full
        then
          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
             '......... temporary index value('||v_f_rec.fitem_id||') : '||v_final_item_list(v_f_rec.fitem_id)
             || ' total ' || v_f_rec.balance_amt
             );
        end if;

   end loop;

-----------------------------------------------------------------------------
--
--  6.   Check if an Invoice should be generated basing on GenerateZeroInvoice flag and InvoiceCreateThreshold amount flag
--
-----------------------------------------------------------------------------

          if v_final_item_list.count > 0 then

       case when v_total_balance_amt = 0
            then if v_generate_zero_invoice = 'F'
                    -- OSBILLING-2042: Cancellation Invoice is treated as Final Invoice - system shows final zero invoice to the user
                    and
                    nvl(v_transaction_type_id,0) not in ( pkg_db_stmt.g_TrxType_Cancellation, pkg_db_stmt.g_TrxType_CancelByInsured)
                    --
                 then
                     v_generate_inv_tf := FALSE;
                     io_action_outcome_id :=  pkg_db_stmt.gOutcome_ZeroInvSuppressed;
                 else
                     v_generate_inv_tf := TRUE;
                 end if;
                 --
          --2017-12-05 Cheryl osbilling-4623 create an invoice if credit inovice = T
            when v_future_inst_list.count > 0 -- apply credit invoice for 'not the last' invoice
               and
               v_total_balance_amt < 0 and v_generate_credit_invoice = 'T'
            then
               v_generate_inv_tf := TRUE;

            when v_future_inst_list.count > 0 -- apply InvoiceCreateThreshold for 'not the last' invoice
                 and
                 v_total_balance_amt between 0 and v_invoice_create_threshold_amt -- Negative amount should not be processed by InvoiceCreateThreshold

            then
                v_generate_inv_tf := FALSE;
                io_action_outcome_id :=  pkg_db_stmt.gOutcome_InvThresholdViolated;
            else
                v_generate_inv_tf := TRUE;
       end case;

   else
       --NULL; -- no financials found. This case is not handled. Should we stop here???

        v_generate_inv_tf := FALSE;
                     io_action_outcome_id :=  pkg_db_stmt.gOutcome_ZeroInvSuppressed;
               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
            'WARNING: No financials found. Invoice will not be generated.'
            );
       end if;

    end if;

    if v_session_control.gLogging_Full
    then
      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          --
         'Checking if an invoice should be generated basing on :'||
         '   Total balance amount (including past due amount) :'||v_total_balance_amt
         );
      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          --
         '   GenerateZeroInvoice property :'||v_generate_zero_invoice
         );
      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          --
         '   Invoice Create Threshold : '||v_invoice_create_threshold_amt
         );

      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          --
         '   Future installments count : '||v_future_inst_list.count
         );

      if v_future_inst_list.count > 0
      then
         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
             --
            '   ...Future installments Details: '
            );

         for i in 1..v_future_inst_list.count loop
            pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                --
               '   ......id|num|type|due_date|next_inst_id :'
               ||v_future_inst_list(i).inst_id         ||' | '
               ||v_future_inst_list(i).inst_num        ||' | '
               ||v_future_inst_list(i).inst_type       ||' | '
               ||v_future_inst_list(i).billing_due_date||' | '
               ||v_future_inst_list(i).next_inst_id
               );
         end loop;
      end if;

      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          --
         'Result :'|| case when v_generate_inv_tf
                           then ' An Invoice is going to be generated.'
                           else case when io_action_outcome_id =  pkg_db_stmt.gOutcome_ZeroInvSuppressed
                                     then ' Invoice was not generated as its amount is zero.'
                                     when io_action_outcome_id =  pkg_db_stmt.gOutcome_InvThresholdViolated
                                     then ' Invoice was not generated as its amount does not satisfy InvoiceCreateThreshold amount.'
                                     else ' Invoice was not generated...unhandled case'
                                 end
                       end
         );
    end if;

-----------------------------------------------------------------------------
--
--  7.   If invoice is going to be suppressed due to GenerateZeroInvoice or InvoiceCreateThreshold
--
-----------------------------------------------------------------------------
    if NOT v_generate_inv_tf
    then
-----------------------------------------------------------------------------
--
--          a.   Mark all the installments that are going to be included into invoice as Suppressed
--          b.   Calculate and set new Next Invoice Date
--          c.   Differentiate two outputs : GenerateZeroInvoice and InvoiceCreateThreshold
--          d.   Exit from the invoice generation routine
--
-----------------------------------------------------------------------------
       -- Mark installments as Suppressed
       --
          v_inst_index := v_included_inst_list.first;

          while v_inst_index is not null
          loop

               pkg_os_object_io.sp_object_bv_set 
               (
                    in_session_id, 
                    in_transaction_id,
                    v_included_inst_list(v_inst_index).inst_id,
                    pkg_db_stmt.gbv_SchPayInst_Invoice_TF,
                    pkg_db_stmt.g_BooleanSuppressed
               );
               
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    v_included_inst_list(v_inst_index).inst_id,
                    v_datamart_tf
               );--OSPRODUCT-18615
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, in_transaction_id, v_procedure_name,
                         'Marking installment '||v_included_inst_list(v_inst_index).inst_id||' as Suppressed'
                    );
               end if;

               v_inst_index := v_included_inst_list.next(v_inst_index);

          end loop;

       -- Set new Next Invoice Date taking Suppressed Invoices into considiration
       --

          pkg_db_stmt_date.sp_set_next_invoice_date
          (
           in_session_id,
           in_transaction_id,
           in_policy_transaction_id,
           v_intermediate_outcome,
           v_payer_rec.chosen_payment_plan -- #MP. This is null in the single payer mode
          );

       --
       -- io_action_outcome_id is set above while calculating the v_generate_inv_tf flag
       --

       RETURN; -- exit from invouce generation routine
    end if;
  -------------------------------------------------------------------------
-----------------------------------------------------------------------------
--
--  8.   Invoice generation?
--
-----------------------------------------------------------------------------
-----------------------------------------------------------------------------
--
--  9.   Update due date of unbilled included installments
--
-----------------------------------------------------------------------------
    if (v_included_inst_list.count > 0)
    then

         --pkg_db_stmt_date.sp_update_inst_due_date
         -- Added the custom call DDWIDEV-915
         pkg_cs_db_stmt.sp_update_inst_due_date
         (
           in_session_id,
           in_transaction_id,
           v_master_policy_id,
           v_included_inst_list,
           v_payer_rec.chosen_payment_plan -- #MP
         );
    end if;

-----------------------------------------------------------------------------
--
-- 10.   Get the past due
--
-----------------------------------------------------------------------------

    begin
    select
         nvl(sum(balance),0), min(due_date)
    into
         v_past_due, v_past_due_date--VAULTDEV-8269
    from
         dragon_fitem
    where
         policy_id = v_master_policy_id
    and
         debit_credit = 'Debit'
    and
         fitem_billed_tf =  pkg_db_stmt.gBooleanTrue
    and
         aging_status_id = pkg_db_constant.gFitem_Past_Due
    and
         billing_account_id = nvl(v_payer_rec.PayerBillingAccount_id, billing_account_id) -- #MP
    group by
		billing_account_id
    ;
    exception when no_data_found then

    if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Past Due Amount: ' || v_past_due ||
                    ' for Policy ID:' || v_master_policy_id ||
				'v_payer_rec.PayerBillingAccount_id'||v_payer_rec.PayerBillingAccount_id||
				'v_billing_account_id'||v_billing_account_id||
                    case when v_inv_multipayer_mode then ' Payer Entity ID ' || v_payer_rec.PayerEntity_object_id else '' end -- #MP
                    );

    end if;

end;
    -- Get the available cash
    v_available_cash     :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_master_policy_id,
                                   pkg_db_stmt.gbv_PolicyCashAvailable
                              );

    -- Get the available cash
    v_available_credit     :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_master_policy_id,
                                   pkg_db_stmt.gbv_PolicyCreditAvailable
                              );

    if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
              '... Available cash: ' || v_available_cash ||
                    ' for Policy ID:' || v_master_policy_id
               );

    end if;

    -- set the value of v_past_due on Policy Transaction
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,pkg_db_stmt.gbv_FITrxSet_PastDue, v_past_due);

    -- set the value of available cash
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_AvailableCash, nvl((v_available_cash*-1),0));


    -- set the value of available credit
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_AvailableCredit, nvl((v_available_credit*-1),0));


    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_BillingEndDate,
                                       to_char(v_billing_period_end_date, pkg_os_constant.DragonDateFormatDefault));

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_BillingStartDate,
                                       to_char(v_billing_period_start_date, pkg_os_constant.DragonDateFormatDefault));

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_InvoiceDate, v_current_date);

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_os_constant_bv.gbv_PolicyTranProcessDate, v_current_date);

-----------------------------------------------------------------------------
--
-- 12.   Set the Invoice Created flag for all included Installments/Stubs to Yes
--
-----------------------------------------------------------------------------
    if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
             '...... Loop through all Installment/Stub objects ');

    end if;

    v_inst_index := v_included_inst_list.first;

    while v_inst_index is not null
    loop

        v_invoice_processed_tf := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,
                                       v_included_inst_list(v_inst_index).inst_id, pkg_db_stmt.gbv_SchPayInst_Invoice_TF);


        if v_session_control.gLogging_Full then

             pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                  '......... Looping through Installment/Stub ID: '||
                             v_included_inst_list(v_inst_index).inst_id ||
                  ', Installment Number: '||v_included_inst_list(v_inst_index).inst_num ||
                  ', Installment Type (1:Installment 2:Stub): '|| v_included_inst_list(v_inst_index).inst_type ||
                  ', Due Date: ' || v_included_inst_list(v_inst_index).billing_due_date ||
                  ', Billing Period End Date: ' || v_billing_period_end_date);

        end if;

          if v_included_inst_list(v_inst_index).billing_due_date is not null
          then

                 if v_session_control.gLogging_Full then

                      pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                           '............ This Installment/Stub Due Date exists within the Billing Period');

                 end if;

                 if v_invoice_processed_tf is null or v_invoice_processed_tf = pkg_db_stmt.g_BooleanNo
                 then

                      if v_session_control.gLogging_Full then

                           pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                '............... This Installment/Stub is not yet invoiced. So, adding this to the list of eligible installments and marking the Invoice flag as Yes');

                      end if;

                      pkg_os_object_io.sp_object_bv_set
                      (
                           in_session_id,
                           in_transaction_id,
                           v_included_inst_list(v_inst_index).inst_id,
                           pkg_db_stmt.gbv_SchPayInst_Invoice_TF,
                           pkg_db_stmt.g_BooleanYes
                      );

                        -- OSPRODUCT-5046
                      /*if v_invoiced_schedules is null
                      then

                         v_invoiced_schedules := v_included_inst_list(v_inst_index).inst_id;

                      else

                           v_invoiced_schedules := v_invoiced_schedules || ','|| v_included_inst_list(v_inst_index).inst_id;

                      end if;*/ 
                          v_new_invoiced_schedules := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_policy_transaction_id,
                                         pkg_db_stmt.gbv_FITrx_IncludedScheduleIns
                                    );
                                  
                                                  
                                         
                         begin
                           
                              select to_number(v_new_invoiced_schedules) into v_new_invoiced_schedules_id from dual;
                              
                              v_new_invoiced_schedules := pkg_os_long_string.fn_get_long_string 
                                                   (
                                                        in_session_id, 
                                                        in_transaction_id, 
                                                        v_new_invoiced_schedules_id
                                                   );
                               
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '..Schedule List ID: ' || v_new_invoiced_schedules_id ||
                                        '.. String: '  || v_new_invoiced_schedules
                                   );

                              end if;                   
                              
                         exception
                              
                              when INVALID_NUMBER then
                                   
                                   -- OSPRODUCT-4079
                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. Correcting old bad data..'
                                        );

                                   end if;  
                                   
                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_transaction_id,
                                        pkg_db_stmt.gbv_FITrx_IncludedScheduleIns,
                                        null
                                   );
                                   
                         end;                
                                                  
                         if length(v_new_invoiced_schedules || ',' || v_included_inst_list(v_inst_index).inst_id) < 3900 then               
                              
                              v_new_invoiced_schedules := v_new_invoiced_schedules || ',' || v_included_inst_list(v_inst_index).inst_id;
                              
                              -- OSPRODUCT-4079
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. Schedules List: ' || v_new_invoiced_schedules
                                   );

                              end if;              
                              
                              -- v_new_policy_list_id := pkg_os_long_string.fn_create_long_string(in_session_id, in_transaction_id, v_new_policy_list);
                              pkg_os_long_string.set_long_string
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_transaction_id,
                                   pkg_db_stmt.gbv_FITrx_IncludedScheduleIns, -- notdescription CLOB
                                   v_new_invoiced_schedules,
                                   v_new_invoiced_schedules_id
                              );
                              
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_transaction_id,
                                   pkg_db_stmt.gbv_FITrx_IncludedScheduleIns, -- notdescription CLOB
                                   v_new_invoiced_schedules_id
                              );
                              
                         end if;
                  
                         -- end OSPRODUCT-5046						  
                      if v_included_inst_list(v_inst_index).inst_type = pkg_db_stmt.g_InstallmentTypeInstallment
                      then

                           v_loop_sch_latest_id := v_included_inst_list(v_inst_index).inst_id;

                      end if;

                      if v_first_uninvoiced_inst is null -- OSBILLING-6729
                      then

                           v_first_uninvoiced_inst := v_included_inst_list(v_inst_index).inst_id;

                      end if;

                 else

                      if v_session_control.gLogging_Full then

                           pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                '............... Skipping this Installment/Stub as it is already invoiced.');

                      end if;

                 end if;

          end if;

          v_inst_index := v_included_inst_list.next(v_inst_index);

    end loop; -- while v_all_sched_pay_inst_index is not null

    --- Set the all Included installments BV in Fitrxn
    if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Scheduled Payments for which Invoice has been created: ' || v_new_invoiced_schedules
               );
    end if;
    --OSPRODUCT-5046
/*
--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
    pkg_os_object_io.sp_object_bv_set
    (
      in_session_id,
      in_transaction_id,
      in_policy_transaction_id,
      pkg_db_stmt.gbv_FITrx_IncludedScheduleIns,
      v_invoiced_schedules
    );
*/
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
-----------------------------------------------------------------------------
--
-- 13.   Create the associated billingaccounttrxset
--
-----------------------------------------------------------------------------

    pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          2365946, -- BillingAccountTrxSet
          v_billing_account_id,
          v_billingaccounttrxset_id
     );
	--DDWIDEV-678
	v_most_rec_invc_id :=  pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_billing_account_id,
                                   pkg_db_constant.gbv_most_rec_invc
                              );

	 if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||||||Most Recent Invoice: ' || v_most_rec_invc_id
               );

     end if;

     --Set the BV's of the BillingAccountTrxSet

     v_bv_table.delete;

     v_bv_table ( pkg_db_stmt.gbv_FITrxSetEntryType        ).business_variable_value := pkg_db_object.gBatchEntryMethod_System;
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetDatePosted       ).business_variable_value := to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billingaccounttrxset_id), pkg_os_constant.DragonDateFormatDefault );
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetExternalBatchId  ).business_variable_value := 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, v_billingaccounttrxset_id), pkg_os_constant.DragonDateFormatDefault );
     v_bv_table ( pkg_db_stmt.gbv_FITrxSetBatchType        ).business_variable_value := pkg_db_stmt.g_SetType_Invoice ;
     -- Add the invoice number osbilling-3977 Cheryl 2017-05-24
     v_bv_table ( pkg_db_stmt.gbv_FITrxSet_InvoiceNumber   ).business_variable_value := seq_invoice_number.nextval ;
     --OSPRODUCT-5046
     v_bv_table ( pkg_db_stmt.gbv_FITrx_IncludedScheduleIns   ).business_variable_value := v_new_invoiced_schedules_id ;

	--DDWIDEV-678
	if v_most_rec_invc_id is not null
	then
		v_bv_table ( pkg_db_constant.gbv_previous_invc ).business_variable_value := v_most_rec_invc_id;
		v_prev_invc_process_dt := 	to_date(pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_most_rec_invc_id,
                                                       pkg_db_cash_apply.gbv_BillAccTrxSet_ProcessDate--FITransactionset Processed Date
                                                  ), pkg_os_constant.DragonDateFormatDefault);
		if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '||||||Most Recent Invoice Process Date: ' || v_prev_invc_process_dt);

     	end if;

	end if;
	--/DDWIDEV-678
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_billingaccounttrxset_id,
          v_bv_table
     );

     -- Set the reference from PolicyTrx to BillingAccountTrx Set

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_policy_transaction_id,
          31866546,
          v_billingaccounttrxset_id
     );


     -- Set the reference from  BillingAccountTrx Set to PolicyTrx

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_billingaccounttrxset_id,
          pkg_db_object.gbv_BillAccTrxSet_RefPolTrx, --  32502146
          in_policy_transaction_id
     );

     /* commented out by UTPRODUCT-4864  
     --
     --  Determine the Invoice Due Date -- OSBILLING-6729
     --
     --v_due_date_criteria := nvl( pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_master_policy_id,  pkg_db_stmt.gPropInvoiceDueDateCriteria),
     --                       pkg_db_stmt.gDueDateByLeadTime);

     --pkg_db_stmt_date.sp_calculate_invoice_due_date
     --(
     --     in_session_id,
     --     in_transaction_id,
     --     v_master_policy_id,
     --     v_first_uninvoiced_inst,
     --     v_due_date_criteria,
     --     v_due_date
     --);
     */ 
     
     --UTPRODUCT-4864 : call pkg_db_stmt_date.fn_installment_due_date_get instead of pkg_db_stmt_date.sp_calculate_invoice_due_date
     --
     v_due_date := to_char(pkg_db_stmt_date.fn_installment_due_date_get
                                (
                                     in_session_id,
                                     in_transaction_id,
							 
                                     v_first_uninvoiced_inst
                                ),
                                pkg_os_constant.DragonDateFormatDefault
                               );     


     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_PaymentDueDate, v_due_date);

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_billingaccounttrxset_id,
          pkg_db_stmt.gbv_BillAccTrxSet_Duedate,
          v_due_date
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Invoice Due Date: '||v_due_date
          );

     end if;

-----------------------------------------------------------------------------
--
-- 14.   Create installments fee for all the Instalments included
--
-----------------------------------------------------------------------------

    --
    -- OSBILLING-1018 , The Instalment Fee should be created as
    --         1.  Consolidated Consolidated Instalment Fee for all the Instalments included
    --         2.  Create Fee Independently for all the Instalments
    --
    pkg_db_stmt_util.sp_invoice_installment_fee
    (
         in_session_id,
         in_transaction_id,
         v_billingaccounttrxset_id,
         v_master_policy_id,
         v_final_item_list,
         io_action_outcome_id
    );


-----------------------------------------------------------------------------
--
-- 15.   Create a set of 'reconciliation' objects, that represent a de-normalized view of receivables.
--
-----------------------------------------------------------------------------
    --
    -- OSBILLING-1497 Moving this after the Instalemnt/Invoice Fee is created
    --
    pkg_db_stmt_rollup.sp_generic_rollup_create
    (
         in_session_id,
         in_transaction_id,
         in_billing_account_id      => v_billing_account_id,
         in_billing_trx_set_id      => in_policy_transaction_id,
         in_recon_type                => v_reconciliation_type_id,
         in_profile_type          => null,
         io_fitem_list            => v_final_item_list
    );

	--DDWIDEV-678
     -----------------------------------------------------------------------------
     --
     -- 16.   Create payment rollups for this Invoice.
     --
     -----------------------------------------------------------------------------
          --Get the PD property related to payment rollup creation
          v_pmt_rollup_tf:= nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_billing_account_id, pkg_db_stmt.gPropertyCreatePmtTrxRollupTF), 'F');

		v_pmt_rollup_start_pt:= nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_billing_account_id, pkg_db_stmt.gPropertyPmtTrxRollupStartDate),1);

		if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '||||||Payment Rollup needed: ' || v_pmt_rollup_tf||'Payment Rollup Starting Point: '||v_pmt_rollup_start_pt);

     	end if;


		-- If Payment Rollup need be created, fetch the rollup creation starting date
          if v_pmt_rollup_tf = 'T'
          then
               if v_pmt_rollup_start_pt = 1
               then

               	v_pmt_rollup_start_dt:=  nvl(v_prev_invc_process_dt,v_term_create_date);

                    if v_session_control.gLogging_Full
				then

                         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '||||||Previous Invoice Process Date: ' || v_prev_invc_process_dt);

                    end if;

               elsif v_pmt_rollup_start_pt = 2
               then
               	v_pmt_rollup_start_dt:=  v_term_eff_date;

               end if;

			--Do the real work here
               pkg_db_stmt.sp_payment_rollup_create
               (
                    in_session_id,
                    in_transaction_id,
                    v_billing_account_id,
                    v_billingaccounttrxset_id,--Invoice Transaction id
                    v_pmt_rollup_start_dt,
                    pkg_db_stmt.g_SetType_Invoice --Primary Invoice (1801)
               );

          end if;
     --/DDWIDEV-678
	        --  -- Keerthi Policy Invoice
    -- Invoke code to include the payments and the other rollups.
    --
     pkg_db_stmt_account.sp_payment_rollup_create
     (
           in_session_id,
           in_transaction_id,
           v_billing_account_id,
           v_billingaccounttrxset_id,
           1801, -- Invoice
           v_master_policy_id
     );
     pkg_db_stmt_account.sp_other_rollup_create
      (
           in_session_id,
           in_transaction_id,
           v_billing_account_id,
           v_billingaccounttrxset_id,
           1801, -- VAULTDEV-11035
          to_char(v_billing_period_start_date, pkg_os_constant.DragonDateFormatDefault),
          to_char(v_billing_period_end_date, pkg_os_constant.DragonDateFormatDefault),
           null,
           v_master_policy_id
     );
	--OSBILLING-4960 : Create BillingTransactionInfo objects
     pkg_db_stmt_account.sp_trx_info_obj_create
     (
           in_session_id,
           in_transaction_id,
           v_billing_account_id,
           v_billingaccounttrxset_id,
		 v_master_policy_id,
		 v_current_policy_term_id
     );
     -- Keerthi Policy Invoice
    if (v_included_inst_list.last is not null)  then
      -- Set the reference "Related To" from Invoice Transaction to PaymentScheduleInstallment
      pkg_os_object_io.sp_object_bv_set
      (
        in_session_id,
        in_transaction_id,
        in_policy_transaction_id,
        pkg_db_stmt.gbv_FITrx_RelatedScheduleIns,
        v_included_inst_list(v_included_inst_list.last).inst_id
      );

      -- Set the reference from PaymentScheduleInstallment to Invoice Transaction
      pkg_os_object_io.sp_object_bv_set
      (
        in_session_id,
        in_transaction_id,
        v_included_inst_list(v_included_inst_list.last).inst_id,
        pkg_db_stmt.gbv_SchInst_RelatedInvoice,
        in_policy_transaction_id
      );
    end if;
    --- Set the ref Last Included installment from FITransactionSet/PolicyTransaction to installment object
    pkg_os_object_io.sp_object_bv_set
    (
      in_session_id,
      in_transaction_id,
      in_policy_transaction_id,
      pkg_db_stmt.gbv_FITrxSetRefSchPayInst,
      v_loop_sch_latest_id
    );

    pkg_os_object_io.sp_object_bv_set
    (
       in_session_id,
       in_transaction_id,
       in_policy_transaction_id,
       pkg_db_stmt.gbv_FITrxSet_StartingBalance,
       v_starting_balance
    );

/*    v_total_change := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,
                                       in_policy_transaction_id, pkg_db_cashpost.gbv_FITrxSetTotalAmount);*/
      
     --20200129 Cheryl osproduct-1858 - go back to using pkg_db_cashpost.gbv_FITrxSetTotalAmount                                  
     -- OSBILLING-6729                                       
 --   v_total_change := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,
 --                                      in_policy_transaction_id, pkg_db_stmt.gbv_FITrxSet_TotalChange);
                                       
    v_total_change := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,
                                       in_policy_transaction_id, pkg_db_cashpost.gbv_FITrxSetTotalAmount); 

    --
    -- <Kostya. OSBILLING-1880>
    -- The v_total_change already accumulated amounts from all the fitems, including the past due ones.
    -- We already have past due calculated and stored in the v_past_due.
    -- To get the Current due : v_total_change - v_past_due
    -- To get the amount due we just need to substuct available cash and credit from v_total_change.
    --
    -- 20200129 Cheryl osproduct-1858 get the current due from BV 33823346
 --   v_current_due  := nvl(v_total_change,0) - nvl(v_past_due,0);
 
      v_current_due := pkg_os_object_io.fn_object_bv_get
                       (in_session_id, 
                       in_transaction_id, 
                       in_policy_transaction_id, 
                       pkg_db_stmt.gbv_FITrxSet_CurrentDue);

    if v_session_control.gLogging_Full then

         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
              '...... Current Due amount: ' || v_current_due||'v_total_change'||v_total_change||'v_past_due'||v_past_due);

    end if;

-- 20200129 Cheryl osproduct-1858 getting set in pkg_db_stmt_rollup
 --   pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
 --                                      pkg_db_stmt.gbv_FITrxSet_CurrentDue, v_current_due);

    --2017-12-07 osbilling-4623 - If total_change is a negative we need to reverse signs
     if v_total_change < 0
     then
         v_amount_due := nvl(v_total_change*-1,0) - nvl(v_available_cash,0) - nvl(v_available_credit,0) ;
     else
         v_amount_due := nvl(v_total_change,0) - nvl(v_available_cash,0) - nvl(v_available_credit,0) ;
     end if;

    --</OSBILLING-1880>

    if v_session_control.gLogging_Full then

         pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
              '...... Total Amount Due without Late Fee: ' || v_amount_due||'v_available_cash'||v_available_cash||'v_available_credit'||v_available_credit);

    end if;

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_AmountDueWOLate, v_amount_due);

    v_amount_due_late_fee := v_amount_due + 10;

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_AmountDueWLate, v_amount_due_late_fee);

--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,
                                       pkg_db_stmt.gbv_FITrxSet_PaymentDueDate, v_due_date);


    --
    -- Get the Associated Billing AccountTransactionSet and set the BV's on that object as well
    --

    v_ba_trx_id     :=   pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_transaction_id,
                              pkg_db_object.gbv_BillAccTrxSet_RefPolTrx
                         );
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End
    -- set the value of v_past_due on Policy Transaction
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_PastDue, round(v_past_due,2));
			 --set the value of v_past_due_date on Billing Transaction
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       gbv_FITrxSet_PastDueDate, to_char(v_past_due_date, pkg_os_constant.DragonDateFormatDefault));--VAULTDEV-8269

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_CurrentDue, round(v_current_due,2)); --OSBILLING-6729

    -- set the value of available cash
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_AvailableCash, nvl((v_available_cash*-1),0));


    -- set the value of available credit
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_AvailableCredit, nvl((v_available_credit*-1),0));


    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_BillingEndDate,
                                       to_char(v_billing_period_end_date, pkg_os_constant.DragonDateFormatDefault));

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_BillingStartDate,
                                       to_char(v_billing_period_start_date, pkg_os_constant.DragonDateFormatDefault));

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id,
                                       pkg_db_stmt.gbv_FITrxSet_InvoiceDate, v_current_date);

    v_pif_balance := round(pkg_db_functions.fn_get_pif_balance(in_session_id, in_transaction_id,v_billing_account_id,v_master_policy_id),2);--VAULTDEV-8269
    --v_bv_table ( gbv_BATrxSet_PIFBalance   ).business_variable_value := v_pif_balance ;--VAULTDEV-8269
    
    -- OSPRODUCT-7957
    -- BV is made calculated
    -- pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billing_account_id,pkg_db_constant.gbv_most_rec_invc, v_billingaccounttrxset_id);
    -- end OSPRODUCT-7957
    
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id ,32951024, v_pif_balance);--VAULTDEV-8269
	/* UTPRODUCT-4469 Starts Commented because 32471622 gbv_BA_Inst_Rel_Inv not exist in designer
	--VAULTDEV-8269
  	--
	-- Now set the related invoice reference on Billing Account Installment as well
	--
     for r_ba_inst in c_ba_inst(v_billing_account_id, v_billing_period_start_date, v_billing_period_end_date)
	loop
     	v_ba_inst_id := r_ba_inst.ba_instalment_id;
          pkg_os_object_io.sp_object_bv_set
          (
          	in_session_id,
               in_transaction_id,
               v_ba_inst_id,
               pkg_db_stmt_account.gbv_BA_Inst_Rel_Inv,
               v_billingaccounttrxset_id
          );
		pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_ba_inst_id, v_datamart_tf);
     end loop;
     UTPRODUCT-4469 Ends */
	--
	-- Now fetch the pending installments
	--
	--VAULTDEV-8269
	for r_ba_remaining_inst in c_ba_remaining_inst(v_billing_account_id, v_billing_period_end_date, v_pol_acct_level)
	loop
          v_ba_inst_id := r_ba_remaining_inst.ba_instalment_id;
		--Create BillingTransaction Pending Installments
		pkg_os_object.sp_object_create
		(
               in_session_id,
               in_transaction_id,
               3370624,--BillingTransactionPendingInstallment
               v_billingaccounttrxset_id,
               v_billingtrx_rem_inst_id
          );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingtrx_rem_inst_id,
               32948824,--Amount
               r_ba_remaining_inst.amount
          );
		 pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingtrx_rem_inst_id,
               32948924,--Withdrawal Date
               to_char(r_ba_remaining_inst.withdrawal_date, pkg_os_constant.DragonDateFormatDefault)
          );
		 pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingtrx_rem_inst_id,
               32949024,--Related BA Installment
               v_ba_inst_id
          );
		 pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billingtrx_rem_inst_id, v_datamart_tf);
     end loop;
	--/VAULTDEV-8269

     --update the datamart of billing account
        pkg_os_datamart.sp_datamart_update_row
        (
               in_session_id,
               in_transaction_id,
               v_billing_account_id,
               v_datamart_tf
        );

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  else

    io_action_outcome_id :=  pkg_db_stmt.gOutcome_InvoiceNotCreated;

     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_policy_transaction_id,pkg_os_constant_bv.gbv_GenObjObjectState,28905);

     pkg_os_logging.sp_log (in_session_id, in_transaction_id, v_procedure_name,
              'All Invoices have already been generated - io_action_outcome_id' || io_action_outcome_id);

  end if;

end sp_policy_trx_invoice_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_bill_plan_create_invoice   (Entry Point)
--
--
--   %USAGE
--        This procedure creates invoice for Bill Plan
--
--
--   %ALGORITHM
--  1.   Get pd properties like Invoice Create Threshold amount and Zero Invoice Generation flag
--  2.   Based on BillPlan object and policy term get installments that are going to be included into invoice and determine
--       start and end date of the billing period being invoiced . Additionally, collect future installments for analysis.
--  3.   If billing period start and end date are not null, generate invoice, else set outcome as gOutcome_InvoiceNotCreated
--  4.   Based on Recon type loop through every fitems that fit the billing period and create v_fitem_list
--          a.   Increase total amount being invoiced
--          b.   Add an fitem to a list of fitems to be invoiced
--  5.   Check if an Invoice should be generated basing on GenerateZeroInvoice flag and InvoiceCreateThreshold amount and
--  6.   If invoice is going to be suppressed due to GenerateZeroSupressed, CreditInvoiceSupressed or InvoiceCreateThresholdVoilated
--          a.   Mark all the installments that are going to be included into invoice as Suppressed
--          b.   Calculate and set new Next Invoice Date
--          c.   Exit from the invoice generation routine
--  7.   Invoice generation started
--  8.   Update due date of unbilled included installments
--  9.   Get the past due , available cash and credits 
-- 10.   Set the Invoiced flag for all included Installments/Stubs to Yes
-- 11.   Create the associated billingaccounttrxset and set BVs
-- 12.   Create installments fee for all the Instalments included
-- 13.   Create a set of 'reconciliation' objects, that represent a de-normalized view of receivables.
-- 14.   set the related invoice reference on Billing Account Installment as well
-- 15.   Fetch the pending installments and Create BillingTransaction Pending Installments
-- 16.   Run nightly process to Age financials
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_billplan_id                Bill Plan ID
--   %PARAM    io_action_outcome_id          Outcome id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_bill_plan_create_invoice 
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billplan_id                     in             object.object_id%type,
     io_action_outcome_id               in out nocopy  outcome.outcome_id%type
)
as
     v_procedure_name               constant system_log.program_name%type    := pkg_name||'sp_bill_plan_create_invoice ';
     v_session_control              pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get (in_session_id,in_transaction_id) ;

     v_policy_transaction_id        object.object_id%type;
     v_master_policy_id             object.object_id%type;
     v_billing_account_id           object.object_id%type        := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_billplan_id);
     v_ba_account_type_id           object_bv_value.business_variable_value%type;        -- UTPRODUCT-4469 
     r_billing_account_list         pkg_db_object.t_billing_account_list;                -- UTPRODUCT-4469
     v_billingaccounttrxset_id      object.object_id%type;
     v_currect_fitrx_id             object.object_id%type;
     v_current_date                 object_bv_value.business_variable_value%type;
     v_loop_sch_latest_id           object.object_id%type;
     v_first_uninvoiced_inst        object.object_id%type;
     --OSPRODUCT-5046
     v_new_invoiced_schedules       varchar2(5000);
     v_new_invoiced_schedules_id    number;  
     v_billing_period_start_date    date;
     v_billing_period_end_date      date;
     v_starting_balance             object_bv_value.business_variable_value%type := 0;
     v_total_change                 object_bv_value.business_variable_value%type;
     v_reconciliation_type_id       object_bv_value.business_variable_value%type;
     v_due_date                     object_bv_value.business_variable_value%type;
     v_inst_index                   number;
     v_amount_due_late_fee          number;
     v_amount_due                   number;
     v_past_due                     number;
     v_current_due                  number;
     v_available_cash               number;
     v_available_credit             number;
     v_invoice_processed_tf         number;
     v_transaction_type_id          pd_transaction_type.pd_transaction_type_id%type;
     v_policy_basis_trx_id          object.object_id%type;
     v_bv_table                     pkg_os_object_io.t_bv_table;
     v_datamart_tf                  varchar2(1) := 'T';
     v_exclude_audit_tf             pd_property.pd_property_value%type;
     v_generate_credit_invoice      pd_property.pd_property_value%type;
     v_most_rec_invc_id             object.object_id%type;
     v_policy_id                    object.object_id%type;
     v_prev_invc_process_dt         date;
     v_ba_inst_id                   object.object_id%type;
     v_past_due_date                date;
     v_billingtrx_rem_inst_id       object.object_id%type;
     v_pol_acct_level               number := 2; 
     v_pif_balance                  object_bv_value.business_variable_value%type;
     v_due_date_criteria            pd_property.pd_property_value%type; 
     v_transaction_recon_map_row    db_trx_recon_map%rowtype;
     v_count                        number := 0;
     v_fitem_list                   pkg_os_object.t_object_list;
     v_final_item_list                   pkg_db_stmt.t_fitem_list;
     v_final_item_idx               number;										   
     v_included_inst_list           pkg_db_stmt.t_inst_list;
     v_future_inst_list             pkg_db_stmt.t_inst_list;
     v_total_balance_amt            number;
     v_invoice_create_threshold_amt pd_property.pd_property_value%type;
     v_generate_zero_invoice        pd_property.pd_property_value%type;
     v_generate_inv_tf              boolean := TRUE;
     v_intermediate_outcome         outcome.outcome_id%type;
     v_db_recon_row                 db_reconciliation%rowtype;
     v_include_payments_property    pd_property.pd_property_value%type;
     --UTPRODUCT-1077
     v_billplan_associated_policy   object.object_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_billplan_id, 32833748 ); 
     
     v_policy_list                  pkg_db_cash_apply.t_policy_amt_list;          -- UTPRODUCT-1077
     v_policy_index                 number;
     v_first_policy_id              object.object_id%type;														  
     v_pd_prop_pending_inst_create  pd_property.pd_property_value%type; --LIOPRODUCT-124
	 
     v_billing_acc_parent_id       object.object_id%type;
     v_SuspendNonSuspend_pol_lst   pkg_db_cash_apply.t_policy_list;              -- UTPRODUCT-4469
     v_policy_term_list             t_policy_term_list;                           -- UTPRODUCT-4754 
	 
     cursor c_payment_fitems 
     is
         -- Query with 'With Clasue' 
         -- UTPRODUCT-4754 Starts   
         with
               Validpolicy( policy_id )
         as
         (
               select
                    distinct policy_id
               from
                    dragon_scheduled_installment dsi
               where
                    pref_bill_plan_id = in_billplan_id
               and
                    dsi.balance_amount <> 0 -- Added New Condition
               and
                    (
                         (
                              not exists(
                                        select
                                             ptrx.policy_id
                                        from
                                             dragon_policy_trx ptrx
                                        where
                                             dsi.policy_id = ptrx.policy_id
                                        and
                                             ptrx.policy_trx_type_id in (9, 8, 5099)
                                        and
                                             ptrx.policy_trx_object_state_id = 31715
                                        )
                         )
                         or

                         (
                              nvl( pkg_os_product.fn_product_property_get(policy_id,PKG_DB_CONSTANT.gSubjBillingAllowed ) , PKG_DB_CONSTANT.g_Yes )  =  PKG_DB_CONSTANT.g_Yes --OSPRODUCT-13644

                         )

                  )
               and
                  -- OSPRODUCT-17787
                  -- If BORd do not pick the policy
                  nvl (pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, dsi.policy_id, 32983748), 2) = 2
          )
          -- UTPRODUCT-4754 Ends
          -- Main Query 
          select
               
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               f.due_date,
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
               f.fitem_asset_id,                      
               f.policy_term_id
          from
               dragon_fitem f,Validpolicy   -- UTPRODUCT-4754
          where
               f.billing_account_id = v_billing_account_id
          and
               fitem_category_id in (646)
          and      
               balance<>0               
          and     
               f.policy_id = Validpolicy.policy_id  -- UTPRODUCT-4754
          -- UTPRODUCT-4754 Starts Commented         
          /*  
               (
               f.policy_id in (select policy_id  from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
               )
          and f.policy_id not in (
                                   select
                                        ptrx.policy_id
                                   from
                                        dragon_policy_trx ptrx
                                   where
                                        f.policy_id = ptrx.policy_id
                                   and
                                        ptrx.policy_trx_type_id in (9, 8, 5099)
                                   and
                                        ptrx.policy_trx_object_state_id = 31715
                                   )
          */
          -- UTPRODUCT-4754 Ends Commented 
          ; 
     cursor c_due_fitem
     (
          cin_billing_account_id               object.object_id%type,
          cin_billplan_id                         object.object_id%type,
          cin_recon_type                         object.object_id%type,
          cin_stmt_as_of_date                    date,
          cin_stmt_start_date                    date
     )
     is
         -- Query with 'With Clasue' 
         -- UTPRODUCT-4754 Starts   
         with
               ValidInstallment( installment_id )
         as
         (
               select
                    installment_id
               from
                    dragon_scheduled_installment dsi
               where
                    pref_bill_plan_id = in_billplan_id
               and
                    dsi.balance_amount <> 0 -- Added New Condition
               and
                    (
                         (
                              not exists(
                                        select
                                             ptrx.policy_id
                                        from
                                             dragon_policy_trx ptrx
                                        where
                                             dsi.policy_id = ptrx.policy_id
                                        and
                                             ptrx.policy_trx_type_id in (9, 8, 5099)
                                        and
                                             ptrx.policy_trx_object_state_id = 31715
                                        )
                         )
                         or

                         (
                              nvl( pkg_os_product.fn_product_property_get(policy_id,PKG_DB_CONSTANT.gSubjBillingAllowed ) , PKG_DB_CONSTANT.g_Yes )  =  PKG_DB_CONSTANT.g_Yes --OSPRODUCT-13644

                         )

                  )
                  and
                  -- OSPRODUCT-17787
                  -- If BORd do not pick the policy
                  nvl (pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, dsi.policy_id, 32983748), 2) = 2 
          )
          -- UTPRODUCT-4754 Ends
          -- Main Query 
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(p.inv_mode, 1, f.due_date, f.withdrawal_date ) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
               f.fitem_asset_id,                      
               f.policy_term_id
          from
               dragon_fitem f              
          join
               (
                select nvl(pkg_os_product.fn_product_property_get(111,111,p.policy_id ,19446),1) as inv_mode, 
                       p.policy_id
                 from dragon_policy p                 
               ) p on (p.policy_id = f.policy_id)   
               ,ValidInstallment  -- UTPRODUCT-4754                 
          where
               --f.due_date is not null
               decode(p.inv_mode, 1, f.due_date, f.withdrawal_date ) is not null -- UTPRODUCT-4864
          and
               -- trunc(f.due_date) <= trunc( cin_stmt_as_of_date)
               trunc(decode(p.inv_mode, 1, f.due_date, f.withdrawal_date )) <= trunc( cin_stmt_as_of_date) -- UTPRODUCT-4864
          and
               f.fitem_type_id = pkg_db_stmt.g_FItem_Debit
          and
               f.fitem_category_id not in (pkg_db_stmt.g_FItem_Cat_Commission)
          and
               f.fitem_billed_tf is null
          and
               cin_recon_type in ( pkg_db_stmt.g_ReconciliationDirectBill,  pkg_db_stmt.g_ReconDirectBillBroker)
          and
               (
                    f.balance <>0
                    --or
                   --(v_generate_credit_invoice = 'T' and  f.balance <=-0.01)
               )
          and
               f.billing_account_id = cin_billing_account_id 
          and
               f.installment_id = ValidInstallment.installment_id  -- UTPRODUCT-4754
          -- UTPRODUCT-4754 Starts Commented      
          /*
               f.installment_id in (select installment_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
          --UTPRODUCT-4469 Starts - Commented 
          and --OSPRODUCT-3152
               pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,f.policy_id,pkg_db_suspension.gSuspend_Invoices_Activity) <> 1 
          -- UTPRODUCT-4469 Ends   - Commented 
          and f.policy_id not in (
                                   select
                                        ptrx.policy_id
                                   from
                                        dragon_policy_trx ptrx
                                   where
                                        f.policy_id = ptrx.policy_id
                                   and                                   
                                        ptrx.policy_trx_type_id in (9, 8, 5099)
                                   and
                                        ptrx.policy_trx_object_state_id = 31715
                                   )                                       
          */   
          -- UTPRODUCT-4754 Ends                                                          
     union
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(p.inv_mode, 1, f.due_date, f.withdrawal_date ) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
               f.fitem_asset_id,                     
               f.policy_term_id
          from
               dragon_fitem f       
          join
               (
                select nvl(pkg_os_product.fn_product_property_get(111,111,p.policy_id ,19446),1) as inv_mode, 
                       p.policy_id
                 from dragon_policy p                 
               ) p on (p.policy_id = f.policy_id)  
               ,ValidInstallment -- UTPRODUCT-4754                 
          where
               --trunc(f.due_date) <= trunc(cin_stmt_as_of_date)
               trunc(decode(p.inv_mode, 1, f.due_date, f.withdrawal_date )) <= trunc(cin_stmt_as_of_date)-- UTPRODUCT-4864
          and
               f.fitem_type_id =  pkg_db_stmt.g_FItem_Credit
          and
               f.fitem_billed_tf is null
          and
               cin_recon_type =  pkg_db_stmt.g_ReconDirectBillBroker
          and
               f.fitem_category_id =  pkg_db_stmt.g_FItem_Cat_Commission
          and
               (f.balance <>0)
          and
               f.billing_account_id = cin_billing_account_id
          and
               f.installment_id = ValidInstallment.installment_id  -- UTPRODUCT-4754
          -- UTPRODUCT-4754 Starts Commented      
          /*
               f.installment_id in (select installment_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
           and --OSPRODUCT-3152
               pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,f.policy_id,pkg_db_suspension.gSuspend_Invoices_Activity) <> 1 
/          and f.policy_id not in (
                                   select
                                        ptrx.policy_id
                                   from
                                        dragon_policy_trx ptrx
                                   where
                                        f.policy_id = ptrx.policy_id
                                   and                                   
                                        ptrx.policy_trx_type_id in (9, 8, 5099)
                                   and
                                        ptrx.policy_trx_object_state_id = 31715
                                   )
          */
          -- UTPRODUCT-4754 Ends                         
          --this is past due fitems
          union
          select
               f.fitem_id,
               f.policy_id,
               f.policy_transaction_id,
               f.fitem_category_id,
               f.fitem_sub_category_id,
               --f.due_date,
               decode(p.inv_mode, 1, f.due_date, f.withdrawal_date ) as due_date, -- UTPRODUCT-4864
               f.policy_effective_date,
               f.balance               as balance_amt,-- balance amt - can be due or cash
               f.fitem_asset_id,
               f.policy_term_id
          from
               dragon_fitem f
          join
               (
                select nvl(pkg_os_product.fn_product_property_get(111,111,p.policy_id ,19446),1) as inv_mode, 
                       p.policy_id
                 from dragon_policy p                 
               ) p on (p.policy_id = f.policy_id) ,ValidInstallment -- UTPRODUCT-4754               
          where
               --trunc(f.due_date) < trunc(cin_stmt_start_date) --UTPRODUCT-5044
               /*trunc(decode(p.inv_mode, 1, f.due_date, f.withdrawal_date ))< trunc(cin_stmt_start_date) -- UTPRODUCT-4864
          and*/
               f.fitem_type_id =  pkg_db_stmt.g_FItem_Debit
          and
               f.fitem_category_id not in (pkg_db_stmt.g_FItem_Cat_Commission)

          and
               f.fitem_billed_tf =  pkg_db_stmt.gBooleanTrue
          and
               (
                    f.balance <>0
                   -- or
                   --(v_generate_credit_invoice = 'T' and  f.balance <=-0.01)
               )
          and
               f.billing_account_id = cin_billing_account_id
          and
               f.installment_id = ValidInstallment.installment_id  -- UTPRODUCT-4754
          -- UTPRODUCT-4754 Starts Commented      
          /*
               f.installment_id in (select installment_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
          and 
			   f.policy_id not in (
                                   select
                                        ptrx.policy_id
                                   from
                                        dragon_policy_trx ptrx
                                   where
                                        f.policy_id = ptrx.policy_id
                                   and                                   
                                        ptrx.policy_trx_type_id in (9, 8, 5099)
                                   and
                                        ptrx.policy_trx_object_state_id = 31715
                                   )
          */
          -- UTPRODUCT-4754 Ends                      
          ;
          --
          -- cursor to fetch the impacted Billing account installment
          --
          cursor c_ba_inst
          (
               cin_billacc_id                 object.object_id%type,
               cin_billing_period_start_date           date,
               cin_billing_period_end_date             date,
               cin_billplan_id                         object.object_id%type
          )
          is
               select
                    distinct(dbc.BA_INSTALMENT_ID) into v_ba_inst_id
               from
                    DRAGON_BA_INSTALMENT db,
                    DRAGON_BA_INSTALMENT_COMPONENT dbc
               where
                    db.BA_INSTALMENT_ID = dbc.BA_INSTALMENT_ID
               and
                    db.BILLING_ACCOUNT_ID = cin_billacc_id
               and
                    trunc(db.WITHDRAWAL_DATE) >= trunc(cin_billing_period_start_date)
               and
                    trunc(db.WITHDRAWAL_DATE) < trunc(cin_billing_period_end_date)
               and    
                    db.payment_arrangement_id =cin_billplan_id  

               ;
          -- Remaining Installments
          cursor c_ba_remaining_inst
          (
          cin_billacc_id                 object.object_id%type,
          cin_billing_period_end_date             date, 
          cin_acct_pol_level             number
          )
          is
          select
               db.BA_INSTALMENT_ID ,db.WITHDRAWAL_DATE, sum(dbc.AMOUNT) as amount
          from
               DRAGON_BA_INSTALMENT db,
               DRAGON_BA_INSTALMENT_COMPONENT dbc
          where
               db.BA_INSTALMENT_ID = dbc.BA_INSTALMENT_ID
          and
               db.BILLING_ACCOUNT_ID = dbc.BILLING_ACCOUNT_ID  -- UTPRODUCT-4754 Added condtion.
          and
               db.BILLING_ACCOUNT_ID = cin_billacc_id          -- UTPRODUCT-4754 Replace dbc to db
          and
               dbc.POL_OR_ACCT_LEVEL  = cin_acct_pol_level
          and
               trunc(db.WITHDRAWAL_DATE) > trunc(cin_billing_period_end_date)
          group by
               db.BA_INSTALMENT_ID,db.withdrawal_date
          order by db.withdrawal_date;


begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Entering Invoice Generation for Bill Plan ID: ' || in_billplan_id
          );

     end if;
	 
     --OSPRODUCT-11365
     v_billing_acc_parent_id  :=   pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_account_id
                                   );
     --  UTPRODUCT-4469 Starts                               
     v_ba_account_type_id      := pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billing_account_id,
                                        pkg_db_object.gbv_billacc_accounttype
                                  );
     
     --  UTPRODUCT-4469 Ends                              
                                        
     if v_billing_acc_parent_id is null
     then
          
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Billing Account Parent is null, transaction cannot be processd ' || v_billing_account_id ||
               ' Billing Account Type ID :'|| v_ba_account_type_id --UTPRODUCT-4469
          );

          raise no_data_found;

     end if;
     --OSPRODUCT-11365

     v_SuspendNonSuspend_pol_lst.delete; -- UTPRODUCT-4469 
     v_policy_term_list.delete;          -- UTPRODUCT-4754
     -----------------------------------------------------------------------------
     --
     --  1.   Based on Bill Plan object, get installments that are going to be included into invoice and determine
     --       start and end date of the billing period being invoiced . Additionally, collect future installments for analysis.
     --
     -----------------------------------------------------------------------------

      sp_get_billplan_pending_installments
     (
          in_session_id,
          in_transaction_id,
          in_billplan_id,
          v_billing_period_start_date,
          v_billing_period_end_date,
          v_included_inst_list,
          v_future_inst_list,
          v_SuspendNonSuspend_pol_lst,  -- UTPRODUCT-4469
          v_policy_term_list            -- UTPRODUCT-4754
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '... Final Billing Period Start Date: ' || v_billing_period_start_date ||
               ', Final Billing Period End Date: ' || v_billing_period_end_date
          );
     end if;

     -----------------------------------------------------------------------------
     --
     --  3.   If billing period start and end date are not null, generate invoice, else set outcome as gOutcome_InvoiceNotCreated
     --
     -----------------------------------------------------------------------------
      
     if 
     (
          v_billing_period_start_date is not null
          and
          v_billing_period_end_date is not null
     )
     then

          -----------------------------------------------------------------------------
          --
          --  4.   Based on Recon type loop through every fitems that fit the billing period and create v_fitem_list
          --
          -----------------------------------------------------------------------------

          v_total_balance_amt := 0;
          v_transaction_recon_map_row   := pkg_db_stmt_acct_rollup.fn_trx_recon_map_row(in_session_id,in_transaction_id,pkg_db_stmt.g_SetType_Invoice, null);
          v_reconciliation_type_id      :=v_transaction_recon_map_row.reconcialation_id;
          
       
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '......... Cursor parameters :' ||
                    v_billing_account_id || ' as cin_billing_account_id, '                          ||
                    v_reconciliation_type_id         || ' as cin_recon_type , to_date('''                       ||
                    v_billing_period_end_date          || ' ,''dd.mm.yy'')as cin_stmt_as_of_date, to_date('''   ||
                    v_billing_period_start_date        || ' ,''dd.mm.yy'')as cin_stmt_start_date'                 
               );
          end if;

          v_policy_list.delete;							   

          for v_f_rec in c_due_fitem
          (
               v_billing_account_id,
               in_billplan_id,
               v_reconciliation_type_id,
               v_billing_period_end_date,
               v_billing_period_start_date
          )
          loop
               -- UTPRODUCT-4469 Start
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '..:Fitem ID:' || v_f_rec.fitem_id || 
                         ':Policy ID:' || v_f_rec.policy_id || 
                         ':Category:' || v_f_rec.fitem_category_id ||
                         ':due_date:' ||  v_f_rec.due_date                  
                    );
               end if;
               -- UTPRODUCT-4469 Ends
               if  v_SuspendNonSuspend_pol_lst.exists( v_f_rec.policy_id ) then -- UTPRODUCT-4469 
               if  v_SuspendNonSuspend_pol_lst ( v_f_rec.policy_id ) = 0  -- UTPRODUCT-4469 Start Non-Suspended-Policy
               then
                    v_total_balance_amt := v_total_balance_amt + v_f_rec.balance_amt;
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '......... looping fitem :' ||
                              v_f_rec.fitem_id || ' as fitem id, '                          ||
                              v_f_rec.policy_id         || ' policy_id    '                 ||
                              v_f_rec.fitem_category_id          || 'category'   ||
                              v_f_rec.due_date        || ' due_date'                 
                         );
                    end if;

                    v_final_item_list(v_f_rec.fitem_id)     :=   v_f_rec.fitem_id;
                    v_count                                 :=   v_count + 1;
                    -- UTPRODUCT-1077
                    if not v_policy_list.exists( v_f_rec.policy_id )
                    then

                         v_policy_list( v_f_rec.policy_id  ) := v_f_rec.policy_id ;

                    end if;
                
                end if;  -- UTPRODUCT-4469 Ends Non-Suspended-Policy
                end if; 

          end loop;
          
          v_first_policy_id := v_policy_list.first();
          -----------------------------------------------------------------------------
          --
          --  1.   Get pd properties like Invoice Create Threshold amount
          --       Zero Invoice Generation flag and Generate Credit invoice
          --
          -----------------------------------------------------------------------------
          --UTPRODUCT-1698
          -- HC: can we have a case the common invoice is required still these properties can be different based on products?
          -- Review: use first policy and get the properties based on that;
          v_invoice_create_threshold_amt := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_first_policy_id,  pkg_db_stmt.gInvoiceCreateThreshhold) ,0 );
          v_generate_zero_invoice        := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_first_policy_id,  pkg_db_stmt.gGenerateZeroInvoiceTF) ,'T' );
          v_generate_credit_invoice      := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_first_policy_id,  pkg_db_constant.gCreditInvoiceAllowed),'T' );
          v_exclude_audit_tf             := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_first_policy_id, pkg_db_stmt.gExcludeAuditInvoiceTF),'F');
          v_include_payments_property    := pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_first_policy_id,19246);
        
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '... v_invoice_create_threshold_amt: ' || v_invoice_create_threshold_amt ||
                    ', v_generate_zero_invoice: ' || v_generate_zero_invoice||
                    ', v_generate_credit_invoice:'||v_generate_credit_invoice||
                    ', v_exclude_audit_tf:'|| v_exclude_audit_tf
               );
          end if;

          if NVL(v_include_payments_property,'F')='T' then
               
               for v_f_rec in c_payment_fitems
               loop

                    v_total_balance_amt := v_total_balance_amt + v_f_rec.balance_amt;
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '......... looping fitem :' ||
                              v_f_rec.fitem_id || ' as fitem id, '                          ||
                              v_f_rec.policy_id         || ' policy_id    '                 ||
                              v_f_rec.fitem_category_id          || 'category'   ||
                              v_f_rec.due_date        || ' due_date'                 
                         );
                    end if;
                    v_final_item_list(v_f_rec.fitem_id)     :=   v_f_rec.fitem_id;
                    v_count                                 :=   v_count + 1;

               end loop;
               
          end if;

          -----------------------------------------------------------------------------
          --
          --  5.   Check if an Invoice should be generated based on GenerateZeroInvoice flag and InvoiceCreateThreshold amount flag
          --
          -----------------------------------------------------------------------------

          if v_count > 0 then

               case 
               when v_total_balance_amt = 0
               then 
                    if v_generate_zero_invoice = 'F'
                    then
                         v_generate_inv_tf := FALSE;
                         io_action_outcome_id :=  pkg_db_stmt.gOutcome_ZeroInvSuppressed;
                    else
                         v_generate_inv_tf := TRUE;
                    end if;

               when v_total_balance_amt < 0 and v_generate_credit_invoice = 'F'
               then
                    v_generate_inv_tf := FALSE;
                    io_action_outcome_id :=  62;

               when v_total_balance_amt between 0 and v_invoice_create_threshold_amt -- Negative amount should not be processed by InvoiceCreateThreshold
               then
                    v_generate_inv_tf := FALSE;
                    io_action_outcome_id :=  pkg_db_stmt.gOutcome_InvThresholdViolated;
               else
                    v_generate_inv_tf := TRUE;
               end case;

          else

               v_generate_inv_tf := FALSE;
               
               io_action_outcome_id :=  pkg_db_stmt.gOutcome_ZeroInvSuppressed;
               
               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Installments are picked but No financials found for invoicing'
                    );
               end if;
               --raise no_data_found;

          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '   Checking if an invoice should be generated basing on :'||
                    '   Total balance amount (including past due amount) :'||v_total_balance_amt||
                    '   GenerateZeroInvoice property :'||v_generate_zero_invoice||
                    '   Invoice Create Threshold : '||v_invoice_create_threshold_amt||
                    '   Future installments count : '||v_future_inst_list.count
               );

               if v_future_inst_list.count > 0
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '   ...Future installments Details: '
                    );

                    for i in 1..v_future_inst_list.count loop
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '   ......id|num|type|due_date|next_inst_id :'
                              ||v_future_inst_list(i).inst_id         ||' | '
                              ||v_future_inst_list(i).inst_num        ||' | '
                              ||v_future_inst_list(i).inst_type       ||' | '
                              ||v_future_inst_list(i).billing_due_date||' | '
                              ||v_future_inst_list(i).next_inst_id
                         );
                    end loop;
               end if;

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    'Result :'|| case when v_generate_inv_tf
                    then ' An Invoice is going to be generated.'
                    else case when io_action_outcome_id =  pkg_db_stmt.gOutcome_ZeroInvSuppressed
                    then ' Invoice was not generated as its amount is zero.'
                    when io_action_outcome_id =  62
                    then ' Invoice was not generated as it is a credit invoice'
                    when io_action_outcome_id =  pkg_db_stmt.gOutcome_InvThresholdViolated
                    then ' Invoice was not generated as its amount does not satisfy InvoiceCreateThreshold amount.'
                    else ' Invoice was not generated...unhandled case'
                    end
                    end
               );
          end if;

          -----------------------------------------------------------------------------
          --
          --  6.   If invoice is going to be suppressed due to GenerateZeroSupressed, CreditInvoiceSupressed or InvoiceCreateThresholdVoilated
          --
          -----------------------------------------------------------------------------
          if NOT v_generate_inv_tf
          then
               -----------------------------------------------------------------------------
               --
               --          a.   Mark all the installments that are going to be included into invoice as Suppressed
               --          b.   Calculate and set new Next Invoice Date
               --          c.   Exit from the invoice generation routine
               --
               -----------------------------------------------------------------------------
               -- Mark installments as Suppressed
               --
               v_inst_index := v_included_inst_list.first;

               while v_inst_index is not null
               loop

                    pkg_os_object_io.sp_object_bv_set 
                    (
                         in_session_id, 
                         in_transaction_id,
                         v_included_inst_list(v_inst_index).inst_id,
                         pkg_db_stmt.gbv_SchPayInst_Invoice_TF,
                         pkg_db_stmt.g_BooleanSuppressed
                    );

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              'Marking installment '||v_included_inst_list(v_inst_index).inst_id||' as Suppressed'
                         );
                    end if;

                    v_inst_index := v_included_inst_list.next(v_inst_index);

               end loop;

               -- Set new Next Invoice Date taking Suppressed Invoices into considiration
               --
               -- Set the Next invoice date for each term. 
               sp_term_next_invoice_date_set
               (
                  in_session_id,
                  in_transaction_id,
                  in_billplan_id,
                  v_policy_term_list     -- UTPRODUCT-4469
               );
               RETURN; -- exit from invouce generation routine
               
          end if;
          -----------------------------------------------------------------------------
          --
          --  7.   Invoice generation started
          --
          -----------------------------------------------------------------------------
          -----------------------------------------------------------------------------
          --
          --  8.   Update due date of unbilled included installments
          --
          -----------------------------------------------------------------------------
          if (v_included_inst_list.count > 0)
          then

               pkg_cs_db_stmt.sp_update_inst_due_date
               (
                    in_session_id,
                    in_transaction_id,
                    v_first_policy_id,
                    v_included_inst_list,
                    in_billingaccount_id=> v_billing_account_id --UTPRODUCT-1698
               );
               
          end if;

          -----------------------------------------------------------------------------
          --
          --  9.   Get the past due , available cash and credits 
          --
          -----------------------------------------------------------------------------

          begin
               select
                   nvl(sum(balance),0), min(due_date)
               into
                   v_past_due, v_past_due_date
               from
                   dragon_fitem
               where
                   fitem_type_id = pkg_db_billing.gFItem_Debit
               and
                   fitem_billed_tf =  pkg_db_stmt.gBooleanTrue
               and
                   aging_status_id = pkg_db_constant.gFitem_Past_Due
               and
                   billing_account_id = v_billing_account_id 
               and 
                  installment_id in (select installment_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
               
               group by
                     billing_account_id
               ;
               
          exception when no_data_found then

               v_past_due :=0;
                    
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Past Due Amount: ' || v_past_due
                         || 'v_past_due_date:'||v_past_due_date
                    );

               end if;

          end;
          

          -- Get the available cash
              
          select
               nvl(sum(balance),0)
          into
              v_available_cash
          from
              dragon_fitem
          where
              fitem_category_id=pkg_db_billing.gFItem_Category_Cash
          and
              billing_account_id = v_billing_account_id 
          and 
              policy_id in  (select policy_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
          ;

          -- Get the available credit
          select
              nvl(sum(balance),0)
          into
              v_available_credit
          from
              dragon_fitem
          where
              fitem_category_id not in (pkg_db_billing.gFItem_Category_Cash,pkg_db_billing.gFItem_Cat_Commission)
          and
              billing_account_id = v_billing_account_id 
          and 
              policy_id in (select policy_id from dragon_scheduled_installment  where pref_bill_plan_id=in_billplan_id)
               
           and balance <0                       
               
           ;

          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Past Due Amount: ' || v_past_due||
                    '... Available cash: ' || v_available_cash ||
                    ' v_available_credit:' || v_available_credit
               );

          end if;
          
          -----------------------------------------------------------------------------
          --
          -- 10.   Create the associated billingaccounttrxset and set BVs
          --
          -----------------------------------------------------------------------------

          pkg_os_object.sp_object_create
          (
               in_session_id,
               in_transaction_id,
               pkg_db_billing.gObjType_BillingAccountTrxSet, 
               v_billing_account_id,
               v_billingaccounttrxset_id
          );

          v_most_rec_invc_id :=  pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_billing_account_id,
               pkg_db_constant.gbv_most_rec_invc
          );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '||||||Most Recent Invoice: ' || v_most_rec_invc_id||
                    'no of policies for which financials are included in this invoice'||v_policy_list.count           -- UTPRODUCT-1077
               );

          end if;

          --Set the BV's of the BillingAccountTrxSet

          v_bv_table.delete;


          v_bv_table ( pkg_db_stmt.gbv_FITrxSetEntryType        ).business_variable_value := pkg_db_object.gBatchEntryMethod_System;
          v_bv_table ( pkg_db_stmt.gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
          v_bv_table ( pkg_db_stmt.gbv_FITrxSetDatePosted       ).business_variable_value :=  to_char(pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, v_billing_account_id), pkg_os_constant.DragonDateFormatDefault);
          v_bv_table ( pkg_db_stmt.gbv_FITrxSetExternalBatchId  ).business_variable_value := 'Batch'|| to_char(pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, v_billing_account_id), pkg_os_constant.DragonDateFormatDefault);
          v_bv_table ( pkg_db_stmt.gbv_FITrxSetBatchType        ).business_variable_value := pkg_db_stmt.g_SetType_Invoice ;
          v_bv_table ( pkg_db_stmt.gbv_FITrxSet_InvoiceNumber   ).business_variable_value := seq_invoice_number.nextval ;
          --OSPRODUCT-5046
          --v_bv_table ( pkg_db_stmt.gbv_FITrx_IncludedScheduleIns).business_variable_value := v_invoiced_schedules ;

       /*   -- UTPRODUCT-1077
          if v_policy_list.count =1 then
             v_bv_table ( pkg_db_nightly_process.gbv_BillAcctTrxSet_AssocPolicy ).business_variable_value := v_policy_list.first ;
          end if; */  				  

          if v_most_rec_invc_id is not null
          then
               v_bv_table ( pkg_db_constant.gbv_previous_invc ).business_variable_value := v_most_rec_invc_id;
               
               v_prev_invc_process_dt :=  to_date(pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_most_rec_invc_id,
                    pkg_db_cash_apply.gbv_BillAccTrxSet_ProcessDate
               ), pkg_os_constant.DragonDateFormatDefault);
               
          end if;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               v_bv_table
          );

          -----------------------------------------------------------------------------
          --
          -- 11.   Set the Invoiced flag for all included Installments/Stubs to Yes
          --
          -----------------------------------------------------------------------------
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '...... Loop through all Installment/Stub objects '
               );

          end if;

          v_inst_index := v_included_inst_list.first;

          while v_inst_index is not null
          loop

               v_invoice_processed_tf := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id, 
                                             in_transaction_id,
                                             v_included_inst_list(v_inst_index).inst_id, 
                                             pkg_db_stmt.gbv_SchPayInst_Invoice_TF
                                        );


               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '......... Looping through Installment/Stub ID: '||v_included_inst_list(v_inst_index).inst_id ||
                         ', Installment Number: '||v_included_inst_list(v_inst_index).inst_num ||
                         ', Installment Type (1:Installment 2:Stub): '|| v_included_inst_list(v_inst_index).inst_type ||
                         ', Due Date: ' || v_included_inst_list(v_inst_index).billing_due_date ||
                         ', Billing Period End Date: ' || v_billing_period_end_date
                    );

               end if;

               if v_included_inst_list(v_inst_index).billing_due_date is not null
               then

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '............ This Installment/Stub Due Date exists within the Billing Period'||v_invoice_processed_tf
                         );

                    end if;

                    if v_invoice_processed_tf is null or v_invoice_processed_tf = pkg_db_stmt.g_BooleanNo
                    then

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '............... This Installment/Stub is not yet invoiced. So, adding this to the list of eligible installments and marking the Invoice flag as Yes'
                              );

                         end if;

                         pkg_db_object.sp_ba_object_bv_set    --pkg_os_object_io.sp_object_bv_set--OSPRODUCT-16499
                         (
                              in_session_id,
                              in_transaction_id,
                              v_included_inst_list(v_inst_index).inst_id,
                              pkg_db_stmt.gbv_SchPayInst_Invoice_TF,
                              pkg_db_stmt.g_BooleanYes
                         );
                         
                            
                         -- Set the reference from PaymentScheduleInstallment to Invoice Transaction
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_included_inst_list(v_inst_index).inst_id,
                              pkg_db_stmt.gbv_SchInst_RelatedInvoice,
                              v_billingaccounttrxset_id
                         );
                         
                         pkg_os_datamart.sp_datamart_update_row
                         (
                              in_session_id,
                              in_transaction_id,
                              v_included_inst_list(v_inst_index).inst_id,
                              v_datamart_tf
                         ); --OSPRODUCT-18615
                         
                         --OSPRODUCT-5046
                          /*         if v_session_control.gLogging_Full then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... Scheduled Payments for which Invoice has been created: ' || v_invoiced_schedules
                                   );
                              end if;

                         if v_invoiced_schedules is null
                         then

                            v_invoiced_schedules := v_included_inst_list(v_inst_index).inst_id;

                         else

                            v_invoiced_schedules := (v_invoiced_schedules || ','|| v_included_inst_list(v_inst_index).inst_id);--OSPRODUCT-5046

                         end if;
                                 */  -- OSPRODUCT-5046 end

                         if v_included_inst_list(v_inst_index).inst_type = pkg_db_stmt.g_InstallmentTypeInstallment
                         then

                            v_loop_sch_latest_id := v_included_inst_list(v_inst_index).inst_id;

                         end if;

                         if v_first_uninvoiced_inst is null 
                         then

                            v_first_uninvoiced_inst := v_included_inst_list(v_inst_index).inst_id;

                         end if;

                         
                            -- OSPRODUCT-5046
                          v_new_invoiced_schedules := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_billingaccounttrxset_id,
                                         pkg_db_stmt.gbv_FITrx_IncludedScheduleIns
                                    );
                                  
                                                  
                                         
                         begin
                           
                              select to_number(v_new_invoiced_schedules) into v_new_invoiced_schedules_id from dual;
                              
                              v_new_invoiced_schedules := pkg_os_long_string.fn_get_long_string 
                                                   (
                                                        in_session_id, 
                                                        in_transaction_id, 
                                                        v_new_invoiced_schedules_id
                                                   );
                               
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '..Schedule List ID: ' || v_new_invoiced_schedules_id ||
                                        '.. String: '  || v_new_invoiced_schedules
                                   );

                              end if;                   
                              
                         exception
                              
                              when INVALID_NUMBER then
                                   
                                   -- OSPRODUCT-4079
                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. Correcting old bad data..'
                                        );

                                   end if;  
                                   
                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_billingaccounttrxset_id,
                                        pkg_db_stmt.gbv_FITrx_IncludedScheduleIns,
                                        null
                                   );
                                   
                         end;                
                                                  
                         if length(v_new_invoiced_schedules || ',' || v_included_inst_list(v_inst_index).inst_id) < 3500 then               
                              
                              v_new_invoiced_schedules := v_new_invoiced_schedules || ',' || v_included_inst_list(v_inst_index).inst_id;
                              
                              -- OSPRODUCT-4079
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. Schedules List: ' || v_new_invoiced_schedules
                                   );

                              end if;              
                              
                              -- v_new_policy_list_id := pkg_os_long_string.fn_create_long_string(in_session_id, in_transaction_id, v_new_policy_list);
                              pkg_os_long_string.set_long_string
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_billingaccounttrxset_id,
                                   pkg_db_stmt.gbv_FITrx_IncludedScheduleIns, -- notdescription CLOB
                                   v_new_invoiced_schedules,
                                   v_new_invoiced_schedules_id
                              );
                              
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_billingaccounttrxset_id,
                                   pkg_db_stmt.gbv_FITrx_IncludedScheduleIns, -- notdescription CLOB
                                   v_new_invoiced_schedules_id
                              );
                              
                         end if;
                         -- end OSPRODUCT-5046
                    
						-- UTXPRODUCT-346
						elsif v_invoice_processed_tf = pkg_db_stmt.g_BooleanSuppressed 
							  and
							  pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_included_inst_list(v_inst_index).inst_id,pkg_db_stmt.gbv_SchInst_RelatedInvoice) is null
						then
												 
							 pkg_os_object_io.sp_object_bv_set
							 (
								  in_session_id,
								  in_transaction_id,
								  v_included_inst_list(v_inst_index).inst_id,
								  pkg_db_stmt.gbv_SchInst_RelatedInvoice,
								  v_billingaccounttrxset_id
							 ); -- end UTXPRODUCT-346
                         
                    else

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '............... Skipping this Installment/Stub as it is already invoiced.'
                              );

                         end if;

                    end if;

               end if;

               v_inst_index := v_included_inst_list.next(v_inst_index);

          end loop; 

          if v_session_control.gLogging_Full then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Scheduled Payments for which Invoice has been created: ' || v_new_invoiced_schedules
               );
          end if;



          --
          --  Determine the Invoice Due Date 
          --
          v_due_date_criteria := nvl( pkg_os_product.fn_product_property_get
                                   (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_first_policy_id,  
                                   pkg_db_stmt.gPropInvoiceDueDateCriteria
                                   ), pkg_db_stmt.gDueDateByLeadTime);
          

                      
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_policy_id for bill plan: '||v_policy_id||
                    'v_first_uninvoiced_inst:'||v_first_uninvoiced_inst||
                    'v_due_date_criteria:'||v_due_date_criteria
               );

          end if;


          /* commented out by UTPRODUCT-4864  
          --
          -- Calculated Invoice Due Date
          --pkg_db_stmt_date.sp_calculate_invoice_due_date
          --(
          --     in_session_id,
          --     in_transaction_id,
          --     v_first_policy_id,
          --     v_first_uninvoiced_inst,
          --     v_due_date_criteria,
          --     v_due_date,
          --     v_billing_account_id
          --);          
          */
          --OSPRODUCT-18615 This will be null when there will only be supressed installment in the list.So this code is added to get this
          --supressed installment such that due date is not null.
          if v_first_uninvoiced_inst is null
          then
             v_first_uninvoiced_inst := v_included_inst_list(v_included_inst_list.first).inst_id;
          end if;
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_policy_id for bill plan: '||v_policy_id||
                    'v_first_uninvoiced_inst:'||v_first_uninvoiced_inst||
                    'v_due_date_criteria:'||v_due_date_criteria
               );

          end if;
          v_due_date := to_char(pkg_db_stmt_date.fn_installment_due_date_get -- UTPRODUCT-4864 : call pkg_db_stmt_date.fn_installment_due_date_get instead of pkg_db_stmt_date.sp_calculate_invoice_due_date
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                         
                                          v_first_uninvoiced_inst
                                     ),
                                     pkg_os_constant.DragonDateFormatDefault
                                           
								   
                                    );
          -- LXPRODUCT-342 - start                         
          If v_due_date is null then
          
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Due date is null for the Installment : ' || v_first_uninvoiced_inst ||
                    ' Policy ID for bill plan: '||v_policy_id||
                    ' Due date criteria :' ||v_due_date_criteria
               );

               raise_application_error
               (
                    -20999,' Due date is null for the Installment : ' || v_first_uninvoiced_inst
               );     
               
          end if;
          -- LXPRODUCT-342 - end 
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_due_date: '||v_due_date
               );

          end if;


          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_PaymentDueDate, 
               v_due_date
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_BillAccTrxSet_Duedate,
               v_due_date
          );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Invoice Due Date: '||v_due_date
               );

          end if;

          -- OSPRODUCT-1632 
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '... Included Schedules IN BillPlan: ' || v_new_invoiced_schedules
               );

          end if;
          
          --OSPRODUCT-5046
        /*  pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrx_IncludedScheduleIns,
               v_invoiced_schedules
          );*/
          -- OSPRODUCT-1632 
          -----------------------------------------------------------------------------
          --
          -- 12.   Create installments fee for all the Instalments included
          --
          -----------------------------------------------------------------------------

          --
          --         The Instalment Fee can be created as
          --         1.  Consolidated Instalment Fee for all the Instalments included
          --         2.  Fee Independently for all the Instalments
          
          -- UTPRODUCT-3828
          if v_billplan_associated_policy is not null then
    
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_billingaccounttrxset_id,
                    pkg_db_nightly_process.gbv_BillAcctTrxSet_AssocPolicy, 
                    v_billplan_associated_policy
               );
               v_currect_fitrx_id := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingaccounttrxset_id,
                    pkg_db_object.gbv_BillAccTrxSet_CurrTrx
               );
                pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_currect_fitrx_id,
                    pkg_db_object.gbv_FITrx_RefAssociatedPolicy, 
                    v_billplan_associated_policy
               );
               
               
          end if; 			   

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_constant.gbv_FiTrxSet_ref_Billplan,
               in_billplan_id
          );--LIOPRODUCT-83

          pkg_db_stmt_util.sp_invoice_installment_fee
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               v_first_policy_id,
               v_final_item_list,
               io_action_outcome_id
          );

          -- HC: fee items should be added to v_fitem_list as well.
          v_final_item_idx  := v_final_item_list.first;
          v_count  :=0;
          while  v_final_item_idx is not null
               loop
               
               v_fitem_list(v_count)                   :=   v_final_item_idx;
               v_count                                 :=   v_count + 1;
               v_final_item_idx :=   v_final_item_list.next(v_final_item_idx);
          end loop;     
          -----------------------------------------------------------------------------
          --
          -- 13.   Create a set of 'reconciliation' objects, that represent a de-normalized view of receivables.
          --
          -----------------------------------------------------------------------------
  
          pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
          (
               in_session_id,
               in_transaction_id,
               v_billing_account_id,
               pkg_db_stmt.g_SetType_Invoice ,
               pkg_db_object.gBatchEntryMethod_System,
               io_action_outcome_id,
               v_billingaccounttrxset_id,
               null,
               null,
               null,
               to_char(v_billing_period_start_date,pkg_os_constant.DragonDateFormatDefault),
               to_char(v_billing_period_end_date,pkg_os_constant.DragonDateFormatDefault),
               'F',
               v_fitem_list
          );

          -----------------------------------------------------------------------------
          --
          -- 16.   Create payment rollups for this Invoice.
          --
       
          if (v_included_inst_list.last is not null)  then
               -- Set the reference "Related To" from Invoice Transaction to PaymentScheduleInstallment
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingaccounttrxset_id,
                    pkg_db_stmt.gbv_FITrx_RelatedScheduleIns,
                    v_included_inst_list(v_included_inst_list.last).inst_id
               );

           
          end if;
          
          --- Set the ref Last Included installment from FITransactionSet/PolicyTransaction to installment object
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSetRefSchPayInst,
               v_loop_sch_latest_id
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_StartingBalance,
               v_starting_balance
          );
          
                                     
          v_total_change := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_billingaccounttrxset_id, pkg_db_stmt.gbv_FITrxSet_TotalChange);

          -- 
          -- The v_total_change already accumulated amounts from all the fitems, including the past due ones.
          -- We already have past due calculated and stored in the v_past_due.
          -- To get the Current due : v_total_change - v_past_due
          -- To get the amount due we just need to substuct available cash and credit from v_total_change.
          --

          v_current_due  := nvl(v_total_change,0) - nvl(v_past_due,0);

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '...... Current Due amount: ' || v_current_due||
                    'v_total_change'||v_total_change||
                    'v_past_due'||v_past_due
               );

          end if;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_CurrentDue, 
               v_current_due
          );

          -- If total_change is a negative we need to reverse signs
          if v_total_change < 0
          then
             v_amount_due := nvl(v_total_change*-1,0) - nvl(v_available_cash,0) - nvl(v_available_credit,0) ;
          else
             v_amount_due := nvl(v_total_change,0) - nvl(v_available_cash,0) - nvl(v_available_credit,0) ;
          end if;


          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '...... Total Amount Due without Late Fee: ' || v_amount_due||
                    'v_available_cash'||v_available_cash||
                    'v_available_credit'||v_available_credit
               );

          end if;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_AmountDueWOLate, 
               v_amount_due
          );

          -- HC: this is not correct- This has to be fixed. create another ticket
          v_amount_due_late_fee := v_amount_due + 10;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_AmountDueWLate, 
               v_amount_due_late_fee
          );


          -- set the value of v_past_due 
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_PastDue, 
               round(v_past_due,2)
          );
          --set the value of v_past_due_date on Billing Transaction
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt_policy.gbv_FITrxSet_PastDueDate, 
               to_char(v_past_due_date, pkg_os_constant.DragonDateFormatDefault)
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_CurrentDue, 
               round(v_current_due,2)
          ); 

          -- set the value of available cash
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_AvailableCash, 
               nvl((v_available_cash*-1),0)
          );


          -- set the value of available credit
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_AvailableCredit, 
               nvl((v_available_credit*-1),0)
          );


          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_BillingEndDate,
               to_char(v_included_inst_list(v_included_inst_list.last).ins_end_date , 
               pkg_os_constant.DragonDateFormatDefault)
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_BillingStartDate,
               to_char(v_billing_period_start_date,
               pkg_os_constant.DragonDateFormatDefault)
          );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_stmt.gbv_FITrxSet_InvoiceDate, 
               v_current_date
          );
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_billingaccounttrxset_id,
               pkg_db_constant.gbv_FiTrxSet_ref_Billplan, 
               in_billplan_id
          );
                    -- UTPRODUCT-1077

          pkg_db_object.sp_create_relatedPolicyEntity
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id

          ); --OSPRODUCT-11130
          
          --UTPRODUCT-3610
          pkg_cs_db_billing.sp_create_relatedPolicyEntity
          (
              in_session_id,
              in_transaction_id,
              v_billingaccounttrxset_id
                                       
          ); 			  
          
          v_pif_balance := round(pkg_db_functions.fn_get_pif_balance(in_session_id, in_transaction_id,v_billing_account_id,v_master_policy_id),2);
          
          -- OSPRODUCT-7957
          -- BV is made calculated
          -- pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billing_account_id,pkg_db_constant.gbv_most_rec_invc, v_billingaccounttrxset_id);
          -- end OSPRODUCT-7957
          
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billingaccounttrxset_id ,pkg_db_stmt_policy.gbv_BATrxSet_PIFBalance, v_pif_balance);--VAULTDEV-8269

          /* UTPRODUCT-4469 Satrts Commented because 32471622 gbv_BA_Inst_Rel_Inv not exist in designer
          -----------------------------------------------------------------------------
          --
          -- 14.   set the related invoice reference on Billing Account Installment as well
          --
          -----------------------------------------------------------------------------
          for r_ba_inst in c_ba_inst(v_billing_account_id, v_billing_period_start_date, v_billing_period_end_date, in_billplan_id)
          loop
               v_ba_inst_id := r_ba_inst.ba_instalment_id;
               
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_ba_inst_id,
                    pkg_db_stmt_account.gbv_BA_Inst_Rel_Inv,
                    v_billingaccounttrxset_id
               );
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_ba_inst_id, v_datamart_tf);
          end loop;
          UTPRODUCT-4469 Ends */

          -----------------------------------------------------------------------------
          --
          -- 15.   Fetch the pending installments and Create BillingTransaction Pending Installments
          --
          -----------------------------------------------------------------------------

          for r_ba_remaining_inst in c_ba_remaining_inst(v_billing_account_id, v_billing_period_end_date, v_pol_acct_level)
          loop
               v_ba_inst_id := r_ba_remaining_inst.ba_instalment_id;
             
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_constant.gObjType_PendingInstallment,
                    v_billingaccounttrxset_id,
                    v_billingtrx_rem_inst_id
               );
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingtrx_rem_inst_id,
                    pkg_db_constant.gbv_PendingInst_Amount,
                    r_ba_remaining_inst.amount
               );
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingtrx_rem_inst_id,
                    pkg_db_constant.gbv_PendingInst_WithdrawalDate,
                    to_char(r_ba_remaining_inst.withdrawal_date, pkg_os_constant.DragonDateFormatDefault)
               );
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingtrx_rem_inst_id,
                    pkg_db_constant.gbv_PendingInst_RelBAInst,
                    v_ba_inst_id
               );
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billingtrx_rem_inst_id, v_datamart_tf);
          end loop;

          -----------------------------------------------------------------------------
          --
          -- 16.   Run nightly process to Age financials
          --
          -----------------------------------------------------------------------------
          pkg_db_nightly_process.sp_update_aging_status
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id
          );

          -- Set the Next invoice date for each term. 
          sp_term_next_invoice_date_set
          (
             in_session_id,
             in_transaction_id,
             in_billplan_id,
             v_policy_term_list     -- UTPRODUCT-4469
          );



          --
          -- Datamart Refresh     
          --
          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billingaccounttrxset_id, v_datamart_tf);
          pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,in_billplan_id,v_datamart_tf);
          
          -- UTPRODUCT-4469 Starts 
          -- Refresh DataMart when billing Account type is Customer 
          -- else call the mehtod sp_update_billingaccount_dm to refresh the DataMart
          -- to Non-billing Customer. 
          --
          if v_ba_account_type_id in ( pkg_db_object.gBillingAcType_Customer ) 
          then 
          
               pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_billing_account_id,v_datamart_tf);
          
          else
               r_billing_account_list.delete; 
               r_billing_account_list(r_billing_account_list.count + 1):= v_billing_account_id;

               if r_billing_account_list.count > 0
               then

                    pkg_db_object.sp_update_billingaccount_dm
                    (
                    in_session_id,
                    in_transaction_id,
                    r_billing_account_list
                    );

               end if ;
          end if;  
          -- UTPRODUCT-4469 Ends. 

          -- HC: For each policy, can we call date of interest here?
          -- --OSPRODUCT-3152
          v_policy_index :=v_policy_list.first;
		
          while v_policy_index is not null
          loop
		
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         'starting date of interest for policy: ' || v_policy_list(v_policy_index)
                    );

               end if;
			
               -- OSPRODUCT-13422
               pkg_db_date_of_interest.sp_calc_date_of_interest
               (
                    in_session_id,
                    in_transaction_id,
                    1801,
                    v_policy_list(v_policy_index),
                    pkg_os_object.fn_object_parent_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_billplan_id
                    )

               );
			
               v_policy_index := v_policy_list.next(v_policy_index); 
			
          end loop;
          
          -- set object of interest
          
          pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    pkg_os_constant_bv.gbv_SessionObjectOfInterest,
                    v_billingaccounttrxset_id
               );
          
		  
		  ----LIOPRODUCT-124 START
          v_pd_prop_pending_inst_create :=   NVL
                                             (
                                                  pkg_os_product.fn_product_property_get
                                                  (
                                                       in_product_id       =>   0,
                                                       in_filing_id        =>   0,
                                                       in_property_type_id =>   PKG_DB_CONSTANT.gPendingInstAllowed
                                                  ), 
                                                  PKG_DB_CONSTANT.g_No
                                             );
          
          if v_pd_prop_pending_inst_create = PKG_DB_CONSTANT.g_Yes
          then
               PKG_DB_STMT_POLICY.sp_create_pending_inst_sch
               (
                    in_session_id,
                    in_transaction_id,
                    v_billingaccounttrxset_id               
               );
           end if;
           ----LIOPRODUCT-124 END

          -- UTPRODUCT-4822 Starts 
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_billingaccounttrxset_id,
               pkg_db_object.gbv_fitrxset_ass_entity,  
               pkg_db_multipayer.fn_bats_ass_entity_get(in_session_id,in_transaction_id , v_billingaccounttrxset_id,v_billing_account_id )
          );
          -- UTPRODUCT-4822 Ends  
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;

     else

          io_action_outcome_id :=  pkg_db_stmt.gOutcome_InvoiceNotCreated;

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id, 
               in_transaction_id, 
               v_policy_transaction_id,
               pkg_os_constant_bv.gbv_GenObjObjectState,
               28905
          );
          -- Set the Next invoice date for each term. 
          sp_term_next_invoice_date_set
          (
             in_session_id,
             in_transaction_id,
             in_billplan_id,
             v_policy_term_list     -- UTPRODUCT-4469
          );

          pkg_os_logging.sp_log 
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'All Invoices have already been generated - io_action_outcome_id' || io_action_outcome_id
          );

     end if;

end sp_bill_plan_create_invoice;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_get_pending_installments
--
--
--   %USAGE
--        This procedure at the time of invoice generation identifies pending
--        installments which should be invoiced. It also returns as out parameters
--        the billing period start and end dates which encompass the pending installments
--        or depending on type of transaction returns valid billing period to capture
--        correct fitems in order to get correct amount for invoice
--
--
--   %ALGORITHM
--   1.   loop through all installments for the bill pllan
--   2.   Fetch the Direct Bill Invoice Date Criteria
--   3.   get installment due date based on invoice criteria
--   4.   check if installment is to be added to the invoice based on dates else add it to future installment
--   5.   if there are pending installments, identify start and end dates
--        a. start date should be actual due date for first intallment added to invoice
--        b. end date should be actual due date of next installment. If there is no next installment, use billing due date of last intallment added to invoice
     

--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_billplan_id                Bill Plan ID
--   %PARAM    io_action_outcome_id          Outcome id
--   %PARAM    out_start_date                start date
--   %PARAM    out_end_date                  end date 
--   %PARAM    out_included_instlmts         inscluded installments
--   %PARAM    out_future_instlmts           future installments
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_get_billplan_pending_installments
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_billplan_id                in        object.object_id%type,
     out_start_date                out       date,
     out_end_date                  out       date,
     out_included_instlmts         out       pkg_db_stmt.t_inst_list,
     out_future_instlmts           out       pkg_db_stmt.t_inst_list,
     out_SuspendNonSuspend_pol_lst out       pkg_db_cash_apply.t_policy_list,  -- UTPRODUCT-4469
     out_policy_term_list          out       t_policy_term_list                -- UTPRODUCT-4754
)
as
     v_procedure_name               constant system_log.program_name%type    := pkg_name||'sp_get_billplan_pending_installments';
     v_session_control              pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get (in_session_id,in_transaction_id) ;

     v_scheduled_payment_inst_list  pkg_os_object.t_object_list;
     v_billing_account_id           object.object_id%type        := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_billplan_id);
     v_curr_inst_id                 object.object_id%type;
     v_policy_id                    object.object_id%type;
     v_curr_inst_start_date         date;
     v_inst_due_date                date;
     v_pol_trx_eff_date             date;
     v_lead_time                    number;
     v_inst_rec                     pkg_db_stmt.r_inst_type;
     v_installment_number           object_bv_value.business_variable_value%type;
     v_term_exp_date                date;
     v_invc_date_criteria           pd_property.pd_property_value%type;
     v_object_source_type           constant          business_variable.business_variable_id%type  := 27926602;
     v_curr_policy_date             date              := pkg_db_functions.fn_get_billacc_current_date(in_session_id, in_transaction_id, v_billing_account_id);
     v_next_installment_id          object.object_id%type; --UTPRODUCT-4864
     v_next_inst_withdrawal_date    object_bv_value.business_variable_value%type;
     v_ImmediateInstallDays         number;   -- LXPRODUCT-352  
     v_first_installment            boolean := True;   -- LXPRODUCT-352       
	 --UTPRODUCT2-26 - Start
     v_lead_days_sys_attribute      system_attribute_values.attribute_value%type 
                                    := nvl(pkg_os_system_attribute.fn_get_system_attribute_value ( 'INVOICE_LEADDAYS_FROM_STATE_COMPLIANCE' ),'F');
    --UTPRODUCT2-26 - End
	 -- OSPRODUCT-33580
     v_included_inst_max_end_date   date;
     v_included_max_inst_id         object.object_id%type;  


     cursor c_installment
     is
     select
          -- * UTPRODUCT-4469 Start -- Added Required select-list instead of *
          installment_id,
          policy_id,
          policy_term_id,		-- UTPRODUCT-4754
          installment_type_id,
          actual_due_date,
          actual_end_date
          -- UTPRODUCT-4469 Ends
     from
          dragon_scheduled_installment dsi
     where
          pref_bill_plan_id = in_billplan_id
     and
          NVL(invoice_flag,0) not in( 1) -- HC: we should remove 3 from here --UTPRODUCT-1698
     and
          installment_type_id is not null
     and
          dsi.balance_amount<>0 -- UTPRODUCT-3828
     and
          current_pay_plan_inst = 'Yes'  -- HC: this should be enum(not in scope of current ticket
     and
        -- OSPRODUCT-17787
        -- If BORd do not pick the policy
        (
          nvl (pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, dsi.policy_id, 32983748), 2) = 2
          or
          pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, dsi.policy_id, PKG_DB_BOR.gRef_BORd_Policy) is null
        )  --OSPRODUCT-19767
     --OSPRODUCT-3152
     /*   -- UTPRODUCT-4469  Logic Move to cursor.
       and
          pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,dsi.policy_id,pkg_db_suspension.gSuspend_Invoices_Activity) <> 1
     */
     order by
          actual_due_date
     ;


begin

     ------------------------------------------------------
     -- 1. loop through all installments for the bill pllan
     ------------------------------------------------------
     For r_installment in c_installment
     loop
          v_curr_inst_id := r_installment.installment_id;

          v_policy_id    := r_installment.policy_id;

          -- UTPRODUCT-4469 Prepared list of the NonSuspended-Policies
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '......Policy ID : ' || r_installment.policy_id ||
                    ':Policy Term ID : ' || r_installment.policy_term_id
               );
          end if;

          if v_policy_id is not null then

                if not ( out_SuspendNonSuspend_pol_lst.exists(v_policy_id) )
                then
                     if  pkg_db_suspension.fn_db_is_activity_suspended (in_session_id,in_transaction_id,v_policy_id,pkg_db_suspension.gSuspend_Invoices_Activity) <> 1
                     then
                          out_SuspendNonSuspend_pol_lst(v_policy_id) := 0;
                     else
                          out_SuspendNonSuspend_pol_lst(v_policy_id) := 1;
                     end if;
                end if;

                if out_SuspendNonSuspend_pol_lst(v_policy_id) = 0 then  -- UTPRODUCT-4469

					-- UTPRODUCT-4754 Starts
                    if r_installment.policy_term_id is not null
                    then
                         out_policy_term_list(r_installment.policy_term_id) := v_policy_id;
                    end if;
                    -- UTPRODUCT-4754 ends

          ---------------------------------------------------
          -- 2. Fetch the Direct Bill Invoice Date Criteria
          ---------------------------------------------------
          v_invc_date_criteria      := NVL(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_policy_id, pkg_db_constant.gInvoicingDateCriteria ),pkg_db_constant.gBillingDueDateInvcCriteria);--UTPRODUCT-4864
          v_lead_time               := pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_policy_id, pkg_db_stmt.gPropertyDirectLeadTime);
          -- LXPRODUCT-352
          v_ImmediateInstallDays    := nvl(pkg_os_product.fn_product_property_get(in_session_id, in_transaction_id, v_policy_id, pkg_db_stmt.gPropertyImmediateInstallDays),0);          


          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... v_lead_time: ' || v_lead_time ||
                    ', v_invc_date_criteria: ' || v_invc_date_criteria ||
                    ', v_ImmediateInstallDays: ' || v_ImmediateInstallDays                    
               );
          end if;


          -----------------------------------------------------
          -- 3. get installment due date based on invoice criteria
          -----------------------------------------------------
          if v_invc_date_criteria = pkg_db_constant.gBillingDueDateInvcCriteria then
               v_inst_due_date := to_date
               (
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_curr_inst_id,
                         pkg_db_stmt.gbv_SchInst_billing_due_date
                    ),pkg_os_constant.DragonDateFormatDefault
               );
          elsif v_invc_date_criteria = pkg_db_constant.gWithdrawalDateInvcCriteria then

               v_inst_due_date := to_date
               (
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_curr_inst_id,
                         pkg_db_stmt.gbv_install_withdrawal_date
                    ),pkg_os_constant.DragonDateFormatDefault
               );

          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '....... Considering Installment object: ' || v_curr_inst_id
                    || ', billing due date : ' || v_inst_due_date
               );
          end if;

          if v_inst_due_date is not null
          then

               v_installment_number := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_curr_inst_id,
                    pkg_db_stmt.gbv_SchInst_num
               );

               v_inst_rec.inst_id          := v_curr_inst_id;
               v_inst_rec.inst_num         := v_installment_number;
               v_inst_rec.inst_type        := r_installment.installment_type_id;
               v_inst_rec.billing_due_date := v_inst_due_date;


                         --UTPRODUCT-4864
                         if v_invc_date_criteria = pkg_db_constant.gBillingDueDateInvcCriteria
                         then

                              v_inst_rec.ins_start_date   := r_installment.actual_due_date;

                              -- HC: UTPRODUCT-1952
                              if r_installment.actual_end_date>= v_inst_due_date
                              then
                                    v_inst_rec.ins_end_date     := r_installment.actual_end_date;
                              else
                                    v_inst_rec.ins_end_date     := v_inst_due_date;
                              end if;


                          elsif v_invc_date_criteria = pkg_db_constant.gWithdrawalDateInvcCriteria
                          then

                               v_inst_rec.ins_start_date   := v_inst_due_date;

                               v_next_installment_id :=  pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_curr_inst_id,
                                                                 pkg_db_object.gbv_NextInstallment
                                                            );
                               if  v_next_installment_id is not null
                               then
                                    v_next_inst_withdrawal_date := pkg_os_object_io.fn_object_bv_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 v_next_installment_id,
                                                                 pkg_db_stmt.gbv_install_withdrawal_date
                                                            );
                                    v_inst_rec.ins_end_date :=  to_date(v_next_inst_withdrawal_date,pkg_os_constant.DragonDateFormatDefault)-1;
                               else
                                    v_inst_rec.ins_end_date     := r_installment.actual_end_date;
                               end if;


                         end if;



               -------------------------------------------------------------------------
                         -- 4. check if installment is to be added to the invoice based on dates else add it to future installment
               -------------------------------------------------------------------------
			   
                -- UTPRODUCT2-26 - start
                If v_lead_days_sys_attribute = 'T' then
                
                    if v_session_control.gLogging_Full then
                    
                        pkg_os_logging.sp_log
                        (
                            in_session_id, 
                            in_transaction_id, 
                            v_procedure_name,
                            '............ Reading Lead time from PD_SATE_COMPLIANCE ' ||
                                ' with Installment ID: '||  v_curr_inst_id
                        );
                        
                    end if;
                    
                    v_lead_time := pkg_db_functions.fn_get_installment_lead_time
                                    (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        null,
                                                        v_curr_inst_id
                                                        
                                    );
                                
                    if v_session_control.gLogging_Full then
                    
                        pkg_os_logging.sp_log
                            (
                                in_session_id, 
                                in_transaction_id,
                                v_procedure_name,
                                '............ Lead time retrieved ' ||
                                ' Installment ID: '|| v_curr_inst_id ||
                                ' Lead time : ' || v_lead_time
                                );
                    
                    end if;       
                
                end if;                  
                -- UTPRODUCT2-26 - end   
                
               if (trunc(v_inst_due_date) <=  trunc(v_curr_policy_date) + v_lead_time
               -- LXPRODUCT-352
               or(  v_ImmediateInstallDays > 0 and v_first_installment = False and 
                    ( (trunc(v_inst_due_date) - v_lead_time) ) -  trunc(v_curr_policy_date) <= v_ImmediateInstallDays
                    )  
/*               or
               (
                    v_installment_number = 1 and
                    nvl(pkg_os_object_io.fn_object_bv_get
                    (
                    in_session_id,
                    in_transaction_id,
                    v_curr_inst_id,
                    v_object_source_type
                    ),2) <> 1
               ) -- OSPRODUCT-10519 */
               )
               then



                    out_included_instlmts(out_included_instlmts.count + 1) := v_inst_rec;
                    
                    -- LXPRODUCT-352
                    v_first_installment := False;

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '....... Include PaymentPlanScheduledPaymentInstallment object: ' || v_curr_inst_id
                              || ', installment number : ' || v_installment_number
                              || ', billing due date : ' || v_inst_due_date
                         );
                    end if;
					
					-- OSPRODUCT-33580                              
                              if v_included_inst_max_end_date is null 
                                 or
                                 v_included_inst_max_end_date < v_inst_rec.ins_end_date
                              then
                                   
                                   v_included_inst_max_end_date := v_inst_rec.ins_end_date;
                                   
                                   v_included_max_inst_id := v_inst_rec.inst_id;
                                   
                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '.. Included inst end date: ' || v_included_inst_max_end_date
                                        );
                                   end if;
                                 
                              end if;
                        -- end OSPRODUCT-33580
               else


                    -- Add future installment to the list
                    --
                    out_future_instlmts(out_future_instlmts.count + 1) := v_inst_rec;
               end if;

          end if;

               end if; -- UTPRODUCT-4469

          end if;  -- UTPRODUCT-4469
     end loop;

     if v_session_control.gLogging_Full
     then
          declare
               procedure p_l_print_list(in_list IN pkg_db_stmt.t_inst_list)
               is
                         lv_idx   number;
               begin
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name||'.p_l_print_list',
                         '......in_list.count=' ||in_list.count
                    );

                    lv_idx := in_list.first;

                    while lv_idx is not null
                    loop
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name||'.p_l_print_list',
                              '.........inst_id=' ||          in_list(lv_idx).inst_id            ||
                              ', inst_num=' ||         in_list(lv_idx).inst_num           ||
                              ', inst_type=' ||        in_list(lv_idx).inst_type          ||
                              ', billing_due_date=' || in_list(lv_idx).billing_due_date

                         );

                         lv_idx := in_list.next(lv_idx);
                    end loop;

               end;

          begin
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... v_curr_policy_date=' ||  v_curr_policy_date ||
                    ', v_pol_trx_eff_date=' ||  v_pol_trx_eff_date ||
                    ', v_term_exp_date='    ||  v_term_exp_date
               );

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Printing out the out_included_instlmts list...'
               );

               p_l_print_list(out_included_instlmts);

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Printing out the out_future_instlmts list...'
               );

               p_l_print_list(out_future_instlmts);

          end;

     end if;

     --------------------------------------------------------------------------
     -- 5. if there are pending installments, identify start and end dates
     --    a. start date should be actual due date for first intallment added to invoice
     --    b. end date should be actual due date of next installment. If there is no next installment, use billing due date of last intallment added to invoice
     --------------------------------------------------------------------------

     if out_included_instlmts.count > 0
     then

          out_start_date := out_included_instlmts(out_included_instlmts.first).ins_start_date;

          if out_future_instlmts.first is null
          then
               out_end_date := out_included_instlmts(out_included_instlmts.last).ins_end_date ;

               -- OSPRODUCT-13702
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Installment Id: ' || out_included_instlmts(out_included_instlmts.last).inst_id ||
                         '....End Date: '       || out_end_date
                    );

               end if;
			   
          else

               out_end_date := out_future_instlmts(out_future_instlmts.first).ins_start_date-1 ;

               -- OSPRODUCT-13702
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Installment Id: ' || out_future_instlmts(out_future_instlmts.first).inst_id ||
                         '....End Date: '       || out_end_date
                    );

               end if;

          end if;
		 
  
        -- UTPRODUCT2-26 - start
        If v_lead_days_sys_attribute = 'T' then

           v_curr_inst_id := out_included_instlmts(out_included_instlmts.last).inst_id ;
               
            if v_session_control.gLogging_Full then
            
                pkg_os_logging.sp_log
                (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '............ Reading Lead time from PD_SATE_COMPLIANCE ' ||
                        ' with Installment ID: '||  v_curr_inst_id
                );
                
            end if;
            
            v_lead_time := pkg_db_functions.fn_get_installment_lead_time
                            (
                                                in_session_id,
                                                in_transaction_id,
                                                null,
                                                v_curr_inst_id
                                                
                            );
                        
            if v_session_control.gLogging_Full then
            
                pkg_os_logging.sp_log
                    (
                        in_session_id, 
                        in_transaction_id,
                        v_procedure_name,
                        '............ Lead time retrieved ' ||
                        ' Installment ID: '|| v_curr_inst_id ||
                        ' Lead time : ' || v_lead_time
                        );
            
            end if;       
        
        end if;                  
        -- UTPRODUCT2-26 - end                           
                        
                        
						
		if ( 
                trunc(out_end_date) <= trunc(v_curr_policy_date) + v_lead_time -- OSPRODUCT-14628 
            )
		   and
		   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,out_included_instlmts(out_included_instlmts.last).inst_id,pkg_db_billing_modify.gbv_Installment_balance) <> 0
		then  --OSPRODUCT-14092
		-- -- OSPRODUCT-33580             



               if v_session_control.gLogging_Full then

                  pkg_os_logging.sp_log
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '... Out End Date  before modifiying: '||out_end_date
                  );
                  
             end if;
			 -- -- end OSPRODUCT-33580  
                  
             out_end_date := to_date
                             (
                                pkg_os_object_io.fn_object_bv_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     out_included_instlmts(out_included_instlmts.last).inst_id,
                                     pkg_db_stmt.gbv_install_withdrawal_date
                                ),pkg_os_constant.DragonDateFormatDefault
                             )+1;
							   
                             
             if v_session_control.gLogging_Full then   -- -- OSPRODUCT-33580                           
 
                  pkg_os_logging.sp_log
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '... Out End Date after modifiying 1: '||out_end_date 
                  );
                  
             end if;
             
             -- -- OSPRODUCT-33580             
             if trunc(out_end_date) < trunc(out_start_date)                              
             then
                  
                  out_end_date := to_date
                                  (
                                     pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_included_max_inst_id,
                                          pkg_db_stmt.gbv_install_withdrawal_date
                                     ),pkg_os_constant.DragonDateFormatDefault
                                  )+1;
                                  
                  if v_session_control.gLogging_Full then                           
 
                       pkg_os_logging.sp_log
                       (
                            in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... Out End Date  after modifiying 2: '||out_end_date
                       );
                       
                  end if;               
             
             end if;
             -- end OSPRODUCT-33580        
                           
          end if;

          -- OSPRODUCT-13702
          if trunc(out_end_date) < trunc(out_start_date) then

               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Error: Invoice start date cannot be greater than end date. Start Date; '||out_start_date ||
                    '.. End date:' || out_end_date ||
                    '.. Bill Plan ID: ' || in_billplan_id ||
                    '.. Last installment balance amt: ' || pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,out_included_instlmts(out_included_instlmts.last).inst_id,pkg_db_billing_modify.gbv_Installment_balance) ||
                    '.. Lead time: ' || v_lead_time ||
                    '.. Invoice date criteria: ' || v_invc_date_criteria
               );
               -- UTXPRODUCT-845
               declare
               
                    procedure p_l_print_list(in_list IN pkg_db_stmt.t_inst_list)
                    is
                         lv_idx   number;
                         begin
                              
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name||'.p_l_print_list',
                                   '......in_list.count=' ||in_list.count
                              );

                         lv_idx := in_list.first;

                         while lv_idx is not null
                         loop
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name||'.p_l_print_list',
                                   '.........inst_id=' ||          in_list(lv_idx).inst_id     ||
                                   ', inst_num=' ||         in_list(lv_idx).inst_num           ||
                                   ', inst_type=' ||        in_list(lv_idx).inst_type          ||
                                   ', billing_due_date=' || in_list(lv_idx).billing_due_date   

                              );

                              lv_idx := in_list.next(lv_idx);
                              
                         end loop;

                    end;

               begin

                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Printing out the out_included_instlmts list...'
                    );

                    p_l_print_list(out_included_instlmts);

                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Printing out the out_future_instlmts list...'
                    );

                    p_l_print_list(out_future_instlmts);

               end;


               raise INVALID_DATE_RANGE_FOR_INVOICE;

          end if;

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Out Start Date: '||out_start_date||
               '... Out End Date 2: '||out_end_date
          );

     end if;

end sp_get_billplan_pending_installments;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_term_next_invoice_date_set
--
--   %USAGE
--        The procedure is to set the NID for the each term for the bill fitems. 
--
--   %ALGORITHM
--        Set the NID for the each term. 
--        
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_bill_plan_id               Bill Plan ID 
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_term_next_invoice_date_set
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billplan_id                     in             object.object_id%type,
     in_policy_term_list                in             t_policy_term_list      -- UTPRODUCT-4754
)
is
          
     v_procedure_name  constant         system_log.program_name%type := pkg_name||'sp_term_next_invoice_date_set';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_datamart_tf                      varchar2(1) := 'T';
     v_term_id                          object.object_id%type;
     v_ultimate_customer_id             object.object_id%type;
     v_next_invoice_date                object_bv_value.business_variable_value%type;
     v_term_nid                         object_bv_value.business_variable_value%type;  
     v_term_list                        object_tt := new object_tt();
     v_index                            number;
     v_policy_id                        object.object_id%type;
     v_term_payer_list                  object_tt := new object_tt();
     v_term_payer_nid                   object_bv_value.business_variable_value%type;  
     v_min_next_invoice_create_dt       object_bv_value.business_variable_value%type;  
     v_term_payer_entit_id              object.object_id%type;
     v_term_payer_id                    object.object_id%type;
     v_policy_term_index                number;      -- UTPRODUCT-4754
     
     cursor c_term
     is
     select
          -- * UTPRODUCT-4469 Start -- Added Required select-list instead of *   
          policy_term_id,
          policy_id
          -- UTPRODUCT-4469 Ends
     from 
          dragon_policy_term 
     where 
         pref_bill_plan_id=in_billplan_id;
     
     cursor c_term_payer
     is
     select 
          -- * UTPRODUCT-4469 Start -- Added Required select-list instead of *
          policy_term_payer_id,
          payer_entity_id,
          policy_term_id,
          policy_id
          -- UTPRODUCT-4469 Ends
     from 
          dragon_policy_term_payer  
     where 
          pref_bill_plan_id=in_billplan_id;
     
     cursor c_term_payer_list (v_in_term_id  object.object_id%type)
     is
     select
          -- * UTPRODUCT-4469 Start -- Added Required select-list instead of *   
          policy_term_payer_id
          -- UTPRODUCT-4469 Ends 
     from 
          dragon_policy_term_payer 
     where 
          policy_term_id=v_in_term_id;
           
begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Entering for setting the next invoice Date for Bill Plan ID ' || in_billplan_id ||
               '... Term Count: ' || in_policy_term_list.count
          );

     end if;

     -- Get all the term payers associated with passed in bill plan
     -- UTPRODUCT-301

	if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Updating NID for payers associated with the bill plan: ' || in_billplan_id
          );

     end if;
	
     for r_term_payer in c_term_payer loop

          v_term_payer_id := r_term_payer.policy_term_payer_id;
          v_term_id       := r_term_payer.policy_term_id;
           -- see if the term status is not rolledback
           
          if pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_term_id ,pkg_db_constant.gbv_term_pas_status) <> pkg_os_policy_transaction.gState_PolicyTrxRolledback then

               v_policy_id                     := r_term_payer.policy_id;
               v_term_payer_entit_id           := r_term_payer.payer_entity_id;
               v_term_payer_nid                := pkg_db_stmt_date.fn_get_next_invoice_date(in_session_id,
                                                                                in_transaction_id,
                                                                                v_policy_id,
                                                                                v_term_id,
                                                                                in_payer_id => v_term_payer_entit_id
                                                                           );



               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Payer ID: ' || v_term_payer_id ||
                         '...Term ID: '  || v_term_id       ||
                         '...Payer Entity ID:' || v_term_payer_entit_id ||
                         '...BillPlan ID:'     || in_billplan_id        ||
                         '...NID:'             || v_term_payer_nid
                    );

               end if;

               pkg_db_object.sp_ba_object_bv_set    --pkg_os_object_io.sp_object_bv_set  --OSPRODUCT-16499
               (
                    in_session_id,
                    in_transaction_id,
                    v_term_payer_id,
                    32738724,
                    v_term_payer_nid
               );

          end if;

     end loop;                                                                                   
       
	if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Updating NID for the terms associated with the bill plan: ' || in_billplan_id
          );

     end if;

     v_policy_term_index := in_policy_term_list.first; -- UTPRODUCT-4754
   
	while v_policy_term_index is not null             -- UTPRODUCT-4754
     --For r_term in c_term                            -- UTPRODUCT-4754
     loop

          -- UTPRODUCT-4754 Starts
          --v_term_id := r_term.policy_term_id;
          v_term_id   := v_policy_term_index;
          v_policy_id := in_policy_term_list(v_policy_term_index);
          -- UTPRODUCT-4754 Ends.
          
          -- OSPRODUCT-14577
          -- Reset for each term
          v_min_next_invoice_create_dt := null; 
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Considering Term ID: ' || v_term_id ||
                    '... Policy ID: '           || v_policy_id
               );

          end if;
                    
          -- see if the term status is not rolledback
          if pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_term_id ,pkg_db_constant.gbv_term_pas_status) <> pkg_os_policy_transaction.gState_PolicyTrxRolledback then

                if not pkg_db_multipayer.fn_multipayer_mode_tf
                       (
                            in_session_id,
                            in_transaction_id,
                            v_term_id
                       ) 
                then
                     
                     if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Single payer policy..'
                         );

                    end if;
                     
                    -- Get NID for the term.
                    v_term_nid := pkg_db_stmt_date.fn_get_next_invoice_date
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_id, --r_term.policy_id, UTPRODUCT-4469
                                             v_term_id
                                        );

                    -- set NID
                    pkg_db_object.sp_ba_object_bv_set    -- pkg_os_object_io.sp_object_bv_set --OSPRODUCT-16499
                    (
                         in_session_id,
                         in_transaction_id,
                         v_term_id,
                         pkg_db_stmt.gbv_PolicyTerm_NextInvoiceDate,
                         v_term_nid
                    );

                    --
                    -- Datamart Update for the Policy Term
                    --
                    pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_term_id,v_datamart_tf);

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..NID: '||v_term_nid
                         );

                    end if;


               else
                    
                    for r_term_payer_list in c_term_payer_list(v_term_id) loop

                         v_term_payer_id  := r_term_payer_list.policy_term_payer_id;
                         v_term_payer_nid := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_term_payer_id,
                                                  pkg_db_multipayer.gbv_PolicyTerm_Payer_NID
                                             );

                         --OSPRODUCT-1033 starts

                         if v_min_next_invoice_create_dt is null then                              
                              
                              v_min_next_invoice_create_dt := v_term_payer_nid;

                         else
                              
                              if v_min_next_invoice_create_dt > v_term_payer_nid then
                                   
                                   v_min_next_invoice_create_dt := v_term_payer_nid;

                              end if ;

                         end if;
                         
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.. Multipayer policy .. Term Payer ID: ' || v_term_payer_id ||
                                   '.. Payer NID: ' || v_term_nid ||
                                   '.. Min NID: '   || v_min_next_invoice_create_dt
                              );

                         end if;

                    end loop;

                    pkg_db_object.sp_ba_object_bv_set    --pkg_os_object_io.sp_object_bv_set    --OSPRODUCT-16499
                    (
                         in_session_id,
                         in_transaction_id,
                         v_term_id,
                         pkg_db_stmt.gbv_PolicyTerm_NextInvoiceDate,
                         v_min_next_invoice_create_dt
                    );

                    --
                    -- Datamart Update for the Policy Term
                    --
                    pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,v_term_id,v_datamart_tf);

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '.. Term NID .. ' || v_term_nid
                         );

                    end if;

               end if;

          end if;

          v_policy_term_index := in_policy_term_list.next(v_policy_term_index);   -- UTPRODUCT-4754

     end loop;
	
     -- Looping end : for each term.  
     --
     -- Datamart Update for the Bill Plan
     --
     pkg_os_datamart.sp_datamart_update_row(in_session_id,in_transaction_id,in_billplan_id,v_datamart_tf);
	
end sp_term_next_invoice_date_set; 
-----------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--   OSPRODUCT-12283
--   %NAME
--        sp_create_pending_inst_sch
--
--
--   %USAGE
--        This procedure creates invoice for Bill Plan
--
--
--   %ALGORITHM
--  1.   Fetch enxisitng PendingInstallment objects under the BATS and remove them
--  2.   Find Billing Account Installments associated with the bill plan of BATS
--  3.   loop to find billing account installment components and create pending installment component for uninvoiced installments
--  4.   Remove Pending Installment object if there is no component under it which is uninvoiced
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_bats_object_id             BATS ID
--
------------------------------------------------------------------------------------------------------------------------------------
procedure sp_create_pending_inst_sch
(
     in_session_id        in object.object_id%type,
     in_transaction_id    in object.object_id%type,
     in_bats_object_id    in object.object_id%type
)
is
     v_procedure_name                   constant  system_log.program_name%type            :=  pkg_name||'sp_create_pending_inst_sch';
     v_session_control                  pkg_os_session.r_dragon_session_control :=  pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_pendinginstallment_list          pkg_os_object.t_object_list    :=  pkg_os_object.gnull_object_list;
     v_pendinginstallment_index         number;
     v_current_pendingins_id            object.object_id%type;
     v_pending_installment_id           object.object_id%type;
     v_pending_installment_comp_id      object.object_id%type;
     v_billplan_id                      object.object_id%type;
     v_billing_account                  object.object_id%type;
     v_billacc_instcomponent_list       pkg_os_object.t_object_list    :=  pkg_os_object.gnull_object_list;
     v_billacc_instcomponent_index      number;
     v_policyterm_schpayinst            object.object_id%type;
     v_policyterm_schpayinst_inv        number;--1 invoiced
     v_uninvoiced_installment_count     number;
     v_account_type                     number;

     cursor c_billacct_inst
     (
          v_billplan_id       in   object.object_id%type,
          v_billing_account   in   object.object_id%type
     )
     is
          select    BA_INSTALMENT_ID , WITHDRAWAL_DATE
          from      dragon_ba_instalment
          where     PAYMENT_ARRANGEMENT_ID   =    v_billplan_id
          and       BILLING_ACCOUNT_ID       =    v_billing_account;

     cursor c_financial_intst_billact_inst
     (
          v_billing_account   in   object.object_id%type
     )
     is
          select    sum(BALANCE_AMOUNT) BALANCE_AMOUNT, WITHDRAWAL_DATE
          from      DRAGON_SCHEDULED_INSTALLMENT
          where     BILLING_ACCOUNT_ID       =    v_billing_account
          and       nvl(INVOICE_FLAG,0) <> 1
          and       BALANCE_AMOUNT <> 0
          group by  WITHDRAWAL_DATE order by WITHDRAWAL_DATE
          fetch first 1 rows only;

begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '............Entering sp_create_pending_inst_sch for BATS : ' || in_bats_object_id
          );
     end if;

     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_bats_object_id,
          PKG_DB_CONSTANT.gObjType_PendingInstallment,
          v_pendinginstallment_list
     );

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '....Existing Pending Installment count : ' || v_pendinginstallment_list.count
          );
     end if;

     v_pendinginstallment_index    :=     v_pendinginstallment_list.first;
     while v_pendinginstallment_index is not null
     loop
          v_current_pendingins_id  :=   v_pendinginstallment_list(v_pendinginstallment_index);

          pkg_os_object.sp_object_delete
          (
               in_session_id,
               in_transaction_id,
               in_bats_object_id,
               v_current_pendingins_id,
               PKG_DB_CONSTANT.gObjType_PendingInstallment
          );
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '....Deleted pending Installment id  : ' || v_current_pendingins_id
               );
          end if;
          v_pendinginstallment_index    :=   v_pendinginstallment_list.next(v_pendinginstallment_index);
     end loop;

     v_billplan_id       :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_bats_object_id,PKG_DB_CONSTANT.gbv_FiTrxSet_ref_Billplan);
     v_billing_account   :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id , in_bats_object_id);

     select
          ACCOUNT_TYPE_ID
     into
          v_account_type
     from
          dragon_billingaccount
     where
          BILLINGACCOUNT_ID = v_billing_account;

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '....Bill plan ID  : ' || v_billplan_id ||
               ' Billing account ID : ' || v_billing_account ||
               ' Account type ID : ' || v_account_type
          );
     end if;

     if v_account_type = PKG_DB_BILLING.gBillingAcType_Customer
     then

          for r_billacct_inst in c_billacct_inst(v_billplan_id, v_billing_account)
          loop

               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    PKG_DB_CONSTANT.gObjType_PendingInstallment,
                    in_bats_object_id,
                    v_pending_installment_id
               );

               v_billacc_instcomponent_list.delete;
               v_uninvoiced_installment_count     :=   0;

               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    r_billacct_inst.BA_INSTALMENT_ID,
                    PKG_DB_BILLING_MODIFY.gObjType_BillAccInstComponent,
                    v_billacc_instcomponent_list
               );
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Pending Installment created object ID  : ' || v_pending_installment_id ||
                         ' corresponding to BillingAccountInstallment : ' || r_billacct_inst.BA_INSTALMENT_ID ||
                         ' and installment component count : ' || v_billacc_instcomponent_list.count
                    );
               end if;


               v_billacc_instcomponent_index    :=     v_billacc_instcomponent_list.first;
               while v_billacc_instcomponent_index is not null
               loop

                    v_policyterm_schpayinst       :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_billacc_instcomponent_list(v_billacc_instcomponent_index),PKG_DB_BILLING_MODIFY.gbv_BillAccInstComp_RelInst);
                    v_policyterm_schpayinst_inv   :=   nvl(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_policyterm_schpayinst, PKG_DB_PAYPLAN_MODIFY.gbv_installment_invoiced_tf),0);

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '....Billing Account Installment Component ID  : ' || v_billacc_instcomponent_list(v_billacc_instcomponent_index) ||
                              ' Policy Term Scheduled Payment Installment : ' || v_policyterm_schpayinst ||
                              ' is invoiced (1- yes, 0 - no) : ' || v_policyterm_schpayinst_inv
                         );
                    end if;

                    if nvl(v_policyterm_schpayinst_inv,0) <> 1
                    then
                         --create pending installemnt component
                         pkg_os_object.sp_object_create
                         (
                              in_session_id,
                              in_transaction_id,
                              PKG_DB_CONSTANT.gObjType_PendingInstallComp,
                              v_pending_installment_id,
                              v_pending_installment_comp_id

                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_pending_installment_comp_id,
                              PKG_DB_CONSTANT.gbvRefBillActInstComp, --_Reference_Ref Billing Account Installment Component
                              v_billacc_instcomponent_list(v_billacc_instcomponent_index)
                         );
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_pending_installment_comp_id,
                              PKG_DB_CONSTANT.gbvPendingInstallCompAmt,--amount
                              pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_billacc_instcomponent_list(v_billacc_instcomponent_index),
                                   '32842040.32080746' -- path from billing account installment component to policyterm payment schedule's amount
                              )
                         );

                         v_uninvoiced_installment_count     :=   v_uninvoiced_installment_count + 1;

                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '....Pending Installment component object ID  : ' || v_pending_installment_id ||
                                   ' Uninvoiced Installment Count : ' || v_uninvoiced_installment_count
                              );
                         end if;
                    end if;

                    v_billacc_instcomponent_index :=   v_billacc_instcomponent_list.next(v_billacc_instcomponent_index);
               end loop;
               -----------------------------------------------------------------------

               if v_uninvoiced_installment_count = 0
               then
                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         in_bats_object_id,
                         v_pending_installment_id,
                         PKG_DB_CONSTANT.gObjType_PendingInstallment
                    );
               else
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pending_installment_id,
                         PKG_DB_CONSTANT.gbv_PendingInst_Amount,
                         pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              r_billacct_inst.ba_instalment_id,
                              PKG_DB_CONSTANT.gbvBillAccInstWithdrawalAmt
                         )
                    );

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pending_installment_id,
                         PKG_DB_CONSTANT.gbv_PendingInst_WithdrawalDate,
                         to_char(r_billacct_inst.withdrawal_date, pkg_os_constant.DragonDateFormatDefault)
                    );

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_pending_installment_id,
                         PKG_DB_CONSTANT.gbv_PendingInst_RelBAInst,
                         r_billacct_inst.ba_instalment_id
                    );
               end if;
          end loop;
     else
          for r_financial_intst_billact_inst in c_financial_intst_billact_inst(v_billing_account)
          loop

               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    PKG_DB_CONSTANT.gObjType_PendingInstallment,
                    in_bats_object_id,
                    v_pending_installment_id
               );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Pending Installment created object ID  : ' || v_pending_installment_id ||
                         ' Due Amount : ' || r_financial_intst_billact_inst.BALANCE_AMOUNT ||
                         ' and Withdrawal Date : ' || r_financial_intst_billact_inst.WITHDRAWAL_DATE
                    );
               end if;

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_pending_installment_id,
                    PKG_DB_CONSTANT.gbv_PendingInst_Amount,
                    r_financial_intst_billact_inst.BALANCE_AMOUNT
               );

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_pending_installment_id,
                    PKG_DB_CONSTANT.gbv_PendingInst_WithdrawalDate,
                    to_char(r_financial_intst_billact_inst.WITHDRAWAL_DATE, pkg_os_constant.DragonDateFormatDefault)
               );
          end loop;
     end if;
end sp_create_pending_inst_sch;
-------------------------------------------------------------------------------------------------------------------------------

function fn_invoice_filter_tf
(
     in_session_id                 in  object.object_id%type,
     in_transaction_id             in  object.object_id%type,
     in_bats_id                    in  object.object_id%type
)
return char
is
        v_procedure_name    constant  system_log.program_name%type := pkg_name||'fn_invoice_filter_tf';
        v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
        v_return_value                char(1) := 'F';
        v_count                       number;
        
        --Input values from UI object_bv_value.business_variable_value%type; object.object_id%type;
        v_session_serach_crieria_id      object.object_id%type;
        v_billing_acc_num                object_bv_value.business_variable_value%type;
        v_bats_set_type                  object_bv_value.business_variable_value%type;
        v_bats_obj_state                 object_bv_value.business_variable_value%type;
        v_policy_number                  object_bv_value.business_variable_value%type;
        v_invoice_number                 object_bv_value.business_variable_value%type;
        v_invoice_proc_date              object_bv_value.business_variable_value%type;
        v_invoice_due_date               object_bv_value.business_variable_value%type;
        v_invoice_due_amt                object_bv_value.business_variable_value%type;
        v_invoice_due_date_srch_type     object_bv_value.business_variable_value%type;  
        v_invoice_proc_date_srch_type    object_bv_value.business_variable_value%type;
        v_invoice_amt_search_type        object_bv_value.business_variable_value%type;
        v_invoice_proc_date_bwn          object_bv_value.business_variable_value%type;
        v_invoice_due_date_bwn           object_bv_value.business_variable_value%type;
        v_invoice_due_amt_bwn            object_bv_value.business_variable_value%type;

begin
        v_session_serach_crieria_id := pkg_os_object_search.fn_object_11_child_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      in_session_id,
                                                      2364876
                                                 );       
        v_policy_number                  := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35272948);
        v_invoice_number                 := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35266948);
        v_billing_acc_num                := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35274948);    
        v_invoice_proc_date              := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35267048);
        v_invoice_due_date               := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35817248);
        v_invoice_due_amt                := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35819248);
        v_invoice_proc_date_srch_type    := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35331148); 
        v_invoice_due_date_srch_type     := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35817348); 
        v_invoice_amt_search_type        := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35819348);
        v_invoice_proc_date_bwn          := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35817448);
        v_invoice_due_date_bwn           := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35817548);
        v_invoice_due_amt_bwn            := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_session_serach_crieria_id, 35857248);
        
        if v_session_control.gLogging_Full
        then
              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '... v_session_serach_crieria_id ID: ' || v_session_serach_crieria_id || ' pol ' || v_policy_number || ' inv ' || v_invoice_number 
              );
        end if;
         
        select
              count(1)
        into
              v_count
        FROM  
              DRAGON_BILLINGACCOUNTTRXSET 
        WHERE
              BATCH_TYPE_ID = 1801 
        and  
              BATCH_STATUS_ID = 39846 
        and  
              billingaccounttrxset_id = in_bats_id 
        and    
              --INVOICE_NUMBER = nvl(v_invoice_number , INVOICE_NUMBER )  
              UPPER(INVOICE_NUMBER) LIKE ('%' || upper(NVL( v_invoice_number , UPPER(INVOICE_NUMBER))) || '%') 
        and 
              UPPER(POLICY_NUMBER) LIKE ('%' || upper(NVL( v_policy_number , UPPER(POLICY_NUMBER))) || '%') 
        and 
              --PARTNER_BILLING_ACCOUNT_NO = decode(nvl(v_billing_acc_num , 0),0, PARTNER_BILLING_ACCOUNT_NO ,v_billing_acc_num ) 
              UPPER(PARTNER_BILLING_ACCOUNT_NO) LIKE ('%' || upper(NVL( v_billing_acc_num , UPPER(PARTNER_BILLING_ACCOUNT_NO))) || '%')
        and 
              (  
                 (nvl(to_number(v_invoice_proc_date_srch_type),0) = 1  and trunc(PROCESSED_DATE ) < trunc(to_date(v_invoice_proc_date ,'YYYYMMDDHH24MISS'))) 
                 or 
                 (nvl(to_number(v_invoice_proc_date_srch_type),0) = 2  and trunc(PROCESSED_DATE ) > trunc(to_date(v_invoice_proc_date ,'YYYYMMDDHH24MISS'))) 
                 or 
                 (nvl(to_number(v_invoice_proc_date_srch_type),0) = 3  and trunc(PROCESSED_DATE ) = trunc(to_date(v_invoice_proc_date ,'YYYYMMDDHH24MISS'))) 
                 or
                 (nvl(to_number(v_invoice_proc_date_srch_type),0) = 4  and trunc(PROCESSED_DATE ) between trunc(to_date(v_invoice_proc_date ,'YYYYMMDDHH24MISS')) and  trunc(to_date(v_invoice_proc_date_bwn ,'YYYYMMDDHH24MISS')))
                  or nvl( to_number(v_invoice_proc_date_srch_type) ,0) =0 
              )
        and 
              (  
                 (nvl(to_number(v_invoice_due_date_srch_type),0) = 1  and trunc(to_date(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 32432031),'YYYYMMDDHH24MISS') ) < trunc(to_date(v_invoice_due_date ,'YYYYMMDDHH24MISS'))) 
                 or 
                 (nvl(to_number(v_invoice_due_date_srch_type),0) = 2  and trunc(to_date(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 32432031),'YYYYMMDDHH24MISS') ) > trunc(to_date(v_invoice_due_date ,'YYYYMMDDHH24MISS'))) 
                 or 
                 (nvl(to_number(v_invoice_due_date_srch_type),0) = 3  and trunc(to_date(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 32432031),'YYYYMMDDHH24MISS') ) = trunc(to_date(v_invoice_due_date ,'YYYYMMDDHH24MISS'))) 
                 or
                 (nvl(to_number(v_invoice_due_date_srch_type),0) = 4  and trunc(to_date(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 32432031),'YYYYMMDDHH24MISS') ) between trunc(to_date(v_invoice_due_date ,'YYYYMMDDHH24MISS')) and  trunc(to_date(v_invoice_due_date_bwn ,'YYYYMMDDHH24MISS')))
                  or nvl( to_number(v_invoice_due_date_srch_type) ,0) =0 
              )
        and 
              (  
                 (nvl(to_number(v_invoice_amt_search_type),0) = 1  and trunc(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 29724146) ) < v_invoice_due_amt ) 
                 or 
                 (nvl(to_number(v_invoice_amt_search_type),0) = 2  and trunc(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 29724146) ) > v_invoice_due_amt ) 
                 or 
                 (nvl(to_number(v_invoice_amt_search_type),0) = 3  and trunc(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 29724146))  = v_invoice_due_amt ) 
                 or
                 (nvl(to_number(v_invoice_amt_search_type),0) = 4  and trunc(pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, billingaccounttrxset_id, 29724146) ) between v_invoice_due_amt and  v_invoice_due_amt_bwn)
                  or nvl( to_number(v_invoice_amt_search_type) ,0) =0 
              );     
              
        if v_count > 0 
        then  
             return 'T';
        else
             return 'F';
        end if;
        
end fn_invoice_filter_tf;

-----------------------------------------------------------------------------------------------------------------------------------------

end pkg_db_stmt_policy;
/
