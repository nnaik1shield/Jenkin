CREATE OR REPLACE PACKAGE BODY PKG_PC_PROCEDURES
-------------
-- $Workfile:   PKG_PC_PROCEDURES.sql  $
-- $Revision: 60188 $
--   $Author: YPAL@OSHQ.ONESHIELD.COM $
--     $Date: 2020-07-06 21:17:18 +0530 (Mon, 06 Jul 2020) $
-------------

 AS

  pkg_name constant system_log.program_name%type := 'PKG_PC_PROCEDURES.';

  -----------------------------------------------------------------------------------------------------------------------------------
  --OSPRODUCT-4729 start
  procedure sp_create_customer(in_session_id        in object.object_id%type,
                               in_transaction_id    in object.object_id%type,
                               in_action_id         in action.action_id%type,
                               in_action_object_id  in object.object_id%type,
                               io_action_outcome_id in out outcome.outcome_id%type) is

    v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                              'sp_create_customer';
    v_otherMailingAddrsInd       object_bv_value.business_variable_value%type;
    v_object_type_id             object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id,
                                                                                                     in_transaction_id,
                                                                                                     in_action_object_id);
    v_ptp_parent_type_id         object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id,
                                                                                                     in_transaction_id,
                                                                                                     pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                                                                                            in_transaction_id,
                                                                                                                                            in_action_object_id,
                                                                                                                                            28555404 -- PolicyTransactionPolicy._Parent_PolicyTransaction
                                                                                                                                            ));
    v_customer_id                object.object_id%type;
    v_policy_id                  object.object_id%type;
    v_quote_id                   object.object_id%type;
    v_cust_assoc_partner_id      object.object_id%type;
    v_agency_terr_id             object.object_id%type;
    v_jurisdiction_id            object.object_id%type;
    v_location_id                object.object_id%type;
    v_building_id                object.object_id%type;
    v_primary_address_id         object.object_id%type;
    v_mailing_address_id         object.object_id%type;
    v_customer_entity_id         object.object_id%type;
    v_billing_account_id         object.object_id%type;
    v_cash_trnsfr_profl_id       object.object_id%type;
    v_entity_list                pkg_os_object.t_object_list;
    v_entity_index               number;
    v_principal_entity_id        object.object_id%type;
    v_sub_or_cust_entity_id object.object_id%type := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                                            in_transaction_id,
                                                                                            in_action_object_id,
                                                                                            case
                                                                                              when v_object_type_id =
                                                                                                   gObjectType_submission then
                                                                                               gbv_Subm_ChildSubmEntity
                                                                                              when v_object_type_id =
                                                                                                   gObjectType_ptp then
                                                                                               gbv_ptp_ChildprimaryEntity
                                                                                            end);
    v_subm_primary_addr_id       object.object_id%type;
    v_subm_mailing_addr_id       object.object_id%type;
    v_subm_ref_principal_id      object.object_id%type;
    v_subm_id                    object.object_id%type;
    v_datamart_tf                char := 'F';
    v_address_state              object_bv_value.business_variable_value%type;
    v_address_country            object_bv_value.business_variable_value%type;
    v_custentity_phone           object_bv_value.business_variable_value%type;
    v_custentity_mail            object_bv_value.business_variable_value%type;
    v_agency_id                  object.object_id%type;
    v_activity_add_pri_id        object.object_id%type;
    v_activity_add_mail_id       object.object_id%type;
    v_activity_add_bill_id       object.object_id%type;
    v_customer_email_id          object.object_id%type;
    v_usage_email_id             object.object_id%type;
    v_customer_phone_id          object.object_id%type;
    v_usage_phone_id             object.object_id%type;
    in_plcy_cust_id              object.object_id%type;
    v_plcy_cust_pe_utem_id       object.object_id%type;
    v_cust_entity_utem_id        object.object_id%type;
    v_session_control            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                                  in_transaction_id);
    r_ORM_matching_cust          dragon_customer%rowtype;
    v_submission_lob_set         object_bv_value.business_variable_value%type;
    v_quote_or_policy_found_flag object_bv_value.business_variable_value%type;
    v_entity_orm_id              object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                                                   in_transaction_id,
                                                                                                                   v_sub_or_cust_entity_id,
                                                                                                                   32234146 --Entity Relationship Management - ID
                                                                                                                   );
    v_entity_orm_ver_id          object_bv_value.business_variable_value%type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                                                   in_transaction_id,
                                                                                                                   v_sub_or_cust_entity_id,
                                                                                                                   32234246);
    v_producing_agency           object.object_id%type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                            in_transaction_id,
                                                                                            in_action_object_id,
                                                                                            26590907);
    v_object_state               constant number := 75;

    cursor c_ORM_matching_cust(in_orm_id           in varchar2,
                               in_producing_agency in number) is
      select *
        from dragon_customer
       where ENTITY_RELATIONSHIP_MGMT_ID = in_orm_id
         and CUSTOMER_AGENCY_ID is not null
         and CUSTOMER_AGENCY_ID = in_producing_agency;

  begin
    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '......Submission/ PTP ID:' ||
                            in_action_object_id);
    end if;
    --1. Search Master customer from submission/ ptp object.
    if v_object_type_id = gObjectType_submission then
      v_customer_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                          in_transaction_id,
                                                          in_action_object_id);

    elsif v_object_type_id = gObjectType_ptp then
      v_customer_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                         in_transaction_id,
                                                                         in_action_object_id,
                                                                         gObjectType_customer);

    end if;

    if v_customer_id is not null then
      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Parent customer already exists. CustomerID:' ||
                              v_customer_id);
      end if;
    else
      --  2.
      --  Check if customer object already exists for same ORM id + partner id
      --  else create new customer object associated with agency in question...
      --
      open c_orm_matching_cust(v_entity_orm_id, v_producing_agency);
      fetch c_ORM_matching_cust
        into r_ORM_matching_cust;
      -- 2.1. IF No Match found for given ORM id
      if c_ORM_matching_cust%notfound then
        -- 2.1.1 Create an object of type customer.
        pkg_os_object.sp_object_create(in_session_id,
                                       in_transaction_id,
                                       gObjectType_customer,
                                       null,
                                       v_customer_id);
        if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '2.1...... Created CustomerID: ' ||
                                v_customer_id ||
                                '...... v_object_type_id: ' ||
                                v_object_type_id);
        end if;
        -- 2.2 In case of submission set direct parent.
        --But in case of PTP check weather parent is QT or PT then if QT then set QA as child if PT is parent then
        --set Policy as child of Customer.
        if v_object_type_id = gObjectType_submission then
          pkg_os_object.sp_object_parent_set(in_session_id,
                                             in_transaction_id,
                                             in_action_object_id,
                                             v_customer_id);
        elsif v_object_type_id = gObjectType_ptp then
          --set producying agency ref on customer
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_id,
                                            26590907,
                                            v_producing_agency);
         pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_id,
                                            210153, -- Object state
                                            v_object_state);

          if v_ptp_parent_type_id = gObjectType_pt then
            v_policy_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                  in_transaction_id,
                                                                  in_action_object_id,
                                                                  gbvpath_PTPtoPolicy);
            pkg_os_object.sp_object_parent_set(in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               v_customer_id);
            sp_customer_associated_partners(in_session_id,
                                         in_transaction_id,
                                         v_policy_id,
                                         v_customer_id);                                           
                                
        --
        -- Add policy record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               v_datamart_tf);
          elsif v_ptp_parent_type_id = gObjectType_qt then
            v_quote_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                            in_transaction_id,
                                                                            in_action_object_id,
                                                                            gObjectType_qt);
            pkg_os_object.sp_object_parent_set(in_session_id,
                                               in_transaction_id,
                                               v_quote_id,
                                               v_customer_id);
        --
        -- Add quote record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_quote_id,
                                               v_datamart_tf);
          end if;
        end if; -- 2.2 END

        if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...... Created new customer. CustomerID:' ||
                                v_customer_id || ' For agency: ' ||
                                v_producing_agency || ' For Quote: ' ||
                                v_quote_id || ' For Policy: ' ||
                                v_policy_id);
        end if;
        --  2.3
        --   Create a default jurisdiction, location and building ...
        --
      if v_object_type_id = gObjectType_submission then
        v_jurisdiction_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                         in_transaction_id,
                                                                         v_customer_id,
                                                                         gObjType_CustomerJurisdiction);
        if v_jurisdiction_id is null then
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_CustomerJurisdiction,
                                         v_customer_id,
                                         v_jurisdiction_id);
				 
																					 
																						 
																						 
																								  
									   
														 
															 
																	 
															 
														  
				 
																					 
																						 
																					 
																								  
									   
														 
															 
																	 
														 
														  
				 
												 
												
													
												   
														   
																			
																		
												  
																	  
							
        end if;
        v_location_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                     in_transaction_id,
                                                                     v_jurisdiction_id,
                                                                     gObjType_CustomerLocation);
        if v_location_id is null then
          pkg_os_object.sp_object_create(in_session_id,
										   in_transaction_id,
										   gObjType_CustomerLocation,
										   v_jurisdiction_id,
										   v_location_id);
        end if;
        v_building_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                     in_transaction_id,
                                                                     v_location_id,
                                                                     gObjType_CustomerBuilding);
        if v_building_id is null then
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_CustomerBuilding,
                                         v_location_id,
                                         v_building_id);
        end if;
        if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' v_jurisdiction_id: ' || v_jurisdiction_id ||
                                ' v_location_id: ' || v_location_id ||
                                ' v_building_id: ' || v_building_id ||
												  
                                ' Start Primary entity Creation: ');
        end if; -- 2.3 END
        end if;
        --
        --   2.4. Create the primary customer entity by cloning the submission/ Customer entity ...
        --
        if v_object_type_id = gObjectType_submission then
          v_customer_entity_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id,
                                                                              gObjType_CustomerEntity);
        elsif v_object_type_id = gObjectType_ptp then
          if v_ptp_parent_type_id = gObjectType_pt then
            v_customer_entity_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           gbv_PTMasterCustPrimaryEntity);
          elsif v_ptp_parent_type_id = gObjectType_qt then
            v_customer_entity_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           gbv_QTMasterCustPrimaryEntity);
          end if;
        end if;
        if v_customer_entity_id is not null then
          if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  ' v_customer_entity_id exist: ' ||
                                  v_customer_entity_id);
          end if;
        end if;
        --2.5 If customer entity is null then search submission/ customer entity depends on submission/ PTP
        if v_customer_entity_id is null then
          if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... Submission/ Customer entity does not exist under master customer');
          end if;
          --2.5.1 Get the list of child submission/ customer entity
          if v_object_type_id = gObjectType_submission then
            pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                                in_transaction_id,
                                                                in_action_object_id,
                                                                gObjType_SubmissionEntity,
                                                                v_entity_list);
          elsif v_object_type_id = gObjectType_ptp then
            pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                                in_transaction_id,
                                                                in_action_object_id,
                                                                gObjType_CustomerEntity,
                                                                v_entity_list);
          end if;
          v_entity_index := v_entity_list.first;

          v_sub_or_cust_entity_id := v_entity_list(v_entity_index);

          if v_sub_or_cust_entity_id is null then
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... Submission/PTP entity does not exist');
            end if;

            raise no_data_found;

          else
            --2.5.2 Start loop when list is having values
            while v_entity_index is not null loop
              pkg_os_object_copy.sp_object_duplicate(in_session_id,
                                                     in_transaction_id,
                                                     v_entity_list(v_entity_index),
                                                     v_customer_entity_id);

              --
              --   Set the type of the new object to be a CustomerEntity
              --

              pkg_os_object.sp_object_transmute(in_session_id,
                                                in_transaction_id,
                                                v_customer_entity_id,
                                                v_customer_id,
                                                gobjType_CustomerEntity);

              if v_object_type_id = gObjectType_submission then
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_id,
                                                  gbv_CustomerPrimaryEntity,
                                                  v_customer_entity_id);
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  gbv_CustEntityRole,
                                                  gEntityRoleCustomer);
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  gCustEntityRlshpToCustomer,
                                                  1 -- Self
                                                  );
               elsif v_object_type_id = gObjectType_ptp then
                v_plcy_cust_pe_utem_id :=  pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           '27360105.29253414.26725601');
                v_cust_entity_utem_id :=   pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                           in_transaction_id,
                                                                           v_customer_entity_id,
                                                                           '26725601');
                  if v_session_control.gLogging_Full then

                  pkg_os_logging.sp_log(in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '...... v_plcy_cust_pe_utem_id : '||v_plcy_cust_pe_utem_id ||
																 
                                        '...... v_cust_entity_utem_id : '||v_cust_entity_utem_id
                                        );
                  end if;

                 if v_plcy_cust_pe_utem_id = v_cust_entity_utem_id then

                 pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_id,
                                                  gbv_CustomerPrimaryEntity,
                                                  v_customer_entity_id);
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  gbv_CustEntityRole,
                                                  gEntityRoleCustomer);
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  gCustEntityRlshpToCustomer,
                                                  1 -- Self
                                                  );
                 end if;

              end if;
              v_entity_index := v_entity_list.next(v_entity_index);
            end loop; --2.5.2 end
            --
            --     If need to pre-fill ... prefill. Ideally, this should be broken out as a separate command in the workflow ...
            --
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... prefill logic started');
            end if;
            if v_object_type_id = gObjectType_submission then
              if pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                   in_transaction_id,
                                                   in_action_object_id,
                                                   31976446) = 1 then
                -- Should pre-fills be ordered?

                pkg_base_prefill.sp_customer_prefill_entities(in_session_id,
                                                              in_transaction_id,
                                                              v_customer_id);

                pkg_base_prefill.sp_customer_prefill_vehicles(in_session_id,
                                                              in_transaction_id,
                                                              v_customer_id);

              end if;
            end if;
            -- For Surety, if the Principal <> the Customer, the second
            -- Submission Entity represents the Principal.
            if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... For Surety : logic started');
            end if;
            if v_entity_list.count = 1 then
              pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                in_action_object_id,
                                                gbv_SubmRefPrincCustEntity,
                                                v_customer_entity_id);
              --
              -- Set placeholder mailing address reference with an empty object created as part of customer constructor
              -- As primary address object is getting created later in the same code we know for sure the object exists is an empty unreferered object
              -- If submission's mailing address is diffrent then we will reset it again with mailing address
              --

              pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                v_customer_entity_id,
                                                32644146, --CustomerEntity._Reference_PlaceholderMailingAddress
                                                pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                                            in_transaction_id,
                                                                                            v_customer_id,
                                                                                            2304114));

            elsif v_entity_list.count > 1 then
              v_subm_ref_principal_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           gbv_SubmRefBondPrincipal);

              if v_subm_ref_principal_id is not null then
                pkg_os_object_copy.sp_object_duplicate(in_session_id,
                                                       in_transaction_id,
                                                       v_subm_ref_principal_id,
                                                       v_principal_entity_id);

                --
                --   Set the type of the new object to be a CustomerEntity
                --

                pkg_os_object.sp_object_transmute(in_session_id,
                                                  in_transaction_id,
                                                  v_principal_entity_id,
                                                  v_customer_id,
                                                  gobjType_CustomerEntity);

                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_principal_entity_id,
                                                  gbv_CustEntityRole,
                                                  gEntityRolePrincipal);

                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  gbv_SubmRefPrincCustEntity,
                                                  v_principal_entity_id);

                --
                -- Set placeholder mailing address reference with an empty object created as part of customer constructor
                -- As primary address object is getting created later in the same code we know for sure the object exists is an empty unreferered object
                -- If submission's mailing address is diffrent then we will reset it again with mailing address
                --

                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  32644146, --CustomerEntity._Reference_PlaceholderMailingAddress
                                                  pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                                              in_transaction_id,
                                                                                              v_customer_id,
                                                                                              2304114));

              else
                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  in_action_object_id,
                                                  gbv_SubmRefPrincCustEntity,
                                                  v_customer_entity_id);
                --
                -- Set placeholder mailing address reference with an empty object created as part of customer constructor
                -- As primary address object is getting created later in the same code we know for sure the object exists is an empty unreferered object
                -- If submission's mailing address is diffrent then we will reset it again with mailing address
                --

                pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                  in_transaction_id,
                                                  v_customer_entity_id,
                                                  32644146, --CustomerEntity._Reference_PlaceholderMailingAddress
                                                  pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                                              in_transaction_id,
                                                                                              v_customer_id,
                                                                                              2304114));

              end if; --Submission Reference Bond Principal is not null

            end if;
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... Customer Entity Created Successfully.......' ||
                                    v_customer_entity_id);
            end if;

          end if;

        end if;
        --   2.6
        --   Create Customer Primary Addresses for submission...
        --
        if v_object_type_id = gObjectType_submission then
          v_subm_primary_addr_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           gbv_SubmPrimaryAddress);

          if v_subm_primary_addr_id is null then
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '... SUBMISSION/PTP PRIMARY ADDRESS DOES NOT EXIST....');
            end if;
            raise no_data_found;
          else
            pkg_os_object_copy.sp_object_duplicate(in_session_id,
                                                   in_transaction_id,
                                                   v_subm_primary_addr_id,
                                                   v_primary_address_id);
            --
            --   Set the type of the new object to be a Customer Address (Primary Address)
            --
            pkg_os_object.sp_object_transmute(in_session_id,
                                              in_transaction_id,
                                              v_primary_address_id,
                                              v_customer_id,
                                              gobjType_CustomerAddress);

            if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... CustomerAddress ObjectState is:' ||
                                    pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                      in_transaction_id,
                                                                      v_primary_address_id,
                                                                      pkg_os_constant_bv.gbv_GenObjObjectState));
            end if;
            ---
            --- Set the the primary address to preferred primary , mailing and billing address
            ---
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_primary_address_id,
                                              32679146,
                                              111);
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_primary_address_id,
                                              32680546,
                                              111);
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_primary_address_id,
                                              32680646,
                                              111);
            ---
            --- Set the Reference from Customer Entity to Primary Address
            ---
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_entity_id,
                                              gbv_CustEntityPrimaryAddress,
                                              v_primary_address_id);
            -- Start added for UTPRODUCT-3496 ticket
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_entity_id,
                                              gbv_entity_ass_address,
                                              v_primary_address_id);
            -- End added for UTPRODUCT-3496 ticket
            --OSPRODUCT-9760 start
             pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_entity_id,
                                              gbv_ref_associated_address,
                                              v_primary_address_id);
            --OSPRODUCT-9760 end                                                                    
            

            ---
            --- Set the Reference from Customer Location to Primary Address
            ---
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...Setting locatedat ref....'||
                                    'v_location_id :'||v_location_id||
                                    ' v_primary_address_id :'||v_primary_address_id
                                    );
            end if;
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_location_id,
                                              gbv_CustLocationPrimaryAddress,
                                              v_primary_address_id);
            ---
            --- Set the Jurisdiction from Customer Primary Address
            ---
            v_address_state := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                 in_transaction_id,
                                                                 v_primary_address_id,
                                                                 gbv_CustomerAddressState);
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_jurisdiction_id,
                                              gbv_CustomerJurisState,
                                              v_address_state);
            ---
            --- Set the Jurisdiction Country from Customer Primary Address
            ---
            v_address_country := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_primary_address_id,
                                                                   gbv_CustomerAddressCountry);
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_jurisdiction_id,
                                              gbv_CustomerJurisCountry,
                                              v_address_country);
            if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... Customer Primary Address Created Successfully....');
            end if;

          end if; -- if able to find the submission mailing address ...

          --   2.6.1
          --   Create Customer Mailing Address if needed ...
          --
          v_otherMailingAddrsInd := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_action_object_id,
                                                                      gbv_SubmOtherMailingAddrsInd);
          if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... Other mailing indicator = ' ||
                                  v_otherMailingAddrsInd);
          end if;
          if v_otherMailingAddrsInd = pkg_os_constant.gBoolean_True then
            v_subm_mailing_addr_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                        in_transaction_id,
                                                                        in_action_object_id,
                                                                        gbv_SubmMailingAddress);
            if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '......Customer has other Mailing Address.......');
            end if;
            if v_subm_mailing_addr_id is null then
              if v_session_control.gLogging_Full then
                pkg_os_logging.sp_log(in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '...... Submission Mailing Address does not exist');
              end if;
              raise no_data_found;
            else
              pkg_os_object_copy.sp_object_duplicate(in_session_id,
                                                     in_transaction_id,
                                                     v_subm_mailing_addr_id,
                                                     v_mailing_address_id);
              --
              --   Set the type of the new object to be a Customer Address
              --
              pkg_os_object.sp_object_transmute(in_session_id,
                                                in_transaction_id,
                                                v_mailing_address_id,
                                                v_customer_id,
                                                gobjType_CustomerAddress);
              ---
              --- Set the Reference from Customer Entity to Mailing Address
              ---
              pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                v_customer_entity_id,
                                                gbv_CustEntityMailingAddress,
                                                v_mailing_address_id);
              ---
              --- Set the Reference from Customer Entity to Billing Address
              ---
              pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                v_customer_entity_id,
                                                gbv_CustEntityBillingAddress,
                                                v_mailing_address_id);
              if v_session_control.gLogging_Full then

                pkg_os_logging.sp_log(in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      'v_mailing_address_id' ||
                                      v_mailing_address_id);
              end if;
              pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                in_transaction_id,
                                                v_customer_entity_id,
                                                32644146, --CustomerEntity._Reference_PlaceholderMailingAddress
                                                v_mailing_address_id);
              if v_session_control.gLogging_Full then
                pkg_os_logging.sp_log(in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '...... Customer Mailing Address Created Successfully....');
              end if;
            end if; -- if able to find the submission mailing address ...
          else
            v_subm_mailing_addr_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                             in_transaction_id,
                                                                             in_action_object_id,
                                                                             gbv_SubmMailingAddress);
            if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... Customer has no additional mailing addresses....Mailing address is not cloned..');
            end if;
            --- 2.6
            --- Set the Reference from Customer Entity to Mailing Address with ID of Primary Address  (as both are same)
            ---
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_entity_id,
                                              gbv_CustEntityMailingAddress,
                                              v_primary_address_id);
            ---
            --- Set the Reference from Customer Entity to Billing Address
            ---
            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_entity_id,
                                              gbv_CustEntityBillingAddress,
                                              v_primary_address_id);
          end if; -- Check for mailing address indicator value...
          --
          -- OSDEMO- 5096
          -- Create the CustomerEmail Object as a child of Customer
          -- Create the ObjectUSage object ans set type as Email
          -- Set the reference form ObjectUsage to the CustomerEmail object
          -- Set the reference from Customer to customerEmail
          --
          --
          -- OSDEMO- 7535
          -- Change CustomerEmail Object from child of Customer to child of CustomerEntity
		  
 --- OSPRODUCT-12232 Start ---             
          v_custentity_mail := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                 in_transaction_id,
                                                                 v_customer_entity_id,
                                                                 gbv_SubmEmail);
          -- 2.7
          -- check if email bv on CustomerEntity has value.  If so, populate CustomerEmail
          -- object with email from CustomerEntity
          --
          if v_custentity_mail is not null then
          
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_CustomerEmail,
                                         v_customer_entity_id,
                                         v_customer_email_id);
          ---
          --- Set the email as preferred email
          ---
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_email_id,
                                            32681346,
                                            111);
          --
          -- Email Address Usage
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         v_customer_entity_id,
                                         v_usage_email_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_Email);

          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customer_email_id);

          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            gbv_RefActivePrimEmailAdd,
                                            v_usage_email_id);


            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_email_id,
													   
												   
			  
								  
			  
														 
															 
																   
																
															 
															
																
															   
																
																							  
																								  
																							   
																								
															
																
															   
															   
																	  
		  
															
																
															   
																  
																   
		  
															
																
																   
																		
																
		  
															
																
																  
                                              gbv_Email,
                                              v_custentity_mail);
                                           
           pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            gbv_Ref_Active_Email,
                                            v_customer_email_id);  
  
          end if;
 --- OSPRODUCT-12232 End ---   
          --
          -- OSDEMO- 5152
          -- Create the CustomerPhone Number Object as a child of Customer
          -- Create the ObjectUSage object ans set type as Phone number
          -- Set the reference form ObjectUsage to the Customer Phone Number object
          -- Set the reference from Customer to customerphone number
          --
          --
          -- OSDEMO- 7535
          -- Change CustomerPhoneNumber Object from child of Customer to child of CustomerEntity
          --
		  
 --- OSPRODUCT-12232 Start ---            
          v_custentity_phone := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                  in_transaction_id,
                                                                  v_customer_entity_id,
                                                                  gbv_SubmPhone --29235914-- gbv_SubmPhone --AV change
                                                                  );
          --
          -- check if phone number bv on CustomerEntity has value.  If so, populate CustomerPhoneNumber
          -- object with phone number from CustomerEntity
          --
          if v_custentity_phone is not null then
          
														 
															 
																		
																
																
																 
							  
								 
								 
								   
			   
															  
			   
															
																
																  
													   
												   
			  
								 
			  
														 
															 
																   
																
															 
															
																
															   
																
																							  
																								  
																							   
																								
															
																
															   
															   
																	  
															
																
															   
																  
																   
															
																
																   
																	   
																
		  
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_CustomerPhoneNumber,
                                         v_customer_entity_id,
                                         v_customer_phone_id);

          ---
          --- Set the phone number as preferred phone number
          ---
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_phone_id,
                                            32681446,
                                            111);
          --
          -- Phone number Usage
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         v_customer_entity_id,
                                         v_usage_phone_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_Phone);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customer_phone_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            gbv_RefActivePrimPhnNmbr,
                                            v_usage_phone_id);


            pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              v_customer_phone_id,
													   
												   
			  
								 
			  
														 
															 
																   
																
															 
															
																
															   
																
																							  
																								  
																							   
																								
															
																
															   
															   
																	  
															
																
															   
																  
																   
															
																
																   
																	   
																
		  
															
																
																  
                                              gbv_phonenumber,
                                              v_custentity_phone);
                                                
           pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            gbv_Ref_Active_Phone,
                                            v_customer_phone_id);
                                           
																					
          end if; -- update of CustomerPhoneNumber objects if CustomerEntity phone bv has value
--- OSPRODUCT-12232 End ---  
		  
          --
          -- OSDEMO-4780
          -- Create ObjectActivity objects, set effective date and type.
          -- Set the reference from the ObjectActivity object to address.
          -- Set the reference from Customer to the ObjectActivity object.
          --
          --
          -- Primary Address Activity
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         v_customer_entity_id,
                                         v_activity_add_pri_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_PrimAdd);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_primary_address_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            32679946, -- reference primary usage
                                            v_activity_add_pri_id);
          --
          -- Mailing Address Activity
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         v_customer_entity_id,
                                         v_activity_add_mail_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_MailAdd);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_primary_address_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            32680046, --Reference mailing usage
                                            v_activity_add_mail_id);
          -- 2.8
          -- Billing Address Activity
          --

          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         v_customer_entity_id,
                                         v_activity_add_bill_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_BillAdd);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_primary_address_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_customer_entity_id,
                                            32680146, -- Reference billing address
                                            v_activity_add_bill_id);
          if v_customer_entity_id is not null then
            pkg_base_doc_delivery.sp_default_delivery_preference(in_session_id,
                                                                 in_transaction_id,
                                                                 v_customer_entity_id,
                                                                 io_action_outcome_id);
          end if;
        end if;
        --
        -- End OSDEMO-4780
        --

        --
        -- Begin OSDEMO-5299
        -- Create CustomerAssociatePartner as a child of Customer.
        -- Set a reference from CustomerAssociatePartner to the Producing Agency.
        pkg_os_object.sp_object_create(in_session_id,
                                       in_transaction_id,
                                       gObjType_CustAssocPartner,
                                       v_customer_id,
                                       v_cust_assoc_partner_id);
        v_agency_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                         in_transaction_id,
                                                         in_action_object_id,
                                                         gbv_GenericProducingAgency);
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_cust_assoc_partner_id,
                                          gbv_GenericProducingAgency,
                                          v_agency_id);
        --
        -- End OSDEMO-5299
        --

        --
        -- Get the reference of the Producing Agency Territory and set it for Customer
        --
        v_agency_terr_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              v_agency_id,
                                                              gbv_GenericServiceTerritory);
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_customer_id,
                                          gbv_GenericServiceTerritory,
                                          v_agency_terr_id);
        if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '...... start Utemplate reset..');
         end if;
        ---
        ---Reset Utemplate ID's
        ---
        if v_object_type_id = gObjectType_ptp then

         in_plcy_cust_id  := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              in_action_object_id,
                                                              27360105);
          sp_reset_utemplate(in_session_id,
                                 in_transaction_id,
                                 v_customer_id,
                                 in_plcy_cust_id,
                                 io_action_outcome_id);

        end if;

        --
        -- Add Customer record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_customer_id,
                                               v_datamart_tf);
        --
        -- Add Customer Entity record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_customer_entity_id,
                                               v_datamart_tf);
      else
        --set the parent reference to existing customer
        --see how to handle updated data
        if v_object_type_id = gObjectType_submission then
          pkg_os_object.sp_object_parent_set(in_session_id,
                                             in_transaction_id,
                                             in_action_object_id,
                                             r_ORM_matching_cust.customer_id);
        elsif v_object_type_id = gObjectType_ptp then
          if v_ptp_parent_type_id = gObjectType_pt then
            pkg_os_object.sp_object_parent_set(in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               r_ORM_matching_cust.customer_id);
                                               
        --UTPRODUCT-4484
            sp_customer_associated_partners(in_session_id,
                                         in_transaction_id,
                                         v_policy_id,
                                         r_ORM_matching_cust.customer_id);                                           
        --
        -- Add Policy record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               v_datamart_tf);

          elsif v_ptp_parent_type_id = gObjectType_qt then
            pkg_os_object.sp_object_parent_set(in_session_id,
                                               in_transaction_id,
                                               v_quote_id,
                                               r_ORM_matching_cust.customer_id);
        --
        -- Add quote record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_quote_id,
                                               v_datamart_tf);

          end if;
          in_plcy_cust_id  := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              in_action_object_id,
                                                              27360105);
          sp_reset_utemplate(in_session_id,
                                 in_transaction_id,
                                 r_ORM_matching_cust.customer_id,
                                 in_plcy_cust_id,
                                 io_action_outcome_id);
        end if;

        /*
                v_cust_orm_version_id := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_action_object_id, gBV_ORMVersionId);
                if v_entity_orm_ver_id != v_cust_orm_version_id
                then

                else
                      print log
                end if;
        */
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... setting parent tto existing customer. CustomerID:' ||
                              r_ORM_matching_cust.customer_id ||
                              ' For agency: ' || v_producing_agency);
        --     end if; -- if cust with same agency exists
        close c_ORM_matching_cust;
      end if; ---if ORM id exists
    end if; -- if customer exists ...
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  end sp_create_customer;
  --OSPRODUCT-4729 End
  -----------------------------------------------------------------------------------------------------------------------------------
  -----------------------------------------------------------------------------------------------------------------------------------

  procedure sp_MasterCustomerSearch(in_session_id       in object.object_id%type,
                                    in_transaction_id   in object.object_id%type,
                                    in_action_object_id in object.object_id%type
                                    
                                    ) is
  
    v_customer             object.object_id%type;
    v_source               number;
    v_cust_primart_entity  object.object_id%type;
    v_ptp_child_policyCust object.object_id%type;
    v_partner              object.object_id%type;
    v_orm                  varchar2(500);
    v_count                integer;
    v_CUSTOMER_MATCH       object.object_id%type;
    v_imported_legacy_id   varchar2(500);
    v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                            in_transaction_id);
    v_procedure_name constant system_log.program_name%type := 'sp_MasterCustomerSearch';
  begin
    v_customer := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                    in_transaction_id,
                                                                    in_action_object_id,
                                                                    PKG_PC_SUBMISSION.gObjType_Customer);
    v_source   := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id,
                                                    gbv_source);
  
    v_partner := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                   in_transaction_id,
                                                   v_customer,
                                                   PKG_OS_CONSTANT_BV.gbv_GenObjProducingAgency);
    if v_partner is null then
      v_partner := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                     in_transaction_id,
                                                     in_action_object_id,
                                                     PKG_OS_CONSTANT_BV.gbv_GenObjProducingAgency);
    end if;
    v_ptp_child_policyCust := pkg_os_object_Search.fn_object_11_child_get(in_session_id,
                                                                          in_transaction_id,
                                                                          in_action_object_id,
                                                                          PKG_OS_CONSTANT.gObjType_PolicyCustomer);
    v_cust_primart_entity  := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                in_transaction_id,
                                                                v_ptp_child_policyCust,
                                                                PKG_PC_SUBMISSION.gbv_CustomerPrimaryEntity);
    v_orm                  := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                in_transaction_id,
                                                                v_cust_primart_entity,
                                                                PKG_PC_SUBMISSION.gbv_SubmORMID);
    if v_session_control.gLogging_Full then
    
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' v_customer  : ' || v_customer ||
                            ' v_partner  : ' || v_partner ||
                            ' v_cust_primart_entity    : ' ||
                            v_cust_primart_entity || ' v_orm    : ' ||
                            v_orm || ' v_ptp_child_policyCust    : ' ||
                            v_ptp_child_policyCust || ' v_source    : ' ||
                            v_source);
    end if;
    
    if v_source in (1,6) then
       v_imported_legacy_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_action_object_id,
                                                                      gbv_PolicyCustLegacyId);
    end if;
  
    if v_source in (1,6) then
      --1 = Legacy, --6 = RegisterPolicyTransaction
      select count(*)
        into v_count
        from dragon_customer
       where ENTITY_RELATIONSHIP_MGMT_ID = v_orm
         and customer_agency_id = v_partner
         and ( LEGACY_ID is null or LEGACY_ID = v_imported_legacy_id );
    else
      select count(*)
        into v_count
        from dragon_customer
       where ENTITY_RELATIONSHIP_MGMT_ID = v_orm
         and customer_id <> v_customer
         and customer_agency_id = v_partner;
    end if;
  
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          'v_count  : ' || v_count);
    if v_count = 0 then
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_ptp_child_policyCust,
                                        g_MasterSearch_Ind,
                                        g_MasterSearch_NoMatch);
    
    elsif v_count = 1 then
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_ptp_child_policyCust,
                                        g_MasterSearch_Ind,
                                        g_MasterSearch_ExactMatch);
      if v_source in (1,6) then
        --1 = Legacy, --6 = RegisterPolicyTransaction
        select CUSTOMER_ID
          into v_CUSTOMER_MATCH
          from dragon_customer
         where ENTITY_RELATIONSHIP_MGMT_ID = v_orm
           and customer_agency_id = v_partner
           and ( LEGACY_ID is null or LEGACY_ID = v_imported_legacy_id );
      else
        select CUSTOMER_ID
          into v_CUSTOMER_MATCH
          from dragon_customer
         where ENTITY_RELATIONSHIP_MGMT_ID = v_orm
           and customer_id <> v_customer
           and customer_agency_id = v_partner;
      end if;
    
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        in_session_id,
                                        PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest,
                                        v_CUSTOMER_MATCH);
    
    elsif v_count > 1 then
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_ptp_child_policyCust,
                                        g_MasterSearch_Ind,
                                        g_MasterSearch_MultipleMatch);
    end if;
  
  end sp_MasterCustomerSearch;

  procedure sp_MasterCustomerSwitch(
                                    in_session_id       in object.object_id%type,
                                    in_transaction_id   in object.object_id%type,
                                    in_action_object_id in object.object_id%type,
									in_master_customer_id  in object.object_id%type default null
									) is
    v_ptp_parent_QT_PT       object.object_id%type;
    --OSPRODUCT-12478 start
    v_base_submission        object.object_id%type; --OSPRODUCT-12478
    v_base_submission_cus    object.object_id%type;
    v_base_quote             object.object_id%type; --OSPRODUCT-12478
    v_base_quote_cus         object.object_id%type;
    v_base_customer          object.object_id%type; --OSPRODUCT-12478
    v_object_qt_list           pkg_os_object.t_object_list; 
    v_object_pol_list           pkg_os_object.t_object_list; 
    v_object_sub_list           pkg_os_object.t_object_list; 
    --OSPRODUCT-12478 end
    v_policy_id              object.object_id%type;
    v_ptp_child_policyCust   object.object_id%type;
    v_ptp_parent_type_id     object.object_type_id%type;
    v_identified_master_cust object.object_id%type;
    v_object_list            pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
    v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                              in_transaction_id);
    v_procedure_name constant system_log.program_name%type := 'sp_MasterCustomerSwitch';
    
    v_action_outcome_id      outcome.outcome_id%type;
    v_source                 number;
    v_datamart_tf            char := 'F';
  ---UTPRODUCT-4279 start
    v_object_pc_ce_list           pkg_os_object.t_object_list; 
    v_object_pc_ce_index          number;
    v_orm_id                      varchar2(50);
    v_existing_ce_under_mc        object.object_id%type;
    v_utmp_existing_ce_under_mc   object.object_id%type;
    ---UTPRODUCT-4279 end
  begin
  
   --
    -- in_master_customer_id is not null condition added for OSPRODUCT-15807
    --
    if  in_master_customer_id is not null
     then 
       v_identified_master_cust := in_master_customer_id;
     else  
	 
    v_identified_master_cust := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                  in_transaction_id,
                                                                  in_session_id,
                                                                  PKG_OS_CONSTANT_BV.gbv_SessionObjectOfInterest);
																  
	 end if;  															  
    --get child policy customer and then set for that
  
    v_ptp_child_policyCust := pkg_os_object_Search.fn_object_11_child_get(in_session_id,
                                                                          in_transaction_id,
                                                                          in_action_object_id,
                                                                          PKG_OS_CONSTANT.gObjType_PolicyCustomer);
  
     v_source := pkg_os_object_io.fn_object_bv_get( in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id,
                                                    27926602 --Object Source/Origin Type
                                                  );
    if v_session_control.gLogging_Full then
    
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' v_ptp_child_policyCust  : ' ||
                            v_ptp_child_policyCust ||
                            ' v_identified_master_cust  : ' ||
                            v_identified_master_cust);
    end if;
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_ptp_child_policyCust,
                                      gbv_GenObjUTemplateObjId,
                                      v_identified_master_cust);
  
    v_ptp_parent_QT_PT := pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             in_action_object_id);
                                                       
  
    v_ptp_parent_type_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              v_ptp_parent_QT_PT,
                                                              pkg_os_constant_bv.gbv_GenObjObjectType);
                                
  --UTPRODUCT-4279 start
    --Get all customerentity object of policycustomer which going to move
    pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        v_ptp_child_policyCust, --policycustomer
                                                        205, --CustomerEntity
                                                        v_object_pc_ce_list,
                                                        null,
                                                        true
                                                        );
                                                                                         
    v_object_pc_ce_index := v_object_pc_ce_list.first;
    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' v_object_pc_ce_list.count  : ' ||
                            v_object_pc_ce_list.count ||
                            ' v_object_pc_ce_list.first  : ' ||
                            v_object_pc_ce_list.first);
    end if;
    while v_object_pc_ce_index is not null loop
         
         v_orm_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                        in_transaction_id,
                                                        v_object_pc_ce_list(v_object_pc_ce_index),
                                                        gbv_ORMID);
                                        
         v_existing_ce_under_mc := pkg_os_object_search.fn_object_with_attribute_get
                                   (in_session_id,
                                    in_transaction_id,
                                    v_identified_master_cust, --customer
                                    PKG_OS_CONSTANT.gObjType_CustomerEntity, --Customer Entity
                                    gbv_ORMID, --Ultimate template ID
                                    v_orm_id, --Utemplate of selected customer entity
                                    false);
                                    
          if v_existing_ce_under_mc is not null then
            
          v_utmp_existing_ce_under_mc := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                           in_transaction_id,
                                                                           v_existing_ce_under_mc,
                                                                           gbv_GenObjUTemplateObjId);
            
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_object_pc_ce_list(v_object_pc_ce_index),
                                        gbv_GenObjUTemplateObjId,
                                        v_utmp_existing_ce_under_mc);
          
          end if;
          if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' v_orm_id  : ' || v_orm_id ||
                                ' v_existing_ce_under_mc  : ' || v_existing_ce_under_mc ||
													   
                                ' v_object_pc_ce_list(v_object_pc_ce_index)  : ' || v_object_pc_ce_list(v_object_pc_ce_index) );
																		 
          end if;
                                    
      v_object_pc_ce_index := v_object_pc_ce_list.next(v_object_pc_ce_index);
    end loop;                                                                                                         
    --UTPRODUCT-4279 end                              
  
    if v_ptp_parent_type_id = PKG_OS_CONSTANT.gobjType_QuoteTransaction then
    
							 
																		  
																			  
																				
	
     --OSPRODUCT-12478 start
     v_base_customer :=  pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             v_ptp_parent_QT_PT);
      
      pkg_os_object.sp_object_parent_set(in_session_id,
                                         in_transaction_id,
                                         v_ptp_parent_QT_PT,
                                         v_identified_master_cust);
    
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_ptp_parent_QT_PT,
                                        pkg_os_constant_bv.gbv_GenObjObjectState,
                                        gState_QuoteMarkedforIssueIncomplete);
     
      v_base_submission := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
																						
																						 
																																						   
																				
                                                                  in_transaction_id,
                                                                  v_ptp_parent_QT_PT,
                                                                  '29606009.29428213'); --QuoteTransaction._Reference_Generated From._Parent_Submission
      v_base_submission_cus := pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             v_base_submission);
      if  v_base_customer  =     v_base_submission_cus then                                                                                                           
      pkg_os_object.sp_object_parent_set(in_session_id,
                                         in_transaction_id,
                                         v_base_submission,
                                         v_identified_master_cust);
       pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_base_submission,
                                               v_datamart_tf);
       end if;                                                                                                                                           
      
        --
        -- Add quote record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_ptp_parent_QT_PT,
                                               v_datamart_tf);                                   
    
		
									 
		
														   
															   
																
															
	
    elsif v_ptp_parent_type_id = PKG_OS_CONSTANT.gobjType_PolicyTransaction then
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_ptp_parent_QT_PT,
                                        pkg_os_constant_bv.gbv_GenObjObjectState,
                                        PKG_OS_POLICY_TRANSACTION.gState_PolicyTrxCreated);
      v_policy_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                        in_transaction_id,
                                                        v_ptp_parent_QT_PT);
     v_base_customer :=  pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             v_policy_id);                                                   
      pkg_os_object.sp_object_parent_set(in_session_id,
                                         in_transaction_id,
                                         v_policy_id,
                                         v_identified_master_cust);
      
      v_base_quote := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                  in_transaction_id,
                                                                  v_policy_id,
                                                                  '29606209'); --_Reference_Derived From
      v_base_quote_cus :=  pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             v_base_quote);                                                            
      
      
      v_base_submission := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
																						
																				   
																																						   
																				
                                                                  in_transaction_id,
                                                                  v_base_quote,
                                                                  '29606009.29428213'); --QuoteTransaction._Reference_Generated From._Parent_Submission
      v_base_submission_cus := pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             v_base_submission);                                                            
      if v_base_customer = v_base_quote_cus then
      pkg_os_object.sp_object_parent_set(in_session_id,
                                         in_transaction_id,
                                         v_base_quote,
                                         v_identified_master_cust);
      pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_base_quote,
                                               v_datamart_tf);                                    
      end if;                                         
      
      if v_base_customer = v_base_submission_cus then
      pkg_os_object.sp_object_parent_set(in_session_id,
                                         in_transaction_id,
                                         v_base_submission,
                                         v_identified_master_cust);
      pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_base_submission,
                                               v_datamart_tf);  
     end if;                                                                                                                                                                                  
     --OSPRODUCT-12478 end  
                                        
        --
--UTPRODUCT-4484
            sp_customer_associated_partners(in_session_id,
                                         in_transaction_id,
                                         v_policy_id,
                                         v_identified_master_cust);        --
        -- Add quote record to datamart
        --
        pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                               in_transaction_id,
                                               v_policy_id,
                                               v_datamart_tf);                                     
			 
						   
    
    END IF;
					  
													
														
												  
																   
									 
		
														   
															   
														 
															
    
		   
  
    --check if base customer is having any submission, quote, policy, if not then delete the 
    --base customer from quote,policy,submission is moved to existing quote
     pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        v_base_customer, --policycustomer
                                                        2356809, --quotetransaction
                                                        v_object_qt_list,
                                                        null,
                                                        true
                                                        );
      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        v_base_customer, --policycustomer
                                                        24, --policy
                                                        v_object_pol_list,
                                                        null,
                                                        true
                                                        );
       pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        v_base_customer, --policycustomer
                                                        5, --quotetransaction
                                                        v_object_sub_list,
                                                        null,
                                                        true
                                                        );
        if  v_object_qt_list.count = 0 and v_object_pol_list.count = 0 and v_object_sub_list.count = 0 then
          
        pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, null, v_base_customer, 12); -- deleteting base master customer
        
        end if;                                                                                                                                                    
    
												   
													   
										  
													 
																			
    
		   
  
																		   
									
									 
										 
												
											  
											
									  
  
        --if v_source in (1,33,4) --Legacy / Comprater --UTPRODUCT-4279 comment
         -- then --UTPRODUCT-4279 comment
        sp_reset_utemplate(in_session_id,
                                 in_transaction_id,
                                 v_identified_master_cust,
                                 v_ptp_child_policyCust,
                                 v_action_outcome_id);
        --end if; --UTPRODUCT-4279 comment                         
                                 
  end sp_MasterCustomerSwitch;
  --------------------------------
-----------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-17667
-- The procedure will reset the UTemplate Id for all the Objects under the Policy Customer and Sync it with the master Customer

	procedure sp_reset_policy_customer_utemplate
	(
		in_session_id     in dragon_session.user_session_id % type,
		in_transaction_id   in dragon_transaction.transaction_id % type,
		in_action_object_id   in object.object_id % type,
		io_action_outcome_id  in out nocopy outcome.outcome_id % type
	)
	is
		gUltimateParentBvId   constant number := 31187146;
		gRRefAccountInfo    constant number := 27360105;

		v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
		v_procedure_name    constant system_log.program_name%type := 'sp_reset_policy_customer_utemplate';
		v_master_customer_id  object.object_id%type;
		v_policy_customer_id  object.object_id%type;
	begin
		-- get the master customer object id
		v_master_customer_id := pkg_os_object_io.fn_object_bv_get
		(
			in_session_id,
			in_transaction_id,
			in_action_object_id,
			gUltimateParentBvId
		);

		-- get the policy customer object id
		v_policy_customer_id := pkg_os_object_io.fn_object_bv_get
		(
			in_session_id,
			in_transaction_id,
			in_action_object_id,
			gRRefAccountInfo
		);

		if v_session_control.gLogging_Full then
			pkg_os_logging.sp_log
			(
			in_session_id,
			in_transaction_id,
			v_procedure_name,
			' Resetting UTemplates. v_policy_customer_id  : ' || v_policy_customer_id ||
			' v_master_customer_id  : ' || v_master_customer_id 
			);
		end if;
		
		pkg_pc_procedures.sp_reset_utemplate
		(
			in_session_id,
			in_transaction_id,
			v_master_customer_id,
			v_policy_customer_id, 
			io_action_outcome_id
		);

	end sp_reset_policy_customer_utemplate;

-----------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-5158 start
procedure sp_reset_utemplate(in_session_id        in dragon_session.user_session_id%type,
                                 in_transaction_id    in dragon_transaction.transaction_id%type,
                                 in_mstr_cust_id      in object.object_id%type,
                                 in_plcy_cust_id      in object.object_id%type,
                                 io_action_outcome_id in out nocopy outcome.outcome_id%type) is

      v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                         in_transaction_id);
      v_procedure_name  system_log.program_name%type := 'sp_reset_utemplate';

      v_creditreprtresult_list                       pkg_os_object.t_object_list;
      v_customerentity_list                          pkg_os_object.t_object_list;
      v_address_list                                 pkg_os_object.t_object_list;
      v_building_list                                pkg_os_object.t_object_list;
      v_location_list                                pkg_os_object.t_object_list;
      v_vehicle_list                                 pkg_os_object.t_object_list;
      v_jurisdiction_list                            pkg_os_object.t_object_list;
      v_customeremail_list                           pkg_os_object.t_object_list;
      v_customerphonenumber_list                     pkg_os_object.t_object_list;
      v_entityrole_list                              pkg_os_object.t_object_list;
      v_objectusage_list                              pkg_os_object.t_object_list;
      v_docdelpref_list                              pkg_os_object.t_object_list;


	    v_mstr_entity_paxus_nmbr object_bv_value.business_variable_value%type;
      v_policy_cust_entity_id  object.object_id%type;
      v_src_utemplate_id       object.object_id%type;
      v_entityBVID             business_variable.business_variable_id%type;
      v_source                 object_bv_value.business_variable_value%type;
	    v_origin_source          object_bv_value.business_variable_value%type;

begin

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' Statring  check with Paxus id to match Utemplate for Master Customer : ' ||
                                   in_mstr_cust_id ||
                                   ' Policy Customer under the incoming Master Customer is                : ' ||
											 
	
		   
  
														
	   
																	  
													 
													 
																											  
																 
													  
												
																											 
  
	   
										  
	   
																	   
																		   
																		 
																										  
														   
  
	   
									   
	   
																
																	
																  
																					   
													
	  
							
		 
						  
						   
			   
						  
		   
	  
  
	   
													   
	   
  
																	  
																		  
                                   in_plcy_cust_id);

																		
  
										   
	
										  
											  
											 
																	
												  
	
		   
  
									
																		
		   
									 
		  
													 
      end if;

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;
      ---
      --- We need to do the UTemplate Merge on the following ObjectTypes
      --- a)   CustomerEntity       : Using the ORM ID.
      --- b)   CustomerAddress      : Using the ORM ID.
      --- c)   CustomerBuilding     : object labelBuilding name , build year built , risk type, building address
      --- d)   CustomerLocation     : object label Location Address
      --- e)   CustomerVehicle      : object label VIN #
      --- f)   CustomerJurisdiction : object label
      --- g)   CreditReportResults  :  Credit Score ,Report Order Date(only done one converted policy workflow)

      ---
      ---  Get the source Dragon / Comprater
      ---
      v_origin_source := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                    in_transaction_id,
                                                    in_plcy_cust_id,
                                                    gbv_serviceSource -- Object Source/Service Mapped
                                                    );

	  ---
      ---  Get the source Dragon / Legacy
      ---
      v_source := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                    in_transaction_id,
                                                    in_mstr_cust_id,
                                                    27926602 -- Object Source/Origin Type
                                                    );
      /*
      if v_source = 2 --Dragon
										   
																		
       then
        v_entityBVID := 111;
      elsif v_source = 1 then
        -- Legacy
        v_entityBVID := 111;
      end if;
      */
      
      ---
      ---  Get all the CustomerAddress under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
									   
                                                          in_plcy_cust_id,
                                                          pkg_base_customer.gObjTypeCustomerAddress,
                                                          v_address_list
                                                          );

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerAddress Count:' ||
                              v_address_list.count);

      end if;

      if v_address_list.count > 0 then
		if (v_origin_source = 'T') --Comprater / UploadQuote / BoldPenguin
         then
           v_entityBVID := gbv_ObjectID;
         else
           v_entityBVID := NVL(gbv_ORMID,gbv_ObjectID);
         end if;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         pkg_base_customer.gObjTypeCustomerAddress,
                         v_address_list,
                         v_entityBVID);
      end if;
      
      ---
      ---  Get all the CustomerEntity under PolicyCustomer
      ---
      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          pkg_base_customer.gObjTypeCustomerEntity,
                                                          v_customerentity_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerEntity Count:' ||
                              v_customerentity_list.count);

      end if;
      if v_customerentity_list.count > 0
      then
        if (v_origin_source = 'T') --Comprater / UploadQuote / BoldPenguin
           then
            v_entityBVID := gbv_ObjectID;
           else
             v_entityBVID := gbv_UKORMUTempID; --UTPRODUCT-4279
        end if;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         pkg_base_customer.gObjTypeCustomerEntity,
                         v_customerentity_list,
                         v_entityBVID);
         if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log_core(in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' Incoming Master Customer : ' ||
                                   in_mstr_cust_id ||
                                   ' Policy Customer ID  : ' ||
                                   in_plcy_cust_id ||
                                   ' matched attribute  : ' ||
                                   v_entityBVID
                                 );

      end if;

      end if;

      ---
      ---  Get all the CustomerJurisdiction under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          pkg_base_customer.gObjTypeCustomerJurisdiction,
                                                          v_jurisdiction_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerJurisdiction Count:' ||
                              v_jurisdiction_list.count);

      end if;

      if v_jurisdiction_list.count > 0 then
        v_entityBVID := gbv_ObjectID;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         pkg_base_customer.gObjTypeCustomerJurisdiction,
                         v_jurisdiction_list,
                         v_entityBVID);

      end if;

      ---
      ---  Get all the CustomerBuilding under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          pkg_base_customer.gObjTypeCustomerBuilding,
                                                          v_building_list,
                                                          null,
                                                          true);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerBuilding Count:' ||
                              v_building_list.count);

      end if;

      if v_building_list.count > 0 then
        v_entityBVID := gbv_ObjectID;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         pkg_base_customer.gObjTypeCustomerBuilding,
                         v_building_list,
                         v_entityBVID -- Need to add Risk type in the logic
                         );

      end if;

      ---
      ---  Get all the CustomerLocation under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          pkg_base_customer.gObjTypeCustomerLocation,
                                                          v_location_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerLocation Count:' ||
                              v_location_list.count);

      end if;

      if v_location_list.count > 0 then
        v_entityBVID := gbv_ObjectID;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         pkg_base_customer.gObjTypeCustomerLocation,
                         v_location_list,
                         v_entityBVID -- object label bv id here
                         );

      end if;

      ---
      ---  Get all the CustomerEmail under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          gObjTypeCustomerEmail,
                                                          v_customeremail_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerEmail Count:' ||
                              v_customeremail_list.count);

      end if;

      if v_location_list.count > 0 then
        v_entityBVID := gbv_CustomerEmail;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         gObjTypeCustomerEmail,
                         v_customeremail_list,
                         v_entityBVID -- object label bv id here
                         );

      end if;

      ---
      ---  Get all the CustomerPhoneNumber under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          gObjTypeCustomerPhoneNumber,
                                                          v_customerphonenumber_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found CustomerPhoneNumber Count:' ||
                              v_customerphonenumber_list.count);

      end if;

      if v_location_list.count > 0 then
        v_entityBVID := gbv_CustomerPhoneNumber;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         gObjTypeCustomerPhoneNumber,
                         v_customerphonenumber_list,
                         v_entityBVID -- object label bv id here
                         );
      end if;


      ---
      ---  Get all the EntityRole under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          gObjTypeEntityRole,
                                                          v_entityrole_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found EntityRole Count:' ||
                              v_entityrole_list.count);

      end if;

      if v_entityrole_list.count > 0 then
        v_entityBVID := gbv_EntityRoleUK;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         gObjTypeEntityRole,
                         v_entityrole_list,
                         v_entityBVID -- object label bv id here
                         );
      end if;

      ---
      ---  Get all the DocumentDeliveryPreference under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          gObjTypeDocDelPref,
                                                          v_docdelpref_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found DocDelPref Count:' ||
                              v_docdelpref_list.count);

      end if;

      if v_docdelpref_list.count > 0 then
        v_entityBVID := gbv_ObjectID;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         gObjTypeDocDelPref,
                         v_docdelpref_list,
                         v_entityBVID -- object label bv id here
                         );
      end if;

      ---
      ---  Get all the ObjectUsage under MasterEntity
      ---

      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          in_plcy_cust_id,
                                                          gObjTypeObjectUsage,
                                                          v_objectusage_list);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found ObjectUsage Count:' ||
                              v_objectusage_list.count);

      end if;

      if v_objectusage_list.count > 0 then
        v_entityBVID := gbv_ObjectUsageUK;
        sp_set_utemplate(in_session_id,
                         in_transaction_id,
                         in_mstr_cust_id,
                         in_plcy_cust_id,
                         gObjTypeObjectUsage,
                         v_objectusage_list,
                         v_entityBVID -- object label bv id here
                         );
      end if;



	  if io_action_outcome_id <> pkg_os_constant.gOutcome_OK then

        raise no_data_found;

    end if;

end sp_reset_utemplate;

procedure sp_set_utemplate
(
    in_session_id         in dragon_session.user_session_id%type,
    in_transaction_id     in dragon_transaction.transaction_id%type,
    in_mstr_cust_id       in object.object_id%type,
    in_plcy_cust_id       in object.object_id%type,
    in_search_objt_type   in object.object_id%type,
    in_search_object_list in pkg_os_object.t_object_list,
    in_search_bv_id       in business_variable.business_variable_id%type
) 
is
  
    v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
    v_procedure_name  system_log.program_name%type := 'sp_set_utemplate';
	   
  
    v_index number;
																		  
																		
																									   
																			 
  
    v_mstr_search_value       object_bv_value.business_variable_value%type;
    v_cust_search_objt_id     object.object_id%type;
    v_src_utemplate_id        object.object_id%type;
    v_new_object_id           object.object_id%type;
    v_listobjectparent_id     object.object_id%type;
    v_object_type_id          object_type.object_type_id%type;
    v_origin_source           object_bv_value.business_variable_value%type;
    v_search_objt_parent_id   object.object_id%type;
    v_parent_UTemplate_id     object.object_id%type;
    v_copy_premium_recs   char := 'F';

  
begin

									 
										 
									   
									   
																	  
										   
									 
	
		   
  
    ---
    --- Set MasterCustomer ID as Utemplate of PolicyCustomer
    ---

    pkg_os_object_io.sp_object_bv_set
    (
        in_session_id,
        in_transaction_id,
        in_plcy_cust_id,
        pkg_os_constant_bv.gbv_Ultimate_Template,
        in_mstr_cust_id
    );
															  
  
    if v_session_control.gLogging_Full 
    then
																		
																								   
																		
															 
															  
	
		   
  
										   
	
			pkg_os_logging.sp_log
			(
			    in_session_id,
			    in_transaction_id,
			    v_procedure_name,
			    ' Incoming Master Customer : '   || in_mstr_cust_id ||
			    ' Policy Customer ID  : '        || in_plcy_cust_id ||
			    ' Search BV ID        : '        || in_search_bv_id ||
			    ' Search Object List Count   : ' ||in_search_object_list.count ||
			    ' Search Object Type  : '        || in_search_objt_type
									 
								   
									 
										 
									   
									   
																  
									   
																		 
						 
	
		   
  
	   
														
	   
  
																	  
																		  
																		
																								   
																		 
  
										   
	
										  
											  
											 
																	 
												   
	
		   
  
									 
								   
									 
										 
									   
									   
																  
									   
															  
						 
	
		   
  
	   
													 
	   
  
																	  
																		  
																		
																			  
																			  
  
										   
	
										  
											  
											 
																  
														
	
		   
  
									 
										
									 
										 
									   
									   
											 
											
															  
						 
	
		   
  
	   
														   
	   
  
																	  
																		  
																		
																					
																					
  
										   
	
										  
											  
											 
																		
															  
	
		   
  
									 
											  
									 
										 
									   
									   
												   
												  
															  
						 
		   
  
	   
												  
	   
  
																	  
																		  
																		
																		   
																		   
  
										   
	
										  
											  
											 
															   
													 
	
		   
  
									   
									   
									 
										 
									   
									   
										  
										 
															  
						 
		   
  
	   
																  
	   
  
																	  
																		  
																		
																		   
																		   
  
										   
	
										  
											  
											 
															   
													 
	
		   
  
									   
								   
									 
										 
									   
									   
										  
										 
															  
						 
		   
  
	   
												   
	   
  
																	  
																		  
																		
																			
																			
  
										   
	
										  
											  
											 
																
													  
	
		   
  
										
										
									 
										 
									   
									   
										   
										  
															  
      );
		   
  
															   
	
						  
	
    end if;
  
						 

																							 
																								
																			   
																			   
																			   
																					 
																										
  
																													 
																														  
																		 
  
				   
  
    v_index := in_search_object_list.first;
												
												
												
												
									  
														  
																	   
  
	   
														   
													
														
													  
																			   
													   
  
											 
  
										
											
										   
																			  
																		 
																		 
															 
														
																			
  
			 
  
    ---
    --- Check if there exist a SearchObjectType with the Same Search Key under MasterCustomer
    --- if found, then  reset the Utemplate to same as Master Customer
    ---
    
										   
  
    while v_index is not null 
    loop
    
         v_mstr_search_value := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_search_object_list(v_index), in_search_bv_id);
		 
         ---
																				
         --- Added under UTXPRODUCT-316 Start
         ---
         v_listobjectparent_id :=  in_mstr_cust_id;
         if 
		     (
  			       in_search_objt_type in 
                                       (
											                   gObjTypeEntityRole, 
											                   gObjTypeDocDelPref, 
											                   gObjType_CustomerEmail,
											                   gObjType_CustomerPhoneNumber
                                       ) 	
         or -- Updated under UTXPRODUCT-316
		     (
					      in_search_objt_type in (gObjTypeObjectUsage) 
					  and
					      v_mstr_search_value != 800
					) 
		     )					
         then
		 
		        v_search_objt_parent_id  := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_search_object_list(v_index) );
																									 
																								   
																					   
																											
		        v_parent_UTemplate_id    := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id,v_search_objt_parent_id ,gbv_genobjutemplateobjid) ;
																																	   
		        v_listobjectparent_id    := pkg_os_object_search.fn_object_with_attribute_get (in_session_id, in_transaction_id, in_mstr_cust_id, gObjType_CustomerEntity, gbv_genobjutemplateobjid,v_parent_UTemplate_id);
                                                                                                            
																																														 
																																																	  
																																											
																																			  
																																 
																					 
         elsif 
	       (
			         in_search_objt_type in (gObjTypeObjectUsage) 
			      and
			         v_mstr_search_value = 800
	       ) 
         then
	  
		        v_search_objt_parent_id  := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_search_object_list(v_index) );
																									 
																								   
																						   
																											
		        v_parent_UTemplate_id    := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id,v_search_objt_parent_id ,gbv_genobjutemplateobjid) ;	  
																																	   
		        v_listobjectparent_id    := pkg_os_object_search.fn_object_with_attribute_get (in_session_id, in_transaction_id, in_mstr_cust_id, gObjTypeDocDelPref, gbv_genobjutemplateobjid,v_parent_UTemplate_id);
                                                         
																																														 
																																																	  
																																												
																																			  
																																 
																					 
      
			 
         end if;--- Added under UTXPRODUCT-316 end
	  
							 
							  
							 
								 
											
									   
											
												
											   
															
													 
																								 
																									 
																										 
																									   
																								   
																									  
																																 
																					 
		  
																								 
																									 
																								   
																									   
																								   
																									  
																																 
																					 
																					 
      
         ---
         --- Updated under UTXPRODUCT-316
         ---	  

        if v_session_control.gLogging_Full 
        then	
        
           pkg_os_logging.sp_log
           (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' v_listobjectparent_id : ' ||v_listobjectparent_id
           );	
        
        end if;							  
	
        v_cust_search_objt_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id, in_transaction_id, v_listobjectparent_id, in_search_objt_type, in_search_bv_id, v_mstr_search_value);
 
         if v_session_control.gLogging_Full 
         then
      
                pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' in_search_bv_id  : '                  || in_search_bv_id ||
                    ' Master Customer - Search Value  : '   || v_mstr_search_value ||
													
																	  
                    ' Object ID under Policy Customer : '   || in_search_object_list(v_index) ||
															   
                    ' Matching Object ID under Customer : ' ||v_cust_search_objt_id
                );
      
         end if;
	  
         ---
         --- Found a instance under MasterCustomer
         ---	
	  
         if v_cust_search_objt_id is not null 
         then
	  
             ---
             --- UTPRODUCT-4298 START
             ---	      
    
            v_src_utemplate_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_cust_search_objt_id, pkg_os_constant_bv.gbv_ultimate_template);
            v_origin_source    := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_plcy_cust_id, gbv_source);   
          
            --
            -- LXPRODUCT- 126 In case of QuoteUpload the  PolicyCustomer(Import) get created first and then MasterCustomer(Wrkflw)    
            -- Reset UTemplate on PolicyCustomer details with Master Object ID  
            -- .
            --
      
            if 
                     nvl(v_origin_source,0)  = gbv_source_UploadQuote 
               and
                   (
                     in_search_objt_type = gObjType_CustomerEntity 
                or
                         in_search_objt_type = gObjTypeDocDelPref
               ) 
            then
            
                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_search_object_list(v_index), pkg_os_constant_bv.gbv_ultimate_template, v_cust_search_objt_id); 
                
                -- Set the Master CustomerEntity to his own object id.
                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_cust_search_objt_id, pkg_os_constant_bv.gbv_ultimate_template, v_cust_search_objt_id); 
            
            else
                                             
            
                pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_search_object_list(v_index), pkg_os_constant_bv.gbv_ultimate_template, v_src_utemplate_id); 
            
            end if;-- LXPRODUCT- 126

            if v_session_control.gLogging_Full 
            then
        
                  pkg_os_logging.sp_log
                  (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     ' Successfuly updated UTemplate ID : ' ||v_src_utemplate_id ||
                     ' on Customer Object         : ' ||v_cust_search_objt_id ||
                     ' Search Object Type  : ' ||in_search_objt_type
                  );
        
            end if;
										  
																		   
																			   
																			 
																									  
	  
		  
																																  
																		  
		  
      
         else 
	  
              ---
              --- UTXPRODUCT-316 :Comment Search did not return a instance under MasterCustomer
              ---	  	   
              
              if v_session_control.gLogging_Full 
              then
                
                    pkg_os_logging.sp_log
                    (
                           in_session_id,
                           in_transaction_id,
                           v_procedure_name,
                           ' Start Duplicating : '
                    );
        
              end if;
		
              v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_search_object_list(v_index));
																					 
																   
																					 
																   
        
              ---
              --- ObjectType with hieararchy
              ---
              if 
                 v_object_type_id in (
                                        gObjType_CustomerJurisdiction,
                                        gObjType_CustomerEmail,
                                        gObjType_CustomerPhoneNumber,
                                        gObjTypeObjectUsage,
                                        gObjTypePolicyCustomer,
                                        gObjTypeEntityRole
                                      ) 
              then
																  
																					 
																
											
        
                    pkg_os_object_copy.sp_object_duplicate
                    (
                        in_session_id,
                        in_transaction_id,
                        in_search_object_list(v_index),
                        v_new_object_id,
                        v_copy_premium_recs
                     );
              else
		
                    pkg_os_object_copy.sp_object_duplicate
                    ( 
                       in_session_id,
                       in_transaction_id,
                       in_search_object_list(v_index),
                       v_new_object_id,
					   v_copy_premium_recs
                     );
			   
              end if;---  ObjectType with hieararchy
      
              if v_session_control.gLogging_Full 
              then
              
                  pkg_os_logging.sp_log
                  (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     ' End Duplicating : '
                  );
              
              end if;
		
              ---
              --- Set the parent ID based on the Object Type UTXPRODUCT-316 - Start
              ---		
              if 
                 in_search_objt_type in  (
                                              gObjTypeEntityRole, 
                                              gObjTypeObjectUsage, 
                                              gObjTypeDocDelPref,
                                              gObjType_CustomerEmail,
                                              gObjType_CustomerPhoneNumber
                                          ) 
              then
               
                     pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_new_object_id, v_listobjectparent_id); 
               else
                 
																			 
                     pkg_os_object.sp_object_parent_set(in_session_id, in_transaction_id, v_new_object_id, in_mstr_cust_id); 
               
               end if;---- Set the parent ID based on the Object Type UTXPRODUCT-316 - End
																			  
																  
												  
              if in_search_objt_type = gObjType_CustomerEntity then --Updated under UTXPRODUCT-387 - Start
              --SET primary ref
              pkg_os_object_io.sp_object_bv_set(in_session_id,
																
																	
															
																								
															  
                                                in_transaction_id,
                                                v_new_object_id,
                                                gbv_CustEntityPrimaryAddress,
														 
                                                pkg_os_object_search.fn_object_with_attribute_get
                                                                    (in_session_id,
                                                                     in_transaction_id,
                                                                     in_mstr_cust_id,
                                                                     pkg_base_customer.gObjTypeCustomerAddress,
                                                                     gbv_GenObjUTemplateObjId,
															   
						
															
																
																	
																	  
                                                                     pkg_os_object_io.fn_object_bv_path_get
                                                                      (in_session_id,
                                                                       in_transaction_id,
                                                                       in_search_object_list(v_index),
                                                                       '29254014.26725601')
                                                                       --false ---(Asha based on Sangeeta's Test Case
                                                                     )
                                                 );
               end if;        --Updated under UTXPRODUCT-387 - end                                    

                if v_session_control.gLogging_Full 
                then
                
                      pkg_os_logging.sp_log
                      (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
																		   
																					
															 
																 
                         ' Create new object with object : '                       || in_search_object_list(v_index) ||
                         ' Created object under Customer with UTemplate ID : '     || v_new_object_id ||
                         ' Updated UTemplate ID of child of PolicyCutsmer with : ' || v_new_object_id
                       );
                
                end if;
		
         end if;--- Found a instance under MasterCustomer
    
																  
																		 
																											
																												 
																											   
																																		 
																														
																																					
																																						
      v_index := in_search_object_list.next(v_index);
    
    end loop;
  
  end sp_set_utemplate;
--OSPRODUCT-5158 End

----------------------------------------------------------------------------------------------------------------------------------- 
    procedure sp_post_etl_objlocked_check
    (
																	   
	    in_session_id       in object.object_id%type,
																
																	   
         in_transaction_id   in object.object_id%type,
         in_object_id        in object.object_id%type,
    	    io_action_outcome_id  in out  outcome.outcome_id%type
    )
    is
    
															
																
																	   
        v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
        v_procedure_name constant system_log.program_name%type := 'sp_post_etl_objlocked_check';

	   v_async_job_definition_id async_job_definition.async_job_definition_id%type;
	   v_schedule_attempts	   async_job_status.schedule_attempts%type;
	   v_max_reschedule_attempts async_job_definition.max_reschedule_attempts%type;
	   v_async_batch_type_id	    async_job_definition.batch_type_id%type;
															 
																		  
															  
											  
									
														
															
																
																	 
																				
														 
															 
																		  
															  
											  
        
    begin
        if in_object_id is null then return;
        end if;
	   --post etl completion, during DM update, if the object is found locked then check the scheduled attempt.
	   -- if max attempt are reached, exit the job.
	   
	   begin
		   select
			   nvl(schedule_attempts, 1),
			   async_job_definition_id,
			   async_batch_type_id
		   into
			   v_schedule_attempts,
			   v_async_job_definition_id,
			   v_async_batch_type_id
		   from
			   async_job_status
		   where
			   job_object_id = in_object_id
		   and
			   executor_user_session_id = in_session_id;

		   begin
			   --job_definition_id may not be available in the above table for the running job so get the value using batch_type_id
		   select
			   nvl(max(max_reschedule_attempts), 1)
		   into
			   v_max_reschedule_attempts
		   from
			   async_job_definition
		   where
			   batch_type_id = v_async_batch_type_id;
		   exception when no_data_found
		   then
			 pkg_os_logging.sp_log_error( in_session_id, 
							  in_transaction_id, 
							  v_procedure_name, 
							  'Unable to find job_definition_id for object_id: ' 
							  || in_object_id || ' v_async_job_definition_id:' || v_async_job_definition_id
							  ||' v_schedule_attempts:'||v_schedule_attempts);
							  
			 v_max_reschedule_attempts := v_schedule_attempts;
		   end;
	    --OSPRODUCT-21207
	    exception when no_data_found
	    then
		   pkg_os_logging.sp_log(in_session_id,
								 in_transaction_id,
								 v_procedure_name,
								 'Warning - Unable to find record in async_job_status for job_object_id: ' ||
								 in_object_id ||
								 ' executor_user_session_id:' ||
								 in_session_id);
		  --in case of exception set max attempt to scheduled attempt to avoid loop
		  v_schedule_attempts := nvl(v_schedule_attempts, 1);
		  v_max_reschedule_attempts := v_schedule_attempts;
	    end;

	   if v_schedule_attempts >= v_max_reschedule_attempts
	   then
		 io_action_outcome_id := pkg_os_constant.gOutcome_OK;
	   else
		 --io_action_outcome_id := pkg_os_constant.gOutcome_OK;
		 io_action_outcome_id := pkg_os_constant.gOutcome_ObjectLocked;
	   end if;
        
    end sp_post_etl_objlocked_check;

-----------------------------------------------------------------------------------------------------------------------------------

    procedure sp_post_etl_complete( in_session_id       in object.object_id%type,
                                    in_transaction_id   in object.object_id%type,
                                    in_object_id        in object.object_id%type,
							 		io_action_outcome_id in out outcome.outcome_id%type)
    is
    
        v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
        v_procedure_name constant system_log.program_name%type := 'sp_etl_process_complete';
    
        v_object_type_id         object_type.object_type_id%type;
        v_object_type_row        pkg_os_object_type.r_object_type;
        v_bv_row				 pkg_os_bv.getBusinessVariableList%rowtype;
    
        v_dm_name                varchar2(50);
        v_dm_pk_name             varchar2(50);
        v_dm_id                  object_datamart.datamart_id%type;
    
        v_dmc_column_physical_name     object_datamart_column.column_physical_name%type;
    
        v_cursor                 number;
        v_row_count              number;
        update_statement         varchar2(500);
        v_date_val               date;
        v_bv_value               object_bv_value.business_variable_value%type;
	    v_lock_status		     char;
        
    begin

        if in_object_id is null
		then
		io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
		return;
        end if;
	  
		  
																				   
	  
											   
        
        v_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_object_id );
												  
												 
														 
        
        if v_object_type_id is null or v_object_type_id = gObjectType_PolicyTransactionStat
        then 
            update_statement := 'UPDATE DRAGON_TRANSACTION_STATS SET BI_PROCESS_DATE=SYSDATE WHERE TRANSACTION_STAT_ID=:1';
            execute immediate update_statement using in_object_id;

			io_action_outcome_id := pkg_os_constant.gOutcome_OK;

            return;
        end if;
																		   
																			   
																							 
															  
													   
															 
													
													   
														
        
        v_bv_row := pkg_os_bv.fn_business_variable_row( gbv_BiProcessDate );
        v_bv_value := to_char(sysdate + TO_DSINTERVAL('0 00:00:02'), pkg_os_constant.DragonDateFormatDefault);
																				
																 
																	  
			
															   
																   
																				
																  
			   
	  
											   
        
	   --lock object
	   pkg_os_lock.sp_set_object_lock
          (
               in_session_id		=> in_session_id,
               in_transaction_id	=> in_transaction_id,
               in_object_id		=> in_object_id,
               out_lock_status	=> v_lock_status
          );
		--if the object is already, return outcome as ObjectLocked
		--else proceed.
          if v_lock_status = 'F'
          then
			sp_post_etl_objlocked_check
		     (
			    in_session_id        => in_session_id,
			    in_transaction_id    => in_transaction_id,
			    in_object_id         => in_object_id,
			    io_action_outcome_id => io_action_outcome_id
		     );
			return;
          end if;
	   
	   --
		--Update BI Process date BV with current date
        pkg_os_object_io.sp_object_bv_set 
        (
              in_session_id,
              in_transaction_id,
              in_object_id,
              gbv_BiProcessDate,
              v_bv_value
        ); 
		
        --Fetch the datamart information
        v_object_type_row   := pkg_os_object_type.fn_object_type_row(in_session_id, in_transaction_id, v_object_type_id );
        
        v_dm_name           := v_object_type_row.datamart_table_name;
        v_dm_pk_name        := v_object_type_row.datamart_table_pk_name;
        v_dm_id             := v_object_type_row.datamart_id;
    
        if v_dm_id is null 
        then
            pkg_os_logging.sp_log_error( in_session_id, 
                                in_transaction_id, 
                                v_procedure_name, 
                                'Datamart does not exist for this object type. ObjectID:' 
                                || in_object_id || ' ObjectType:' || v_object_type_id);
    
			io_action_outcome_id := pkg_os_constant.gOutcome_OK;

            return;
        end if;
    
        begin
            -- Fetch the "BI Process Date" column for this datamart
            select column_physical_name
                into v_dmc_column_physical_name
            from
                object_datamart_column
            where
                object_datamart_id = v_dm_id
                and REGEXP_LIKE (column_bv_path, '^' || gbv_BiProcessDate || '\D.*$');
        exception
            when others then
		
                pkg_os_logging.sp_log_error( in_session_id, 
                                            in_transaction_id, 
                                            v_procedure_name, 
                                            'Could not locate column BI Process Date, Failed to update datamart.');
                return;
            
        end;
        
        update_statement :=  'update ' || v_dm_name 
                            || '  set ' || v_dmc_column_physical_name || ' = '
                            || ':' || lower(v_dmc_column_physical_name) 
                            || ' WHERE ' || v_dm_pk_name || '= :' || lower(v_dm_pk_name) ;
			
																				   
														   
														
															
																		 
																				   
														   
														   
											  
																 
							
															
																
															  
																			 
																					
															 
																 
																			  
																  
												  
																	
												
																 
																	
																  
																
																									
																  
																	  
																	
																		
															 
																						  
																   
																	   
																					
																		
														 
        
        v_date_val := to_date(v_bv_value, pkg_os_constant.DragonDateFormatDefault);
    
        if v_session_control.gLogging_Full
																
															  
																	  
																					
															 
																 
																			  
																  
													
	  
        then
												
					   
           pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updating Bi Process Date to Datamart:' || update_statement || ', ID:' || in_object_id
                || ', val:' || v_date_val
           );
        end if;
																																		 
																														
																																					
																																						
																																									 
																																						  
																																			 
																								 
													
					   
																
																	
																  
																			   
																						
																 
																	 
																				  
																	  
													  
							 
																
																	
																  
																			   
																						
																 
																	 
																				  
																	  
													  
											
																  
																	  
																	
																			   
																						  
																   
																	   
																					
																		
														
        
        v_cursor := dbms_sql.open_cursor;
	  
														
															
														  
																				   
														   
														
															
																		 
																				   
														   
														   
											  
																 
							
															
																
															  
																			 
																					
															 
																 
																			  
																  
												  
																	
												
																 
																	
																  
																
																									
																  
																	  
																	
																		
															 
																						  
																   
																	   
																					
																		
														 
        
        -- Parse the update statement
        dbms_sql.parse (v_cursor, update_statement, dbms_sql.native);
															
																
															  
																	  
																					
															 
																 
																			  
																  
													
	  
															 
												
					   
														  
															  
															
																		 
																											
																												 
																											   
																																		 
																														
																																					
																																						
																																									 
																																						  
																																			 
																								 
													
					   
																
																	
																  
																			   
																						
																 
																	 
																				  
																	  
													  
							 
																
																	
																  
																			   
																						
																 
																	 
																				  
																	  
													  
											
																  
																	  
																	
																			   
																						  
																   
																	   
																					
																		
														
        
        dbms_sql.bind_variable (v_cursor, lower(v_dmc_column_physical_name), v_date_val);
        dbms_sql.bind_variable (v_cursor, lower(v_dm_pk_name), in_object_id);
	
													 
    
        v_row_count := dbms_sql.execute(v_cursor);
        dbms_sql.close_cursor(v_cursor);
        
	   --unlock object
		if v_lock_status = 'T'
		then
			pkg_os_lock.sp_clear_object_lock
			(
				in_session_id		=> in_session_id,
				in_transaction_id	=> in_transaction_id,
												 
																	  
																 
																						
				in_object_id		=> in_object_id
			);
			io_action_outcome_id := pkg_os_constant.gOutcome_OK;
		else
			io_action_outcome_id := pkg_os_constant.gOutcome_OK;
			 
	
													 
	
		end if;
	   
	   --

    end sp_post_etl_complete;
-----------------------------------------------------------------------------------------------------------------------------------  
  procedure sp_post_bi_etl_complete(in_session_id        in object.object_id%type,
                                 in_transaction_id    in object.object_id%type,
                                 in_object_id         in object.object_id%type,
                                 io_action_outcome_id in out outcome.outcome_id%type) is
  begin

	--update the object event records on successful completion of the ETL
	update
		bi_event_subscription_log
	set
		status = 3
	where
		object_id = in_object_id
	and
		--objects older than current time - 10 seconds (DAP buffer)
		time_stamp <= sysdate-10/86400;

	--return outcome
	io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  end sp_post_bi_etl_complete;

-----------------------------------------------------------------------------------------------------------------------------------
--UTPRODUCT-2807 start
procedure sp_add_address_delpref
(
	in_session_id      	in dragon_session.user_session_id%type,
	in_transaction_id  	in dragon_transaction.transaction_id%type,
	in_entity_id		in object.object_id%type
) is

																																	 
																					  
																					  
																					  
																							   
  
																													 
																														  
																							
  
																				
																	  
																				
																	  
  
	   
								
			 
		   
																											
												
  
		 
									   
									 
								
								 
									   
								  
							 
										 
													  
	
		   
																															
												   
										
								   
													 
			   
							   
											  
												  
												 
																							   
											   
																
															
														  
													 
		
														   
		  
					   
			 
							 
												  
													  
													 
																									  
												   
																   
												   
																				 
																 
														 
		
  
															
														  
		
															
																	
		   
  
								  

	v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
	v_procedure_name  system_log.program_name%type := '.sp_add_addres_delpref';

	v_policyCustomer_id     		object.object_id%type;
	v_customeraddress_id    		object.object_id%type;
	v_customer_email_id     		object.object_id%type;
	v_usage_email_id        		object.object_id%type;
	v_usage_phone_id        		object.object_id%type;
	v_customer_phone_id     		object.object_id%type;
	v_activity_add_pri_id        	object.object_id%type;
	v_activity_add_mail_id       	object.object_id%type;
	v_activity_add_bill_id       	object.object_id%type;
	v_entity_type_id        		object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id,
                                                                                                     in_transaction_id,
                                                                                                     in_entity_id);
	v_customer_id         		object.object_id%type := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id,
                                                      in_transaction_id,
                                                      in_entity_id
                                                      );
  
                               
begin

	if v_session_control.gLogging_Full 
	then
		pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '......Entity ID: ' ||
                            in_entity_id||
                            '......Entity Type ID: ' ||
                            v_entity_type_id);
  
							  
							  
												  
  
																				
  
							
							
								   
						  
																  
						  
  
	   
  
								
																		
			 
    end if;

	If v_entity_type_id = gObjType_CustomerEntity
	then
   
		v_policyCustomer_id := pkg_os_object.fn_object_parent_get(in_session_id,
                                                          in_transaction_id,
                                                          in_entity_id);
		pkg_os_object.sp_object_create(in_session_id,
                                       in_transaction_id,
                                       gObjType_CustomerAddress,
                                       v_policyCustomer_id,
                                       v_customeraddress_id);
						   
    
														  
    
		--
		-- Set the Reference from Customer Entity to placeholder address
		-- this reference will be used to drive generic add entity and its address page
		--
		pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_ref_associated_address,
                                            v_customeraddress_id);
          --
		-- Set the Reference from Customer Entity to mailing Address
		--                                  
		pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_ref_mailing_address,
                                            v_customeraddress_id);
		--
		-- Set the Reference from Customer Entity to Primary Address
		--
		pkg_os_object_io.sp_object_bv_set(in_session_id,
                                              in_transaction_id,
                                              in_entity_id,
                                              gbv_CustEntityPrimaryAddress,
                                              v_customeraddress_id);
            
                                              
		---
		--- Set the Reference from Customer Entity to Billing Address
		---
		pkg_os_object_io.sp_object_bv_set(in_session_id,
								   in_transaction_id,
								   in_entity_id,
								   gbv_CustEntityBillingAddress,
								   v_customeraddress_id);
                                                
		--
          -- Primary Address Usage objects
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         in_entity_id,
                                         v_activity_add_pri_id);
								 
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
										  
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_PrimAdd);
								    
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_pri_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customeraddress_id);
								    
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            32679946, -- reference primary usage
                                            v_activity_add_pri_id);
                                            
		-- 
          -- Billing Address Usage objects
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         in_entity_id,
                                         v_activity_add_bill_id);
								 
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
										  
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_BillAdd);
								    
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_bill_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customeraddress_id);
								    
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            32680146, -- Reference billing address
                                            v_activity_add_bill_id);
		
		--
    
          -- Mailing Address Usage objects
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         in_entity_id,
                                         v_activity_add_mail_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_MailAdd);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_activity_add_mail_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customeraddress_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_RefActiveMailAddress, --Reference mailing usage
                                            v_activity_add_mail_id);                                    
              
    
			 
		   
  
		 
															 
								 
									   
								   
										 
										
															  
			 
					  
												  
													  
													 
																										   
			   
	  
		
  
															 
																	 
																		 
																	 
  
									 
																   
  
										   
										  
											  
											 
																	  
																		  
													
		   
  
									 
  
    --
    --CustomerEmail Setup
  
									
															 
									   
																		
  
											  
									
  
				   
							   
																		  
																			  
																		  
														  
		
														  
		   
  
    --
    pkg_os_object.sp_object_create(in_session_id,
						   
																																	 
																																	 
						
																							
																							   
																				 
  
																													 
																														  
																			   
  
												 
												 
												 
												 
												 
												 
												 
												 
												 
																											 
																												 
																											 
																													 
																														 
																													 
  
	   
  
										   
										  
											  
											 
																  
																		  
		   
  
													  
	
																			  
																				  
																			  
												   
                                         in_transaction_id,
																			  
												   
													   
                                         gObjType_CustomerEmail,
														 
														   
	
		
																	  
																					 
		
													  
														  
                                         in_entity_id,
                                         v_customer_email_id);
                     
		
																  
		
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_Ref_Active_Email,
                                            v_customer_email_id);

																  
		
													  
														  
													 
																	 
															  
	
		 
																   
      ---
													  
														  
													 
																	 
															  
	
		
									  
		
												   
													   
															 
												  
															
	
													  
														  
															  
														  
																						
																							
																						 
																						  
	
													  
														  
															  
														 
																  
	
													  
														  
															  
															
															  
	
													  
														  
													 
																			
															   
	
		
									  
		
												   
													   
															 
												  
															 
	
													  
														  
															   
														  
																						
																							
																						 
																						  
	
													  
														  
															   
														 
																  
	
													  
														  
															   
															
															  
	
													  
														  
													 
																			  
																
	
		
	
									  
		
												   
													   
															 
												  
															 
													  
														  
															   
														  
																						
																							
																						 
																						  
													  
														  
															   
														 
																  
													  
														  
															   
															
															  
													  
														  
													 
																						   
																
	
		
						   
		
												   
													   
															
												  
														  
	
													  
														  
													 
															 
															 
	
      --- Create the email object in GenericCreated state(OSPRODUCT-25252)
      ---	  
													  
														  
													 
																	 
															  
	
		
									  
		
												   
													   
															 
												  
															
	
													  
														  
															  
														  
																						
																							
																						 
																						  
	
													  
														  
															  
														 
																  
	
													  
														  
															  
															
															  
	
													  
														  
													 
																			
															   
	
		
									  
		
												   
													   
															 
												  
															 
	
													  
														  
															   
														  
																						
																							
																						 
																						  
	
													  
														  
															   
														 
																  
	
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
															   
															
															  
	
													  
														  
													 
																			  
																
	
		
	
									  
		
												   
													   
															 
												  
															 
													  
														  
															   
														  
																						
																							
																						 
																						  
													  
														  
															   
														 
																  
													  
														  
															   
															
															  
													  
														  
													 
																						   
																
	
		
						   
		
												   
													   
															
												  
														  
	
													  
														  
													 
															 
															 
	
																												  
													  
														  
                                        v_customer_email_id,
                                        pkg_os_constant_bv.gbv_GenObjObjectState,
                                        pkg_os_constant_enum.gObjState_Created);

		 
										  
		 
													  
														  
															
												 
											   
          --
          -- Email Address Usage
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         in_entity_id,
                                         v_usage_email_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_Email);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_email_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customer_email_id);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_RefActivePrimEmailAdd,
                                            v_usage_email_id);

      --
							
		
												   
													   
															 
												  
													   
													  
														  
														 
														  
																						
																							
																						 
																						  
													  
														  
														 
														 
																
	
													  
														  
														 
															
															 
	
													  
														  
													 
																  
														  
	
		
      --CustomerPhoneNumber Setup
      --
      pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_CustomerPhoneNumber,
                                         in_entity_id,
                                         v_customer_phone_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_Ref_Active_Phone,
                                            v_customer_phone_id);

      ---
      --- Create the phone object in GenericCreated state (OSPRODUCT-25252)
      ---	  
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
													 
															 
															 
	
																												  
													  
														  
                                        v_customer_phone_id,
                                        pkg_os_constant_bv.gbv_GenObjObjectState,
                                        pkg_os_constant_enum.gObjState_Created);
										
										   
		 
														
		 
													  
														  
															
												 
											   
          --
          -- Phone number Usage
          --
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_ObjectActivity,
                                         in_entity_id,
                                         v_usage_phone_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_EffectiveDate,
                                            to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                              in_transaction_id,
                                                                              v_customer_id),
                                                    pkg_os_constant.DragonDateFormatDefault));
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_ActivityType,
                                            genum_ActObjType_Phone);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_usage_phone_id,
                                            gbv_Ref_LogsUsageOf,
                                            v_customer_phone_id);
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            in_entity_id,
                                            gbv_RefActivePrimPhnNmbr,
                                            v_usage_phone_id);
                      
                       
  end if; 
  
							 

					  
																																					 
				  
																																					   
	
		   
								  
	
			
																												  
	
				
					  
	
										  
												
										   
											 
	
																																					   

end sp_add_address_delpref;
                 
                 
--UTPRODUCT-2807 end
---------------------------------------------------------------------------------------------------------------------------------------------------
--UTPRODUCT-1953
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--	%NAME
													 
									  
														   
											  
																															  
																																   
																		 
--		sp_quote_letter_versioning
								 
	   
--
--	%USAGE
--		Creates QuoteLetterTransaction(qlt) sets reference from qlt to ptp  and most recent qlt and sets filing bv 
																			  
																						  
  
														
  
																	  
																		  
																			 
																								
																			   
  
										   
	
										  
											  
											 
																   
														 
	
		   
										   
															 
	
													
	  
																			   
	  
														 
																					  
																						  
																							 
																																 
	  
											   
		
											  
												  
												 
																	   
															
		
			   
						 
												
				  
		
														
												 
		  
												
													
												   
																		 
															  
		  
				 
														  
															  
																 
																		
																									   
															   
																   
																	  
																
			   
	  
																					   
	  
			   
	
		   
  
					 
												 
													 
																   
												   
														 
  
									
													
														
														   
																				 
										 
  
																
																	
																  
																							 
  
													
														
														   
																				
												
  
					  
																   
																	   
															  
																							
  
					  
													
														
														   
																			
												   
  
													
														
													  
																 
															
  
												 
  
		   
					
												   
	
	  
					  
																																	
				  
																																					   
	
		   
								   
	
			
					  
--
																																	
				  
																																					   
	
		   
								   
	
			
					  
	
--	%ALGORITHM
--		Not Specified.
--
--	%PARAM	in_session_id			Session ID
--	%PARAM	in_transaction_id		Transaction ID
--	%PARAM	in_quote_trx_id			Object ID
--	%PARAM	in_object_type			Object Type
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_quote_letter_versioning 
			(
				in_session_id object.object_id%type,
				in_transaction_id object.object_id%type,
				in_quote_trx_id object.object_id%type,
				io_outcome_id in out outcome.outcome_id%type
			)
as
v_old_mostrecent_qtl 				object.object_id%type;
																							
  
v_new_mostrecent_qtl 				object.object_id%type;
v_ptp_id              				object.object_id%type;
v_filing_id              			pd_filing.pd_filing_id%type;
								  
								  
									   
																														  
																															   
  
	   
  
--v_qlt_child_objectdocument 			object.object_id%type;
v_object_document_id				object.object_id%type;
v_objectdocument_renstatus 			number;
v_objectdocument_list                   pkg_os_object.t_object_list;
								  
v_object_document_index     		     number := null;
v_session_control	                    pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
v_procedure_name 		               constant 	system_log.program_name%type 			:= pkg_name||'sp_quote_letter_versioning';
v_datamart_tf          			           char(1) := 'T';
begin
	--get 32978448QuoteTransaction - xReference - _Reference_Most Recent QuoteLetterTransaction
	v_old_mostrecent_qtl := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_quote_trx_id,gbv_QTrxRefMostRecentQLTrx);
	
     -- Get the children objectdocument of old QTL object
																		
  
										   
	
										  
											  
																
															  
																	
														 
												  
    
										  
											  
																
															  
																	
														 
												  
	
		   
													 
  
													 
  
											
	pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          v_old_mostrecent_qtl,
														  PKG_OS_CONSTANT.gobjType_ObjectDocument,
                                                          v_objectdocument_list);

															   
																 
	
												   
																				
																					
																								
																											   
	
      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Found objectdocument Count:' ||
                              v_objectdocument_list.count);

      end if;
      if v_objectdocument_list.count > 0 
      then
			v_object_document_index := v_objectdocument_list.first;
                    
         while v_object_document_index is not null
         loop
                    
            v_object_document_id := v_objectdocument_list(v_object_document_index);
                    
            -- Get the printing status of the object document
			v_objectdocument_renstatus := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_document_id,gbv_ObjDoc_Processingstatus); -- document printing status
					  
				 if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... v_objectdocument_renstatus:' ||
                              v_objectdocument_renstatus);

                    end if;								
			-- if it is error 													
			if (v_objectdocument_renstatus  = 4) then -- error
					
				  -- set it to 	Recovery disabled - Data changed
				 if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... v_objectdocument_renstatus:' ||
                              v_objectdocument_renstatus);

                    end if;
                      pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_object_document_id,gbv_ObjDoc_Processingstatus ,6);-- set the status to Recovery disabled Data changed
                            pkg_os_datamart.sp_datamart_update_row
                              (
                               in_session_id,
                               in_transaction_id,
                               v_object_document_id,
                              v_datamart_tf
                           );
			end if;		
                    
            v_object_document_index := v_objectdocument_list.next(v_object_document_index);
                    
         end loop;

			
	  end if;
			
	-- create new qlt
    pkg_os_object.sp_object_create(in_session_id, in_transaction_id,gObjType_QuoteLetterTransaction,in_quote_trx_id,v_new_mostrecent_qtl);
	
	--set the transaction type to NB
	pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_new_mostrecent_qtl,pkg_db_functions.gbv_PolicyTransactionType,9);
    
	v_ptp_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_quote_trx_id,pkg_db_constant.gbv_PolicyTrxRefCoverages);
																			
																	   
																		 
																		
																									  
															   
																 
    
	pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_new_mostrecent_qtl,pkg_db_constant.gbv_PolicyTrxRefCoverages,v_ptp_id);
																			
																	   
																		 
																		
																									  
															   
																 
    
	-- get the filling
	v_filing_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,v_ptp_id,pkg_os_constant_bv.gbv_GenObjFilingID);
    
	-- set the filling 
	pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_new_mostrecent_qtl,Pkg_Os_Constant_Bv.gbv_GenObjFilingID,v_filing_id);


    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,in_quote_trx_id,gbv_QTrxRefMostRecentQLTrx,v_new_mostrecent_qtl);
 
       
	
																							 
																											
																			 
																				 
																							 
																		 
	  
											   
												  
																	
													   
																
														  
																		   
												
															   
														
		
			   
	  
													   
																						
	  
										
														  
		
													  
        
	io_outcome_id := pkg_os_constant.gOutcome_OK;

 exception when others then
   io_outcome_id := pkg_os_constant.gOutcome_OK;

														 
																			 
			   
	  
															 
	  
			   
	
end;
--UTPRODUCT-1953 end 
----------------------------------------------------------------------------------------------------------------------------------
--UTPRODUCT-1764
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--	%NAME
--		sp_object_seq_endorsement_x
--
--	%USAGE
--		Not Specified.
--
--	%ALGORITHM
--		Not Specified.
--
		
--	%PARAM	in_session_id			Session ID
--	%PARAM	in_transaction_id		Transaction ID
--	%PARAM	in_object_id			Object ID
--	%PARAM	in_object_type			Object Type
															  
														 
																			 
			   
	  
															 
	  
			   
	
		   
  
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_seq_endorsement_x
(
											
															  
																		
												  
  
												
												  
							 
  
	in_session_id		in 	object.object_id%type,
	in_transaction_id	in 	object.object_id%type,
	in_object_id		in 	object.object_id%type,
	in_object_type		in 	object_type.object_type_id%type
)
is

	v_procedure_name 		constant 	system_log.program_name%type 			:= pkg_name||'sp_object_seq_endorsement_x';

	v_object_list			pkg_os_object.t_object_list 					:= pkg_os_object.gnull_object_list;
														  
  
										  
  
										 
	
												  
	
																		   
																			   
																						   
																										  
	
																	   
																		   
	v_object_index			number ;
	v_sequence_number		number ;
     v_template_id            number;
	  
											
												
																  
													  
	 v_object_template_id            number;
  v_next_sequence_number  number                  := 0;
    v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin
	
											 
	  
											
												
																  
													  
															  
																			
	  
			 
	
																				
    v_object_template_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_object_id,26725501);
	
														
															
																		
																					  
																  
	  
											   
		
											  
												  
																	
													   
																
														   
														
		
			   
	  
								   
															 
	  
			 
	
														   
	
			 
  
								  

	if v_session_control.gLogging_Full
	then
		   
									  
	
			
					  
	
				
					  
	
										  
												
										 
	
																																					   

																					  
																					  
																						 
  
																		 
																							   
																													 
																														  
  
	   
  
										   
	
    pkg_os_logging.sp_log
											  
																
															 
	
		   
  
																						 
  
							
  
								 
    (
      in_session_id,
      in_transaction_id,
      pkg_name
      ||':'
      ||v_procedure_name,
      'object id is '
      ||in_object_id
      ||', object type is '
      ||in_object_type
	 ||', object template id is '
      ||v_object_template_id
    );
	  
  
									 
																																					   

	end if;
	--	Get the children objects of the specified type
		   
								  
	
			
																							   
	
				
					  
	
										  
												
										 
										   
																																					   

																				 
																				 
																				 
																								 
																		 
																						   
																														  
																															   
												 
																		   
																						  
										  
  v_object_list := pkg_os_object.gnull_object_list;
										  
												 
												 
																		
  
	   
										   
	
										  
											  
																
															 
	
		   
								
																		
																			
																	   
																									
  
													 
  
																	   
																		   
																	   
  
									   
																			  
																				  
																			   
																											 
  
  if v_object_template_id is not null
  then
     pkg_os_object_Search.sp_object_children_of_type_get
       (
         in_session_id,
         in_transaction_id,
         v_object_template_id,
         in_object_type,
         v_object_list,
         pkg_os_constant_bv.gbv_GenObjInstanceNumber,
               true,
               false
       );

	  v_object_index := v_object_list.last;
	  v_next_sequence_number := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_object_list(v_object_index),pkg_os_constant_bv.gbv_GenObjSequenceNumber);
	  
	  if v_session_control.gLogging_Full
         then

           pkg_os_logging.sp_log
           (
             in_session_id,
             in_transaction_id,
             pkg_name
             ||':'
             ||v_procedure_name,
             'Highest sequence number from previous transaction is: '
             ||v_next_sequence_number
           );

         end if;	   
		                     
  else

	  pkg_os_object_Search.sp_object_children_of_type_get
	  (
	    in_session_id,
	    in_transaction_id,
	    in_object_id,
	    in_object_type,
	    v_object_list,
	    pkg_os_constant_bv.gbv_GenObjInstanceNumber,
			true,
			false
	  );

	  --  Iterate over the list of children objects
	  --  and find the largest Generic Sequence Number

	  v_object_index := v_object_list.first;

	  while v_object_index is not null loop

	    --  Get the object's Generic Sequence Number

	    v_sequence_number := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_object_list(v_object_index),pkg_os_constant_bv.gbv_GenObjSequenceNumber);
			v_template_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_object_list(v_object_index),26725501);

	    if v_session_control.gLogging_Full
	    then

		 pkg_os_logging.sp_log
		 (
		   in_session_id,
		   in_transaction_id,
		   pkg_name
		   ||':'
		   ||v_procedure_name,
		   'finding object id '
		   ||v_object_list(v_object_index)
		   ||', sequence number is '
		   ||v_sequence_number
					||', template id is '
					||v_template_id
					||'v_next_sequence_number is:'
					||v_next_sequence_number
		 );

	    end if;

	    --  If the object's sequence number is not null
	    --  and it is greater than the highwater mark, then set it as the highwater mark

	    if  v_template_id is not null
		 and
		 v_sequence_number > v_next_sequence_number
	    then

																																					   
	
		   
		 v_next_sequence_number := v_sequence_number;
	               
				pkg_os_logging.sp_log
		 (
		   in_session_id,
		   in_transaction_id,
		   pkg_name
		   ||':'
		   ||v_procedure_name,
		   'Inside template null block:'
					||'v_next_sequence_number : '
					||v_next_sequence_number
					||' v_sequence_number: '
					||v_sequence_number
		 );
	    end if;
	        
	    v_object_index := v_object_list.next(v_object_index);

	  end loop;
																				 
																				 
																								 
																		 
																						   
																														  
																															   
												 
																		   
																						  
										  
																						  
										  
												 
												 
																		
  
  end if;

	--	Increment the next value

	v_next_sequence_number := v_next_sequence_number + 1;
     
     
      pkg_os_logging.sp_log
			(
				in_session_id,
				in_transaction_id,
				pkg_name
				||':'
				||v_procedure_name,
				' Final value of v_next_sequence_number : '
                    ||v_next_sequence_number
			);
		
	--	Iterate over the list of children objects
	--	and assign the next  system sequence number
	--	to the next new object
     
     v_object_list	:= pkg_os_object.gnull_object_list;

	pkg_os_object_Search.sp_object_children_of_type_get
	(
		in_session_id,
		in_transaction_id,
		in_object_id,
		in_object_type,
		v_object_list,
		pkg_os_constant_bv.gbv_GenObjInstanceNumber
        
	);

	v_object_index := v_object_list.first;

	while v_object_index is not null loop

		--	Get the object's  system sequence number

		v_sequence_number := pkg_os_object_io.fn_object_bv_get
		(
			in_session_id,
			in_transaction_id,
			v_object_list(v_object_index),
			pkg_os_constant_bv.gbv_GenObjSequenceNumber
		);

           v_template_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_object_list(v_object_index),26725501);
		if v_session_control.gLogging_Full
		then

			pkg_os_logging.sp_log
			(
				in_session_id,
				in_transaction_id,
				pkg_name
				||':'
				||v_procedure_name,
				'checking object id '
				||v_object_list(v_object_index)
				||', sequence number is '
				||v_sequence_number
			);

		end if;

		--	If the object's sequence number is null, then set it to the next value
		if v_template_id is null
		then
               
			pkg_os_object_io.sp_object_bv_set
			(
				in_session_id,
				in_transaction_id,
				v_object_list(v_object_index),
				pkg_os_constant_bv.gbv_GenObjSequenceNumber,
				v_next_sequence_number
			);

			if v_session_control.gLogging_Full
			then

				pkg_os_logging.sp_log
				(
					in_session_id,
					in_transaction_id,
					pkg_name
					||':'
					||v_procedure_name,
					'setting object id '
					||v_object_list(v_object_index)
					||',  sequence number to '
					||v_next_sequence_number
				);

			end if;

			--	Increment the next value
			v_next_sequence_number := v_next_sequence_number + 1;

		end if;

		v_object_index := v_object_list.next(v_object_index);

	end loop;

end sp_object_seq_endorsement_x;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--	%NAME
--		sp_object_sequence_endorsement
--
--	%USAGE
--		Not Specified.
--
--	%ALGORITHM
--		Not Specified.
--
--	%PARAM	in_session_id			Session ID
--	%PARAM	in_transaction_id		Transaction ID
--	%PARAM	in_object_id			Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_sequence_endorsement
(
	in_session_id		in 		object.object_id%type,
	in_transaction_id	in 		object.object_id%type,
	in_object_id		in 		object.object_id%type
)
is

	v_procedure_name 		constant system_log.program_name%type 			 := pkg_name||'sp_object_sequence_endorsement';
     v_session_control	     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

	if v_session_control.gLogging_Full
	then

		pkg_os_logging.sp_log
		(
			in_session_id,
			in_transaction_id,
			pkg_name
			||':'
			||v_procedure_name,
			'object id is '
			||in_object_id
		);

	end if;

	--	Add Generic Sequence  numbers to new objects created during endorsement processing

	--	Call for  BOP product

	/*sp_object_seq_endorsement_x
	(
		in_session_id,
		in_transaction_id,
		in_object_id,
          pkg_os_constant.gobjType_PoliPAVehiCoverage
	);
	*/

end sp_object_sequence_endorsement;
-----------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--	%NAME
--		sp_object_get_the_sequence
--
--	%USAGE
--		Based on the transaction type set the sequence of Building and location objects for BOP 
--
--	%ALGORITHM
--		Not Specified.
--
--	%PARAM	in_session_id			Session ID
--	%PARAM	in_transaction_id		Transaction ID
--	%PARAM	in_object_id			Object ID
--	%PARAM	io_action_outcome_id	Outcome 
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_object_get_sequence
(
in_session_id			in 			object.object_id%type,
in_transaction_id		in 			object.object_id%type,
in_object_id			in 			object.object_id%type,
io_action_outcome_id 	in out nocopy outcome.outcome_id%type
)
is
     v_procedure_name 			constant system_log.program_name%type 	:= pkg_name||'sp_object_get_the_sequence';
     v_session_control	     	pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
	 v_policyTrx_id 		 	object.object_id%type;
	 in_transaction_type_id   	 pd_transaction_type.pd_transaction_type_id%type;
	 v_location_list        	 pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_location_index         number := null;
	  v_jurisdiction_list     pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_jurisdiction_index     number := null;
	 v_location_id				 object.object_id%type;
	 v_jurisdiction_id			object.object_id%type;
	 v_policy_product      		object_bv_value.business_variable_value%type;

begin
if v_session_control.gLogging_Full
	then

		pkg_os_logging.sp_log
		(
			in_session_id,
			in_transaction_id,
			pkg_name
			||':'
			||v_procedure_name,
			'object id is '
			||in_object_id
		);

	end if;
-- Get the Policy product id
    v_policy_product      := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_object_id, PKG_PC_SUBMISSION.gbv_PolicyDefinitionID);

--Get the parent(pt) of the in_object_id (ptp id)

	 v_policyTrx_id            := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_object_id );

-- Get the transaction type from PT
	 in_transaction_type_id  :=  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_policyTrx_id, PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxType );

-- if transaction type is NB , Rewrite,Renewal


    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... product id: ' ||
                            v_policy_product ||
                            '... Policy Transaction Id: ' ||
                            v_policyTrx_id ||
							'... transaction type id: '||
													
		   
  
										
  
																		  
																	  
																	 
								  
										
	
											 
	  
											
												
											   
															
							in_transaction_type_id);
			 
	
																	 
	
																		
																			
																	   
																					
																		   
	
										
	
												
	
								 
	
											   
												  
	  
														   
	  
											   
		
											  
												  
												 
																		   
			   
	  
																		
	  
																	
																		
																	
																								
																								   
	  
											   
		
											  
												  
												 
																 
											   
			   
																   
			   
																
																		
																			
																	   
																						
																			   
	
											
	
														
	
									 
	
												   
	  
														  
	  
																	   
	  
											   
		
											  
												  
												 
																 
												   
			   
	  
																			 
																	
																		
																		
																								
																								   
	  
											   
		
											  
												  
												 
																		
												   
			   
																			   
			   
	
												
	
								   
														
	
											 
	  
											
												
											   
															   
													  
      end if;

  -- if (v_policy_product = 102 ) then

   if in_transaction_type_id in
                         (
                              pkg_os_constant.gPolicyTran_NewBusiness,
                              pkg_os_constant.gPolicyTran_Renewal,
                              pkg_os_constant.gPolicyTran_Rewrite

                         )
   then



			 if v_session_control.gLogging_Full then

				pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... transaction type id: '||
							in_transaction_type_id);
			end if;

			--  Get all the objects of type CustomerLocation under this PTP

				pkg_os_object_search.sp_object_children_of_type_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id,
                                        gObjType_CustomerLocation,
                                        v_location_list
                                    );

		   -- go to the first location object

		   v_location_index  :=  v_location_list.first;

		   -- for each Location object

          while ( v_location_index  is not null)
          loop
				 -- Get CustomerLocation from Location list

				 v_location_id := v_location_list(v_location_index);


				  if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... For location id : '||
							v_location_id);
				end if;


				 -- Numerate CustomerBulding objects under given CustomerLocation

				 pkg_pc_functions.sp_update_objects_numeration
					(
			             in_session_id,in_transaction_id,
			             v_location_id,
			             pkg_os_constant.gObjType_CustomerBuilding,
			             pkg_os_constant_bv.gbv_GenObjSequenceNumber
			        );

					 if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... Done with location id : '||
							v_location_id);
				end if;
						v_location_index := v_location_list.next(v_location_index);
		end loop;
			--	Get all the objects of type jurisdiction under this PTP
				pkg_os_object_search.sp_object_children_of_type_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id,
                                        gObjType_CustomerJurisdiction,
                                        v_jurisdiction_list
                                    );

				 -- go to the first jurisdiction object

				v_jurisdiction_index  :=  v_jurisdiction_list.first;

		 -- for each jurisdiction object

          while ( v_jurisdiction_index is not null)
          loop


			 -- Get Customerjurisdiction from jurisdiction list

					v_jurisdiction_id := v_jurisdiction_list(v_jurisdiction_index);

			  if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... For v_jurisdiction_id : '||
							v_jurisdiction_id);
				end if;


			-- Numerate CustomerLocation objects under given CustomerJurisidction
						 pkg_pc_functions.sp_update_objects_numeration
							(
								in_session_id,
								in_transaction_id,
								v_jurisdiction_id,
								pkg_os_constant.gObjType_CustomerLocation,
								pkg_os_constant_bv.gbv_GenObjSequenceNumber
							);


				if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... Done with  v_jurisdiction_id : '||
							v_jurisdiction_id);
				end if;
					v_jurisdiction_index := v_jurisdiction_list.next(v_jurisdiction_index);
			end loop;




-- else if transaction type is Endorsement

	elsif in_transaction_type_id in (pkg_os_constant.gPolicyTran_Endorsement) then

			if v_session_control.gLogging_Full then

				pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... transaction type idEnd: '||
							in_transaction_type_id);
			end if;


		-- do the following
		--  Get all the objects of type Location under this PTP

				pkg_os_object_search.sp_object_children_of_type_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id,
                                        gObjType_CustomerLocation,
                                        v_location_list
                                    );

		   -- go to the first location object

		   v_location_index  :=  v_location_list.first;

		   -- for each Location object

          while ( v_location_index  is not null)
          loop
				 -- Get CustomerLocation from Location list

				 v_location_id := v_location_list(v_location_index);

				  if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... For location idE : '||
							v_location_id);
				end if;


				 -- Numerate CustomerBulding objects under given CustomerLocation

					sp_object_seq_endorsement_x
					(
							in_session_id,
							in_transaction_id,
							v_Location_id,
							pkg_os_constant.gObjType_CustomerBuilding
					);



					 if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... Done with location idE : '||
							v_location_id);
				end if;

						v_location_index := v_location_list.next(v_location_index);
		end loop;
			--	Get all the objects of type jurisdiction under this PTP
				pkg_os_object_search.sp_object_children_of_type_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id,
                                        gObjType_CustomerJurisdiction,
                                        v_jurisdiction_list
                                    );

				 -- go to the first jurisdiction object

				v_jurisdiction_index  :=  v_jurisdiction_list.first;

		 -- for each jurisdiction object

          while ( v_jurisdiction_index is not null)
          loop


			 -- Get Customerjurisdiction from jurisdiction list

					v_jurisdiction_id := v_jurisdiction_list(v_jurisdiction_index);

			 if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... For v_jurisdiction_id : '||
							v_jurisdiction_id);
				end if;

			-- Numerate CustomerLocation objects under given CustomerJurisidction
						sp_object_seq_endorsement_x
						(
							in_session_id,
						    in_transaction_id,
							v_jurisdiction_id,
			                pkg_os_constant.gObjType_CustomerLocation
						);

				 if v_session_control.gLogging_Full then

							pkg_os_logging.sp_log(
							in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Done with  v_jurisdiction_idE : '||
							v_jurisdiction_id);
				end if;
						 v_jurisdiction_index := v_jurisdiction_list.next(v_jurisdiction_index);
			end loop;


	end if; -- transaction check
   --end if; -- product check

 io_action_outcome_id := pkg_os_constant.gOutcome_OK;



end sp_object_get_sequence;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-6746
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--	%NAME
--		sp_create_doc_with_del_instr
--
--	%USAGE
--		creates
--
--	%ALGORITHM
--		Not Specified.
--
--	%PARAM	in_session_id			Session ID
--	%PARAM	in_transaction_id		Transaction ID
--	%PARAM	in_object_id			Object ID
--	%PARAM	io_action_outcome_id	Outcome 
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_create_doc_with_del_instr
(
	in_session_id            in object.object_id%type,
	in_transaction_id        in object.object_id%type,
	in_action_id             in action.action_id%type,
	in_action_object_id      in object.object_id%type,
	io_action_outcome_id     in out nocopy outcome.outcome_id%type
)
as
	
    v_procedure_name   				  constant system_log.program_name%type   := pkg_name||'sp_create_doc_del_instr';
    v_session_control      			  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    
    v_policy_transaction_type_id 	  pd_transaction_type.pd_transaction_type_id%type;
    v_object_table          		  pkg_os_object.t_object_list;
											
												
											   
															
													  
			 
    
    v_object_document_id   			  object.object_id%type;
    v_object_table_index   			  number;
    v_datamart_tf          			  char(1) := 'T';
		  
    v_action_parent_object_id         object.object_id%type;
    v_ptp_object_id                   object.object_id%type;

    v_workflow_exclusion      number := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                        in_transaction_id,
                                        in_session_id,
                                        33556148);
     v_objectDoc_rec  object%rowtype;   
	 
	--OSPRODUCT-22202
     v_trx_print_doc          number;
     v_trx_type               number;   
     v_policy_id           object.object_id%type;
     v_quote_trx           object.object_id%type;  
	 
begin

	  
														   
	  
        if v_session_control.gLogging_Full
        then
        
              pkg_os_logging.sp_log
              (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Entering procedure: '  || v_procedure_name ||
                  '. Action object ID: '      || in_action_object_id
              );
              
        end if;

	--osproduct-18897
        if nvl(v_workflow_exclusion,0) = 1 then
																	
																		
																	
																								
																								   
	  
           if v_session_control.gLogging_Full
           then

              pkg_os_logging.sp_log
              (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Skipping document generation'
              );
              
              end if;
              io_action_outcome_id := 23412; -- no documents;
              return;
        end if;
		
			   
																
																		
																			
																	   
																						
																			   
	
											
	
														
	
									 
	
												   
	  
														  
	  
																	   
	  
											   
		
											  
												  
												 
																 
												   
			   
	  
																			 
																	
																		
																		
																								
																								   
	  
											   
		
											  
												  
												 
																		
												   
			   
																			   
			   
	
												
	
								   
														
	
											 
	  
											
												
											   
															   
													  
			 
	
						 
															 
	
																		
																			
																	   
																					
																		   
	
										
	
												
	
								 
	
											   
												  
	  
														   
	  
											   
		
											  
												  
												 
																			
			   
	  
																		
	  
												  
													  
												  
																			   
	  
											   
		
											  
												  
												 
																  
											   
			   
	  
																   
			   
																
																		
																			
																	   
																						
																			   
	
											
	
														
	
									 
	
												   
	  
														  
	  
																	   
	  
											   
		
											  
												  
												 
																 
												   
			   
	  
																			 
												  
													  
													  
																			   
	  
											   
		
											  
												  
												 
																		 
												   
			   
																			   
			   
	
								
							  
  
														
																																					   
				  
																																					   
	
		   
									
	
			
			   
	
				
					  
	
										  
												
										 
										   
																																					   
																					   
																					   
																					   
																					   
																									   
  
							 
																																					   
		--OSPRODUCT-22202
																																					   
	
		   
									
	
			
			   
	
				
					  
	
										  
												
										 
										   
																																					   
																					   
																					   
																					   
																					   
																									   
  
																		 
																						
																													 
																														  
  
																				 
															 
										
  
											   
								
										
																							
																						
																					
											 
					 
						   
						   
										  
										  
  
													
													
																						
																							
																						
																					
											 
					 
						   
						   
										  
										  
  
	   
	
										  
											  
											 
																			 
																		   
	
		   
					 
											
											 
	  
											
												
											   
																  
	  
			 
													 
			 
		   
  
										   
	
										  
											  
											 
																			 
																		   
	
		   
					 
											
											 
	  
											
												
											   
																  
	  
			 
													 
			 
		   
  
					 
        v_trx_type := pkg_os_object_io.fn_object_bv_get(in_session_id,
																		  
                                        in_transaction_id,
                                        in_action_object_id,
                                        212030);
                                        
        if v_trx_type = 9 then
          v_policy_id                       := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_action_object_id );
																			  
																				 
																	 
         v_quote_trx :=  pkg_os_object_io.fn_object_bv_get(in_session_id,
                                        in_transaction_id,
                                        v_policy_id,
                                        29606209);
         v_trx_print_doc:= pkg_os_object_io.fn_object_bv_get(in_session_id,
                                        in_transaction_id,
                                        v_quote_trx,
                                        33802148); 
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        33802148,
                                        v_trx_print_doc);                                                             
          else                                                                        
        v_trx_print_doc:= pkg_os_object_io.fn_object_bv_get(in_session_id,
                                        in_transaction_id,
                                        in_action_object_id,
                                        33802148);
        end if;                                 
        if nvl(v_trx_print_doc,1) = 2 then -- if print doc is no
						   
          v_workflow_exclusion :=  2;
        end if;
        --OSPRODUCT-22202
		
        v_policy_transaction_type_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                            in_session_id,
                                            in_transaction_id,
                                            in_action_object_id,
                                            pkg_os_policy_transaction.gbv_PolicyTrxType
                                        );
-- Commenting code as per UTXPRODUCT-376 ---  
   /*
        if pkg_os_object.fn_object_type_get(
                                             in_session_id,
                                            in_transaction_id,
                                            in_action_object_id) = gObjType_QuoteLetterTransaction then


                if v_session_control.gLogging_Full
                then

                      pkg_os_logging.sp_log
                      (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,
																		  
												
	  
												
															   
																  
																										   
	
	
													  
						
	
											   
						   
											
												
											   
                          '... Temporarily setting parent of PTP to QuoteLetterTransaction to : '  || in_action_object_id
                      );

                end if;

                 v_action_parent_object_id := pkg_os_object.fn_object_parent_get
                                                (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id
                                                );

                v_ptp_object_id := pkg_os_object_search.fn_object_11_child_get
                                                (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_action_parent_object_id,
                                                    pkg_os_constant.gobjType_PolicyTrxPolicy
                                                );



                 pkg_os_object.sp_object_parent_set
                                                (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_ptp_object_id,
                                                    in_action_object_id
                                                );

        end if;  
*/		
                
        pkg_os_product_document.sp_policy_doc_objects_create
        (
            in_session_id,
            in_transaction_id,
            in_action_id,
            in_action_object_id,
            v_policy_transaction_type_id,
            io_action_outcome_id
            );  
			
 -- Commenting code as per UTXPRODUCT-376 ---  
   /* 
        if pkg_os_object.fn_object_type_get(
                                             in_session_id,
                                            in_transaction_id,
                                            in_action_object_id) = gObjType_QuoteLetterTransaction  then

                pkg_os_object.sp_object_parent_set
                                                (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_ptp_object_id,
                                                    v_action_parent_object_id
                                                );

                if v_session_control.gLogging_Full
                then

                      pkg_os_logging.sp_log
                      (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '... Reverting the parent of PTP to original QT to : '  || v_action_parent_object_id
                      );

                end if;

        end if;
*/     
	 
        if io_action_outcome_id = pkg_os_constant.gOutcome_OK then --OSPRODUCT-11950
        
        pkg_os_doc_version_properties.sp_populate_doc_version_props
        (
            in_session_id,
            in_transaction_id,
            in_action_object_id
        );

        ---
        ---  Update ObjectDocumentDatamart
        ---
        
         pkg_os_object_search.sp_object_children_of_type_get
         (
              in_session_id,
              in_transaction_id,
              in_action_object_id,
              pkg_os_constant.gobjType_ObjectDocument,
              v_object_table
         );

         v_object_table_index := v_object_table.first;
                    
         while v_object_table_index is not null
         loop
                    
            v_object_document_id := v_object_table(v_object_table_index);
			
			  --LXPRODUCT-612
            --For the reprint transaction, the Document Endorsement Change Type should be Added(1) to generate the documents
             pkg_os_logging.sp_log(in_session_id,in_transaction_id,v_procedure_name,'Loop Object Document ID:'|| v_object_document_id || ' v_trx_type '||v_trx_type );
            
            if v_trx_type = 19848 then
               pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_object_document_id, 28768609, 1 ); -- Document Endorsement Change Type 
              end if;
            
		--osproduct-18897
            if nvl(v_workflow_exclusion,0) = 2 then
              v_objectDoc_rec := pkg_os_object.fn_get_object_attribute(in_session_id,in_transaction_id,v_object_document_id);
              if v_objectDoc_rec.transaction_id = in_transaction_id
	
													  
                    then
	
                      pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_object_document_id, 28933005, 7 );
						   
											
												
											   
																												  
                      pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_object_document_id, 27372905, 2 );
         
											
												
											   
																												  
							
	
              end if;        
	
            end if;
			
            pkg_os_datamart.sp_datamart_update_row
															  
					   
	
            (
                in_session_id,
                in_transaction_id,
																					   
	
										  
											  
											 
																		  
												  
		 
										
		 
	
                v_object_document_id,
                v_datamart_tf
																			  
																								  
            );
                    
            v_object_table_index := v_object_table.next( v_object_table_index );
                    
         end loop;

		--osproduct-18897 return when bor
			if v_workflow_exclusion is not null then            
			      io_action_outcome_id := 23412;
            if v_session_control.gLogging_Full
											   
														   
													
	  
					   
																														
											
												
											   
														   
																	   
										  
	  
								  
														  
															  
																 
													 
																					
			   
	  
						 
												
																				 
																					 
																						 
           then

																
																   
													   
												 
															
																
																   
													   
												 
		  
              pkg_os_logging.sp_log
              (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '... Skipping document render'
              );
              
              end if;
            return;
          end if;
                    
          pkg_base_doc_delivery.sp_create_doc_deliv_instruct
          (
                  in_session_id,
                  in_transaction_id,
                  in_action_object_id,
                  io_action_outcome_id
          );
                        
           
		end if;
         -- io_action_outcome_id := pkg_os_constant.gOutcome_OK;
	

end sp_create_doc_with_del_instr;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------
--Start OSPRODUCT-7363
procedure sp_mark_all_job_resolved
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_id                  in        action.action_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
) is
  
     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_mark_all_job_resolved';
    v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    v_count                 number;
     v_dml_errors                  exception;
     pragma                        exception_init(v_dml_errors, -24381);
     v_num_errors                  number;

Cursor c_jobs is
    select 
        job_id
    from
        async_job_status
    where
        async_batch_id =  in_action_object_id  
      and 
        job_status != pkg_os_async.gJobCompleted;
																		
																			
																			  
																								  
																		  
	
												   
	
												 
	  
																	 
	  
											
												
											   
														   
													
	  
					   
																														
											
												
											   
														   
																	   
										  
	  
								  
														  
															  
																 
													 
																					
			   
	  
						 
												
																				 
																					 
																						 
																	
															
																
																   
													   
												 
															
																
																   
													   
												 
		  
												
													
												   
																					  
														
		  
				 
			   
	  
															 
																 
																	
															  
	  
																		  
	  
			   
	
									   
											  
									  
											   
		
											  
												  
												 
																
        
			   
			   
			 
	
																	   
																		   
																			 
																			   
										  
											  
											 
																		 
												  
	
		   
														   
  
								   
																																					   
																									
						
																				   
																				   
																				   
																				   
																							
  
																		 
																						 
																													 
																														  
							 
						   
												
						
  
					
				   
							 
												 
													  
  
    type t_jobs is table of c_jobs%rowtype index by binary_integer;
    r_jobs t_jobs;                
begin

    Select count(1) into v_count from async_job_status where
				  
						   
          async_batch_id =  in_action_object_id  and job_status != pkg_os_async.gJobCompleted
          ;


    pkg_os_logging.sp_log
    (
      in_session_id,
      in_transaction_id,
      v_procedure_name,
      'Async Batch ID :'
      ||in_action_object_id||
      'Updated Job Count :'
      ||v_count
    );

  
										
											
										   
																	  
															
  
    /*for i in(select job_id, job_object_id, async_batch_id, async_batch_type_id
               from async_job_status
              where async_batch_id =  in_action_object_id  
                and job_status != 3)
    loop */                      
            --open the cursor
      open c_jobs;
    loop               
  
            --fetch the record into the collection with the limit of 5000
            fetch c_jobs bulk collect into r_jobs limit 5000;
        
	
            --exit loop, if no records returned from the cursor
            exit when r_jobs.count = 0;
            
            --start forall loop to perform DML operation in bulk
            forall i in 1 .. r_jobs.count save exceptions
            
      update
        async_job_status
      set
        job_error_resolved_tf = 'T'
      where
              job_id = r_jobs(i).job_id;

      --close the loop
      end loop;
      
      --close the cursor
      close c_jobs;

      --delete all the data from the collection to release the memory
      r_jobs.delete;

      /*if sql%notfound
        then
           raise no_data_found;
      end if;  */                 
          
      /*pkg_os_wf_task.sp_action_task_close
      (
         in_session_id     ,
         in_transaction_id  ,
         in_action_id   ,
         i.job_object_id  ,
         gOutcome_TaskResolved
      );*/
      

                    
      sp_mark_all_failed_tasks_complete
      (
         in_session_id     ,
         in_transaction_id  ,
         in_action_id   ,
         in_action_object_id  ,
         gOutcome_TaskResolved,
         io_action_outcome_id
      );
      -- UTPRODUCT-4574 start
      if in_action_object_id = 120048 then
      pkg_os_wf_task.sp_action_task_close
      (
         in_session_id     ,
         in_transaction_id  ,
         in_action_id   ,
         in_action_object_id  ,
         gOutcome_TaskResolved
      );
      end if;
      -- UTPRODUCT-4574 end
    
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception 
    when v_dml_errors
				 
  
																   
				  
  
					 
      then

			   
  
										 
	 
						  
						   
					   
						 
							
		
  
													
														
												   
														  
															
															
						   
										
														
															
													   
															  
																 
		   
						 
  
														
  
		   
						  
	
      --get the errored records count
      v_num_errors := sql%bulk_exceptions.count;

        --log the entry into the log table
            pkg_os_logging.sp_log_error
            (
                 in_session_id,
                 in_transaction_id,
                         v_procedure_name,  -- Use $$PLSQL_UNIT if calling via a stored procedure or mention the procedure name
                         '...Async Job Status table bulk update has errors. Total errored out records are :'||v_num_errors
                    );
    when no_data_found
    then
            pkg_os_logging.sp_log_error
            (
                 in_session_id,
                 in_transaction_id,
                 v_procedure_name,
                 '...... No job found for the object:'||in_action_object_id
                 || sqlerrm ||sqlcode
            );
      io_action_outcome_id := gOutcome_NonErroredJobSelected;
      return;
    
end sp_mark_all_job_resolved;
---End OSPRODUCT-7363

---------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--
--   sp_mark_all_failed_tasks_complete
--
--   UTPRODUCT-4360 :
--   The purpose of this procedure is to fetch the tasks related to the errored out jobs based on input batch ID 
--   and mark those tasks as closed.
--
--   Algorithm:
--   1. Fetch the jobs in error state based on input batch ID.
--   2. For these jobs, get all the tasks associated with the job object of type Internal Server error, Service Down, Async System Error
--   3. For all such tasks, do the following:-
--      	3.1 Set the status BV as completed.
--        3.2 Set the completion date as the current date.
--        3.3 Set the "completed by" to session User.
--        3.4 Update the datamart column DRAGON_TASK.TASK_STATUS_ID.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_mark_all_failed_tasks_complete
(
      in_session_id                 in        object.object_id%type,
      in_transaction_id             in        object.object_id%type,
      in_action_id                  in        action.action_id%type,
      in_async_batch_id             in        object.object_id%type,
      in_outcome_id                 in        outcome.outcome_id%type, 
      io_action_outcome_id          in out    outcome.outcome_id%type	
) is

      v_procedure_name        constant system_log.program_name%type   := pkg_name||'sp_mark_all_failed_tasks_complete';
																								  
      v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
																															
      v_session_user_id       object.object_id%type    := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);
																								  
      v_session_user_name           dragon_user.user_full_name%type    := pkg_os_wf_session.fn_user_get(in_session_id, in_transaction_id);
																											
      g_task_editable_flag_No       constant  varchar2(5)    := 'No';
      g_task_status_name            constant  varchar2(10)   := 'Completed';
      v_count                 number                   :=0;
      v_final_count                 number                   := 0;
      v_datamart_tf                 char                     := 'T';
      v_current_date                date;
	    type t_task_data is table of dragon_task.task_id%type index by binary_integer;
      v_task_data                   t_task_data;
      v_dml_errors                  exception;
      pragma                        exception_init(v_dml_errors, -24381);
      v_num_errors	                number;

																																   
	
			
	
cursor c_tasks 
	
					   
      is
          SELECT 
               task_id
          from 
               dragon_task t, async_job_status j
                        where 
                (task_object_id = job_id or task_object_id = in_async_batch_id)
                        and 
                     j.job_status != pkg_os_async.gJobCompleted
                        and 
                 j.async_batch_id = in_async_batch_id
          and 
               task_status_id not in (pkg_os_wf_task.gTaskStatus_Complete,pkg_os_wf_task.gTaskStatus_NotApplicable,pkg_os_wf_task.gTaskStatus_Select);
											   
															
													   
																	  
	
																																					   

      type t_tasks is table of c_tasks%rowtype index by binary_integer;
      r_tasks t_tasks;
      
begin
																							  
																									 
  
      if v_session_control.gLogging_Full
																								  
																													   
																															
																							 
																								  
																									   
																											
														 
																 
							   
							   
							   
						
																				  
							
						   
												
						
  
					 
					
											  
																			
													   
												 
								  
												  
													   
												 
  
																	 
					
											  
											 
																	 
	
		   
  
	   
				  
					  
											
																		  
													 
											   
								
												
													 
											   
  
      then
	
            pkg_os_logging.sp_log
            (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Async Batch ID :'||in_async_batch_id
            );
            
      end if;


      SELECT 
              task_id
        bulk collect into 
              v_task_data
        from 
              dragon_task t, async_job_status j
       where  
              (task_object_id = job_id or task_object_id = in_async_batch_id)
         and 
              j.job_status != pkg_os_async.gJobCompleted
         and 
              j.async_batch_id = in_async_batch_id
         and 
              task_status_id not in (pkg_os_wf_task.gTaskStatus_Complete,pkg_os_wf_task.gTaskStatus_NotApplicable,pkg_os_wf_task.gTaskStatus_Select);


														   
	
													  
														  
													   
																		  
														   
	
													  
														  
													   
																		   
											  
	
													
														
													 
												   
															 
	
							 
	
			 
  
      for i in 1 .. v_task_data.count
      loop

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_task_data(i), pkg_os_wf_task.gbv_TaskStatus,   pkg_os_wf_task.gTaskStatus_Complete );

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_task_data(i), pkg_os_wf_task.gbv_TaskCompletedDate, to_char(sysdate, pkg_os_constant.DragonDateFormatDefault));

	
													  
														  
													   
																			 
														
																						  
	
            --
            -- Set Task Completed By to Session User
            --

            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_task_data(i), pkg_os_wf_task.gbv_Task_CompletedBy,  v_session_user_id );
       
													   
																			
														   
	
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_task_data(i), pkg_os_wf_task.gbv_TaskAssignedTo,  v_session_user_id );       

													   
																		  
														   
	
            pkg_os_object_io.sp_object_bv_set( in_session_id, in_transaction_id, v_task_data(i), pkg_os_wf_task.gbv_assignedToQueue,  NULL );       
            
													   
																		   
											  
	
            pkg_os_action_log.sp_action_log( in_session_id, in_transaction_id,v_task_data(i),in_action_id, gOutcome_TaskResolved);
            
													 
												   
															 
	
            v_count := v_count + 1;
      
      end loop;

		  --open the cursor
      open c_tasks;
	    loop

		        --fetch the record into the collection with the limit of 1000
            fetch c_tasks bulk collect into r_tasks limit 1000;

	
		        --exit loop, if no records returned from the cursor
		        exit when r_tasks.count = 0;
            
		        --start forall loop to perform DML operation in bulk
		        forall i in 1 .. r_tasks.count save exceptions
            
            update dragon_task t
               set TASK_STATUS_ID               = pkg_os_wf_task.gTaskStatus_Complete,
                   TASK_COMPLETED_DATE          = sysdate,
                   TASK_LAST_UPD_DT             = sysdate,
                   TASK_EDITABLE_FLAG           = g_task_editable_flag_No,
                   TASK_STATUS                  = g_task_status_name,
                   TASK_COMPLETED_BY            = v_session_user_name,
                   TASK_ASSIGNED_TO_NAME        = v_session_user_name,
                   TASK_ASSIGNED_TO_ID          = v_session_user_id,
                   TASK_ASSIGNED_TO_QUEUE_NAME  = NULL,
                   TASK_ASSIGNED_TO_QUEUE_ID    = NULL

             where task_id = r_tasks(i).task_id;
     	--close the loop
      end loop;
      
      --close the cursor
      close c_tasks;

      --delete all the data from the collection to release the memory
      r_tasks.delete;
      
							
																				 
													 
													 
																	 
																
																 
																 
															   
												  
												 
		
											
					  
			 
  
					  
				  
											  
											 
															   
	
		   
  
																   
				   
  
      if v_session_control.gLogging_Full
      then
             pkg_os_logging.sp_log
             (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  'Updated Task Count :'||v_count
            	);
            
      end if;

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

--exception block to catch the bulk update exception
		   
exception when v_dml_errors
then

      --get the errored records count
      v_num_errors := sql%bulk_exceptions.count;
	
										
												
													
																																	   
																															
												
	
										

        --log the entry into the log table
      pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,  -- Use $$PLSQL_UNIT if calling via a stored procedure or mention the procedure name
                         '...Datamart table DRAGON_TASK bulk update has errors. Total errored out records are :'||v_num_errors
                    );

end sp_mark_all_failed_tasks_complete;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
-- %NAME
--        sp_mark_selected_job_resolve
--
-- %USAGE
--        Not specified
--
-- %ALGORITHM
--        Not specified
--
-- %PARAMS
--        in_session_id            in   object.object_id%type,
--        in_transaction_id        in   object.object_id%type,
--        in_action_id         in   action.action_id%type,
--        in_action_object_id      in   object.object_id%type,
--        io_object_cache          in out pkg_os_object_cache.t_object_cache,
--        io_action_outcome_id     in out outcome.outcome_id%type
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
  procedure sp_mark_selected_job_resolve(in_session_id        in object.object_id%type,
                                         in_transaction_id    in object.object_id%type,
                                         in_action_id         in action.action_id%type,
                                         in_action_object_id  in object.object_id%type,
                                         io_object_cache      in out pkg_os_object_cache.t_object_cache,
                                         io_action_outcome_id in out outcome.outcome_id%type) as

    v_procedure_name  system_log.program_name%type := pkg_name ||
                                                      'sp_mark_selected_job_resolve';
    v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                       in_transaction_id);

    v_selected_object_id   object.object_id%type;
    v_selected_element_tbl pkg_os_token.t_string_table;
    v_list_object_id       object.object_id%type;
    v_task_object_id       object.object_id%type;
    v_async_batch_id       object.object_id%type; -- UTPRODUCT-4574
    v_async_batch_type_id  number;
    v_job_count_id         number;

  begin

    --
    -- Get the current list
    --
    v_list_object_id := pkg_os_object_cache_io.fn_obj_cache_object_bv_get(in_session_id,
                                                                          in_transaction_id,
                                                                          io_object_cache,
                                                                          in_session_id,
                                                                          pkg_os_constant_bv.gbv_GenObjCurrentList);

    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... list object ID :' || v_list_object_id ||
                            ' io_object_cache: ');

    end if;

    if (pkg_os_object_cache_io.fn_obj_cache_object_bv_get(in_session_id,
                                                          in_transaction_id,
                                                          io_object_cache,
                                                          v_list_object_id,
                                                          pkg_os_constant_bv.gbv_ListElementsSelected) is null) then

      io_action_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;
      return;

    end if;

    --
    -- Get selected element list
    --
    pkg_os_token.sp_tokenize_string(pkg_os_object_cache_io.fn_obj_cache_object_bv_get(in_session_id,
                                                                                      in_transaction_id,
                                                                                      io_object_cache,
                                                                                      v_list_object_id,
                                                                                      pkg_os_constant_bv.gbv_ListElementsSelected),
                                    ',',
                                    v_selected_element_tbl);

    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... List:' || v_list_object_id ||
                            ':Selected Elements:' ||
                            pkg_os_object_cache_io.fn_obj_cache_object_bv_get(in_session_id,
                                                                              in_transaction_id,
                                                                              io_object_cache,
                                                                              v_list_object_id,
                                                                              pkg_os_constant_bv.gbv_ListElementsSelected));

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Count of selected objects:' ||
                            v_selected_element_tbl.count);

    end if;

    if (v_selected_element_tbl.count = 0) then

      io_action_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;
      return;

    end if;

    --
    -- For each selected List Element, get the object ID that will be job id and mark it resolve
    --
    for i in v_selected_element_tbl.first .. v_selected_element_tbl.last loop

      v_selected_object_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                in_transaction_id,
                                                                v_selected_element_tbl(i),
                                                                pkg_os_constant_bv.gbv_ListElementObject);

      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... Selected Element:' ||
                              v_selected_element_tbl(i) ||
                              '... selected job:' || v_selected_object_id ||
                              '..setting job_error_resolved_tf = T');

      end if;
      begin

      pkg_pc_procedures.sp_resolve_job
       (in_session_id,
        in_transaction_id,
        v_selected_object_id,
        in_action_id,
        io_action_outcome_id
		);

      exception
        when no_data_found then
          pkg_os_logging.sp_log_error(in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '...... No job found for selected Element:' ||
                                      v_selected_element_tbl(i) ||
                                      '... selected object:' ||
                                      v_selected_object_id || sqlerrm ||
                                      sqlcode);
          io_action_outcome_id := gOutcome_NonErroredJobSelected;
          return;
      end;

    end loop;

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

  end sp_mark_selected_job_resolve;
-----------------------------------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------
--OSPRODUCT-5461
procedure sp_create_contact_person(in_session_id        in object.object_id%type,
                                   in_transaction_id    in object.object_id%type,
                                   in_object_cache      in out pkg_os_object_cache.t_object_cache,
                                   in_action_object_id  in object.object_id%type,
                                   io_action_outcome_id in out outcome.outcome_id%type) 
as

  v_procedure_name  system_log.program_name%type := pkg_name ||
                                                    'sp_create_contact_person';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);

  v_primary_entity_id        object.object_id%type;
  v_entity_type              object_bv_value.business_variable_value%type;
  v_new_entity_id            number;
  v_new_ormsearchen_id       number; --UTPRODUCT-4273
  v_policy_customer_id       number;
  v_contact_person           number;
  v_contact_pers_id          object.object_id%type;
  v_auto_populate_pc_info_tf char;

begin

  v_auto_populate_pc_info_tf := NVL(pkg_os_product.fn_product_property_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_action_object_id,
                                                                           120148 --- Property name: Auto-populate primary contact information from primary entity?
																		   ), 
                                    'T');
                                    
  if v_session_control.gLogging_Full then
        
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...... Auto-populate primary contact info from primary entity flag :' ||
                                v_auto_populate_pc_info_tf);
        
  end if;

  v_policy_customer_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            in_action_object_id,
                                                            gbv_Ref_AccountInformation);

  v_primary_entity_id  := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_policy_customer_id,
                                                            gbv_CustomerPrimaryEntity);

  v_entity_type := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                     in_transaction_id,
                                                     v_primary_entity_id,
                                                     gbv_Entity_BusinessOrPerson);

  v_contact_person := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                        in_transaction_id,
                                                        v_policy_customer_id,
                                                        gbv_Entity_Ref_Contact_Person);

  if v_contact_person is null then
  
    if v_entity_type = '2' then
      --check if ref contact person is null
    
      v_contact_pers_id := pkg_os_object_search.fn_object_with_attribute_get(in_session_id,
                                                                             in_transaction_id,
                                                                             v_policy_customer_id, --customer
                                                                             pkg_os_constant.gObjType_CustomerEntity, --Customer Entity
                                                                             6586, -- EntityRole BV
                                                                             30, -- Contact person
                                                                             false);
    
      if v_contact_pers_id is not null then
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_policy_customer_id,
                                          gbv_Entity_Ref_Contact_Person,
                                          v_contact_pers_id); --contact person
      
      else
      
        if v_auto_populate_pc_info_tf = 'F' then
        
          pkg_cs_pc_placeholder.sp_contact_person_setup (in_session_id,
                                                         in_transaction_id,
                                                         in_object_cache,
                                                         v_primary_entity_id,
                                                         537514,
                                                         io_action_outcome_id);
        
        else
        
          pkg_base_placeholder.sp_add_peer_with_custom_ref(in_session_id,
                                                           in_transaction_id,
                                                           in_object_cache,
                                                           v_primary_entity_id,
                                                           537514,
                                                           io_action_outcome_id);
        
        end if;
      
        v_new_entity_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_Session_id,
                                                             gbv_Ref_ObjectOfInterest);
      
        if v_session_control.gLogging_Full then
        
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                '...... Created new entity :' ||
                                v_new_entity_id);
        
        end if;
      
        /* Cleanup the default address created by object constructors */
        if v_auto_populate_pc_info_tf = 'F' then
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_new_entity_id,
                                            gbv_CustEntityPrimaryAddress,
                                            null);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_new_entity_id,
                                            gbv_CustEntityBillingAddress,
                                            null);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_new_entity_id,
                                            gbv_CustEntityMailingAddress,
                                            null);
        end if; /* End address cleanup*/
      
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_policy_customer_id,
                                          gbv_Entity_Ref_Contact_Person,
                                          v_new_entity_id); --contact person
      
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_policy_customer_id,
                                          gbv_Ref_Sole_Proprietor,
                                          v_new_entity_id); --proprietorcancel
      
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_new_entity_id,
                                          gCustEntityRlshpToCustomer,
                                          '7000'); --relationship to customer
        -- LXPRODUCT-478 start--
      
        if v_auto_populate_pc_info_tf = 'T' then
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_new_entity_id,
                                            gbv_ref_associated_address,
                                            pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                              in_transaction_id,
                                                                              v_primary_entity_id,
                                                                              gbv_ref_associated_address)); -- _Reference_Associated Address
        end if;
      
        -- LXPRODUCT-478 end--                                  
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_new_entity_id,
                                          gbv_EntityRole_ContactP_Owner,
                                          '1,2');
        --UTPRODUCT-4273 start
        pkg_os_object.sp_object_create(in_session_id,
                                       in_transaction_id,
                                       gObjType_ORMSearchEntity,
                                       v_new_entity_id,
                                       v_new_ormsearchen_id);
      
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_new_ormsearchen_id,
                                          gbv_ORM_CreateNewEntity_Flag,
                                          1); --set ORM - Create New MasterEntity Flag
        --UTPRODUCT-4273 end
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_new_entity_id,
                                          gbv_CustEntityRole,
                                          '30'); --- set entity role as Contact Person
      end if; -- v_contact_pers_id is not null
    
    else
      --individual
      --set contact person to primary entity
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_policy_customer_id,
                                        gbv_Entity_Ref_Contact_Person,
                                        v_primary_entity_id);
    
    end if; --business type
  end if; --contact person is null

  ------------------------------------ Create the delivery preferences if they are missing ---------------------------------

  v_contact_person := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                        in_transaction_id,
                                                        v_policy_customer_id,
                                                        gbv_Entity_Ref_Contact_Person);

  if pkg_os_object.fn_object_children_count_get(v_contact_person,
                                                gObjTypeDocDelPref) = 0 then
  
    if v_session_control.gLogging_Full then
    
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Creating default delivery preferences for the contact person.');
    
    end if;
  
    pkg_base_doc_delivery.sp_default_delivery_preference(in_session_id,
                                                         in_transaction_id,
                                                         v_contact_person,
                                                         io_action_outcome_id);
  end if;

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception
  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                'sp_create_contact_person',
                                'Error:' || sqlerrm);
  
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  
end sp_create_contact_person;
  -------------------------------------

procedure sp_create_solep(in_session_id        in object.object_id%type,
                          in_transaction_id    in object.object_id%type,
                          in_object_cache      in out pkg_os_object_cache.t_object_cache,
                          in_action_object_id  in object.object_id%type,
                          io_action_outcome_id in out outcome.outcome_id%type) as
  v_primary_entity_id       object.object_id%type;
  v_entity_type             object_bv_value.business_variable_value%type;
  vbv_contact_person        number := 32991048;
  vbv_ref_sole_prop         number := 32999948;
  v_new_entity_id           number;
  v_policy_customer_id      number;
  v_contact_person          number;
  v_role                    number := 32999848;
  v_sole_prop               object_bv_value.business_variable_value%type;
  v_sole_prop_diff          number := 33002048;
  v_check_sole_prop         object_bv_value.business_variable_value%type;
  v_primary_address         object.object_id%type;
  v_mailing_address         object.object_id%type;
  v_billing_address         object.object_id%type;
  v_billing_usage_object_id object.object_id%type;
  v_primary_usage_object_id object.object_id%type;
  v_mailing_usage_object_id object.object_id%type;

begin

  v_policy_customer_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                 in_transaction_id,
                                                                 in_action_object_id,
                                                                 '27360105');

  v_primary_entity_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                                in_transaction_id,
                                                                v_policy_customer_id,
                                                                '29253414');

  v_entity_type := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                          in_transaction_id,
                                                          v_primary_entity_id,
                                                          29235814);

  v_contact_person := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                             in_transaction_id,
                                                             v_policy_customer_id,
                                                             '32991048');

  v_sole_prop := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                        in_transaction_id,
                                                        v_policy_customer_id,
                                                        vbv_ref_sole_prop);

  v_check_sole_prop := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                              in_transaction_id,
                                                              v_primary_entity_id,
                                                              v_sole_prop_diff);

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  if v_check_sole_prop = 2 and v_contact_person = v_sole_prop then
    --Different
  
    pkg_os_object.sp_object_create(in_session_id,
                                   in_transaction_id,
                                   205,
                                   v_policy_customer_id,
                                   v_new_entity_id
                                   
                                   );
  
    --
    -- set the newely created Customer entity in Object Of Interest
    --
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      in_session_id,
                                      28987309,
                                      v_new_entity_id
                                      
                                      );
  
    v_primary_address := pkg_os_object_io.fn_object_bv_get
                         
                         (
                          
                          in_session_id,
                          in_transaction_id,
                          v_contact_person,
                          29254014);
  
    v_mailing_address := pkg_os_object_io.fn_object_bv_get
                         
                         (in_session_id,
                          in_transaction_id,
                          v_contact_person,
                          29254114
                          
                          );
  
    v_billing_address := pkg_os_object_io.fn_object_bv_get(
                                                           
                                                           in_session_id,
                                                           
                                                           in_transaction_id,
                                                           v_contact_person,
                                                           29254214);
  
    pkg_base_placeholder.sp_default_usage_create(in_session_id,
                                                 in_transaction_id,
                                                 v_new_entity_id,
                                                 v_primary_address,
                                                 v_primary_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_new_entity_id,
                                      32679946, --ref Primary Activity Type
                                      v_primary_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_primary_usage_object_id,
                                      30000946, --Activity Type
                                      100);
  
    pkg_base_placeholder.sp_default_usage_create(in_session_id,
                                                 in_transaction_id,
                                                 v_new_entity_id,
                                                 v_mailing_address,
                                                 v_mailing_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_new_entity_id,
                                      32680046, --ref Mailing Activity Type
                                      v_mailing_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_mailing_usage_object_id,
                                      30000946, --Activity Type
                                      200);
  
    pkg_base_placeholder.sp_default_usage_create(in_session_id,
                                                 in_transaction_id,
                                                 v_new_entity_id,
                                                 v_billing_address,
                                                 v_billing_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_new_entity_id,
                                      32680146, --ref Billing Activity Type
                                      v_billing_usage_object_id);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_billing_usage_object_id,
                                      30000946, --Activity Type
                                      300);
  
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_new_entity_id,
                                      6586, --EntityRole
                                      5);
  
    pkg_base_placeholder.sp_contactinfo_default_create(in_session_id,
                                                       in_transaction_id,
                                                       in_object_cache,
                                                       v_new_entity_id,
                                                       io_action_outcome_id
                                                       
                                                       );
  
    pkg_base_doc_delivery.sp_default_delivery_preference(in_session_id,
                                                         in_transaction_id,
                                                         v_new_entity_id,
                                                         io_action_outcome_id);
  
    --v_new_entity_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id,in_Session_id,'28987309');
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_policy_customer_id,
                                      32999948,
                                      v_new_entity_id); --proprietorcancel
  
    --pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id,v_new_entity_id,32999848,'1,2');
  
    io_action_outcome_id := 63548;
  
  elsif v_check_sole_prop = 1 and v_contact_person <> v_sole_prop then
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_policy_customer_id,
                                      vbv_ref_sole_prop,
                                      v_contact_person);
    io_action_outcome_id := 22;
  
  end if; --

exception
  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                'sp_create_solep',
                                'Error:' || sqlerrm);
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_create_solep;


----------------------------------------------------------------
----------------------------------------------------------------
--OSPRODUCT-4900
----------------------------------------------------------------
--
--  %NAME
--      sp_single_object_expire
--
--  %USAGE
--      To expire the identified object.
--
--
--  %ALGORITHM
--   1) loop through the cursor on ACTION_OBJECT_EXPIRE Table.
--   2) Get the expir_object using expire_object_bv_path
--   3) Get the placeholder_object using new_object_bv_path
--   4) if there is no change in the objects then set the expiration date for the expire_object as null
--   5) else if there is a change then:
--        a) Get the parent of the expire_object.
--        b) Duplicate the expire_object to get the new_usage_object.
--        c) set the parent of the new usage object as of the expire_object.
--        d) Set the reference ref_Logs_Usage_Of_Object from new_usage_object to the placeholder_object.
--        e) Call sp_object_expire to set the expiration and effective dates for the concerned objects.
--        f) set the state of the new_placeholder_object as active.
--
--  %PARAM
--    in_session_id                           Session Id
--    in_transaction_id                       Transaction Id
--    in_action_id                            Action Id
--    in_action_object_id                     Action Object Id
--    io_action_outcome_id                    Action Outcome Id
------------------------------------------------------------------------------------------------------------------------------

procedure sp_single_object_expire
(
    in_session_id                 in            object.object_id%type,
    in_transaction_id             in            object.object_id%type,
    in_action_id                  in            action.action_id%type,
    in_action_object_id           in            object.object_id%type,
    io_action_outcome_id          in out nocopy     outcome.outcome_id%type
)
as
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_single_object_expire';

     v_context_object_id           object.object_id%type;
     v_expire_object_id            object.object_id%type;
     v_new_usage_object_id         object.object_id%type;
     v_newPlaceholder_object_id    object.object_id%type;
     v_new_reference_object_id     object.object_id%type;

     v_usage_parent_id             object.object_id%type;
     v_current_active_object_id    object.object_id%type;

     v_ultimate_parent_id          object.object_id%type;
     v_primary_entity_id           object.object_id%type;
     v_billing_account_id          object.object_id%type;

     v_in_action_object_typ        object.object_type_id%type;



     cursor c_action_object_expire
            (
               in_action_id         in       action.action_id%type
            )
								   
			  
			  
			  
          is
          select
               *
          from
               action_object_expire a
          where
		  
										
		  
               a.action_id = in_action_id
          and
               a.enable_tf = 'T';

begin

     if   v_session_control.gLogging_Full
     then

																									
																													  
		  
														
		  
				 
	  
          pkg_os_logging.sp_log
																				  
																					 
	  
													   
	  
          (
		  
														
		  
				 
	  
																			  
																				  
																					 
	  
													   
	  
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Entering with Action Object ID: '
															  
	  
										
						 
							 
										   
		 
						   
							   
               ||in_action_object_id
          );

			
     end if;


     -- loop through the cursor to get the epire object and the placeholder object
														
															
																
																	
																	  
	  
								   
	  
														
															
																
															 
														  
																							
	  
									   
	  
														
															
																
																 
																  
	  
																	
	  
														
															
																	 
																				   
																				
	  
			 
	
			 
  
							  
  
							  
																  

     for r_action_object_expire in c_action_object_expire(in_action_id)
     loop
          if   v_session_control.gLogging_Full
          then
																					
							   

																					   
																						  
  
																		 
																								
  
																								 
																								 
																								 
												 
												 
												 
  
	   
  
               pkg_os_logging.sp_log
											
										   
																			  
  
									
									
							  
						  
									 
							 
									   
									   
									   
								 
							 
									   
									   
	
               (
											  
											 
															  
											  
	
				  
					
										 
							   
											  
																  
								  
						  
												 
	
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...In Cursor'
                    ||r_action_object_expire.action_id
               );
				  
					
										 
							   
											  
																  
								  
						  
												 
	
										  
											  
											 
															  
															 
																
	
												  
													  
							  
	  
																							 
		
											  
												  
												 
																	   
																 
		
										 
															 
					 
          end if;


																							 
          v_context_object_id := in_action_object_id ;

          if   v_session_control.gLogging_Full
          then

																						 
																	 
																			  
		
													  
																						 
			
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Context object '
                    ||v_context_object_id
                    ||'...Expire object path '
                    ||r_action_object_expire.EXPIRE_OBJECT_BV_PATH
                    ||'...Placeholder object path '
                    || r_action_object_expire.NEW_OBJECT_BV_PATH
               );
          end if ;



          -- get the expire object from expire_object_bv_path

          v_expire_object_id := pkg_os_object_io.fn_object_bv_path_get
                                (
                                     in_session_id,
                                     in_transaction_id,
                                     v_context_object_id,
                                     r_action_object_expire.EXPIRE_OBJECT_BV_PATH
                                );
          -- get the placeholder object from the new_object_bv_path

											   
          v_newPlaceholder_object_id := pkg_os_object_io.fn_object_bv_path_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_context_object_id,
                                             r_action_object_expire.NEW_OBJECT_BV_PATH
                                        );

																				 
											   
          v_current_active_object_id:=  pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_expire_object_id,
                                             gbv_ref_logsusageofobject
                                        );

          if   v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Object to expire '
                    ||v_expire_object_id
                    ||'...v_newPlaceholder_object'
                    || v_newPlaceholder_object_id
                    ||'...v_current_active_object_id'
                    ||v_current_active_object_id
               );
          end if ;

          if (v_current_active_object_id is not null --= v_newPlaceholder_object_id
            and
              v_newPlaceholder_object_id is null
              )
          then

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_expire_object_id,
                    gbv_Expiration_Date,
                    null
               );

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_current_active_object_id,
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    pkg_os_constant_enum.gObjState_Alive
               );

          elsif (v_current_active_object_id is not null
                 and
                 v_newPlaceholder_object_id is not null
                 and
                 v_current_active_object_id <> v_newPlaceholder_object_id
                 )

          then

               --
               -- Get the parent of the usage object
               -- Duplicate the usage object
               -- Set the parent of the new usage object
               --

               v_usage_parent_id :=   pkg_os_object.fn_object_parent_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           v_expire_object_id
                                      );

               pkg_os_object_copy.sp_object_duplicate
               (
                    in_session_id,
                    in_transaction_id,
                    v_expire_object_id,
                    v_new_usage_object_id
               ); -- did not pass 'F' as 5th param

               pkg_os_object.sp_object_parent_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_new_usage_object_id,
                    v_usage_parent_id
               );

               if   v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......New Usage_object id: '
                         ||v_new_usage_object_id
                         ||'......parent id: '
                         || v_usage_parent_id
                         || '......Object type '
                         || pkg_os_object.fn_object_type_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_new_usage_object_id
                            )
                    );


               end if;


               -- Set the logsUsageOfObject reference from new usage object to the new placeholder object.

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_new_usage_object_id,
                    gbv_ref_logsusageofobject,
                    v_newPlaceholder_object_id
               );

               if   v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......New active obj '
                         || pkg_os_object_io.fn_object_bv_get
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_new_usage_object_id,
                                 gbv_ref_logsusageofobject
                            )
                    );
               end if;


               v_new_reference_object_id := v_new_usage_object_id;


               if   v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '......Before Calling Expiration Code -  v_new_reference_object '
                         ||v_new_reference_object_id
                    );
               end if;

               pkg_db_customer_portal.sp_object_expire
               (
                    in_session_id ,
                    in_transaction_id ,
                    v_context_object_id,
                    v_new_reference_object_id,
                    r_action_object_expire.EXPIRE_OBJECT_BV_PATH,
                    r_action_object_expire.EXPIRATION_DATE_BV_ID,
                    r_action_object_expire.EFFECTIVE_DATE_BV_ID,
                    io_action_outcome_id
               );


               -- Make the state as Active for the Placeholder object also.

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_newPlaceholder_object_id,
                    pkg_os_constant_bv.gbv_GenObjObjectState,
                    pkg_os_constant_enum.gObjState_Alive
               );

          elsif v_expire_object_id is null
          then

          -- Verify the context object type .

          v_in_action_object_typ   :=   pkg_os_object.fn_object_type_get
                                        (
                                           in_session_id,
                                           in_transaction_id,
                                           in_action_object_id
                                        );

                    -- Added this for OSBILLING-242
                    case when v_in_action_object_typ = gObjType_BillingAccount
                    then

                          v_context_object_id     :=   in_action_object_id;

                    else

                         /*v_ultimate_parent_id     :=   pkg_os_object_search.fn_object_ultimate_parent_get
                                                       (
                                                           in_session_id,
                                                           in_transaction_id,
                                                           in_action_object_id
                                                       );
                                                       */
                    --
                    -- instead of ultimate customer get parent of type customer as batch object is the ultimate parent for multiple quote upload workflow...
                    --
                    v_ultimate_parent_id   :=   pkg_os_object_search.fn_object_get_parent_of_type
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_action_object_id,
                                                       pkg_os_constant.gObjType_Customer
                                                  );

                         -- get the primary entity id

                         v_primary_entity_id      :=   pkg_os_object_io.fn_object_bv_get
                                                       (
                                                              in_session_id,
                                                              in_transaction_id,
                                                              v_ultimate_parent_id,
                                                              gbv_CustRefPrimaryEntity
                                                       );


                         -- Get the child Billing Account for the Primary Entity

                         v_billing_account_id     :=   pkg_os_object_search.fn_object_11_child_get
                                                       (
                                                               in_session_id,
                                                               in_transaction_id,
                                                               v_primary_entity_id,
                                                               pkg_os_admin.gObjType_BillingAccount
                                                       );

                         v_context_object_id :=   v_billing_account_id;

                     end case;


                    v_usage_parent_id :=   pkg_os_object.fn_object_parent_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_context_object_id
                                            );

                    -- Create usage object within the parent object

                    pkg_os_object.sp_object_create
                    (
                         in_session_id,
                         in_transaction_id,
                         gObjType_ObjectUsage,
                         v_usage_parent_id,
                         v_new_usage_object_id
                    );

                    -- Set Active Payment Preference
                    -- OSPRODUCT-7957
                    -- BV made calculated
                    /*pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_context_object_id,
                         gbv_Ref_Active_Paymnt_Prf,
                         v_new_usage_object_id
                    );*/
                    -- end OSPRODUCT-7957


                    -- Set the logsUsageOfObject reference from new usage object to the new placeholder object.

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_usage_object_id,
                         gbv_ref_logsusageofobject,
                         v_newPlaceholder_object_id
                    );


                    -- Set usage effective date

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_usage_object_id,
                         gbv_Effective_Date,
                         to_char ( sysdate , pkg_os_constant.DragonDateFormatDefault)
                    );

                    -- Set usage Active Object Type

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_new_usage_object_id,
                         gbv_Active_Object_Type,
                         g_ActivObjType_PayPrfl
                    );


                    -- Make the state as Active for the Placeholder object also.

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_newPlaceholder_object_id,
                         pkg_os_constant_bv.gbv_GenObjObjectState,
                         pkg_os_constant_enum.gObjState_Alive
                    );


          end if;

     end loop;

END sp_single_object_expire;
----------------------------------------------------------------

-- Get the list of duplicate MasterAddress objects
	-- For each duplicate Address, choose one to retain
		-- For the other duplicate Addresses
			-- Get all the Entity references
				-- 	For each Entity reference, update the reference to point to the chosen Address
			-- Drop the duplicate Address

procedure sp_delete_duplicate_orm_address
(
     in_session_id                in     object.object_id%type,
     in_transaction_id            in     object.object_id%type
)
is

	v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_delete_duplicate_orm_address';

	v_master_address_object_list       pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_me_contact_object_list       	pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_address_contact_object_list		pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_first_ma_id       			number := null;
	v_master_entity_object_id		number := null;
	v_new_contact_entity_map_id		number := null;
	
begin

	pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
		'....Deleting duplicate ORM Master Addresses ....');

	for x in (
		select ADDRESS_LINE_1, ADDRESS_LINE_2, ZIP_CODE, CITY, JURISDICTION_ID, count(*)
		from ORM_MASTER_ADDRESS
		group by ADDRESS_LINE_1, ADDRESS_LINE_2, ZIP_CODE, CITY, JURISDICTION_ID
		having count(*) > 1
	)
	loop
	
		pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
			'....Selecting Address Line1: ' || x.ADDRESS_LINE_1);
			
		select MA_ID
		  bulk collect into v_master_address_object_list
		  from ORM_MASTER_ADDRESS
		 where ADDRESS_LINE_1 = x.ADDRESS_LINE_1 and nvl(ADDRESS_LINE_2, ' ') = nvl(x.ADDRESS_LINE_2, ' ') 
		 and ZIP_CODE = x.ZIP_CODE and CITY = x.CITY and JURISDICTION_ID = x.JURISDICTION_ID;

		pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
			'....Selecting Address Line1: ' || x.ADDRESS_LINE_1 || ' Count: ' || v_master_address_object_list.count);
		
		-- Choose one and delete the other instances
		if(v_master_address_object_list.count > 1)
		then
			v_first_ma_id := null;
			
			for y in v_master_address_object_list.first..v_master_address_object_list.last
			loop

				pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
					'.......Processing Master Address: ' || v_master_address_object_list(y));
			
				if(v_first_ma_id is null)
				then
					v_first_ma_id := v_master_address_object_list(y);
					continue;
				end if;
				
				-- Repoint other addresses to the first one
				-- Get all the MasterEntityContactMap objects pointing to this MasterAddress object
				select
					r.object_id
				bulk collect into
					v_me_contact_object_list
				from
					object_relation r
				where
					r.relation_object_id = v_master_address_object_list(y)
				and
					r.object_relationship_bv_id = 34021546	-- _Reference_Uses Contact Object 
				and
					r.relation_object_type_id = 3199346 -- MasterAddress
				and
					r.object_type_id = 3385046;   -- 3385046MasterEntityContactMap

				if(v_me_contact_object_list.count > 0)
				then
					for z in v_me_contact_object_list.first..v_me_contact_object_list.last
					loop

						pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
							'.......Resetting reference for Object: ' || v_me_contact_object_list(z) || ' to Address:' || v_first_ma_id);
						
						pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_me_contact_object_list(z), 34021546, v_first_ma_id);
	
						-- Create new ContactMasterEntityMap object below the retained one.
						-- 3385146ContactMasterEntityMap
						pkg_os_object.sp_object_create(in_session_id, in_transaction_id, 3385146, v_first_ma_id, v_new_contact_entity_map_id);

						-- Get Parent MasterEntity object
						v_master_entity_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_me_contact_object_list(z));

						-- Set Reference to the MasterEntity object
						-- 34021646ContactMasterEntityMap - xReference - _Reference_Is Used By
						pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_contact_entity_map_id, 34021646, v_master_entity_object_id);
						
					end loop;
				
				end if;
				
				-- Delete MA object id
				pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
												  
												 
					'.......Deleting Address: ' || v_master_address_object_list(y));
																 
				pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, null, v_master_address_object_list(y), 3199346);
				
											  
																		 
												  
		
				delete from ORM_REGISTRY where master_object_id = v_master_address_object_list(y);
																	
			end loop;
		
		end if;
		
	end loop;
		
end sp_delete_duplicate_orm_address;


----------------------------------------------------------------

-- Get the list of duplicate MasterEmailAddress objects
	-- For each duplicate EmailAddress, choose one to retain
		-- For the other duplicate EmailAddresses
			-- Get all the Entity references
				-- 	For each Entity reference, update the reference to point to the chosen EmailAddress
			-- Drop the duplicate EmailAddress

procedure sp_delete_dup_orm_emailaddress
(
     in_session_id                in     object.object_id%type,
     in_transaction_id            in     object.object_id%type
)
is

	v_procedure_name              constant  system_log.program_name%type := pkg_name||'sp_delete_dup_orm_emailaddress';

	v_emailaddress_object_list       	pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_me_contact_object_list       	pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_address_contact_object_list		pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
	v_first_ma_id       			number := null;
	v_master_entity_object_id		number := null;
	v_new_contact_entity_map_id		number := null;

begin

	pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
		'....Deleting duplicate ORM Master EmailAddresses ....');

	for x in (
		select upper(EMAIL_ADDRESS) as upper_email_address, count(*)
		from ORM_MASTER_EMAIL_ADDRESS
		group by upper(EMAIL_ADDRESS)
		having count(*) > 1 
	)
	loop

		pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
			'....Selecting EmailAddress: ' || x.upper_email_address);

		select MASTER_OBJECT_ID
		  bulk collect into v_emailaddress_object_list
		  from ORM_MASTER_EMAIL_ADDRESS
		 where upper(EMAIL_ADDRESS) = x.upper_email_address;

		pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
			'....Selecting EmailAddress: ' || x.upper_email_address || ' Count: ' || v_emailaddress_object_list.count);

		-- Choose one and delete the other instances
		if(v_emailaddress_object_list.count > 1)
		then
			v_first_ma_id := null;

			for y in v_emailaddress_object_list.first..v_emailaddress_object_list.last
			loop

				pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
					'.......Processing Master EmailAddress: ' || v_emailaddress_object_list(y));

				if(v_first_ma_id is null)
				then
					v_first_ma_id := v_emailaddress_object_list(y);
					continue;
				end if;

				-- Repoint other addresses to the first one
				-- Get all the MasterEntityContactMap objects pointing to this MasterEmailAddress object
				select
					r.object_id
				bulk collect into
					v_me_contact_object_list
				from
					object_relation r
				where
					r.relation_object_id = v_emailaddress_object_list(y)
				and
					r.object_relationship_bv_id = 34021546	-- _Reference_Uses Contact Object
				and
					r.relation_object_type_id = 3385546 -- MasterEmailAddress
				and
					r.object_type_id = 3385046;   -- 3385046MasterEntityContactMap

				if(v_me_contact_object_list.count > 0)
				then
					for z in v_me_contact_object_list.first..v_me_contact_object_list.last
					loop

						pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
							'.......Resetting reference for Object: ' || v_me_contact_object_list(z) || ' to EmailAddress:' || v_first_ma_id);

						pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_me_contact_object_list(z), 34021546, v_first_ma_id);

						-- Create new ContactMasterEntityMap object below the retained one.
						-- 3385146ContactMasterEntityMap
						pkg_os_object.sp_object_create(in_session_id, in_transaction_id, 3385146, v_first_ma_id, v_new_contact_entity_map_id);

						-- Get Parent MasterEntity object
						v_master_entity_object_id := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_me_contact_object_list(z));

						-- Set Reference to the MasterEntity object
						-- 34021646ContactMasterEntityMap - xReference - _Reference_Is Used By
						pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_contact_entity_map_id, 34021646, v_master_entity_object_id);

					end loop;

				end if;

				-- Delete MA object id
				pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
					'.......Deleting EmailAddress: ' || v_emailaddress_object_list(y));
					
				pkg_os_object.sp_object_delete(in_session_id, in_transaction_id, null, v_emailaddress_object_list(y), 3385546); -- MasterEmailAddress

				delete from ORM_REGISTRY where master_object_id = v_emailaddress_object_list(y);
			end loop;

		end if;

	end loop;

end sp_delete_dup_orm_emailaddress;

----------------------------------------------------------------
procedure sp_update_oci_process_date
(
     in_session_id         in   object.object_id%type,
     in_transaction_id     in   object.object_id%type,
     in_policy_trx_id      in   object.object_type_id%type,
	 io_action_outcome_id     in out  outcome.outcome_id%type
    
)
as
									  

     v_procedure_name    			constant system_log.program_name%type     	 := pkg_name||'sp_update_OCI_process_date';
     v_session_control            	pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     gbv_PolicyTrx_RefCoverages     constant object_type.object_type_id%type     := 212318;  --PolicyTransaction - xReference - _Reference_Coverages                                   -- NB PTP

	 v_object_index                          number;
     v_object_list                           pkg_os_object.t_object_list;
   
     v_policy_image_id    object.object_id%type;
    v_poltrx_process_date                  object_bv_value.business_variable_value%type;
									

begin

																  

     v_policy_image_id :=  pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_trx_id,gbv_PolicyTrx_RefCoverages);
														  
										   
								  
																						 
									

	 
	 v_poltrx_process_date := pkg_os_object_io.fn_object_bv_get
  
																		 
																							   
  
																								 
																								 
																								 
												 
												 
												 
  
	   
  
                                        (
                                            in_session_id,
                                            in_transaction_id,
										   
																				   
  
                                            in_policy_trx_id,
                                             PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxProcessDate
											
									   
	
										  
											  
											 
															 
                                        ); 
                    
    
	
	   

	  if v_session_control.gLogging_Full
		then

			pkg_os_logging.sp_log
			(
				in_session_id,
				in_transaction_id,
				v_procedure_name,
				'...... Searching for OCI object type under Policy Transaction ID: '||  in_policy_trx_id  ||
				' v_policy_image_id: '||v_policy_image_id ||' policy transaction process date: '||v_poltrx_process_date
    
			);

	  end if;
									 
														  
															  
    
	
	

		----------------------------------------------------------------------
    ---  Get all the in_list_object_type
    -----------------------------------------------------------------------	
	   
	   pkg_os_object_search.sp_object_children_of_type_get
        (
             in_session_id,
             in_transaction_id,
             v_policy_image_id ,
             pkg_os_policy_coverage.gObjType_ObjectCoverageInfo,
             v_object_list,
             NULL,
             true,
             false
        );

        if v_session_control.gLogging_Full
        then

             pkg_os_logging.sp_log
             (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
															 
																  
                  '...... Found gObjType_ObjectCoverageInfo ' ||v_object_list.count
              );

        end if;

        v_object_index := v_object_list.first;

				 
		
													 
																								  
							
						
										 
        while v_object_index is not null
        loop

             if v_session_control.gLogging_Full
             then

                  pkg_os_logging.sp_log
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '......... Updating the  OCI object id: ' ||v_object_list(v_object_index) ||' with process date: ' ||v_poltrx_process_date
                  );

              end if;
        
											  
												  
												 
																			
															   
		
			if (v_poltrx_process_date is not null ) then 
				
					 
				 
		
													 
																								  
							
						
										 
								  
																	 
																						 
																		  
																			  
		
													  
																						 
											   
																							
																								
																										   
			
														 
																					 
															  
																  
																			
														 
																		   
            
												  
													  
													 
																				
																  
																		  
			
                pkg_os_object_io.sp_object_bv_set
                (
                    in_session_id,
                    in_transaction_id,
												 
																   
                    v_object_list(v_object_index),
                    PKG_OS_POLICY_COVERAGE.gbv_ObjCoverage_TrxProcesDate ,
                    v_poltrx_process_date
			
																				 
											   
														   
															   
													 
														   
																		  
			
											   
																							
																								
																										   
			
														 
																					 
															  
																  
																			
														 
                ); 
                
					 
		  
			end if;
			
			v_object_index := v_object_list.next( v_object_index);

												  
												 
																   
															   
		
													   
														   
											  
																	   
																		
		
								  
																  
        end loop;

		 io_action_outcome_id := pkg_os_constant.gOutcome_OK;
exception when others then
		pkg_os_logging.sp_log_error(in_session_id ,
                      in_transaction_id ,
                      'sp_update_OCI_process_date' ,
                      'Error:'||sqlerrm);
    
	io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end  sp_update_oci_process_date;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--    sp_set_quote_filing
--
--  %ALGORITHM
--   The Quote transaction object id is being passed as an input in_quote_trx_id
--   LOB object id which are child of the passed QT object is fetched
--   LOB object id filing id is retrieved by calling the existing sp 'pkg_os_product_filing.sp_object_calculate_filing'
--   BV value for BV id 29608601 is set with the filing id returned in the above call 
--
--
--  %PARAM  in_session_id     Session ID
--  %PARAM  in_transaction_id   Transaction ID
--  %PARAM  in_object_id      in_quote_trx_id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

 PROCEDURE sp_set_quote_filing(
     in_session_id         in   object.object_id%type,
     in_transaction_id     in   object.object_id%type,
     in_quote_trx_id      in   object.object_id%type
)
as

v_procedure_name    			constant system_log.program_name%type     	 := pkg_name||'sp_set_quote_filing';
v_session_control            	pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
lob_filing_id      pd_filing.pd_filing_id%type;
lob_filing_code    pd_filing.pd_filing_code%type;
lob_filing_date    pd_filing.pd_filing_date%type;
v_object_list      pkg_os_object.t_object_list;
v_object_index     number;

begin
  

--   LOB object id which are child of the passed QT object id is being fetched
pkg_os_object_search.sp_object_children_of_type_get
        (
             in_session_id,
             in_transaction_id,
             in_quote_trx_id ,
              3339604,
             v_object_list
       );
 
 if v_session_control.gLogging_Full
             then      
   pkg_os_logging.sp_log
             (
                  in_session_id,
                  in_transaction_id,
                  v_procedure_name,
                  '...... Found LOB object id ' ||v_object_list.count
              ); 
end if;


  v_object_index := v_object_list.first;

--Looping for each LOB object id which are child of Quote transaction
        while v_object_index is not null
        loop

       if v_session_control.gLogging_Full
             then 

                  pkg_os_logging.sp_log
                  (
                       in_session_id,
                       in_transaction_id,
                       v_procedure_name,
                       '......... Updating  object id: ' ||v_object_list(v_object_index)
                  );

																  
																					 
																					 
																						  
																						  
									   
										   
  
																		 
																						   
																													 
																														  
																																													  
  
						  
											   
  
												
																	   
  
	   
  
																		 
																			 
																			
																					   
  
																			 
																				 
																				
																												   
  
										   
	
										  
											  
											 
																								   
																		 
												
																   
												 
							
							  
	
		   
  
																		  
										
																		   
  
																	  
																		  
																		  
																										   
																	  
															 
															 
															   
  
										   
	
										  
											  
											 
																		  
												 
	
  end if;
  
										  
  
										 
	
											 
	  
											
												
											   
																		  
															  
													   
													 
	  
			 
	
												 
      
  -- Getting the filing id for the LOB object id  
      pkg_os_product_filing.sp_object_calculate_filing(in_session_id,
                                                   in_transaction_id,
                                                   v_object_list(v_object_index),
                                                   lob_filing_id,
                                                   lob_filing_code,
                                                   lob_filing_date);
    -- Setting the returned filing id to the BV                                                
            pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_object_list(v_object_index),
                         29608601,
                         lob_filing_id
                    );   
      
			 
	
      v_object_index := v_object_list.next( v_object_index);

        end loop;  
exception when others then
  	pkg_os_logging.sp_log_error(in_session_id ,
                      in_transaction_id ,
                      'sp_set_quote_filing' ,
                      'Error:'||sqlerrm);
    

End sp_set_quote_filing;

PROCEDURE sp_customer_associated_partners(
     in_session_id         in   object.object_id%type,
     in_transaction_id     in   object.object_id%type,
     in_policy_id         in   object.object_id%type,
     in_customer_id        in   object.object_id%type     
)
as

v_procedure_name           constant system_log.program_name%type        := pkg_name||'sp_customer_partner_implicit';
v_session_control          pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
v_partner_id               object.object_id%type;
			 
  
														
		   
					
												
													
															   
													   
	
														  
	
								 

begin
     
	if
    pkg_os_object_io.fn_object_bv_get
    (
    in_session_id,
    in_transaction_id,
    in_policy_id,
    pkg_db_object.gbv_GenericObjSourceOrigin
    ) <> 1 -- Legacy
    then
	 
   --calling implicit for ref producing agency
     v_partner_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_id,26590907);
     if v_partner_id is not null 
       then
     sp_customer_partner_implicit(in_session_id, 
                                  in_transaction_id, 
                                  in_customer_id,
                                      v_partner_id);
     else 
         pkg_os_logging.sp_log(in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               'Ref producing agency is null for ' || in_customer_id );
     end if;
                                  
   --calling implicit for ref business introducer agency
     v_partner_id := null;
     v_partner_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_id,32984148);     
     if v_partner_id is not null 
       then
     sp_customer_partner_implicit(in_session_id, 
                                  in_transaction_id, 
                                  in_customer_id,
                                  v_partner_id
                                  );
     else 
         pkg_os_logging.sp_log(in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               'Ref business introducer agency is null for ' || in_customer_id );
     end if;
                                  
   --calling implicit for ref producer parent agency
     v_partner_id := null;
     v_partner_id := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_policy_id,32885348);     
     if v_partner_id is not null 
       then
     sp_customer_partner_implicit(in_session_id, 
                                  in_transaction_id, 
                                  in_customer_id,
                                  v_partner_id
                                  );                                                                    
     else 
         pkg_os_logging.sp_log(in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               'Ref producer parent agency is null for ' || in_customer_id );
     end if;
	 
	end if; 
                                                                 
exception when others then
     pkg_os_logging.sp_log_error(in_session_id ,
                      in_transaction_id ,
                      'sp_customer_associated_partners' ,
                      'Error:'||sqlerrm);
end sp_customer_associated_partners;

																		   
																		   
																			  
  
																		 
																					
																													 
																														  
												  
													
													
												  
							 
  
	   
  
																				  
																	  
																		  
																		
																
																	   
  
										   
										  
											  
											 
															
												 
		   
  
										  
  
																		 
										 
	
											 
	  
											
												
											   
																  
															 
	  
			 
	
													
																	 
																		 
																					 
																	 
																	   
																		
												 
													  
														  
																	  
												 
													   
	
														   
	
			 
		   
					
												
													
														
													   
	
						  

PROCEDURE sp_customer_partner_implicit(
     in_session_id         in   object.object_id%type,
     in_transaction_id     in   object.object_id%type,
     in_customer_id        in   object.object_id%type,
     in_partner_id         in   object.object_id%type
)
as
																							 
																													 
																														  
											
  
	   
  
													   
														   
													  
																								 
		 
	
												 
																	  
																		  
																	 
																  
									  
												   
													   
													
												   
		  
											
												
											   
																	
											  
			 
	
														   
						   
																	  
																		  
																	 
																  
									  
												   
													   
													
												   
		  
											
												
											   
																			  
											  
			 
	
													   
						   
																	  
																		  
																	 
																  
									  
												   
													   
													
												   
		  
											
												
											   
																		  
											  
			 
	
		   
  
		   
					
												
													
																	
													   
									  

																					
																					
																					
																					   
  
																		 
																							 
																													 
																														  
								  
	   
  
v_procedure_name           constant system_log.program_name%type        := pkg_name||'sp_customer_partner_implicit';
																							 
v_session_control          pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
																														  
v_count number :=0;
begin
     
     select count(1)
      into v_count
      from OBJECT_PARTNER
     where object_id = in_customer_id
       and partner_object_id = in_partner_id;
     
     if v_count = 0 
       then
                INSERT INTO OBJECT_PARTNER values(in_customer_id, 1, in_partner_id);
     end if;                                            
                                                                 
exception 
  when dup_val_on_index then
    if v_session_control.gLogging_Full
    then
          pkg_os_logging.sp_log(in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     '... Record already exists in OBJECT_PARTNER for the object id ' || in_customer_id ||
                     ', partner type id 1 and partner id ' || in_partner_id ||
                     '. Skipping the insert. STACK: '||SQLERRM);
    end if;
  when others then
    pkg_os_logging.sp_log_error(in_session_id ,
                      in_transaction_id ,
                      'sp_customer_partner_implicit' ,
                      'Error:'||sqlerrm);
end sp_customer_partner_implicit;

procedure sp_subm_create_customereligibility
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_id                  in        action.action_id%type,
     in_submission_id              in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type
)
as


   v_procedure_name              constant system_log.program_name%type    := pkg_name||'sp_subm_create_customereligibility';
   v_session_control             pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

   v_Master_Customer_id          object.object_id%type                      :=  pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_submission_id );
   v_Submission_Eligibility_id   object.object_id%type                      := pkg_os_object_search.fn_object_11_child_get( in_session_id, in_transaction_id, in_submission_id, gObjType_SubmissionEligibility );
   v_ptp_id                      object.object_id%type                      := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_submission_id, gbv_Sub_Path_ToPTP);
   v_policy_customer_id          object.object_id%type                      := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_ptp_id, gObjType_PolicyCustomer);
   
   v_customerEligibility_id      object.object_id%type;
   v_origin_source               object_bv_value.business_variable_value%type;

   
begin

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Creating CustomerEligibility Object with details from SubmissionEligibility for submission ID:'
               ||in_submission_id
               ||' v_Submission_Eligibility_id: '
               ||v_Submission_Eligibility_id
               ||' v_ptp_id: '
               ||v_ptp_id
         ||' v_policy_customer_id: '
         ||v_policy_customer_id
          );

     end if;

   ---
   ---  Get the source Dragon / Comprater
   ---
   v_origin_source := pkg_os_object_io.fn_object_bv_get(  in_session_id,
                                                          in_transaction_id,
                                                          v_Master_Customer_id,
                                                          gbv_source -- Object Source/Origin Type
                                                       );

   ----------------------------------------------------------------------------
   --   Now create private copy of Customer Eligibility ...
   ----------------------------------------------------------------------------

   --   Create the Customer Eligibility object as a copy of the Submission Eligibility object ...
   if v_origin_source in (gbv_source_UploadQuote)
   then
  
     pkg_os_object_copy.sp_object_duplicate
							  
											 
     (
											 
        in_session_id,
        in_transaction_id,
        v_Submission_Eligibility_id,
        v_customerEligibility_id
											   
																	  
											  
																		   
			 
					
												
													
																 
     );
								   

     --
     --   Set the type of the new object to be a CustomerEligibility as a child of PolicyCustomer
     --

     pkg_os_object.sp_object_transmute
     (
        in_session_id,
        in_transaction_id,
        v_customerEligibility_id,
        v_policy_customer_id,
        gObjType_CustomerEligibility
     );
   
   end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_subm_create_customereligibility;

																							 
																							 
																							 
																							 
																									  
  
																		 
																								   
																													 
																														  
  
																										  
																											  
																											  
																												   
																													   
																													  
																																	 
																											  
																												  
																												 
																													
																												   
																													   
																											  
																															  
  
												   
																		  
  
	   
  
										   
										  
											  
											 
																																   
											   
															   
																		   
																	
												  
	
		   
  
	   
										  
	   
																	   
																		   
																			  
																								
														   
  
																				
															
																				
  
																								  
													   
	
														   
															   
																		 
																	   
	
		
																								  
		
	
													  
														  
																 
															 
																	  
	
		   
  
														
  
										 

--OSPRODUCT-11853
  procedure sp_job_task_close(in_session_id         in object.object_id%type,
                              in_transaction_id     in object.object_id%type,
                              in_action_id          in action.action_id%type,
                              in_selected_object_id in object.object_id%type,
                              in_async_batch_id     in object.object_id%type,
                              in_task_id            in object.object_id%type default null) as
    v_datamart_tf char;
    v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                              'sp_job_task_close';
    v_session_user_id   object.object_id%type := pkg_os_wf_session.fn_user_get(in_session_id,
                                                                               in_transaction_id);
    v_session_user_name dragon_user.user_full_name%type := pkg_os_wf_session.fn_user_get(in_session_id,
                                                                                         in_transaction_id);
    g_task_editable_flag_No constant varchar2(5) := 'No';
    g_task_status_name      constant varchar2(10) := 'Completed';

    cursor c_task_associated_object(in_object_id object.object_id%type,
                                    in_batch_id  object.object_id%type) is
      select task_id
        from dragon_task
       where (task_object_id = in_object_id
          or task_object_id = in_batch_id
          or task_id = in_task_id)
         and task_status_id not in
             (pkg_os_wf_task.gTaskStatus_Complete,
              pkg_os_wf_task.gTaskStatus_NotApplicable,
              pkg_os_wf_task.gTaskStatus_Select);
  begin

    for r_task_object in c_task_associated_object(in_selected_object_id,
                                                  in_async_batch_id) loop
      begin

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          r_task_object.task_id,
                                          pkg_os_wf_task.gbv_TaskStatus,
                                          pkg_os_wf_task.gTaskStatus_Complete);

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          r_task_object.task_id,
                                          pkg_os_wf_task.gbv_TaskCompletedDate,
                                          to_char(sysdate,
                                                  pkg_os_constant.DragonDateFormatDefault));

        --
        -- Set Task Completed By to Session User
        --

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          r_task_object.task_id,
                                          pkg_os_wf_task.gbv_Task_CompletedBy,
                                          v_session_user_id);

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          r_task_object.task_id,
                                          pkg_os_wf_task.gbv_TaskAssignedTo,
                                          v_session_user_id);

        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          r_task_object.task_id,
                                          pkg_os_wf_task.gbv_assignedToQueue,
                                          NULL);

        update dragon_task t
           set TASK_STATUS_ID              = pkg_os_wf_task.gTaskStatus_Complete,
               TASK_COMPLETED_DATE         = sysdate,
               TASK_LAST_UPD_DT            = sysdate,
               TASK_EDITABLE_FLAG          = g_task_editable_flag_No,
               TASK_STATUS                 = g_task_status_name,
               TASK_COMPLETED_BY           = v_session_user_name,
               TASK_ASSIGNED_TO_NAME       = v_session_user_name,
               TASK_ASSIGNED_TO_ID         = v_session_user_id,
               TASK_ASSIGNED_TO_QUEUE_NAME = NULL,
               TASK_ASSIGNED_TO_QUEUE_ID   = NULL

         where task_id = r_task_object.task_id;

        pkg_os_action_log.sp_action_log(in_session_id,
                                        in_transaction_id,
                                        r_task_object.task_id,
                                        in_action_id,
                                        gOutcome_TaskResolved);

      exception
        when others then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' ...... Unable to update task:' ||
                                r_task_object.task_id || ' to complete.');

      end;

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' ...... Updated task:' ||
                            r_task_object.task_id || ':Completion Date:' ||
                            to_char(sysdate,
                                    pkg_os_constant.DragonDateFormatDefault));

    end loop;
  
	  

  end sp_job_task_close;

procedure sp_task_navigation
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_object_id                    in        object.object_id%type,
     io_action_outcome_id          in out    outcome.outcome_id%type    
)
as


																			 
																			 
																			 
																					  
  
   v_procedure_name              constant system_log.program_name%type    := pkg_name||'sp_task_navigation';
																				   
   v_session_control             pkg_os_session.r_dragon_session_control  := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
   
																		  
																		  
												   
												   
										 
												   
												   
  
   v_task_type                   object_bv_value.business_variable_value%type;
   v_task_associated_obj         object.object_id%type;
   v_ref_associated_policy       object.object_id%type;
   task_associated_obj_type      object_bv_value.business_variable_value%type;
   obj_type2                     object_bv_value.business_variable_value%type;
   obj_type3                     object_bv_value.business_variable_value%type;
   v_job_id                      object.object_id%type;
   v_async_batch_id              object.object_id%type;
   v_job_count_id                number:=0;
   v_async_daemon_id             object.object_id%type;
   v_usersession_attr_mt          object.object_id%type;
   
 begin
   pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Executing sp_task_navigation'
              
							
  
																   
																	   
																		 
																	   
													   
										
											
										   
															  
																	  
																		  
														   
						  
							
  
								 
									
									
									
									
									
	
		
	
																			   
																				   
																					 
																								  
																   
	
																				 
																					 
																					   
																																		
																	 
	
																	 
																	 
																							 
																								 
										  
											  
											 
																
																		
																			
															  
													
							
							  
																				   
		   
																		  
																			  
																				
																						
	  
																		  
																			  
																				
																						
	  
																					   
			 
																   
			
																			  
			   
	  
																		   
		   
									   
	  
													 
		   
												 
	  
														   
		   
													 
	  
														
		   
												   
	  
																	 
		   
															   
	  
													  
		   
												   
	  
													
		   
												  
	  
													 
									  
	  
													 
									  
	  
													   
		   
													  
	  
													  
		   
													 
	  
														  
		   
														 
	  
																
		   
											  
			 
										
		
										
										
		
										
										
		
										
										
		
																			   
			 
																
		
			
										
		
			   
	  
														
		   
													  
	  
																
		   
													  
	  
																			   
		   
												  
			 
														
		
												
			 
														
		
			
														
			   
	  
																
		   
												  
			 
														
		
			
																
			   
	  
														
		   
												  
			 
															 
		
			
															   
			   
	  
																		  
		   
															
	  
																 
		   
																			
			 
																
		
			
										
			   
	  
																		  
		   
									  
	  
																	   
		   
									  
	  
																			 
		   
									  
	  
																   
		   
									  
	  
																			  
		   
									  
	  
																				
		   
									  
	  
																			 
		   
									  
	  
																			 
		   
									  
	  
																			
		   
									  
	  
																		  
		   
									  
	  
																 
		   
									  
		
																					 
									   
	  
													 
									  
	  
													 
									  
	  
													 
									   
	  
													 
									  
	  
													 
									  
	  
													 
																				 
																					 
																				 
																			 
	  
														
															
																
												   
          );
									  
	  
		  
			 
											  
												  
												 
																							  
								
								  
		
						 
							   
								 
												
		
											  
												  
												 
																			  
											  
								
								  
		
									  
														  
																
								   
												  
																					 
																						 
																					 
																				 
          
												  
															  
																  
																	  
														 
																  
											
			
											 
			
															  
																  
																	  
														 
																   
											
			
				
										   
			
				   
			  
										 
          
v_task_type := pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id,
                                              200709 --Task Type
                                         ); 
if (v_task_type = 18148)
then 
 io_action_outcome_id := 55548;
elsif (v_task_type= 17748)
then 
 io_action_outcome_id := 54848;
 elsif (v_task_type= 17348)
then 
 io_action_outcome_id := 53148;

else
 
 v_task_associated_obj := pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id,
                                              22046205 --Task Associated Object 
                                         ); 

 v_ref_associated_policy := pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              in_action_object_id,
                                              29317202 --Reference_Associated PolicyQuote/Policy Transaction Policy
                                         );                      
 
 task_associated_obj_type := PKG_OS_OBJECT.FN_OBJECT_TYPE_GET(1,1,NVL (v_task_associated_obj,v_ref_associated_policy ) );
 
 if (task_associated_obj_type = 2276904) --Obj Type id PolicyTransactionPolicy
 then 
  obj_type2:= pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_action_object_id, '22046205.28555404.210149');
  
  obj_type3:= pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_action_object_id, '29317202.28555404.210149');

  if(NVL(obj_type2,obj_type3)=2356809) --QuoteTransaction's obj type: 2356809
   then 
      io_action_outcome_id := 11007; -- 11007: TaskSPolicyQuote
								 
	
			 
																   
	
				 
																											   
																			 
	
															  
															 
														   
																  
																   
  else io_action_outcome_id := 27302; -- 27302: TaskPolicyTransactionPolicy
  end if;
			 
																   
	
				 
																											   
																			 
	
															  
															 
														   
																  
																   
	
																																					   

elsif(task_associated_obj_type = 2202901)--ObjectAsynchronousAction
 then io_action_outcome_id := 115148; 
 
 elsif(task_associated_obj_type = 63) --Partner
  then io_action_outcome_id := 8605; --TaskAgent
  
   elsif(task_associated_obj_type = gObjType_Incident) --Incident
  then io_action_outcome_id := 52546; --TaskIncident
																														  
  
   elsif(task_associated_obj_type = 3203646) --Claim
  then io_action_outcome_id := 52446; --TaskClaims
													 
													 
  
   elsif(task_associated_obj_type = 3203746) --IncidentSubmission
  then io_action_outcome_id := 73546; --TaskIncidentSubmission

 elsif(task_associated_obj_type = 12) --Customer
  then io_action_outcome_id := 8705; --TaskCompany
								
								
  
   elsif(task_associated_obj_type = 24) --Policy
  then io_action_outcome_id := 8805; --TaskPolicy
  
   elsif(task_associated_obj_type = 3193646) 
  then io_action_outcome_id := 56548; 
  
  elsif(task_associated_obj_type = 3193546) 
  then io_action_outcome_id := 56648; 
															
							 
  
     elsif(task_associated_obj_type = 5) --Submission
  then io_action_outcome_id := 8905; --TaskSubmission
  
   elsif(task_associated_obj_type = 58) --Proposal
  then io_action_outcome_id := 18005; --TaskProposal
										  
											  
											 
																								  
										 
	
		   
  
  elsif(task_associated_obj_type = 440) --PolicyQuote
  then io_action_outcome_id := 11007; --TaskSPolicyQuote
										   
						
								   
  
    elsif(task_associated_obj_type = 629) --PolicyTransaction
  then 
    if(v_task_type = 4) --Audit follow-up
    then io_action_outcome_id := 12107;
																	 
																	   
															   
																		
																		   
	
													 
													  
	
																		
																		  
																			  
																		
																	  
	
																					  
																										  
																												 
																							
	
												  
													  
														  
													
												 
															  
	
													
													  
														  
													
												 
																
	
												   
													  
														  
													
												 
															   
	
												
													  
														  
													
												 
														   
	
													   
														 
														
	
								   
													  
														  
													
												 
																	
																						  
	
		
																												
									 
	
							   
																											
													  
	
							 
								
												
									 
									  
																			
									   
												
															   
	
										  
													  
														  
													
												 
															 
    
    elsif(v_task_type = 16831)
    then io_action_outcome_id := 52631;
																	   
															   
																		
																		   
    
    elsif(v_task_type = 16931)
    then io_action_outcome_id := 52631;
							  
										  
		
    
    elsif(v_task_type = 17031)
    then io_action_outcome_id := 54231;
																			  
																		
																	  
    
    elsif(v_task_type = 19046) --Agency Recon UnBooked Transaction Pending
    then io_action_outcome_id := 44646; --ExittoAgencyReconPage
																												 
																							
														  
													
												 
																	
																						  
    
												  
													  
														  
													
												 
															  
	
													
													  
														  
													
												 
																
	
												   
													  
														  
													
												 
															   
	
												
													  
														  
													
												 
														   
	
													   
														 
														
	
								   
													  
														  
													
												 
																	
																						  
	
		
																												
									 
	
							   
																											
													  
	
							 
								
												
									 
									  
																			
									   
												
															   
	
										  
													  
														  
													
												 
															 
	
												   
	
		
																										  
							  
										  
		
	
		
	
																	   
																			  
								   
													  
														  
													
												 
																	
																						  
	
    else io_action_outcome_id := 12107;
    
    end if;

  elsif(task_associated_obj_type = 319) --Household
  then io_action_outcome_id := 23905; --TaskHousehold
  
  elsif(task_associated_obj_type = 2626646) --OrderedPOASet
  then io_action_outcome_id := 37846; --TaskLogPOASet
										  
											  
											 
																
	
		   
  
  elsif(task_associated_obj_type = 2365946) --BillingAccountTransactionSet
  then 
  if(v_task_type = 15146) --Cash Apply Task
  then io_action_outcome_id := 44346; --TaskCashApply
											  
											 
																
	
		   
  
  elsif(v_task_type = 16846) --Cash Recon
    then io_action_outcome_id := 44346; --TaskCashApply
    
  else io_action_outcome_id := 44346; --TaskCashApply
  end if;
												   
																 
														  
    
  elsif(task_associated_obj_type = 2365046) --FITransaction
  then 
  if(v_task_type = 15146) --Cash Apply Task
  then io_action_outcome_id := 44346; --TaskCashApply
    
  else io_action_outcome_id := 42146; --FITransactionCashTask
  end if;
																											   

																			 
																			 
																			 
																						 
													
											
											
											
  
												
												
	   
  
  elsif(task_associated_obj_type = 2365246) --FItem
  then 
  if(v_task_type = 15146) --Cash Apply Task
  then io_action_outcome_id := 44446; --TaskFitemCashApply
																	   
																		   
																	   
								
						   
																					 
																						 
																					
																				
																					 
																						 
																						 
																				
    
  else io_action_outcome_id := 9005; --TaskUnknownObjectType
																				 
																					 
																					 
																			 
																						   
																							   
																								   
																				  
													 
														 
											   
														 
														  
														
															
															
												   
															 
	  
			 
  end if;
  
  elsif(task_associated_obj_type = 3176546) --CustomerOverlineRequest
  then io_action_outcome_id := 46846; --TaskOverlineRequest
  
  elsif(task_associated_obj_type = 2365346) --BillingAccount
  then 
  if(v_task_type = 19046) --Agency Recon UnBooked Transaction Pending
  then io_action_outcome_id := 44646; --ExittoAgencyReconPage
    
  else io_action_outcome_id := 42246; 
  end if;
  
  elsif(task_associated_obj_type = 3336946) --ClaimTransactionReserve
  then io_action_outcome_id := 65546; 

  elsif(task_associated_obj_type = 3396246) --ClaimTransactionEdit
																			 
																				
														
								   
														
								   
								   
								   
								   
												  
												  
												  
												  
								 
								 
								 
								   
								   
								   
	   
																						 
																							 
																						
																					
																				 
																					 
  then io_action_outcome_id := 75646; 
  
  elsif(task_associated_obj_type = 3336746) --ClaimTransactionAssignment
  then io_action_outcome_id := 47946; 
  
  elsif(task_associated_obj_type = 3331746) --ClaimTransaction
																	 
																	  
																		  
																	 
																
																	  
															   
															  
										  
											
	
										   
																
																				  
																					  
																			   
																			  
																				  
																					  
																			   
																			  
											
												
									  
																		
														   
													  
																				   
																					   
																				
																			   
	  
																		
																			
											 
																			
																				
																		 
																	  
																				   
															
		
													 
																		  
														 
															 
													  
															
													
																				   
				   
		
															
															 
														   
											  
														 
															 
												   
													  
															
															
																
															  
													   
																	  
													   
																
				
														 
				   
																		 
															  
															
																
															  
													   
																			 
																		   
															
																
															  
													   
																			  
																		   
				   
														  
															  
  then io_action_outcome_id := 47946; 
								   
								   
												  
												  
												  
												  
								 
								 
								 
								   
								   
								   
	   
																						 
																							 
																						
																					
																				 
																					 
																			
																		
													 
																		 
																			 
																	
																	 
																	  
																		  
																	 
																
																	  
															   
															  
										  
											
	
										   
																
																				  
																					  
																			   
																			  
																				  
																					  
																			   
																			  
											
												
									  
																		
														   
													  
																				   
																					   
																				
																			   
	  
																		
																			
											 
																			
																				
																		 
																	  
																				   
															
		
													 
																		  
														 
															 
													  
															
													
																				   
				   
		
															
															 
														   
											  
														 
															 
												   
													  
															
															
																
															  
													   
																	  
													   
																
				
														 
				   
																		 
															  
															
																
															  
													   
																			 
																		   
															
																
															  
													   
																			  
																		   
				   
														  
															  
													   
													 
															   
		
			   
															 
			   
		   
	  
																											   

																			   
																			   
																				  
  
  elsif(task_associated_obj_type = 3345646) --ClaimTransactionAddSubClaim
  then io_action_outcome_id := 47946; 
																						
  
  elsif(task_associated_obj_type = 3342246) --ClaimTransactionCancelPayment
  then io_action_outcome_id := 68346; 
																
  
  elsif(task_associated_obj_type = 3351946) --ClaimTransactionInspection
  then io_action_outcome_id := 47946; 
												  
  
  elsif(task_associated_obj_type = 3337746) --ClaimTransactionLitigation
  then io_action_outcome_id := 47946; 
  
  elsif(task_associated_obj_type = 3336846) --ClaimTransactionFinancial
  then io_action_outcome_id := 47946; 
								   
						  
																  
  
  elsif(task_associated_obj_type = 3337046) --ClaimTransactionService
  then io_action_outcome_id := 47946; 
  
  elsif(task_associated_obj_type = 2563801) --EntityCalendar
  then io_action_outcome_id := 65148; 
			 
  elsif (task_associated_obj_type = 2598546) then    --TaskLegalCouncelManuscript OSPRODUCT-27362
        io_action_outcome_id := 197148;	   
  
  elsif(task_associated_obj_type = 3342746) 
  then io_action_outcome_id := 47946; 
																	   
  
  elsif(task_associated_obj_type = 3337146) 
  then io_action_outcome_id := 47946; 
																   
  
  elsif(task_associated_obj_type = 3331846) 
  then io_action_outcome_id := 127148; 
													   									   												
  
  elsif(task_associated_obj_type = 2346713) 
  then io_action_outcome_id := 54248; 
																				 
																				 
  
  elsif(task_associated_obj_type = 2358101) 
  then io_action_outcome_id := 58140; 
  
    elsif (task_associated_obj_type = 4196348)  --ReinsuranceArrangement
    then io_action_outcome_id := 283148;
												  
  
  elsif(task_associated_obj_type = 2357701) 
  then
  v_usersession_attr_mt := pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              in_session_id,
                                              34085846 
                                         ); 
                                         
  pkg_os_object_io.sp_object_bv_set
                      (
                        in_session_id  ,        
                        in_transaction_id,    
                        v_usersession_attr_mt	,
                        33059648,
                        v_task_associated_obj	
                      );
   io_action_outcome_id := 63348; 
  
   else
     begin
       pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Checking whether any Jobs were associated with this task'
             
          );

     select count(*) 
          into v_job_count_id  
           from async_job_status
          where
              job_id = v_task_associated_obj; 
              
              pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...Jobs related to Task: v_job_count_id ='
               ||v_job_count_id
               
          );
              
            if(v_job_count_id>0)
              then 
                select job_id, async_batch_id, async_daemon_id 
                into v_job_id , v_async_batch_id, v_async_daemon_id
                 from async_job_status
                where
                    job_id = v_task_associated_obj; 
                           v_usersession_attr_mt := pkg_os_object_io.fn_object_bv_get
                                        (
                                              in_session_id,
                                              in_transaction_id,
                                              in_session_id,
                                              34085846 
                                         ); 
                                         
                      if (v_async_batch_id is not null)
                      then
                        pkg_os_object_io.sp_object_bv_set
                      (
                        in_session_id  ,        
                        in_transaction_id,    
                        v_usersession_attr_mt	,
                        33059648,
                        v_async_batch_id	
                      );
                       io_action_outcome_id := 63348; 
                      
                      
                      elsif (v_job_id is not null)
                      then
                       
                       pkg_os_object_io.sp_object_bv_set
                      (
                        in_session_id  ,        
                        in_transaction_id,    
                        v_usersession_attr_mt	,
                        33059648,
                        v_async_daemon_id		
                      );
                       io_action_outcome_id := 66248; 
                      
                      else 
                      io_action_outcome_id := 9005;
                      
                      end if;
			else 
			io_action_outcome_id := 9005;
	
			end if;   

    end;

  
  end if;
																	 
																		 
																	 
  
 end if;
																   
  
 end sp_task_navigation; 
 

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %name
--        sp_policy_cost_asofdt
--
--   %usage
--        Calculates the earned/unearned premium for each policy.
--
--   %algorithm
--        1. Update the earned policy cost, equity date and other policy specific variables in policy_premium
--        2. Carry out other nightly processes required and list them here.
--
--   %param    in_session_id                 user session id
--   %param    in_transaction_id             transaction id
--   %param    in_action_id                  in_action_id
--   %param    in_action_object_id           in_action_object_id
--   %param    in_current_date_time          in_current_date_time
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_policy_earned_prem_asofdt
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_object_id           in             object.object_id%type,
     in_current_date_time          in             date,
	io_outcome_id				in out		outcome.outcome_id%type
)
as

     v_procedure_name              constant system_log.program_name%type   :=   'sp_policy_earned_prem_asofdt';
     v_session_control             pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_policy_id                   object.object_id%type     :=   in_policy_object_id;
     -- v_policy_trx_count            object.object_id%type     :=   pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_policy_id, 211995);
     v_caused_by_trx_id            object.object_id%type     :=   null;
     v_policy_term_id              object.object_id%type     :=   null;

     v_job_id                      object.object_id%type;
     v_earned_policy_cost          number;
     v_unearned_policy_cost        number;
     v_written_policy_cost         number;
     v_received_amount             number;
     v_equity_date                 date;
     v_policy_current_date         date;

	v_claim_payment_amt			number(18,2);
	v_partner_id				number(38);

	v_tab_trx_cvg_premium        pkg_db_policy_earning.t_trx_coverage_premium;

	v_policy_eff_dt			date;
	v_policy_exp_dt			date;
	v_current_date_time			date := trunc(in_current_date_time);
	v_first_day				date;
	
begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Calculating Earned Premium and Equity Date for Policy ID: ' || v_policy_id);

     end if;

	-- Get the Policy Eff and Exp dates
	select trunc(POLICY_EFFECTIVE_DATE), POLICY_EXPIRATION_DATE
	  into v_policy_eff_dt, v_policy_exp_dt
	  from DRAGON_POLICY
	 where POLICY_ID = v_policy_id;
	 
	 if(v_current_date_time >= v_policy_eff_dt and v_current_date_time <= v_policy_exp_dt)
	 then
	 
		pkg_db_policy_earning.sp_policy_earning_calc
		(
			in_session_id,
			in_transaction_id,
			v_current_date_time,
			v_policy_id,
			v_earned_policy_cost, 
			v_unearned_policy_cost
		);
	
		v_written_policy_cost := v_earned_policy_cost + v_unearned_policy_cost;
	 
		-- 3184484624Policy._Reference_Current Term based on Rolled Date
		v_policy_term_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_policy_id, 31844846);
		
		v_received_amount := pkg_db_functions.fn_amt_cash_applied_or_posted
		(
			v_policy_id,
			pkg_os_constant.gobjType_Policy,
			pkg_db_functions.gFITrxType_Cash_Apply,
			v_policy_term_id
		);
	 
		-- 32002946 - BI - Earned Premium As of Date
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 32002946, v_earned_policy_cost);
		
		-- 32003046 - BI - Unearned Premium As of Date
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 32003046, v_unearned_policy_cost);

		-- 32003146 - BI - Written Premium As of Date
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 32003146, v_written_policy_cost);

		-- 33088648 - BI - Premium Recieved Amount
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 33088648, v_received_amount);
		
		-- 32003346 - BI - Earned Premium As of Month End
		-- 32003446 - BI - Unearned Premium As of Month End
		-- 32003546 - BI - Written Premium As of Month End
		
		-- 32003246 - BI - As of Date
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 32003246, 
									to_char(v_current_date_time, pkg_os_constant.DragonDateFormatDefault));

		--
		-- Get the Equity Date for this Policy using BV 3177494624Policy.Equity Date (Current Term) - Calculated
		-- Configured in transformation

		-- Determine Claim amount
		-- Based on the AsOfDt, get the claim transaction closest to the AsOfDt and determine the Claim amount
		v_first_day := trunc(v_current_date_time, 'MM');
		
		select sum(ct.payments)
		into
			v_claim_payment_amt
		from
			dragon_claim_trx ct, dragon_claim c
		where
			ct.claim_id = c.claim_id
		and
			c.policy_id = v_policy_id
		and
			trunc(ct.claim_trx_process_date) between trunc(v_first_day) and trunc(v_current_date_time)
		and
			ct.claim_trx_type_id = 5	-- Payment
		and
			ct.claim_trx_object_state_id = 60148;	-- Disbursed	

		-- 33088748 - BI - Claim Paid Amount
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 33088748, v_claim_payment_amt);

		io_outcome_id := pkg_os_constant.gOutcome_OK;
		
		/*	
			select dc.CLAIM_ID, dc.TOTAL_PAYMENT, dc.TOTAL_INCURRED, dc.TOTAL_RECOVERY, dc.OUTSTANDING_RESERVE
			  from DRAGON_CLAIM dc
			 where dc.POLICY_ID = v_policy_id;
		*/
		
	 else
		
	--	io_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;
    -- OSPRODUCT-15615 Incase of Expired Policies/Future Effective Policies.
    -- 32003246 - BI - As of Date
       pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_policy_id, 32003246,
                  to_char(v_current_date_time, pkg_os_constant.DragonDateFormatDefault));
 
  	   io_outcome_id := pkg_os_constant.gOutcome_OK;
	 
	 end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '.......Outcome ' || io_outcome_id);

     end if;
	
exception
     when others then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
               'Error in Updating policy: ' || v_policy_id || sqlerrm);
			
		io_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;

end sp_policy_earned_prem_asofdt;

-------------------------------------------------------------------------------------------------------------

 procedure sp_create_cyber_location 
          (in_Session_id object.object_id%type,
          in_transaction_id object.object_id%type,
          in_object_id object.object_id%type,
          io_outcome_id in out outcome.outcome_id%type)
as
v_product_id pd_product.pd_product_id%type;
v_jurisdiction_id object.object_id%type;
v_location_id object.object_id%type;
v_new_location_id object.object_id%type;

v_custjurisdiction_id  object.object_id%type;
v_custlocation_id object.object_id%type;
begin
  
  v_product_id := pkg_os_product.fn_object_product_get(in_session_id,in_transaction_id,in_object_id);
  if v_product_id = 87148 then
--  find jurisdiction
    v_jurisdiction_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,in_object_id,3381248);
    v_location_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_jurisdiction_id,3381348);
    
    if v_location_id is null then
       v_custjurisdiction_id := pkg_os_object_io.fn_object_bv_get(in_session_id ,in_transaction_id,v_jurisdiction_id ,33082848);
       v_custlocation_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_custjurisdiction_id,320);
       pkg_os_object.sp_object_create(in_session_id,in_transaction_id,3381348,v_jurisdiction_id,v_new_location_id);
       pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_new_location_id,33085248,v_custlocation_id);

     end if;
 end if;
 
 io_outcome_id := 22;
 
 exception when others then
   io_outcome_id := 22;
   
end;

procedure sp_create_audit_class_gl 
  (in_Session_id object.object_id%type,
in_transaction_id object.object_id%type,
in_object_id object.object_id%type)
as
v_object_list pkg_os_object.t_object_list;
v_object_index number;
v_audit_object_list pkg_os_object.t_object_list;
v_audit_object_index number;
v_class_exposure number;
v_sum_audited_exposure number;
v_audit_Class_exposure number;
v_auditclass_id object.object_id%type;
v_ptp_id object.object_id%type;
v_class_id  object.object_id%type;
v_audit_class_id object.object_id%type;
v_effective_date date;
v_audit_effective_date date;
v_audit_expiration_date date;
v_audit_frequency number;
v_addition number;
v_class_audit_frequency number;
begin
  v_ptp_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id,in_object_id,2276904);
  v_effective_date := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_ptp_id,504),'yyyymmddhh24miss');
  v_audit_frequency := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_ptp_id,28416909);
  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,in_object_id,2185405,v_object_list,211662,true);
  if nvl(v_audit_frequency,0) <> 0 then
  v_object_index := v_object_list.first;

          
            
          while v_object_index is not null loop
            v_class_id := v_object_list(v_object_index);
           v_class_exposure:= pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_class_id,26640805);
           v_sum_audited_exposure := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_class_id,33092848);
           pkg_os_logging.sp_log(in_session_id,in_transaction_id,'audit','v_class_exposure:'||v_class_exposure||' v_sum_audited_exposure:'||v_sum_audited_exposure);
                     v_class_audit_frequency := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_class_id,27548809);
 
           if nvl(v_class_exposure,0) <> nvl(v_sum_audited_exposure,0) or nvl(v_class_audit_frequency,0) <> nvl(v_audit_frequency,0) then
             --delete the existing audit objects
               pkg_os_object_search.sp_object_children_of_type_get(in_session_id,in_transaction_id,v_class_id,3382048,v_audit_object_list);
               v_audit_object_index := v_audit_object_list.first;
               
               while v_audit_object_index is not null loop
                 v_audit_class_id := v_audit_object_list(v_audit_object_index);
                 pkg_os_object.sp_object_delete(in_session_id,in_transaction_id,v_class_id,v_audit_class_id,3382048);
               v_audit_object_index := v_audit_object_list.next(v_audit_object_index);
               end loop;

          
               
              v_audit_Class_exposure := round(v_class_exposure/v_audit_frequency);
              v_addition := 12/v_audit_frequency;
            for i in 1..v_audit_frequency loop
              pkg_os_object.sp_object_create(in_session_id,in_transaction_id,3382048,v_class_id,v_auditclass_id);
              pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_auditclass_id,33091848,v_audit_Class_exposure);
              if v_audit_expiration_date is not null then
                v_audit_effective_date:= v_audit_expiration_date;
              else
              v_audit_effective_date := v_effective_date;
              end if;
              v_audit_expiration_date := add_months(v_audit_effective_date,v_addition);
              pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_auditclass_id,33091648,to_char(v_audit_effective_date,'yyyymmddhh24miss'));
              pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_auditclass_id,33091748,to_char(v_audit_expiration_date,'yyyymmddhh24miss'));
            end loop;
                          pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_class_id,27548809,v_audit_frequency);

            end if;
          v_object_index := v_object_list.next(v_object_index);
          end loop;
     end if;
end;
-------------------------------------------------------------------------------------------------------------

  procedure sp_post_snapshot_feeder( in_session_id       in object.object_id%type,
                                    in_transaction_id   in object.object_id%type,
                                    in_object_id        in object.object_id%type)
    is
    
        v_session_control 	pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
        v_procedure_name 	constant system_log.program_name%type := 'sp_post_snapshot_feeder';
    
        v_object_type_id         object_type.object_type_id%type;
        v_object_type_row        pkg_os_object_type.r_object_type;
        v_bv_row				 pkg_os_bv.getBusinessVariableList%rowtype;
    
        v_dm_name                varchar2(50);
        v_dm_pk_name             varchar2(50);
        v_dm_id                  object_datamart.datamart_id%type;
    
        v_dmc_column_physical_name     object_datamart_column.column_physical_name%type;
    
        v_cursor                 number;
        v_row_count              number;
        update_statement         varchar2(500);
        v_date_val               date;
        v_bv_value               object_bv_value.business_variable_value%type;
		
		gbv_snapShotGenerationDate                  constant    business_variable.business_variable_id%type := 33074648;
        
    begin
        if in_object_id is null then 
			return;
        end if;
        
        v_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, in_object_id );
         
        v_bv_row := pkg_os_bv.fn_business_variable_row( gbv_snapShotGenerationDate ); 
        v_bv_value := to_char(sysdate + TO_DSINTERVAL('0 00:00:02'), pkg_os_constant.DragonDateFormatDefault);
        
        pkg_os_object_io.sp_object_bv_raw_set(in_session_id,
                                                in_transaction_id,
                                                in_object_id,
                                                v_bv_row.container_object_type_id,
                                                gbv_snapShotGenerationDate,
                                                v_bv_value,
                                                true,
                                                null);
    
        --Fetch the datamart information
        v_object_type_row   := pkg_os_object_type.fn_object_type_row(in_session_id, in_transaction_id, v_object_type_id );
        
        v_dm_name           := v_object_type_row.datamart_table_name;
        v_dm_pk_name        := v_object_type_row.datamart_table_pk_name;
        v_dm_id             := v_object_type_row.datamart_id;
    
        if v_dm_id is null 
        then
            pkg_os_logging.sp_log_error( in_session_id, 
                                in_transaction_id, 
                                v_procedure_name, 
                                'Datamart does not exist for this object type. ObjectID:' 
                                || in_object_id || ' ObjectType:' || v_object_type_id);
    
            return;
        end if;
    
        begin
            -- Fetch the "BI Process Date" column for this datamart
            select column_physical_name
                into v_dmc_column_physical_name
            from
                object_datamart_column
            where
                object_datamart_id = v_dm_id
                and REGEXP_LIKE (column_bv_path, '^' || gbv_snapShotGenerationDate || '\D.*$');
        exception
            when others then
                pkg_os_logging.sp_log_error( in_session_id, 
                                            in_transaction_id, 
                                            v_procedure_name, 
                                            'Could not locate column Snapshot Feeder Date, Failed to update datamart.');
                return;
            
        end;
        
        update_statement :=  'update ' || v_dm_name 
                            || '  set ' || v_dmc_column_physical_name || ' = '
                            || ':' || lower(v_dmc_column_physical_name) 
                            || ' WHERE ' || v_dm_pk_name || '= :' || lower(v_dm_pk_name) ;
        
        v_date_val := to_date(v_bv_value, pkg_os_constant.DragonDateFormatDefault);
    
        if v_session_control.gLogging_Full
        then
           pkg_os_logging.sp_log
           (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updating Snapshot Feeder Date to Datamart:' || update_statement || ', ID:' || in_object_id
                || ', val:' || v_date_val
           );
        end if;
        
        v_cursor := dbms_sql.open_cursor;
        
        -- Parse the update statement
        dbms_sql.parse (v_cursor, update_statement, dbms_sql.native);
        
        dbms_sql.bind_variable (v_cursor, lower(v_dmc_column_physical_name), v_date_val);
        dbms_sql.bind_variable (v_cursor, lower(v_dm_pk_name), in_object_id);
    
        v_row_count := dbms_sql.execute(v_cursor);
        dbms_sql.close_cursor(v_cursor);
        
    end sp_post_snapshot_feeder;
--------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------
--UTPRODUCT-4903 start
procedure sp_check_existing_policy( in_session_id         in object.object_id%type,
                  in_transaction_id     in object.object_id%type,
                  in_ptp_id           in object.object_id%type,
                  io_action_outcome_id  out outcome.outcome_id%type)
    is
    
        v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
        v_procedure_name    constant  system_log.program_name%type := 'sp_etl_process_complete';
        v_customer_id       object.object_id%type;
        v_orm_id        varchar2(50);
        v_lob_id        number;
        v_primary_entity_id   object.object_id%type;
        v_policy_count      number;
        v_rejected_state    number  := 23005;
        v_outcome_duplicate   number  := 77048;
        v_program_id             number;
		v_active                 constant number  := 71;
    
    cursor c_cust (in_orm_id in varchar2)
    is
    select * from dragon_customer c where  c.entity_relationship_mgmt_id = in_orm_id;
    
begin
  
  v_customer_id :=   pkg_os_object_search.fn_object_ultimate_parent_get
                      ( 
                         in_session_id, 
                         in_transaction_id, 
                         in_ptp_id 
                      );                    
  v_primary_entity_id :=  pkg_os_object_io.fn_object_bv_get
                      (
                        in_session_id,
                        in_transaction_id,
                        v_customer_id,
                        gbv_CustomerPrimaryEntity
                      );                  
  v_orm_id    := pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      v_primary_entity_id,
                      gbv_ORMID
                    );
  v_lob_id    := pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      in_ptp_id,
                      gbv_LOB
                    );
  v_program_id   := pkg_os_object_io.fn_object_bv_get
                    (
                      in_session_id,
                      in_transaction_id,
                      in_ptp_id,
                      gbv_program
                    );               
  
  for in_cust_cur in  c_cust (v_orm_id) loop
															 
									   
																		
  
    select count(1) into v_policy_count from dragon_policy p where 
    p.customer_id = in_cust_cur.customer_id and p.policy_product_id = v_lob_id 
    and (p.policy_program_id is null or p.policy_program_id = v_program_id)
    and p.policy_object_state_id = v_active;
  
    if v_policy_count > 0 then 
    
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                        in_transaction_id,
                        in_ptp_id,
                        gbv_ObjectState,
                        v_rejected_state);
      
      io_action_outcome_id := v_outcome_duplicate;
    
    end if;
  
  end loop;
						
																				   
																				   
																				   
																						 
  
   if io_action_outcome_id is null then 
      
    io_action_outcome_id :=  pkg_os_constant.gOutcome_OK;
    
   end if ;
                    
end sp_check_existing_policy;
----UTPRODUCT-4903 end 
										
										
							   
								   
  
---
--- UTXPRODUCT-157 Start
---
													   
  
procedure sp_update_expiration_date
(   
    in_session_id     in    object.object_id%type,
    in_transaction_id in    object.object_id%type,
    in_pt_id          in    object.object_id%type
) 
as
  
    v_procedure_name    constant system_log.program_name%type := pkg_name ||'sp_update_expiration_date';
																								
																						 
																		   
																			   
																		   
																						
																		   
																			   
																				 
																		
    v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
    
																		   
																			   
																		   
																						
																		   
																			   
																				 
																		
																		   
																			   
																	   
																	  
																		   
																			   
																	   
																		  
  
											
    
    gbv_PolicyTrx_source       constant number(12) := 27926602;
    gbv_PolicyExpDate          constant number(12) := 499;
    gbv_PolicyEfctvDate        constant number(12) := 504;
    genum_legacy               constant number(12) := 1;
										   
											
												
												 
    
    v_PolicyTrx_source         number;
	  
														
															
													
														  
															
	  
													
	  
			 
    
    v_policy_id                object.object_id%type;
    v_ptp_id                   object.object_id%type;
    v_master_policy_id         object.object_id%type;
    v_LastProcessedTransaction object.object_id%type;
    v_transaction_type_id      object.object_id%type;
    
    v_ptp_efctvdate            object_bv_value.business_variable_value%type;
    
    v_datamart_tf              char := 'T';
  
							   
						
	
														
																				   
																				   
																				  
  
											
  
begin

      ---
      --- Initialization
      ---  
      v_ptp_id                   := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_pt_id, pkg_os_policy_transaction.gbv_policytrxcoverages);
      v_master_policy_id         := pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, in_pt_id);
      v_PolicyTrx_source         := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_pt_id, gbv_policytrx_source);
      v_LastProcessedTransaction := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_master_policy_id, pkg_os_constant_bv.gbv_lastprocessedtransaction);
      v_transaction_type_id      := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_pt_id, pkg_os_policy_transaction.gbv_policytrxtype);  
      v_ptp_efctvdate            := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_ptp_id, gbv_policyefctvdate); 
       
      if v_session_control.gLogging_Full 
      then
      
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Transaction Coverage Policy Image : '          || v_ptp_id ||
                'Master Policy ID : '                           || v_master_policy_id||
                'PolicyTransaction Source System : '            || v_PolicyTrx_source||
                'Last transacation processed on the Policy : '  || v_LastProcessedTransaction||
                'Policy Transaction Type ID : '                 || v_transaction_type_id ||
                'Policy Exffective Date  : '                    || v_ptp_efctvdate
            );
            
      end if;                                                                    
  
													   
													   
													   
													   
											 
  
		 
																					
																						
																			   
																														
  
																					 
																						 
																				 
																					
																						
																			   
																							
																					
																						
																						 
																													   
																					
																						
																			   
																												   
										 
  
											  
												  
												 
											   
																																																																											
																						
																						 
																							
			   
  
		  
																	   
			
																		 
			
																					  
			
				
		   
																						 
      ---
      --- Check the following on the incoming PT 
      --- a) Transaction Type  = Renewal
      --- b) The Last transaction processed on the Policy is null i.e the incoming Renewal is the only transaction on the Policy
      --- c) Source Of PT is Legacy.
      
      if 
          (
              nvl(v_policytrx_source ,0)    = genum_legacy    
          and  
              nvl(v_transaction_type_id,0)  = pkg_os_constant.gpolicytran_renewal  
          and
              v_lastprocessedtransaction is null     
          ) 
      then 
      
          ---
          --- Set the Effective date from the PTP as the expiration date on the Master Policy
          ---
      
          pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_master_policy_id,gbv_PolicyExpDate,v_ptp_efctvdate );
      
      
               
          pkg_os_datamart.sp_datamart_update_row
          (
            in_session_id         => in_session_id,
            in_transaction_id     => in_transaction_id,
            in_object_id          => v_master_policy_id,
            io_datamart_tf        => v_datamart_tf
          );                                 
      
      end if;--- Check the following on the incoming PT 
  
end sp_update_expiration_date;
---
--- UTXPRODUCT-157 End
---
-------------------UTXPRODUCT-369-------------------
  
											
   procedure sp_check_duplicate_policy(in_session_id        in object.object_id%type,
                                     in_transaction_id    in object.object_id%type,
                                     in_ptp_id            in object.object_id%type,
                                     io_action_outcome_id out outcome.outcome_id%type) is
											   
    v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                       in_transaction_id);
    v_procedure_name constant system_log.program_name%type := 'sp_check_duplicate_policy';
    v_customer_id       object.object_id%type;
    v_pol_trx_id        object.object_id%TYPE;
    v_curr_Pol_eff_date date; 
    v_curr_Pol_exp_date date;
    v_orm_id            varchar2(50);
    v_lob_id            number;
    v_primary_entity_id object.object_id%type;
    v_policy_count      number;
    v_rejected_state    number := 23005;
    v_outcome_duplicate number := 77048;
    v_program_id        number;
    v_Ref_CurrPolPendCancellation object_bv_value.business_variable_value%type;
    v_target_cancellation_date    date;
   -- v_active varchar2(50) := 'Active';   Active Policy Term
   v_erp_ind      number;
    

    cursor c_cust(in_orm_id in varchar2) is
      select *
        from dragon_customer c
       where c.entity_relationship_mgmt_id = in_orm_id;
       
    cursor c_policy(in_cus_id in varchar2, in_lob_id in varchar2, in_program_id in varchar2)is
											  
												 
      select *
        from dragon_policy p
       where p.customer_id = in_cus_id
         and p.policy_product_id = in_lob_id
         and (p.policy_program_id is null or
             p.policy_program_id = in_program_id);

  begin

    v_customer_id       := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id,
                                                                              in_transaction_id,
                                                                              in_ptp_id);
    v_primary_entity_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             v_customer_id,
                                                             gbv_CustomerPrimaryEntity);
    v_orm_id            := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             v_primary_entity_id,
                                                             gbv_ORMID);
    v_lob_id            := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_ptp_id,
                                                             gbv_LOB);
    v_program_id        := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_ptp_id,
                                                             gbv_program);
    v_pol_trx_id        := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                        in_transaction_id,in_ptp_id,gObjectType_pt);  
                                        
																							 
    
    v_curr_Pol_eff_date  := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_ptp_id,
																					   
                                                             gbv_pol_Eff_Date), pkg_os_constant.DragonDateFormatDefault);
		  
																	 
		  
	  
    V_curr_Pol_exp_date  := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_ptp_id,
																					   
                                                             gbv_pol_Exp_Date), pkg_os_constant.DragonDateFormatDefault);

		
	v_erp_ind        := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                             in_transaction_id,
                                                             in_ptp_id,
                                                             33482148);
--33482148LOB - xReference - _Reference_ERP Generated From Policy

if v_erp_ind is not null then
  io_action_outcome_id := 22;
  return;
end if;


    for in_cust_cur in c_cust(v_orm_id) loop      
   
        for in_pol_cur in c_policy(in_cust_cur.customer_id,v_lob_id,v_program_id ) loop
	
     -- Get the Reference CurrentPolicyPendingCancellation
     --

     v_Ref_CurrPolPendCancellation     :=    pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_pol_cur.policy_id,
                                                  gbv_Ref_CurrPolPendCancel
                                             );

     --
     -- Get the PolicyPendingCancellation Target Cancellation Date
     --

     v_target_cancellation_date       :=  to_date( pkg_os_object_io.fn_object_bv_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                v_Ref_CurrPolPendCancellation,
                                                gbv_PolicyPenCan_TarCanceldate
                                           ), pkg_os_constant.DragonDateFormatDefault);
                
        select count(1)
        into v_policy_count
        from dragon_policy_term pt
        where pt.policy_id = in_pol_cur.policy_id        
         and
         (
         (pt.policy_term_pas_status in ('Active','Cancelled')
         and
         trunc(pt.policy_term_eff_date)<= trunc(v_curr_Pol_eff_date)  --Policy Term effective date<= Quote Effective Date <= Policy Term Expiration Date
         and
         trunc(v_curr_Pol_eff_date) < trunc(pt.policy_term_exp_date)  
         and
         trunc(pt.policy_term_eff_date) <= trunc(v_curr_Pol_exp_date))
	   
         or
			   
         ( pt.policy_term_pas_status = 'PendingCancel'
         and
         trunc(pt.policy_term_eff_date)<= trunc(v_curr_Pol_eff_date)
         and
         trunc(v_curr_Pol_eff_date) <= trunc(v_target_cancellation_date)
         and
         trunc(pt.policy_term_eff_date) <= trunc(v_target_cancellation_date))
         )
         ;  
          
      if v_policy_count > 0 then

        io_action_outcome_id := v_outcome_duplicate;
		
      end if;
	
                if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...v_curr_Pol_eff_date: ' || v_curr_Pol_eff_date ||
                              ' v_curr_Pol_exp_date : ' || v_curr_Pol_exp_date ||
                              'Existing policy id checking for term :' || in_pol_cur.policy_id ||
                                'io_action_outcome_id' ||
                                io_action_outcome_id 
						);

		  end if;
         
	end loop;
	  
 end loop;
 
     --OSPRODUCT-29939
      pkg_cs_functions.sp_check_duplicate_policy(
                                          in_session_id,
                                          in_transaction_id,
                                          in_ptp_id,
                                          io_action_outcome_id
                                         );
    
     if io_action_outcome_id = v_outcome_duplicate
       then
         
             pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_ptp_id,
                                                 gbv_ObjectState,
                                                 v_rejected_state
                                                );
     end if;
     --OSPRODUCT-29939 
  
	 if io_action_outcome_id is null then
																																 
	         io_action_outcome_id := pkg_os_constant.gOutcome_OK;
																																 
	end if;

  end sp_check_duplicate_policy;
														   
															  
															  
															   
  
  -------------------UTXPRODUCT-369-------------------  
-----------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------
procedure sp_update_reinsurance(in_session_id     object.object_id%type,
                                in_transaction_id object.object_id%type,
                                in_object_id      object.object_id%type) as
     v_object_list       pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
     v_object_list_index number := null;
     v_datamart          char(1);
begin

     pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                         in_transaction_id,
                                                         in_object_id,
                                                         2288705,         --PolicyReinsurance
                                                         v_object_list);

     v_object_list_index := v_object_list.first;

     while v_object_list_index is not null
      loop

          pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                                 in_transaction_id,
                                                 v_object_list(v_object_list_index),
                                                 v_datamart);
          v_object_list_index := v_object_list.next(v_object_list_index);
     end loop;
end;
-----------------------------------------------------------------

-----------OSPRODUCT-16973---start--------------------------------------------------------------------------------------------
																		  
																		  
																			 
																					   
									   
								
	   
  
																	  
																		  
																	 
																					
																	   
  
											   
  
											  
	
														   
															   
																				
														 
																	 
			 
	  
																   

																																

  function fn_validate_pnbt_trxn_effective_dt(in_session_id            in object.object_id%type,
                                              in_transaction_id        in object.object_id%type,
                                              in_policy_trx_id         in object.object_id%type,
                                              include_canceled_term_tf in char default 'T' --OSPRODUCT-19883 -allow endorsement on cancelled term
                                              )
  
   return char as
  
    v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                       in_transaction_id);
    v_procedure_name constant system_log.program_name%type := 'fn_validate_pnbt_trxn_effective_dt';
  
    v_policy_id object.object_id%type;
  
    v_transaction_type_id dragon_policy_trx.policy_trx_type_id%type;
    v_count               number;
  
    v_trx_effective_date     date;
    v_plcy_max_expiration_dt date;
    v_plcy_cancel_dt         date;
  
    v_return_flag char(1) := 'F';
  
  begin
  
    v_policy_id              := pkg_os_object.fn_object_parent_get(in_session_id,
                                                                   in_transaction_id,
                                                                   in_policy_trx_id);
    v_transaction_type_id    := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                  in_transaction_id,
                                                                  in_policy_trx_id,
                                                                  pkg_os_policy_transaction.gbv_PolicyTrxType);
    v_trx_effective_date     := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                          in_transaction_id,
                                                                          in_policy_trx_id,
                                                                          pkg_os_policy_transaction.gbv_PolicytrxEffectiveDate),
                                        pkg_os_constant.DragonDateFormatDefault);
    v_plcy_max_expiration_dt := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                          in_transaction_id,
                                                                          v_policy_id,
                                                                          gbv_PlcyMaxExpiry_dt),
                                        pkg_os_constant.DragonDateFormatDefault);
    v_plcy_cancel_dt         := to_date(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                          in_transaction_id,
                                                                          v_policy_id,
                                                                          gbv_plcy_cancelation_dt),
                                        pkg_os_constant.DragonDateFormatDefault);
    --
    -- Check if the Transaction Effective falls with term Effective and Expiration Date.
    -- Term Effective <= transaction Effective date < Term Expiration Date.
    --
    if include_canceled_term_tf = 'T' then
      select count(*)
        into v_count
        from dragon_policy_term dpt
       where policy_id = v_policy_id
         and policy_term_pas_status not in ('Rolledback', 'Rewritten')
         and trunc(dpt.policy_term_eff_date) <= trunc(v_trx_effective_date)
         and trunc(dpt.policy_term_exp_date) > trunc(v_trx_effective_date);
    else
      select count(*)
        into v_count
        from dragon_policy_term dpt
       where policy_id = v_policy_id
         and policy_term_pas_status not in
             ('Rolledback', 'Rewritten', 'Cancelled')
         and trunc(dpt.policy_term_eff_date) <= trunc(v_trx_effective_date)
         and trunc(dpt.policy_term_exp_date) > trunc(v_trx_effective_date);
    end if;
  
    if v_session_control.gLogging_Full then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            ' Executing the function fn_validate_pnbt_trxn_effective_dt  policy_id : ' ||
                            v_policy_id ||
                            ' transaction type id              : ' ||
                            v_transaction_type_id ||
                            ' Effective date                   : ' ||
                            v_trx_effective_date ||
                            ' Expiration date                  : ' ||
                            v_plcy_max_expiration_dt ||
                            ' cancellation date                : ' ||
                            v_plcy_cancel_dt ||
                            ' count of the valid policy term   : ' ||
                            v_count);
    end if;
  
    If v_transaction_type_id =
       pkg_os_policy_transaction.gPolicyTrxType_NewBusiness then
    
      pkg_os_logging.sp_log_error(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  'Not a valid PNBT Transaction Type');
    
      ---   raise NO_DATA_FOUND;
    
    elsif v_count = 0 and
          v_transaction_type_id in
          (pkg_os_constant.gPolicyTran_Rewrite,
           pkg_os_policy_transaction.gPolicyTrxType_NBRewrite) then
    
      v_return_flag := 'T';
    
    elsif v_transaction_type_id in
          (gPolicyTran_Intent_to_Non_Renew,
           gPolicyTran_Rescind_Non_Renew,
           gPolicyTran_Conditional_Renewal,
           pkg_os_constant.gPolicyTran_Renewal,
           gPolicyTran_Rescind_Conditional_Renewal,                                        
           PKG_OS_POLICY_TRANSACTION.gPolicyTrxType_UndoNonRenewal,
			gPolicyTran_Rescind_Non_Renewal
		   ) and
          trunc(v_trx_effective_date) = trunc(v_plcy_max_expiration_dt) then
    
      v_return_flag := 'T';
    
    elsif v_transaction_type_id in (
                                    
                                    pkg_os_policy_transaction.gPolicyTrxType_Reinstatement) and
          trunc(v_trx_effective_date) = trunc(v_plcy_cancel_dt) then
      v_return_flag := 'T';
    elsif v_count = 1 then
    
      v_return_flag := 'T';
    
    else
    
      v_return_flag := 'F';
    
      --  raise NO_DATA_FOUND;
    
    end if;
  
										   
										  
											  
											 
																										 
										  
																			   
										 
							
							  
		   
  
    return v_return_flag;
  
  end;
      
--------OSPRODUCT-16973---end-------------------------------------------------------------------------------------------  
 procedure sp_set_rejected_quote(in_session_id        in object.object_id%type,
                                in_transaction_id    in object.object_id%type,
                                in_policyquote_id    in object.object_id%type,
                                io_action_outcome_id in out outcome.outcome_id%type) 
  as
  v_object_list            pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
  v_object_index           number := null;
  v_qt_id                  number := null;
  v_ptp_id                 number := null;
  v_parent_customer_id     number := null;
  v_utemplate_mainQuote    number := null;
  v_utemplate_currentQuote number := null;
  v_ptp_status             varchar2(255) default NULL;
  v_dm                     char := null;
  V_PROPERTY_VALUE         char := null;
begin

  V_PROPERTY_VALUE := pkg_os_product.fn_product_property_get(
                                                             in_session_id,
                                                             in_transaction_id,
                                                             in_policyquote_id,
                                                             g_PdPropertyType);
  IF V_PROPERTY_VALUE = 'T' THEN
    v_parent_customer_id := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                              in_transaction_id,
                                                                              in_policyquote_id,
                                                                              g_CustomerObjectTypeID);

    pkg_os_object_Search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,
                                                        v_parent_customer_id,
                                                        g_QuoteTrxn_ObjectTypeID,
                                                        v_object_list);

																				
																				
																				
																						 
    v_object_index        := v_object_list.first;
											
											
											
											
											
											
														
										  
										  
	   
  
    v_utemplate_mainQuote := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                               in_transaction_id,
                                                               in_policyquote_id,
                                                               gbv_RefUltimateTemplateID);
    while v_object_index is not null loop
      --get QT id
      v_qt_id := v_object_list(v_object_index);
      --get ptp 212318
      v_ptp_id                 := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                    in_transaction_id,
                                                                    v_qt_id,
                                                                    gbv_Ref_Coverages);
      v_utemplate_currentQuote := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                    in_transaction_id,
                                                                    v_ptp_id,
                                                                    gbv_RefUltimateTemplateID);
      IF v_ptp_id <> in_policyquote_id and
         v_utemplate_currentQuote = v_utemplate_mainQuote THEN
        --get      ptp status
        v_ptp_status := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                          in_transaction_id,
                                                          v_ptp_id,
																				   
																		 
	
												   
																			   
																				   
																				   
																							
										   
				   
												 
						
																					
																						
																			  
																						 
																					
																						
																			   
																								 
											
																
							   
																		  
																			  
																	 
                                                          gBv_Generic_ObjectState);
        --if state not in bound or rejected
								
											 
        IF v_ptp_status not in (g_ObjectState_PolicyQuoteBound, g_ObjectState_PolicyQuoteRejected) THEN
											 
													 
          --then set rejected
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_ptp_id,
                                            gBv_Generic_ObjectState,
                                            '23005');
          --dm update
          pkg_os_datamart.sp_datamart_update_row(in_session_id,
                                                 in_transaction_id,
                                                 v_ptp_id,
                                                 v_dm);
				 
        END IF;
      END IF;
      v_object_index := v_object_list.next(v_object_index);
	  
			   
		   
														
	  
														   

    end loop;
  end if;
  io_action_outcome_id := pkg_os_constant.gOutcome_Ok;
END;
--------------------------------------------------------------



----------------------OSPRODUCT-19046 BEGIN---------------
procedure sp_update_logging_lvl
(   
    in_session_id     in    object.object_id%type,
    in_transaction_id in    object.object_id%type,
																								   
    io_action_outcome_id      out outcome.outcome_id%type
) 
as
																														  
																		 
																							
  
    v_procedure_name    constant system_log.program_name%type := pkg_name ||'sp_update_logging_lvl';
    v_search_criteria              object.object_id%type  ;

    v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
    v_target_session_id         object.object_id%type;
    v_datamart_tf              char := 'T';
        v_count                integer;
 v_target_logging_lvl                integer;
  
begin
										
												
											   
													   
												   
																   
																 
																 
													   
													   
																 
																							 
																													
  
 v_search_criteria := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                           in_transaction_id,
                                                                           in_session_id,
                                                                           gobjtype_SessionSearchCriteria);
                                                                           
      v_target_session_id:= pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_search_criteria,gBv_target_session_id );
												   
																   
     v_target_logging_lvl:= pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, v_search_criteria,gBv_target_logging_lvl );
       
      if v_session_control.gLogging_Full 
      then
      
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'v_search_criteria '          || v_search_criteria ||
                'v_target_session_id  '                           || v_target_session_id||
                'v_target_logging_lvl  '            || v_target_logging_lvl
            );
            
      end if;         
      
      select count(1) into v_count
             from dragon_session where user_session_id=    v_target_session_id
             and DESTRUCTION_DATE is  null;                                                
 
      if v_count>0
     then
     update dragon_session
     set LOGGING_LEVEL=v_target_logging_lvl
      where user_session_id=    v_target_session_id;                                               
 io_action_outcome_id:=pkg_os_constant.gOutcome_OK;
 
 else 
    io_action_outcome_id:=pkg_os_constant.gOutcome_UserInputInvalid;

         
      end if;--- Check the following on the incoming PT 
       
  
end sp_update_logging_lvl;
----------------------OSPRODUCT-19046 END---------------

----------------------------------------------------UTXPRODUCT-398 Start---------------------------------------------------------

procedure sp_check_any_referencer_obj(in_session_id         in object.object_id%type,
                                      in_transaction_id     in object.object_id%type,
                                      in_relation_object_id in object.object_id%type,
                                      io_message_list       in out pkg_os_message.t_message_list,
                                      io_action_outcome_id  out outcome.outcome_id%type) is

  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);
  v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_check_any_referencer_obj';

  v_referencer_list pkg_os_object_io.t_object_relation := pkg_os_object_io.t_object_relation();

  v_referencer_list_index      number;
  v_excluded_obj_type_flag     number;
  v_return_tf                  char(1) := 'F';
  v_qualifier_rule_tf          char(1) := '';
  in_parent_hiearchy_obj_id    object.object_id%type;
  v_qualifier_rule_id          rule.rule_id%type;
  v_referencer_object_state    object_state.object_state_id%type;
  v_referencer_obj_type_id     object_type.object_type_id%type;
  v_parent_object_type_id      object_type.object_type_id%type;
  v_parent_hiearchy_obj_id     object.object_id%type;
  v_session_search_obj         object.object_id%type;
  v_referencing_object_type_id object_type.object_type_id%type;
  v_message_str                varchar2(4000) := 'Unable to delete due to below usages - ';
  v_excluded_types             pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
  
  cursor check_exclude_Objt_type is
    select object_type_id, pd_object_qualifier_rule_id
      from pd_attribute pd
     where pd.pd_attribute_type_id = g_exclude_obj_pd_attribute_type;

begin

  --
  -- Initialization
  --

  v_referencer_list.delete;
  v_referencer_obj_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                               in_transaction_id,
                                                               in_relation_object_id);

  ---
  --- Construct the excluded' object-types based on the definition in  PD_ATTRIBUTE Table...
  ---
  for r_exclude_Objt_type in check_exclude_Objt_type loop

    v_excluded_types(r_exclude_Objt_type.object_type_id) := r_exclude_Objt_type.pd_object_qualifier_rule_id;

  end loop;

  --
  -- Get all the Objects that refers the incoming Object ID via a 'Refers To' releationship
  --
  v_referencer_list := pkg_os_object_io.fn_object_ref_owners_get(in_session_id,
                                                                 in_transaction_id,
                                                                 in_relation_object_id,
                                                                 null,
                                                                 v_referencer_obj_type_id,
                                                                 null);

  if v_session_control.gLogging_Full then

    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '...The referencing Object Count : ' ||
                          v_referencer_list.count ||
                          '...For Relation Object : ' ||
                          in_relation_object_id);

  end if;

  v_referencer_list_index := v_referencer_list.first;

  --
  -- Check for any valid references
  --
  while v_referencer_list_index is not null
  --and
  --   v_return_tf = 'F'
   loop

    --
    -- Get the UserSessionSearchCriteria object under the UserSession
    --

							 
    v_session_search_obj := pkg_os_object.fn_get_or_create_child_of_type(in_session_id,
                                                                         in_transaction_id,
                                                                         in_session_id,
                                                                         2364876);

																							  
	   
														   
	
																											  
	
			 
  
    --
    -- Get the parent object in the hierarchy of the incoming object from the BV UserSessionSearchCriteria._Reference_ReferredObjectParent
    --

    in_parent_hiearchy_obj_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_session_search_obj,
                                                                   33534148);

    --
    -- Get the ObjectType for the incoming Parent Object hiearchy Object
    --

    v_parent_object_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                                in_transaction_id,
                                                                in_parent_hiearchy_obj_id);

    --
    -- Get the parent on the Referencer Object hiearchy  matching the ObjectType of the incoming Parent Object hiearchy Objt
    --
  
							 
    v_parent_hiearchy_obj_id     := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                                      in_transaction_id,
                                                                                      v_referencer_list(v_referencer_list_index)
                                                                                      .object_id,
                                                                                      v_parent_object_type_id);
    v_referencing_object_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                                     in_transaction_id,
                                                                     v_referencer_list(v_referencer_list_index)
	   
														   
	
                                                                     .object_id);

    v_qualifier_rule_tf := 'F';
    v_qualifier_rule_id := null;

    --
    -- Get the the qualifying rule and evaluate it if present
    --
    if v_excluded_types.exists(v_referencing_object_type_id) then

      v_qualifier_rule_id := v_excluded_types(v_referencing_object_type_id);

    end if;

    if v_qualifier_rule_id is null then

      v_qualifier_rule_tf := 'T';

    else

      v_qualifier_rule_tf := pkg_os_exp.fn_evaluate_expression(in_session_id,
                                                               in_transaction_id,
                                                               v_referencer_list(v_referencer_list_index)
                                                               .object_id,
                                                               v_qualifier_rule_id);

    end if;

    v_referencer_object_state := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_referencer_list(v_referencer_list_index)
																		
                                                                   .object_id,
                                                                   gbv_generic_objectstate);

    if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...Referencing Object ID: ' || v_referencer_list(v_referencer_list_index)
                            .object_id || '...Parent Object Type ID : ' ||
                             v_parent_object_type_id ||
                             '...Parent Object ID : ' ||
                             v_parent_hiearchy_obj_id ||
                             '...Referencing object qualifier rule: ' ||
                             v_qualifier_rule_id ||
                             '...Referencing object qualifier rule value: ' ||
                             v_qualifier_rule_tf ||
                             '...Referencing object state: ' ||
                             v_referencer_object_state);

    end if;

													   
  
    --
    -- Check for parent hierarchy and referencer is not pointing to referencee
    --
											 
		 
						  
		 
	
		
																	   
		
	
																						 
																							 
																						 
																					
	
		
																																			
		
	
    if nvl(v_parent_hiearchy_obj_id, 0) =
																					   
																						  
																			   
	
		
																		  
		
	
																				
																					
																							 
	
		
																															  
		
																									  
																										  
																																  
																								   
																												 
																					 
																						 
																												 
																				   
	
								 
								  
	
		
															   
		
																   
	  
																			  
	  
			 
	
										 
	  
								   
	  
		  
	  
																			   
																				   
       nvl(in_parent_hiearchy_obj_id, -1) and v_referencer_list(v_referencer_list_index)
      .object_id <> in_relation_object_id then

								 
								  
	
		
															   
		
																   
	  
																			  
	  
			 
	
										 
	  
								   
	  
		  
	  
																			   
																				   
																										   
																			
																					  
	  
			 
	
																				   
																					   
																											   
																				
																							  
	
      if v_session_control.gLogging_Full then

        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Referencing Object ID: ' || v_referencer_list(v_referencer_list_index)
                              .object_id || '...ReferencingObject type ID: ' ||
                               v_referencing_object_type_id ||
														  
														  
																		  
													 
																				
													 
                               '...Excluded object count: ' ||
                               v_excluded_types.count);

													 
																 
														  
	  
      end if;
	
      --
      -- Check for exclusion or the Object State  = Destroyed.
      --

      if (v_excluded_types.exists(v_referencing_object_type_id) and
         v_qualifier_rule_tf = 'T') or
         (v_referencer_object_state = pkg_os_constant.gobjstate_destroyed) then

        null;

      else

																										  
											 
																	
																
																
														 
		
			   
        --
        -- The Refercer Object is a valid reference under the Parent Object hiearchy
        --
	  
																	 
										
																				 
		
			   
		
			
		
			
																					  
			
        v_return_tf   := 'T';
        v_message_str := '';
		
																		 
																		   
																			   
																									   
																		
																				
									
																		   
																			   
																					  
																			  
		
																		
        
        v_message_str := 'Unable to delete because this is used by '||
                         pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                           in_transaction_id,
                                                           v_referencer_list(v_referencer_list_index)
                                                           .object_id,
                                                           gBv_ObjectLabel) || ' on ' ||
                         pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                           in_transaction_id,
                                                           v_parent_hiearchy_obj_id,
                                                           gBv_ObjectLabel) ;
                                                           
         pkg_os_message.sp_message_add(io_message_list,v_message_str);

      end if; -- Check for exclusion or the Object State  = Destroyed.

    end if; -- Check for parent hierarchy and referencer is not pointing to referencee

    v_referencer_list_index := v_referencer_list.next(v_referencer_list_index);

  end loop; -- Check for any valid references

  if v_session_control.gLogging_Full then

    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '...Returning: ' || v_return_tf);

  end if;

  if v_return_tf = 'F' 
  then
       io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  else
       io_action_outcome_id := gOutcome_ObjectInUse;
  end if;

exception

  when others then

    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Error while checking for referencer Objects :' ||
                                sqlerrm);

    raise;

end sp_check_any_referencer_obj;

procedure sp_delete_tree_node(in_session_id        in object.object_id%type,
                              in_transaction_id    in object.object_id%type,
                              in_action_object_id  in object.object_id%type,
                              io_object_cache      in out pkg_os_object_cache.t_object_cache,
                              io_action_outcome_id in out outcome.outcome_id%type) as

  v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_delete_tree_node';
		  
	  
																	 
										
																				 
		
			   
		
			
		
			
																					  
			
							   
							  
		
																		 
  v_ce_object_list     pkg_os_object.t_object_list;
  v_ce_object_index    number;
  v_referenced_object  object.object_id%type;
  v_node_id            object.object_id%type;
  v_parent_node_id     object.object_id%type;
									
  v_tree_id            object.object_id%type;
  v_tree_definition_id object.object_id%type;
  v_master_tree_id     object.object_id%type;

begin

  v_ce_object_list(1) := in_action_object_id;

	  
																						
	
  v_ce_object_index := v_ce_object_list.first;

  while (v_ce_object_index is not null) loop

    v_referenced_object := v_ce_object_list(v_ce_object_index);

    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '... ...Deleting Object:' ||
                          v_ce_object_list(v_ce_object_index) || '(' ||
                          pkg_os_object.fn_object_name_get(in_session_id,
  
							 
														  
		
												   
		   
  
		   
  
					
	
												
                                                           in_transaction_id,
                                                           v_ce_object_list(v_ce_object_index)) || ')');
												   
																					
										   
	
			
	
								  

    --
    --  If we are in a tree, check to see whether we need to create referencer nodes ...
    --
	
								  

    v_tree_id := pkg_os_tree_action.fn_object_cache_tree_get(in_session_id,
																			  
																			  
																							   
																					   
  
																		 
																					
													 
								
											   
											   
											   
											   
											   
											   
  
	   
  
											   
  
												
  
											  
	
																 
	
										  
											  
											 
														
																		 
																		   
                                                             in_transaction_id,
																										  
	
		
																						  
		
	
																			 
																				 
                                                             io_object_cache);
	
																			  
																				  
																		  
																												
	
																		  
																			  
																	  
																									  
	
		   
	  
									  
										  
							 
								  
														  
	  
															 
																 
																				  
																	
																
																   
												   
														  
	  
														   
															   
													   
																	   
														  
															  
													  
													 
															  
			   
	  
			   
							   
								   
								   
		
		  
	
																	
	
			 
  
														
  
						  

															
																				
																				
																					  
  
																		 
																					  
											
  
																														
																															 
											   
									 
								 
								 
  
	   
  
																				   
																					   
																				   
																									 
  
																			
																				
																				
																					 
    v_tree_definition_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              v_tree_id,
                                                              pkg_os_constant_bv.gbv_ObjTreeTreeDefinitionID);

    v_master_tree_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                          in_transaction_id,
                                                          v_tree_id,
                                                          pkg_os_constant_bv.gbv_objTreeMasterTree);

    begin

      select node_id, node_parent_id
        into v_node_id, v_parent_node_id
        from tmp_tree_nodes
       where tree_id = v_tree_id
         and node_assoc_object_id = v_referenced_object;

      pkg_os_tree_action.sp_tree_node_delete(in_session_id,
                                             in_transaction_id,
                                             v_master_tree_id, -- Master Tree ID
                                             v_tree_id, -- Tree ID
                                             v_parent_node_id,
                                             v_referenced_object,
                                             'T',
                                             v_node_id);
											 
	if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_tree_id, 21690001 ) = v_node_id
      then pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_tree_id,21690001,v_parent_node_id);
												  
	
    end if;

    exception
      when no_data_found then
        v_node_id        := null;
        v_parent_node_id := null;

    end;

    v_ce_object_index := v_ce_object_list.next(v_ce_object_index);

  end loop;

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_delete_tree_node;
----------------------------------------------------UTXPRODUCT-398 End-----------------------------------------------------------

													  
  
							
														  
------------------------------------------- OSPRODUCT-19981 Start ----------------------------------------------------
  --  
  --  %NAME
  --    sp_create_email_placeholder
  --
  --  %USAGE
  --    This procedure creates a new email object under the customer entity passed as in_action_object_id
  --    and sets it as the preferred email for the entity. It also creates the usages and related references.
  --
  --  %ALGORITHM
  --    Not Specified.
  --
  --  %PARAM  in_session_id            Session ID
  --  %PARAM  in_transaction_id        Transaction ID
  --  %PARAM  in_action_object_id      Parent object ID of the Email object
  --  %PARAM  io_action_outcome_id     Outcome ID
  --
----------------------------------------------------------------------------------------------------------------------
PROCEDURE sp_create_email_placeholder(in_session_id        IN object.object_id%TYPE,
                                      in_transaction_id    IN object.object_id%TYPE,
                                      in_action_object_id  IN object.object_id%TYPE, -- parent object for email
                                      io_action_outcome_id OUT outcome.outcome_id%TYPE) AS

  v_procedure_name CONSTANT system_log.program_name%TYPE := 'sp_create_email_placeholder';
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                          in_transaction_id);
  v_customer_email_id    object.object_id%TYPE;
  v_usage_email_id       object.object_id%TYPE;
  v_customer_id          object.object_id%TYPE;
  v_object_list          pkg_os_object.t_object_list;
  v_matching_object_list object_tt := new object_tt();
  v_object_list_index    NUMBER;
  v_obj_found_tf         CHAR(1) := 'F';

BEGIN

  v_customer_id := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id,
                                                                      in_transaction_id,
                                                                      in_action_object_id);

  --- Get all the Email objects under the customer entity

  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
																		  
																			
																			   
																	  
															 
															   
  
											   
  
	  
																											 
																					 
	   
  
																	   
	
														 
															 
																			  
															   
																  
								   
			 
	
																	 
	
			 
  
	  
																			 
	  
  
								
												   
													   
																			  
														 
														  
	
											 
											
												
											   
																										   
												   
			 
	
		
	
											 
											
												
											   
																						   
												   
			 
	
		   
  
	  
											  
	  
  
													
														
														  
																															
														   
  
	  
																			
										  
																	
                                                      in_transaction_id,
                                                      in_action_object_id,
                                                      gobjtype_customeremail,
                                                      v_object_list,
                                                      NULL,
                                                      false);

  v_object_list_index := v_object_list.first;

  --
  -- Loop through list of available email objects under the entity to find any existing placeholder object.
  -- The placeholder will be decided on the basis of logic defined in rule 12100648
  -- 

  WHILE v_object_list_index IS NOT NULL AND v_obj_found_tf = 'F' 
  LOOP
  
	  
																			   
												   
	   
										   
    IF pkg_os_exp.fn_evaluate_expression(in_session_id,
                                         in_transaction_id,
                                         v_object_list(v_object_list_index),
                                         12100648) = 'T' 
    THEN
																		  
      v_customer_email_id := v_object_list(v_object_list_index);
      v_obj_found_tf      := 'T';
    END IF;
  
    v_object_list_index := v_object_list.next(v_object_list_index);
  
  END LOOP;

  --
  -- If no existing placeholder object is found, create a new email object.
  --

  IF v_obj_found_tf = 'F' THEN
										  
			 
	
													  
														  
																				   
												   
																	 
											  
	
																			  
	
			 
  
													
														
														  
																   
																	   
	  
						  
	  
    pkg_os_object.sp_object_create(in_session_id,
                                   in_transaction_id,
                                   pkg_pc_procedures.gobjtype_customeremail,
                                   in_action_object_id,
                                   v_customer_email_id);
                                   
      if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Existing placeholder email object not found. Created new object ID: '||v_customer_email_id
            );
      end if;
      
  ELSE
      
      if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Existing placeholder email object found. Object ID: '||v_customer_email_id
            );
      end if;
  
      
  END IF;

  --
  -- Set the email object as preferred email
  --

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    in_action_object_id,
                                    gbv_Ref_Active_Email, -- Reference_Preferred Email                                    
                                    v_customer_email_id);

  --
  -- Find any other email objects which have the primary flag set as True 
  --                                    
  pkg_os_object_search.sp_object_with_attribute_get(in_session_id,
                                                    in_transaction_id,
                                                    in_action_object_id,
                                                    gobjtype_customeremail,
                                                    gbv_IsPreferredEmailAddrFlag,
                                                    gEnum_IsPreferredEmailAddress_Y,
                                                    v_matching_object_list);

  --
  -- Loop through list of email objects who have preferred email flag as True
  -- Set the flag in all matching objects as null
  -- 
     if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Count of email objects under the parent '||in_action_object_id
                ||' having preferred email flag set a True: '||v_matching_object_list.count
            );
      end if;

  v_object_list_index := v_matching_object_list.first;

  WHILE v_object_list_index IS NOT NULL 
  LOOP
  
     if v_session_control.gLogging_Full
      then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Removing preferred email flag from the email object: '||v_matching_object_list(v_object_list_index).object_id
            );
      end if;
      
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      v_matching_object_list(v_object_list_index).object_id,
                                      gbv_IsPreferredEmailAddrFlag,
                                      null);
															  
  
    v_object_list_index := v_matching_object_list.next(v_object_list_index);
														
													   
																			
														   
  
  END LOOP;

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    v_customer_email_id,
                                    gbv_IsPreferredEmailAddrFlag,
                                    gEnum_IsPreferredEmailAddress_Y);
  --
  -- Email Address Usage
  --
  pkg_os_object.sp_object_create(in_session_id,
                                 in_transaction_id,
                                 pkg_pc_procedures.gobjtype_objectactivity,
                                 in_action_object_id,
                                 v_usage_email_id);

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    v_usage_email_id,
                                    pkg_pc_procedures.gbv_effectivedate,
                                    to_char(pkg_os_time.fn_os_sysdate(in_session_id,
                                                                      in_transaction_id,
                                                                      v_customer_id),
                                            pkg_os_constant.dragondateformatdefault));

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    v_usage_email_id,
                                    pkg_pc_procedures.gbv_activitytype,
                                    pkg_pc_procedures.
                                    genum_actobjtype_email);

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    v_usage_email_id,
                                    pkg_pc_procedures.gbv_ref_logsusageof,
                                    v_customer_email_id);

  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    in_action_object_id,
                                    pkg_pc_procedures.gbv_refactiveprimemailadd,
                                    v_usage_email_id);

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

EXCEPTION
  WHEN OTHERS THEN
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Exception accured while creating email object.. ERROR: ' ||
                                sqlerrm || ', STACK: ' ||
                                dbms_utility.format_error_backtrace);
    raise;
  
														
  
		   
					
												
													
												   
																							  
														   
																	   
			
	
END sp_create_email_placeholder;

------------------------------------------- OSPRODUCT-19981 End ----------------------------------------------------
																				   
																				   
																				   
																				   
				  
  
																													 
																														  
																							 
  
											  
											  
													
							   
									   
  
																						  
																						   
  
	   
  
																	  
																		  
																   
																								 
																	  
															 
															   
  
											   
  
											  
																			
																				
																								 
																									
	
																						   
																							   
																								
																								   
																								
																						 
	
										   
							 
							 
			 
	
																	 
	
			 
  
						 
  
		   
					
												
													
												   
																			  
												
																	   
	
						   
	
								   
------------------------------------------- OSPRODUCT-18756 Start ----------------------------------------------------
  --  
  --  %NAME
  --    sp_store_current_rate
  --
  --  %USAGE
  --    Deleting the old data for given ptp.
  --    Collect latest data from PR_COVERAGE_PREMIUM and send to PR_COVERAGE_PREMIUM_COMPARE
  --
  --  %ALGORITHM
  --    Not Specified.
  --
  --  %PARAM  in_session_id            Session ID
  --  %PARAM  in_transaction_id        Transaction ID
  --  %PARAM  in_action_object_id      PTP ID
  --  %PARAM  io_action_outcome_id     Outcome ID
  --
----------------------------------------------------------------------------------------------------------------------
PROCEDURE sp_store_current_rate(in_session_id        IN object.object_id%TYPE,
                in_transaction_id    IN object.object_id%TYPE,
                in_action_object_id  IN object.object_id%TYPE, -- ptp
                io_action_outcome_id OUT outcome.outcome_id%TYPE) AS

  v_procedure_name CONSTANT system_log.program_name%TYPE := 'sp_store_current_rate';
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                          in_transaction_id);
BEGIN
  --Deleting the old data for given ptp 
  DELETE FROM PR_COVERAGE_PREMIUM_COMPARE Q WHERE Q.POLICY_ID = in_action_object_id;
											 
  --Collect latest data from PR_COVERAGE_PREMIUM and send to PR_COVERAGE_PREMIUM_COMPARE
  INSERT INTO PR_COVERAGE_PREMIUM_COMPARE (PC_COVERAGE_ID,POLICY_ID,PREMIUM_AMOUNT,PD_PRODUCT_ID,PARENT_OBJECT_ID,PD_FILING_ID,POLICY_TRANSACTION_ID,OBJECT_ID,ENTRY_TIMESTAMP) 
					  
				 
					  
					 
						
					
							 
				 
					   
  SELECT  
    P.PC_COVERAGE_ID,
    P.POLICY_ID,
    P.PREMIUM_AMOUNT,
    P.PD_PRODUCT_ID,
    P.PARENT_OBJECT_ID,
    P.PD_FILING_ID,
    P.POLICY_TRANSACTION_ID,
    P.OBJECT_ID,
    SYSDATE
  FROM PR_COVERAGE_PREMIUM P
    WHERE P.POLICY_ID = in_action_object_id;
EXCEPTION
  when no_data_found then
        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'Unable to find data for in_action_object_id in PR_COVERAGE_PREMIUM_COMPARE : ' ||
                                    in_action_object_id );
  WHEN OTHERS THEN
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Exception accured while storing the current rating details.. ERROR: ' ||
                                sqlerrm || ', STACK: ' ||
                                dbms_utility.format_error_backtrace);
END sp_store_current_rate;
------------------------------------------- OSPRODUCT-18756 END ----------------------------------------------------  
------------------------------------------- OSPRODUCT-18756 Start ----------------------------------------------------
  --  
  --  %NAME
  --    sp_compare_old_new_rate
  --
  --  %USAGE
  --    Collect the premium from PR_COVERAGE_PREMIUM_COMPARE and from PR_COVERAGE_PREMIUM and compare the premium per coverage
  --    If any premium is mismatch then set outcome as user input incomplete else send ok
  --
  --  %ALGORITHM
  --    Not Specified.
  --
  --  %PARAM  in_session_id            Session ID
  --  %PARAM  in_transaction_id        Transaction ID
  --  %PARAM  in_action_object_id      PTP ID
  --  %PARAM  io_action_outcome_id     Outcome ID
  --
----------------------------------------------------------------------------------------------------------------------
PROCEDURE sp_compare_old_new_rate(in_session_id        IN object.object_id%TYPE,
                in_transaction_id    IN object.object_id%TYPE,
                in_action_object_id  IN object.object_id%TYPE, -- ptp
                io_action_outcome_id OUT outcome.outcome_id%TYPE) AS

  v_procedure_name CONSTANT system_log.program_name%TYPE := 'sp_compare_old_new_rate';
  v_session_control      pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
  
  cursor curone(in_action_object_id in number) IS 
  select PC_COVERAGE_ID,POLICY_ID,PREMIUM_AMOUNT,PD_PRODUCT_ID,PARENT_OBJECT_ID,PD_FILING_ID, POLICY_TRANSACTION_ID, OBJECT_ID 
  from PR_COVERAGE_PREMIUM where POLICY_ID = in_action_object_id;
  
  cursor curtwo(in_action_object_id in number, v_coverage_id in number, v_parent_id in number, v_object_id in number) IS 
  select PC_COVERAGE_ID,POLICY_ID,PREMIUM_AMOUNT,PD_PRODUCT_ID,PARENT_OBJECT_ID,PD_FILING_ID, POLICY_TRANSACTION_ID, OBJECT_ID 
					   
							
						   
							  
						  
								   
					  
  from PR_COVERAGE_PREMIUM_COMPARE 
  where POLICY_ID = in_action_object_id 
  and PC_COVERAGE_ID = v_coverage_id 
  and PARENT_OBJECT_ID = v_parent_id 
  and OBJECT_ID = v_object_id;
  
												
   v_coverage_id number;
   v_parent_id  number;
												   
							
					   
							
						   
							  
						  
								   
					  
										
											
										   
										   
									 
  
						 
						 
   v_object_id number;
BEGIN
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;   
    --loop the first cursor to get the rate data for given ptp 
    for i in curone(in_action_object_id) loop
    v_coverage_id := i.PC_COVERAGE_ID;
     v_parent_id := i.parent_object_id;
     v_object_id := i.object_id;
    for j in curtwo(in_action_object_id, v_coverage_id, v_parent_id, v_object_id) loop
									
								  
									   
      if nvl(j.PREMIUM_AMOUNT,0) != nvl(i.PREMIUM_AMOUNT,0) then
        io_action_outcome_id := pkg_os_constant.gOutcome_UserInputIncomplete;
        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'PTP id  ' || in_action_object_id ||
                                    'v_coverage_id id  ' || v_coverage_id ||
                                    'OLD premium  ' || j.PREMIUM_AMOUNT ||
                                    'NEW premium  ' || i.PREMIUM_AMOUNT ||
														  
                                    'OLD Parent ID  ' || j.PARENT_OBJECT_ID ||
														  
                                     'NEW Parent ID  ' || i.PARENT_OBJECT_ID ||
                                    'OLD Parent ID  ' || j.OBJECT_ID ||
                                     'NEW Parent ID  ' || i.OBJECT_ID);                            
      end if;
			   
    end loop;
    end loop;
EXCEPTION
  when no_data_found then
        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'Unable to find data for in_action_object_id  ' ||
                                    in_action_object_id );
  WHEN OTHERS THEN
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Exception accured while comparing old and new rates for given ptp.. ERROR: ' ||
                                sqlerrm || ', STACK: ' ||
                                dbms_utility.format_error_backtrace);
    raise;
END sp_compare_old_new_rate;

------------------------------------------- OSPRODUCT-18756 END ----------------------------------------------------
function fn_check_user_belong_to_terr
(
  in_session_id         in  object.object_id%type,
  in_transaction_id     in  object.object_id%type,
  in_user_id            in  object.object_id%type,
  in_terr_id            in  object.object_id%type
)
return char
as

																		 
																		 
																				
																					  
																				  
  
																 
																	   
  v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
  v_procedure_name      constant system_log.program_name%type := 'fn_check_user_belong_to_terr';
																		 
																		 
																				
																					  
																				  
  
  v_service_group_id            object.object_id%type;
  v_service_terr_id             object.object_id%type;
  v_object_list                 pkg_os_object.t_object_list;
  v_object_list_index           NUMBER;
  v_return_flag                 char(1) :='F';
  
  gbv_ServiceTerrMember          constant  business_variable.business_variable_id%type :=  2358246;
  gbv_ServiceTerrRef             constant  business_variable.business_variable_id%type :=  29618346;

begin

pkg_os_object_search.sp_object_children_of_type_get
(
    in_session_id,
    in_transaction_id,
    in_user_id,
    pkg_oc_functions.gbv_ServiceGroupMemeber,
    v_object_list,
    NULL,
    false
);

v_object_list_index := v_object_list.first;

while v_object_list_index is not null
loop
    v_service_group_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_list(v_object_list_index), pkg_oc_functions.gbv_ServiceGroupRef);
  
										   
    
    v_service_terr_id := pkg_os_object_search.fn_object_with_attribute_get (in_session_id, in_transaction_id, v_service_group_id, gbv_ServiceTerrMember, gbv_ServiceTerrRef, in_terr_id);
											  
											 
																		  
    
    if v_service_terr_id is not null
    then
        v_return_flag := 'T';
        return v_return_flag;
    end if;
		 
						   
							 
							 
										
	
		
								 
		
	
							 
										
									   
															  
	
		
												
		
    
    v_object_list_index := v_object_list.next(v_object_list_index);
  
end loop;

return v_return_flag;

EXCEPTION
  WHEN OTHERS THEN
    pkg_os_logging.sp_log_error
    (
        in_session_id,
        in_transaction_id,
        v_procedure_name,
        'Exception occured... ERROR: ' ||
        sqlerrm || ', STACK: ' ||
        dbms_utility.format_error_backtrace
    );
    
    return v_return_flag;

end fn_check_user_belong_to_terr;

------------------------------------------- OSPRODUCT-16991 START ----------------------------------------------------

procedure sp_resolve_job(in_session_id     in object.object_id%type,
                         in_transaction_id in object.object_id%type,
                         in_job_id         in async_job_status.job_id%type,
                         in_action_id      in action.action_id%type default null,
                         io_action_outcome_id in out outcome.outcome_id%type ) as

  v_procedure_name  system_log.program_name%type := pkg_name ||
                                                    'sp_resolve_job';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);

  v_async_batch_id  object.object_id%type;
  v_selected_job_id async_job_status.job_id%type;

begin

  v_selected_job_id := in_job_id;

  if v_session_control.gLogging_Full then
  
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
																		
                          '... Resolving Job ID:' || v_selected_job_id);
											 
																		  
			   
		
  
  end if;
  begin
    select async_batch_id
      into v_async_batch_id
      from async_job_status
     where job_id = v_selected_job_id;
  
    --
    -- Mark the job as resolved
    --
																						   
																						   
																									
  
						
				   
    update async_job_status
       set job_error_resolved_tf = 'T'
     where job_id = v_selected_job_id
     and NVL(job_status,0) != pkg_os_async.gJobCompleted;
												   
  
    --
    -- Close the associated tasks with the job
    --
										 
													  
											
													
  
    sp_job_task_close(in_session_id,
                      in_transaction_id,
                      in_action_id,
                      v_selected_job_id,
                      v_async_batch_id);
  
  exception
    when no_data_found then
      pkg_os_logging.sp_log_error(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... No job found for Job ID:' ||
                                  v_selected_job_id || ' ' || sqlerrm ||
                                  sqlcode);
      io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
      return;
  end;

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_resolve_job;

procedure sp_resolve_prev_doc_failure_jobs(in_session_id     in object.object_id%type,
                                           in_transaction_id in object.object_id%type,
                                           in_object_id      in object.object_id%type,
                                           io_action_outcome_id in out outcome.outcome_id%type) as

  v_procedure_name  system_log.program_name%type := pkg_name ||
                                                    'sp_resolve_prev_doc_failure_jobs';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);
  v_current_job_id  async_job_status.job_id%type;

  cursor c_job_list is
    select job_id
      from async_job_status
     where job_object_id = in_object_id
       and executor_user_session_id <> in_session_id
       and job_type_name in (39248, 40048)
       and Nvl(job_error_resolved_tf, 'F') <> 'T';

begin

  io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  
    for r_job_list in c_job_list loop
    
      if v_session_control.gLogging_Full then
      
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Resolving Job ID:' || r_job_list.job_id);
      
      end if;
    
      sp_resolve_job(in_session_id,
                     in_transaction_id,
                     r_job_list.job_id,
                     null,
                     io_action_outcome_id);
    
    end loop;
  
									   

end sp_resolve_prev_doc_failure_jobs;

------------------------------------------- OSPRODUCT-16991 END ----------------------------------------------------

PROCEDURE SP_TPR_Job_Report_Type
( in_session_id   IN              object.object_id%type,
  in_transaction_id  IN          object.object_id%type,
  in_action_object_id    IN        object.object_id%type,
  io_action_outcome_id   IN OUT   outcome.outcome_id%type
) IS

v_outcome             outcome.outcome_id%TYPE;
gBv_Session_TPRObject    CONSTANT business_variable.business_variable_id%type := 34060148;
v_report_Type                  number(12) := 0;
v_subjectObject_id      object.object_id%type;
v_tprObject_id      object.object_id%type;
v_session_control       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                             in_transaction_id);
 
v_procedure_name            constant system_log.program_name%type := 'SP_TPR_Job_Report_Type';

BEGIN

        IF v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
           in_session_id,
           in_transaction_id,
           v_procedure_name,
           '......Inside SP_TPR_Job_Report_Type'
          );
        end IF;
		
 
IF in_action_object_id is not null
Then

      IF v_session_control.glogging_full THEN
          pkg_os_logging.sp_log(in_session_id,
              in_transaction_id,
              v_procedure_name,
              ' ||||||in_action_object_id :' || in_action_object_id );
           END IF;
                
            -- Find the REPORT TYPE
             BEGIN
                select TPR_Report_TYPE_ID, DRAGON_OBJECT_ID, TPR_OBJECT_ID
                into v_report_Type, v_subjectObject_id, v_tprObject_id
                from TPR_REPORT
                 where TPR_REPORT_ID = in_action_object_id;
             EXCEPTION
             WHEN no_data_found THEN
                    v_report_Type := pkg_os_constant.gOutcome_UserInputInvalid;
             END;
			 	
			If v_report_Type = gBetterview_runProfile_report
            then
            v_outcome := gOutcome_Betterview_runProfile;
            Elsif v_report_Type = gBetterview_searchProperty_report
            then
            v_outcome := gOutcome_Betterview_searchProperty;
            Elsif v_report_Type = gBetterview_retrieveProperty_report
            then
            v_outcome := gOutcome_Betterview_retrieveProperty;
            Elsif v_report_Type = gTprReport_EV_EstimatorReport
            then
            v_outcome := gOutcome_EV_EstimatorReport;
            Elsif v_report_Type = gTprReport_EV_AdjustEstimatorReport
            then
            v_outcome := gOutcome_EV_AdjustEstimatorReport;
			Elsif v_report_Type = gTransunion_report
            then
            v_outcome := gOutcome_Transunion;
            ---- OSPRODUCT-29892 Start -------
            Elsif v_report_Type = gTprReport_VINValReport
            then
            v_outcome := gOutcome_VINValReport;
             ---- OSPRODUCT-29892 End  -------
            Else
             v_outcome := pkg_os_constant.gOutcome_OK;
             End if;
              
              -- set subjectObject id (CustomerLocation)in object of interest

          pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    pkg_os_constant_bv.gbv_SessionObjectOfInterest,
                    v_subjectObject_id     
               );
               
        --Set Session_TPRObject
            pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    gBv_Session_TPRObject,
                    v_tprObject_id     
               );   
               
               IF v_session_control.glogging_full THEN
          pkg_os_logging.sp_log(in_session_id,
              in_transaction_id,
              v_procedure_name,
              ' ||||||object of interest set to :' || v_subjectObject_id );
              
              pkg_os_logging.sp_log(in_session_id,
              in_transaction_id,
              v_procedure_name,
              ' ||||||Session TPRObject set to :' || v_tprObject_id );
           END IF;

            
ELSE
			v_outcome := pkg_os_constant.gOutcome_UserInputInvalid;
End If;

io_action_outcome_id := v_outcome;		
End;		

																						 
																							
																		   
																						   
								
																											
																											
													 
								
								
								
								
								
								
								
								
								
							  
  
	   
						   
													   
																			
																				
																				  
																					   
													 
														 
															
														
														
													 
													
														
												   
											 
																	   
													
														
													
											 
													
  
										 
													
														
												   
											   
													 
													
														
												   
											 
																					
					   
													 
														 
													
															
										
																		  
																			  
																				
																					 
																		  
																			  
																			   
																	
													
														
												   
											   
																	   
													
														
												   
											   
															   
																	  
													 
  
	  
															  
	  
  
																									   
																										   
																									  
																							 
																									   
																							  
																							   
																							   
	  
	  
										  
  
										 
	
													  
														  
																	  
												 
										   
														   
			 
								
  
														
  
										   
																															   
																																																	  
																								  
																																										   
  
													 
  
	  
	  
  
																	  
																		  
																			  
															
																	  
															 
															  
																
														
														  
  
	  
	  
										  
  
										 
	
																		  
																			  
																						  
																	
																		  
																			  
																						  
																	  
																		  
																			  
																						  
																	  
																		  
																			  
																						  
																	  
																						  
																							  
																						 
																				
																					 
																							  
	
								   
														
															
													
												   
														 
														
															
													
												   
													  
			 
														   
			 
  
					
																
																	
															   
																		
  
							   
													
														
												   
											 
											 
														 
															 
														
												 
  
																		
																			
																	   
																				
	  
												   
------------------------------------------- OSPRODUCT-22282 Start ----------------------------------------------------
procedure sp_cs_modify_exoskeleton(in_session_id       in object.object_id%type,
                                     in_transaction_id   in object.object_id%type,
                                     in_action_object_id in object.object_id%type) is
  
    v_procedure_name CONSTANT system_log.program_name%TYPE := 'sp_cs_modify_exoskeleton';
    v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                                in_transaction_id);
    v_ultimate_parent_id        object.object_id%type;
    v_master_customer_id        object.object_id%type;
    v_generic_trx_id            object.object_id%type;
    v_generic_trx_addr_id       object.object_id%type;
    v_assoc_entity              object.object_id%type;
    v_assoc_address             object.object_id%type;
    v_master_customer_entity     object.object_id%type;
    v_assoc_entity_type_id      object_type.object_type_id%type;
    v_action_object_type_id     object_type.object_type_id%type;
    v_ultimate_parent_type_id   object_type.object_type_id%type;
    v_object_list                pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
    v_generic_entity_list        pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
    v_referencer_list            pkg_os_object_io.t_object_relation := pkg_os_object_io.t_object_relation();
    v_object_index               NUMBER := NULL;
    v_used_as_mailing_addr_cnt   NUMBER := NULL;
    v_enable_exoskeleton_modify  char := pkg_os_system_attribute.fn_get_system_attribute_value('ENABLE_EXOSKELETON_MODIFICATION');
    
    --OSPRODUCT-23863 Sprint blocker temp fix
    v_object_type               object_type.object_type_id%type ;
  
  begin
  
  IF NVL(v_enable_exoskeleton_modify,'F') = 'F'
  THEN
  
            if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '... Skipped sp_cs_modify_exoskeleton execution as system attribute ''ENABLE_EXOSKELETON_MODIFICATION'' is disabled');
            end if;
          
   ELSE
   
     v_action_object_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                                 in_transaction_id,
                                                                 in_action_object_id);
   
     v_ultimate_parent_id := pkg_os_object_search.fn_object_ultimate_parent_get(in_session_id,
                                                                                in_transaction_id,
                                                                                in_action_object_id);
   
     v_ultimate_parent_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_ultimate_parent_id);
   
     ---
     --- Get the master customer ID of the PolicyTransaction/BillingAccountTransactionSet
     ---
   
     if v_ultimate_parent_type_id = pkg_os_constant.gObjType_Partner and
        v_action_object_type_id = gObjectType_BillingAccountTrxSet then
     
       v_master_customer_id := pkg_os_object_io.fn_path_object_get(in_session_id,
                                                                   in_transaction_id,
                                                                   in_action_object_id,
                                                                   '32985848.29252214.211343');
     
     elsif v_ultimate_parent_type_id = gObjectType_customer then
       v_master_customer_id := v_ultimate_parent_id;

     --OSPRODUCT-24941 in case of incident, Print the message as info.
     elsif v_ultimate_parent_type_id =  gObjType_Incident then
           pkg_os_logging.sp_log_info(in_session_id,
                                       in_transaction_id,
                                       v_procedure_name,
                                       'Exoskeleton modification skipped...Ultimate parent of the input trx is Incident. Not supported currently.');
     
     else
     
       pkg_os_logging.sp_log_error(in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Exoskeleton modification skipped...Utimate parent of the input trx is other than partner or customer. Not supported currently.');
     
     end if;
    ---
    --- Get the GenericTransaction ID present under the transaction
    ---
    v_generic_trx_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                    in_transaction_id,
                                                                    in_action_object_id,
                                                                    gObjType_GenericTransaction);
    --OSPRODUCT-23863  
    v_object_type := PKG_OS_OBJECT.fn_object_type_get( in_session_id,in_transaction_id,v_master_customer_id);
    
   ----OSPRODUCT-23863  if parent object is Incident we want to skip the WF (temp fix for sprint blocker)
    if v_generic_trx_id is not null and v_object_type != gObjType_Incident then
    
      ---  
      --- Get all the CustomerAddress objects present under the master customer object
      ---
      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          v_master_customer_id,
                                                          pkg_os_constant.gObjType_CustomerAddress, --2304114
                                                          v_object_list,
                                                          NULL,
                                                          true,
                                                          false);
      v_object_index := v_object_list.first;
    
      ---
      --- Run this loop for all the CustomerAddress objects obtained as above  
      ---
      WHILE v_object_index IS NOT NULL LOOP
      
        ---
        --- Check if there is an existing GenericTransactionAddress object associated with the master customer address
        ---
      
        v_assoc_address := pkg_os_object_search.fn_object_with_attribute_get(in_session_id,
                                                                             in_transaction_id,
                                                                             v_generic_trx_id,
                                                                             gObjType_GenericTransactionAddress,
                                                                             gBv_Reference_AssociatedAddress,
                                                                             v_object_list(v_object_index),
                                                                             false);
        ---
        --- Check if there is the master customer address is used as an mailing address for any entity
        ---
        v_referencer_list := pkg_os_object_io.fn_object_ref_owners_get(in_session_id,
                                                                       in_transaction_id,
                                                                       v_object_list(v_object_index),
                                                                       gbv_CustEntityMailingAddress);
      
        v_used_as_mailing_addr_cnt := v_referencer_list.count;
      
        if v_assoc_address is null and v_used_as_mailing_addr_cnt > 0 then
        
          ---
          --- Create a new GenericTransactionAddress object and associate it with the master customer address
          ---
          pkg_os_object.sp_object_create(in_session_id,
                                         in_transaction_id,
                                         gObjType_GenericTransactionAddress,
                                         v_generic_trx_id,
                                         v_generic_trx_addr_id);
        
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_generic_trx_addr_id,
                                            gBv_Reference_AssociatedAddress,
                                            v_object_list(v_object_index));
        
          if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '... Created new GenericTransactionAddress: ' ||
                                  v_generic_trx_addr_id ||
                                  ' associated with Address ID: ' ||
                                  v_object_list(v_object_index));
          end if;
        
        end if;
      
        v_object_index := v_object_list.next(v_object_index);
      END LOOP;
    
      ---
      --- Set associated master entity for all the generictransactionentity type of customerentity
      ---
      v_object_index := null;
    
      ---
      --- Get all GenericTransactionEntity objects present in the exoskeleton
      ---  
      pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                          in_transaction_id,
                                                          v_generic_trx_id,
                                                          gObjType_GenericTransactionEntity,
                                                          v_generic_entity_list,
                                                          NULL,
                                                          true,
                                                          false);
    
      v_object_index := v_generic_entity_list.first;
    
      ---
      --- Run the loop for each GenericTransactionEntity object
      ---  
      WHILE v_object_index IS NOT NULL LOOP
      
        v_assoc_entity := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                            in_transaction_id,
                                                            v_generic_entity_list(v_object_index),
                                                            gbv_GenericEntityAssocEntity);
      
        v_assoc_entity_type_id := pkg_os_object.fn_object_type_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_assoc_entity);
        ---
        --- If the associated entity with the GenericTransactionEntity is of type CustomerEntity
        --- Then set the _Reference_Associated Master entity on GenericTransactionEntity
        ---  
        if v_assoc_entity_type_id = pkg_os_constant.gObjType_CustomerEntity then
        
          v_master_customer_entity := pkg_os_object_search.fn_object_with_attribute_get(in_session_id,
                                                                                        in_transaction_id,
                                                                                        v_master_customer_id,
                                                                                        gObjType_CustomerEntity,
                                                                                        gbv_GenObjUTemplateObjId,
                                                                                        pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                                                          in_transaction_id,
                                                                                                                          v_assoc_entity,
                                                                                                                          gbv_GenObjUTemplateObjId
                                                                                                                          )
                                                                                         );
                                                                                                                            
          pkg_os_object_io.sp_object_bv_set(in_session_id,
                                            in_transaction_id,
                                            v_generic_entity_list(v_object_index),
                                            gbv_RefAssociatedMasterEntity,
                                            v_master_customer_entity);
        
          if v_session_control.gLogging_Full then
            pkg_os_logging.sp_log(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '... Updated Associated master entity on GenericTransactionEntity : ' ||
                                  v_generic_entity_list(v_object_index));
          end if;
        
        end if;
      
        v_object_index := v_generic_entity_list.next(v_object_index);
      END LOOP;
    
    end if;
  END IF;  
  EXCEPTION
    WHEN OTHERS THEN
      pkg_os_logging.sp_log_error(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  'Exception occurred while modifying the exoskeleton.. ERROR: ' ||
                                  sqlerrm || ', STACK: ' ||
                                  dbms_utility.format_error_backtrace);
      raise;
  end sp_cs_modify_exoskeleton;
------------------------------------------- OSPRODUCT-22282 End ----------------------------------------------------  
																																   
								
														
													   
														 
														 
	

------------------------------------------- OSPRODUCT-23943 Start ----------------------------------------------------
																						  
											   
											  
										  
																													   
																																
 
																							  

procedure sp_obj_conflict_cleanup
(
       in_session_id        in object.object_id%type,
       in_transaction_id    in object.object_id%type,
       in_policy_trx_id     in object.object_id%type,
       in_object_id         in object.object_id%type
) 
is
       v_object_type_id object_type.object_type_id%type;
     
       v_procedure_name constant system_log.program_name%type := 'sp_obj_conflict_cleanup';
  
       v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
    
    cursor c_delete_conflict is 
    select conflict_id
          from 
           object_change_conflict
     where 
           policy_trxn_id = in_policy_trx_id
     and 
         object_id      = in_object_id
     ;
    
begin

											   
							   
		   
						 
							 
							
												
			
			   
  
 
								  
	

    v_object_type_id := pkg_os_object.fn_object_type_get(in_session_id,in_transaction_id,in_object_id);
											  
								
							   
																	  
				  
				
								   
				  
																		  
																	  
							   
														   
					  
									
																			   
				 
	 
												   
				
														
																   
				
															
																	 
				
															  
									
															   
				
													 
																	 
				
														   
								  
							   
													
				
											 
									   
				
													  
					
			  
																			 

										   
				
								  
									  
								  
																   
										   
				 
			   
							   
											 
				
								  
									  
								  
										  
									   
					
			   
													  
											  
								
							   
																		   
			  
												  
								
							   
																	  
				  

			
	
														  
	   

									
	  
																					  
																			   
																			   
																			   
																				  
													 
  
																						
  
																													 
																														  
  
							   
						
								   
											  
									  
  
	   
  
																	   
																		   
																	   
  
    for r_delete_conflict in c_delete_conflict
    loop
    pkg_os_object.sp_object_delete
    (
          in_session_id,
          in_transaction_id,
          null,
          r_delete_conflict.conflict_id,
          pkg_os_constant.gobjtype_ObjectConflict
    );
    
    end loop;
  
   if v_session_control.glogging_full 
   then
     
        pkg_os_logging.sp_log
        ( 
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                '... Deleted Object ID and its associated Conflict Objects : '|| in_object_id
        );
  end if;
  
end sp_obj_conflict_cleanup;

procedure sp_get_objects_with_attributes
(
       in_session_id                         in               object.object_id%type,
       in_transaction_id                     in               object.object_id%type,
       in_parent_object_id                   in               object.object_id%type,
       in_object_type_id                     in               object_type.object_type_id%type,
       in_business_variable_id               in               business_variable.business_variable_id%type,
       in_business_variable_value            in               object_bv_value.business_variable_value%type,
       in_qualification_rule_id              in               rule.rule_id%type,
       out_object_list                       out     nocopy   object_tt,
       in_recurse_flag                       in               boolean default true,
       in_exclude_deleted_objects_tf         in               boolean default true,
       in_child_search_id                    in               object_child_search.child_search_id%type default null   
  )
 is

  v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_get_objects_with_attributes';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);
  v_object_list     pkg_os_object.t_object_list := pkg_os_object.gnull_object_list;
  v_index           number;

begin

  out_object_list := new object_tt();

  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                      in_transaction_id,
                                                      in_parent_object_id,
                                                      in_object_type_id,
                                                      v_object_list,
                                                      null,
                                                      in_recurse_flag,
                                                      in_exclude_deleted_objects_tf,
                                                      in_child_search_id);

  if v_object_list.count > 0 then
																								  
																								  
																											
																														
																														 
																							  
																							  
																								 
																								 
																																	 
  
																		 
																							   
																													 
																														  
    v_index := v_object_list.first;
							 
  
    while v_index is not null loop
  
									   
  
																	  
																		  
																			
																		  
																	  
															 
																		
																					  
																			
  
								   
	
									 
    
      if ((pkg_os_object_io.fn_object_bv_get(in_session_id,
                                             in_transaction_id,
                                             v_object_list(v_index),
                                             in_business_variable_id) =
         in_business_variable_value) AND
         (pkg_os_exp.fn_evaluate_expression(in_session_id,
                                             in_transaction_id,
                                             v_object_list(v_index),
                                             in_qualification_rule_id) = 'T')) then
									
      
															 
																 
																	  
																		 
										  
															
																 
																	  
																					 
		
        out_object_list.extend;
        out_object_list(out_object_list.count) := new object_ot(v_object_list(v_index),
                                                                in_object_type_id,
                                                                in_parent_object_id,
                                                                null);
		
			   
      
											   
      end if;
    
      v_index := v_object_list.next(v_index);
    end loop;
  
		   
					
	
												
													
												   
													  
	
  end if;

exception
  when others then
																							   
																										
  
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                SQLCODE || sqlerrm);
  
end sp_get_objects_with_attributes;

procedure sp_clean_duplicate_addr_post_rollfwd(in_session_id        in object.object_id%type,
                                               in_transaction_id    in object.object_id%type,
                                               in_policy_trx_id     in object.object_id%type,
                                               io_action_outcome_id in out outcome.outcome_id%type) is

  v_procedure_name constant system_log.program_name%type := 'sp_clean_duplicate_addr_post_rollfwd';

  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);

  v_matching_addr_list     object_tt := new object_tt();
  v_policy_customer_obj_id object.object_id%type;
  v_ptp_id                 object.object_id%type;
  v_matching_addr          object.object_id%type;
  v_loop_addr_utemp_id     object.object_id%type;

  v_address_list       pkg_os_object.t_object_list;
  v_referencee_list    pkg_os_object_io.t_object_relation := pkg_os_object_io.t_object_relation();
  v_ref_list_idx       number := 0;
  v_addr_list_index    number := 0;
  v_final_conflict_cnt number := 0;
  v_match_addr_index   number := 0;
  v_next_index         number := 0;

begin
  ---
  --- Get the PTP object ID
  ---
  v_ptp_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                          in_transaction_id,
                                                          in_policy_trx_id,
                                                          gobjecttype_ptp);

  ---
  --- Get the PolicyCustomer object ID
  ---         
  v_policy_customer_obj_id := pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                          in_transaction_id,
                                                                          v_ptp_id,
                                                                          gobjtypepolicycustomer);

  if v_session_control.glogging_full then
  
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '... Policy Customer ID : ' ||
                          v_policy_customer_obj_id);
  
  end if;

  ---
  --- Get all the CustomerAddress objects under the PolicyCustomer which have TemplateID as null
  --- These are the addresses to be deleted if there exists another address with same UtemplateID
  ---
  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                      in_transaction_id,
                                                      v_policy_customer_obj_id,
                                                      gobjtype_customeraddress,
                                                      v_address_list,
                                                      null,
                                                      false,
                                                      12713448); -- Rule to check that template ID is null

  if v_session_control.glogging_full then
  
	   
	   
							 
	   
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '... CustomerAddress Object Count : ' ||
                          v_address_list.count);
									 
									 
  
  end if;

  v_addr_list_index := v_address_list.first;

  ---
  --- Loop for each CustomerAddress object
  ---  
  while v_addr_list_index is not null loop
  
    ---
    --- Get the UtemplateID of the Loop CustomerAddress object
    ---      
    v_loop_addr_utemp_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                              in_transaction_id,
                                                              v_address_list(v_addr_list_index),
                                                              gbv_genobjutemplateobjid);
  
    if v_session_control.glogging_full then
    
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... Loop for Address ID : ' ||
                            v_address_list(v_addr_list_index) ||
                            ' UTemplate ID: ' || v_loop_addr_utemp_id);
    
    end if;
  
    ---
																								  
																								   
	   
    --- Get list of all addresses under the PolicyCustomer which same UTemplate ID as that of the loop address.
																								   
    ---      
																	  
																		  
																				 
																				 
																	   
															 
															  
																											
  
                      sp_get_objects_with_attributes(in_session_id,
                                                      in_transaction_id,
                                                      v_policy_customer_obj_id,
                                                      gobjtype_customeraddress,
                                                      gbv_genobjutemplateobjid,
                                                      v_loop_addr_utemp_id,
                                                      12719348, -- Rule to check that TemplateID is not null
                                                      v_matching_addr_list,
                                                      false);
                                                      
                                                      
    if v_matching_addr_list.count > 1
    then 
    
      pkg_os_logging.sp_log_error(in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  'Multiple addresses matching UTemplate ID found for CustomerAddress: ' ||
                                  v_address_list(v_addr_list_index)|| ' not expected.');
     raise TOO_MANY_ROWS;
    
    elsif v_matching_addr_list.count = 0 
        then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '... No matching address found for Address ID : ' ||
												  
	
		   
  
											  
  
                            v_address_list(v_addr_list_index));
    else 
    ---
    --- When single Matching Address is found
    ---   
 
      v_match_addr_index := v_matching_addr_list.first;
    
      v_matching_addr := v_matching_addr_list(v_match_addr_index).object_id;
      
			   
       pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_matching_addr,
                                          pkg_os_constant_bv.gbv_GenObjObjectState,
                                          pkg_os_constant_enum.gObjState_Alive
                                          );
    
      if v_session_control.glogging_full then
      
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Matching Address ID : ' ||
																  
                              v_matching_addr);
      
      end if;
    
      ---
      --- Get the list of all references pointing to the loop address object
      --- These references need to be moved to the matching address
      ---   
												   
													   
															  
															  
															  
														  
																						   
														  
											
    
      v_referencee_list := pkg_os_object_io.fn_object_ref_owners_get(in_session_id,
	  
												  
                                                                     in_transaction_id,
													 
																											 
                                                                     v_address_list(v_addr_list_index));
                                                                     
     if v_session_control.glogging_full then
      
											   
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
																				  
																 
		  
		   
												 
			  
	  
														 
	  
																   
									  
	  
														
															
														  
																				   
																				
	  
											   
		
											  
												  
												 
															   
												 
		
			   
	  
		   
																			  
																	 
			  
	  
																					 
																						 
																										  
	  
											   
		
											  
												  
												 
                              '... Count of references found for the loop address which need to be moved : ' ||
                              v_referencee_list.count);
		
			   
      
      end if;
    
      v_ref_list_idx := v_referencee_list.first;
      
      pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Reference loop index: ' ||
                              v_ref_list_idx);
      ---      
      --- Move all the references from the loop address to the matched object
      ---
      while v_ref_list_idx is not null loop
		
												 
		  
												
													
												   
																										 
															   
																						 
																			
													
		  
				 
		
														  
															  
																			 
													   
																			 
																	   
															 
		
																   
		
				 
	  
		   
														
				  
      
      if v_session_control.glogging_full then
													  
													 
																											 
																		
													  
							
      
											   
		
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
																		   
                              '... Mapping the reference BV  : ' ||v_referencee_list(v_ref_list_idx).object_relationship_bv_id||
                              ' on the object '||v_referencee_list(v_ref_list_idx).object_id||
                              ' to the address object '||v_matching_addr);
		   
												 
			  
      
       end if;
	  
																   
									  
      
        pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_referencee_list(v_ref_list_idx)
                                          .object_id,
                                          v_referencee_list(v_ref_list_idx)
                                          .object_relationship_bv_id,
		   
														   
			 
	  
											  
												  
												 
                                          v_matching_addr);
                                          
        v_ref_list_idx := v_referencee_list.next(v_ref_list_idx);
		
											  
												  
												 
																		   
												 
			   
      
      end loop;
	
																  
    
      ---
      --- Clean up of the Loop Index  CustomerAddress 
      ---       
																 
		 
				   
							   
								 
											 
  
										   
    
      sp_obj_conflict_cleanup(in_session_id,
                              in_transaction_id,
											 
															
												   
                              in_policy_trx_id,
                              v_address_list(v_addr_list_index));
    
      if v_session_control.glogging_full then
			   
      
		   
																			  
																	 
			  
	  
																					 
																						 
																										  
	  
											   
		
											  
												  
												 
																												 
														 
		
			   
	  
												  
	  
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Clean up carried out Address ID : ' ||
                              v_address_list(v_addr_list_index));
				 
																			   
		   
											 
		
												 
		  
												
													
												   
																										 
															   
																						 
																			
													
		  
				 
		
														  
															  
																			 
													   
																			 
																	   
															 
		
																   
		
      end if;
      
		   
														
      ---
	  
											  
												  
												 
																   
	  
											   
		
											  
												  
												 
																		   
																   
			   
	  
		   
      --- Soft deleting the loop address object as there are BVs updated from the same object which are not committed to the tables.
      --- We can't hard delete otherwise the BVs moved to the matching address will become null
      ---      
                                     
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                          in_transaction_id,
                                          v_address_list(v_addr_list_index),
                                          pkg_os_constant_bv.gbv_GenObjObjectState,
                                          pkg_os_constant.gobjstate_destroyed
	  
		   
														   
			 
	  
											  
												  
												 
												 
	  
											   
		
											  
												  
												 
																		   
                                          );
			   
	  
													
    
      ---
      --- Conflict clean up of matching  CustomerAddress 
      ---  
    
      sp_obj_conflict_cleanup(in_session_id,
                              in_transaction_id,
	   
																 
		 
				   
							   
								 
                              in_policy_trx_id,
                              v_matching_addr);
										   
    
      if v_session_control.glogging_full then
      
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Clean up carried out Address ID : ' ||
                              v_matching_addr);
      end if;
											  
    
    end if; --- When the Matching Address is found
  
    v_addr_list_index := v_address_list.next(v_addr_list_index);
	
																		   
	
		
	
														  
	
		   
																									 
															
  
  end loop; --- Loop for each CustomerAddress object

  ---
  --- Check if there are any conflicts left on the transaction.
  ---  
  select count(1)
    into v_final_conflict_cnt
    from object_change_conflict
   where policy_trxn_id = in_policy_trx_id;

  if v_session_control.glogging_full then
																									 
															
  
										   
					 
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '... Final Conflict Count : ' ||
                          v_address_list.count);
  
  end if;
																														  

  if v_final_conflict_cnt > 0 then
																 
																	   
																							   
  
    io_action_outcome_id := pkg_os_constant.goutcome_rollforwardconflict;
  
  else
  
    io_action_outcome_id := pkg_os_constant.goutcome_ok;
  
  end if;
	 
	 
	   
							

  ---
  --- Set the Placeholder session outcome BV 
  ---      
  pkg_os_object_io.sp_object_bv_set(in_session_id,
                                    in_transaction_id,
                                    pkg_os_object_search.fn_object_11_child_get(in_session_id,
                                                                                in_transaction_id,
                                                                                in_session_id,
										
                                                                                gobjtype_SessionSearchCriteria), -- object type UserSessionSearchCriteria                                                                                
                                    gbv_WorkflowInterimActionOutcome, -- Placeholder action outcome
                                    io_action_outcome_id);
                                                                        
				   

end sp_clean_duplicate_addr_post_rollfwd;
					 
									   
										   
										  
																							   
					  

------------------------------------------- OSPRODUCT-23943 End ----------------------------------------------------

									   
		 
													   
			   
									
		 

																	  

											   
			  

												 
				   

										 
					 
									   
										   
										  
																						   
					  

					  

																								  
												   
																	 
																		 
																	   
																							   
																								 
													
									   
		 
														 
															   
																								  


				   

			

											

	
													
		 
													  
			   
   
  
							 
  
----------------------------------------------- OSPRODUCT-24128 Start ---------------------------------------------  
  procedure sp_rollfwd_conflict_cleanup 
  (
     in_session_id        in object.object_id%type,
     in_transaction_id    in object.object_id%type,
     in_policy_trx_id     in object.object_id%type,
     io_action_outcome_id in out outcome.outcome_id%type
  ) 
  is
    
      v_procedure_name constant system_log.program_name%type := 'sp_clean_duplicate_addr_post_rollfwd';
    
      v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                             in_transaction_id);
  																						   
  	  v_new_value object_change_conflict.new_value%type;
  	
      cursor c_records is
      select object_id , business_variable_path , new_value , conflict_id
      from object_change_conflict
      where policy_trxn_id = in_policy_trx_id
      and business_variable_path = gbv_CustEntityMailingAddress;
      
  begin
  
  	for r_record in c_records
  	loop
  	
  		v_new_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
  															in_transaction_id,
  															r_record.object_id,
  															r_record.business_variable_path||'.'||gBv_ObjectLabel);
  												
  		update object_change_conflict
  		set new_value = v_new_value
  		where conflict_id = r_record.conflict_id;
  		
  		if v_session_control.gLogging_Full then
              pkg_os_logging.sp_log(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    '... Updated value for conflict ID: ' ||
                                    r_record.conflict_id||
  								  ' -> '||v_new_value);
          end if;
  	
  	end loop;
  	
  	io_action_outcome_id := pkg_os_constant.gOutcome_OK;
  	
     exception
      when others then
      
        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    SQLCODE || sqlerrm);
     raise;
     
  end sp_rollfwd_conflict_cleanup;
																												   
																								 
	  
		   
									
	
			
														
	
				
					  
	
												 
													 
																		   
												 
	
																														
									   
  
													  
													  
													  
													   
	 
  

																												
																																			

	   
								   
		  
															  
															  
															  

							  
	  
  
	 

									  
		
	
							 
		 
						  
							  
							 
														   
																			   
		  
	  
		   

	   
									
																					   
																		
		
	
														   
						   
											  
												  
													
													
							 
 
																																	
																																		 

									  
		
	
							 
		 
						
							
						   
															  
																   
		  
	  
		   
 

		 

					
  
  
								 
	   
						
							
						   
											  
		
	  
						  
	  
								 
  ---------------------------------------------------------------------------------------------------------------------- 
procedure sp_create_cra_partner
(   in_session_id                  in object.object_id%type,
    in_transaction_id              in object.object_id%type,
    in_action_id                   in action.action_id%type,
    in_action_object_id            in object.object_id%type,
    in_action_object_type_id       in object_type.object_type_id%type,
    io_action_outcome_id           in out nocopy outcome.outcome_id%type
)
is


  cursor cur_split_object_ids(v_csv_business_variable_value object_bv_value.business_variable_value%type)
  is
    select
      split_object_id
      from (with split_objects as (select v_csv_business_variable_value str from dual)
             select
          regexp_substr(str, '[^,)]+', 1, rownum) split_object_id,
                    rownum rn
               from
          split_objects
             connect by level <= length(regexp_replace(str, '[^,]+')) + 1);
   v_session_control                 pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
   v_selected_entity_object_id       object.object_id%type;
   v_ptp_id                          object.object_id%type;
   v_pt_id                           object.object_id%type;
   v_cra_id                          object.object_id%type;
   v_current_list                    object_type.object_type_id%type;
   v_selected_elements               object_bv_value.business_variable_value%type;
   v_procedure_name                constant system_log.program_name%type   := 'sp_create_cra_partner';
begin

--check current object type
--if task then get associated QT else get PT
--create the new object under it
--set the reference
if in_action_object_type_id = 62 then
  --find associated object
  v_ptp_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,in_action_object_id,22046205);
  v_pt_id := pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_ptp_id);
  else
    --get parent pt
    v_pt_id := in_action_object_id;
  end if;

v_current_list         := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, in_session_id, pkg_os_constant_bv.gbv_genobjcurrentlist );
             v_selected_elements    := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_current_list, pkg_os_constant_bv.gbv_listelementsselected );

 if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (
                               in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                               '... Creating CRA partners ' ||
                               ' v_current_list : '      || v_current_list ||
                               ' v_selected_elements: '  || v_selected_elements
                         );

                    end if;
             --
             -- Loop over each selected element in the CurrentList
             --
             for c1_split_object_ids in cur_split_object_ids(v_selected_elements)
             loop

              v_selected_entity_object_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, c1_split_object_ids.split_object_id, pkg_os_constant_bv.gbv_listelementobject );
              --create object under pt and set the reference
              pkg_os_object.sp_object_create(in_session_id,in_transaction_id,3669448,v_pt_id,v_cra_id);
              pkg_os_object_io.sp_object_bv_set(in_session_id,in_transaction_id,v_cra_id,34578048,v_selected_entity_object_id);
              end loop;
              io_action_outcome_id := pkg_os_constant.gOutcome_OK;
end;
--------------------------------
----------------------------------------------- OSPRODUCT-24128 End ---------------------------------------------
-----------------------------------------------------------------------------------------------
--  
--  %NAME
--    sp_update_tpr_report_status
--
--  %USAGE
--    This procedure updates the status id in TPR_REPORT table based on the status id in the TPR object 
--
--  %ALGORITHM
--
--  %PARAM  in_session_id            Session ID
--  %PARAM  in_transaction_id        Transaction ID
--  %PARAM  in_action_object_id      object id
--  %PARAM  io_action_outcome_id     Outcome ID
--
----------------------------------------------------------------------------------------------------------------------
procedure sp_update_tpr_report_status
 (
  in_session_id          in     object.object_id%type,
  in_transaction_id      in     object.object_id%type,
  in_action_object_id    in     object.object_id%type,
  io_action_outcome_id   in out outcome.outcome_id%type
)    
is

    v_procedure_name      constant system_log.program_name%type   := pkg_name || 'sp_update_tpr_report_status';
    v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
    
    v_object_type_id         object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id,
                                                                                                 in_transaction_id,
                                                                                                 in_action_object_id);
    v_tpr_object_status      object_bv_value.business_variable_value%type; 
    v_tpr_report_id          tpr_report.tpr_report_id%type;  
    v_datamart_tf            char(1);  
  
begin

    if v_session_control.gLogging_Full
    then
        pkg_os_logging.sp_log
        (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            'Updating the status in TPR_REPORT for object id: ' || in_action_object_id ||
            ' with object type id: ' || v_object_type_id
        );     
    end if;
    
    if (v_object_type_id = 367401)                    --ThirdPartyReport
    then
        v_tpr_object_status := pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_action_object_id, 21786401);         --Third part report status
        if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'TPR object status id is: ' || v_tpr_object_status 
            );     
        end if;
        
        if (v_tpr_object_status is not null) 
        then
          select TPR_REPORT_ID
            into v_tpr_report_id
            from TPR_REPORT
           where TPR_OBJECT_ID = in_action_object_id;
           
           if v_session_control.gLogging_Full
            then
                pkg_os_logging.sp_log
                (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'v_tpr_report_id: ' || v_tpr_report_id 
                );     
            end if;	
           
           if (v_tpr_object_status = 2)               --Successful                                                                                           
           then
              update TPR_REPORT
                 set TPR_REPORT_STATUS_ID    = v_tpr_object_status,
                     TPR_REPORT_RETRIEVED_TF = 'T'     
               where TPR_REPORT_ID = v_tpr_report_id;
			
			elsif (v_tpr_object_status = 12848)   then  
             
              update TPR_REPORT
                 set TPR_REPORT_STATUS_ID    = v_tpr_object_status,
                     TPR_RECEIPT_DATE        = SYSDATE
               where TPR_REPORT_ID = v_tpr_report_id;
               
           else
              update TPR_REPORT
                 set TPR_REPORT_STATUS_ID    = v_tpr_object_status
               where TPR_REPORT_ID = v_tpr_report_id;
           
           end if;
        end if;

        if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updating DRAGON_TPR_REPORT datamart for : ' || in_action_object_id 
            );     
        end if;
        
        pkg_os_datamart.sp_datamart_update_row
       (
            in_session_id,
            in_transaction_id,
            in_action_object_id,
            v_datamart_tf
       );
               
        if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updated DRAGON_TPR_REPORT datamart for : ' || in_action_object_id 
            );     
        end if;  
		
    else
        pkg_os_logging.sp_log_error(in_session_id,
                                    in_transaction_id,
                                    v_procedure_name,
                                    'The object type '|| v_object_type_id ||' is not supported to update the status in TPR_REPORT.' 
                                    );
    end if;

exception

    when others then
      pkg_os_logging.sp_log_error
      (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          ' Error Occurred: '       || sqlerrm
      );
      
end sp_update_tpr_report_status;


procedure sp_tpr_report_ev_estimator_invoke
(
    in_session_id                         in  object.object_id%type,
    in_transaction_id                     in  object.object_id%type,
    in_action_object_id                   in  object.object_id%type,
    io_action_outcome_id                  in out  outcome.outcome_id%type
)
as
     v_count_tpr_report_object_id    object.object_id%type;
begin
  
  select count(tr.tpr_object_id) into v_count_tpr_report_object_id from tpr_report tr
  where
    tr.tpr_report_type_id in (22448,24548) AND
    tr.tpr_report_status_id in (0,1) AND
    tr.tpr_report_policy_id = in_action_object_id;
    
  if v_count_tpr_report_object_id != 0 THEN
      io_action_outcome_id := gOutcome_EV_Estimator_MatchFound;
      
    Update tpr_report
       Set tpr_report_status_id = 1201
     where tpr_report_type_id in (22448,24548)
       AND tpr_report_status_id = 0
       AND tpr_report_policy_id = in_action_object_id
       and rownum = 1;
  else 
    io_action_outcome_id := gOutcome_EV_Estimator_NoMatchFound;
  end if;
end sp_tpr_report_ev_estimator_invoke;

procedure sp_reset_WRO_attr
(
    in_session_id                         in      object.object_id%type,
    in_transaction_id                     in      object.object_id%type,
    in_wro_object_id                      in      object.object_id%type
)
as

    v_procedure_name                              constant system_log.program_name%type := pkg_name||'sp_tpr_report_details_reset';
    v_session_control                             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
begin

    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34728748, null); --LivingArea_SquareFootage
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34728848, null); --LivingArea_Year
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34728948, null); --RoofType
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34729048, null); --Type of Construction
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34729148, null); --NumberOfStories
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34729248, null); --Architecture Style
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34744748, null); --Construction_quality
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34744848, null); --Primary_Roof_Covering
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34745048, null); --OtherArea_Name
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34745148, null); --OtherArea_Year
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34745248, null); --OtherArea_SquareFootage   
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34729348, null); --Replacement Cost
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34728548, null); --PropertyID
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34744648, null); --RepCostType
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_wro_object_id, 34744948, null); --Heatingfueltype

exception

  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' Error Occurred: ' || sqlerrm);
  
end sp_reset_WRO_attr;

----------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------
--  
--  %NAME
--    sp_tpr_report_valid_window_check
--
--  %USAGE
--    This procedure validates if the report ordered is in the valid window
--
--  %ALGORITHM
--
--  %PARAM  in_session_id                Session ID
--  %PARAM  in_transaction_id            Transaction ID
--  %PARAM  in_tpr_report_id             object id
--  %PARAM  in_tpr_object_id             object id
--  %PARAM  in_wkflw_attr_obj_id         object id
--
----------------------------------------------------------------------------------------------------------------------
procedure sp_tpr_report_valid_window_check    (in_session_id             in object.object_id%type,
                                               in_transaction_id         in object.object_id%type,
                                               in_tpr_report_id          in object.object_id%type,
                                               in_tpr_object_id          in object.object_id%type,
                                               in_subject_obj_id         in object.object_id%type,
                                               in_wkflw_attr_obj_id      in object.object_id%type) is

    v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_tpr_report_valid_window_check';
    v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);
    v_user_reference_number                              object.object_id%TYPE;
    v_resubmit_attempt                                   number; 
    v_received_date                                      date;
    v_tpr_report_status                                  tpr_report.tpr_report_status_id%type;
    v_days_past_last_order                               number; 
    v_forceful_order                                     number;                                                                                                   
    v_allowed_days_past_last_order                       number;
    v_custLocRef                                         object.object_id%TYPE;
    v_allowed_resubmit_attempt                           number; --OSPRODUCT-29318
	
begin

                  if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log(in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Executing the validity of the window for the report ordered: ' ||
                                          in_tpr_report_id || ' -  in_tpr_report_id ' ||
                                          in_wkflw_attr_obj_id || ' -  in_wkflw_attr_obj_id '||
                                          in_subject_obj_id || ' -  in_subject_obj_id '||
                                          in_tpr_object_id || ' -  in_tpr_object_id ');
                 end if;

                 -- check the status of the incoming TPR report 
                 select tpr_report_status_id 
                 into v_tpr_report_status
                 from tpr_report
                 where tpr_report_id = in_tpr_report_id; 
                 
                 if v_tpr_report_status = pkg_os_tprn_constant.gTPRStatusCreated
                    then
                 --
                 -- Check if the Resubmit attempt exceeded
                 --
                 
                 v_resubmit_attempt := pkg_os_object_io.fn_object_bv_get
                                                (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_wkflw_attr_obj_id,
                                                 34824548 --Resubmit attempt
                                                 ); 
                                                 
                 v_received_date := nvl(pkg_os_object_io.fn_object_bv_get
                                                (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_wkflw_attr_obj_id,
                                                 34584148 --Received Date
                                                 ),sysdate); 

                 
                  v_custLocRef := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   in_subject_obj_id,
                                                                   34012248
                                                                   );
                 
                  v_forceful_order := pkg_os_object_io.fn_object_bv_get
                                                (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_custLocRef,
                                                 34673848 --Forceful order
                                                 );
                                                 
                v_days_past_last_order := NVL((trunc(sysdate) - trunc(to_date(v_received_date, 'DD-MON-YY'))),0); 
                
                
                v_allowed_days_past_last_order := NVL(pkg_os_product.fn_product_property_get
                                                           (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             in_wkflw_attr_obj_id,
                                                             90248
                                                           ), 90);
														   
				v_allowed_resubmit_attempt := NVL(pkg_os_product.fn_product_property_get
                                                           (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             in_wkflw_attr_obj_id,
                                                             90148 
                                                           ), 5 );										   
                
                if ( v_days_past_last_order >= v_allowed_days_past_last_order or v_forceful_order = 1 or v_resubmit_attempt >= v_allowed_resubmit_attempt )
                   then                                                             
                    
                    pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_wkflw_attr_obj_id,
                                                 34729948, --_Reference_Most_Recent_TPR_For_Received_Date
                                                 in_tpr_object_id
                                                 );
                    
                    v_user_reference_number :=  pkg_os_object.fn_object_create_id(null);
               
                    pkg_os_object_io.sp_object_bv_set(
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_wkflw_attr_obj_id,
                                                       34822548, -- userReferenceNumber
                                                       v_user_reference_number
                                                       );
                                                       
                 --
                 -- Set the Resubmit attempt to 1
                 --
               
                 pkg_os_object_io.sp_object_bv_set(
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_wkflw_attr_obj_id,
                                                   34824548, -- ResubmitAttempt
                                                   1
                                                   ); 
                                                   
                 --
                 -- Clear the forceful Order Flag
                 --
                 
                
               
                 pkg_os_object_io.sp_object_bv_set(
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_custLocRef,
                                                   34673848, --Forceful order
                                                   null
                                                   );                                                                      
                                                       
                                                       
                 else
                   v_resubmit_attempt := v_resubmit_attempt + 1;
                    
                    pkg_os_object_io.sp_object_bv_set(
                                                   in_session_id,
                                                   in_transaction_id,
                                                   in_wkflw_attr_obj_id,
                                                   34824548, -- ResubmitAttempt
                                                   v_resubmit_attempt
                                                   );
                 end if;                                
               end if;--Execute only if TPR object is in created status
               
                if v_session_control.glogging_full
          then
               pkg_os_logging.sp_log(in_session_id,
                                     in_transaction_id,
                                     v_procedure_name,
                                     ' ||| in_wkflw_attr_obj_id:            ' || in_wkflw_attr_obj_id ||
                                     ' ||| v_forceful_order:                ' || v_forceful_order ||
                                     ' ||| v_user_reference_number:         ' || v_user_reference_number ||
                                     ' ||| v_tpr_report_status:             ' || v_tpr_report_status||
                                     ' ||| v_resubmit_attempt:              ' || v_resubmit_attempt||
                                     ' ||| v_received_date:                 ' || v_received_date||
                                     ' ||| v_days_past_last_order:          ' || v_days_past_last_order||
                                     ' ||| v_allowed_days_past_last_order:  ' || v_allowed_days_past_last_order||
                                     ' ||| to_date(v_received_date):  ' || to_date(v_received_date, 'DD-MON-YY')||
                                     ' ||| v_custLocRef:  ' || v_custLocRef||
									 ' ||| v_allowed_resubmit_attempt:  ' || v_allowed_resubmit_attempt
                                     );

          end if;   

exception

  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' Error Occurred: ' || sqlerrm);
  
end sp_tpr_report_valid_window_check;

------------------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_set_predecessor_tpr(in_session_id        in object.object_id%type,
                                 in_transaction_id    in object.object_id%type,
                                 in_object_id         in object.object_id%type,
                                 in_tpr_object_id     in object.object_id%type,
                                 in_report_type_id    in action_tpr_report.tpr_report_type_id%type,
                                 io_action_outcome_id in out outcome.outcome_id%type) as
  v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_set_predecessor_tpr';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);

  v_prev_tpr_obj object.object_id%TYPE;
  v_property_id  object_bv_value.business_variable_value%type;

begin

  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '...... Started setting predecessor tpr reference for object: ' ||
                          in_object_id);
  end if;
  
  v_prev_tpr_obj := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                      in_transaction_id,
                                                      in_object_id,
                                                      34503748 --_Reference_Most_Recent_TPR_Report
                                                      );

  v_property_id := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                                                          in_transaction_id,
                                                          v_prev_tpr_obj,
                                                          '32520408.34635948.34636748');

  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          'v_prev_tpr_obj: ' || v_prev_tpr_obj ||
                          ' v_property_id: ' || v_property_id);
  end if;                                                        

  if v_property_id is not null then
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      in_object_id,
                                      34919448, -- WorkflowReportOrder - xReference - _Reference_Predecessor_TPR_Report
                                      v_prev_tpr_obj);
  
    if v_session_control.gLogging_Full then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Predecessor tpr reference set as: ' ||
                            v_prev_tpr_obj);
    end if;
  
  else
    if v_session_control.gLogging_Full then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... Predecessor tpr reference not set');
    end if;
  end if;

exception

  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' Error Occurred while setting predecessor tpr ref: ' || sqlerrm);  
 
end;
------------------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_tpr_report_details_reset
(
    in_session_id                         in      object.object_id%type,
    in_transaction_id                     in      object.object_id%type,
    in_tpr_object_id                      in      object.object_id%type,
    in_tpr_report_id                      in      tpr_report.tpr_report_id%type,
    in_report_type_id                     in      action_tpr_report.tpr_report_type_id%type,
    io_action_outcome_id                  in out  outcome.outcome_id%type
)

as

    v_procedure_name                              constant system_log.program_name%type := pkg_name||'sp_tpr_report_details_reset';
    v_session_control                             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    gBETTERVIEW_report                            CONSTANT outcome.outcome_id%TYPE := 14448;
    gBETTERVIEW_search                            CONSTANT outcome.outcome_id%TYPE := 18448;
    gBETTERVIEW_retrieve                          CONSTANT outcome.outcome_id%TYPE := 18548;
    gTransUnion_Report                            CONSTANT outcome.outcome_id%TYPE := 20448;
    gE2Value_Report                               CONSTANT outcome.outcome_id%TYPE := 22448;
    gE2Value_AdjustEstimatorReport                CONSTANT outcome.outcome_id%TYPE := 24548;
    gVinVal_Report                                CONSTANT outcome.outcome_id%TYPE := 32448;
	gBv_CustomerLoc_MSCustomerLoc                 CONSTANT business_variable.business_variable_id%type := 34012248;
    gBv_TPR_reportSubject                         CONSTANT business_variable.business_variable_id%type := 21822601;
    gBv_CustLoc_MostRecentBetterviewTPR_Report    CONSTANT business_variable.business_variable_id%type := 34058148;
    gBv_TPR_ReportType                            CONSTANT business_variable.business_variable_id%type := 21785701;
    gObjType_TPR_Obj                              CONSTANT object_type.object_type_id%TYPE := 367401;
    v_custLocRef                                  object_bv_value.business_variable_value%type;
    v_object_list                                 pkg_os_object.t_object_list;
    v_object_index                                number;
    v_matching_report_id                          tpr_report.tpr_report_id%type;
    v_reset_tf                                    boolean := false;
    v_report_status                               integer;
    v_dupliacte_str                               varchar2(4000);
    
    
			
    v_report_specific_object                             object.object_id%TYPE;
    v_tpr_report_subject_id                              object.object_id%TYPE;
    v_tpr_report_policy_subject_id                       object.object_id%TYPE;
    v_policyTransaction_id                               object.object_id%TYPE;
    v_masterPolicy_id                                    object.object_id%TYPE;
    v_masterCustomer_id                                  object.object_id%TYPE;
    v_user_reference_number                              object.object_id%TYPE;
    v_current_date                                       date;
    
    
		 
    v_tpr_report_policy_subject_prod_id                   object.object_id%TYPE;   -- OSPRODUCT-28119
    v_report_specific_prod_object                         object.object_id%TYPE;   -- OSPRODUCT-28119
    v_thirdPartyReport_Building                           object.object_id%TYPE;   -- OSPRODUCT-28119
    v_ref_associated_cov_asset                            object.object_id%TYPE;   -- OSPRODUCT-28119
    v_datamart_tf                                         char(1);  
	
	v_allowed_days_past_last_order                        number;
    
	 ---OSPRODUCT-28333
    v_object_type_id                                      object_type.object_type_id%type;
    v_report_subject_parent_get                           object.object_id%TYPE;
    v_report_specific_attribute_object                    object.object_id%TYPE;
    v_policyTrxnObject_type_id                            object_type.object_type_id%type;
																						  

begin
    
	IF v_session_control.glogging_full THEN
                
         pkg_os_logging.sp_log(
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' |||||| ThirdPartyReport object ' || in_tpr_object_id 
                                   || ' in_tpr_report_id ' || in_tpr_report_id 
                                   || ' in_report_type_id ' || in_report_type_id
                                );
                                          
                        
    End if; 
	
    v_tpr_report_subject_id  := pkg_os_object_io.fn_object_bv_get
                                                (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_tpr_object_id,
                                                 21822601
                                                 );
    v_tpr_report_policy_subject_id  := pkg_os_object_io.fn_object_bv_get
                                                (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_tpr_object_id,
                                                 32533208
                                                 );                                                

    If in_report_type_id in ( gBETTERVIEW_report, gBETTERVIEW_search, gBETTERVIEW_retrieve)
    Then 
                 
                 v_custLocRef := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                   in_transaction_id,
                                                                   v_tpr_report_policy_subject_id,
                                                                   gBv_CustomerLoc_MSCustomerLoc
                                                                   );
                 /*pkg_os_object_io.sp_object_bv_set(
                                               in_session_id,
                                               in_transaction_id,
                                               in_tpr_object_id,
                                               29252214, --parent
                                               v_custLocRef
                                               );*/ 
                  
				v_tpr_report_subject_id := v_custLocRef;
				
                 pkg_os_object_io.sp_object_bv_set(in_session_id,
                                                 in_transaction_id,
                                                 in_tpr_object_id,
                                                 gBv_TPR_reportSubject,
                                                 v_custLocRef);                               
                 
                 pkg_os_object_io.sp_object_bv_set(
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_custLocRef,
                                                         gBv_CustLoc_MostRecentBetterviewTPR_Report,
                                                         in_tpr_object_id
                                                         );
                                                        
				v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
													in_session_id,
													in_transaction_id,
													v_tpr_report_policy_subject_id,
													629
													);                               
       
                 v_masterPolicy_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_policyTransaction_id,
                                                      24
                                                    );
                                                      
                 v_masterCustomer_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_tpr_report_subject_id,
                                                      12
                                                      );                                                                           
                           
                 --
                 -- Setting BVs on the Third party report object created
                 --
                 
                 pkg_os_object_io.sp_object_bv_set(
                                 in_session_id,
                                 in_transaction_id,
                                 in_tpr_object_id,
                                 32533508,
                                 v_policyTransaction_id
                                 );
                                 
                   pkg_os_object_io.sp_object_bv_set(
                                 in_session_id,
                                 in_transaction_id,
                                 in_tpr_object_id,
                                 32533408,
                                 v_masterPolicy_id
                                 ); 
                                                 
                  pkg_os_object_io.sp_object_bv_set(
                                 in_session_id,
                                 in_transaction_id,
                                 in_tpr_object_id,
                                 32533308,
                                 v_masterCustomer_id
                                 );                             
                                 
                 
                 IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          ' |||||| MasterCustomerLocation object ' || v_custLocRef || ' reference is set'
                                      );
         
                 End if;
                               

      elsif in_report_type_id in ( gTransUnion_Report ) 
        then
	 
     		 IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          ' ||| Report type is Transunion '
                                      );
         
            End if;
            
            --
            -- Getting BVs to be set on the Third party report object created
            --                                
                 

            
            v_report_subject_parent_get := pkg_os_object_search.fn_object_get_parent_of_type(
                                                                              in_session_id,
                                                                              in_transaction_id,
                                                                              v_tpr_report_policy_subject_id,
                                                                              gObjectType_customer 
                                                                              );
                                                                              
            v_object_type_id            := pkg_os_object.fn_object_type_get(
                                                                               in_session_id,
                                                                               in_transaction_id,
                                                                               v_report_subject_parent_get
                                                                            );
            
            
			
			---OSPRODUCT-35138
            --- 1. Get the  _Reference_LocatedAt (29254314 - gbv_CustLocationPrimaryAddress) for a customer Location
            --- 2. Get the object Label of the Address - gBv_ObjectLabel
            --- 3. Store the Address in the ThirdPartyObject BV (36448148 - ReportSubjectLocationAddress)
            
            
               pkg_os_object_io.sp_object_bv_set(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_tpr_object_id,
                                                  gbv_ReportSubjectLocationAddress,
                                                  pkg_os_object_io.fn_object_bv_get(
                                                                                      in_session_id,
                                                                                      in_transaction_id,
                                                                                      pkg_os_object_io.fn_object_bv_get(
                                                                                                                         in_session_id,
                                                                                                                         in_transaction_id,
                                                                                                                         v_tpr_report_policy_subject_id,
                                                                                                                         gbv_CustLocationPrimaryAddress 
                                                                                                                        ),
                                                                                      gBv_ObjectLabel 
                                                                                    )
                                               );
            
			
         if v_object_type_id = gObjectType_customer then
           
         
             v_masterPolicy_id          :=  pkg_os_object_io.fn_object_bv_get(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_policy_subject_id,
                                                                            34836548 -- _Reference_EligiblePoliciesForReportOrdering
                                                                           );
            IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Report is ordered from the Master customer : '|| v_object_type_id||
                                          'Master Level Report Subject                : '|| v_tpr_report_subject_id ||
                                          'Policy Level Report Subject                : '|| v_tpr_report_policy_subject_id || 
                                          'v_masterPolicy_id                          : '|| v_masterPolicy_id 
                                      );
         
            End if;
            
           
            
            SELECT 
                 REPORT_ORDER_ID, 
                 TPR_POLICY_REPORT_SUBJECT_ID, 
                 NVL(TPR_POLICY_TRX_ID, TPR_QUOTE_TRX_ID) 
            INTO
                 v_report_specific_attribute_object,
                 v_tpr_report_policy_subject_id,
                 v_policyTransaction_id
            FROM 
                 REPORT_ORDER_ATTRIBUTE_VW 
            WHERE 
                 POLICY_ID  = v_masterPolicy_id
            AND
                 TPR_REPORT_TYPE = 20448     
            AND 
                 TPR_MASTER_REPORT_SUBJECT_ID = v_tpr_report_subject_id;
                 
             pkg_os_object_io.sp_object_bv_set(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_tpr_object_id,
                                                  32533208,
                                                  v_tpr_report_policy_subject_id
                                               );    
            
            v_masterCustomer_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_subject_id,
                                                                            12
                                                                            );
           
         
            sp_tpr_report_valid_window_check(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_tpr_report_id,
                                                 in_tpr_object_id,
                                                 v_tpr_report_policy_subject_id,
                                                 v_report_specific_attribute_object
                                            ); 
                                                 
           
         
          
                                                 
                                                 
          IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Value for the different assets retrieved - 
                                           v_policyTransaction_id                     :   '|| v_policyTransaction_id ||
                                          'v_masterPolicy_id                          :   '|| v_masterPolicy_id ||
                                          'v_masterCustomer_id                        :   '|| v_masterCustomer_id ||
                                          'v_tpr_report_policy_subject_id             :   '|| v_tpr_report_policy_subject_id ||
                                          'v_report_specific_attribute_object         :   '|| v_report_specific_attribute_object 
                                      );
         
          End if;
		  
		  -- OSPRODUCT-29397
            pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34503748, --_Reference_Most_Recent_TPR_Report
                                                 in_tpr_object_id
                                                 ); 
          
            pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_tpr_report_subject_id,
                                                 34836548, -- _Reference_EligiblePoliciesForReportOrdering
                                                 null 
                                                 );
                                                 
            pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_tpr_report_subject_id,
                                                 34830548, -- _Reference_Most Recent Occupancy Attributes
                                                 null 
                                                 );                                           
             
        else 
          
            IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Report is ordered from the Local customer : '|| v_object_type_id ||
                                          'Master Level Report Subject               : '|| v_tpr_report_subject_id ||
                                          'Policy Level Report Subject               : '|| v_tpr_report_policy_subject_id 
                                      );
         
            End if;
            
             v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_policy_subject_id,
                                                                            629
                                                                            );                               
                                       
             v_masterPolicy_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_policyTransaction_id,
                                                                            24
                                                                          );
                                                                            
             v_masterCustomer_id := pkg_os_object_search.fn_object_get_parent_of_type(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_subject_id,
                                                                            12
                                                                            );
                                                                            
              v_policyTrxnObject_type_id := pkg_os_object.fn_object_type_get(
                                                                             in_session_id,
                                                                             in_transaction_id,
                                                                             v_policyTransaction_id         
                                                                            );                                                              
             
              v_report_specific_object := pkg_os_object_io.fn_object_bv_get(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_policy_subject_id,
                                                                            34587748 -- Most Recent Occupancy Report
                                                                           );  
                                                                           
              v_report_specific_attribute_object := pkg_os_object_io.fn_object_bv_get(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_tpr_report_policy_subject_id,
                                                                            34830548 -- Most Recent Occupancy Attributes
                                                                           );
                                                                           
                                                                           
                
               IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Value for the different assets retrieved - 
                                           v_policyTransaction_id                     :   '|| v_policyTransaction_id ||
                                          'v_masterPolicy_id                          :   '|| v_masterPolicy_id ||
                                          'v_masterCustomer_id                        :   '|| v_masterCustomer_id ||
                                          'v_policyTrxnObject_type_id                 :   '|| v_policyTrxnObject_type_id ||
                                          'v_report_specific_object                   :   '|| v_report_specific_object ||
                                          'v_report_specific_attribute_object         :   '|| v_report_specific_attribute_object 
                                      );
         
               End if;
              
               --If the report specific object does not already exists, create a new one                                                    
               if v_report_specific_object is  null then
                 
               
                 IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Creating new object since objects dont exists'
                                      );
         
                 End if;
          
                --
                -- Create a new Report specific object  WorkflowReportOrder-Occupancy
                --   
                pkg_os_object.sp_object_create(
                                              in_session_id,
                                              in_transaction_id,
                                              3655548, --WorkflowReportOrder-Occupancy
                                              v_tpr_report_policy_subject_id, --  parent object  get from new ref 34012248
                                              v_report_specific_object
                                              );
                                              
               --
                -- Create a new Report specific object  WorkflowReportOrder-OccupancyAttributes
                --   
                pkg_os_object.sp_object_create(
                                              in_session_id,
                                              in_transaction_id,
                                              3725448, -- WorkflowReportOrder-OccupancyAttributes
                                              null, 
                                              v_report_specific_attribute_object
                                              );                               
               
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828648, -- MasterLevelCustomerLocation
                                                 v_tpr_report_subject_id
                                                 );
                                                 
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828748, -- PolicyLevelCustomerLocation
                                                 v_tpr_report_policy_subject_id
                                                 );                                  
               --
               -- Set the Quote Transaction and Policy Transaction for the first Time
               --
               
                
               if v_policyTrxnObject_type_id = 629 then
                                                   
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828848, -- PolicyTransaction
                                                 v_policyTransaction_id
                                                 );
               else
                 
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828948, -- QuoteTransaction
                                                 v_policyTransaction_id
                                                 );
                                                 
               end if;
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34829048, -- PTP
                                                 pkg_os_object_io.fn_object_bv_get(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_policyTransaction_id,
                                                                            gbv_Ref_Coverages
                                                                           )
                                                 );                                                                 
               --
               -- Set the Most Recent Occupancy Report reference on the local subject
               --                                  
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_tpr_report_policy_subject_id,
                                                 34587748, -- Most Recent Occupancy Report
                                                 v_report_specific_object
                                                 );
                                                 
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_tpr_report_policy_subject_id,
                                                 34830548, -- Most Recent Occupancy Attributes
                                                 v_report_specific_attribute_object
                                                 );                                    
                                                 
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34503748, --_Reference_Most_Recent_TPR_Report
                                                 in_tpr_object_id
                                                 );                                    
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34503748, --_Reference_Most_Recent_TPR_Report
                                                 in_tpr_object_id
                                                 ); 
                                                 
                
                pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34729948, --_Reference_Most_Recent_TPR_For_Received_Date
                                                 in_tpr_object_id
                                                 );                                 
                                                 
               --
               -- Set source report type
               --
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34583748, -- Source report type
                                                 in_report_type_id
                                                 );
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34824648, -- Report type
                                                 in_report_type_id
                                                 );
                                                                                     
               --
               -- Set the Resubmit attempt to 1
               --
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34824548, -- ResubmitAttempt
                                                 1
                                                 );
                                                                                
               
               --
               -- Set the User Reference number
               --
               
                v_user_reference_number :=  pkg_os_object.fn_object_create_id(null);
               
                pkg_os_object_io.sp_object_bv_set(
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_report_specific_attribute_object,
                                                  34822548, -- userReferenceNumber
                                                  v_user_reference_number
                                                  );
                
                 else 
                  --  v_report_specific_object already exists  
                  
                 IF v_session_control.glogging_full THEN
                                          
                  pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          'Objects already exists, updating the existing objects'
                                      );
         
                 End if;                                                           
                 
                 
                  pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34503748, --_Reference_Most_Recent_TPR_Report
                                                 in_tpr_object_id
                                                 );
                                                 
                   pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34503748, --_Reference_Most_Recent_TPR_Report
                                                 in_tpr_object_id
                                                 );                                
                 
                 
                 --
                 -- Clear the Response BVs on the Report specific object
                 --
                 
                 pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34584048, --Target Group
                                                 null
                                                 );
                                                                                 
                 pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34583948, -- Action Code
                                                 null
                                                 );
                                                 
                 pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_object,
                                                 34681848, -- Score
                                                 null
                                                 );
                
                
               --
               -- updating the BVs for the report_specific_attribute_object
               --
                
                pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828748, -- PolicyLevelCustomerLocation
                                                 v_tpr_report_policy_subject_id
                                                 );                                  
               
                
               if v_policyTrxnObject_type_id = 629 then
                                                   
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828848, -- PolicyTransaction
                                                 v_policyTransaction_id
                                                 );
               else
                 
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34828948, -- QuoteTransaction
                                                 v_policyTransaction_id
                                                 );
                                                 
               end if;
               
               pkg_os_object_io.sp_object_bv_set(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_report_specific_attribute_object,
                                                 34829048, -- PTP
                                                 pkg_os_object_io.fn_object_bv_get(
                                                                            in_session_id,
                                                                            in_transaction_id,
                                                                            v_policyTransaction_id,
                                                                            gbv_Ref_Coverages
                                                                           )
                                                 );  
                                                 
                
                sp_tpr_report_valid_window_check(
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_tpr_report_id,
                                                 in_tpr_object_id,
                                                 v_tpr_report_policy_subject_id,
                                                 v_report_specific_attribute_object
                                                 );                                                 
            
                
                 
            end if; --If the report specific object does not already exists, create a new one 
                                                         
          if v_session_control.glogging_full
          then
               pkg_os_logging.sp_log(in_session_id,
                                     in_transaction_id,
                                     v_procedure_name,
                                     ' ||| v_report_specific_object:        ' || v_report_specific_object ||
                                     ' ||| in_tpr_report_policy_subject_id: ' || v_tpr_report_policy_subject_id||
                                     ' ||| v_user_reference_number:         ' || v_user_reference_number
                                     );

          end if;  
          
       end if; --Customer or PolicyCustomer    
       
       --
       -- Setting BVs on the Third party report object created
       --
       
       pkg_os_object_io.sp_object_bv_set(
                       in_session_id,
                       in_transaction_id,
                       in_tpr_object_id,
                       32533508,
                       v_policyTransaction_id
                       );
                       
         pkg_os_object_io.sp_object_bv_set(
                       in_session_id,
                       in_transaction_id,
                       in_tpr_object_id,
                       32533408,
                       v_masterPolicy_id
                       ); 
                                       
        pkg_os_object_io.sp_object_bv_set(
                       in_session_id,
                       in_transaction_id,
                       in_tpr_object_id,
                       32533308,
                       v_masterCustomer_id
                       );
      
	  -- Start of OSPRODUCT-27416
      elsif in_report_type_id in ( gE2Value_Report,  gE2Value_AdjustEstimatorReport) 
        then
     
            v_report_specific_object := pkg_os_object_io.fn_object_bv_get(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      34611848 -- Most Recent building Report
                    );  
                                                                   
            v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      629
                    );  -- OSPRODUCT-28119                              

            v_tpr_report_policy_subject_prod_id := PKG_OS_OBJECT_SEARCH.fn_object_with_attribute_get(
                      in_session_id,
                      in_transaction_id,                      
                      v_policyTransaction_id, --PT
                      2261202, -- PolicyPHOBuildingCoverage
                      29411414,  -- PolicyPHOBuildingCoverage - xReference - _Reference_Covered Building
                      v_tpr_report_policy_subject_id --CustomerBuilding
                    );   -- OSPRODUCT-28119
    
             
               --If the report specific object does not already exists, create a new one                                                    
            if v_report_specific_object is  null then
                 
               --
               -- Create a new Report specific object  WorkflowReportOrder-Occupancy
               --   
               pkg_os_object.sp_object_create(
                        in_session_id,
                        in_transaction_id,
                        3677548, --WorkflowReportOrder-CustomerBuilding
                        v_tpr_report_policy_subject_id, --  parent object  get from new ref 34012248
                        v_report_specific_object
                      );
                                              
               --
               -- Set the Most Recent Occupancy Report reference on the local subject
               --                                  
               pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_tpr_report_policy_subject_id,
                        34611848, -- Most Recent building Report
                        v_report_specific_object
                      ); 
               
               --
               -- Set source report type
               --
               
               pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_report_specific_object,
                        34583748, -- Source report type
                        in_report_type_id
                      );
           /*
            else
            
              sp_reset_WRO_attr(
                        in_session_id,
                        in_transaction_id,
                        v_report_specific_object
                      );*/
                        
            end if; --If the report specific object does not already exists, create a new one 
                 
                 -- OSPRODUCT-28119 Begin
            v_report_specific_prod_object := pkg_os_object_io.fn_object_bv_get(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_prod_id,
                      34731048 -- _Reference_Final_WFReport_Order
                    );  -- OSPRODUCT-28488

            If v_report_specific_prod_object is Null Then
                
              --
              -- Create a new Report specific object for prod WorkflowReportOrder-Occupancy
              --   
              pkg_os_object.sp_object_create(
                        in_session_id,
                        in_transaction_id,
                        3677548, --WorkflowReportOrder-CustomerBuilding
                        v_tpr_report_policy_subject_prod_id, --  parent object  get from new ref 34012248
                        v_report_specific_prod_object
                      );   -- OSPRODUCT-28119
                                     
              --
              -- Set the Most Recent Occupancy Report reference on the local subject
              --                                  
              pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_tpr_report_policy_subject_prod_id,
                        34731048, -- _Reference_Final_WFReport_Order
                        v_report_specific_prod_object
                      );   -- OSPRODUCT-28488
               
              --
              -- Set source report type
              --
             
              pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_report_specific_prod_object,
                        34583748, -- Source report type
                        in_report_type_id
                      );   -- OSPRODUCT-28119
            /*
            else
            
              sp_reset_WRO_attr(
                        in_session_id,
                        in_transaction_id,
                        v_report_specific_prod_object
                      );*/
                      
            end if; 
             
            v_thirdPartyReport_Building := pkg_os_object_io.fn_object_bv_path_get(in_session_id,
                      in_transaction_id,
                      v_report_specific_object,
                      '34503748.34539848.34575848'
                    );
                    
            v_ref_associated_cov_asset := pkg_os_object_io.fn_object_bv_get(
                      in_session_id,
                      in_transaction_id,
                      v_thirdPartyReport_Building,
                      34541948 -- ThirdPartyReportAsset - xReference - _Reference_AssociatedCoverageAsset
                    );  -- OSPRODUCT-28119
                    
            if v_ref_associated_cov_asset is null then
            
                pkg_os_object_io.sp_object_bv_set(
                            in_session_id,
                            in_transaction_id,
                            v_thirdPartyReport_Building,
                            34541948, -- ThirdPartyReportAsset - xReference - _Reference_AssociatedCoverageAsset
                            v_tpr_report_policy_subject_prod_id
                        );   -- OSPRODUCT-28119
            End if;
            -- OSPRODUCT-28119 End
            
			-- Setting Predecessor reference for report specific object
		    sp_set_predecessor_tpr
		    (
				in_session_id,
				in_transaction_id,
				v_report_specific_object,
				in_tpr_object_id,
				in_report_type_id,
				io_action_outcome_id
		    );
			
			pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      v_report_specific_object,
                      34503748, --_Reference_Most_Recent_TPR_Report
                      in_tpr_object_id
                      ); 
            
			-- Setting Predecessor reference for report specific product object
			  sp_set_predecessor_tpr
			  (
				   in_session_id,
				   in_transaction_id,
				   v_report_specific_prod_object,
				   in_tpr_object_id,
				   in_report_type_id,
				   io_action_outcome_id
			  ); 
			
			pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      v_report_specific_prod_object,
                      34503748, --_Reference_Most_Recent_TPR_Report
                      in_tpr_object_id
                    );   -- OSPRODUCT-28119
             
             --
             -- Getting BVs to be set on the Third party report object created
             --                                

			 pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_session_id,
                      28987309,--UserSession - xReference - _Reference_ObjectOfInterest
                      in_tpr_report_id--in_tpr_object_id
                    );   -- OSPRODUCT-28119

			 pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_session_id,
                      34060148, --UserSession - xReference - _Reference_Current ThirdPartyReport
                      in_tpr_object_id
                    );   -- OSPRODUCT-28119
                                             
             v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      629
                    );                               
             
             v_masterPolicy_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_policyTransaction_id,
                      24
                    );
                                                                                        
             v_masterCustomer_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_subject_id,
                      12
                    );                                                                           
             
            --
            -- Setting BVs on the Third party report object created
            --
             
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533508,
                      v_policyTransaction_id
                    );
                                             
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533408,
                      v_masterPolicy_id
                    ); 
                                                                           
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533308,
                      v_masterCustomer_id
                    );                             
                      
			pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533608,
                      v_tpr_report_policy_subject_prod_id
                    ); 
            
          if v_session_control.glogging_full
              then
                   pkg_os_logging.sp_log(in_session_id,
                                         in_transaction_id,
                                         v_procedure_name,
                                         ' ||| v_report_specific_object: ' || v_report_specific_object ||
                                         ' ||| in_tpr_report_policy_subject_id: ' || v_tpr_report_policy_subject_id ||
                                         ' ||| v_tpr_report_policy_subject_prod_id: ' || v_tpr_report_policy_subject_prod_id ||
                                         ' ||| v_thirdPartyReport_Building: ' || v_thirdPartyReport_Building
                                         );
    
           end if;
   	  -- End of OSPRODUCT-27416
     -- Start of OSPRODUCT-29892
      elsif in_report_type_id in ( gVinVal_Report) 
        then
     
            v_report_specific_object := pkg_os_object_io.fn_object_bv_get(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      35715748 -- Final VIN Report
                    );  
                                                                   
            v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      629
                    );  -- OSPRODUCT-28119                              

    
             
               --If the report specific object does not already exists, create a new one                                                    
            if v_report_specific_object is  null then
                 
               --
               -- Create a new Report specific object  WorkflowReportOrder-VehicleVIN
               --   
               pkg_os_object.sp_object_create(
                        in_session_id,
                        in_transaction_id,
                        4175648, --WorkflowReportOrder-VehicleVIN
                        v_tpr_report_policy_subject_id, --  parent object  get from new ref 34012248
                        v_report_specific_object
                      );
                                              
               --
               -- Set the Final VIN Report reference on the local subject
               --                                  
               pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_tpr_report_policy_subject_id,
                        35715748, -- Final VIN Report
                        v_report_specific_object
                      ); 
               
               --
               -- Set source report type
               --
               
               pkg_os_object_io.sp_object_bv_set(
                        in_session_id,
                        in_transaction_id,
                        v_report_specific_object,
                        34583748, -- Source report type
                        in_report_type_id
                      );
           
                        
            end if; --If the report specific object does not already exists, create a new one 
                 
                    
      
      -- Setting Predecessor reference for report specific object
      sp_set_predecessor_tpr
      (
           in_session_id,
           in_transaction_id,
           v_report_specific_object,
           in_tpr_object_id,
           in_report_type_id,
           io_action_outcome_id
      ); 
               
			pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      v_report_specific_object,
                      34503748, --_Reference_Most_Recent_TPR_Report
                      in_tpr_object_id
                      ); 
      
      -- Setting Predecessor reference for report specific product object
      sp_set_predecessor_tpr
      (
           in_session_id,
           in_transaction_id,
           v_report_specific_prod_object,
           in_tpr_object_id,
           in_report_type_id,
           io_action_outcome_id
      ); 
                 
			pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      v_report_specific_prod_object,
                      34503748, --_Reference_Most_Recent_TPR_Report
                      in_tpr_object_id
                    );   -- OSPRODUCT-28119
             
             --
             -- Getting BVs to be set on the Third party report object created
             --  
        if v_session_control.glogging_full
              then
                   pkg_os_logging.sp_log(in_session_id,
                                         in_transaction_id,
                                         v_procedure_name,
                                         ' ||| Old _Reference_ObjectOfInterest: ' || pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_session_id, 28987309  )  ||
                                         ' ||| Before setting TPR Report Id in Object of interest: ' 
                                         );
    
           end if;

			 /*pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_session_id,
                      28987309,--UserSession - xReference - _Reference_ObjectOfInterest
                      in_tpr_report_id--in_tpr_object_id
                    );   -- OSPRODUCT-28119*/

          if v_session_control.glogging_full
              then
                   pkg_os_logging.sp_log(in_session_id,
                                         in_transaction_id,
                                         v_procedure_name,
                                         ' ||| in_session_id: ' || in_session_id ||
                                         ' ||| After setting TPR Report Id in Object of interest: ' || in_tpr_report_id
                                         );
    
           end if;

			 pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_session_id,
                      34060148, --UserSession - xReference - _Reference_Current ThirdPartyReport
                      in_tpr_object_id
                    );   -- OSPRODUCT-28119
                                             
             v_policyTransaction_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_policy_subject_id,
                      629
                    );                               
             
             v_masterPolicy_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_policyTransaction_id,
                      24
                    );
                                                                                        
             v_masterCustomer_id := pkg_os_object_search.fn_object_get_parent_of_type(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_subject_id,
                      12
                    );                                                                           
             
            --
            -- Setting BVs on the Third party report object created
            --
             
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533508,
                      v_policyTransaction_id
                    );
                                             
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533408,
                      v_masterPolicy_id
                    ); 
                                                                           
            pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533308,
                      v_masterCustomer_id
                    );   
                                              
           pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      in_tpr_object_id,
                      32533608,
                      v_tpr_report_policy_subject_prod_id
                    );             
                    
                                          
            
          if v_session_control.glogging_full
              then
                   pkg_os_logging.sp_log(in_session_id,
                                         in_transaction_id,
                                         v_procedure_name,
                                         ' ||| v_report_specific_object: ' || v_report_specific_object ||
                                         ' ||| in_tpr_report_policy_subject_id: ' || v_tpr_report_policy_subject_id ||
                                         ' ||| v_tpr_report_policy_subject_prod_id: ' || v_tpr_report_policy_subject_prod_id ||
                                         ' ||| v_thirdPartyReport_Building: ' || v_thirdPartyReport_Building
                                         );
    
           end if;
   	  -- End of OSPRODUCT-29892
      elsif in_report_type_id in (v_IsoClaimSearch_Report)
      then
        
        --madhuri   
        IF v_session_control.glogging_full THEN
                                          
                 pkg_os_logging.sp_log(
                                          in_session_id,
                                          in_transaction_id,
                                          v_procedure_name,
                                          ' ||| Report type is IsoClaimSearch. v_tpr_report_subject_id  '||
                                          v_tpr_report_subject_id
                                          
                                      );
         
         End if; 
         
         -- Get the claim object from tpr_object and then set the reference of tpr_object on claim
          
         pkg_os_object_io.sp_object_bv_set(
                      in_session_id,
                      in_transaction_id,
                      v_tpr_report_subject_id,
                      gbv_RefClaimsLatestTPR, -- reference_claim_to_TPR
                      in_tpr_object_id
                    ); 
      End If;
  
    if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updating DRAGON_TPR_REPORT datamart for : ' || in_tpr_object_id 
            );     
        end if;
        
        pkg_os_datamart.sp_datamart_update_row
       (
            in_session_id,
            in_transaction_id,
            in_tpr_object_id,
            v_datamart_tf
       );
               
        if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Updated DRAGON_TPR_REPORT datamart for : ' || in_tpr_object_id 
            );     
        end if;
	

   io_action_outcome_id :=  pkg_os_constant.gOutcome_OK;

end;
----------------------------------------------------------------------------------------------------------------------  
----------------------------------------------- OSPRODUCT-28767 ---------------------------------------------  
  --  
  --  %NAME
  --    sp_ds_model_exec_wrkflw_init
  --
  --  %USAGE
  --    This procedure initialize the workflow variables
  --
  --  %ALGORITHM
  --    Not Specified.
  --
  --  %PARAM  in_session_id            Session ID
  --  %PARAM  in_transaction_id        Transaction ID
  --  %PARAM  in_action_object_id      Parent object ID of the Email object
  --  %PARAM  io_action_outcome_id     Outcome ID
  --
  ----------------------------------------------------------------------------------------------------------------------
 procedure sp_ds_model_exec_wrkflw_init
 (
  in_session_id          in     object.object_id%type,
  in_transaction_id      in     object.object_id%type,
  in_action_object_id    in     object.object_id%type,
  io_action_outcome_id   in out outcome.outcome_id%type
)    
is

    v_procedure_name      constant system_log.program_name%type   := pkg_name || 'sp_ds_model_exec_wrkflw_init';
    v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);

    ---
    --- Define the necessary BV IDs
    ---   
    gbv_model_trgr_action_id constant number(12) :=  34493748;
    gbv_model_trgr_objt_id   constant number(12) :=  34495848;
    g_get_action_rule_id     constant number(12) :=  13443148;
 
  
																																
																																									  
								 
						   
												
							   

    v_action_id  number(12);  
      
  
begin

    if v_session_control.gLogging_Full
    then
																					   
													   
																		  
																					   
																			   
																					   
													   
				   
																	
																			
									  
														 
										   
				   
										 
										  
											  
											 
												   
												 
																	
														 
						   
  
									  
  
										 
    
        pkg_os_logging.sp_log
        (
            in_session_id,
            in_transaction_id,
            v_procedure_name,
            ' Initialize the workflow variables. '       ||
            ' Action Object Id:'                         || in_action_object_id
        );
      
    end if;

    ---
    --- Initialize the following BVs
    --- a) 34493748 :  UserSession  DS - Session ML : Model Trigger Action ID - Inbound
    --- b) 34495848 :  UserSession  Ref  ML - Workflow Trigger Object ID
    --- 
    
        v_action_id :=    pkg_os_exp.fn_evaluate_expression
                          (
                                in_session_id,
                                in_transaction_id,
                                in_action_object_id,
                                g_get_action_rule_id
                          ); 
 
    pkg_os_object_io.sp_object_bv_path_set( in_session_id, in_transaction_id,in_session_id, gbv_model_trgr_action_id, v_action_id); 
    pkg_os_object_io.sp_object_bv_path_set( in_session_id, in_transaction_id,in_session_id, gbv_model_trgr_objt_id, in_action_object_id);

    if v_session_control.gLogging_Full
    then
    
        pkg_os_logging.sp_log
        (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          ' Rule Result Action ID : '        || v_action_id ||
          ' Action Object Id:'               || in_action_object_id
        );
											   
      
    end if;
 

exception

    when others then
  
  
      pkg_os_logging.sp_log_error
      (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          ' Error Occured : '       || sqlerrm
      );
      
      raise no_data_found;
												
											   
																
      
end sp_ds_model_exec_wrkflw_init;
						 
														

	
----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------
--  
--  %NAME
--    sp_tpr_retrieve_vend_to_pol
--
--  %USAGE
--    This procedure retrives the report data from vendor agnostic model to policy objects
--
--  %ALGORITHM
--
--  %PARAM  in_session_id            Session ID
--  %PARAM  in_transaction_id        Transaction ID
--  %PARAM  in_action_id             object id
--  %PARAM  in_action_object_id      object id
--  %PARAM  io_action_outcome_id     Outcome ID
--
----------------------------------------------------------------------------------------------------------------------
procedure sp_tpr_retrieve_vend_to_pol(in_session_id        in object.object_id%type,
                                               in_transaction_id    in object.object_id%type,
                                               in_action_id         in action.action_id%type,
                                               in_action_object_id  in object.object_id%type,
                                               io_action_outcome_id in out outcome.outcome_id%type) is

  v_procedure_name constant system_log.program_name%type := pkg_name ||
                                                            'sp_tpr_retrieve_vend_to_pol';
  v_session_control pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,
                                                                                                     in_transaction_id);

  v_object_type_id    object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id,
                                                                                          in_transaction_id,
                                                                                          in_action_object_id);
  v_tpr_object_status object_bv_value.business_variable_value%type;
  v_tpr_report_id     tpr_report.tpr_report_id%type;
  v_datamart_tf       char(1);
  gE2Value_Report CONSTANT tpr_report_type.tpr_report_type_id%TYPE := 22448;
  gE2ValueAdjEst_Report CONSTANT tpr_report_type.tpr_report_type_id%TYPE := 24548;
  gTransunion_Report CONSTANT tpr_report_type.tpr_report_type_id%TYPE := 20448;
  v_object_cache                      pkg_os_object_cache.t_object_cache;
  v_tpr_report_policy_subject_id      object.object_id%TYPE;
  v_policyTransaction_id              object.object_id%TYPE;
  v_tpr_report_policy_subject_prod_id object.object_id%TYPE;
  v_report_specific_prod_object       object.object_id%TYPE;

  cursor c_report is
    select tpr_object_id, tpr_report_id, tpr_report_type_id, tpr_report_status_id
      from tpr_report
     where tpr_report_policy_id = in_action_object_id
       and tpr_report_retrieved_tf = 'F'
       and tpr_report_status_id in (18848,10808); --Vendor Response Transformed, Duplicate  

begin

  if v_session_control.gLogging_Full then
    pkg_os_logging.sp_log(in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          'Attempting to retrieve the reports for in_action_object_id: ' ||
                          in_action_object_id || ' in_action_id: ' ||
                          in_action_id || ' v_object_type_id: ' ||
                          v_object_type_id);
  end if;

  for r_report in c_report loop
  
    if v_session_control.gLogging_Full then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            'tpr_object_id: ' || r_report.tpr_object_id ||
                            ' tpr_report_type_id: ' ||
                            r_report.tpr_report_type_id ||
                            ' tpr_report_id: ' || r_report.tpr_report_id);
    end if;
  
    case r_report.tpr_report_type_id
      when gE2Value_Report then
        --TPR object
        v_tpr_report_policy_subject_id := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                            in_transaction_id,
                                                                            r_report.tpr_object_id,
                                                                            32533208);
        v_policyTransaction_id         := pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,
                                                                                            in_transaction_id,
                                                                                            v_tpr_report_policy_subject_id,
                                                                                            629);                            
      
        v_tpr_report_policy_subject_prod_id := PKG_OS_OBJECT_SEARCH.fn_object_with_attribute_get(in_session_id,
                                                                                                 in_transaction_id,
                                                                                                 v_policyTransaction_id, --PT
                                                                                                 2261202, -- PolicyPHOBuildingCoverage
                                                                                                 29411414, -- PolicyPHOBuildingCoverage - xReference - _Reference_Covered Building
                                                                                                 v_tpr_report_policy_subject_id --CustomerBuilding
                                                                                                 ); 
        v_report_specific_prod_object       := pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                                 in_transaction_id,
                                                                                 v_tpr_report_policy_subject_prod_id,
                                                                                 34731048 -- WorkflowReportOrder
                                                                                 );
        if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'v_tpr_report_policy_subject_id: ' ||
                                v_tpr_report_policy_subject_id ||
                                ' v_policyTransaction_id: ' ||
                                v_policyTransaction_id ||
                                ' v_tpr_report_policy_subject_prod_id: ' ||
                                v_tpr_report_policy_subject_prod_id ||
                                ' v_report_specific_prod_object: ' ||
                                v_report_specific_prod_object);
        end if;
      
        if v_report_specific_prod_object is null then
        
          sp_tpr_report_details_reset(in_session_id,
                                      in_transaction_id,
                                      r_report.tpr_object_id,
                                      r_report.tpr_report_id,
                                      r_report.tpr_report_type_id,
                                      io_action_outcome_id);
        
        end if;
      
        pkg_os_wf_rules.sp_initialization_rules(in_session_id,
                                                in_transaction_id,
                                                null,
                                                3051748,
                                                r_report.tpr_object_id,
                                                pkg_os_constant.gActiRuleTime_Post,
                                                v_object_cache);
		
	  when  gE2ValueAdjEst_Report then
         
        pkg_os_wf_rules.sp_initialization_rules(in_session_id,
                                                in_transaction_id,
                                                null,
                                                3299748,
                                                r_report.tpr_object_id,
                                                pkg_os_constant.gActiRuleTime_Post,
                                                v_object_cache);

        if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Retrieved the reports for in_action_object_id: ' ||
                                in_action_object_id || ' in_action_id: ' ||
                                in_action_id || ' v_object_type_id: ' ||
                                v_object_type_id);
        end if;
		
	  when  gTransunion_Report then 
         pkg_os_wf_rules.sp_initialization_rules(in_session_id,
                                                in_transaction_id,
                                                null,
                                                3117848,
                                                r_report.tpr_object_id,
                                                pkg_os_constant.gActiRuleTime_Post,
                                                v_object_cache);
                                               
        if v_session_control.gLogging_Full then
         pkg_os_logging.sp_log(in_session_id,
                               in_transaction_id,
                               v_procedure_name,
                              'Initialized Transunion BVs ' ||
                               r_report.tpr_object_id || ' tpr_object_id: ' ||
                               in_action_id || ' v_object_type_id: ' ||
                               v_object_type_id);
         end if;
      
      else
      
        if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                'Unsupported report type id: ' ||
                                r_report.tpr_report_type_id);
        end if;
      
    end case;
	
	 if r_report.tpr_report_status_id = 10808
    then
      update TPR_REPORT
                 set 
                     TPR_REPORT_RETRIEVED_TF = 'T',
                     TPR_RECEIPT_DATE        = SYSDATE
               where TPR_REPORT_ID = r_report.tpr_report_id;
    else

     pkg_os_object_io.sp_object_bv_set(
                             in_session_id,
                             in_transaction_id,
                             r_report.tpr_object_id,
                             21786401,             --TPR Status
                             2                     --Successful
                             );
                                       
      sp_update_tpr_report_status
       (
        in_session_id,
        in_transaction_id,
        r_report.tpr_object_id,
        io_action_outcome_id
      );
     end if;	  
 
  end loop;

exception

  when others then
    pkg_os_logging.sp_log_error(in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' Error Occurred: ' || sqlerrm);
  
end sp_tpr_retrieve_vend_to_pol;


-----------------------------OSPRODUCT-27676---------------------------------------------	


procedure sp_update_eff_exp_filing
(
    in_session_id                         in      object.object_id%type,
    in_transaction_id                     in      object.object_id%type,
    in_ptp_id                      in      object.object_id%type,
    io_action_outcome_id                  in out  outcome.outcome_id%type
)
as
    v_procedure_name                              constant system_log.program_name%type := pkg_name||'sp_update_eff_exp_filing';
    v_session_control                             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
    v_effective_date        date;
    v_exp_date        date;
  v_object_list     pkg_os_object.t_object_list;
      v_object_index    number;

begin
    v_effective_date := to_DATE(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                     in_transaction_id,
                                                                     in_ptp_id,
                                                                     gbv_pol_Eff_Date),
                                   'yyyymmddhh24miss');
    v_exp_date := to_DATE(pkg_os_object_io.fn_object_bv_get(in_session_id,
                                                                     in_transaction_id,
                                                                     in_ptp_id,
                                                                     gbv_pol_Exp_Date),
                                   'yyyymmddhh24miss');
                   
  pkg_os_object_search.sp_object_children_of_type_get(in_session_id,
                                                        in_transaction_id,  
                            in_ptp_id,
                            pkg_os_constant.gObjType_LOB,
                            v_object_list);
                   
  if v_session_control.gLogging_Full then
      pkg_os_logging.sp_log(in_session_id,
                            in_transaction_id,
                            v_procedure_name,
                            '...... LOB count  ' ||
                            v_object_list.count||
                            ' v_effective_date '||v_effective_date||
                            ' v_exp_date  '||v_exp_date);
    end if;                
  
v_object_index := v_object_list.first;
  
    while v_object_index is not null loop
    
      if v_session_control.gLogging_Full then
      
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '......... Updating LOB object id: ' ||
                              v_object_list(v_object_index));
      
      end if;
    
      --Updating effective dt
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_object_list(v_object_index),
                                        gbv_pol_Eff_Date,
                                        TO_CHAR(v_effective_date,'yyyymmddhh24miss'));
    --Updating exp dt
      pkg_os_object_io.sp_object_bv_set(in_session_id,
                                        in_transaction_id,
                                        v_object_list(v_object_index),
                                        gbv_pol_Exp_Date,
                                        TO_CHAR(v_exp_date,'yyyymmddhh24miss'));
      v_object_index := v_object_list.next(v_object_index);
    
    end loop;
    pkg_os_product_filing.sp_reset_filing_process
          (
               in_session_id,
               in_transaction_id,
               in_ptp_id
          ); 
          
        if v_session_control.gLogging_Full then
      
        pkg_os_logging.sp_log(in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '......... Updating FILING id: ');
      
      end if;
                         
   io_action_outcome_id :=  pkg_os_constant.gOutcome_OK;

end;
----------------------------------------------------------------------------------------------------------------------
procedure sp_reset_ev_usersession_bv
(
    in_session_id                         in  object.object_id%type,
    in_transaction_id                     in  object.object_id%type,
    in_action_object_id                   in  object.object_id%type,
    io_action_outcome_id                  in out  outcome.outcome_id%type
)
as
     v_count_tpr_report_object_id    object.object_id%type;
     v_procedure_name      constant system_log.program_name%type   := pkg_name || 'sp_reset_ev_usersession_bv';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);

begin
    if v_session_control.gLogging_Full
        then
            pkg_os_logging.sp_log
            (
                in_session_id,
                in_transaction_id,
                v_procedure_name,
                'Inside sp_reset_ev_usersession_bv,  in_action_object_id: ' || in_action_object_id 
            );     
        end if;
     pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    pkg_os_constant_bv.gbv_SessionObjectOfInterest,
                    in_action_object_id     
               );
                                        
    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
 
end sp_reset_ev_usersession_bv;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      fn_max_vehicle_sequence_get
--
--  %USAGE
--      The Vehicle Sequence number is unique within its POLICYCAU object
--     This function returns the maximum vehicle Sequence number 
--      for the given Policy from the datamart.
--
--      Note: Getting the max sequence number from a datamart will be expensive after a certain period of time,
--      especially for  LS quotes/policies.
--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM

--      in_policycau_id      Policy Commercial auto Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_max_vehicle_sequence_get
(

     in_policycau_id       in    object.object_id%type
)
return number
is

     v_return_value          number;

begin
     -- Get the _ChildCount_PolicyCAUVehicle Count from PolicyCAU
     -- This will ensure that we get a unique sequence number within a PolicyCAU

     v_return_value := pkg_os_object.fn_object_children_count_get(in_policycau_id, gObjType_PolicyCAUVehicle);

     return v_return_value;

end fn_max_vehicle_sequence_get;

----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_clone_commercial_auto
--
--  %USAGE
--      Duplicate incoming vehicle object

--
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM

--      in_action_object_id      Policy Commercial auto Vehicle Object ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clone_commercial_auto(in_session_id in object.object_id%type,
                        in_transaction_id  in object.object_id%type,
                        in_action_object_id   in object.object_id%type,
                        io_action_outcome_id in out outcome.outcome_id%type)
 as
    v_new_CAU_Vehicle  object.object_id%type;
    
    v_parent_PolicyCAU object.object_id%type;
    
    v_auto_sequence        number; 
    
    v_datamart_tf          char(1);
    
    v_procedure_name varchar2(100):= pkg_name || 'sp_clone_commercial_auto';
    
    v_parent_object_type_id      object_type.object_type_id%type;
    v_action_object_type_id      object_type.object_type_id%type := pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, in_action_object_id);

  begin
      
    pkg_os_object_copy.sp_object_duplicate(in_session_id                 => in_session_id ,
                                           in_transaction_id             => in_transaction_id,
                                           in_from_object_id             => in_action_object_id,
                                           out_duplicate_object_id       => v_new_CAU_Vehicle,
                                           in_copy_premium_recs_tf       => 'F',
                                           in_resolve_task_references_tf => 'F');
    

    v_parent_PolicyCAU := pkg_os_object.fn_object_parent_get(in_session_id,
                                                             in_transaction_id,
                                                             in_action_object_id);
    v_parent_object_type_id:= pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id, v_parent_PolicyCAU);
    pkg_os_object.sp_object_parent_set(in_session_id,
                                       in_transaction_id,
                                       v_new_CAU_Vehicle,
                                       v_parent_PolicyCAU);
      
    pkg_os_object_io.sp_object_bv_set(in_session_id,
                                      in_transaction_id,
                                      in_session_id,
                                      pkg_os_constant_bv.gbv_SessionNewObject,
                                      v_new_CAU_Vehicle);
      
    v_auto_sequence := fn_max_vehicle_sequence_get( v_parent_PolicyCAU) ;
    
    pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_CAU_Vehicle, gbv_GenericSequenceNumber, v_auto_sequence);
   --pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_new_CAU_Vehicle, pkg_os_constant_bv.gbv_GenObjInstanceNumber , v_auto_sequence);
    v_parent_object_type_id := pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_parent_PolicyCAU );
    pkg_os_object.sp_object_update_counts(in_session_id, in_transaction_id, v_new_CAU_Vehicle, 
                                           v_action_object_type_id, v_parent_PolicyCAU, v_parent_object_type_id);
    
    pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_new_CAU_Vehicle, v_datamart_tf);

    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
   exception
     when others then 
        pkg_os_logging.sp_log_error(in_session_id,in_transaction_id,v_procedure_name,'Error cloning vehicle'||SQLERRM);
        raise;
 end sp_clone_commercial_auto; 

----------------------------------------------------------------------------------------------------------------------
---OSPRODUCT-29818---start---
procedure sp_generate_pt_exoskeleton
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_action_object_id                in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
is
     v_procedure_name                constant    varchar2(100)               := 'sp_generate_pt_exoskeleton';
     v_session_control	             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_is_pt_elligible               char(1)                                 := 'T';
     v_policy_trx_id                 object.object_id%type;
     v_tns_enabled_sa                constant    varchar2(100)               := 'TNS_ENABLED_TF';
     v_product_all                   constant    number(12)                  := '0';
     v_ptx_type_bor                  constant    number(12)                  := '10';
     v_ptx_type_new_claim            constant    number(12)                  := '6546';             
begin
  
   if v_session_control.gLogging_Full then

      pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              'Checking elligibility of the policy transaction for Snapshot generation'
          ) ;
    end if;
    begin

    select policy_trx_id 
    into v_policy_trx_id
    from dragon_policy_trx ptx, pd_tns_trigger tns
    where
      lower(pkg_os_system_attribute.fn_get_system_attribute_value('TNS_ENABLED_TF')) = 'true'
      AND (
        -- check if the PD_TNS_TRIGGER config is available
        tns.context_object_type_id = 629 -- PolicyTransaction
        and tns.active_tf = 'T'
        and ptx.policy_trx_object_state_id = tns.object_state
        -- ignore NewClaim, BOR TRX type
        and ptx.policy_trx_type_id not in ( 6546, 10 )
        -- check if ptx belongs to product and program
        and (
          tns.pd_product_id = 0 -- if Product is all in TNS Config
          or tns.pd_product_id = ptx.policy_trx_product_id -- else match by product id
        )
        -- evaluate the elligbility rule if present
        and (
          tns.tns_eligibility_rule is null
          or
          pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, ptx.policy_trx_id, tns.tns_eligibility_rule) = 'T'
        )
        -- Check for transactions that are in retention period.
        and trunc(NVL(ptx.policy_trx_process_date, sysdate)) > trunc(sysdate-TO_NUMBER(pkg_os_system_attribute.fn_get_system_attribute_value('TNS_RETENTION_DURATION')))
      )
      AND policy_trx_id = in_action_object_id;


  exception
    when no_data_found then
      v_is_pt_elligible :=  'F';

  end;
  
  if v_is_pt_elligible = 'T' 
    then
      pkg_os_dxf_exoskeleton.sp_setup_exoskeleton_structure
      (
           in_session_id,
           in_transaction_id,
           in_action_object_id,
           io_action_outcome_id
      );
          
      sp_cs_modify_exoskeleton 
                (
           in_session_id,
           in_transaction_id,
           in_action_object_id
      );    
  else
    io_action_outcome_id := gOutcome_NoRecordFound;
  end if;
  
end sp_generate_pt_exoskeleton;
---OSPRODUCT-29818---end---

------------OSPRODUCT-23405:START----------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_exec_tree_rules_and_aux
--
--   %USAGE
--        Execute the initialization rules (pre and post) and Aux commands (pre and post) for the page actions mapped to the the tree in an 
--        automated workflow where the pages are not loaded manually.
--
--   %ALGORITHM
--        Given an action id, this procedure:
--              a. Gets(or creates, if required) the list of all the tree id mapped to the action in ACTION_OBJECT_TREE_RLTN table.
--              b. If the entries for the action is not defined in ACTION_OBJECT_TREE_RLTN table, system will create default tree configured for the product.
--              c. Loops over all the tree id's and lists all the nodes, ordered by the node_sequence.
--              d. Executes initialization rule and Aux commands associated with node's page action in below order
--                 1. Pre Initialization rule
--                 2. Pre Aux commands
--                 3. Post Initialization rule
--                 4. Post Aux commands
--    
--
--   %PARAMS
--        in_session_id
--        in_transaction_id
--        in_action_id - Action will be used to get the mapped tree definition, if none exists, tree will be created based on product
--        in_action_object_id
--        in_object_cache
--        io_message_list
--        io_action_outcome_id
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_exec_tree_rules_and_aux
(
     in_session_id                            in        object.object_id%type,
     in_transaction_id                        in        object.object_id%type,
     in_action_id                             in        object.object_id%type,
     in_action_object_id                      in        object.object_id%type,
     in_object_cache                          in out    pkg_os_object_cache.t_object_cache,
     io_message_list                          in out    pkg_os_message.t_message_list,
     io_action_outcome_id                     in out    outcome.outcome_id%type
)
as

     v_procedure_name               constant system_log.program_name%type            := pkg_name||'sp_exec_tree_rules_and_aux';
     v_session_control              pkg_os_session.r_dragon_session_control          := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_tree_id                      object.object_id%type;
     v_product_id                   pd_product.pd_product_id%type                    := pkg_os_product.fn_object_product_get(in_session_id,in_transaction_id,in_action_object_id);
     v_action_tree_instance_list    pkg_os_tree_action.t_tree_instance;
     v_index                        number;
     v_object_tree_id               object_tree.object_tree_id%type;
     v_node_start_time              number;
   
   
   cursor c_tree_nodes( in_tree_id  in object.object_id%type)
     is
     select
          ttn.node_id                                             node_id,
          ttn.node_parent_id                                      node_parent_id,
          ttn.node_definition_id                                  node_definition_id,
          ttn.node_assoc_object_id                                node_assoc_object_id,
          ttn.node_label                                          node_label,
          otn.node_page_action_id                                 node_page_action_id
     from
          tmp_tree_nodes      ttn,
          object_tree_node    otn
     where
          otn.object_tree_node_id = ttn.node_definition_id
     and
          ttn.tree_id = in_tree_id
     order by
          node_sequence;     

begin
  
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
           ( 
              in_session_id, 
              in_transaction_id, 
              v_procedure_name, 
              '|||||| Searching or creating tree definitions mapped with the action : '||in_action_id|| ' or product: '||v_product_id||' .CurrentObjectID: '|| in_action_object_id 
           );

     end if;     
     
     --
     --   Get all the tree id's for tree definition mapped with the passed action...
     --
     
     pkg_os_tree_action.sp_action_objt_tree_rltn_list
     (
          in_session_id,
          in_transaction_id,
          in_action_id,
          in_action_object_id,
          v_product_id,
          v_action_tree_instance_list 
     );
     
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          ( 
            in_session_id, 
            in_transaction_id, 
            v_procedure_name, 
            '|||||| Number of tree created/exists for the passed object id : '||in_action_object_id||' are: '|| v_action_tree_instance_list.count 
          );

     end if;

     v_index := v_action_tree_instance_list.first;

     while v_index is not null loop 

          v_tree_id := v_action_tree_instance_list(v_index);
          

          if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                     ( 
                          in_session_id, 
                          in_transaction_id, 
                          v_procedure_name, 
                          '|||||| Searching for all the relevant nodes of the tree id: ' || v_tree_id  
                     );

          end if; 
    
          for r_node in c_tree_nodes(v_tree_id)
          loop
              
              v_node_start_time := dbms_utility.get_time;
              
              if v_session_control.gLogging_full
              then

                   pkg_os_logging.sp_log
                   (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '|||||| Running initialization Rules and aux commands for page Action: '          ||  r_node.node_page_action_id ||
                          '|||||| node label: '                                                             ||  r_node.node_label
                   );

              end if;

              --
              --  Fire the pre-initialization rules ...
              --

              pkg_os_wf_rules.sp_initialization_rules
               (
                     in_session_id,
                     in_transaction_id,
                     null,
                     r_node.node_page_action_id,
                     r_node.node_assoc_object_id,
                     pkg_os_constant.gactiruletime_pre,
                     in_object_cache
                );
             
              --
              -- Fire the pre-aux_db_commands ...
              --
                                
               pkg_os_action.sp_execute_aux_db_commands
               (
                      in_session_id,
                      in_transaction_id,
                      in_object_cache,
                      r_node.node_page_action_id,
                      r_node.node_assoc_object_id,
                      pkg_os_constant.gActiRuleTime_Pre,
                      io_message_list
               );


              --
              --  Fire the post-initialization rules ...
              --

              pkg_os_wf_rules.sp_initialization_rules
              (
                   in_session_id,
                   in_transaction_id,
                   null,
                   r_node.node_page_action_id,
                   r_node.node_assoc_object_id,
                   pkg_os_constant.gactiruletime_post,
                   in_object_cache
              );
          
              --
              --   Fire the post-aux_db_commands ...
              --
                
              pkg_os_action.sp_execute_aux_db_commands
               (
                      in_session_id,
                      in_transaction_id,
                      in_object_cache,
                      r_node.node_page_action_id,
                      r_node.node_assoc_object_id,
                      pkg_os_constant.gActiRuleTime_Post,
                      io_message_list
               );
               
             if v_session_control.gLogging_performance
              then

                   pkg_os_logging.sp_log
                   (
                          in_session_id,
                          in_transaction_id,
                          v_procedure_name,
                          '|||||| Completed executing initialization Rules and aux commands for node: ' || r_node.node_label ||
                          '|||||| Elapsed time: '                                                       || (dbms_utility.get_time - v_node_start_time) * 10 
                   );

            end if;           
      
      end loop;
            
      v_index := v_action_tree_instance_list.next (v_index);
      
   end loop; 
   
   if v_session_control.gLogging_Full then

              pkg_os_logging.sp_log
              ( 
                      in_session_id, 
                      in_transaction_id, 
                      v_procedure_name, 
                      '|||||| Completed executing initialization rules and aux commands.'   );

   end if;
   
   io_action_outcome_id := pkg_os_constant.gOutcome_OK;
   
exception
   when others then

             pkg_os_logging.sp_log_error
              (
                      in_session_id,
                      in_transaction_id,
                      v_procedure_name,
                      ' Error while executing initialization rules and Aux commands for Tree page actions: '
                      ||SQLERRM
              );
    
    raise no_data_found;           
end  sp_exec_tree_rules_and_aux;

------------OSPRODUCT-23405:END----------------------------

END PKG_PC_PROCEDURES;
/
