create or replace package body PKG_DB_OBJECT
-------------
-- $Workfile:   BASE_API.PKG_DB_OBJECT.PBK  $
-- $Revision:   1.16  $
--   $Author:   pmedapati  $
--     $Date:   07 Nov 2013 14:42:04  $
-------------
as


-----------------------------------------------------------------------------------------------------------------------------------------------------
--      Package Constants ...
-----------------------------------------------------------------------------------------------------------------------------------------------------

v_current_date                   object_bv_value.business_variable_value%type;
pkg_name                         constant  system_log.program_name%type               :=   'pkg_db_object.';

g_policy_payer_tab                 pkg_db_multipayer.t_policy_payer_tab;  -- #MP. UTPRODUCT-4841

FICHANGE_NOT_BALANCED EXCEPTION;
PRAGMA EXCEPTION_INIT(FICHANGE_NOT_BALANCED, -30101);

-- OSBILLING-5011
POLICYTRX_NOT_BALANCED EXCEPTION;
PRAGMA EXCEPTION_INIT(POLICYTRX_NOT_BALANCED, -30102);

-- OSPRODUCT-25053
COMMISSION_NOT_BALANCED EXCEPTION;
PRAGMA EXCEPTION_INIT(COMMISSION_NOT_BALANCED, -30103);

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure show_version
is
begin
     dbms_output.put_line ('$Workfile:   BASE_API.PKG_DB_OBJECT.PBK  $');
     dbms_output.put_line ('$Revision:   1.16  $');
     dbms_output.put_line ('$Author:   pmedapati  $');
     dbms_output.put_line ('$Date:   07 Nov 2013 14:42:30  $');
exception

     when others
     then
          dbms_output.put_line (sqlerrm (sqlcode));

end show_version;
----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_ba_object_bv_set
--
--   %USAGE
--        This procedure is an extension of pkg_os_object_io.sp_object_bv_set.
--        The procedure will first check the lock on the object whose BV is being updated.
--        If not locked it will put a lock, set the BV and then clear the lock.
--
--   %ALGORITHM
--        Not Specified
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_object_id                  object id
--   %PARAM             in_bv_id                      BV ID
--   %PARAM             in_bv_value                   BV Value
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- OSPRODUCT-6422
-- UTPRODUCT-4456 Refactored
procedure sp_ba_object_bv_set
(
     in_session_id                 in                 object.object_id%type,
     in_transaction_id             in                 object.object_id%type,
     in_object_id                  in                 object.object_id%type,
     in_bv_id                      in                 business_variable.business_variable_id%type,
     in_bv_value                   in                 object_bv_value.business_variable_value%type,
     in_insert                     in                 boolean default false,
     in_set_encrypted_value        in                 boolean default false
)
as

     v_lock_status                 char := null;    

begin

     if in_object_id is not null and in_bv_id is not null then
          
          sp_db_set_object_lock
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               v_lock_status
          );

          if v_lock_status = 'T' then
               
               -- Do the BV set
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_id,
                    in_bv_id,
                    in_bv_value,
                    in_insert,
                    in_set_encrypted_value
               );

               sp_db_clear_object_lock
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_id
               );
               
          end if;

     end if;

end sp_ba_object_bv_set;

-- OSPRODUCT-6422
-- UTPRODUCT-4456 Refactored
procedure sp_ba_object_bv_set
(
     in_session_id                 in                object.object_id%type,
     in_transaction_id             in                object.object_id%type,
     in_object_id                  in                object.object_id%type,
     in_bv_table                   in                pkg_os_object_io.t_bv_table,
     in_insert                     in                boolean default false,
     in_set_encrypted_value        in                boolean default false
)
as

     v_lock_status                 char := null;
     
begin

     if in_object_id is not null and in_bv_table.count > 0 then
          
          sp_db_set_object_lock
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               v_lock_status
          );
          
          if v_lock_status = 'T' then

               -- Do the BV set
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_id,
                    in_bv_table,
                    in_insert,
                    in_set_encrypted_value
               );

               sp_db_clear_object_lock
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_id
               );
               
          end if;

     end if;

end sp_ba_object_bv_set;



-- OSPRODUCT-19433
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_ba_object_bv_path_set
--
--  %USAGE
--      Given an object, a BV-Path and a BV-Value, sets the BV pointed to by
--      the path to the input value.
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     in_session_id    Session ID
--  %PARAM     in_transaction_id  Transaction ID
--  %PARAM     in_object_id      Object ID
--  %PARAM     in_bv_path          BV Path
--  %PARAM     in_bv_path_value BV Path Value
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ba_object_bv_path_set
(
     in_session_id            in      object.object_id%type,
     in_transaction_id        in        object.object_id%type,
     in_object_id         in    object.object_id%type,
     in_bv_path               in     varchar2,
     in_bv_path_value   in   varchar2
)
is

     v_bv_table               pkg_os_token.t_string_table;


     v_target_object_id    object.object_id%type                  := in_object_id;

     v_bv_path          varchar2(200)                    := pkg_os_token.fn_strip_suffix( in_bv_path, chr(5) ); -- strip off the object-type information.
     v_object_path      varchar2(200);

     v_business_variable_id  business_variable.business_variable_id%type;

begin

     if instr( v_bv_path, '.' ) = 0
     then

          pkg_db_object.sp_ba_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               v_bv_path,
               in_bv_path_value
          );

     else

          --
          --  Follow the BV path down until we find the object in which the value in question is sitting ...
          --

          --  pkg_os_token.sp_tokenize_string( v_bv_path, '.', v_bv_table);

          pkg_os_object_io.sp_tokenize_string_local
          (
               v_bv_path,
               '.',
               v_bv_table
          );

          v_business_variable_id  := v_bv_table(v_bv_table.last);
          v_object_path      :=   substr( v_bv_path, 1, length(v_bv_path) - length(to_char(v_business_variable_id)||'.'));

          --
          --  Get the target BV path ...
          --

          v_target_object_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_object_id, v_object_path );

          --
          --  Now set the value ...
          --

          if v_target_object_id is not null
          then

               pkg_db_object.sp_ba_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_target_object_id,
                    v_business_variable_id,
                    in_bv_path_value
               );

          end if;

     end if;

end sp_ba_object_bv_path_set;
-- OSPRODUCT-19433
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--  %NAME
--      sp_ba_object_bv_path_set
--
--  %USAGE
--      Not Specified.
--
--  %ALGORITHM
--      Not Specified.
--
--  %PARAM     in_session_id      Session ID
--  %PARAM     in_transaction_id      Transaction ID
--  %PARAM     in_object_id         Object ID
--  %PARAM     io_bv_path_value_list BV Path Value List
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ba_object_bv_path_set
(
     in_session_id            in         object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_object_id         in      object.object_id%type,
     io_bv_path_value_list in out nocopy  pkg_os_object_io.t_bv_path_table
)
as

     v_table_index      number                      := io_bv_path_value_list.first;

begin

     while v_table_index is not null loop

          sp_ba_object_bv_path_set
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               io_bv_path_value_list(v_table_index).business_variable_path,
               io_bv_path_value_list(v_table_index).business_variable_value
          );

          v_table_index := io_bv_path_value_list.next(v_table_index);

     end loop;

end sp_ba_object_bv_path_set;
-- OSPRODUCT-19433

procedure sp_db_set_object_lock
(
     in_session_id                 in                object.object_id%type,
     in_transaction_id             in                object.object_id%type,
     in_object_id                  in                object.object_id%type,
     out_lock_status               in out            char
)
as

     v_procedure_name              constant system_log.program_name%type := pkg_name||'sp_db_set_object_lock';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);--OSPRODUCT-11392
     
     --v_lock_status                 char;
     v_ancestor_list               wf_tmp_object_lock.ancestor_list%type; 
     v_ultimate_parent             object.object_id%type;
     v_user_id                     object.object_id%type;
     v_session_id                  object.object_id%type;
     v_creation_date               date;
     v_transaction_id              object.object_id%type; -- UTPRODUCT-4211
     v_flag_override               char := 'F';--OSPRODUCT-11392

begin
     
     out_lock_status := null;

     if in_object_id is not null then

          begin

               select
                    user_id, session_id, creation_date
               into
                    v_user_id, v_session_id, v_creation_date
               from
                    wf_tmp_object_lock
               where
                    object_id = in_object_id; -- UTPRODUCT-4404
                    
               if v_session_id = in_session_id then
                    out_lock_status := 'T';                    
               else                    
                    out_lock_status := 'F';
               end if;
                    
          exception
               
               when no_data_found then
                    out_lock_status := null;
                    
               when others then                    
                    out_lock_status := null;                    
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         ' Error: ' ||sqlerrm||dbms_utility.format_error_backtrace  
                    );
                    
          end;
               
          if out_lock_status is null then

               pkg_os_object_search.sp_object_ancestor_list
               (
                    in_object_id,
                    v_ancestor_list,
                    v_ultimate_parent
               );
 
               ------------------------OSPRODUCT-11392 start--------------------------------------              
               begin
               
                    pkg_os_lock.sp_set_object_lock
                    (
                         in_session_id,
                         in_transaction_id,
                         in_object_id,
                         out_lock_status,
                         in_ancestor_list => v_ancestor_list
                    );
               
               exception
                    when others 
                    then     
                         begin

                              v_flag_override     :=   'T';
                              
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '.. Override flag marked as T. Violation thrown from pkg_os_lock.sp_set_object_lock'
                                   );
                              end if;
                              
                              select
                                   user_id, session_id, creation_date
                              into
                                   v_user_id, v_session_id, v_creation_date
                              from
                                   wf_tmp_object_lock
                              where
                                   object_id = in_object_id; 
                                   
                              if v_session_id = in_session_id 
                              then
                                   out_lock_status := 'T';                    
                              else                    
                                   out_lock_status := 'F';
                              end if;
                              
                         exception
                              
                              when no_data_found then
                                   out_lock_status := null;
                                   
                              when others then                    
                                   out_lock_status := null;                    
                                   pkg_os_logging.sp_log_error
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        ' Error: ' ||sqlerrm||dbms_utility.format_error_backtrace  
                                   );
                         end;
               end;

               if out_lock_status = 'F' and v_flag_override = 'F'
               then
               --------------------------------OSPRODUCT-11392 end-------------------------
  
                    begin

                         select 
                              olock.user_id, olock.session_id, olock.creation_date
                         into 
                              v_user_id, v_session_id, v_creation_date
                         from
                              (
                                   select
                                        user_id, session_id, creation_date
                                   from
                                        wf_tmp_object_lock
                                   where
                                        -- OSPRODUCT-10484
                                        root_object_id = v_ultimate_parent
                                     and
                                        (
                                             object_id = in_object_id                                
                                             or
                                             instr(v_ancestor_list, object_id) > 0
                                             or
                                             instr(ancestor_list, in_object_id) > 0
                                        )
                                        -- end OSPRODUCT-10484

                                   order by
                                        session_id desc
                              ) olock
                         where
                              rownum = 1
                           ;

                    exception 
                         when others then
                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   ' Error: ' ||sqlerrm||dbms_utility.format_error_backtrace  
                              );

                    end;

               end if;
               
          end if;
          
          if out_lock_status = 'F' then
               
               begin

                    select 
                         max(transaction_id)
                      into
                         v_transaction_id
                      from 
                         dragon_transaction
                     where 
                         user_session_id = v_session_id
                       and 
                         requested_action_id is not null;

               end;

               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Locked By User :' || v_user_id ||
                    ' Locked By Session Id:' || v_session_id||
                    ' Locked at:'|| to_char( v_creation_date, pkg_os_constant.DragonDateFormatDefault ) ||
                    ' Most recent transaction: ' || v_transaction_id
               );        

               raise_application_error
               (
                    -20999,'Unable to lock object id:'|| in_object_id ||' Lock By Session Id:' ||
                    v_session_id || ' Transaction ID:'|| v_transaction_id 
               );
               
          elsif out_lock_status = 'T' then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Lock acquired/exists on the object ID:' || in_object_id
               );

          end if;

     end if;

end sp_db_set_object_lock;

procedure sp_db_clear_object_lock
(
     in_session_id                 in                object.object_id%type,
     in_transaction_id             in                object.object_id%type,
     in_object_id                  in                object.object_id%type
)
as

     v_procedure_name              constant system_log.program_name%type := pkg_name||'sp_ba_clear_object_lock';
begin

     if in_object_id is not null then
          
          pkg_os_lock.sp_clear_object_lock
          (
               in_session_id,
               in_transaction_id,
               in_object_id
          );

     end if;

end sp_db_clear_object_lock;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fichange_create
--
--   %USAGE
--        This procedure creates a FIChange Objectbased on the input parameters,
--        and udpates the references that are common to the Fichanges universally.
--        This is also used to calculate the running totals for Billing Account, Policy, Fitem
--
--   %ALGORITHM
--        1. Calculate the running totals at the Billing Account, Policy, Fitem level.
--        2. Generate FIChange Object
--        3. Set the BVs in bulk
--        4. Set the references from Billing Account, Policy, Fitem to this FIchange
--
--   %CAUTION
--        IF YOU INTEND TO SET A NEW BV (OR A REFERENCE) FOR FICHANGE, USE EXISTING BULK WRITE THROUGH TABLE.
--        DO NOT ADD A NEW SP_OBJECT_BV_SET CALL, UNLESS YOU WANT TO KILL PERFORMANCE.
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--   %PARAM             in_fi_transaction_id          FITransaction Id
--   %PARAM             in_fichange_action            FIChange Action
--   %PARAM             in_fichange_action_delta      FIChange Action Delta
--   %PARAM             in_fichange_sum_include       FIChange Sum Include
--   %PARAM             in_fichange_process_date      FIChange Process Date
--   %PARAM             in_fichange_ref_fitem         FIChange Ref Fitem
--   %PARAM             out_fi_change_id              FIChange Id
--   %PARAM             in_fichange_ref_pol           FIChange Ref Policy
--   %PARAM             in_fichange_ref_pol_trx       FIChange Ref Policy
--   %PARAM             in_fichange_belongs_to        FIChange Belongs To
--   %PARAM             in_current_date_time          Current Date Time
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fichange_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_parent_fitransaction_id         in             object.object_id%type,
     in_fichange_action                 in             lookup_list_value.lookup_enum%type,
     in_fichange_action_delta           in             number,
     in_fichange_ref_fitem              in             object.object_id%type,              -- The FItem that caused the FIChange to be created
     out_fichange_id                    out            object.object_id%type,
     in_current_date_time               in             date default null,
     in_fichange_sum_include            in             lookup_list_value.lookup_enum%type default null,
     in_fichange_process_date           in             object_bv_value.business_variable_value%type default null,
     in_fichange_ref_pol                in             object.object_id%type default null,
     in_fichange_ref_pol_trx            in             object.object_id%type default null,
     in_fichange_belongs_to             in             object.object_id%type default null,
     in_fichange_object_state           in             object_bv_value.business_variable_value%type default null,
     in_bv_table                        in             pkg_os_object_io.t_bv_table default pkg_os_object_io.gnull_bv_table,
     in_refresh_datamart                in             char default 'T',
     in_billing_account_id              in             object.object_id%type default null,
     in_fitem_lock_tf                   in             char default 'T',-- UTPRODUCT-3679
     in_enable_perf_mode_tf             in             char default 'F',
     in_associated_fitx_values          in             dragon_fichange%rowtype default null, -- OSPRODUCT-7816
     in_associated_pt_value             in             dragon_fichange%rowtype default null  -- OSPRODUCT-7816
)
is

     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_fichange_create';
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_bv_table                         pkg_os_object_io.t_bv_table;

     v_billing_account_id               object.object_id%type;
     v_ba_recent_fichange               object.object_id%type;
     v_ba_prev_total                    number;
     v_ba_run_total                     number;

     v_fitem_recent_fichange            object.object_id%type;
     v_fitem_prev_total                 number;
     v_fitem_run_total                  number;
     v_fitem_category_id                object.object_id%type;
     v_fitem_type                       object.object_id%type;

     v_policy_recent_fichange           object.object_id%type;
     v_policy_prev_total                number;
     v_policy_run_total                 number;
     v_datamart_tf                      char(1)   :=   'T';

     v_fichange_ref_pol                object.object_id%type := in_fichange_ref_pol;
     v_fichange_ref_pol_trx            object.object_id%type := in_fichange_ref_pol_trx;
     v_fichange_belongs_to             object.object_id%type := in_fichange_belongs_to;
     --v_billing_account_type_id         object_bv_value.business_variable_value%type;
     v_fichange_process_date           object_bv_value.business_variable_value%type := in_fichange_process_date;
     v_lock_status                     char;
     v_fichange_due_date               object_bv_value.business_variable_value%type;
     
     v_policy_id                       object.object_id%type;
     v_policy_trx_id                   object.object_id%type;
     v_entity_id                       object.object_id%type;
     v_billing_due_date                date;
     v_aging_status_chng_dt            date;
     v_aging_status_id                 number;
     v_fitem_billed_tf                 number;
     v_fitem_billed_dt                 date;
     v_related_recon_bats_id           object.object_id%type;
     v_current_recon_bats_id           object.object_id%type;
     v_fitem_security_status           number;
     v_fitem_withdrawal_date           date;
     v_bats                            object.object_id%type;
     v_fichange                        dragon_fichange%rowtype := null;
     v_fitem_rec                       dragon_fitem%rowtype := null;
     v_pt_rec                          dragon_policy_trx%rowtype := null;
     v_override_dm_update_tf           char := 'F';

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Creating FIChange object - Type:' || in_fichange_action ||
               ' with Change Amt:'                       || in_fichange_action_delta ||
               ' Associated FItem ID:'                   || in_fichange_ref_fitem    ||
               ' Datamart Refresh:   '                   || in_refresh_datamart      ||
               ' Perf Mode: '                            || in_enable_perf_mode_tf
          );

     end if;

     --
     -- Get the Ref Fitem's parent BillingAccount and calculate the running total
     -- OSPRODUCT-7817
     if in_fichange_action <> gFIChange_Create then          
          
          begin
               
               select
                    *              
               into
                    v_fitem_rec                    
               from
                    dragon_fitem f
               where
                    f.fitem_id = in_fichange_ref_fitem;
                    
               v_billing_account_id := v_fitem_rec.billing_account_id;
               v_fitem_category_id := v_fitem_rec.fitem_category_id;
               v_fitem_type := v_fitem_rec.fitem_type_id;
               v_policy_id := v_fitem_rec.policy_id;
               v_policy_trx_id := v_fitem_rec.policy_transaction_id;
               v_entity_id := v_fitem_rec.entity_id;
               v_billing_due_date := v_fitem_rec.due_date;
               v_aging_status_chng_dt := v_fitem_rec.aging_status_change_date;
               v_aging_status_id := v_fitem_rec.aging_status_id;
               v_fitem_billed_tf := v_fitem_rec.fitem_billed_tf;
               v_fitem_billed_dt := v_fitem_rec.fitem_billed_date;
               v_related_recon_bats_id := v_fitem_rec.related_recon_batch_id;
               v_current_recon_bats_id := v_fitem_rec.current_recon_batch_id;
               v_fitem_security_status := v_fitem_rec.fitem_security_status;
               v_fitem_withdrawal_date := v_fitem_rec.withdrawal_date;
                    
          exception
               
               when no_data_found then
                    
                    v_override_dm_update_tf := 'T';
                    
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '...... Values not found in datamart..'
                         );

                    end if;
          
          end;
          
          if in_refresh_datamart = 'T' 
             and
             in_enable_perf_mode_tf = 'T'
          then
               
               begin             
          
                    v_fichange.fitransaction := in_parent_fitransaction_id;
                    
                    if in_associated_fitx_values.fitrx_generic_instance_no is null then
                         v_fichange.fitrx_generic_instance_no := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'211662' );
                    else
                         v_fichange.fitrx_generic_instance_no := in_associated_fitx_values.fitrx_generic_instance_no;
                    end if;
                         
                    if in_associated_fitx_values.billingaccounttrxset_id is null then
                         v_fichange.billingaccounttrxset_id := pkg_os_object.fn_object_parent_get (in_session_id, in_transaction_id, in_parent_fitransaction_id);
                    else
                         v_fichange.billingaccounttrxset_id := in_associated_fitx_values.billingaccounttrxset_id;
                    end if;
                         
                    if in_associated_fitx_values.fitrxset_generic_instance_no is null then
                         v_fichange.fitrxset_generic_instance_no := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_fichange.billingaccounttrxset_id, '211662' );
                    else
                         v_fichange.fitrxset_generic_instance_no := in_associated_fitx_values.fitrxset_generic_instance_no;
                    end if;
                         
                    if in_associated_fitx_values.external_batch_id is null then
                         v_fichange.external_batch_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, v_fichange.billingaccounttrxset_id, '29707446' );
                    else
                         v_fichange.external_batch_id := in_associated_fitx_values.external_batch_id;
                    end if;
                         
                    if in_associated_fitx_values.fitem_transaction_type_id is null then
                         v_fichange.fitem_transaction_type_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'29708346' );
                    else
                         v_fichange.fitem_transaction_type_id := in_associated_fitx_values.fitem_transaction_type_id;
                    end if;
                         
                    if in_associated_fitx_values.fitransaction_amount is null then
                         v_fichange.fitransaction_amount := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'29708946' );
                    else
                         v_fichange.fitransaction_amount := in_associated_fitx_values.fitransaction_amount;
                    end if;
                         
                    if in_associated_fitx_values.action_policy_id is null then
                         v_fichange.action_policy_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'29974046.211343' );
                    else
                         v_fichange.action_policy_id := in_associated_fitx_values.action_policy_id;
                    end if;
                         
                    if in_associated_fitx_values.action_policy_transaction_id is null then
                         v_fichange.action_policy_transaction_id := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'29974146.211343' );
                    else
                         v_fichange.action_policy_transaction_id := in_associated_fitx_values.action_policy_transaction_id;
                    end if;
                         
                    if in_associated_fitx_values.fitrxset_creation_date is null then
                         v_fichange.fitrxset_creation_date := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_parent_fitransaction_id,'29974146.211343' );
                    else
                         v_fichange.fitrxset_creation_date := in_associated_fitx_values.fitrxset_creation_date;
                    end if;
                         
                    if in_associated_fitx_values.customer_id is not null then
                         v_fichange.customer_id := in_associated_fitx_values.customer_id;
                    end if;
                         
                    if in_associated_fitx_values.fitransaction_type is not null then
                         v_fichange.fitransaction_type := in_associated_fitx_values.fitransaction_type;
                    end if;                       
                    
               end;
               
               --if in_associated_pt_value is null then                    
               begin
                    
                    v_fichange_ref_pol_trx := in_associated_pt_value.policy_transaction_id;
                    
                    if v_fichange_ref_pol_trx is not null then
                         
                         v_fichange.policy_number := in_associated_pt_value.policy_number;
                         v_fichange.policy_id := in_associated_pt_value.policy_id;
                         v_fichange.policy_trx_generic_instance := in_associated_pt_value.policy_trx_generic_instance;
                         v_fichange.policy_transaction_type_id := in_associated_pt_value.policy_transaction_type_id;
                         v_fichange.policy_transaction_type := in_associated_pt_value.policy_transaction_type;
                         v_fichange.policy_trx_rb_seq := in_associated_pt_value.policy_trx_rb_seq;
                         v_fichange.policy_trx_rf_seq := in_associated_pt_value.policy_trx_rf_seq;                         
                         v_fichange.policy_trx_seq_num := in_associated_pt_value.policy_trx_seq_num;
                         
                    else
                         
                         v_fichange_ref_pol_trx := nvl(in_fichange_ref_pol_trx, v_policy_trx_id);
                         v_fichange.policy_transaction_id := v_fichange_ref_pol_trx;
                    
                         begin
                              
                              select
                                   *
                              into
                                   v_pt_rec
                              from
                                   dragon_policy_trx pt
                              where
                                   pt.policy_trx_id = v_fichange_ref_pol_trx;
                              
                         end; 
                    
                         v_fichange.policy_transaction_id := v_fichange_ref_pol_trx;
                         v_fichange.policy_number := v_pt_rec.policy_trx_policy_number;
                         v_fichange.policy_id := v_pt_rec.policy_id;
                         v_fichange.policy_trx_generic_instance := v_pt_rec.policy_trx_generic_instance;
                         v_fichange.policy_transaction_type_id := v_pt_rec.policy_trx_type_id;
                         v_fichange.policy_trx_rb_seq := v_pt_rec.policy_trx_rb_seq;
                         v_fichange.policy_trx_rf_seq := v_pt_rec.policy_trx_rf_seq;
                         v_fichange.policy_trx_seq_num := v_pt_rec.policy_trx_seq_num;
                         v_fichange.policy_transaction_type := v_pt_rec.policy_trx_type_name;
                         
                    end if;
                    
               exception
                    when others then
                         
                         v_override_dm_update_tf := 'T';
                         
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '...... Override perf mode..'
                              );

                         end if;
                         
               end;
               
          end if;
          
     else
          
          v_override_dm_update_tf := 'T';
          
     end if;
     
     if v_billing_account_id is null then          
          v_billing_account_id     := pkg_os_object.fn_object_parent_get (in_session_id,in_transaction_id,in_fichange_ref_fitem);
     end if;
     
     if v_fitem_category_id is null then
          v_fitem_category_id      := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, pkg_db_billing.gbv_fitem_category);
     end if;
     
     if v_fitem_type is null then
          v_fitem_type             := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, pkg_db_billing.gbv_fitem_debit_credit);
     end if;
     
     -- OSPRODUCT-7817
     if in_fichange_ref_pol is null then
          
          if v_policy_id is null then
               v_policy_id              := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_RefPolicy);          
          end if;
          
     end if;
     
     -- OSPRODUCT-7817
     if in_fichange_ref_pol_trx is null then
          
          if v_policy_trx_id is null then
               v_policy_trx_id          := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_RefPolicyTrx);
          end if;
          
     end if;
     
     -- OSPRODUCT-7817
     if in_fichange_belongs_to is null then
          
          if v_entity_id is null then
               v_entity_id              := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_RefEntityBelongsTo);
          end if;
          
     end if;
     
     if v_aging_status_id is null then
          v_aging_status_id        := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_Fitem_AgingStatus);
     end if;
     
     if v_aging_status_chng_dt is null then
          v_aging_status_chng_dt   := to_Date (pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItemAgingStatusChangeDt), pkg_os_constant.DragonDateFormatDefault );                                                                                                                                                    
     end if;
     
     if v_fitem_billed_tf is null then
          v_fitem_billed_tf        := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_Billed_TF);
     end if;
     
     if v_fitem_billed_dt is null then
          v_fitem_billed_dt        := to_date (pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_Billed_Date), pkg_os_constant.DragonDateFormatDefault );
     end if;
     
     if v_related_recon_bats_id is null then
          v_related_recon_bats_id  := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_Related_recon_batch_id);
     end if;
     
     if v_current_recon_bats_id is null then
          v_current_recon_bats_id  := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_Current_recon_batch_id);
     end if;
     
     if v_fitem_security_status is null then
          v_fitem_security_status  := pkg_os_object_io.fn_object_bv_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, gbv_FItem_Security_status);
     end if;
     
     if v_fitem_withdrawal_date is null then
          v_fitem_withdrawal_date  := to_date ( pkg_os_object_io.fn_object_bv_path_get (in_session_id, in_transaction_id, in_fichange_ref_fitem, '29704446.32178946'), pkg_os_constant.DragonDateFormatDefault ); -- 29704446.32178946
     end if;
     
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '.. Billing Account ID: ' 
               || v_billing_account_id 
               ||'.. FITEM Category ID: '     
               || v_fitem_category_id        
               ||'.. Fitem Type: '         
               || v_fitem_type         
               ||'.. Policy ID: '                     
               || v_policy_id          
               ||'.. Policy Transaction ID; '
               || v_policy_trx_id      
               ||'.. Entity ID: '
               || v_entity_id          
               ||'.. Aging Status ID: '                                         
               || v_aging_status_id    
               ||'.. Aging Status Change Date: '
               || v_aging_status_chng_dt 
               ||'.. Fitem Billed TF: '
               || v_fitem_billed_tf      
               ||'.. Fitem Billed Date: '
               || v_fitem_billed_dt      
               ||'.. Related batch: '
               || v_related_recon_bats_id 
               ||'.. Current batch: '
               || v_current_recon_bats_id 
               ||'.. Fitem Security Status'
               || v_fitem_security_status 
               ||'.. Fitem Withdrawal Date: '               
               || v_fitem_withdrawal_date
          );

     end if;
     
     v_ba_recent_fichange := pkg_os_object_io.fn_object_bv_get
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_billing_account_id,
                                  pkg_db_billing.gbv_BillingAcc_RecentFIChange
                             );

     v_ba_prev_total := nvl(pkg_os_object_io.fn_object_bv_get
                        (
                             in_session_id,
                             in_transaction_id,
                             v_ba_recent_fichange,
                             gbv_FIchangeRunTotFinal
                        ),0);

     v_ba_run_total := nvl(in_fichange_action_delta,0) + nvl(v_ba_prev_total,0);

     --
     -- Get the Ref Fitem's recent Fichange and calculate the running total
     --

     v_fitem_recent_fichange  := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_fichange_ref_fitem,
                                        pkg_db_billing.gbv_Fitem_RecentFIChange
                                   );

     v_fitem_prev_total := nvl(pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_fitem_recent_fichange,
                                   gbv_FIchangeFitemTotFinal
                              ),0);
							  
	 if v_fitem_prev_total is null   --OSPRODUCT-13427
     then
         begin
    
            select sum(action_delta )
            into
                v_fitem_prev_total
            from
                dragon_fichange fi
            where 
                fi.fitem_id = in_fichange_ref_fitem;
         
         exception when others
         then
    
              v_fitem_prev_total := 0;
    
         end;
 
     end if;						  

     v_fitem_run_total := nvl(in_fichange_action_delta,0) + nvl(v_fitem_prev_total,0);

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '...... Policy reference is not null and  v_fitem_recent_fichange: ' || v_fitem_recent_fichange ||
               ' and v_fitem_prev_total: ' || v_fitem_prev_total ||
               ' v_fitem_run_total: ' || v_fitem_run_total
          );

     end if;


     -- Get Policy, if one is not provided
     v_fichange_ref_pol := nvl(in_fichange_ref_pol, v_policy_id);

     -- Get PolicyTrx, if one is not provided
     v_fichange_ref_pol_trx := nvl(in_fichange_ref_pol_trx, v_policy_trx_id);

     -- Get Belongs To, if one is not provided
     v_fichange_belongs_to := nvl(in_fichange_belongs_to, v_entity_id);
                    
     --
     -- Get the Ref Policy's, if not null, recent FIChange and calculate the running total
     --
     if v_fichange_ref_pol is not null
     then

          if   (
                    (
                         v_fitem_type = gFItem_Credit
                         and  
                         v_fitem_category_id <> gFItem_Category_Premium
                    )
                    or
                    v_fitem_type = gFItem_Debit
               )
          then

               v_policy_recent_fichange := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_fichange_ref_pol,
                    pkg_db_billing.gbv_Policy_RecentFIChange
               );

               v_policy_prev_total := nvl(pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_recent_fichange,
                    gbv_FIchangePolicyTotFinal
               ),0);

               v_policy_run_total := nvl(in_fichange_action_delta,0) + nvl(v_policy_prev_total,0);

          end if;

     end if;

     --
     -- Create the FIChange object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FIChange,
          in_parent_fitransaction_id,
          out_fichange_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '...... Created FIChange Object ID: '|| out_fichange_id 
          );

     end if;

     v_bv_table.delete;

     v_bv_table := in_bv_table;
     
     -- 7817 Removed if else
     v_bv_table(gbv_fichange_action          ).business_variable_value     :=   in_fichange_action;
     v_bv_table(gbv_fichange_action_delta    ).business_variable_value     :=   in_fichange_action_delta;
     v_bv_table(gbv_fichange_sum_include     ).business_variable_value     :=   in_fichange_sum_include;
     v_bv_table(gbv_FIChangeProcessDate      ).business_variable_value     :=   v_fichange_process_date;
     v_bv_table(gbv_FIChangeRefFItem         ).business_variable_value     :=   in_fichange_ref_fitem;
     v_bv_table(gbv_FIchangeRefPolicy        ).business_variable_value     :=   v_fichange_ref_pol;
     v_bv_table(gbv_FIchangeRefPolicyTxn     ).business_variable_value     :=   v_fichange_ref_pol_trx;
     v_bv_table(gbv_FIchangeRefBelongsTo     ).business_variable_value     :=   v_fichange_belongs_to;
     v_bv_table(gbv_FIchangeRunTotPrev       ).business_variable_value     :=   v_ba_prev_total;
     v_bv_table(gbv_FIchangeRunTotFinal      ).business_variable_value     :=   v_ba_run_total;
     v_bv_table(gbv_FIchangeFitemTotFinal    ).business_variable_value     :=   v_fitem_run_total;

     if in_fichange_action is not null
     then

          v_bv_table(gbv_FIchangeFitemTotPrev ).business_variable_value     :=   v_fitem_prev_total;

     end if;
     
 
     if v_fichange_ref_pol is not null
        and 
        (
             (
                  v_fitem_type = gFItem_Credit 
                  and  
                  v_fitem_category_id <> 246 
             )
             or 
             v_fitem_type = gFItem_Debit
        )
     then

          
          -- 7817 removed if else
          v_bv_table(gbv_FIchangePolicyTotPrev    ).business_variable_value     :=   v_policy_prev_total;
          v_bv_table(gbv_FIchangePolicyTotFinal   ).business_variable_value     :=   v_policy_run_total;

     end if;

     -- GCNA-1167
     -- 7817 removed if else
		
     v_bv_table(gbv_FIChangeFitemPrevFIChange     ).business_variable_value     :=   v_fitem_recent_fichange;
	
     -- GCNA-1167
     -- GCNA-1167

     v_bv_table(gbv_FIChangeFitemDueDate               ).business_variable_value := pkg_os_object_io.fn_object_bv_get
                                                                                     (
                                                                                          in_session_id,
                                                                                          in_transaction_id,
                                                                                          in_fichange_ref_fitem,
                                                                                          gbv_FItemBillingDueDate
                                                                                     );

     v_bv_table(gbv_FIChangeFitemBillingStatus  ).business_variable_value := pkg_os_object_io.fn_object_bv_get
                                                                                   (
                                                                                        in_session_id,
                                                                                        in_transaction_id,
                                                                                        in_fichange_ref_fitem,
                                                                                        pkg_db_billing.gbv_fitem_billing_status
                                                                                   );
                                                                                   
     v_bv_table(gbv_FIChangeFitemProcessStatus  ).business_variable_value := pkg_os_object_io.fn_object_bv_get
                                                                                   (
                                                                                        in_session_id,
                                                                                        in_transaction_id,
                                                                                        in_fichange_ref_fitem,
                                                                                        pkg_db_billing.gbv_fitem_processing_status
                                                                                   );
                                                                                   
     v_bv_table(gbv_FIChangeFitemAgingStatus).business_variable_value  :=   v_aging_status_id;
     v_bv_table(gbv_FIChangeFitemAgingChangDt).business_variable_value :=   to_char( v_aging_status_chng_dt, pkg_os_constant.DragonDateFormatDefault ); 
     v_bv_table(gbv_FIChangeFitembilled).business_variable_value       :=   v_fitem_billed_tf; 
     v_bv_table(gbv_FIChangeFitembilledDt).business_variable_value     :=   to_char( v_fitem_billed_dt, pkg_os_constant.DragonDateFormatDefault );
     v_bv_table(gbv_FIChangeFitemRelatedBtch).business_variable_value  :=   v_related_recon_bats_id;
     v_bv_table(gbv_FIChangeFitemCurrentBtch).business_variable_value  :=   v_current_recon_bats_id;   
     v_bv_table(gbv_FIChangeFitemSecuritystat).business_variable_value :=   v_fitem_security_status; 
     v_bv_table(gbv_FIChangeWithdrawalDate).business_variable_value    :=   to_char( v_fitem_withdrawal_date, pkg_os_constant.DragonDateFormatDefault ); 

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_fichange_id,
          v_bv_table
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '...... Set the FIChange Object ID: '|| out_fichange_id ||
               ' as most recent FIChange for Billing Account ID: '|| v_billing_account_id 
          );

     end if;
     
     ---OSPRODUCT 1344 Ends----

     -- If this FIChange acts on a Cash FItem of Credit type, then close any tasks that should be closed with the creation of this FIChange
     if (
             v_fitem_type = gFItem_Credit
             and
             v_fitem_category_id = gFItem_Category_Cash
             and
             in_fichange_action = gFIChange_Change -- > This check to close the task is required if we are chaning any cash item --MUSTDEV-41380  OSPRODUCT-2475
        )
     then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '...... Verifying task to close for Fitem ID: '|| in_fichange_ref_fitem ||
                    ' as this FIChange might close the Cash Source...'||
                    ' amount: ' || v_fitem_run_total
               );

          end if;

          if v_fitem_run_total = 0
          then

               pkg_os_wf_task.sp_action_task_close
               (
                   in_session_id,
                   in_transaction_id,
                   gaction_fitem_task_close,
                   in_fichange_ref_fitem,
                   pkg_os_constant.gOutcome_OK
               );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '...... Verifying task to close for Fitem ID: '|| in_fichange_ref_fitem ||
                         ' amount: ' || v_fitem_run_total
                    );

               end if;

           end if;

      end if;

     -- Set the most recent FIChange reference from Policy, if not null, to this FIChange

     if v_fichange_ref_pol is not null 
        and 
        (
             (
                  v_fitem_type = gFItem_Credit 
                  and  
                  v_fitem_category_id <> 246 
             )
             or 
             v_fitem_type = gFItem_Debit
        )
     then

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '...... Set the FIChange Object ID: '|| out_fichange_id ||
                    ' as most recent FIChange for Policy ID: '|| v_fichange_ref_pol
               );

          end if;

          -- UTPRODUCT-4338
          pkg_db_object.sp_ba_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_fichange_ref_pol,
               gbv_Policy_RecentFIChange,
               out_fichange_id
          );

      end if;   -- if FItem is associated with a policy

     --
     -- update the datamart for FIChange
     --
     
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '.. Fichange: ' || out_fichange_id ||               
               ' Datamart Refresh:   '                   || in_refresh_datamart      ||
               ' Perf Mode: '                            || in_enable_perf_mode_tf
          );

     end if;

     if in_refresh_datamart ='T' then
          
          if in_enable_perf_mode_tf = 'F'
             or
             (in_enable_perf_mode_tf = 'T' and v_override_dm_update_tf = 'T')
          then
               
               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '.. Datamart update.. ' 
                    );

               end if;
               
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, out_fichange_id, v_datamart_tf);
     
          else
               
               begin
               
                    v_fichange.session_id := in_session_id;
                    v_fichange.transaction_id := in_transaction_id;          
                    v_fichange.fichange_id := out_fichange_id;
                    v_fichange.action_delta := in_fichange_action_delta;
                    v_fichange.action_id := in_fichange_action;
                    v_fichange.action := pkg_os_lookup.fn_lookup_list_text_get(5366646, v_fichange.action_id);
                    v_fichange.sum_include_tf := in_fichange_sum_include;
                    v_fichange.processing_date := to_date(v_fichange_process_date,'YYYYMMDDHH24MISS'); 
                    v_fichange.legacy_object_id := null;
                    v_fichange.object_source := null;
                    v_fichange.object_source_desc := null;
                    v_fichange.fichange_seq := null;
                    v_fichange.legacy_id := null;
                    v_fichange.legacy_fitem_id := null;
                    v_fichange.legacy_fichange_id := null;
                    v_fichange.bi_process_date := null;
                    
                    v_fichange.value_stream := null;
                    v_fichange.entity_id := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, out_fichange_id, 8316446);
                    
                    v_fichange.due_date := to_date(v_bv_table(gbv_FIChangeFitemDueDate).business_variable_value, 'YYYYMMDDHH24MISS');
                    v_fichange.billing_status := pkg_os_lookup.fn_lookup_list_text_get(50170,v_bv_table(gbv_FIChangeFitemBillingStatus).business_variable_value);
                    -- UTPRODUCT-4932
                    v_fichange.object_state_id := v_bv_table(gbv_FIChangeFitemBillingStatus).business_variable_value;
                    -- UTPRODUCT-4932
                    v_fichange.processing_status := pkg_os_lookup.fn_lookup_list_text_get(50170,v_bv_table(gbv_FIChangeFitemProcessStatus).business_variable_value);
                    
                    v_fichange.running_total_policy := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'31841646' );
                    /*begin
                         v_fichange.running_total_policy := v_bv_table(gbv_FIchangePolicyTotFinal).business_variable_value;
                    exception
                         when others then
                              v_fichange.running_total_policy := null;
                    end;*/               
                    v_fichange.running_total := v_bv_table(gbv_FIchangeRunTotFinal).business_variable_value;
                    v_fichange.running_total_fitem := v_bv_table(gbv_FIchangeFitemTotFinal).business_variable_value;
                              
                    v_fichange.fichange_creation_date := to_date(pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'210151' ),'yyyymmddhh24miss');
                    v_fichange.generic_instance_number := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'211662' );
                    v_fichange.fichange_last_upt_date := to_date(pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'21686401' ),'YYYYMMDDHH24MISS');
                    v_fichange.user_id := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, out_fichange_id, 8304646);
                    -- add
                    v_fichange.fichange_seq := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'31839346' );
                    v_fichange.object_source := pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, out_fichange_id,'27926602' );
                    v_fichange.object_source_desc := pkg_os_lookup.fn_lookup_list_text_get(5321002, v_fichange.object_source);
                    
                    -- Get from fitem
                    v_fichange.billing_account      	:= v_fitem_rec.billing_account_number;
                    v_fichange.account_holder_name     := v_fitem_rec.account_holder_name;
                    v_fichange.related_fitem_account_id := v_fitem_rec.billing_account_id;
                    v_fichange.installment              := v_fitem_rec.installment_id;
                    v_fichange.installment_no           := v_fitem_rec.installment_number;
                    v_fichange.fitem_type               := v_fitem_rec.debit_credit;
                    v_fichange.fitem_type_id            := v_fitem_rec.fitem_type_id;
                    v_fichange.fitem_category           := v_fitem_rec.category;
                    v_fichange.fitem_category_id        := v_fitem_rec.fitem_category_id;
                    v_fichange.fitem_sub_category       := v_fitem_rec.sub_category;
                    v_fichange.fitem_sub_category_id    := v_fitem_rec.fitem_sub_category_id;
                    v_fichange.policy_term_id           := v_fitem_rec.policy_term_id;
                    v_fichange.partner_id               := v_fitem_rec.partner_id;
                    v_fichange.fitem_id                 := v_fitem_rec.fitem_id;
                    v_fichange.billing_account_id       := v_fitem_rec.billing_account_id;       
                    v_fichange.aging_status_id          := v_fitem_rec.aging_status_id;
                    v_fichange.aging_status_desc        := v_fitem_rec.aging_status;
                    v_fichange.aging_status_change_date := v_fitem_rec.aging_status_change_date;
                    v_fichange.fitem_billed_date        := v_fitem_rec.fitem_billed_date;
                    v_fichange.related_recon_batch_id   := v_fitem_rec.related_recon_batch_id;
                    v_fichange.current_recon_batch_id   := v_fitem_rec.current_recon_batch_id;
                    v_fichange.fitem_security_status_id := v_fitem_rec.fitem_security_status;
                    v_fichange.fitem_security_status    := pkg_os_bv.fn_bv_path_display_value_get( in_session_id, in_transaction_id, out_fichange_id, '33833346', null, v_fichange.fitem_security_status_id, 'F', null);
                    v_fichange.fitem_withdrawal_date    := v_fitem_rec.withdrawal_date;
                    v_fichange.fitem_billed_tf          := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, out_fichange_id, 10398746);
                    v_fichange.cash_payment_details     := v_fitem_rec.cash_payment_details;
                    v_fichange.customer_name            := v_fitem_rec.insured_name;
               
                    if v_fichange.customer_id is null then
                         v_fichange.customer_id := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, out_fichange_id, 8290446);
                    end if;
                    
                    if v_fichange.fitransaction_type is null then
                         v_fichange.fitransaction_type := pkg_os_exp.fn_evaluate_expression( in_session_id, in_transaction_id, out_fichange_id, 8289546);
                    end if;               
                    
                    insert into dragon_fichange values v_fichange;
                                          
               exception
                    
                    when others then
                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, out_fichange_id, v_datamart_tf);
                         pkg_os_logging.sp_log_error
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '.. Switched to datamart update..'||
                              ' Error: ' ||sqlerrm||dbms_utility.format_error_backtrace  
                         );
                                                      
               end;   
     
          end if;
          
     end if;
     
     v_bv_table.delete;
     
     v_bv_table(gbv_FItem_Recent_FIChange).business_variable_value := out_fichange_id;

     --OSBILLING-4056
     if in_fichange_action = gFIChange_Create
     then
          
          v_bv_table(gbv_FItemRefCreatorFiChange).business_variable_value := out_fichange_id;
           
     end if;
     
     -- This needs to be fixed
     -- UTPRODUCT-3679
     if in_fitem_lock_tf = 'T' then
          
          pkg_db_object.sp_ba_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_fichange_ref_fitem,
               v_bv_table
          );
     
     else
     
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_fichange_ref_fitem,
               v_bv_table
          );
     
     end if;


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '... Created FIChange Object:'||out_fichange_id ||
               '... Action Type:' || in_fichange_action        
          );
          
     end if;

end sp_fichange_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitransaction_create
--
--   %USAGE
--        This procedure creates a FITRANSACTION Objectbased on the input parameters,
--        and udpates the references that are common to the Fitransaction universally.
--
--
--   %ALGORITHM
--        1.   Create the FITransaction object
--        2.   Finanlize the BV table collection variable corresponding to all inputs
--        3.   Update the business variables of FItransaction object
--
--   %CAUTION
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitransaction_create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_fitrx_parent_fitrxset_id        in             object.object_id%type,
     out_fitransaction_id               out            object.object_id%type,
     in_current_date_time               in             date default null,
     in_fitrx_type                      in             object_bv_value.business_variable_value%type default null,
     in_fitrx_ref_billing_account       in             object.object_id%type default null,
     in_fitrx_ref_associatedpolicy      in             object.object_id%type default null,
     in_fitrx_ref_associatedpoltrx      in             object.object_id%type default null,
     in_fitrx_ref_actionpolicy          in             object.object_id%type default null,
     in_fitrx_ref_actionpoltrx          in             object.object_id%type default null,
     in_fitrx_ref_associatedfitem       in             object.object_id%type default null,
     in_fitrx_effective_date            in             object_bv_value.business_variable_value%type default null,
     in_fitrx_gl_date                   in             object_bv_value.business_variable_value%type default null,
     in_fitrx_process_date              in             object_bv_value.business_variable_value%type default null,
     in_fitrx_posted_date               in             object_bv_value.business_variable_value%type default null,
     in_fitrx_remaining_amount          in             number default null,
     in_fitrx_amount                    in             number default null,
     in_fitrx_object_state              in             object_bv_value.business_variable_value%type default null,
      in_fitrx_ref_associatedrollup      in             object_bv_value.business_variable_value%type default null,
     in_bv_table                        in             pkg_os_object_io.t_bv_table default pkg_os_object_io.gnull_bv_table
)
is

     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_fitransaction_create';

     v_bv_table                         pkg_os_object_io.t_bv_table;

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Creating FITransaction object for BillingAcctTrxSet ID:' || in_fitrx_parent_fitrxset_id ||
               ' Transaction Type:' || in_fitrx_type);

     end if;

     if in_fitrx_parent_fitrxset_id is null
     then

          return;

     end if;

     --
     -- Create the FITransaction object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FITransaction,
          in_fitrx_parent_fitrxset_id,
          out_fitransaction_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created FITransaction Object ID: '||out_fitransaction_id);

     end if;

     v_bv_table.delete;

     v_bv_table := in_bv_table;

     if in_fitrx_type is not null
     then

          v_bv_table(gbv_FITrx_TransactionType         ).business_variable_value     :=   in_fitrx_type;

     end if;

     if in_fitrx_process_date is not null
     then

          v_bv_table(gbv_FITrx_ProcessDate             ).business_variable_value     :=   in_fitrx_process_date;

     end if;

     if in_fitrx_effective_date is not null
     then

          v_bv_table(gbv_FITrx_EffectiveDate           ).business_variable_value     :=   in_fitrx_effective_date;

     end if;

     if in_fitrx_gl_date is not null
     then

          v_bv_table(gbv_FITrx_GLDate                  ).business_variable_value     :=   in_fitrx_gl_date;

     end if;

     if in_fitrx_posted_date is not null
     then

          v_bv_table(gbv_FITrx_PostedDate              ).business_variable_value     :=   in_fitrx_posted_date;
--  2017-08-23 Cheryl osbilling-3888 - always set the posted date
     else
          v_bv_table(gbv_FITrx_PostedDate              ).business_variable_value     :=  to_char( pkg_os_time.fn_os_sysdate
                                                                                        ( in_session_id, in_transaction_id,
                                                                                        in_fitrx_parent_fitrxset_id),
                                                                                        pkg_os_constant.DragonDateFormatDefault );
     end if;

     if in_fitrx_amount is not null
     then

          v_bv_table(gbv_FITrx_Amount                  ).business_variable_value     :=   in_fitrx_amount;

     end if;

     if in_fitrx_remaining_amount is not null
     then

          v_bv_table(gbv_FITrx_Remaining_Amount        ).business_variable_value     :=   in_fitrx_remaining_amount;

     end if;

     if in_fitrx_object_state is not null
     then

          v_bv_table(pkg_os_constant_bv.gbv_GenObjObjectState    ).business_variable_value     :=   in_fitrx_object_state;

     end if;

     if in_fitrx_ref_billing_account is not null
     then

          v_bv_table(gbv_FITrx_RefBillingAccount       ).business_variable_value     :=   in_fitrx_ref_billing_account;

     end if;

     if in_fitrx_ref_associatedpolicy is not null
     then

          v_bv_table(gbv_FITrx_RefAssociatedPolicy     ).business_variable_value     :=   in_fitrx_ref_associatedpolicy;

     end if;

     if in_fitrx_ref_associatedpoltrx is not null
     then

          v_bv_table(gbv_FITrx_RefAssociatedPoltrx     ).business_variable_value     :=   in_fitrx_ref_associatedpoltrx;

     end if;

     if in_fitrx_ref_actionpolicy is not null
     then

          v_bv_table(gbv_FITrx_RefActionPolicy         ).business_variable_value     :=   in_fitrx_ref_actionpolicy;

     end if;

     if in_fitrx_ref_actionpoltrx is not null
     then

          v_bv_table(gbv_FITrx_RefActionPolicyTxn      ).business_variable_value     :=   in_fitrx_ref_actionpoltrx;

     end if;

     if in_fitrx_ref_associatedfitem is not null
     then

          v_bv_table(gbv_FITrx_RefAssociatedFitem      ).business_variable_value     :=   in_fitrx_ref_associatedfitem;

     end if;

     if in_fitrx_ref_associatedrollup is not null
     then

          v_bv_table(gbv_FITrx_RefAssReconRollup      ).business_variable_value     :=   in_fitrx_ref_associatedrollup;

     end if;
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_fitransaction_id,
          v_bv_table
     );

end sp_fitransaction_create;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     @@@VG: Why are there two flavors of sp_fitem_create?
--
--   %NAME
--        sp_fitem_create
--
--   %USAGE
--        This procedure creates a FITEM Objec tbased on the input parameters,
--        and udpates the references that are common to the Fitem universally.
--
--
--   %ALGORITHM
--        1.   Create the FITem object
--        2.   Finalize the BV table collection variable corresponding to all inputs
--        3.   Update the business variables of FItem object
--
--   %CAUTION
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_create
(
     in_session_id                      in            object.object_id%type,
     in_transaction_id                  in            object.object_id%type,
     in_parent_object_id                in            object.object_id%type,
     in_fitem_debit_credit              in            lookup_list_value.lookup_enum%type,
     in_fitem_category                  in            lookup_list_value.lookup_enum%type,
     out_fitem_id                       out           object.object_id%type,
     in_current_date_time               in            date default null,
     in_fitem_subcategory               in            lookup_list_value.lookup_enum%type default null,
     in_fitem_effective_date            in            object_bv_value.business_variable_value%type default null,
     in_fitem_billing_status            in            lookup_list_value.lookup_enum%type default null,
     in_fitem_processing_status         in            lookup_list_value.lookup_enum%type default null,
     in_fitem_bill_status_date          in            object_bv_value.business_variable_value%type default null,
     in_fitem_Earningstatus             in            lookup_list_value.lookup_enum%type default null,
     in_fitem_earned_amount             in            number default null ,
     in_fitem_unearned_amount           in            number default null,
     in_fitem_paid_amount               in            object_bv_value.business_variable_value%type default null,
     in_FItemRefInstallment             in            object.object_id%type default null,
     in_FItemRefPolicy                  in            object.object_id%type default null,
     in_FItemRefPolicyTxn               in            object.object_id%type default null,
     in_FitemRefPolicyTerm              in            object.object_id%type default null,
     in_FItemRefCustomer                in            object.object_id%type default null,
     in_FItemRefEntityBelongsTo         in            object.object_id%type default null,
     in_FItemRefAssWithFItrx            in            object.object_id%type default null,
     in_FItemRefAssetpkg_db_object      in            object.object_id%type default null,
     in_Fitem_LateFeeDueDate            in            object_bv_value.business_variable_value%type default null,
     in_Fitem_billing_elt_md_id         in            db_billing_element.db_billing_element_id%type,
     in_bv_table                        in            pkg_os_object_io.t_bv_table default pkg_os_object_io.gnull_bv_table,
     in_ultimate_template_id            in            object.object_id%type default null,-- Kiran OSPRODUCT-32906. Comma Added.
     --Kiran start OSPRODUCT-32906
     in_Fitem_element_business_relation in            object_bv_value.business_variable_value%type default null
     --Kiran end OSPRODUCT-32906            
) is

     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_fitem_create1';

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_policyterm_id                    object.object_id%type;


begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Creating FItem Object - '||
               ' Type:'                     || in_fitem_debit_credit ||
               ' Category:'               ||in_fitem_category ||
               ' Sub Category:'           ||in_fitem_subcategory ||
               ' Parent Object ID:'      ||in_parent_object_id||
               ' Billing Element MD ID:'||in_Fitem_billing_elt_md_id
          );

     end if;

     if in_parent_object_id is null
     then

         -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
          --return;

         pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Billing Account ID is null while creating an FItem' ||
                    ' FItem object - Type:' || in_fitem_debit_credit ||
                    ' Category:'|| in_fitem_category ||
                    ' Sub Category:' || in_fitem_subcategory
               );
          raise no_data_found;

     end if;

     --
     -- Create the FItem object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FItem,
          in_parent_object_id,
          out_fitem_id,
          null,
          in_ultimate_template_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created FItemObject ID: '|| out_fitem_id );

     end if;

     v_bv_table.delete;

     v_bv_table := in_bv_table;

     --
     --     @@@VG: What is the point of these silly 'if' conditions? If an attribute is NULL, the Object IO layer will not persist it ...
     --

     if in_fitem_debit_credit is not null
     then

          v_bv_table(gbv_fitem_debit_credit       ).business_variable_value     :=   in_fitem_debit_credit;

     end if;

     if in_fitem_category is not null
     then

          v_bv_table(gbv_fitem_category           ).business_variable_value     :=   in_fitem_category;

     end if;


     if in_fitem_subcategory is not null
     then

          v_bv_table(gbv_fitem_subcategory        ).business_variable_value     :=   in_fitem_subcategory;

     end if;



     if in_fitem_effective_date is not null
     then

          v_bv_table(gbv_fitem_effective_date     ).business_variable_value     :=   in_fitem_effective_date;

     end if;

     if in_fitem_billing_status is not null
     then

          v_bv_table(gbv_fitem_billing_status     ).business_variable_value     :=   in_fitem_billing_status;

     end if;

     if in_fitem_processing_status is not null
     then

          v_bv_table(gbv_fitem_processing_status  ).business_variable_value     :=   in_fitem_processing_status;

     end if;

     if in_fitem_bill_status_date is not null
     then

          v_bv_table(gbv_fitem_bill_status_date   ).business_variable_value     :=   in_fitem_bill_status_date;

     end if;


     if in_fitem_Earningstatus is not null
     then

          v_bv_table(gbv_FItem_Earning_Status     ).business_variable_value     :=   in_fitem_Earningstatus;
          v_bv_table(gbv_FItem_Earning_Date       ).business_variable_value     :=   to_char
                                                                                     (
                                                                                          pkg_os_time.fn_os_sysdate
                                                                                          (
                                                                                               in_session_id,
                                                                                               in_transaction_id,
                                                                                               out_fitem_id
                                                                                          ),
                                                                                          pkg_os_constant.DragonDateFormatDefault
                                                                                     );   -- OSPRODUCT-15900

     end if;

     if in_fitem_earned_amount is not null
     then

          v_bv_table(gbv_fitem_earned_amount      ).business_variable_value     :=   in_fitem_earned_amount;

     end if;

     if in_fitem_unearned_amount is not null
     then

          v_bv_table(gbv_fitem_unearned_amount    ).business_variable_value     :=   in_fitem_unearned_amount;

     end if;


     if in_fitem_paid_amount is not null
     then

          v_bv_table(gbv_fitem_paid_amount        ).business_variable_value     :=   in_fitem_paid_amount;

     end if;


     if in_FItemRefInstallment is not null
     then

          v_bv_table(gbv_FItem_RefInstallment     ).business_variable_value     :=   in_FItemRefInstallment;

     end if;


     if in_FItemRefPolicy is not null
     then

          v_bv_table(gbv_FItem_RefPolicy          ).business_variable_value     :=   in_FItemRefPolicy;

     end if;

     if in_FItemRefPolicyTxn is not null
     then

          v_bv_table(gbv_FItem_RefPolicyTrx       ).business_variable_value     :=   in_FItemRefPolicyTxn;

     end if;
	
	-- OSPRODUCT-12390
     v_bv_table(33076948                     	).business_variable_value     :=   pkg_os_object_io.fn_object_bv_get
                                                                                (
                                                                                     in_session_id,
                                                                                     in_transaction_id,
                                                                                     in_FItemRefInstallment,
                                                                                     33076948 --33083848 -- installment currency
                                                                                );

	if in_FitemRefPolicyTerm is not null
	then

		v_bv_table(gbv_FItem_RefPolicyTerm      ).business_variable_value     := in_FitemRefPolicyTerm;

	else

		if (in_FitemRefPolicyTerm is null and in_FItemRefPolicy is not null)
		then
			v_policyterm_id := pkg_db_functions.fn_get_policy_current_term
                                    (
                                      in_session_id,
                                      in_transaction_id,
                                      in_FItemRefPolicy
                                    );
			if v_policyterm_id is not null
			then
				v_bv_table(gbv_FItem_RefPolicyTerm      ).business_variable_value     := v_policyterm_id;
			end if;
		end if;

     end if;


     if in_FItemRefCustomer is not null
     then

          v_bv_table(gbv_FItem_RefCustomer        ).business_variable_value     :=   in_FItemRefCustomer;

     end if;

     if in_FItemRefEntityBelongsTo is not null
     then

          v_bv_table(gbv_FItem_RefEntityBelongsTo ).business_variable_value     :=   in_FItemRefEntityBelongsTo;

     end if;

     if in_FItemRefAssWithFItrx is not null
     then

          v_bv_table(gbv_FItem_RefAssWithFItrx    ).business_variable_value     :=   in_FItemRefAssWithFItrx;

     end if;

     if in_FItemRefAssetpkg_db_object is not null
     then

          v_bv_table(gbv_FItem_RefAsset           ).business_variable_value     :=   in_FItemRefAssetpkg_db_object;

     end if;

     if in_Fitem_LateFeeDueDate is not null
     then
          -- OSBILLING-334
          v_bv_table(gbv_FItem_LocalBilngDueDate     ).business_variable_value     :=   in_Fitem_LateFeeDueDate;

     end if;

     v_bv_table( gbv_FItem_Billing_Elt_MD_ID     ).business_variable_value     :=   in_Fitem_billing_elt_md_id;


      if in_ultimate_template_id is not null
     then

          v_bv_table( gbv_FItem_RefUltimateTempID     ).business_variable_value     :=   in_ultimate_template_id;

     end if;

     --Kiran start OSPRODUCT-32906
     if in_Fitem_element_business_relation is not null
     then

          v_bv_table( PKG_DB_CONSTANT.gbv_FinancialBusinessRelation     ).business_variable_value        :=   in_Fitem_element_business_relation;

     end if;
     --Kiran end OSPRODUCT-32906

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '...... Set BV Values for FItem Object ID: '|| out_fitem_id );

     end if;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_fitem_id,
          v_bv_table
     );

     --
     -- OSBILLING-767 Fetch and set the Accoutning Period
     --
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_fitem_id,
          pkg_db_object.gbv_FItem_AccntingPeriod,
          pkg_db_functions.fn_get_fitem_acct_prd(in_session_id,in_transaction_id,out_fitem_id)
      );
     
     -- Set the value stream BV
     -- [RR} - why twice. Value Stream BV will be set with previous BV set 
      /*pkg_os_object_io.sp_object_bv_set
       (
            in_session_id,
            in_transaction_id,
            out_fitem_id,
            v_bv_table
       );*/
end sp_fitem_create ;


procedure sp_GbAssetItem_Create
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id              in                object.object_id%type,
     in_ultimate_template_id             IN                object.object_id%type DEFAULT NULL
    )
    is

     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_GbAssetItem_Create';

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_policyterm_id                    object.object_id%type;
     v_GBAssetItem_id                   object.object_id%type;
     v_GBAsset_id                     object.object_id%type;
      v_GB_asset_list                     pkg_os_object.t_object_list;
      v_policy_trx_id                    object.object_id%type := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_policy_image_id );
      v_policy_id                        object.object_id%type := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, v_policy_trx_id );
      v_product_id                       pd_product.pd_product_id%type :=  pkg_os_product.fn_object_product_get(in_session_id, in_transaction_id, in_policy_image_id);
      v_found                            number;
      v_category                         number;
      v_sub_category                     number;
      r_GB_asset_index                   number;
      cursor c_billing_elements
     is
     select * from DB_BILLING_ELEMENT where pd_product_id=v_product_id and Active_TF='T' and create_debit_TF='T' order by apply_order;


begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               ' Policy image ID:'      ||in_policy_image_id
               ||
               'product_id:' || v_product_id
          );

     end if;

     if in_policy_image_id is null
     then

          return;

     end if;

     v_GBAsset_id := pkg_os_object_io.fn_object_bv_path_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        gbv_Policy_Child_PolicyAll
                                   );

  pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_GBAsset_id,
          gObjTypeGBAssetItem,
          v_GB_asset_list
     );


     if v_session_control.gLogging_Full
         then

              pkg_os_logging.sp_log
              (
                   in_session_id,
                   in_transaction_id,
                   v_procedure_name,
                   '... GenericBillingAssetItems aready exists:'
                   ||v_GB_asset_list.count
              );

     end if;


      for r_billing_elements in c_billing_elements loop

  v_found :=0;

        if v_GB_asset_list.count >0
        then

              r_GB_asset_index := v_GB_asset_list.first;

              while r_GB_asset_index is not null
                    loop

                    v_category:= pkg_os_object_io.fn_object_bv_get
                    (
                        in_session_id,
                        in_transaction_id,
                        v_GB_asset_list(r_GB_asset_index),
                        gbv_GBAssetItem_Category
                    );

                    v_sub_category:=  pkg_os_object_io.fn_object_bv_get
                    (
                        in_session_id,
                        in_transaction_id,
                        v_GB_asset_list(r_GB_asset_index),
                        gbv_GBAssetItem_SubCategory
                    );

                    if (  v_category= r_billing_elements.debit_fitem_category
                        and v_sub_category = r_billing_elements.debit_fitem_sub_category)
                    then
                        v_found := 1;
                        if v_session_control.gLogging_Full then

                          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                 '...  GenericBillingAssetItem ID already exist for: '|| v_GB_asset_list(r_GB_asset_index) ||
                                 'Category : ' || v_category||
                                 'Sub Categry : ' || v_sub_category);

                        end if;

                        -- Delete the element from list if it's matched with db_billing_element details.
                        v_GB_asset_list.delete(r_GB_asset_index);
                       exit;

                    end if;

                 r_GB_asset_index := v_GB_asset_list.next( r_GB_asset_index );

              end loop;

       end if;

        if v_found =0 then

         --
     -- Create the GBAssetItem object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjTypeGBAssetItem,
          v_GBAsset_id,
          v_GBAssetItem_id,
          null,
          in_ultimate_template_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created GenericBillingAssetItem ID: '|| v_GBAssetItem_id ||
               'Category : ' || r_billing_elements.debit_fitem_category||
               'Sub Categry : ' || r_billing_elements.debit_fitem_sub_category);

     end if;

      pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_GBAssetItem_id,
          gbv_GBAssetItem_Category,
          r_billing_elements.debit_fitem_category
    );

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          v_GBAssetItem_id,
          gbv_GBAssetItem_SubCategory,
          r_billing_elements.debit_fitem_sub_category
    );


        end if;
    end loop;


      pkg_os_object_io.sp_object_bv_set
                  (
                      in_session_id,
                      in_transaction_id,
                      v_GBAsset_id,
                      gbv_AllAssetsCreated,
                      111
                  );

end sp_GbAssetItem_Create;

--ODPRODUCT-32378
function fn_get_obj_node_label
(
     in_session_id      in object.object_id%type,
     in_program_id      in object.object_id%type
)
return varchar2 is
     
     v_object_node_label     varchar2(50);
     
     begin     
     --
     -- Set the object tree node label based on program selected for Thin policy.
     --     
     if in_program_id = 37448 THEN
          v_object_node_label := 'Automobile' ;
     elsif in_program_id = 37548 THEN
          v_object_node_label := 'Homeowner' ;
     elsif in_program_id = 37648 THEN
          v_object_node_label := 'BOP' ;  
     ELSE
          v_object_node_label := 'Policy Information';
     end if;
     
     return v_object_node_label;
     
end fn_get_obj_node_label;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_update_billingaccount_dm
--
--   %USAGE
--        This procedure creates a Collection Object and then insert all the billing accounts involved in respective package
--           based on FIChange.After adding ll the billing account ID , it's updating the datamart.
--
--
--
--   %ALGORITHM
--        1.   Create a collection object.
--        2.   Add all the Billing Account Id one by one in this collection .
--        3.  Update the datamart of  billing account one by one through loop.
--
--   %CAUTION
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_update_billingaccount_dm
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_list            in             t_billing_account_list
)
as

     v_procedure_name                   constant system_log.program_name%type   :=      pkg_name||'sp_update_billingaccount_dm';
     v_session_control                    pkg_os_session.r_dragon_session_control     :=     pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     r_billing_account_list               t_billing_account_list;
     r_updated_ba_list                    t_billing_account_list;
     --
     --OSBILLING-1083 - index defined varchar and list is needs to re-initilize
     --
     --r_billing_account_index            varchar2(100);
     r_billing_account_index            number := 0;
     v_datamart_tf                      char(1)     :=     'T';
     v_billing_acc_list_id               number;
     r_updated_ba_index                 number := 0;
     v_billing_acc_type_id              number;


    TYPE t_sorter_list IS TABLE OF PLS_INTEGER INDEX BY VARCHAR2(4000);

     v_sorter                           t_sorter_list;
     v_sorter_idx                       varchar2(4000);

     v_sorted_list                      t_billing_account_list;
     v_sorted_idx                       number := 1;

      begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Entering to update the datamart of Billing Account ' );

     end if;

     r_billing_account_list.delete;
     r_updated_ba_list.delete;
     --r_billing_account_list     :=     in_billing_account_list;

     ---------------------------------------
     -- Sort the collection using the sorter array...
     for i in 1 .. in_billing_account_list.COUNT
     loop

          v_sorter_idx := in_billing_account_list(i);
          v_sorter(v_sorter_idx)   :=   case
                                             when v_sorter.EXISTS(v_sorter_idx)
                                             then v_sorter(v_sorter_idx) + 1
                                             else 1
                                        end;

     end loop;

     -- Assign sorted elements back to collection...
     v_sorter_idx := v_sorter.FIRST;

     while v_sorter_idx is not null
     loop

          -- Handle multiple copies of same value...
          for i IN 1 .. v_sorter(v_sorter_idx)
          loop

               v_sorted_list(v_sorted_idx) := v_sorter_idx;

          end loop;

          v_sorted_idx := v_sorted_idx + 1;

          v_sorter_idx := v_sorter.NEXT(v_sorter_idx);

     end loop;

     r_billing_account_list     :=     v_sorted_list;

     ---------------------------------------

     r_billing_account_index     :=     r_billing_account_list.first;

     while r_billing_account_index is not null
     loop

          v_billing_acc_list_id := r_billing_account_list(r_billing_account_index);

          if ( pkg_os_object.fn_object_type_get(in_session_id, in_transaction_id,v_billing_acc_list_id) = gObjType_BillingAccount )
          then

               --get Billing Account Type
               v_billing_acc_type_id := NVL(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_billing_acc_list_id, gbv_BillAcc_AccountType), 0);

               begin

        --if not r_updated_ba_list.exists( v_billing_acc_list_id )
        --then

            --update only Customer Billing Account's
            if v_billing_acc_type_id = gbillingactype_customer
            then
               -- Update the billing account datamart
               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_acc_list_id, v_datamart_tf);

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                              '... Updated the datamart of BillingAccount ID for Object ID: ' || r_billing_account_list(r_billing_account_index));

               end if;

            else

               begin
                    -- Insert a record with a Entry TimeStamp in BILLINGACCOUNT_DATAMART_UPDATE

                    insert into BILLINGACCOUNT_DATAMART_UPDATE(
                         BILLING_ACCOUNT_ID,ENTRY_TIMESTAMP )
                    values
                         (
                              v_billing_acc_list_id,
                              sysdate
                         );

                  exception
                         when others then

                              pkg_os_logging.sp_log_error
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'Error: Unable to insert Billing Account Id in BILLINGACCOUNT_DATAMART_UPDATE Tabe ' || SQLERRM
                              );
                    end;
            end if;

              -- r_updated_ba_index := r_updated_ba_index + 1;

              -- r_updated_ba_list(r_updated_ba_index) := v_billing_acc_list_id;

        --end if;



          exception
               when others then
                    dbms_output.put_line (sqlerrm (sqlcode));
                    null;
               end ;

          end if; -- If object type is BA


               r_billing_account_index     := r_billing_account_list.next(r_billing_account_index);

     end loop; -- billing_account_index is not null

end sp_update_billingaccount_dm;

-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_bv_set
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_fitem_debit_credit               in          lookup_list_value.lookup_enum%type,
     in_fitem_category                    in          lookup_list_value.lookup_enum%type,
     in_fitem_subcategory                 in          lookup_list_value.lookup_enum%type default null,
     in_fitem_effective_date              in          object_bv_value.business_variable_value%type default null,
     in_fitem_billing_status              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_processing_status           in          lookup_list_value.lookup_enum%type default null,
     in_fitem_bill_status_date           in          object_bv_value.business_variable_value%type default null,
     in_fitem_Earningstatus              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_earned_amount              in          number default null ,
     in_fitem_unearned_amount               in          number default null,
     in_fitem_paid_amount                in          object_bv_value.business_variable_value%type default null,
     in_FItemRefInstallment               in          object.object_id%type default null,
     in_FItemRefPolicy                    in          object.object_id%type default null,
     in_FItemRefPolicyTxn               in          object.object_id%type default null,
     in_FitemRefPolicyTerm              in        object.object_id%type default null,
     in_FItemRefCustomer                    in          object.object_id%type default null,
     in_FItemRefEntityBelongsTo          in          object.object_id%type default null,
     in_FItemRefAssWithFItrx            in          object.object_id%type default null,
     in_FItemRefAssetpkg_db_object          in          object.object_id%type default null,
     in_FitemRefActionPolicyTxn         in        object.object_id%type default null,
     in_Fitem_LateFeeDueDate               in          object_bv_value.business_variable_value%type default null,
     in_bv_table                        in        pkg_os_object_io.t_bv_table default pkg_os_object_io.gnull_bv_table,
     in_FItem_id                         in          object.object_id%type default null,
     in_Fitem_billing_elt_md_id          in          db_billing_element.db_billing_element_id%type,
     in_FitemCasAssWithID               in        object.object_id%type default null,
     in_ultimate_template_id            in        object.object_id%type default null
)
is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_fitem_bv_set';
     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_bv_table                         pkg_os_object_io.t_bv_table;

begin

     v_bv_table.delete;

     v_bv_table     :=   in_bv_table;

     if in_fitem_debit_credit is not null
     then

          v_bv_table(gbv_fitem_debit_credit       ).business_variable_value     :=   in_fitem_debit_credit;

     end if;

     if in_fitem_category is not null
     then

          v_bv_table(gbv_fitem_category           ).business_variable_value     :=   in_fitem_category;

     end if;

     if in_fitem_subcategory is not null
     then

          v_bv_table(gbv_fitem_subcategory        ).business_variable_value     :=   in_fitem_subcategory;

     end if;

     if in_fitem_effective_date is not null
     then

          v_bv_table(gbv_fitem_effective_date     ).business_variable_value     :=   in_fitem_effective_date;

     end if;

     if in_fitem_billing_status is not null
     then

          v_bv_table(gbv_fitem_billing_status     ).business_variable_value     :=   in_fitem_billing_status;

     end if;

     if in_fitem_processing_status is not null
     then

          v_bv_table(gbv_fitem_processing_status  ).business_variable_value     :=   in_fitem_processing_status;

     end if;

     if in_fitem_bill_status_date is not null
     then

          v_bv_table(gbv_fitem_bill_status_date   ).business_variable_value     :=   in_fitem_bill_status_date;

     end if;

     if in_fitem_Earningstatus is not null
     then

          v_bv_table(gbv_FItem_Earning_Status     ).business_variable_value     :=   in_fitem_Earningstatus;
          v_bv_table(gbv_FItem_Earning_Date       ).business_variable_value     :=   to_char
                                                                                     (
                                                                                          pkg_os_time.fn_os_sysdate
                                                                                          (
                                                                                               in_session_id,
                                                                                               in_transaction_id,
                                                                                               in_FItem_id
                                                                                          ),
                                                                                          pkg_os_constant.DragonDateFormatDefault
                                                                                     );   -- OSPRODUCT-15900

     end if;

     if in_fitem_earned_amount is not null
     then

          v_bv_table(gbv_fitem_earned_amount      ).business_variable_value     :=   in_fitem_earned_amount;

     end if;

     if in_fitem_unearned_amount is not null
     then

          v_bv_table(gbv_fitem_unearned_amount    ).business_variable_value     :=   in_fitem_unearned_amount;

     end if;

     if in_fitem_paid_amount is not null
     then

          v_bv_table(gbv_fitem_paid_amount        ).business_variable_value     :=   in_fitem_paid_amount;

     end if;

     if in_FItemRefInstallment is not null
     then

          v_bv_table(gbv_FItem_RefInstallment     ).business_variable_value     :=   in_FItemRefInstallment;

     end if;

     if in_FItemRefPolicy is not null
     then

          v_bv_table(gbv_FItem_RefPolicy          ).business_variable_value     :=   in_FItemRefPolicy;

     end if;

     if in_FItemRefPolicyTxn is not null
     then

          v_bv_table(gbv_FItem_RefPolicyTrx       ).business_variable_value     :=   in_FItemRefPolicyTxn;

     end if;

     -- Keerthi OSDEMO-10929
     if in_FitemRefActionPolicyTxn is not null
     then

        v_bv_table(gbv_FItem_RefActionPolicyTrx   ).business_variable_value     := in_FitemRefActionPolicyTxn;

     end if;

     if in_FitemRefPolicyTerm is not null
     then
          v_bv_table(gbv_FItem_RefPolicyTerm      ).business_variable_value     := in_FitemRefPolicyTerm;

     end if;

     if in_FItemRefCustomer is not null
     then

          v_bv_table(gbv_FItem_RefCustomer        ).business_variable_value     :=   in_FItemRefCustomer;

     end if;

     if in_FItemRefEntityBelongsTo is not null
     then

          v_bv_table(gbv_FItem_RefEntityBelongsTo ).business_variable_value     :=   in_FItemRefEntityBelongsTo;

     end if;

     if in_FItemRefAssWithFItrx is not null
     then

          v_bv_table(gbv_FItem_RefAssWithFItrx    ).business_variable_value     :=   in_FItemRefAssWithFItrx;

     end if;

     if in_FItemRefAssetpkg_db_object is not null
     then

          v_bv_table(gbv_FItem_RefAsset           ).business_variable_value     :=   in_FItemRefAssetpkg_db_object;

     end if;

     if in_Fitem_LateFeeDueDate is not null
     then
          -- OSBILLING-334
          v_bv_table(gbv_FItem_LocalBilngDueDate     ).business_variable_value     :=   in_Fitem_LateFeeDueDate;

     end if;

      if in_FitemCasAssWithID is not null
     then

          v_bv_table(gbv_Fitem_RefCashAssWithID     ).business_variable_value     :=   in_FitemCasAssWithID;

     end if;

     -- OSBILLING-628
     if in_ultimate_template_id is not null
     then
          v_bv_table(gbv_FItem_RefUltimateTempID     ).business_variable_value     :=   in_ultimate_template_id;
     end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '...... Setting BV Values for FItem Object ID: '||in_FItem_id );

     end if;

     v_bv_table(gbv_FItem_Billing_Elt_MD_ID     ).business_variable_value   := in_Fitem_billing_elt_md_id;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_FItem_id,
          v_bv_table

     );

     --
     -- OSBILLING-767 Fetch and set the Accounting Period
     --
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_fitem_id,
          gbv_FItem_AccntingPeriod,
          pkg_db_functions.fn_get_fitem_acct_prd( in_session_id , in_transaction_id, in_fitem_id)  -- To get the Accounting period of Fitem which is dependent on Effective date and creation date of fite
     );

end sp_fitem_BV_set;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitem_create
--
--   %USAGE
--        This procedure creates a FITEM Object based on the input parameters.
--        its offset FITEM under carrier/writing comany based on the input parameters.
--        and udpates the references that are common to the Fitem universally.
--
--
--   %ALGORITHM
--        1.   Create the FITem object
--        2.   Finanlize the BV table collection variable corresponding to all inputs
--        3.   Update the business variables of FItem object
--
--   %CAUTION
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_create
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_parent_object_id                in           object.object_id%type,
     out_fitem_id                       out       object.object_id%type,
     out_offset_FItem_id                    out           object.object_id%type,
     in_current_date_time               in        date default null,
     in_fitem_debit_credit               in          lookup_list_value.lookup_enum%type,
     in_fitem_category                    in          lookup_list_value.lookup_enum%type,
     in_fitem_subcategory                 in          lookup_list_value.lookup_enum%type default null,
     in_fitem_effective_date              in          object_bv_value.business_variable_value%type default null,
     in_fitem_billing_status              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_processing_status           in          lookup_list_value.lookup_enum%type default null,
     in_fitem_bill_status_date           in          object_bv_value.business_variable_value%type default null,
     in_fitem_Earningstatus              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_earned_amount              in          number default null ,
     in_fitem_unearned_amount               in          number default null,
     in_fitem_paid_amount                in          object_bv_value.business_variable_value%type default null,
     in_FItemRefInstallment               in          object.object_id%type default null,
     in_FItemRefPolicy                    in          object.object_id%type default null,
     in_FItemRefPolicyTxn               in          object.object_id%type default null,
     in_FitemRefPolicyTerm              in        object.object_id%type default null,
     in_FItemRefCustomer                    in          object.object_id%type default null,
     in_FItemRefEntityBelongsTo          in          object.object_id%type default null,
     in_FItemRefAssWithFItrx               in          object.object_id%type default null,
     in_FItemRefAssetpkg_db_object          in          object.object_id%type default null,
     in_FitemRefActionPolicyTxn         in        object.object_id%type default null,
     in_Fitem_LateFeeDueDate               in          object_bv_value.business_variable_value%type default null,
     in_Fitem_billing_elt_md_id          in          db_billing_element.db_billing_element_id%type,
     in_bv_table                           in        pkg_os_object_io.t_bv_table default pkg_os_object_io.gnull_bv_table, --- @@@ One cannot have defaulted parameters followed by a non-defaulted parameter.
     in_FitemRefCashAssoWithID           in        object.object_id%type default null,
     in_ultimate_template_id            in            object.object_id%type default null,-- Kiran OSPRODUCT-32906. Comma Added.
     --Kiran start OSPRODUCT-32906
     in_Fitem_element_business_relation in            object_bv_value.business_variable_value%type default null
     --Kiran end OSPRODUCT-32906 
)
is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_fitem_create2';
     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_bv_table                         pkg_os_object_io.t_bv_table;
     v_carrier_billing_acc_id           object.object_id%type;
     v_writing_company_id               object.object_id%type;
     v_writing_co_billing_acc_id        object.object_id%type;
     v_usersession_exchange_id          object.object_id%type;
     v_exchange_sponsor_partner_id      object.object_id%type;
     v_carrier_writing_entity_id        object.object_id%type;
     v_policyterm_id                    object.object_id%type;
     v_offset_fitem_credit_debit        lookup_list_value.lookup_enum%type;
     v_datamart_tf                      char(1) := 'T';
 v_offset_fitem_subcategory         object.object_id%type := in_fitem_subcategory;

     v_product_id                       pd_product.pd_product_id%type;
     v_batch_type                       object_bv_value.business_variable_value%type;
     v_account_type                     object_bv_value.business_variable_value%type;
     v_fitem_gl_account_no              varchar2(100);
     v_policy_jurisdiction_id           lookup_list_value.lookup_enum%type;
     v_batrxset_id                      object.object_id%type;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Creating FItem object - Type:' || in_fitem_debit_credit ||
               ' Category:'|| in_fitem_category ||
               ' Sub Category:' || in_fitem_subcategory ||
               ' Parent Object ID:' || in_parent_object_id );

     end if;

     v_bv_table.delete;
     v_bv_table := in_bv_table;

     if in_parent_object_id is null
     then

          -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
          --return;

         pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Billing Account ID is null while creating an FItem ' ||
                    'FItem object - Type: ' || in_fitem_debit_credit ||
                    '  Category: '|| in_fitem_category ||
                    ' Sub Category:' || in_fitem_subcategory
               );
          raise no_data_found;

     end if;

     --
     -- Create the FItem object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FItem,
          in_parent_object_id,
          out_fitem_id,
          null,
          in_ultimate_template_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created FItemObject ID: '|| out_fitem_id );

     end if;

     if (in_FitemRefPolicyTerm is null and in_FItemRefPolicy is not null)
     then

          v_policyterm_id := pkg_db_functions.fn_get_policy_current_term
          (
               in_session_id,
               in_transaction_id,
               in_FItemRefPolicy
          );

     end if;

     --
     -- Set the BVs for the created FITem
     --

     sp_fitem_bv_set
     (
          in_session_id ,
          in_transaction_id  ,
          in_fitem_debit_credit,
          in_fitem_category,
          in_fitem_subcategory,
          in_fitem_effective_date,
          in_fitem_billing_status,
          in_fitem_processing_status,
          in_fitem_bill_status_date,
          in_fitem_Earningstatus  ,
          in_fitem_earned_amount,
          in_fitem_unearned_amount,
          in_fitem_paid_amount ,
          in_FItemRefInstallment,
          in_FItemRefPolicy,
          in_FItemRefPolicyTxn,
          nvl(in_FitemRefPolicyTerm,v_policyterm_id),
          in_FItemRefCustomer,
          in_FItemRefEntityBelongsTo,
          in_FItemRefAssWithFItrx,
          in_FItemRefAssetpkg_db_object,
          in_FitemRefActionPolicyTxn,
          in_Fitem_LateFeeDueDate,
          in_bv_table,
          out_FItem_id,
          in_Fitem_billing_elt_md_id,
          in_FitemRefCashAssoWithID,
          in_ultimate_template_id
     );


     --
     -- Get the Writing Company associated with the Policy
     --

     v_writing_company_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_FItemRefPolicy,
          gbv_WritingCompany
     );

     --
     -- Get the Billing Account of the Writing Company
     --

     v_writing_co_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
     (
          in_session_id,
          in_transaction_id,
          v_writing_company_id,
          gObjType_BillingAccount
     );

     --
     --   1.   Get the exchange, exchange sponsor partner and carrier billing account
     --

     v_usersession_exchange_id := pkg_os_wf_session.fn_exchange_get(in_session_id, in_transaction_id);

     v_exchange_sponsor_partner_id := pkg_os_wf_session.fn_exchange_sponsor_get(in_session_id, in_transaction_id);

     v_carrier_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
     (
          in_session_id,
          in_transaction_id,
          v_exchange_sponsor_partner_id,
          gObjType_BillingAccount
     );

     v_carrier_writing_entity_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          nvl(v_writing_co_billing_acc_id, v_carrier_billing_acc_id),
          gbv_BillingAccountParent
     );

     --
     -- Create the Offset FItem object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FItem,
          nvl(v_writing_co_billing_acc_id, v_carrier_billing_acc_id),
          out_offset_FItem_id
     );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created Offset FItemObject ID: '||out_offset_FItem_id );

     end if;


     --
     -- Get the Offset FItem type as debit or credit
     --

     if ( in_fitem_debit_credit is not null and in_fitem_debit_credit = gFItem_Debit )
     then

          v_offset_fitem_credit_debit := gFItem_Credit;

     elsif ( in_fitem_debit_credit is not null and in_fitem_debit_credit = gFItem_Credit)
     then

          v_offset_fitem_credit_debit := gFItem_Debit;

     end if;


     --
     -- Set the BVs for the created FItem
     --

     sp_fitem_bv_set
     (
            in_session_id ,
            in_transaction_id  ,
            v_offset_fitem_credit_debit,
            in_fitem_category,
            in_fitem_subcategory,
            in_fitem_effective_date,
            in_fitem_billing_status,
            in_fitem_processing_status,
            in_fitem_bill_status_date,
            in_fitem_Earningstatus  ,
            in_fitem_earned_amount,
            in_fitem_unearned_amount,
            in_fitem_paid_amount ,
            in_FItemRefInstallment,
            in_FItemRefPolicy,
            in_FItemRefPolicyTxn,
            nvl(in_FitemRefPolicyTerm,v_policyterm_id),
            in_FItemRefCustomer,
            v_carrier_writing_entity_id,
            in_FItemRefAssWithFItrx,
            in_FItemRefAssetpkg_db_object,
            in_FitemRefActionPolicyTxn,
            in_Fitem_LateFeeDueDate,
            in_bv_table,
            out_offset_FItem_id,
          in_Fitem_billing_elt_md_id,
          null, -- in_FitemRefCashAssoWithID, -- OSBILLING-3842
          in_ultimate_template_id
     );
--OSBILLING-3833 - Merged GCNA code in BaseDEV. Start
    /*v_product_id             :=   pkg_os_product.fn_object_product_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_FItemRefPolicy
                                   );


     v_account_type           :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        nvl(v_writing_co_billing_acc_id, v_carrier_billing_acc_id),
                                        gbv_BillAcc_AccountType
                                   );

     v_batrxset_id            :=   pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_FItemRefAssWithFItrx );

     v_batch_type             :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_batrxset_id,
                                        gbv_FITrxSet_BatchType
                                   );

     v_policy_jurisdiction_id :=   pkg_os_object_io.fn_object_bv_path_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_FItemRefPolicy,
                                        '29252214.29253414.29254014.210419'
                                   );


     v_fitem_gl_account_no    :=   pkg_db_functions.fn_get_fitem_gl_account
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        out_offset_FItem_id,
                                        nvl(v_product_id,57405),
                                        null,
                                        null,
                                        v_offset_fitem_credit_debit,
                                        in_fitem_category,
                                        in_fitem_subcategory,
                                        v_batch_type,
                                        v_account_type,
                                        nvl(v_policy_jurisdiction_id,5813)
                                   );

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... v_fitem_gl_account_no: '||v_fitem_gl_account_no
          );

     end if;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_offset_FItem_id,
          gbv_fitem_glaccountnumber,
          v_fitem_gl_account_no


     );*/
--OSBILLING-3833 - Merged GCNA code in BaseDEV. End

     --
     -- set the Reference Associated FItems
     --

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_offset_FItem_id,
          gbv_AssociatedOffsetFitem,
          out_fitem_id -- Reference_Associated Offset Fitem
     );

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_fitem_id,
          gbv_AssociatedOffsetFitem,
          out_offset_FItem_id -- Reference_Associated Offset Fitem
     );

     --
     -- update the datamart for FItem and the offset FItme
     --

/* OSBILLING-767 Performance
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, out_offset_FItem_id, v_datamart_tf);
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, out_FItem_id, v_datamart_tf);

*/
end sp_fitem_create ;


-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_billing_fichange_delta_sum
--
--   %USAGE
--        This procedure takes FITransaction, gets all FIChange objects and totals the Action Delta BV
--          and returns the Total
--
--          We could have easily defined an aggr rule and executed the rule here, but it would cause dependencies
--          and would be difficult to add addl. code if necessary.
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_fitrx_id                      FITransaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_billing_fichange_delta_sum
(
     in_session_id               in          object.object_id%type,
     in_transaction_id          in          object.object_id%type,
     in_billinacounttrxset_id     in          object.object_id%type,
     in_use_datamart_tf          in          char          default 'T'
)
return object_bv_value.business_variable_value%type
is

     v_session_control          pkg_os_session.r_dragon_session_control     := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name          constant system_log.program_name%type     := pkg_name||'fn_billing_fichange_delta_sum';

     v_object_list               pkg_os_object.t_object_list;
     v_object_indx               number;

     v_total_amt               number := null;

begin

     if ( in_use_datamart_tf = 'T' )
     then

          begin

               select
                    nvl(sum(f.action_delta),0)
               into
                    v_total_amt
               from
                    dragon_fichange f
               where
                    f.billingaccounttrxset_id = in_billinacounttrxset_id
               and
                    f.sum_include_tf = gFIChange_Yes;

          exception
               when no_data_found then
                    v_total_amt := null;
          end;

     else

          -- Given BillingTransaction Set, get its FIChange objects (recursive) and return Total
          -- This gets all child FITransactions and then gets it FIChange objects
          -- Recursiveness is made possible by Object Child Search Path 811046

          pkg_os_object_search.sp_object_children_of_type_get
          (
               in_session_id,
               in_transaction_id,
               in_billinacounttrxset_id,
               gObjType_FIChange,
               v_object_list
          );

          v_object_indx := v_object_list.first;

          while v_object_indx is not null
          loop

               v_total_amt :=  nvl(v_total_amt, 0) + nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_object_list(v_object_indx), gbv_FIChange_action_delta), 0);

               v_object_indx := v_object_list.next(v_object_indx);

          end loop;

     end if;

     return v_total_amt;

end fn_billing_fichange_delta_sum;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_bind_w_payment_trx_upd
--
--   %USAGE
--        Used in the Bing with Payment flow to 'fix' payment transactioin made just before the Bind - switch the payemnt transaction and fitems
--        from QuoteTransaction.ID to Policy.ID / NB_PolicyTRX.ID.
--        Called from sp_billing_trx_post_processing.
--
--   %ALGORITHM
--        1. Get from in_policy_trx_id  quote TRX ID : BV 29606209 --  _Reference_Derived From.   Policy -to- QuoteTransaction
--        2. Get the Payment batch processed during Bind_w_Payment : BV 34244246--_Reference_Related Payment Transaction Set.   This should be set for Quote.QuoteTransaction.
--        3. In general, the batch may have many billing transactions under it ( HIxxxx required to bind multiple policies at ones and process many payments for those policies in one batach).
--           Lets find 'our' billing transction from many - the one with _RefAssociatedPoltrx = QuteTrxID.
--        4. For every billing transaction found:
--           4.1 set BV 29744046 gbv_FITrx_RefAssociatedPoltrx := in_policy_trx_id
--           4.2 set BV 29721146 gbv_FITrx_RefAssociatedPolicy := in_policy_trx_id.parentPolicyID
--           4.2 Find all fitems created by the billing tranaction 
--           4.2.1 set BV 29721246 gbv_FItem_RefPolicy := in_policy_trx_id.parentPolicyID
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_policy_trx_id              Policy trx ID New Business
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- UTPRODUCT-3477
procedure sp_bind_w_payment_trx_upd
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_trx_id                   in             object.object_id%type,
     out_cash_src_fnd_for_plcy_tf       out            boolean                        --OSPRODUCT-25324
) 
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_bind_w_payment_trx_upd';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     
     v_policy_id                        object.object_id%type;
     v_policy_number                    varchar2(100);
     v_customer_name                    varchar2(100);
     v_quote_trx_id                     object.object_id%type;
     v_payment_batch_id                 object.object_id%type;
     -- v_fi_trx_list                      pkg_os_object.t_object_list;
     v_idx                              binary_integer;
     v_fitem_list                       pkg_os_object.t_object_list;
     v_fitem_idx                        binary_integer;
     v_fichange_list                    pkg_os_object.t_object_list;
     v_fichange_idx                     binary_integer;
     v_datamart_tf                      char   := 'T';
     v_paymentTrx_refQuote              object.object_id%type;
     v_error_count                      integer;
     bulk_errors                        exception;
     pragma EXCEPTION_INIT(bulk_errors, -24381);
     v_bulk_error_trap                  boolean:=false;
     v_policyterm_id                    object.object_id%type;  --OSPRODUCT-12898
     v_gl_list                          pkg_os_object.t_object_list; -- UTXPRODUCT-294
     
     -- UTPRODUCT-4851
     v_batch_list                      pkg_os_object.t_object_list;
     
     cursor cur_cash_posted_batch
     (
            cp_quote_trx_id             object.object_id%type
     )
     is
     select
               dfi.fitransaction_id,
               dfi.policy_transaction_id,
               dfi.billing_account_id,
               dfi.batch_ref_no
     from
          dragon_fitransaction dfi
     where
          dfi.batch_type_id =pkg_db_functions.gbatch_singlepayment
     and
          dfi.policy_transaction_id = cp_quote_trx_id
     and
          dfi.policy_id is null;

begin
 
     v_policy_id := pkg_os_object.fn_object_parent_get
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_trx_id
                    );
                    
     --OSPRODUCT-12898
     v_policyterm_id := pkg_db_functions.fn_get_policy_current_term
                        (
                            in_session_id,
                            in_transaction_id,
                            v_policy_id
                        );
                        
     v_policy_number     :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_id,
                                   231
                              );
                              
     v_customer_name     :=   pkg_os_object_io.fn_object_bv_path_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_id,
                                   '29252214.211882'
                              );
                    
     v_quote_trx_id := pkg_os_object_io.fn_object_bv_get  -- getting the quote TRX ID
                       (
                            in_session_id,
                            in_transaction_id,
                            v_policy_id,
                            pkg_db_constant.gbv_Ref_Derived_From -- 29606209
                       );
                       
     /* UTPRODUCT-4851
     v_payment_batch_id := pkg_os_object_io.fn_object_bv_get  -- getting the Payment batch
                           (
                                in_session_id,
                                in_transaction_id,
                                v_quote_trx_id,
                                pkg_db_constant.gbv_Ref_PaymentBillngTrx -- 34244246
                           );
                           
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Entering with policy TRX ID=' || in_policy_trx_id || 
               ', policy ID =' || v_policy_id ||
               '. Found Quote TRX ID=' ||  v_quote_trx_id ||
               ' and payemnt batch ID='|| v_payment_batch_id
          );
     end if;
     
     if v_quote_trx_id is null
        or
        v_payment_batch_id is null
     then
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Terminatating the process as Quote ID or Payemetn Batch is NULL'
               );
          end if; 
               
          return;
     end if;
     */
     -- UTPRODUCT-4851

     -- UTPRODUCT-4851 Starts Looping..
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Entering with policy TRX ID=' || in_policy_trx_id ||
               ', policy ID =' || v_policy_id ||
               '. Found Quote TRX ID=' ||  v_quote_trx_id
          );
     end if;

     v_batch_list.delete;

     for r_cash_posted_batch in cur_cash_posted_batch (v_quote_trx_id)
     loop
          if r_cash_posted_batch.batch_ref_no is not null
          then
               v_batch_list(v_batch_list.count +1) := r_cash_posted_batch.batch_ref_no;
          end if;

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Tranferrring the Seingle payment ID :' || r_cash_posted_batch.batch_ref_no ||
                    ' To the policy level For the billing account :'|| r_cash_posted_batch.billing_account_id ||
                    ' Payment Done Against Quote ID :'|| v_quote_trx_id ||
                    ' FiTrx ID ' || r_cash_posted_batch.fitransaction_id
               );
          end if;

          --v_payment_batch_id := r_cash_posted_batch.batch_ref_no;

          /*
     -- do the job
     --               
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_payment_batch_id,
          pkg_db_constant.gObjType_FITransaction, -- 2365046
          v_fi_trx_list
     );  
     
     v_idx := v_fi_trx_list.first;
               */
               /*
     while v_idx is not null
     loop
          
          v_paymentTrx_refQuote := pkg_os_object_io.fn_object_bv_get  -- getting the _Ref from Payment TRX to Quote TRx
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_fi_trx_list(v_idx),
                                        pkg_db_object.gbv_FITrx_RefAssociatedPoltrx -- 29744046
                                   );
             
          if  v_paymentTrx_refQuote = v_quote_trx_id
                    then*/
               v_fitem_list.delete;
               
               select 
                    fitem_id
               bulk collect into 
                    v_fitem_list
               from
                    dragon_fitem fi
               where
               fi.creator_fitransaction_id = r_cash_posted_batch.fitransaction_id -- v_fi_trx_list(v_idx) -- UTPRODUCT-4851
               ;
               
               v_fitem_idx := v_fitem_list.first;
               
               while v_fitem_idx is not null
               loop
			   
                    v_fichange_list.delete;
                    
                    select 
                         fichange_id
                    bulk collect into 
                         v_fichange_list
                    from
                         dragon_fichange fic
                    where
                         fic.fitem_id = v_fitem_list(v_fitem_idx)
                    ;
                    
                    if v_fichange_list.count>0
                    then
               for v_index IN v_fichange_list.first ..  v_fichange_list.last
               loop
                    begin
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_fichange_list(v_index),
                              pkg_db_payplan_modify.gbv_fichangerefpolicy,
                              v_policy_id
                         );

                         update dragon_fichange
                         set
                              policy_id = v_policy_id,
                              policy_number = v_policy_number,
                              customer_name = v_customer_name,
							  policy_term_id = v_policyterm_id
                         where
                              fichange_id = v_fichange_list(v_index);
                    exception
                         when others
                         then
                              pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, 'Error in Fi Change '||v_fichange_list(v_index) );
                    end;

               end loop;

               /*
                         BEGIN

                              forall v_bulk_index IN v_fichange_list.first ..  v_fichange_list.last
                              SAVE EXCEPTIONS

                                   update dragon_fichange
                                   set
                                        policy_id = v_policy_id,
                                        policy_number = v_policy_number,
                                        customer_name = v_customer_name,
                                        policy_term_id = v_policyterm_id  --OSPRODUCT-12898
                                   where
                                        fichange_id = v_fichange_list(v_bulk_index);

                         EXCEPTION
                         WHEN bulk_errors THEN

                              v_error_count := SQL%BULK_EXCEPTIONS.COUNT;

                              --Report the number of errors.
                              pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, 'Errors on BULK update.  Error count is '||v_error_count,167017 );

                              FOR i IN 1 .. v_error_count
                              LOOP

                                   pkg_os_logging.sp_log_error
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Error for object_id '||
                                        v_fichange_list(SQL%BULK_EXCEPTIONS(i).ERROR_INDEX)||
                                        ', bv_id '||
                                        v_fichange_list(SQL%BULK_EXCEPTIONS(i).ERROR_INDEX)||
                                        ', error is '||
                                        SQLERRM(-SQL%BULK_EXCEPTIONS(i).ERROR_CODE),
                                        167017
                                   );

                              END LOOP;

                         when others
                         then

                              pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, 'Other Error on BULK update.  Error count is '||v_error_count,167017 );
                         end;
                    */

                    end if;
			   
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_fitem_list(v_fitem_idx),
                         pkg_db_object.gbv_FItem_RefPolicy, -- 29721246,
                         v_policy_id
                    );

                    --OSPRODUCT-12898
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_fitem_list(v_fitem_idx),
                         gbv_FItem_RefPolicyTerm, --32080346,
                         v_policyterm_id
                    );

                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         v_fitem_list(v_fitem_idx),
                         v_datamart_tf
                    );
                    
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Updated policy ID for fitem =' || v_fitem_list(v_fitem_idx)
                         );
                    end if;     
                    
                    v_fitem_idx := v_fitem_list.next(v_fitem_idx);           
               end loop;

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    r_cash_posted_batch.fitransaction_id,--  v_fi_trx_list(v_idx),
                    pkg_db_object.gbv_FITrx_RefAssociatedPolicy, -- 29721146
                    v_policy_id
               );
                      
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    r_cash_posted_batch.fitransaction_id,-- v_fi_trx_list(v_idx),
                    pkg_db_object.gbv_FITrx_RefActionPolicy, -- 29974046,
                    v_policy_id
               );  
               
               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    r_cash_posted_batch.fitransaction_id,--   v_fi_trx_list(v_idx),
                    v_datamart_tf
               );
               
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
						 '... Updated policy ID to '||v_policy_id||' for payment transaction ' || r_cash_posted_batch.fitransaction_id -- v_fi_trx_list(v_idx)
                    );
               end if; 
           /*
          else
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Skipping the payment transaction ' || v_fi_trx_list(v_idx) || ' as it refers to another quote trx=' || v_paymentTrx_refQuote
                    );
               end if;                
          end if;          
          */
        --  v_idx := v_fi_trx_list.next(v_idx);
        --  end loop;

     end loop;  -- UTPRODUCT-4851

     -- UTPRODUCT-4851 Starts
     if v_batch_list.count>0
     then
          for v_idx IN v_batch_list.first ..  v_batch_list.last
          loop
               begin
                    pkg_os_datamart.sp_datamart_update_row
                    (
                         in_session_id,
                         in_transaction_id,
                         v_batch_list(v_idx) ,
                         v_datamart_tf
                    );
               exception
                    when others
                    then
                         pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, 'Error in Bats '||v_batch_list(v_idx) );
               end;

               --
               -- UTXPRODUCT-294 Starts
               -- GL Datamart Refresh for Single payment batch
               --
               v_gl_list.delete;
                
               begin
                         
                    select
                         bgl.gl_id
                    bulk collect into
                         v_gl_list
                    from
                         dragon_billing_gl bgl
                    where
                         bgl.batrxset_id = v_batch_list(v_idx);
                         
               exception 
                    
                    when others then
                         null; 
                          
               end;           
               

               if v_gl_list.count > 0 
               then 
               
                    for v_gl_idx IN v_gl_list.first ..  v_gl_list.last
                    loop
                         
                         begin
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_gl_list(v_gl_idx),
                                   v_datamart_tf
                              );
                              
                         exception
                              when others
                              then
                                   pkg_os_logging.sp_log_error
                                   ( 
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name, 
                                        'Error in Billing FL '||v_gl_list(v_gl_idx)
                                   );
                         end;
                         
                    end loop; 
               
               end if;
               -- UTXPRODUCT-294 Ends

          end loop;
          
          out_cash_src_fnd_for_plcy_tf := true;                 --OSPRODUCT-25324 
          
       end if;
       -- UTPRODUCT-4851 Ends

end sp_bind_w_payment_trx_upd;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_billing_trx_post_processing
--
--   %USAGE
--        This is a controller procedure that calls various "process" actions based on the Batch Type
--          and performs common tasks (such as auditing) after the "process"
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_ba_trx_set_id                 BillingAccountTransactionSet ID
--   %PARAM    io_action_outcome_id          Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

-- --OSPRODUCT-5978
procedure sp_billing_trx_post_processing
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_id              in             object.object_id%type,
     in_ba_trx_set_id                   in             object.object_id%type,    /* BillingAccountTransactionSet ID */
     io_action_outcome_id               in out         outcome.outcome_id%type,
     in_current_date_time               in             date default null
)
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_billing_trx_post_processing';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_datamart_tf                      char(1)    := 'T';
     v_fichange_total_amt               number;
     -- OSBILLING-5011 - Start
     v_policy_transaction_id            object.object_id%type;
     v_policytrx_change_amount          number;
     v_billingtrx_created_amount        number;
     v_policy_id                        object.object_id%type;
     v_policy_image_id                  object.object_id%type;
     -- OSBILLING-5011 - End
     --VAULTDEV-10591 Merged under OSBILLING-5011 Start
     v_idx                              number;
     --v_ptp_payer_list                   PKG_DB_MULTIPAYER.t_payer_tab;
     v_ptp_payer_list                   pkg_os_object.t_object_list;
     v_payer_billing_account_id         object.object_id%type;
     v_payer_amount                     number;
     v_mismatch_threshold               pd_property_type.pd_property_type_id%type;
     --VAULTDEV-10591 Merged under OSBILLING-5011 End

     v_equity_date                      date;

     ----OSBILLING 6090 Satyam 29 Jan2019 start
     -- v_pymntrecvd_pt_objid  varchar2(100);
     v_pymntrecvd_policy_objid          varchar2(100);
     v_pymntrecvd_tf                    varchar2(1);
     v_billing_account                  object.object_id%type;
     v_batch_type_id                    object.object_id%type ;
     v_batsid                           object.object_id%type;
     ---OSBILLING 6090 Satyam 29 Jan2019 end

     --OSBILLING-7127 start
     V_object_list                      pkg_os_object.t_object_list;
     v_policytrx_discount_amount        number;
     v_billingtrx_discount_amount       number;
     v_chosen_payment_plan              object.object_id%type;
     v_chosen_payment_plan_type         number;
     v_product_id                       pd_product.pd_product_id%type;
     --OSBILLING-7127 end
     v_FullPayDiscCoverage              number    :=   438646; --OSBILLING-7448
      v_count                           number;     --OSBILLING-7838

     v_policy_transaction_type          object_bv_value.business_variable_value%type; --OSPRODUCT-1968
     v_policy_transaction_sub_type      object_bv_value.business_variable_value%type; --OSPRODUCT-1968
     v_pay_plan_change_ind              number; --OSBILLING-1968
     v_cash_src_fnd_for_plcy_TF         boolean;  --OSPRODUCT-25324
	
	--OSPRODUCT-7572
     v_invoke_gl_tf                     char; -- KR 10/01 
     v_financial_trx_tf                 char;
     -- end OSPRODUCT-7572
     -- UTPRODUCT-4120
     v_to_be_rb_trx_id                  object.object_id%type;
	 
     v_billing_acc_parent_id            object.object_id%type;--OSPRODUCT-11365
     r_billing_account_list             t_billing_account_list;--OSPRODUCT-8711
	 
     v_ptp_payer_lst                    pkg_db_multipayer.t_payer_tab; -- UTPRODUCT-4841
     v_billing_due_date                 date;  					-- OSPRODUCT-13849
     v_policy_term_id                   object.object_id%type;  -- OSPRODUCT-13849
     v_duedt_withdrawaldt               varchar2(50);           -- OSPRODUCT-13849
     v_policy_term_upt                  object.object_id%type; --OSPRODUCT-19189
     v_installment_id                   object.object_id%type; --OSPRODUCT-19189
     v_outcome_id                       number; --UTXPRODUCT-589

     --UTXPRODUCT-589
     v_object_cache                    pkg_os_object_cache.t_object_cache;
     v_outcome                         number;
     v_action                          number;
     v_action_object                   number;
     v_createdby_bats_id               object.object_id%type;
     v_createdby_bats_PT_id            object.object_id%type;
     v_task_count                      number;
     type t_nid_pol_obj is record
     (
          policy_id           object.object_id%type,
          policy_term_id      object.object_id%type
     );--LXPRODUCT-399
     type t_nid_pol_obj_list       is table of t_nid_pol_obj     index by varchar2(100); -- NOTE: The index is a concatenation of Policy#, Policy Term ID --LXPRODUCT-399
     v_nid_pol_polterm_list        t_nid_pol_obj_list; --LXPRODUCT-399
     v_nid_pol_polterm_indx_str    varchar2(100); --LXPRODUCT-399
     v_billing_method              number;
     --OSPRODUCT-25053 Start
     v_producing_agency_id              object.object_id%type;
     v_agency_billing_acc_id            object.object_id%type := null;
     v_policytrx_commission_amount      number;
     v_billingtrx_commission_amount     number;
     --OSPRODUCT-25053 End
     v_broker_commission                number ; --OSPRODUCT-37091	 

     cursor c_policy_nid_update
     is
          select
               dfi.policy_id, dfi.policy_term_id, dfi.INSTALLMENT
          from
               dragon_fichange dfi
          where
               dfi.billingaccounttrxset_id = in_ba_trx_set_id
          and
               dfi.policy_id is not null
          and
               dfi.action_id <> gFIChange_FYI
          group by
               dfi.policy_id, dfi.policy_term_id, dfi.INSTALLMENT;
               
     cursor c_update_inst_and_polterm_dm
          (v_installment_id  in  object.object_id%type )  --OSPRODUCT-19189
     is
          select 
               * 
          from (
                    select    sum(f.balance) fitem_balance, i.balance_amount ,i.installment_id , i.policy_term_id
                    from      dragon_fitem f , dragon_scheduled_installment i
                    where     i.installment_id = v_installment_id
                    and       i.installment_id = f.installment_id
                    and       f.FITEM_TYPE_ID = 146 
                    and       f.fitem_category_id not in (946, 646,1546, 5548,5746)
                    and       f.BILLING_ACCOUNT_ID = i.BILLING_ACCOUNT_ID
                    and       i.balance_amount>=0
                    group by  i.balance_amount,i.installment_id , i.policy_term_id
               )
          where 
               balance_amount <> fitem_balance 
     ;

begin
     
     -- OSBILLING-5011 - Start
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Billing Account ID: ' || in_billing_account_id ||
               ' Batch ID: ' || in_ba_trx_set_id
          );

     end if;
     -- UTPRODUCT-4822 Starts 
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_ba_trx_set_id,
          pkg_db_object.gbv_fitrxset_ass_entity,  
          pkg_db_multipayer.fn_bats_ass_entity_get(in_session_id,in_transaction_id , in_ba_trx_set_id,in_billing_account_id )
     );
     -- UTPRODUCT-4822 Ends 
     -- OSBILLING-5011 - End
     --
     -- Fetch and set the accounting period
     --
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_ba_trx_set_id,
          gbv_FITrxSet_AccntingPeriod,
          pkg_db_functions.fn_get_fitransset_acct_prd(in_session_id,in_transaction_id , in_ba_trx_set_id)
     );

     --
     -- Persist Billing Account Total Balance
     --
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_ba_trx_set_id,
          pkg_db_object.gbv_FITrxSet_BATotalBalance,
          pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_billing_account_id,
               pkg_db_object.gbv_BillAcc_TotalBalance
          )
     );
     
     v_batch_type_id := pkg_os_object_io.fn_object_bv_get        --Getting the batch type id
                         (
                              in_session_id,
                              in_transaction_id,
                              in_ba_trx_set_id,
                              gbv_FITrxSet_BatchType
                         );
                         
     -- OSBILLING-5011 - Start
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Batch Type ID: ' || v_batch_type_id
          );

     end if;
     
     -- OSPRODUCT-7572
     v_financial_trx_tf  :=  pkg_db_object.fn_batrxset_type_in_set (v_batch_type_id, 1148);                         
     
     -- Balancing not required for financial transactions
     
     -- OSPRODUCT-7572          
     -- if pkg_db_object.fn_batrxset_type_in_set (v_batch_type_id, 1148) = 'F' then
     if v_financial_trx_tf = 'F' then
          
          --
          --  Perform system balancing
          --
          
          v_fichange_total_amt := fn_billing_fichange_delta_sum(in_session_id, in_transaction_id, in_ba_trx_set_id );

          if ( v_fichange_total_amt <> 0 )
          then
               
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Error: Unable to balance FIChange Delta amounts for Batch ID:'||in_ba_trx_set_id ||
                    ' FIChange Total:' || v_fichange_total_amt
               );

               raise FICHANGE_NOT_BALANCED;        -- OSBILLING-5011
               io_action_outcome_id := pkg_db_constant.gOutcomeFichangeNotBalanced;
               --OSBILLING-5204
               -- If this outcome is getting returned in your workflow, Fix the issue why fichange is getting unbalanced.
               -- Handling this outcome in workflow is not suggested.

          end if;
          
          -- OSBILLING-5011 Start
          v_policy_transaction_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          in_ba_trx_set_id,
                                          pkg_db_billing_modify.gbv_Batrxset_RefAsscPolicyTrx
                                     );
                                     
          begin
               
               select
                    pt.ptp_id,
                    pt.policy_trx_type_id,
                    pt.policy_trx_subtype_id,
                    pt.policy_id,
                    pt.policy_trx_product_id,
                    pt.policy_trx_premium_chg -- OSPRODUCT-7572 KR 10/01
               into
                    v_policy_image_id,
                    v_policy_transaction_type,
                    v_policy_transaction_sub_type,
                    v_policy_id,
                    v_product_id,
                    v_policytrx_change_amount -- OSPRODUCT-7572 KR
               from
                    dragon_policy_trx pt
               where
                    pt.policy_trx_id = v_policy_transaction_id;
          
          exception
               
               when others then
                    null;
          end;
          
          if v_policy_image_id is null then
               
               v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_policy_transaction_id,
                                          pkg_os_policy_transaction.gbv_PolicyTrxCoverages
                                     );
                                     
          end if;
		  
		  --OSPRODUCT-25053 Start                                                         
          begin
               select
                    st.change_amount--column for policy commimsion amount
               into
                    v_policytrx_commission_amount
               from
                    dragon_transaction_stats st
               where
                    st.policy_transaction_id = v_policy_transaction_id
               and
                    bv_id = pkg_cs_commissions.gbv_Policy_FullTermCommission; --31905346
                         
          exception
               when others then
               null;
               
               if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Change commission amount is null: '
               );
               end if;
                     
          end;
          
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Policy image id: ' || v_policy_image_id ||
                    ' Policy transaction id: ' || v_policy_transaction_id ||
                    ' Partner account id: ' || v_agency_billing_acc_id ||
                    ' Change commission amount: ' || v_policytrx_commission_amount
               );
          end if;
                                              
          --OSPRODUCT-25053 End
          
          if v_policy_transaction_type is null then
                           
               -- UTPRODUCT-2190 Kostya. Moving v_policy_transaction_type init out from the "IF" block below, so it is available for all cases.                    
               v_policy_transaction_type := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_policy_transaction_id,
                                                 pkg_os_constant_bv.gbv_PolicyTranType
                                            );
               -- / UTPRODUCT-2190
               
               v_policy_id               := pkg_os_object.fn_object_parent_get -- OSPRODUCT-17785
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_policy_transaction_id
                                            );
                                                           
               -- OSPRODUCT-7572
               v_policytrx_change_amount := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_policy_transaction_id,
                                                 pkg_db_billing_modify.gbv_PolicyCostchange -- 31902746
                                            );
               
          end if;
          
          if v_policy_transaction_sub_type is null then
               
               -- UTPRODUCT-2214 Kostya. Moving v_policy_transaction_type init out from the "IF" block below, so it is available for all cases.
               v_policy_transaction_sub_type := pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_policy_transaction_id,
                                                     pkg_db_billing_modify.gbv_PolicyTrx_EndSubType
                                                ); 
               -- / UTPRODUCT-2214    
          
          end if;
          
          -- UTPRODUCT-4120
          if v_policy_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Rollback
          then
          
               v_to_be_rb_trx_id := pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         v_policy_transaction_id,
                                         pkg_os_policy_transaction.gbv_PolicyTrxRollsBckTrx
                                    );
                                    
               --[RR] Try getting from the datamart
               begin
                    select
                         pt.ptp_id
                    into
                         v_policy_image_id
                    from
                         dragon_policy_trx pt
                    where
                         pt.policy_trx_id = v_to_be_rb_trx_id;
                         
               exception
                    
                    when no_data_found then
                         
                         -- OSPRODUCT-3351 Retreival moved below
                         null;
                                                            
               end;
               
               -- OSPRODUCT-3351 Added block
               begin
                    
                    if v_policy_image_id is null then
               
                         v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                              (
                                                   in_session_id,
                                                   in_transaction_id,
                                                   v_to_be_rb_trx_id,
                                                   pkg_db_billing_modify.gbv_PolicyTrxRefCoverages
                                              );
                                              
                    end if;
               end;
          end if;
               

          if v_policy_transaction_id is not null and v_policy_image_id is not null then
               
               if v_policy_id is null then

                    v_policy_id := pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id
                                   );
                                   
               end if;

               -- OSPRODUCT-7572
               /*v_policytrx_change_amount := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_policy_transaction_id,
                                                 pkg_db_billing_modify.gbv_PolicyCostchange -- 31902746
                                            );
               */
                                            
               --VAULTDEV-10591 Merged under OSBILLING-5011 Start
			   -- OSPRODUCT-33513
               v_mismatch_threshold := nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, v_policy_id,114148),0); --114148 - mismatch threshold pd property type

               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' Mismatch Threshold: ' || v_mismatch_threshold
                    );
               end if;

               if ( nvl ( pkg_os_object_io.fn_object_bv_get
                          (
                               in_session_id,
                               in_transaction_id,
                               v_policy_image_id,
                               pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                          ), pkg_db_multipayer.genum_No) = pkg_db_multipayer.genum_No ) 
               then
                    
                    begin
                         
                         --VAULTDEV-10591 Merged under OSBILLING-5011 End
                         if v_policytrx_change_amount is not null 
                            and
                            v_policytrx_change_amount <> 0 
                         then

                              select
                                   sum(nvl(f.initial_amount, 0))
                              into
                                   v_billingtrx_created_amount
                              from
                                   dragon_fitem f
                              --OSPRODUCT-2496 start
                              join
                                   db_billing_element dbe ON (dbe.db_billing_element_id = f.billing_element_md_id)
                              --OSPRODUCT-2496 end
                              where
                                   f.creator_fitransactionset_id = in_ba_trx_set_id
                              and
                                   f.billing_account_id = in_billing_account_id
                              and
                                   f.fitem_category_id <> gFItem_Cat_Commission
                              and
                                   --OSPRODUCT-2708
                                   --f.fitem_sub_category_id not in ( gFitem_SubCat_Discount, 53046) ;--OSBILLING-6890 gFItem_Cat_Discount); --OSBILLING-6501
                                   f.fitem_sub_category_id  not in ( gFitem_SubCat_Discount, gFitem_SubCat_MVRProcessFee, gFitem_SubCat_LateFee) ;--OSBILLING-6890 gFItem_Cat_Discount); --OSBILLING-6501


                              if v_session_control.gLogging_Full then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'For Policy Transaction id ' ||
                                        v_policy_transaction_id ||
                                        ' change amount -  ' ||
                                        v_policytrx_change_amount ||
                                        ' For the billingaccounttransactionset id ' ||
                                        in_ba_trx_set_id || ' created amount - ' ||
                                        v_billingtrx_created_amount
                                   );
                              
                              end if;

                              if nvl(abs(v_billingtrx_created_amount), 0) <> nvl(abs(v_policytrx_change_amount), 0) 
                                 and
                                 -- OSPRODUCT-33513
                                 --abs(nvl(abs(v_billingtrx_created_amount), 0) - nvl(abs(v_policytrx_change_amount), 0)) > v_mismatch_threshold --VAULTDEV-10591 Merged under OSBILLING-5011
                                 (abs(nvl(abs(v_billingtrx_created_amount), 0) - nvl(abs(v_billingtrx_created_amount), 0))) * 100 > v_mismatch_threshold --OSPRODUCT-34627
                              then
                                   
                                   pkg_os_logging.sp_log_error -- Error logging
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'For Policy Transaction id #SP ' || v_policy_transaction_id ||
                                        ' change amount -  ' || v_policytrx_change_amount ||
                                        ' For the billingaccounttransactionset id ' || in_ba_trx_set_id ||
                                        ' created amount - ' || v_billingtrx_created_amount
                                   );


                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_policy_transaction_id,
                                        gbv_Policy_Billing_Mismatch_tf,
                                        1
                                   ); --VAULTDEV-10591 Merged under OSBILLING-5011

                                   --OSBILLING-6208 start
                                   raise POLICYTRX_NOT_BALANCED; --VAULTDEV-10591 Merged under OSBILLING-5011    --OSBILLING-5994
                                   --OSBILLING-6208 end
                              
                              end if;

                         end if;
                         --VAULTDEV-10591 Merged under OSBILLING-5011 Start
						 
						 --OSPRODUCT-25053 Start
                         if v_policytrx_commission_amount is not null
                            and
                            v_policytrx_commission_amount <> 0
                         then
                              v_producing_agency_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_policy_image_id,
                                                            pkg_pc_bor_action.gbv_PartnerReceivingCommission    --OSPRODUCT-30808
                                                       );
                              -- Get the 1-1 child of the Partner of type Billing Account
                              v_agency_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,
                                                                v_producing_agency_id,
                                                                gObjType_BillingAccount
                                                           );

                              v_broker_commission :=  pkg_os_object_io.fn_object_bv_get   --OSPRODUCT-37091
                                                          (
                                                               in_session_id, 
                                                               in_transaction_id , 
                                                               v_policy_image_id, 
                                                               gbv_FinalBrokerCommission   --Final Broker Commission % (id - 35103148)
                                                          );
                                                          
                             if v_broker_commission is null
                             then
                                       
                                   select
                                        sum(nvl(f.initial_amount, 0))
                                   into
                                        v_billingtrx_commission_amount
                                   from
                                        dragon_fitem f
                                   join
                                        db_billing_element dbe ON (dbe.db_billing_element_id = f.billing_element_md_id)
                                   where
                                        f.creator_fitransactionset_id = in_ba_trx_set_id
                                   and
                                        f.billing_account_id = v_agency_billing_acc_id
                                   and
                                        f.fitem_category_id = gFItem_Cat_Commission
                                   and
                                        dbe.create_credit_tf = 'T';
                              else
                              
                                   select                                           --OSPRODUCT-37091
                                        sum(nvl(f.initial_amount, 0))
                                   into
                                        v_billingtrx_commission_amount
                                   from
                                        dragon_fitem f
                                   join
                                        db_billing_element dbe ON (dbe.db_billing_element_id = f.billing_element_md_id)
                                   where
                                        f.creator_fitransactionset_id = in_ba_trx_set_id
                                   and 
                                        f.billing_account_type_id not in (gbv_BillAccType_WritCompany,gbv_BillAccType_Carrier)  --(1501, 4)
                                   and
                                        f.fitem_category_id = gFItem_Cat_Commission
                                   and
                                        dbe.create_credit_tf = 'T';
                                        
                              end if;
                              --create credit = 'T'; -- db billing element column
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Billing account id ' || v_agency_billing_acc_id ||
                                        ' creator trx set id ' ||in_ba_trx_set_id ||
                                        ' billing commission created amount - ' ||v_billingtrx_commission_amount ||
                                        ' policy transaction commission amount - ' || v_policytrx_commission_amount ||
                                        ' Policy Image ID: ' || v_policy_image_id ||
                                        ' Threshold: ' || v_mismatch_threshold -- OSPRODUCT-33513
                                   );

                              end if;							  
                              
                              if nvl(abs(v_billingtrx_commission_amount), 0) <> nvl(abs(v_policytrx_commission_amount), 0)
                                 and
                                 -- OSPRODUCT-33513
                                 (abs(nvl(abs(v_billingtrx_commission_amount), 0) - nvl(abs(v_policytrx_commission_amount), 0))) * 100 > v_mismatch_threshold                                 
                              then
                                   raise COMMISSION_NOT_BALANCED;
                              
                              end if;
                          end if;
                         --OSPRODUCT-25053 End

                         --OSBILLING-7127 start
                         v_chosen_payment_plan := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_policy_id, --OSBILLING-7838
                                                       gbv_Policy_RefChosenPlan
                                                  ); --OSBILLING-7838
                                                  
                         v_chosen_payment_plan_type := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_chosen_payment_plan,
                                                            pkg_db_billing_modify.gbv_PaymentPlanMDID
                                                       ); --OSBILLING-7838
                         
                         if v_product_id is null then
                              
                              v_product_id := pkg_os_product.fn_object_product_get
                                              (
                                                   in_session_id, 
                                                   in_transaction_id, 
                                                   v_policy_image_id
                                              );
                              -- OSBILLING-7838--
                         
                         end if;

                         -- if v_chosen_payment_plan_type = 11306 and v_product_id <> 86546
                         Select
                              count(*) into v_count
                         from
                              db_billing_element be
                         join
                              db_payment_plan_detail ppd
                         on
                              ppd.db_billing_element_id = be.db_billing_element_id
                         where
                              ppd.payment_plan_id = v_chosen_payment_plan_type
                         and
                              be.debit_fitem_sub_category = gFitem_SubCat_Discount
                         and
                              be.pd_product_id=v_product_id
                         and
                              be.pd_product_id <> gProduct_thinPolicy;

                         --OSPRODUCT-1968 Starts
                         v_pay_plan_change_ind := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_policy_image_id,
                                                       pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd-- 31867946 --
                                                  ) ;

                         v_pay_plan_change_ind := nvl ( v_pay_plan_change_ind, 2); --1 for yes, 2 for No
                         
                         if v_session_control.gLogging_Full
                         then
                              
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   ' Check Policy Transaction id ' ||
                                   v_policy_transaction_id ||
                                   ' ptp id ' || v_policy_image_id ||
                                   ' v_pay_plan_change_ind '|| v_pay_plan_change_ind ||
                                   ' v_policy_transaction_type -  ' ||
                                   v_policy_transaction_type ||
                                   ' v_policy_transaction_sub_type ' ||
                                   v_policy_transaction_sub_type ||
                                   ' Count to identify Paid In Full Discount mismatch between Billing and Policy amounts '||v_count
                              );
                         
                         end if;

                         if v_count > 0
                            and
                            not 
                            (
                                 v_policy_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                                 and
                                 v_policy_transaction_sub_type in ( pkg_db_billing_modify.gTrxSubType_changepayplan )
                            )   -- do not validate for pure CPP OSPRODUCT-1968
                            -- End of OSBILLING-7838--
                         then

                              pkg_os_object_search.sp_object_children_of_type_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,--v_policy_image_id, OSPRODUCT-877
                                   pkg_os_tprn_constant.gobjPolicyPAM,  ----OSBILLING-7838
                                   v_object_list
                              );

                              if v_object_list.count <> 0 --OSPRODUCT-877
                              then
                                   /* --OSPRODUCT-1968 Starts
                                   v_policytrx_discount_amount := pkg_os_object_io.fn_object_bv_get
                                                                  (
                                                                        in_session_id,
                                                                        in_transaction_id,
                                                                        V_object_list(1),
                                                                        gbv_PolicyPAM_discount --OSBILLING-7838
                                                                  );

                                   v_policytrx_discount_amount   :=   nvl(v_policytrx_discount_amount,   pkg_os_object_io.fn_object_bv_get  --OSBILLING-7448
                                                                                                                           (
                                                                                                                                  in_session_id,
                                                                                                                                  in_transaction_id,
                                                                                                                                  pkg_os_object_search.fn_object_with_attribute_get
                                                                                                                                  (
                                                                                                                                        in_session_id,
                                                                                                                                        in_transaction_id,
                                                                                                                                        v_policy_transaction_id,
                                                                                                                                        gObjType_PolicySTAT,
                                                                                                                                        gbvStat_CoverageId,
                                                                                                                                        v_FullPayDiscCoverage
                                                                                                                                  ),
                                                                                                                                  gbvNetChangeAmount
                                                                                                                           )
                                                                           );
                                   */ --OSPRODUCT-1968 ends
                                   -- added below for OSPRODUCT-1968
                                   
                                   if v_policy_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                                      and
                                      nvl( v_policy_transaction_sub_type,pkg_db_payplan_modify.gTrxSubType_Endorsement)
                                           in 
                                           ( pkg_db_payplan_modify.gTrxSubType_Endorsement, gTrxSubType_DefEndorsement )
                                      and
                                      v_pay_plan_change_ind = 1
                                   then
                                        
                                        v_policytrx_discount_amount := pkg_os_object_io.fn_object_bv_get
                                                                       (
                                                                             in_session_id,
                                                                             in_transaction_id,
                                                                             V_object_list(1),
                                                                             gbv_PolicyPAM_discount
                                                                       );
                                   
                                   else
                                        
                                        v_policytrx_discount_amount := pkg_os_policy_stat.fn_get_premium_change
                                                                      (
                                                                           in_session_id,
                                                                           in_transaction_id,
                                                                           null,
                                                                           v_policy_transaction_id,
                                                                           V_object_list(1),
                                                                           null,
                                                                           pkg_os_xformer_extension.gXStatWrittenPremiumChange,
                                                                           v_FullPayDiscCoverage
                                                                      ); -- added OSPRODUCT-1968
                                   
                                   end if;

                                   if v_session_control.gLogging_Full
                                   then
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             ' PAM Obj Id - '||  v_object_list(1) ||
                                             ' and FP Discount -'|| v_policytrx_discount_amount
                                        );
                                        
                                   end if; 
                                   
                                   select
                                        sum(nvl(f.initial_amount, 0))
                                   into
                                        v_billingtrx_discount_amount
                                   from
                                        dragon_fitem f
                                   where
                                        f.creator_fitransactionset_id = in_ba_trx_set_id
                                   and
                                        f.billing_account_id = in_billing_account_id
                                   and
                                        f.fitem_sub_category_id  = gFitem_SubCat_Discount;

                                   if v_session_control.gLogging_Full then
                                        
                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'For Policy Transaction id ' ||
                                             v_policy_transaction_id ||
                                             ' discount amount -  ' ||
                                             v_policytrx_discount_amount ||
                                             ' For the billingaccounttransactionset id ' ||
                                             in_ba_trx_set_id || ' discount amount - ' ||
                                             v_billingtrx_discount_amount
                                             
                                        );
                                   
                                   end if;

                                   if nvl(abs(v_policytrx_discount_amount), 0) <> nvl(abs(v_billingtrx_discount_amount), 0)
                                   then
                                        
                                        pkg_os_logging.sp_log_error -- Error logging
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             '..For Policy Transaction id #SP -  ' || v_policy_transaction_id ||
                                             ' change amount -  ' || v_policytrx_discount_amount ||
                                             ' For the billingaccounttransactionset id ' || in_ba_trx_set_id ||
                                             ' created amount - ' || v_billingtrx_discount_amount
                                        );

                                        pkg_os_object_io.sp_object_bv_set
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_policy_transaction_id,
                                             gbv_Policy_Billing_Mismatch_tf,
                                             1
                                        );

                                        raise POLICYTRX_NOT_BALANCED;

                                   end if;
                                   
                              end if;

                         end if;
                         
                         --OSBILLING-7127 end
                    end;
               
               else
                    
                    if v_policytrx_change_amount is not null 
                       and
                       v_policytrx_change_amount <> 0 
                    then
                         
                         -- Performance fix
                         pkg_os_object_search.sp_object_children_of_type_get
                         (
                              in_session_id              =>    in_session_id,
                              in_transaction_id          =>    in_transaction_id,
                              in_object_id               =>    v_policy_image_id,
                              in_child_object_type_id    =>    pkg_db_constant.gobjType_PTPPayer,
                              in_object_list             =>    v_ptp_payer_list
                         );
                         
                         /*pkg_db_multipayer.sp_ptp_payers_get
                         (
                              in_session_id     => in_session_id,
                              in_transaction_id => in_transaction_id,
                              in_ptp_object_id  => v_policy_image_id,
                              io_payer_list     => v_ptp_payer_list,
                              in_print_list     => 'Y',
                              in_index_by       => pkg_db_multipayer.g_PayerGet_idx_CustmrPartnr
                         );*/
                         
                         v_idx := v_ptp_payer_list.first;

                         while v_idx is not null loop
                              
                              begin
                              
                                   select
                                        payer.billing_account_id
                                   into
                                        v_payer_billing_account_id
                                   from
                                        dragon_ptp_payer payer
                                   where
                                        payer.ptp_payer_id = v_ptp_payer_list(v_idx);
                              
                              exception
                                   when others then
                                        null;
                                        
                              end;
                              
                              begin
                                   
                                   if v_payer_billing_account_id is null then
                                        
                                        v_payer_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                                                      (
                                                                          in_session_id,
                                                                          in_transaction_id,
                                                                          pkg_os_object_io.fn_object_bv_get
                                                                          (
                                                                               in_session_id,
                                                                               in_transaction_id,
                                                                               v_ptp_payer_list(v_idx),
                                                                               pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                                          ),
                                                                          pkg_db_constant.gObjType_BillingAccount
                                                                      );
                                                                
                                   end if;
                                   
                              end;
                              
                              --v_payer_billing_account_id := v_ptp_payer_list(v_idx).PayerBillingAccount_id;

                              select
                                 sum(nvl(f.initial_amount, 0))
                              into
                                 v_payer_amount
                              from
                                 dragon_fitem f
                              --OSPRODUCT-2496 start
                              join
                                   db_billing_element dbe ON (dbe.db_billing_element_id = f.billing_element_md_id)
                              --OSPRODUCT-2496 end
                              where
                                   f.creator_fitransactionset_id = in_ba_trx_set_id
                              and
                                   f.billing_account_id = v_payer_billing_account_id
                              and
                                   f.fitem_category_id <> gFItem_Cat_Commission
                              and
                                   --OSPRODUCT-2708
                                   --f.fitem_sub_category_id not in ( gFitem_SubCat_Discount, 53046) ;--OSBILLING-6890 gFItem_Cat_Discount); --OSBILLING-6501
                                   f.fitem_sub_category_id not in ( gFitem_SubCat_Discount, gFitem_SubCat_MVRProcessFee, gFitem_SubCat_LateFee) ;--OSBILLING-6890 gFItem_Cat_Discount); --OSBILLING-6501

                              v_billingtrx_created_amount := nvl(v_billingtrx_created_amount, 0) + nvl(v_payer_amount, 0);

                              v_idx := v_ptp_payer_list.next(v_idx);

                         end loop;

                         if nvl(abs(v_billingtrx_created_amount), 0) <> nvl(abs(v_policytrx_change_amount), 0) 
                            and
                            abs(nvl(abs(v_billingtrx_created_amount), 0) - nvl(abs(v_policytrx_change_amount), 0)) > v_mismatch_threshold 
                         then

                              pkg_os_logging.sp_log_error -- Error logging
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'For Policy Transaction id #MP ' || v_policy_transaction_id ||
                                   ' change amount -  ' || v_policytrx_change_amount ||
                                   ' For the billingaccounttransactionset id ' || in_ba_trx_set_id ||
                                   ' and billing account id ' || v_payer_billing_account_id ||
                                   ' created amount - ' || v_billingtrx_created_amount 
                              );

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_transaction_id,
                                   gbv_Policy_Billing_Mismatch_tf,
                                   1
                              );
                                                              
                              --OSBILLING-6208 start
                              raise POLICYTRX_NOT_BALANCED; --OSBILLING-5994 --commented for OSBILLLING-6782_WIP
                              --OSBILLING-6208 end
                              
                         end if;
                         
                    end if;
                    
               end if;
               
          end if;
          --VAULTDEV-10591 Merged under OSBILLING-5011 End
          -- OSBILLING-5011 End

          --
          -- Update the Batch Datamart
          --
          -- pkg_os_datamart.sp_datamart_update_row ( in_session_id, in_transaction_id, in_ba_trx_set_id, v_datamart_tf); -- OSPRODUCT-7572
          
          --
          -- Invoke code to create GL Entries
          --
          -- OSPRODUCT-7572
          v_invoke_gl_tf := nvl(pkg_os_product.fn_product_property_get( in_session_id, in_transaction_id, in_ba_trx_set_id,g_Property_invoke_gl),'T');
          
          if v_invoke_gl_tf = 'T'
          then
              pkg_db_gl_transaction.sp_search_gl_entries
              (
                   in_session_id ,
                   in_transaction_id ,
                   in_ba_trx_set_id
              );
          else
               
               if v_session_control.gLogging_Full then
                                
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' For the billingaccounttransactionset id ' ||
                         in_ba_trx_set_id || ' GL is skipped  ' 
                    );
                                
               end if;         
            
          end if;
          -- end OSPRODUCT-7572
          
     end if;
     
     --VAULTDEV-10591 Merged under OSBILLING-5011 Start
     -- VAULTDEV-10378
     --
     -- Update datamrts for a payer
     --
     /*  pkg_db_multipayer_util.sp_payer_datamart_update
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id => in_billing_account_id,
          in_ba_trx_set_id      => in_ba_trx_set_id,
          in_caller_routing     => v_procedure_name
     );
     */          -- / VAULTDEV-10378       --VAULTDEV-10591 Merged under OSBILLING-5011 End
     --
     -- DDWIDEV-222
     -- Invoke the custom call to set the Run Paid Throug date logic.
     --
     
     --
     -- Update the Batch Datamart
     --
     pkg_os_datamart.sp_datamart_update_row ( in_session_id, in_transaction_id, in_ba_trx_set_id, v_datamart_tf);
     
     pkg_cs_db_billing.sp_bill_trx_cs_post_process
     (
          in_session_id ,
          in_transaction_id ,
          in_ba_trx_set_id,
          v_batch_type_id -- OSPRODUCT-7572
     );
     
     -- Only for non - financial transactions
     -- OSPRODUCT-7572
     -- if pkg_db_object.fn_batrxset_type_in_set (v_batch_type_id, 1148) = 'F' then
     if v_financial_trx_tf = 'F' then
     -- end OSPRODUCT-7572
          
          -- OSPRODUCT-863 - Start
          if v_session_control.gLogging_Full
          then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Equity Date ' ||
                    '...Policy Transaction ID: ' || v_policy_transaction_id ||
                    '...Batch ID: ' || in_ba_trx_set_id                    
               );

          end if;

          if v_policy_transaction_id is not null
          then
               
               pkg_db_equity_calculation.sp_stats_per_day_factor_insert 
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_transaction_id
               );
               
          end if;
          -- OSPRODUCT-863 - End

          /*OSPRODUCT-13849 Start*/
          v_duedt_withdrawaldt := nvl(pkg_os_product.fn_product_property_get( 
                                                                            in_session_id, 
                                                                            in_transaction_id,
                                                                            v_policy_id,
                                                                            19446
                                                                            ),
                                     '1');
          
          if v_policy_transaction_id is not null then

               v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                         (
                              in_session_id,
                              in_transaction_id,
                              v_policy_transaction_id,
                              gbv_PolicyTrx_RefPolicyTerm
                         );

               if v_session_control.gLogging_Full -- OSPRODUCT-13849
               then
                   pkg_os_logging.sp_log
                   (
                        in_session_id,
                        in_transaction_id,
                        v_procedure_name,
                        ' Batch Type Id  : '|| v_batch_type_id ||
                        ' Policy Transaction Id  : '|| v_policy_transaction_id ||
                        ' Policy Term Id  : '|| v_policy_term_id
                   );
                   
               end if;

               if v_batch_type_id in ( gLateNotice , gLateNotice2 ) then

                         begin
                              SELECT
                                  decode( v_duedt_withdrawaldt,
                                          '1', MIN(f.due_date),
                                          '2', MIN(f.withdrawal_date)
                                          ) billing_due_date
                              INTO
                                   v_billing_due_date
                              FROM
                                   dragon_fitem f
                              WHERE
                                   f.policy_term_id = v_policy_term_id 
                              AND 
                                   f.policy_id = v_policy_id 
                              and 
                                   f.billing_account_id = in_billing_account_id 
                              AND 
                                   f.aging_status_id in (2, 3)
                              AND 
                                   f.balance > 0;

                         exception
                              when others then 
                              null;
                         end;

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_ba_trx_set_id,
                              gbv_BillDueDate, --DueDate
                              to_char(v_billing_due_date, pkg_os_constant.DragonDateFormatDefault )
                         );

                    elsif v_batch_type_id in ( gNOIC ) then
                          pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_ba_trx_set_id,
                              gbv_BillDueDate, -- DueDate
                              pkg_os_object_io.fn_object_bv_path_get( 
                                                                      in_session_id, 
                                                                      in_transaction_id, 
                                                                      v_policy_transaction_id,
                                                                      '30024012.30020712' 
                                                                      )
                         );

                    elsif v_batch_type_id in ( gFirstReminder, gSecondReminder ) then

                          BEGIN
                               SELECT 
                                          MAX(pt.Policy_Trx_Eff_Date) 
                               INTO 
                                          v_billing_due_date
                               FROM 
                                          dragon_policy_trx pt
                               WHERE 
                                          pt.policy_trx_type_id in ( 1, 2) 
                               AND 
                                          pt.policy_id = v_policy_id
                               AND 
                                          pt.policy_term_id = v_policy_term_id
                               AND 
                                          pt.policy_trx_object_state_id = gPolicyTrxObjectStateId;-- processed 
                          
                          EXCEPTION
                               when others then
                                    null;
                          END;

                          pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_ba_trx_set_id,
                              gbv_BillDueDate, --DueDate
                              to_char(v_billing_due_date, pkg_os_constant.DragonDateFormatDefault )
                         );
                         
                         if v_session_control.gLogging_Full -- OSPRODUCT-13849
                         then
                             pkg_os_logging.sp_log
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  ' Transaction Eff date for Reminder Notice : '|| v_billing_due_date ||
                                   ' Date Updated : '|| to_char(v_billing_due_date, pkg_os_constant.DragonDateFormatDefault ) ||
                                   ' Policy Id Reminder : '|| v_policy_id
                             );
                             
                         end if;

                    end if;
               end if;
               /*OSPRODUCT-13849 End*/

          -----OSBILLING 6090 Satyam 29 Jan2019  Start
          --to check if the payment is present befire binding , if yes then autocash apply procedure is called.

          --- to check if BV is getting set at (BAT->PT->BV value) in cases other than new business START
          v_pymntrecvd_tf := pkg_os_object_io.fn_object_bv_path_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_ba_trx_set_id,
                                    v_bat_pt_bv_path
                               );
                               ---- to check BAT->PT->BV value END

          /*v_batch_type_id := pkg_os_object_io.fn_object_bv_get        --Getting the batch type id
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ba_trx_set_id,
                                   gbv_FITrxSet_BatchType
                              );*/

          -- OSBILLING-7872 starts
          -- Merged from MUSTDEV-30815
          --if v_pymntrecvd_tf is null and v_batch_type_id  =9    --9 for new business only
          if v_pymntrecvd_tf is null and v_batch_type_id in ( 9 , 6431, 3604 , 8) then  -- Added renewal enum under OSPRODUCT-29784
               
               -- OSBILLING-7872 end
                
               ----- to check if BV is getting set at BAT->PT->Policy->QT->BV value
               v_pymntrecvd_policy_objid := pkg_os_object.fn_object_parent_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_policy_transaction_id
                                            );

               v_pymntrecvd_tf := pkg_os_object_io.fn_object_bv_path_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_pymntrecvd_policy_objid ,
                                       v_bv_path_get               --if variable getting create under QT to BV path
                                  );

          end if;

          -- OSBILLING-7759 starts
          if v_pymntrecvd_tf = 1 and v_batch_type_id not in ( 601 , 3 ) then  --1=Yes, 2=No --OSPRODUCT-2923(Added reinstatement batch type ID)
           
               -- UTPRODUCT-3477
               --
               -- 'fix' payment transaction made just before the Bind - switch the payment transaction and fitems from QuoteTransaction.ID to Policy.ID / NB_PolicyTRX.ID.
               --
               sp_bind_w_payment_trx_upd
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_transaction_id,
                    v_cash_src_fnd_for_plcy_tf                --OSPRODUCT-25324
               );
               -- / UTPRODUCT-3477    
                          
               -- OSBILLING-7759 ends     
               pkg_db_nightly_process.sp_update_aging_status
               (
                    in_session_id,
                    in_transaction_id,
                    in_ba_trx_set_id
               );

               pkg_os_logging.sp_log
               (
                     in_session_id,
                     in_transaction_id,
                     v_procedure_name,
                     'Nightly process aging called'
               );

               pkg_db_multipayer.sp_ptp_payers_cache_get
               (
                    in_session_id         => in_session_id,
                    in_transaction_id     => in_transaction_id,
                    io_cached_payer_lists => g_policy_payer_tab,
                    in_ptp_object_id      => v_policy_image_id,
                    io_payer_list         => v_ptp_payer_lst,
                    in_print_list         => 'Y', --VAULTDDEV-6645
                    in_index_by           => pkg_db_multipayer.g_payerget_idx_bilingaccount
               );

               v_idx := v_ptp_payer_lst.first;  --#MP
               while v_idx is not null           --#MP
               loop

                    if v_session_control.gLogging_Full then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Calll for Cash Apply Processing for Billing Account '|| v_ptp_payer_lst(v_idx).PayerBillingAccount_id
                         );
                    end if;

                    sp_billingacounttrxset_create    --to get bats of type autocashapply
                    (
                         in_session_id ,
                         in_transaction_id ,
                         v_ptp_payer_lst(v_idx).PayerBillingAccount_id, -- in_billing_account_id ,  -- UTPRODUCT-4841
                         1001,             --in_transaction_type_id   1001 for autocash apply
                         401,
                         v_batsid,         --out parameter, bats of type autocashapply
                         nvl(in_current_date_time, sysdate)  --OSBILLING-7829
                    );

                    if v_cash_src_fnd_for_plcy_TF = true  --OSPRODUCT-25324 Added condition to pass null policy id incase of cash is sitting on account
                    then 
                            pkg_db_cash_apply.sp_cashprof_apply_duetype    --once aging is done ,acount level cash apply call
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_ptp_payer_lst(v_idx).PayerBillingAccount_id, -- in_billing_account_id ,  -- UTPRODUCT-4841
                                 v_batsid,  --in_billing_trx_set_id
                                 io_action_outcome_id,
                                 in_policy_id => v_policy_id -- UTPRODUCT-3477
                            );
                    else
                            pkg_db_cash_apply.sp_cashprof_apply_duetype    --once aging is done ,acount level cash apply call
                            (
                                 in_session_id,
                                 in_transaction_id,
                                 v_ptp_payer_lst(v_idx).PayerBillingAccount_id, -- in_billing_account_id ,  -- UTPRODUCT-4841
                                 v_batsid,  --in_billing_trx_set_id
                                 io_action_outcome_id
                            );
                    end if;

                    -- UTPRODUCT-4841
                    sp_intalment_invocie_flag_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_ptp_payer_lst(v_idx).PayerBillingAccount_id, -- in_billing_account_id ,  -- UTPRODUCT-4841
                         v_batsid,
                         nvl(in_current_date_time, sysdate)
                    );
                    -- UTPRODUCT-4841

                    -- OSBILLING-7872 Starts
                    -- Merged from MUSTDEV-31101
                    io_action_outcome_id := pkg_os_constant.gOutcome_OK;
                    -- OSBILLING-7872 ends
                    if v_session_control.gLogging_Full then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              'Payment was present before binding , hence autocash applied on  '||v_policy_id ||
                              ' Billing Account: '||v_ptp_payer_lst(v_idx).PayerBillingAccount_id
                         );
                    end if;

                    v_idx := v_ptp_payer_lst.next(v_idx);

               end loop;
               -- UTPRODUCT-4841

          end if;

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    'Finished from Payment at bind check ,Getting the value of payment received as '||v_pymntrecvd_tf

               );

          end if;
          ---OSBILLING 6090 Satyam 29 Jan2019    End

          -- Equity Date Set
          pkg_db_functions.sp_policyterm_equity_date_set
          (
               in_session_id,
               in_transaction_id,
               in_ba_trx_set_id
          );

          v_equity_date := pkg_db_functions.fn_batrxset_equity_date_get
                           (
                                in_session_id,
                                in_transaction_id,
                                in_ba_trx_set_id
                           );

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_ba_trx_set_id,
               pkg_db_functions.gbv_BillAcctTrxSet_EquityDate,
               to_char(v_equity_date, pkg_os_constant.DragonDateFormatDefault)
          );
     
          -- UTPRODUCT-910. Kostya
          if v_policy_transaction_id is not null
             and
             (
                  v_policy_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Rollback -- UTPRODUCT-2190 Kostya
                  or
                  (
                       nvl(v_policytrx_change_amount,0) <> 0
                       and
                       v_policy_image_id is not null
                       and
                       (
                            not
                            (
                                 v_policy_transaction_type = pkg_os_policy_transaction.gPolicyTrxType_Endorsement
                                 and
                                 v_policy_transaction_sub_type in 
                                 (
                                      pkg_db_billing_modify.gTrxSubType_changeBilltype,
                                      pkg_db_billing_modify.gTrxSubType_changepayplan,
                                      gTrxSubType_cmsnAdjust
                                 )
                            )
                       )
                  )         
             )
          then
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'Calculating earned/unearned premium for policy transaction '|| v_policy_transaction_id
                    );
               end if;

               pkg_db_policy_earning.sp_trx_earning_calc
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_trx_id => v_policy_transaction_id
               );
               
          else -- UTPRODUCT-2190 Kostya
               
               if v_session_control.gLogging_Full
               then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'WARNING: Skpping calculation of earned/unearned premium.'||
                         ' Policy TRX id='                 || v_policy_transaction_id ||
                         ', TRX change amount='            || nvl(v_policytrx_change_amount,0) ||
                         ', Policy Image ID='              || v_policy_image_id ||
                         ', v_policy_transaction_type='    || v_policy_transaction_type ||
                         ', v_policy_transaction_sub_type='|| v_policy_transaction_sub_type
                    );
                    
               end if;    
               --/ UTPRODUCT-2190
               
          end if;
          
          -- OSPRODUCT-17785
          --
          --    For Reinstatement transactions, mark the Instalments as unbilled if there are any items with a balance that are unbilled under an invoiced installment.
          --
          if v_policy_transaction_type = gBillTrxType_Reinstatement 
          then
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..... For Reinstatement transaction '|| v_policy_transaction_id||', policy ID '|| v_policy_id||
                         ', marking Instalments as unbilled if there are any items with a balance that are unbilled under an invoiced installment'
                    );
               end if;
                          
               declare 
                    type t_inst_unbilled is record 
                    (
                       installment_Number  number,
                       installment_id      number,
                       billing_account_id  number
                    );
                              
                    type t_inst_unbilled_list  is table of t_inst_unbilled index by binary_integer;
                              
                    v_inst_unbilled_list  t_inst_unbilled_list;                    
                    
                    v_idx                 binary_integer;
                    
                    cursor c_inst_unbilled ( p_policy_id number)
                    is 
                    select 
                         si.installment_Number, 
                         si.installment_id, 
                         si.billing_account_id
                    from 
                         dragon_scheduled_installment si
                    where
                         si.invoice_flag = 1 -- invoiced
                    and   
                         si.policy_id = p_policy_id
                    and exists
                             ( select 1
                               from 
                                    dragon_fitem fi
                               where
                                    fi.installment_id = si.installment_id
                               and  
                                    fi.policy_id      = si.policy_id
                               and  
                                    fi.billing_account_id = si.billing_account_id
                               --
                               and  
                                    fi.fitem_billed_tf is null
                               and  
                                    fi.fitem_type_id = gFItem_Debit
                               and 
                                    fi.balance <> 0
                            )
                    order by 
                         billing_account_id, 
                         installment_Number
                    ;
               begin
                    open c_inst_unbilled ( v_policy_id );
                    
                    fetch c_inst_unbilled bulk collect into v_inst_unbilled_list;
                    
                    close c_inst_unbilled;
                    
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '..... Found ' || v_inst_unbilled_list.count || ' installments'
                         );
                    end if;
                    
                    
                    v_idx := v_inst_unbilled_list.first;
                    
                    while v_idx is not null
                    loop
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '.......... Installment # ' || v_inst_unbilled_list(v_idx).installment_Number ||
                                   ', ID'                      || v_inst_unbilled_list(v_idx).installment_id     ||
                                   ', Billing Account ID'      || v_inst_unbilled_list(v_idx).billing_account_id ||
                                   '. Marking this installemnt as "UNBILLED" '
                              );
                         end if;
                         
                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_inst_unbilled_list(v_idx).installment_id,
                              gbv_installment_invoiced_tf,
                              NULL   -- unbilled
                         );
                                                  
                         pkg_os_datamart.sp_datamart_update_row ( in_session_id, in_transaction_id, v_inst_unbilled_list(v_idx).installment_id, v_datamart_tf);
                         
                         v_idx := v_inst_unbilled_list.next(v_idx);
                    end loop;                    
               end;          
          end if;
          -- / OSPRODUCT-17785
                    
     end if;
     -- /UTPRODUCT-910. Kostya
     
     -- UTPRODUCT-2926
     sp_billing_doc_processing
     (
          in_session_id,
          in_transaction_id,
          in_ba_trx_set_id,    
          io_action_outcome_id
     );
     -- UTPRODUCT-2926
     --UTXPRODUCT-589 start
     
     if v_batch_type_id =3401 then
     
          v_createdby_bats_id := pkg_os_object_io.fn_object_bv_get        
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_ba_trx_set_id,
                                   gbv_FITrxSet_CreatedbyBatch
                              );
                              
          
          v_createdby_bats_PT_id := pkg_os_object_io.fn_object_bv_get        
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_createdby_bats_id,
                                   pkg_db_billing_modify.gbv_Batrxset_RefAsscPolicyTrx
                              );
                              
          v_policy_transaction_sub_type := pkg_os_object_io.fn_object_bv_get
                                 (
                                      in_session_id,
                                      in_transaction_id,
                                      v_createdby_bats_PT_id,
                                      pkg_db_billing_modify.gbv_PolicyTrx_EndSubType
                                 );                    
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.......... v_createdby_bats_id # ' || v_createdby_bats_id||
                    ', v_createdby_bats_PT_id' ||v_createdby_bats_PT_id
               );
          end if;                              
                              
     end if;
     
     if v_policy_transaction_id is not null or v_createdby_bats_PT_id is not null then
               
          if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         'checking if this transaction has touched any invoiced installment' 
                         || 'for transaction type:'|| v_policy_transaction_type
                         || ' PT id:'||v_policy_transaction_id
                         || ' BATS id: '||in_ba_trx_set_id
                         || ' v_createdby_bats_PT_id '||v_createdby_bats_PT_id
                              
                    );

          end if;   
          
          if  pkg_db_payplan_modify.fn_trx_starts_new_term(NVL(v_policy_transaction_type,0)) = pkg_os_constant.gBoolean_False then
 
               if NVL(v_policy_transaction_sub_type,0) <>gPolicyTrx_CPPSubTypeID
                    then
                    select count(1) into v_task_count from dragon_task where task_type_id=68748 and TASK_OBJECT_ID=   NVL(v_createdby_bats_PT_id,v_policy_transaction_id);                                        
                      
                    if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'As it is not a new term ytx, checking if invoiced installment amount is changes. v_task_count' ||v_task_count
                                        
                              );

                    end if;    
                                   
                    if NVL(v_task_count,0) = 0 then
                         
                         if pkg_db_functions.fn_cr_apply_at_inv_inst_tf(in_session_id, in_transaction_id, in_ba_trx_set_id) = 'T' then
                                   
                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'As invoiced installment is touched, creating task' 
                                   );

                              end if;          

                              pkg_db_object.sp_process_action_mini
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   2315248,
                                   NVL(v_createdby_bats_PT_id,v_policy_transaction_id),
                                   v_object_cache,
                                   v_outcome,
                                   v_action,
                                   v_action_object
                              );                                                         
                                   
                         end if;
                    end if;
               end if;
          
          end if;
     end if;
          
     --UTXPRODUCT-589 end
     -- Update NID as Post Processing OSPRODUCT-11765
     if v_financial_trx_tf = 'F'
     then
          for r_policy_nid_update in c_policy_nid_update
          loop
               if r_policy_nid_update.policy_term_id is not null -- UTPRODUCT-4851
               then
                    --LXPRODUCT-399
                    v_nid_pol_polterm_indx_str    :=   r_policy_nid_update.policy_id||'-'||r_policy_nid_update.policy_term_id;
                    v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_id          :=   r_policy_nid_update.policy_id;
                    v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_term_id     :=   r_policy_nid_update.policy_term_id;

                    --OSPRODUCT-19189 start
                    if r_policy_nid_update.INSTALLMENT is not null
                    then
                         for r_update_inst_and_polterm_dm in c_update_inst_and_polterm_dm(r_policy_nid_update.INSTALLMENT)
                         loop
                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '....Updating Installment DM ' || r_policy_nid_update.INSTALLMENT ||
                                        ', Policy Term '               || r_update_inst_and_polterm_dm.policy_term_id
                                   );
                              end if;

                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   r_update_inst_and_polterm_dm.installment_id,
                                   v_datamart_tf
                              );
                              v_policy_term_upt   :=   r_update_inst_and_polterm_dm.policy_term_id;
                         end loop;
                         if v_policy_term_upt is not null
                         then
                              pkg_os_datamart.sp_datamart_update_row
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_term_upt,
                                   v_datamart_tf
                              );
                         end if;
                    end if;
                    --OSPRODUCT-19189 ends
               end if;
          end loop;
          v_nid_pol_polterm_indx_str     :=     v_nid_pol_polterm_list.first;--LXPRODUCT-399
          while v_nid_pol_polterm_indx_str is not null --LXPRODUCT-399
          loop
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Looping Policy  ' || v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_id ||
                         ', Policy Term '       || v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_term_id
                    );
               end if;
               sp_update_next_invoice_date
               (
                    in_session_id,
                    in_transaction_id,
                    v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_id,
                    v_nid_pol_polterm_list(v_nid_pol_polterm_indx_str).policy_term_id,--OSPRODUCT-14316
                    in_ba_trx_set_id --OSPRODUCT-14316
               );
               v_nid_pol_polterm_indx_str := v_nid_pol_polterm_list.next(v_nid_pol_polterm_indx_str);
          end loop;
     end if;
     -- OSPRODUCT-11765
     --OSPRODUCT-8711 starts
     r_billing_account_list.delete; 
     r_billing_account_list(r_billing_account_list.count + 1):= in_billing_account_id;

     if r_billing_account_list.count > 0
     then

          sp_update_billingaccount_dm
          (
          in_session_id,
          in_transaction_id,
          r_billing_account_list
          );

     end if ;
     --OSPRODUCT-8711 End
     --OSPRODUCT-11365
     v_billing_acc_parent_id  :=   pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_billing_account_id
                                   );
                                        
     if v_billing_acc_parent_id is null
     then
          
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Billing Account Parent is null, transaction cannot be processd ' || in_billing_account_id
          );

          raise no_data_found;

     end if;
     --OSPRODUCT-11365

     --UTPRODUCT2-13
     if v_policy_transaction_id is not null then
          
          v_billing_method := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_policy_image_id,
                                   gbv_Policy_BillingMethod 
                              );	
          if NVL(v_billing_method,1) = 1 then                
               sp_set_invoice_preference
               (
                    in_session_id,
                    in_transaction_id,
                    v_policy_image_id,
                    v_policy_transaction_id,
                    v_policy_term_id,
                    v_policy_id,
                    v_policy_transaction_type,
                    v_ptp_payer_list
               );
          end if;
     
     end if;



exception
     
     when FICHANGE_NOT_BALANCED then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Billing Error: Unable to balance FIChange Delta amounts for Batch ID:'||in_ba_trx_set_id ||
               ' FIChange Total:' || v_fichange_total_amt ||
               ' FI Changes related to Billing Transaction are not created correctly. '
          );
          --Arun OSBILLING-7796 - Uncommenting Raise as instructed by Keerthi
          raise;     -- Rollback transaction  --OSBILLING-5994
     
     -- OSBILLING-5011 Start
     when POLICYTRX_NOT_BALANCED then
          --OSPRODUCT-2496 start
          /*pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Error: Unable to balance  Policy Transaction id '|| v_policy_transaction_id||
               ' change amount -  ' ||  v_policytrx_change_amount ||
               ' to the billingaccounttransactionset id ' || in_ba_trx_set_id ||
               ' created amount - ' || v_billingtrx_created_amount ||
               ' Perhaps, Billing financials are not created correctly. '
          );*/

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Billing Error: The financials created by Billing does not match with the Policy Transaction Change Amount. ' ||
               ' Policy Transaction id: '|| v_policy_transaction_id ||
               ' Policy Transaction change amount:  ' ||  v_policytrx_change_amount ||
               ' Billing Account Transaction Set id: ' || in_ba_trx_set_id ||
               ' Billing Created Amount: - ' || v_billingtrx_created_amount
          );
          --OSPRODUCT-2496 end
          raise;     -- Rollback transaction       --OSBILLING-5994  --OSBILLING-6208
          -- OSBILLING-5011 End
		  
	 --OSPRODUCT-25053 start 
     when COMMISSION_NOT_BALANCED then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Billing Error: The financials commission created by Billing does not match with the Policy Transaction Change Amount. ' ||
               ' Policy Transaction id: '|| v_policy_transaction_id ||
               ' Policy Transaction commission change amount:  ' ||  v_policytrx_commission_amount ||
               ' Billing Account Transaction Set id: ' || in_ba_trx_set_id ||
               ' Billing Created commission Amount: - ' || v_billingtrx_commission_amount
          );
          raise;
     --OSPRODUCT-25053 End
          
end sp_billing_trx_post_processing;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_billing_acct_trx_process
--
--   %USAGE
--        This is a controller procedure that calls various "process" actions based on the Batch Type
--          and performs common tasks (such as auditing) after the "process"
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_ba_trx_set_id                 BillingAccountTransactionSet ID
--   %PARAM    io_action_outcome_id          Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_billing_acct_trx_process
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_fitrxset_id                     in             object.object_id%type,    /* BillingAccountTransactionSet ID */
     io_object_cache                    in out nocopy  pkg_os_object_cache.t_object_cache,
     io_action_outcome_id               in out         outcome.outcome_id%type,
     in_current_date_time               in             date default null
)
is

     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_billing_acct_trx_process';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_batch_type_id                    object.object_id%type ;
     v_action_object_type               object_bv_value.business_variable_value%type ;
     v_billing_acc_id                   object.object_id%type ;
     v_current_date_time                date       := NVL(in_current_date_time,pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_fitrxset_id));
     v_datamart_tf                      char(1)    := 'T';
     v_fichange_total_amt               number;
	 v_createdbats_indx                 number;
     v_billingaccttrxset_id             object.object_id%type;
     v_created_batrxset_id              object.object_id%type;
     v_policy_id                        object.object_id%type;
     v_override_ba_id                   object.object_id%type;
     v_master_policy_id                 object.object_id%type;
     v_policy_image_id                  object.object_id%type;
     v_policy_term_id                   object.object_id%type;
     v_ptp_withdrawal_day               object_bv_value.business_variable_value%type ;
     v_term_withdrawal_day              object_bv_value.business_variable_value%type ;
     v_target_bats_list                 pkg_os_object.t_object_list;
      var_trx_is_suspended number:=1; --OSBILLING-7495
	  
     v_billing_acc_parent_id            object.object_id%type;--OSPRODUCT-11365
begin

     io_action_outcome_id     :=      pkg_os_constant.gOutcome_OK;

     v_action_object_type     :=      pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_fitrxset_id,
                                           pkg_os_constant_bv.gbv_GenObjObjectType --210149
                                      ); --get action object type
      


     if v_action_object_type = pkg_os_constant.gobjType_PolicyTransaction --629
     then

          v_batch_type_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_fitrxset_id,
                                   pkg_os_constant_bv.gbv_PolicyTranType
                              );

          v_master_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_fitrxset_id,
                                        pkg_os_constant.gObjType_Policy
                                   );

          v_override_ba_id := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_master_policy_id,
                                        32666846
                                   );

     else
          
          begin
               
               select
                    bats.batch_type_id,
                    bats.parent_billing_account_id
               into
                    v_batch_type_id,
                    v_billing_acc_id
               from
                    dragon_billingaccounttrxset bats
               where
                    bats.billingaccounttrxset_id = in_fitrxset_id;
               
          exception
               
               when others then                    
                    null;
                    
          end;
          
          if v_batch_type_id is null then
               
               v_batch_type_id := pkg_os_object_io.fn_object_bv_get
                                  (
                                        in_session_id,
                                        in_transaction_id,
                                        in_fitrxset_id,
                                        gbv_FITrxSet_BatchType
                                  );
                                  
          end if;         

          -- Get the parent Billing Account object id of BillingAccountTransactionSet object
          if v_billing_acc_id is null then
               
               v_billing_acc_id := pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_fitrxset_id
                                   );
                                   
          end if;
		  
          --OSPRODUCT-11365
          v_billing_acc_parent_id  :=   pkg_os_object.fn_object_parent_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_billing_acc_id
                                        );
                                        
          if v_billing_acc_parent_id is null
          then
          
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    ' Billing Account Parent is null, transaction cannot be processd ' || v_billing_acc_id
               );

               raise no_data_found;

          end if;
          --OSPRODUCT-11365

          v_billingaccttrxset_id := in_fitrxset_id;

     end if;

     if v_batch_type_id is null
     then

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' The input billingtransaction cannot be processd as the batch type is null ' || in_fitrxset_id
          );

          raise no_data_found;

     else

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '|||||| Entering to process the Batch ID: '||in_fitrxset_id ||
                    ' with Batch Type:' || v_batch_type_id
               );

          end if;

          v_billingaccttrxset_id := in_fitrxset_id;
          --OSBILLING-7495
          -- If the below function output 1, then suspendion is not there and we are good to go ahead  else it will give a splat

          -- OSPRODUCT-7572 - KR
          --var_trx_is_suspended := pkg_db_functions.fn_is_batch_trx_suspended(in_session_id,in_transaction_id,in_fitrxset_id,v_action_object_type,v_batch_type_id);
          if v_batch_type_id not in (gBatch_AutoCreditApply ,pkg_db_cash_apply.gBatch_AutoCashApply )  -- KR 10/15
          then
            var_trx_is_suspended := pkg_db_functions.fn_is_batch_trx_suspended(in_session_id,in_transaction_id,in_fitrxset_id,v_action_object_type,v_batch_type_id);
          else 
            var_trx_is_suspended := 1; 
          end if;
          -- end OSPRODUCT-7572
		
          if var_trx_is_suspended = 1 then
               
              --OSPRODUCT-7572
               /*if pkg_db_suspension.fn_db_suspend_billing_trx
                   (
                        in_session_id,
                        in_transaction_id,
                        in_fitrxset_id    -- BillingAccountTransactionSet ID
                   ) = 0
               then*/
               if (v_batch_type_id not in (gBatch_AutoCreditApply ,pkg_db_cash_apply.gBatch_AutoCashApply ) )
                  or
                  (
                       pkg_db_suspension.fn_db_suspend_billing_trx
                       (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id    -- BillingAccountTransactionSet ID
                       ) = 0
                  ) -- KR 10/15
               -- end OSPRODUCT-7572
               then
                   
                   if v_session_control.gLogging_Full then

                        pkg_os_logging.sp_log
                        (
                             in_session_id,
                             in_transaction_id,
                             v_procedure_name,
                             '|||||| Entering after the suspension Batch ID: '||in_fitrxset_id ||
                             ' with Batch Type:' || v_batch_type_id
                        );

                   end if;

                   -- OSBILLING-234
                   if ( v_batch_type_id in
                        (
                             pkg_db_cashpost.gBatchType_SinglePay,
                             pkg_db_cashpost.gBatchType_ClaimTrxBatch,
                             8004, -- OSCLAIMDEV-971
                             gBatchType_ScheduledEFT,   --DDWIDEV-450
                             gBatchType_ScheduledCC   --DDWIDEV-450
                        )

                   ) 
                   then                        

                        pkg_db_cashpost.sp_cashpost_trx_process
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_action_outcome_id,
                             io_object_cache,
                             v_current_date_time
                        );


                   /* elsif (v_batch_type_id in
                           (
                                pkg_db_cashpost.gBatchType_CheckBatchPay,
                                pkg_db_cashpost.gBatchType_CreditBatchPay,
                                pkg_db_cashpost.gBatchType_EFTBatchPay
                           )
                   )then
                   

                        pkg_db_cashpost.sp_batch_payment_process
                        (
                         in_session_id,
                         in_transaction_id,
                         in_fitrxset_id,
                         io_action_outcome_id,
                         io_object_cache,
                         v_current_date_time
                        );*/

                   elsif ( v_batch_type_id = pkg_db_cash_apply.gBatch_AutoCashApply ) then
                        
                        -- OSBILLING-3884

                        /* pkg_db_cash_apply.sp_cashprof_apply_duetype
                        (
                        in_session_id,
                        in_transaction_id,
                        v_billing_acc_id,
                        in_fitrxset_id,  --in_billing_trx_set_id
                        io_action_outcome_id
                        ); */
                        pkg_db_cash_apply.sp_cash_apply_batch_process
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_action_outcome_id,
                             v_current_date_time
                        );
                        -- OSBILLING-3884
                   
                   elsif ( v_batch_type_id = pkg_db_credit_apply.gBatch_ManualCreditApply ) then
                        
                        pkg_db_credit_apply.sp_rollup_credit_apply
                        (
                           in_session_id,
                           in_transaction_id,
                           in_fitrxset_id,
                           io_object_cache,
                           io_action_outcome_id,
                           v_current_date_time
                        );

                   
                   elsif ( v_batch_type_id = pkg_db_cash_apply.gBatch_ManualCashApply ) then
                        
                        if v_session_control.gLogging_Full then

                             pkg_os_logging.sp_log
                             (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Invoking pkg_db_cash_apply.sp_rollup_cash_apply'
                             );

                        end if;


                        pkg_db_cash_apply.sp_rollup_cash_apply
                        (
                              in_session_id,
                              in_transaction_id,
                              in_fitrxset_id,
                              io_object_cache,
                              io_action_outcome_id
                        );
                        
                        /*
                        pkg_db_cash_apply.sp_cash_apply_batch_process
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_action_outcome_id,
                             v_current_date_time
                        );
                        */--OSBILLING-3884
                        /*OSBILLING-3884
                   elsif ( v_batch_type_id = pkg_db_write_off.gBatch_AutoWriteOff ) then

                        pkg_db_write_off.sp_auto_write_off
                        (
                             in_session_id,
                             in_transaction_id,
                             v_billing_acc_id,
                             io_action_outcome_id,
                             v_current_date_time
                        );
                        
                        OSBILLING-3884 */
                        
                   elsif ( v_batch_type_id = pkg_db_write_off.gBatch_ManualWriteOff ) then

                        pkg_db_write_off.sp_manual_write_off
                        (
                             in_session_id,
                             in_transaction_id,
                             io_object_cache,
                             in_fitrxset_id,
                             io_action_outcome_id,
                             v_current_date_time
                        );

                   
                   elsif v_batch_type_id in ( pkg_db_cash_transfer.gBatch_CashTransferBatch , pkg_db_credit_apply.gBatch_CreditTransfer)   then

                        pkg_db_cash_transfer.sp_process_cash_transfer
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_object_cache,
                             io_action_outcome_id,
                             v_current_date_time,
                             null,
                             v_target_bats_list
                        );

                   
                   elsif ( v_batch_type_id = pkg_db_billing_payable.gBatch_PayablesDisbBatch) then     -- Manual Disburse

                        pkg_db_billing_payable.sp_disburse_batch_process
                        (
                             in_session_id,
                             in_transaction_id,
                             in_billAccTRXset_id   => in_fitrxset_id,
                             in_object_cache       => io_object_cache,
                             io_action_outcome_id  => io_action_outcome_id
                        );

                   
                   elsif ( v_batch_type_id = pkg_db_adhoc_journal.gBatch_Adhoc_Journal) then

                        pkg_db_adhoc_journal.sp_create_adhoc_journal
                        (
                             in_session_id,
                             in_transaction_id,
                             io_object_cache,
                             in_fitrxset_id ,
                             v_current_date_time,
                             io_action_outcome_id
                        );

                   
                   elsif pkg_db_object.fn_batrxset_type_in_set (v_batch_type_id, gPoltrxSetId) = 'T'
                        /* elsif ( v_batch_type_id
                        in
                        (
                              gBillTrxType_NewBusiness ,
                              gBillTrxType_Endorsement,
                              gBillTrxType_CancelInsured,
                              gBillTrxType_CancelNonPay,
                              gBillTrxType_Reinstatement,
                              gBillTrxType_Renewal,
                              gBillTrxType_Rewrite,
                              gBillTrxType_Audit,
                              gBillTrxType_ChngWithDrawalDte,
                              gBillTrxType_NBRewrite,
                              gBillTrxType_RollBack
                            )
                        )*/
                   then

                        -- #MP : Set the Multipayer mode flag on Policy level : copy the same from Policy NB image
                        --
                        pkg_db_multipayer.sp_mp_mode_policy_merge
                        (
                             in_session_id      => in_session_id,
                             in_transaction_id  => in_transaction_id,
                             in_policy_id       => v_master_policy_id,
                             in_policy_trx_id   => in_fitrxset_id
                        );
                        -- / #MP

                        if v_batch_type_id not in ( gBillTrxType_RollBack, gBillTrxType_ChngWithDrawalDte ) then
                             
                             begin
                                  
                                  select 
                                       pt.ptp_id,
                                       pt.policy_term_id
                                  into
                                       v_policy_image_id,
                                       v_policy_term_id
                                  from
                                       dragon_policy_trx pt
                                  where
                                       pt.policy_trx_id = in_fitrxset_id;
                                       
                             exception
                                  
                                  when others then
                                       null;
                             end;
                             
                             if v_policy_image_id is null then
                                  
                                  v_policy_image_id := pkg_os_object_io.fn_object_bv_get
                                                        (
                                                             in_session_id,
                                                             in_transaction_id,
                                                             in_fitrxset_id,
                                                             gbv_PolicyTrx_RefCoverages
                                                        );
                                                        
                             end if;
                             
                             if v_policy_term_id is null then

                                  v_policy_term_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            in_fitrxset_id,
                                                            gbv_PolicyTrx_RefPolicyTerm
                                                       );
                                                       
                             end if;

                             if v_policy_image_id is not null then
                             
                                  v_ptp_withdrawal_day := pkg_os_object_io.fn_object_bv_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,
                                                                v_policy_image_id,
                                                                pkg_db_payplan_modify.gbv_PTP_Preferred_Pay_Day
                                                           );

                                  pkg_os_object_io.sp_object_bv_set
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       v_policy_term_id,
                                       pkg_db_payplan_modify.gbv_PolicyTerm_pref_PayDay,
                                       v_ptp_withdrawal_day
                                  );

                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_procedure_name,
                                             'Setting PTP withdrawal day to Policy term. PTP ID: ' || v_policy_image_id ||
                                             ' Policy Term ID: '                                   || v_policy_term_id  ||
                                             ' PTP preferred withdrawal Day: '                     || v_ptp_withdrawal_day
                                        );

                                  end if;

                             end if;

                        end if;

                        pkg_db_billing_modify.sp_financial_trx_create
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_action_outcome_id,
                             in_current_date_time,
                             v_override_ba_id
                        );

                        -- Get the billingaccounttrxset created in financial transaction creation procedure
                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_fitrxset_id,
                                                       pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                  );

                        -- Get the parent Billing Account object id of BillingAccountTransactionSet object
                        v_billing_acc_id := pkg_os_object.fn_object_parent_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_billingaccttrxset_id
                                            );

                        -- get the withdrawal day from ptp image
                        -- copy it to the term using belongs to reference (exclude rollback tx)


                        -- Suspense or Resume Policy in case of OOS Endorsement processing
                        pkg_db_suspension.sp_db_policy_trx_suspension
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_object_cache,
                             io_action_outcome_id
                        );


                   elsif ( v_batch_type_id
                           in
                           (
                                pkg_db_stmt_acct_rollup.g_SetType_InvceAcctRollupStmt,
                                pkg_db_stmt_acct_rollup.g_SetType_LteNot1AcctRolupStmt,
                                pkg_db_stmt_acct_rollup.g_SetType_LteNot2AcctRolupStmt,
                                pkg_db_stmt_acct_rollup.g_SetType_AccountRollUpInvoice , -- 9804
								pkg_db_stmt_acct_rollup.g_SetType_ProfUpdAcctRolupStmt -- 9806 OSPRODUCT-6975
                           )
                   )
                   then
                        
                        pkg_db_stmt_acct_rollup.sp_account_rollup_stmt
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             io_action_outcome_id
                        );

                   
                   elsif v_batch_type_id in 
                         (
                              pkg_db_late_process.gSetType_LateNotice 
                              --pkg_db_late_process.gTrxType_FirstReminderNotice,  OSPRODUCT-14241 commented the enums
                              --pkg_db_late_process.gTrxType_SecondReminderNotice,  OSPRODUCT-14241
                              --pkg_db_late_process.gSetType_LateNotice2 -- ARUN - OSBILLING-5513 - Added for LateNotice2 transaction OSPRODUCT-14241
                         )
                   then
                        
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        v_billing_acc_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                gbv_responsible_billingacct_id
                                            );
                                            
                        -- Hiscox version
                        /*pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_id,
                              --pkg_db_late_process.gSetType_LateNotice, -- 5146
                              v_batch_type_id,
                              401,
                              io_action_outcome_id,
                              null,
                              v_policy_id,
                              in_fitrxset_id,
                              v_current_date_time
                        );*/
                        -- Product version
                        pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_id,
                              pkg_db_late_process.gSetType_LateNotice, -- 5146
                              --v_batch_type_id, --OSPRODUCT-6970
                              401,
                              io_action_outcome_id,
                              null,
                              v_policy_id,
                              in_fitrxset_id,
                              v_current_date_time
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_fitrxset_id,
                                                        pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                   );

                   elsif v_batch_type_id in  --OSPRODUCT-14241
                         (
                              pkg_db_late_process.gSetType_LateNotice2 
                         )
                   then
                   
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        v_billing_acc_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                gbv_responsible_billingacct_id
                                            );
                                            
                         pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_id,
                              pkg_db_late_process.gSetType_LateNotice2, -- 8646
                              401,
                              io_action_outcome_id,
                              null,
                              v_policy_id,
                              in_fitrxset_id,
                              v_current_date_time
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_fitrxset_id,
                                                        pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                   ); 
                   elsif v_batch_type_id in   --OSPRODUCT-14241
                         (
                              pkg_db_late_process.gTrxType_FirstReminderNotice
                         )
                   then
                   
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        v_billing_acc_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                gbv_responsible_billingacct_id
                                            );
                                            
                         pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_id,
                              pkg_db_late_process.gTrxType_FirstReminderNotice, -- 
                              401,
                              io_action_outcome_id,
                              null,
                              v_policy_id,
                              in_fitrxset_id,
                              v_current_date_time
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_fitrxset_id,
                                                        pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                   ); 
                   elsif v_batch_type_id in     --OSPRODUCT-14241
                         (
                              pkg_db_late_process.gTrxType_SecondReminderNotice
                         )
                   then
                   
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        v_billing_acc_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                gbv_responsible_billingacct_id
                                            );
                                            
                         pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                              in_session_id,
                              in_transaction_id,
                              v_billing_acc_id,
                              pkg_db_late_process.gTrxType_SecondReminderNotice, -- 
                              401,
                              io_action_outcome_id,
                              null,
                              v_policy_id,
                              in_fitrxset_id,
                              v_current_date_time
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_fitrxset_id,
                                                        pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                   );
												   
                   elsif v_batch_type_id = pkg_db_late_process.gTrxType_PendCancellation then
				   
                        
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        v_billing_acc_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_policy_id,
                                                gbv_responsible_billingacct_id
                                            );


                        pkg_db_stmt_acct_rollup.sp_rollup_transaction_create
                        (
                             in_session_id,
                             in_transaction_id,
                             v_billing_acc_id,
                             pkg_db_late_process.gTrxType_PendCancellation ,-- 4212
                             401,
                             io_action_outcome_id,
                             null,
                             v_policy_id,
                             in_fitrxset_id,
                             v_current_date_time
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_fitrxset_id,
                                                       pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                  );

                   
                   elsif v_batch_type_id = pkg_db_late_process.gTrxType_RescPendCancel then
                        
																				   
				   
                        v_policy_id := pkg_os_object.fn_object_parent_get
                                       (
                                             in_session_id,
                                            in_transaction_id,
                                            in_fitrxset_id
                                       );

                        pkg_db_late_process.sp_rescind_noic_batch_create
                        (
                             in_session_id,
                             in_transaction_id,
                             in_fitrxset_id,
                             v_policy_id,
                             io_action_outcome_id
                        );

                        v_billingaccttrxset_id := pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_fitrxset_id,
                                                       pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet
                                                  );

                        v_billing_acc_id := pkg_os_object.fn_object_parent_get
                                            (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_billingaccttrxset_id
                                            );

                         elsif v_batch_type_id = pkg_db_auto_funds_transfer.gFITrxType_CCExpiry   --UTXPRODUCT-809
                         then
                         
                              pkg_db_auto_funds_transfer.sp_cc_expiry_notice_create
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   sysdate,
                                   v_billingaccttrxset_id,
                                   io_action_outcome_id
                              );
                         
                    end if;

                   if v_session_control.gLogging_Full then

                        pkg_os_logging.sp_log
                        (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...... The outcome from processing billing trx '|| io_action_outcome_id
                        );

                   end if;


                   if  -- io_action_outcome_id <> 35546  -- OSBILLING-3884 changingt o check if outcome is OK
                       --OSBILLING-5325 - Added v_billingaccttrxset_id not null check
                       (
                            io_action_outcome_id = pkg_os_constant.gOutcome_OK
                            and 
                            v_billingaccttrxset_id is not null
                       )
                   then
                        
                        if v_session_control.gLogging_Full then

                             pkg_os_logging.sp_log
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  '...... The outcome is OK. Performing common post processing activitites on the  billing batch ' || v_billingaccttrxset_id
                             );

                        end if;

                        pkg_db_object.sp_create_relatedPolicyEntity
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billingaccttrxset_id

                         );						
						
						--UTPRODUCT-3610
                        pkg_cs_db_billing.sp_create_relatedPolicyEntity
                        (
                             in_session_id,
                             in_transaction_id,
                             v_billingaccttrxset_id
                             
                        );
                        
                        sp_billing_trx_post_processing
                        (
                             in_session_id,
                             in_transaction_id,
                             v_billing_acc_id,
                             v_billingaccttrxset_id,
                             io_action_outcome_id,
                             v_current_date_time
                        );

                        --
                        -- Verify if the batch has created any other batch ; then invoke post processing for the created batch as well
                        --

                        v_created_batrxset_id := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id ,
                                                      v_billingaccttrxset_id,
                                                      gbv_FITrxSet_RefCreatedBatch
                                                 );

                        --OSBILLING-7323 set date of interest
						pkg_os_logging.sp_log
                        (
                             in_session_id,
                             in_transaction_id,
                             'pkg_db_date_of_interest',
                             'Calling DOI for v_action_object_type '||v_action_object_type ||' Policy Trasaction '||
                             pkg_os_constant.gobjType_PolicyTransaction||
                             ' with v_batch_type_id:' || v_batch_type_id||
                             'Policy id '||v_policy_id||
                             ' in_fitrxset_id '||in_fitrxset_id
                        );
                        
                        --call date of interest for all the policy transactions
                        if v_action_object_type = pkg_os_constant.gobjType_PolicyTransaction --629
                        then
                             
                             v_policy_id := pkg_os_object_search.fn_object_get_parent_of_type
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_fitrxset_id,
                                                 pkg_os_constant.gObjType_Policy
                                            );
                                            
                             pkg_os_logging.sp_log
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  'Calling DOI for v_action_object_type '||v_action_object_type ||
                                  ' with v_batch_type_id:' || v_batch_type_id||
                                  'Policy id '||v_policy_id||
                                  ' in_fitrxset_id '||in_fitrxset_id
                             );
                             
                             --update date of interest bv/datamart
                             pkg_db_date_of_interest.sp_calc_date_of_interest
                             (
                                  in_session_id       => in_session_id,
                                  in_transaction_id   => in_transaction_id,
                                  in_batch_type_id    => v_batch_type_id,
                                  in_policy_id        => v_policy_id-- OSPRODUCT-14577
                             );

                        end if;

                        if v_batch_type_id = gBillTrxType_Invoice then
                             
						--get policy id
						v_policy_id := pkg_os_object_io.fn_object_bv_path_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 in_fitrxset_id,
                                                 gbvPath_account_policy
                                            );
                         
						pkg_os_logging.sp_log
						(
                                   in_session_id,
                                   in_transaction_id,
                                   'sach_pkg_db_object',
                                   'Calling DOI for Invoice v_action_object_type '||v_action_object_type ||
                                   ' with v_batch_type_id:' || v_batch_type_id||
                                   'Policy id '||v_policy_id||
                                   ' in_fitrxset_id '||in_fitrxset_id
						);

						--update date of interest bv/datamart
						pkg_db_date_of_interest.sp_calc_date_of_interest
						(
                                  in_session_id         => in_session_id,
                                  in_transaction_id     => in_transaction_id,
                                  in_batch_type_id      => v_batch_type_id,
                                  in_policy_id          => v_policy_id,
                                  -- -- OSPRODUCT-13422
                                  -- OSPRODUCT-14577 NO CHANGE
                                  in_billing_account_id => pkg_os_object.fn_object_parent_get
                                                            (
                                                                 in_session_id,
                                                                 in_transaction_id,
                                                                 in_fitrxset_id
                                                            )
						);

                        end if;
                        --END OSBILLING-7323

                        --PMADEV-2536 Added condition to check that batch is processed.
                        if v_created_batrxset_id is not null and pkg_os_object.fn_object_state_get(in_session_id,in_transaction_id,v_created_batrxset_id  ) = gBatchStatus_Processed
                        then
                             
                             if v_session_control.gLogging_Full then

                                pkg_os_logging.sp_log
                                (
                                      in_session_id,
                                      in_transaction_id,
                                      v_procedure_name,
                                      '...... The batch ' || v_billingaccttrxset_id || ' created the batch ' || v_created_batrxset_id ||
                                      ' Performing common post processing activitites on the created  batch '
                                );

                             end if;


                             if v_batch_type_id in ( pkg_db_cash_transfer.gBatch_CashTransferBatch , pkg_db_credit_apply.gBatch_CreditTransfer) then
                                  
                                  v_createdbats_indx := v_target_bats_list.first;

                                  while (v_createdbats_indx is not null)
                                  loop

                                       sp_billing_trx_post_processing
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            pkg_os_object_search.fn_object_get_parent_of_type
                                            (
                                            in_session_id,
                                            in_transaction_id,
                                            v_target_bats_list(v_createdbats_indx),
                                            gObjType_BillingAccount
                                            ),
                                            v_target_bats_list(v_createdbats_indx),
                                            io_action_outcome_id,
                                            v_current_date_time
                                       );
                                       
                                       v_createdbats_indx := v_target_bats_list.next(v_createdbats_indx);
                                  
                                  end loop;
                                  
                             else
                                  
                                  sp_billing_trx_post_processing
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       pkg_os_object_search.fn_object_get_parent_of_type
                                       (
                                             in_session_id,
                                             in_transaction_id,
                                             v_created_batrxset_id,
                                             gObjType_BillingAccount
                                       ),
                                       v_created_batrxset_id,
                                       io_action_outcome_id,
                                       v_current_date_time
                                  );

                             end if;
                        
                        end if;
                        
                        --2017-09-19 Cheryl did not create a BATS but will still continue
                   elsif io_action_outcome_id = pkg_os_constant.gOutcome_UserInputInvalid then
                        
                        io_action_outcome_id := pkg_os_constant.gOutcome_OK;

                   end if;

              else
                   
                   io_action_outcome_id := 48446;

              end if;
              -- io_action_outcome_id := pkg_os_constant.gOutcome_OK;
          end if;
     
     end if;
	 
end sp_billing_acct_trx_process;



-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitransaction_process
--
--   %USAGE
--        Processes the given FITransaction
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_fitransaction_id           FITransaction ID
--   %PARAM    io_action_outcome_id          Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_fitransaction_process
(
     in_session_id                    in          object.object_id%type,
     in_transaction_id               in          object.object_id%type,
     in_billing_trx_set_id          in          object.object_id%type,
     in_fitransaction_id               in          object.object_id%type,
     io_action_outcome_id          in out      outcome.outcome_id%type,
     in_current_date_time          in          date default null,
     in_update_counts_tf               in          char default 'T'
)
is

     v_procedure_name                    constant system_log.program_name%type        := pkg_name||'sp_fitransaction_process';
     v_session_control                     pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_batch_trx_count          number;
     v_batch_trx_amt          number;

     v_datamart_tf               char(1)    := 'T';

     v_fi_trx_amt               number;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Processing FITransaction ID: '||in_fitransaction_id ||
               ' for Batch ID:' || in_billing_trx_set_id
          );

     end if;

     if (in_update_counts_tf = 'T')
     then

          -- Get FITrx counts from Batch
          v_batch_trx_count := to_number(nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_billing_trx_set_id, gbv_FITrxSet_TotalItems), 0));
          v_batch_trx_amt := to_number(nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_billing_trx_set_id,  gbv_FITrxSet_TotalAmount), 0));

          -- Get Transaction Amount
          v_fi_trx_amt := nvl(pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_fitransaction_id, gbv_FITrx_Amount), 0);

          -- Update counts on Batch
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_billing_trx_set_id, gbv_FITrxSet_TotalItems, v_batch_trx_count + 1);
          pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_billing_trx_set_id, gbv_FITrxSet_TotalAmount, v_batch_trx_amt + v_fi_trx_amt);

     end if;

     -- Set status of FITransaction to Processed
     pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, in_fitransaction_id, pkg_os_constant_bv.gbv_GenObjObjectState, gFITrxStatus_Processed);

      --- OSBILLING-4302 added below code
      pkg_os_object_io.sp_object_bv_set
      (
          in_session_id,
          in_transaction_id,
          in_fitransaction_id,
          gbv_FITrx_ProcessDate, -- 29708446
          to_char(NVL(in_current_date_time, pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_fitransaction_id )), pkg_os_constant.DragonDateFormatDefault )  --OSBILLING-7829
      );
      --- OSBILLING-4302 end

     -- Fetch and set the Accounting Period  --OSBILLING-767
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_fitransaction_id,
          gbv_FITrx_AccntingPeriod,
          pkg_db_functions.fn_get_fitransaction_acct_prd(in_session_id,in_transaction_id , in_fitransaction_id)
     );
     -- Update the FITransaction Datamart
     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_fitransaction_id, v_datamart_tf);

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_fitransaction_process;

-------------------------------------------------------------------------------------------------------------------------------------------------
--OSPRODUCT-6016 Start
procedure sp_object_unlock
(
     in_session_id       object.object_id%type,
     in_transaction_id   object.object_id%type,
     in_object_id        object.object_id%type,
     in_action_id        action.action_id%type
)
is
     v_procedure_name    constant       system_log.program_name%type  := pkg_name||'sp_object_unlock';
     v_unlock_tf    char(1) := null;

begin

     --
     --   If the action object type is UserSession, release all locks for this usersession
     --

     if  pkg_os_action.fn_action_row(in_action_id).object_type_id = pkg_os_constant.gobjType_UserSession then

          v_unlock_tf := 'T';

     else

          --
          --   Check metadata for action to set flag to release lock
          --

          v_unlock_tf := pkg_os_action.fn_action_row(in_action_id).action_unlock_object_tf;

     end if;


     if v_unlock_tf = 'T' then

          begin

               pkg_os_lock.sp_session_object_unlock
               (
                    in_session_id,
                    in_transaction_id,
                    in_action_id
               );

          exception
               when others then
                    -- unconditionally log the exception, but continue
                    pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                         'Error while attempting: delete from wf_tmp_object_lock where session_id = '
                         ||nvl(in_session_id,'NULL')
                         ||' . '||SQLERRM);

          end;

     end if;

end sp_object_unlock;
--OSPRODUCT-6016 End

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_process_action_mini
--
--   %USAGE
--        This is a mini version of sp_process_action. It will execute DB actions only
--          and ends when a Page or a MT action is found
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_action_id                      Action ID
--   %PARAM    io_action_outcome_id          Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_process_action_mini
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_action_id                  in             object.object_id%type,
     in_action_object_id           in             object.object_id%type,
     io_object_cache               in out nocopy  pkg_os_object_cache.t_object_cache,
     io_action_outcome_id          in out         outcome.outcome_id%type,
     out_action_id                 out            object.object_id%type,
     out_action_object_id          out            object.object_id%type
)
is

     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_process_action_mini';

     v_message_list                     pkg_os_message.t_message_list;
     v_in_action_record                 action%rowtype := pkg_os_action.fn_action_row( in_action_id );
     v_procedure_start_time             number := dbms_utility.get_time;

     v_current_date_time                date       := pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_action_object_id);
     v_datamart_tf                      char(1)    := 'T';
     v_procedure_action_start           number    := v_procedure_start_time;--OSPRODUCT-5323
	 
     v_lock_user_id                     object.object_id%type                        := null;--OSPRODUCT-6016
     v_object_cache                     pkg_os_object_cache.t_object_cache;--OSPRODUCT-6016
     v_ui_session_tf                    lookup_list_value.lookup_enum%type;--OSPRODUCT-6016
     v_executed_action_id               action.action_id%type      := in_action_id;--OSPRODUCT-6016
     v_executed_outcome_id              outcome.outcome_id%type    := pkg_os_constant.gOutcome_OK;--OSPRODUCT-6016
     OBJECT_LOCK_ERRNUM		            constant 		number(12) :=	-20999;--OSPRODUCT-6016
     v_rslt_action_obj_type_id          object_type.object_type_id%type;--OSPRODUCT-6016
     v_rslt_action_obj_type             object_type.object_type_name%type;--OSPRODUCT-6016
     --v_object_id                      object.object_id%type  := null; --OSPRODUCT-15640
     --v_object_lock_status             char; --OSPRODUCT-15640
     v_reset_mini_wf_flag               char(1) := 'F'; --OSPRODUCT-17852

begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Executing mini-workflow using Action ID: '||in_action_id ||
               ' Action Object ID:' || in_action_object_id
          );

     end if;
	
	-- Start the mini wf execution
     -- UTPRODUCT-4270
     if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,gbv_UserSessionMiniWf) is null then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               pkg_os_constant_enum.gBoolean_True
          );
          
          v_reset_mini_wf_flag := 'T';
          
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '.. Mini workflow flag set to yes..' || v_reset_mini_wf_flag);

          end if;
          
     end if;

     --OSPRODUCT-6016 Start
     v_ui_session_tf := pkg_os_object_io.fn_object_bv_get ( in_session_id,in_transaction_id,  in_session_id, pkg_os_constant_bv.gbv_SessionCreatedByUI_TF);

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, 'UI Session T/F :'||   v_ui_session_tf );

     end if;
     --OSPRODUCT-6016 End

     --
     --   Now check whether the requested action can be executed ...
     --

     if   pkg_os_action_validate.fn_validate_before_proceeding( in_session_id, in_transaction_id, in_action_id, in_action_id )  = pkg_os_constant.gValidation_Semantic and
          pkg_os_wf_rules.fn_semantic_check_rules( in_session_id, in_transaction_id, io_object_cache, null, in_action_id, in_action_object_id, v_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F' then

          -- Exit without executing action
          io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
		
		-- UTPRODUCT-4270
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );
		
          return;

     else

          if v_session_control.gLogging_Performance
          then

               pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed pre-action validation rules.' );

          end if;

          --
          --   We need to execute the incoming action if it a database command ...
          --

          if io_action_outcome_id = pkg_os_constant.gOutcome_UserInputInvalid then

               pkg_os_message.sp_message_add( v_message_list, pkg_os_message.gmsg_NoObjectSelected );
			
			-- UTPRODUCT-4270
               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_session_id,
                    gbv_UserSessionMiniWf,
                    null
               );

               -- Exit without executing action
               return;

          elsif v_in_action_record.action_type_id = pkg_os_constant.gActionType_SingularDatabase then

               --
               --   OK, let us execute the pre-action initialization rules, now that we know that we can legally
               --   execute this action.
               --

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Pre Initialization Rules for Action:'||in_action_id );

               end if;

               pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, in_action_id, in_action_object_id, pkg_os_constant.gActiRuleTime_Pre,io_object_cache );

               if v_session_control.gLogging_Performance
               then

                    pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed pre-action initialization rules.' );

               end if;

               --
               --   Database command ... execute this ...
               --

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Executing requested action:'||pkg_os_action.fn_action_row( in_action_id ).action_name||'('||in_action_id||')' );

               end if;

               pkg_os_action.sp_execute_action
               (
                    in_session_id,
                    in_transaction_id,
                    io_object_cache,
                    v_message_list,
                    in_action_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Action Outcome:'||io_action_outcome_id );

               end if;

               if v_session_control.gLogging_Performance
               then

                    pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed action - '||v_in_action_record.action_name||' ('||in_action_id||')' );

               end if;

               --
               --   If there are issues with user input ... replay the prior page ...
               --

               if io_action_outcome_id = pkg_os_constant.gOutcome_InternalError  then

                    --
                    --   If there is an internal error (programming bug) - put out the appropriate
                    --   message. Otherwise, if 2the action has not already inserted a presumably
                    --   meaningful error message, insert a catchall.
                    --

                    pkg_os_message.sp_message_add( v_message_list, pkg_os_message.gmsg_InternalError );
				
				-- UTPRODUCT-4270
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_session_id,
                         gbv_UserSessionMiniWf,
                         null
                    );

                    -- Exit and rollback
                    return;

               else

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Post Initialization Rules for Action:'||in_action_id );

                    end if;

                    pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, in_action_id, in_action_object_id, pkg_os_constant.gActiRuleTime_Post,io_object_cache );

                    if v_session_control.gLogging_Performance
                    then

                         pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed post-action initialization rules.' );

                    end if;

               end if;

          end if;

     end if;

     declare

          v_next_action_record          action%rowtype;
          v_current_action_record       action%rowtype;
          v_next_action_found_tf        char(1) := 'T';
          v_result_action_id            action.action_id%type := null;
          v_result_action_object_id     object.object_id%type := null;
          v_replay_tf                   char(1) := 'F';

          v_action_id                   action.action_id%type := in_action_id;
          v_action_object_id            object.object_id%type := in_action_object_id;
          v_lock_failure                char(1);--OSPRODUCT-6016

     begin

          while v_result_action_id is null loop     --and v_replay_tf = 'F' loop

               --- OSPRODUCT-5323 Start
               --insert the last executed action into DRAGON_TRANSACTION_ACTIONS
			   
               v_lock_failure := 'F';  -- reset after each cycle--OSPRODUCT-6016

               pkg_os_wf_session.sp_insert_dt_actions
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_action_Start,
                    nvl(v_result_Action_id,v_action_id),
                    io_action_outcome_id
               );

               v_procedure_action_start := dbms_utility.get_time;
               --- OSPRODUCT-5323 End
			   
               --
               --   We have an action, with an outcome ... check to see whether there are any outcome modifier
               --   rules ... if so, execute them, and get the modified outcome. [@@@]
               --

               --
               --
               --   OK, lets figure out what to do next ...
               --

               begin

                    pkg_os_wf.sp_get_next_action
                    (
                         in_session_id,
                         in_transaction_id,
                         null,     --v_context_action_id,
                         null,     --v_context_object_id,
                         v_action_id,
                         v_action_object_id,
                         io_action_outcome_id,
                         v_result_action_id,
                         v_result_action_object_id,
                         v_message_list
                    );


                    v_next_action_found_tf := 'T';

                    v_next_action_record := pkg_os_action.fn_action_row(v_result_action_id);

                    --OSPRODUCT-6016 Start
                    --
                    --   Now check to see whether we need to lock the result object, and if so, whether we can get a lock ...
                    --

                    if pkg_os_wf.fn_object_lock( in_session_id, in_transaction_id, v_result_action_object_id, v_result_action_id, v_lock_user_id, v_object_cache, v_next_action_record.readonly_actor_type_set_id ) = 'F'
                    then

                         if v_ui_session_tf = pkg_os_constant_enum.gBoolean_True
                         then

                              -- Will influence downstream behavior, skip action execution, and outcome.
                              v_lock_failure := 'T';
                              io_action_outcome_id := pkg_os_constant.gOutcome_ObjectLocked;

                              -- Set the last executed action and outcome
                              v_executed_action_id  := v_result_action_id;
                              v_executed_outcome_id := io_action_outcome_id;

                         else

                              v_rslt_action_obj_type_id     :=  pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_result_action_object_id);
                              v_rslt_action_obj_type        :=  pkg_os_object.fn_object_type_name_get( in_session_id, in_transaction_id, v_result_action_object_id);

                              pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... ERROR: A subsequent action object is locked by another session.  Please configure an initial lock for the Object Type : '|| v_rslt_action_obj_type || ' ( Object Type ID: ' || v_rslt_action_obj_type_id || ' ) or an ancestor object type.');

                              -- If object is locked, Raise the Exception
                              raise_application_error
                              (
                                   OBJECT_LOCK_ERRNUM,
                                   'Object Lock identified on the next Action Object.'
                              );

                         end if;

                    end if;
                    --OSPRODUCT-6016 End
					
				/*
                    --
                    --   Now check to see whether we need to lock the result object, and if so, whether we can get a lock ...
                    --

                    if fn_object_lock( in_session_id, in_transaction_id, v_result_action_object_id, v_result_action_id, v_lock_user_id, io_object_cache, v_next_action_record.readonly_actor_type_set_id ) = 'F'
                    then

                         null;

                    end if;
				*/
                    --
                    --   Now check whether there are validation rules against the next action that we need to fire ...
                    --
                    --   Note, that since the database actions and initialization rules executed before this will have modified
                    --   values posted from the page, don't use the global cache.
                    --

                    declare

                         v_dummy_object_cache           pkg_os_object_cache.t_object_cache;

                    begin

                         if   pkg_os_action_validate.fn_validate_before_proceeding( in_session_id, in_transaction_id, null, v_result_action_id ) = pkg_os_constant.gValidation_Semantic and
                              pkg_os_wf_rules.fn_semantic_check_rules( in_session_id, in_transaction_id, v_dummy_object_cache, null, v_result_action_id, v_result_action_object_id, v_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F'
                         then

                              v_next_action_found_tf := 'F';

                              -- Exit without executing action
                              io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
						
						-- UTPRODUCT-4270
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_session_id,
                                   gbv_UserSessionMiniWf,
                                   null
                              );
						
                              return;

                         end if;

                    end;

               exception

                    when no_data_found then
                         null;

               end;

               if  v_next_action_found_tf = 'T' then

                    --OSPRODUCT-6016 Start
                    --
                    --   If the action unlocks the object it is acting on, do so ...
                    --

                    --   But if the lock failed, then nothing to unlock.

                    if v_lock_failure = 'F'
                    then

                         sp_object_unlock
                         (
                              in_session_id,
                              in_transaction_id,
                              v_result_action_object_id,
                              v_result_action_id
                         );

                    end if;
                    --OSPRODUCT-6016 End
			   
                    --
                    --   OK - having figured out what the next action is, lets see what type it is ... if it
                    --   is a database command, we can execute it right away, o/w we need to return control
                    --   to the middle-tier ...
                    --

                    v_current_action_record := pkg_os_action.fn_action_row( v_result_action_id );

                    if v_current_action_record.action_type_id = pkg_os_constant.gActionType_SingularDatabase then

                         -- Only execute the DB action if the object lock succeeded
                         if v_lock_failure = 'F'--OSPRODUCT-6016
                         then
                              --
                              --   Database command ... execute this ...
                              --

                              --
                              --   Check for and evaluate action pre-validation rules ...
                              --

                              if   pkg_os_action_validate.fn_validate_before_proceeding( in_session_id, in_transaction_id, v_result_action_id, v_result_action_id )  = pkg_os_constant.gValidation_Semantic and
                                   pkg_os_wf_rules.fn_semantic_check_rules( in_session_id, in_transaction_id, io_object_cache, null, v_result_action_id, v_result_action_object_id, v_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F' then

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Pre-Validation of action: '||v_result_action_id||' failed.' );

                                   end if;

                                   io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

                              else

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Pre Initialization Rules for Action:'||v_result_action_id );

                                   end if;

                                   pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, v_result_action_id, v_result_action_object_id, pkg_os_constant.gActiRuleTime_Pre,io_object_cache );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Executing requested action:'||v_current_action_record.action_name||'('||v_result_action_id||')' );

                                   end if;

                                   pkg_os_action.sp_execute_action
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        io_object_cache,
                                        v_message_list,
                                        v_result_action_id,
                                        v_result_action_object_id,
                                        io_action_outcome_id
                                   );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Action Outcome:'||io_action_outcome_id );

                                   end if;

                                   if v_session_control.gLogging_Performance
                                   then

                                        pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed action - '||v_current_action_record.action_name||' ('||v_result_action_id||')' );

                                   end if;

                              end if;

                              if io_action_outcome_id = pkg_os_constant.gOutcome_UserInputInvalid then

                                   /*
                                   if pkg_os_action.fn_action_row(v_context_action_id).action_type_id = pkg_os_constant.gActionType_Page then

                                        out_action_id := v_context_action_id;
                                        out_action_object_id := v_context_object_id;
                                   else
                                   */
                                        pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unvalidated/incorrected data inputs for action:'||v_result_action_id||' Object:'||v_result_action_object_id||' Outcome:'||io_action_outcome_id );
                                        raise no_data_found;

                                   --end if;

                              else

                                   --
                                   --   Otherwise, the action is to be considered successful, and we execute the post-action initialization rules ...
                                   --

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Post Initialization Rules for Action:'||v_result_action_id );

                                   end if;

                                   pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, v_result_action_id, v_result_action_object_id, pkg_os_constant.gActiRuleTime_Post,io_object_cache);

                              end if;
                         
                         end if;--OSPRODUCT-6016

                    else

                         out_action_id := v_result_action_id;
                         out_action_object_id := v_result_action_object_id;
                         exit;          -- exit loop

                    end if; -- the incoming command is a database command ...

               end if; -- if the result action was found ...

               v_action_id := v_result_action_id;
               v_action_object_id := v_result_action_object_id;

               v_result_action_id := null;

          end loop;

     end;
	 
     --- OSPRODUCT-5323 Start
     --insert the last executed action into DRAGON_TRANSACTION_ACTIONS
     pkg_os_wf_session.sp_insert_dt_actions(in_session_id,in_transaction_id,v_procedure_action_start,out_action_id,io_action_outcome_id);
     --- OSPRODUCT-5323 End
 
 

     -- UTPRODUCT-4270
     -- OSPRODUCT-17852
     if v_reset_mini_wf_flag = 'T' then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );
     
     end if;

     /*- if v_object_id is not null
     then
          sp_db_set_object_lock  --OSPRODUCT-15640
          (
               in_session_id,
               in_transaction_id,
               v_object_id,
               v_object_lock_status
          );
     end if;*/
     
      pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'when executing mini-workflow using Action ID:' || in_action_id ||
               ' Action Object ID:' || in_action_object_id ||
               ' io_action_outcome_id is ' || io_action_outcome_id
          );

      io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception
     when others then
	
		-- Stop mini wf execution
          -- UTPRODUCT-4270
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Error: when executing mini-workflow using Action ID:' || in_action_id ||
               ' Action Object ID:' || in_action_object_id ||
               ' Stack:' || dbms_utility.format_call_stack
          );

          raise;     -- Rollback transaction

end sp_process_action_mini;

-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_process_action_mini
(
     in_session_id                    in                   object.object_id%type,
     in_transaction_id                in                   object.object_id%type,
     in_action_id                     in                   object.object_id%type,
     in_action_object_id              in                   object.object_id%type,
     io_object_cache                  in out nocopy        pkg_os_object_cache.t_object_cache,
     io_message_list                  in out nocopy        pkg_os_message.t_message_list,
     io_action_outcome_id             in out nocopy        outcome.outcome_id%type,
     in_context_action_id             in                   object.object_id%type,
     in_context_object_id             in                   object.object_id%type,
     out_action_id                    out                  object.object_id%type,
     out_action_object_id             out                  object.object_id%type
)
is

     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_process_action_mini';

     v_message_list                     pkg_os_message.t_message_list;
     v_in_action_record                 action%rowtype := pkg_os_action.fn_action_row( in_action_id );
     v_procedure_start_time             number := dbms_utility.get_time;

     v_current_date_time                date       := pkg_os_time.fn_os_sysdate(in_session_id, in_transaction_id, in_action_object_id);
     v_datamart_tf                      char(1)    := 'T';
     v_procedure_action_start           number    := v_procedure_start_time; --- OSPRODUCT-5323
     
     v_lock_user_id                     object.object_id%type                        := null;--OSPRODUCT-7102
     v_object_cache                     pkg_os_object_cache.t_object_cache;--OSPRODUCT-7102
     v_ui_session_tf                    lookup_list_value.lookup_enum%type;--OSPRODUCT-7102
     v_executed_action_id               action.action_id%type      := in_action_id;--OSPRODUCT-7102
     v_executed_outcome_id              outcome.outcome_id%type    := pkg_os_constant.gOutcome_OK;--OSPRODUCT-7102
     OBJECT_LOCK_ERRNUM		          constant 		number(12) :=	-20999;--OSPRODUCT-7102
     v_rslt_action_obj_type_id          object_type.object_type_id%type;--OSPRODUCT-7102
     v_rslt_action_obj_type             object_type.object_type_name%type;--OSPRODUCT-7102
     v_object_id                        object.object_id%type  := null; --OSPRODUCT-15640
     v_object_lock_status               char; --OSPRODUCT-15640
     v_reset_mini_wf_flag               char(1) := 'F'; --OSPRODUCT-17852

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Executing mini-workflow using Action ID: '||in_action_id ||
               ' Action Object ID:' || in_action_object_id
          );

     end if;
	 --OSPRODUCT-15640 start
     begin

          select
               object_id
          into
               v_object_id
          from
               wf_tmp_object_lock
          where
               session_id = in_session_id
          and
               ROOT_OBJECT_ID is not null;

     exception

          when others then
               v_object_id := null;
     end;
     
     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Locked Object ID : ' || v_object_id
          );
     end if;
     --OSPRODUCT-15640 end

     -- Start the mini wf execution
     -- UTPRODUCT-4270
     if pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_session_id,gbv_UserSessionMiniWf) is null then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               pkg_os_constant_enum.gBoolean_True
          );
          
          v_reset_mini_wf_flag := 'T';
          
          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '.. Mini workflow flag set to yes..');

          end if;
          
     end if;

     --OSPRODUCT-7102 Start
     v_ui_session_tf := pkg_os_object_io.fn_object_bv_get ( in_session_id,in_transaction_id,  in_session_id, pkg_os_constant_bv.gbv_SessionCreatedByUI_TF);

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, 'UI Session T/F :'||   v_ui_session_tf );

     end if;
     --OSPRODUCT-7102 End

     --
     --   Now check whether the requested action can be executed ...
     --

     if pkg_os_action_validate.fn_validate_before_proceeding ( in_session_id, in_transaction_id, in_action_id, in_action_id ) = pkg_os_constant.gValidation_Semantic
        and
        pkg_os_wf_rules.fn_semantic_check_rules ( in_session_id, in_transaction_id, io_object_cache, null, in_action_id, in_action_object_id, io_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F'
     then

          -- Exit without executing action
          io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;
		
		-- UTPRODUCT-4270
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );
		
          return;

     else

          if v_session_control.gLogging_Performance
          then

               pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed pre-action validation rules.' );

          end if;

          --
          --   We need to execute the incoming action if it a database command ...
          --

          if v_in_action_record.action_type_id = pkg_os_constant.gActionType_SingularDatabase then

               --
               --   OK, let us execute the pre-action initialization rules, now that we know that we can legally
               --   execute this action.
               --

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Pre Initialization Rules for Action:'||in_action_id );

               end if;

               pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, in_action_id, in_action_object_id, pkg_os_constant.gActiRuleTime_Pre,io_object_cache );

               if v_session_control.gLogging_Performance
               then

                    pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed pre-action initialization rules.' );

               end if;

               --
               --   Database command ... execute this ...
               --

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Executing requested action:'||pkg_os_action.fn_action_row( in_action_id ).action_name||'('||in_action_id||')' );

               end if;

               pkg_os_action.sp_execute_action
               (
                    in_session_id,
                    in_transaction_id,
                    io_object_cache,
                    io_message_list,
                    in_action_id,
                    in_action_object_id,
                    io_action_outcome_id
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Action Outcome:'||io_action_outcome_id );

               end if;

               if v_session_control.gLogging_Performance
               then

                    pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed action - '||v_in_action_record.action_name||' ('||in_action_id||')' );

               end if;

               --
               --   If there are issues with user input ... replay the prior page ...
               --

               if io_action_outcome_id = pkg_os_constant.gOutcome_InternalError  then

                    --
                    --   If there is an internal error (programming bug) - put out the appropriate
                    --   message. Otherwise, if 2the action has not already inserted a presumably
                    --   meaningful error message, insert a catchall.
                    --

                    pkg_os_message.sp_message_add( io_message_list, pkg_os_message.gmsg_InternalError );
				
				-- UTPRODUCT-4270
                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_session_id,
                         gbv_UserSessionMiniWf,
                         null
                    );

                    -- Exit and rollback
                    return;

               else

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Post Initialization Rules for Action:'||in_action_id );

                    end if;

                    pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, in_action_id, in_action_object_id, pkg_os_constant.gActiRuleTime_Post,io_object_cache );

                    if v_session_control.gLogging_Performance
                    then

                         pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed post-action initialization rules.' );

                    end if;

               end if;

          end if;

     end if;

     declare

          v_next_action_record            action%rowtype;
          v_current_action_record         action%rowtype;
          v_next_action_found_tf          char(1) := 'T';
          v_result_action_id              action.action_id%type := null;
          v_result_action_object_id       object.object_id%type := null;
          v_replay_tf                     char(1) := 'F';

          v_action_id                     action.action_id%type := in_action_id;
          v_action_object_id              object.object_id%type := in_action_object_id;
          v_lock_failure                char(1);--OSPRODUCT-7102

     begin

          while v_result_action_id is null loop     --and v_replay_tf = 'F' loop

               v_lock_failure := 'F';  -- reset after each cycle--OSPRODUCT-7102
               
               --- OSPRODUCT-5323 Start
               --insert the last executed action into DRAGON_TRANSACTION_ACTIONS

               pkg_os_wf_session.sp_insert_dt_actions
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_action_Start,
                    nvl(v_result_Action_id,v_action_id),
                    io_action_outcome_id
               );

               v_procedure_action_start := dbms_utility.get_time;
               --- OSPRODUCT-5323 Start               
               
               --
               --   We have an action, with an outcome ... check to see whether there are any outcome modifier
               --   rules ... if so, execute them, and get the modified outcome. [@@@]
               --

               --
               --
               --   OK, lets figure out what to do next ...
               --

               begin

                    pkg_os_wf.sp_get_next_action
                    (
                         in_session_id,
                         in_transaction_id,
                         in_context_action_id,     --v_context_action_id,
                         in_context_object_id,     --v_context_object_id,
                         v_action_id,
                         v_action_object_id,
                         io_action_outcome_id,
                         v_result_action_id,
                         v_result_action_object_id,
                         io_message_list
                    );

                    v_next_action_found_tf := 'T';

                    v_next_action_record := pkg_os_action.fn_action_row(v_result_action_id);

                    --OSPRODUCT-7102 Start
                    --
                    --   Now check to see whether we need to lock the result object, and if so, whether we can get a lock ...
                    --

                    if pkg_os_wf.fn_object_lock( in_session_id, in_transaction_id, v_result_action_object_id, v_result_action_id, v_lock_user_id, v_object_cache, v_next_action_record.readonly_actor_type_set_id ) = 'F'
                    then

                         if v_ui_session_tf = pkg_os_constant_enum.gBoolean_True
                         then

                              -- Will influence downstream behavior, skip action execution, and outcome.
                              v_lock_failure := 'T';
                              io_action_outcome_id := pkg_os_constant.gOutcome_ObjectLocked;

                              -- Set the last executed action and outcome
                              v_executed_action_id  := v_result_action_id;
                              v_executed_outcome_id := io_action_outcome_id;

                         else

                              v_rslt_action_obj_type_id     :=  pkg_os_object.fn_object_type_get( in_session_id, in_transaction_id, v_result_action_object_id);
                              v_rslt_action_obj_type        :=  pkg_os_object.fn_object_type_name_get( in_session_id, in_transaction_id, v_result_action_object_id);

                              pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... ERROR: A subsequent action object is locked by another session.  Please configure an initial lock for the Object Type : '|| v_rslt_action_obj_type || ' ( Object Type ID: ' || v_rslt_action_obj_type_id || ' ) or an ancestor object type.');

                              -- If object is locked, Raise the Exception
                              raise_application_error
                              (
                                   OBJECT_LOCK_ERRNUM,
                                   'Object Lock identified on the next Action Object.'
                              );

                         end if;

                    end if;
                    --OSPRODUCT-7102 End

                    /*
                    --
                    --   Now check to see whether we need to lock the result object, and if so, whether we can get a lock ...
                    --

                    if fn_object_lock( in_session_id, in_transaction_id, v_result_action_object_id, v_result_action_id, v_lock_user_id, io_object_cache, v_next_action_record.readonly_actor_type_set_id ) = 'F'
                    then

                         null;

                    end if;
                    */
                    --
                    --   Now check whether there are validation rules against the next action that we need to fire ...
                    --
                    --   Note, that since the database actions and initialization rules executed before this will have modified
                    --   values posted from the page, don't use the global cache.
                    --

                    declare

                         v_dummy_object_cache           pkg_os_object_cache.t_object_cache;

                    begin

                         if   pkg_os_action_validate.fn_validate_before_proceeding( in_session_id, in_transaction_id, null, v_result_action_id ) = pkg_os_constant.gValidation_Semantic and
                              pkg_os_wf_rules.fn_semantic_check_rules( in_session_id, in_transaction_id, v_dummy_object_cache, null, v_result_action_id, v_result_action_object_id, io_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F'
                         then

                              v_next_action_found_tf := 'F';

                              -- Exit without executing action
                              io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;
						
						-- UTPRODUCT-4270
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_session_id,
                                   gbv_UserSessionMiniWf,
                                   null
                              );
						
                              return;

                         end if;

                    end;

               exception

                    when no_data_found then
                    null;
                    /*--- OSPRODUCT-5323 Start
                    --
                    --   We have a workflow problem ...
                    --
                    pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Error in the Mini Workflow: '|| sqlerrm
                    );

                    raise;
                    --- OSPRODUCT-5323 End*/

               end;

               if  v_next_action_found_tf = 'T' then
               
                    --OSPRODUCT-7102 Start
                    --
                    --   If the action unlocks the object it is acting on, do so ...
                    --

                    --   But if the lock failed, then nothing to unlock.

                    if v_lock_failure = 'F'
                    then

                         sp_object_unlock
                         (
                              in_session_id,
                              in_transaction_id,
                              v_result_action_object_id,
                              v_result_action_id
                         );

                    end if;
                    --OSPRODUCT-7102 End

                    --
                    --   OK - having figured out what the next action is, lets see what type it is ... if it
                    --   is a database command, we can execute it right away, o/w we need to return control
                    --   to the middle-tier ...
                    --

                    v_current_action_record := pkg_os_action.fn_action_row( v_result_action_id );

                    if v_current_action_record.action_type_id = pkg_os_constant.gActionType_SingularDatabase then

                         -- Only execute the DB action if the object lock succeeded
                         if v_lock_failure = 'F'--OSPRODUCT-7102
                         then
                              --
                              --   Database command ... execute this ...
                              --

                              --
                              --   Check for and evaluate action pre-validation rules ...
                              --

                              if   pkg_os_action_validate.fn_validate_before_proceeding( in_session_id, in_transaction_id, v_result_action_id, v_result_action_id )  = pkg_os_constant.gValidation_Semantic and
                                   pkg_os_wf_rules.fn_semantic_check_rules( in_session_id, in_transaction_id, io_object_cache, null, v_result_action_id, v_result_action_object_id, io_message_list, pkg_os_constant.gActiRuleTime_Pre ) = 'F' then

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Pre-Validation of action: '||v_result_action_id||' failed.' );

                                   end if;

                                   io_action_outcome_id := pkg_os_constant.gOutcome_UserInputInvalid;

                              else

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Pre Initialization Rules for Action:'||v_result_action_id );

                                   end if;

                                   pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, v_result_action_id, v_result_action_object_id, pkg_os_constant.gActiRuleTime_Pre,io_object_cache );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Executing requested action:'||v_current_action_record.action_name||'('||v_result_action_id||')' );

                                   end if;

                                   pkg_os_action.sp_execute_action
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        io_object_cache,
                                        io_message_list,
                                        v_result_action_id,
                                        v_result_action_object_id,
                                        io_action_outcome_id
                                   );

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Action Outcome:'||io_action_outcome_id );

                                   end if;

                                   if v_session_control.gLogging_Performance
                                   then

                                        pkg_os_logging.sp_log_performance( in_session_id, in_transaction_id, v_procedure_name, v_procedure_start_time, 'Executed action - '||v_current_action_record.action_name||' ('||v_result_action_id||')' );

                                   end if;

                              end if;

                              if io_action_outcome_id = pkg_os_constant.gOutcome_UserInputInvalid then

                                   /*
                                   if pkg_os_action.fn_action_row(v_context_action_id).action_type_id = pkg_os_constant.gActionType_Page then

                                        out_action_id := v_context_action_id;
                                        out_action_object_id := v_context_object_id;
                                   else
                                   */
                                        pkg_os_logging.sp_log_error( in_session_id, in_transaction_id, v_procedure_name, '... Unvalidated/incorrected data inputs for action:'||v_result_action_id||' Object:'||v_result_action_object_id||' Outcome:'||io_action_outcome_id );
                                        raise no_data_found;

                                   --end if;

                              else

                                   --
                                   --   Otherwise, the action is to be considered successful, and we execute the post-action initialization rules ...
                                   --

                                   if v_session_control.gLogging_Full
                                   then

                                        pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '|||||| Post Initialization Rules for Action:'||v_result_action_id );

                                   end if;

                                   pkg_os_wf_rules.sp_initialization_rules( in_session_id, in_transaction_id, null, v_result_action_id, v_result_action_object_id, pkg_os_constant.gActiRuleTime_Post,io_object_cache);

                              end if;

                         end if;--OSPRODUCT-7102

                    else

                         out_action_id := v_result_action_id;
                         out_action_object_id := v_result_action_object_id;
                         exit;          -- exit loop

                    end if; -- the incoming command is a database command ...

               end if; -- if the result action was found ...

               v_action_id := v_result_action_id;
               v_action_object_id := v_result_action_object_id;

               v_result_action_id := null;

          end loop;

     end;

     --- OSPRODUCT-5323 Start
     --insert the last executed action into DRAGON_TRANSACTION_ACTIONS
     pkg_os_wf_session.sp_insert_dt_actions(in_session_id,in_transaction_id,v_procedure_action_start,out_action_id,io_action_outcome_id);
     --- OSPRODUCT-5323 End

     -- UTPRODUCT-4270
     if v_reset_mini_wf_flag = 'T' then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );
          
     end if;

     if v_object_id is not null
     then
          sp_db_set_object_lock  --OSPRODUCT-15640
          (
               in_session_id,
               in_transaction_id,
               v_object_id,
               v_object_lock_status
          );
     end if;
     
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception

     when others then
		
		-- UTPRODUCT-4270
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_session_id,
               gbv_UserSessionMiniWf,
               null
          );

          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Error: when executing mini-workflow using Action ID:' || in_action_id ||
               ' Action Object ID:' || in_action_object_id ||
               ' Stack:' || dbms_utility.format_call_stack
          );

          raise;     -- Rollback transaction

end sp_process_action_mini;

function fn_evaluate_rule_set
(
    in_session_id        in   object.object_id%type,
    in_transaction_id    in   object.object_id%type,
    in_object_type_id    in   object.object_id%type,
    in_object_id         in   object.object_id%type,
    in_rule_set_id       in   rule_set.rule_set_id%type
)
return number
as

     v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name    varchar2(100)                  := pkg_name||'fn_evaluate_rule_set';

     cursor c_rules
     is
          select
               r.rule_id,
               r.rule_object_type_id,
               m.rule_set_member_desc
          from
               rule_set s, rule_set_member m, rule r
          where
               s.rule_set_id = in_rule_set_id and
               s.rule_set_id = m.rule_set_id and
               m.rule_id = r.rule_id
          order by
               m.rule_set_order;

     v_rule_set_agg_type_id        object.object_id%type         := null;
     v_rule_set_object_type_id     object.object_id%type         := null;
     v_rule_set_object_id          object.object_id%type         := null;
     v_rule_object_id              object.object_id%type         := null;
     v_curr_object_type_id         object.object_id%type         := null;
     v_curr_object_id              object.object_id%type         := null;

     v_rule_set_object_list        pkg_os_object.t_object_list   := pkg_os_object.gnull_object_list;
     v_rule_set_object_index       number                        := null;

     v_object_list                    pkg_os_object.t_object_list   := pkg_os_object.gnull_object_list;
     v_object_index                number                        := null;

     v_rule_eval_result            object_bv_value.business_variable_value%type := null;

     v_return_value                number                        := 0;

     g_BooleanAny                  number                        := 1;
     g_BooleanAll                  number                        := 2;

begin

     --
     -- Get Rule Set information
     --

     select
          rs.rule_set_aggregation_type_id,
          rs.rule_set_object_type_id
     into
          v_rule_set_agg_type_id,
          v_rule_set_object_type_id
     from
          rule_set rs
     where
          rs.rule_set_id = in_rule_set_id;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Evaluating Rule Set ID:' || in_rule_set_id ||
               ' Rule Set Object Type ID:'||v_rule_set_object_type_id || ' Aggregation Type:' || v_rule_set_agg_type_id ||
               ' Action Object ID:' || in_object_id );

     end if;

     if( v_rule_set_object_type_id = 0 or pkg_os_object_search.sp_object_types_equivalent(v_rule_set_object_type_id, in_object_type_id) = 'T' ) then

          v_rule_set_object_id := in_object_id;

     else

          -- check for parent of the desired object type
          v_rule_set_object_id := pkg_os_object_search.fn_object_get_parent_of_type
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               v_rule_set_object_type_id
          );

          -- then check for first child object of the desired type
          if( v_rule_set_object_id is null ) then

               v_rule_set_object_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, in_object_id, v_rule_set_object_type_id);

          end if;

     end if;

     if( v_rule_set_object_id is null ) then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                         'Could not find rule object type for Rule set ID:'||in_rule_set_id);

          return v_return_value;

     end if;

     -- set current object type and object id
     v_curr_object_type_id := v_rule_set_object_type_id;
     v_curr_object_id := v_rule_set_object_id;

     --
     --   loop through members of the rule set
     --
     for r_rule in c_rules loop

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                    '........ Evaluating Member Rule ID:' || r_rule.rule_id || ' Rule Set ID:'||in_rule_set_id ||
                    ' Member Desc:' || r_rule.rule_set_member_desc );

          end if;

          if ( r_rule.rule_object_type_id = 0 or pkg_os_object_search.fn_object_type_equivalent_tf(v_curr_object_type_id, r_rule.rule_object_type_id) = 'T' )
          then

               v_rule_object_id := v_curr_object_id;

          else

               v_rule_object_id := pkg_os_object_search.fn_object_11_child_get(in_session_id, in_transaction_id, v_curr_object_id, r_rule.rule_object_type_id);

          end if;

          -- Evaluate the Rule
          v_rule_eval_result := pkg_os_exp.fn_evaluate_expression(in_session_id, in_transaction_id, v_rule_object_id, r_rule.rule_id);

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name,
                    '.......... Member Rule ID:' || r_rule.rule_id || ' Rule Object:' || v_rule_object_id || ' Rule Result:'||v_rule_eval_result);

          end if;

          -- Aggregation Type = Boolean Any
          if( v_rule_set_agg_type_id = g_BooleanAny ) then          -- If any one rule evaluates to True, return 1

               if ( nvl(v_rule_eval_result, 'F') = 'T') then

                    v_return_value := 1;     -- Boolean Yes
                    exit;     -- exit rule member

               end if;

          elsif ( v_rule_set_agg_type_id = g_BooleanAll ) then          -- If any one rule evaluates to False, return 0 (Rule Set has failed)

               v_return_value := 1;          -- Boolean Yes

               if ( v_rule_eval_result = 'F') then

                    v_return_value := 0;     -- Boolean No
                    exit;     -- exit rule member

               end if;

          end if;

     end loop;  -- for r_rule in c_rules loop

     return v_return_value;

exception
     when others then
          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                         'Error when executing Rule Set ID:' || in_rule_set_id || ' Error:' || sqlerrm);

          return v_return_value;

end fn_evaluate_rule_set;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_list_selected_objects_get
--
--   %USAGE
--        Given a List Object and an empty object list, this procedure gets the Selected Element string, splits it
--          For each selected List Element, it gets the List Element Object.
--          Returns an object list of the selected objects.
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_list_object_id                 List Object ID
--   %PARAM    in_object_cache                 Object Cache
--   %PARAM    io_object_list                Empty Object List
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_list_selected_objects_get
(
    in_session_id        in   object.object_id%type,
    in_transaction_id    in   object.object_id%type,
    in_list_object_id    in   object.object_id%type,
    in_object_cache          in out nocopy      pkg_os_object_cache.t_object_cache,
    io_object_list        in out nocopy     pkg_os_object.t_object_list
)
as

     v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name    varchar2(100)                            := pkg_name||'sp_list_selected_objects_get';

     v_selected_elements                varchar2(4000);
     v_selected_object_ids              pkg_os_token.t_string_table;
     v_selected_object_indx             number := null;

begin

     v_selected_elements := pkg_os_object_cache_io.fn_obj_cache_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_object_cache,
          in_list_object_id,
          pkg_os_constant_bv.gbv_ListElementsSelected
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '......... Processing list: '||in_list_object_id ||
               ' Selected list items:' || v_selected_elements);

     end if;

     io_object_list := pkg_os_object.gnull_object_list;

     if v_selected_elements is not null
     then

          pkg_os_token.sp_tokenize_string(v_selected_elements, ',', v_selected_object_ids );

          v_selected_object_indx := v_selected_object_ids.first;

          while v_selected_object_indx is not null
          loop

               io_object_list(io_object_list.count+1) := pkg_os_object_cache_io.fn_obj_cache_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    in_object_cache,
                    v_selected_object_ids( v_selected_object_indx ),
                    pkg_os_constant_bv.gbv_ListElementObject
               );

               v_selected_object_indx := v_selected_object_ids.next(v_selected_object_indx);

          end loop;

     end if;

end sp_list_selected_objects_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_create_billing_accounts
--
--   %USAGE
--        This procedure creates the Billing Account under each Master Customer Entity
--
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_policy_image_id            Policy Image ID
--   %PARAM    io_action_outcome_id          Outcome ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure  sp_create_billing_accounts
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as

     v_procedure_name              constant system_log.program_name%type   := pkg_name|| 'sp_create_billing_accounts';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_datamart_tf                 char   := 'F';
     v_master_customer_id          object.object_id%type;
     v_customer_entity_list        pkg_os_object.t_object_list;
     --UTXPRODUCT-383 start
     v_local_customer_entity_list  pkg_os_object.t_object_list;
     v_local_customer_tmplt_list   v_object_list;
     v_local_customer_entity_index number;
     v_local_customer_tmplt_indx   number:=1; 
     v_entity_template_id          object.object_id%type; 
     v_master_entity_template_id   object.object_id%type; 
     v_master_entity_search_id     object.object_id%type;                                     
     --UTXPRODUCT-383 end  				   
     v_customer_entity_index       number;
     v_billing_account_id          object.object_id%type;
     v_customer_territory_id       object.object_id%type;
     v_product_id                  pd_product.pd_product_id%type :=  pkg_os_product.fn_object_product_get(in_session_id, in_transaction_id, in_policy_image_id);
  -- --2017-12-05 Cheryl osbilling-4773
     v_entity_first_name           object_bv_value.business_variable_value%type;
     v_entity_last_name            object_bv_value.business_variable_value%type;
     v_entity_business_name        object_bv_value.business_variable_value%type;
     v_check_digit                 int       :=   0 ; --UTPRODUCT-1045

     v_entity_billingAddr_id       object.object_id%type; -- UTXPRODUCT-190
     
begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '...... Creating the Billing Accounts after Master Customer Update');

     end if;

     v_master_customer_id :=  pkg_os_object_search.fn_object_get_parent_of_type
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          gObjTypeCustomer
     );

     --
     --   Find all Customer Entities ...
     --
     
     --UTXPRODUCT-383 start
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_policy_image_id,
          gObjTypeCustomerEntity,
          v_local_customer_entity_list
     );

     v_local_customer_tmplt_list.delete;
     v_local_customer_entity_index := v_local_customer_entity_list.first;
     
     while v_local_customer_entity_index is not null
     loop
          v_entity_template_id := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_local_customer_entity_list(v_local_customer_entity_index),
                    PKG_OS_CONSTANT_BV.gbv_Template
                );

          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '||||||Local Entity: '
                    ||  v_local_customer_entity_list(v_local_customer_entity_index)
                    ||'name'||pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_local_customer_entity_list(v_local_customer_entity_index),
                         gbv_EntityFirstName
                     )
                    ||'template id:'
                    ||v_entity_template_id
                     );

          end if;
          
          if v_entity_template_id is null then
               
           v_entity_template_id := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_local_customer_entity_list(v_local_customer_entity_index),
                    PKG_OS_CONSTANT_BV.gbv_Ultimate_Template
                );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '||||||Local Entity: '
                         ||  v_local_customer_entity_list(v_local_customer_entity_index)
                         ||'Utemplate id:'
                         ||v_entity_template_id
                          );

               end if;
          end if;
          
           if not (v_local_customer_tmplt_list.exists(v_entity_template_id))
           then
                v_local_customer_tmplt_list(v_entity_template_id) := v_entity_template_id;
                
                --v_local_customer_tmplt_indx := v_local_customer_tmplt_indx+1;
               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '||||||Local Entity: added to the list'|| v_entity_template_id
                          );

               end if;
                          
           end if;       
           v_local_customer_entity_index := v_local_customer_entity_list.next(v_local_customer_entity_index);

     end loop;

     if v_session_control.gLogging_Full then
          v_local_customer_tmplt_indx := v_local_customer_tmplt_list.first;

          if v_local_customer_tmplt_list.count > 0
          then
               while v_local_customer_tmplt_indx is not null
               loop

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '|||||| loop index'||v_local_customer_tmplt_indx
                    ||'Local Entity: '||v_local_customer_tmplt_list(v_local_customer_tmplt_indx)
                     );

                    v_local_customer_tmplt_indx := v_local_customer_tmplt_list.next(v_local_customer_tmplt_indx);

               end loop;      --   while v_customer_entity_index is not null

          end if; 
     end if;         
              
     --UTXPRODUCT-383 end
     
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          v_master_customer_id,
          gObjTypeCustomerEntity,
          v_customer_entity_list
     );

     v_customer_entity_index := v_customer_entity_list.first;

     if v_customer_entity_list.count > 0
     then

          while v_customer_entity_index is not null
          loop

      --2017-12-05 Cheryl osbilling-4773 - check if the entity is valid before creating a new BA
               v_entity_first_name := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_customer_entity_list(v_customer_entity_index),
                    gbv_EntityFirstName
                );
               v_entity_last_name := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_customer_entity_list(v_customer_entity_index),
                    gbv_EntityLastName
                );

               v_entity_business_name := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_customer_entity_list(v_customer_entity_index),
                    gbv_EntityBusinessName
                );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                         '||||||Entity: '
                         ||  v_customer_entity_list(v_customer_entity_index)
                         ||'First Name:'
                         ||v_entity_first_name
                         ||'Last Name:'
                         ||v_entity_last_name
                         ||'Business Name:'
                         ||v_entity_business_name
                          );

               end if;

               if (v_entity_first_name is not null and v_entity_last_name is not null)
                   or (v_entity_business_name is not null)
               then
                    v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_customer_entity_list(v_customer_entity_index),
                         gObjType_BillingAccount
                    );


                    if v_billing_account_id is null
                    then

                         --UTXPRODUCT-190 Starts
                         v_entity_billingAddr_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id, 
                                                            in_transaction_id, 
                                                            v_customer_entity_list(v_customer_entity_index), 
                                                            pkg_base_submission.gbv_CustEntityBillingAddress
                                                       );
                    
                         --raise an exception if the referenced billing address is not present for customer entity
                         if v_entity_billingAddr_id is null
                         then
                              --UTXPRODUCT-383 start
                              
                              -- if template if of a master customer entity is null, that means that it's added just now. 
                              -- So, we need to earch it via ultimate template id
                              v_master_entity_template_id := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_customer_entity_list(v_customer_entity_index),
                                   PKG_OS_CONSTANT_BV.gbv_Template
                               );
                               
                               if v_master_entity_template_id is null then
                                    
                                   v_master_entity_search_id := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_customer_entity_list(v_customer_entity_index),
                                        PKG_OS_CONSTANT_BV.gbv_Ultimate_Template
                                    );
                               else
                                    v_master_entity_search_id := v_customer_entity_list(v_customer_entity_index);
                               
                               end if;                                         

                              if v_local_customer_tmplt_list.exists(v_master_entity_search_id)
                              then
                                        
                                   pkg_os_logging.sp_log_error
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'Checking-Referenced billing address is not present for account '||v_billing_account_id||'. This field is mandatory.'
                                   );

                                   io_action_outcome_id := pkg_db_constant.gOutcome_AddrPartialFailure;

                                   return;
                              
                              else
                                   if v_session_control.gLogging_Full then

                                        pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                                             '||||||billing address is missing for Entity: '
                                             ||  v_master_entity_search_id
                                             ||'First Name:'
                                             ||v_entity_first_name
                                             ||' but it is not part of quote, so skipping verification'
                                              );

                                   end if;   
                                    v_customer_entity_index := v_customer_entity_list.next(v_customer_entity_index);
 
                                   continue;                              
                                                            
                              end if;
                              --UTXPRODUCT-383 end                                   

                         end if;
                         -- UTXPRODUCT-170 End

                         pkg_os_object.sp_object_create
                         (
                              in_session_id,
                              in_transaction_id,
                              gObjType_BillingAccount,
                              v_customer_entity_list(v_customer_entity_index),
                              v_billing_account_id
                         );

                         --
                         --     Set the Billing Account attributes
                         --

                         pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billing_account_id, pkg_os_constant_bv.gbv_GenObjObjectState, gBillingAcStatus_Active);
                         pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billing_account_id, gbv_BillAcc_AccountType , gBillingAcType_Customer);
                         sp_ba_additional_attribute_set(in_session_id, in_transaction_id, v_billing_account_id);--OSPRODUCT-1786
                         
                         --
                         -- Calculating Check Digit UTPRODUCT-1045
                         --
                                                                                                       
                         v_check_digit :=    pkg_db_functions.fn_cal_check_digit
                                             (
                                                  in_session_id, 
                                                  in_transaction_id,
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id, 
                                                       in_transaction_id,
                                                       v_billing_account_id,
                                                       pkg_db_constant.gbv_billacc_no
                                                  )
                                             );--UTPRODUCT-1045
                                                                                                       
                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   '...... Calculated Check digit for Billing account no: '|| v_check_digit
                              );

                         end if;
                                                  
                         pkg_os_object_io.sp_object_bv_set(in_session_id, in_transaction_id, v_billing_account_id, pkg_db_constant.gbv_checkdigit_billacc,v_check_digit );--UTPRODUCT-1045
                     
                         --UTPRODUCT-1045 end
                         
                         
                         --
                         --     Add the BillingAccount record to Datamart
                         --

                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_billing_account_id, v_datamart_tf);

                         --
                         --  Associate actors to the newly created billing account ...
                         --

                         if v_product_id not in (86046, 86146,87646)
                         then
                         pkg_db_actor.sp_object_actor_set
                         (
                              in_session_id,
                              in_transaction_id,
                              v_billing_account_id,
                              null,
							  io_action_outcome_id
                         );
                         end if;
                                                     
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '||||||Entity11: '
                              ||  v_billing_account_id
                              ||'v_billing_account_id:'
                          );
                              
                    end if;     --     if v_billing_account_id is null
           
               end if;          --     if entity names is not null

               v_customer_entity_index := v_customer_entity_list.next(v_customer_entity_index);

          end loop;      --   while v_customer_entity_index is not null

     end if;  --         if v_customer_entity_list.count > 0

     /* -- UTXPRODUCT-190 Commenting starts
     --OSPRODUCT-8712
	--raise an exception if the referenced billing address is not present for customer entity
	if pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, v_billing_account_id, '29704546.210149') = gObjTypeCustomerEntity
	  and
	  pkg_os_object_io.fn_object_bv_path_get(in_session_id, in_transaction_id, v_billing_account_id, '29704546.29254214') is null
	then
		pkg_os_logging.sp_log_error
		(
			in_session_id,
			in_transaction_id,
			v_procedure_name,
               'referenced billing address is not present for account '||v_billing_account_id||'. This field is mandatory.'
		);
		
		io_action_outcome_id := pkg_os_constant.gOutcome_InternalError;

		raise no_data_found;
		
	end if;
     */ 
     --UTXPRODUCT-190 Commenting Ends
	
     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_create_billing_accounts;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_set_policy_primary_csr
--
--   %USAGE
--        This procedure is called from action-id 658546 (billing account | details ) page.
--        Based on the Billing Account id ,fetch the policies for which this billing account
--        is the responsible billing account in the policy datamart
--        update the policy datamart with the primary csr reference for these policies.

--
--
--
--   %ALGORITHM
--        1.  Get the policies from policy datamart where Billing Account is in_action_object_id
--        2.  Get the Primary CSR reference for in_action_object_id
--        3.  Update the Reference_Primary Billing CSR , datamart of  Policy one by one through loop.
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--     %PARAM               in_action_id                  Action Id
--   %PARAM             in_action_object_id           Action Object Id(Billing Account)
--   %PARAM             io_action_outcome_id              Action Outcome
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure  sp_set_policy_primary_csr
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_action_id                  in        action.action_id%type,
     in_action_object_id           in        object.object_id%type,
     io_action_outcome_id          in out     outcome.outcome_id%type
)
as
     v_procedure_name             constant system_log.program_name%type     :=pkg_name|| 'sp_set_policy_primary_csr';
     v_session_control              pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

     v_datamart_tf                char   := 'F';
     v_billing_primary_CSR        object.object_id%type;

     --Get all the Policies where responsible billing account id = in_action_object_id
     cursor c_policy
     is
          select policy_id
          from dragon_policy
          where responsible_billing_account=in_action_object_id  ;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '...... Setting the Billing Primary CSR');

     end if;

     -- Get the reference from Billing Account to Billing Primary CSR

     v_billing_primary_CSR := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          in_action_object_id,
          gbv_BillAcc_PrimaryCsr
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '|||||| Billing Primary CSR: '
               || v_billing_primary_CSR
               ||'for Billing Account Id:'
               ||in_action_object_id );

     end if;

      --for all the policies set the reference
      --loop through all the policies and set the reference

     for r_policy in c_policy loop


          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
                    '|||||||||Inside the loop'
                    ||'Setting the reference and updating the datamart for Policy Id'
                    || r_policy.policy_id );

          end if;

          --- set the Generic object reference Primary Billing CSR for this Policy

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               r_policy.policy_id,
               gbv_GenericObjRefPrimarycsr ,
               v_billing_primary_CSR --Reference_Primary Billing CSR
          );

          --- update the datamart for this policy

          pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, r_policy.policy_id, v_datamart_tf);

     end loop;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

exception when others
then

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
          '...... No policies found for this Billing Account'
          ||SQLERRM);

     end if;

     io_action_outcome_id := pkg_os_constant.gOutcome_OK;

end sp_set_policy_primary_csr;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_clear_fitem_cache
--
--   %USAGE
--       Deletes all cached records from internal cache.
--       To be used when running the same procedure multiple times or for re-entrant purposes.
--
--   %ALGORITHM
--
--
--   %PARAM
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_clear_fitem_cache
(
     in_fitem_id        in   object.object_id%type     default null
)
is
begin

     if ( in_fitem_id is not null )
     then

          g_fitem_cache.delete(in_fitem_id);

     else

          g_fitem_cache.delete;

     end if;

end sp_clear_fitem_cache;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_initialize_fitem_cache
--
--   %USAGE
--        Initialize the fimte cache with data from the DRAGON_FITEM table based
--        on the fitem id passed in.
--
--   %ALGORITHM
--        select from the DRAGON_FITEM table into g_fitem_cache.
--
--   %PARAM    in_fitem_id   specifies the fitem data loaded into the cache.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_initialize_fitem_cache
(
     in_fitem_id        in   object.object_id%type
)
is

begin

     select
          *
     into
          g_fitem_cache(in_fitem_id)
     from
          dragon_fitem
     where
          fitem_id = in_fitem_id;

end sp_initialize_fitem_cache;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        fn_fitem_row
--
--   %USAGE
--        Given an FItem ID returns the record from DRAGON_FITEM.
--          Warning: This function should be used only for those attributes that will NOT change once created (such as Policy ID, Billing Account ID etc.)
--          Attributes such as Balance will change and this function should not be used.
--          To pull again from the database, use sp_clear_fitem_cache
--
--   %ALGORITHM
--        Not Specified.
--
--   %PARAM    in_fitem_id   defines the FItem ID of the record to be returned.
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function fn_fitem_row
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_fitem_id                       in        object.object_id%type
)
return dragon_fitem%rowtype
is

     v_procedure_name     constant system_log.program_name%type     := pkg_name||'fn_fitem_row';
     v_session_control     pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

     --
     --   If the FItem passed in is null then log error and RAISE exception.
     --

     if in_fitem_id is null
     then
          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                    'FItemID is null. Please provide an FItem ID.');
          raise no_data_found;

     end if;

     if v_session_control.gCaching_On
          and g_fitem_cache.exists(in_fitem_id)
     then

          return g_fitem_cache( in_fitem_id );

     else

          sp_initialize_fitem_cache( in_fitem_id );
          return g_fitem_cache( in_fitem_id );

     end if;

     if not g_fitem_cache.exists( in_fitem_id )
     then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                    'Error: Unable to find FItem ID:'||in_fitem_id || ' in DRAGON_FITEM_ID' );
          raise no_data_found;

          return null;

     end if;

end  fn_fitem_row;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_db_reconciliation_row
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
--          not specified
--
--     %PARAMS
--          db_reconciliation_id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function     fn_db_reconciliation_row
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_reconciliation_id          in          db_reconciliation.db_reconciliation_id%type
)
return  db_reconciliation%rowtype
is

     v_procedure_name          constant system_log.program_name%type     := pkg_name||'fn_db_reconciliation_row';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,'...... Looking up ReconciliationID: '||in_reconciliation_id);

     end if;

     --
     --   If the in_reconciliation_id passed is null then log error and RAISE exception.
     --

     if in_reconciliation_id is null
     then

          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name, '......... NULL DB Reconciliation ID passed in ...');
          raise no_data_found;

     end if;

     if v_session_control.gCaching_On
          and g_db_reconciliation_cache.exists(in_reconciliation_id)
     then

          return g_db_reconciliation_cache( in_reconciliation_id );

     else

          select
               *
          into
               g_db_reconciliation_cache( in_reconciliation_id )
          from
               db_reconciliation
          where
               db_reconciliation_id = in_reconciliation_id;

          return g_db_reconciliation_cache( in_reconciliation_id );

     end if;

end  fn_db_reconciliation_row;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--     %NAME
--          fn_db_recon_item_row
--
--     %USAGE
--          not specified
--
--     %ALGORITHM
--          not specified
--
--     %PARAMS
--          db_recon_item_id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

function     fn_db_recon_item_row
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_recon_item_id               in          db_recon_item.db_recon_item_id%type
)
return  db_recon_item%rowtype
is

     v_procedure_name          constant system_log.program_name%type     := pkg_name||'fn_db_recon_item_row';
     v_session_control          pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;

begin

     --
     --   If the in_reconciliation_id passed is null then log error and RAISE exception.
     --

     if in_recon_item_id is null
     then
          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
               'Error: Please provide a DB Recon Item ID.');
          raise no_data_found;
     end if;

     if v_session_control.gCaching_On
          and g_db_recon_item_cache.exists(in_recon_item_id)
     then

          return g_db_recon_item_cache( in_recon_item_id );

     else

          select
               *
          into
               g_db_recon_item_cache( in_recon_item_id )
          from
               db_recon_item
          where
               db_recon_item_id = in_recon_item_id;

          return g_db_recon_item_cache( in_recon_item_id );

     end if;

exception
     when no_data_found then
          pkg_os_logging.sp_log_error(in_session_id, in_transaction_id, v_procedure_name,
                    'Error: Unable to find DB Recon Item ID:'||in_recon_item_id );
          raise no_data_found;
          return null;

end  fn_db_recon_item_row;
----------------------------------------------------------------------------------------------------
function fn_batrxset_type_in_set
(
     in_batrx_type_id              in        db_transaction_set_type.db_trxset_type_id%type,
     in_batrx_type_set_id          in        db_billing_trx_set.db_billing_trx_set_id%type

)
return char is

     v_procedure_name              constant  system_log.program_name%type   :=  pkg_name||'fn_batrxset_type_in_set';
     v_session_control                       pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(0, 0) ;
     v_return_value                          char;
     v_ba_trx_md_id                          db_transaction_set_type.db_trxset_type_id%type;

begin

     if in_batrx_type_id is null
        or
        in_batrx_type_set_id is null
        or
        in_batrx_type_id = 0
        or
        in_batrx_type_set_id = 0
     then

        return 'T';

     end if;

     --
     -- Get the MD ID based on the transaction type
     --
     select
          db.db_trxset_type_id
     into
          v_ba_trx_md_id
     from
          Db_Transaction_Set_Type db
     where
          db.db_trxset_enum = in_batrx_type_id;

     select
          decode( count(1), 0, 'F','T')
     into
          v_return_value
     from
         db_billing_trx_set_values bm
     where
         bm.db_billing_trx_set_id = in_batrx_type_set_id
         and
         (
               bm.db_billing_trx_set_type_id   in (v_ba_trx_md_id, gDefaultBATransactionSetID)
               or
               bm.db_billing_trx_set_type_id is null
         );

     return v_return_value;

end fn_batrxset_type_in_set;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_async_ba_datamart_update
--
--   %USAGE
--        Given a billing account , updates the datamart
--        Update the LAST_DATAMART_UPDATE_TIMESTAMP column of DRAGON_BILLINGACCOUNT
--        Get the last updated datamart timestamp from the BILLINGACCOUNT_DATAMART_UPDATE Table for that billing account
--        Update the process timestamp in BILLINGACCOUNT_DATAMART_UPDATE table for that billing account

--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_list_object_id                 List Object ID
--   %PARAM    in_object_cache                 Object Cache
--   %PARAM    io_object_list                Empty Object List
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_async_ba_datamart_update
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billing_account_id              in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_session_control   pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_procedure_name    varchar2(100)                            := pkg_name||'sp_async_ba_datamart_update';
     v_datamart_tf       char := 'T';
     v_ba_datamart_update_tmp date;
      v_current_date       date   := sysdate; -- OSBILLING-3924

begin

     --
     -- 1. Update the datamart of the billing account
     --

     pkg_os_datamart.sp_datamart_update_row
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          v_datamart_tf
     );

    --
     -- 2. Update the LAST_DATAMART_UPDATE_TIMESTAMP column of DRAGON_BILLINGACCOUNT
     --
     update dragon_billingaccount db
     set
          db.last_datamart_update_date = v_current_date -- OSBILLING-3924
     where
          db.billingaccount_id  = in_billing_account_id;

     --

     -- 3. Get the last updated datamart timestamp from the BILLINGACCOUNT_DATAMART_UPDATE Table for that billing account
     --
     -- Removed #3 as part of MUSTDEV-36307. This is not required.

     --
     -- 4. Update the  process timestamp in BILLINGACCOUNT_DATAMART_UPDATE table for that billing account
     --

     begin

          update
               billingaccount_datamart_update db
          set
               db.process_timestamp = v_current_date -- OSBILLING-3924
          where
               db.billing_account_id = in_billing_account_id
          and
               db.process_timestamp is null;

          io_action_outcome_id     := pkg_os_constant.gOutcome_OK;
--2017-03-08 osbilling-3285 Change from pkg_os_log to pkg_os_logging
     exception when others
     then
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               'Unable to update the BA Records for billing account ID' || in_billing_account_id || sqlerrm
          );

          io_action_outcome_id     := 31446;

     end;

end sp_async_ba_datamart_update;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_billingacounttrxset_create
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_billing_account_id in          object.object_id%type,
     in_transaction_type_id   in             db_transaction_set_type.db_trxset_type_id%type,
     in_entry_type_id         in             object.object_id%type,
     out_batrxset_id          out            object.object_id%type,
     in_current_date          in             date default null
)
is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'billinacounttrxset';
     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_bv_table                         pkg_os_object_io.t_bv_table;
begin

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          pkg_db_object.gObjType_BillingAccountTrxSet,
          in_billing_account_id,
          out_batrxset_id
     );

     v_bv_table.delete;

     v_bv_table ( gbv_FITrxSetEnteredby        ).business_variable_value := pkg_os_object_io.fn_object_bv_path_get(in_session_id ,in_transaction_id ,in_session_id ,'210086.211882');
     v_bv_table ( gbv_FITrxSet_EntryType        ).business_variable_value := in_entry_type_id;
     v_bv_table ( gbv_FITrxSet_DatePosted       ).business_variable_value := to_char( NVL(in_current_date, pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_billing_account_id)), pkg_os_constant.DragonDateFormatDefault );  --OSBILLING-7829
     v_bv_table ( gbv_FITrxSet_ExternalBatchId  ).business_variable_value := 'Batch'||to_char( pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_billing_account_id), pkg_os_constant.DragonDateFormatDefault );
     v_bv_table ( pkg_os_constant_bv.gbv_GenObjObjectState).business_variable_value := gFITrxStatus_InProcess;
     v_bv_table ( gbv_FITrxSet_BatchType ).business_variable_value   :=in_transaction_type_id;

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_batrxset_id,
          v_bv_table

     );

end sp_billingacounttrxset_create;
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_billingacounttrxset_process -- Should be moved to PKG_DB_OBJECT
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_billingacounttrxset_id          in             object.object_id%type,
     in_transasction_type_id  in             db_transaction_set_type.db_trxset_enum%type,
     in_current_date          in             date default null
)
is
     v_bv_table                    pkg_os_object_io.t_bv_table;
     v_billing_account_id          object.object_id%type;
     v_datamart_tf                 char := 'T';

begin

     v_billing_account_id     :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_billingacounttrxset_id);

     v_bv_table.delete;
          v_bv_table ( pkg_db_cashpost.gbv_FITrxSetTotalAmount      ).business_variable_value   := pkg_db_functions.fn_batch_processtrx_amount(in_session_id,in_transaction_id,in_billingacounttrxset_id,in_transasction_type_id);
     v_bv_table ( pkg_db_cashpost.gbv_FITrxSetTotalItems       ).business_variable_value   :=  pkg_db_functions.fn_batch_processtrx_count(in_billingacounttrxset_id,in_transasction_type_id);
     v_bv_table ( pkg_db_cashpost.gbv_FITrxSetDatePosted       ).business_variable_value  := to_char( NVL(in_current_date, pkg_os_time.fn_os_sysdate( in_session_id, in_transaction_id, in_billingacounttrxset_id)), pkg_os_constant.DragonDateFormatDefault );  --OSBILLING-7829
     v_bv_table ( pkg_db_cashpost.gbv_BillAccTrxSet_ProcessDate).business_variable_value  := to_char( pkg_db_functions.fn_get_billacc_current_date( in_session_id, in_transaction_id, v_billing_account_id), pkg_os_constant.DragonDateFormatDefault );
     v_bv_table ( pkg_os_constant_bv.gbv_GenObjObjectState     ).business_variable_value  := pkg_db_object.gBatchStatus_Processed;
     v_bv_table(pkg_db_object.gbv_FITrxSet_BATotalBalance     ).business_variable_value := pkg_os_object_io.fn_object_bv_get
                                                                                           (
                                                                                                in_session_id,
                                                                                                in_transaction_id,
                                                                                                pkg_os_object.fn_object_parent_get
                                                                                                (
                                                                                                     in_session_id,
                                                                                                     in_transaction_id,
                                                                                                     in_billingacounttrxset_id
                                                                                                ),
                                                                                                pkg_db_object.gbv_BillAcc_TotalBalance
                                                                                           );


     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_billingacounttrxset_id,
          v_bv_table
     );

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_billingacounttrxset_id,
          gbv_FITrxSet_AccntingPeriod,
          pkg_db_functions.fn_get_fitransset_acct_prd(in_session_id,in_transaction_id , in_billingacounttrxset_id)
     );


     pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_billingacounttrxset_id, v_datamart_tf);

end sp_billingacounttrxset_process;

-----------------------------------------------------------------------------------------------------------------------------------------------------

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_ba_additional_attribute_set
--
--   %USAGE
--        This proc is added to set any addtional attribuite while creating a billing account
--        There is a custom call provided for any custom need
--        
--        
--   %ALGORITHM
--
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--   %PARAM    in_object_id                  Billing Account ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
procedure sp_ba_additional_attribute_set
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_object_id             in             object.object_id%type
)
is
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id,in_transaction_id);
     v_procedure_name              system_log.program_name%type := pkg_name||'sp_ba_additional_attribute_set';
     v_billing_account_number      varchar2(100);
begin

     v_billing_account_number      :=   fn_billing_account_no
                                        (
                                             in_session_id,
                                             in_transaction_id
                                        );

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_object_id,
          gbv_BillAcc_AccountNumber,
          v_billing_account_number
     );
     
     pkg_cs_db_billing.sp_ba_custom_attribute_set
     (
          in_session_id,
          in_transaction_id,
          in_object_id
     );

exception
    when others then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id,
          v_procedure_name,
          '...... Exception while setting billing account attributes '|| SQLERRM(SQLCODE)
     );
end sp_ba_additional_attribute_set;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--          fn_billing_account_no
--
--   %USAGE
--          not specified
--
--   %ALGORITHM
--          not specified
--
--   %PARAMS
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
function fn_billing_account_no
(
     in_session_id                 in        object.object_id%type,
     in_transaction_id             in        object.object_id%type,
     in_billing_account_id         in        object.object_id%type default null --OSPRODUCT-17458
)
return varchar2
is

     v_procedure_name         constant system_log.program_name%type     := pkg_name||'fn_db_reconciliation_row';
     v_session_control        pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_acc_number             varchar2(100);
     v_custom_account_number  varchar2(100);
     
begin

     v_acc_number := seq_billingaccount_no.NEXTVAL;
     
     v_custom_account_number  :=   pkg_cs_db_functions.fn_billing_account_no(in_session_id, in_transaction_id);
     
     if v_custom_account_number is not null
     then
          
          v_acc_number := v_custom_account_number;
          
     end if;

     return v_acc_number;

exception
     when others then
     pkg_os_logging.sp_log
     (
          in_session_id,
          in_transaction_id, 
          v_procedure_name,
          '...... There is issue in  generating billing account number'
     );
     return null;
end  fn_billing_account_no;
-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--          sp_billing_doc_processing
--
--   %USAGE
--          not specified
--
--   %ALGORITHM
--          not specified
--
--   %PARAMS
--   %PARAM    in_session_id                 Session ID
--   %PARAM    in_transaction_id             Transaction ID
--
-----------------------------------------------------------------------------------------------------------------------------------------------------
-- UTPRODUCT-2926
procedure sp_billing_doc_processing
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_ba_trx_set_id                   in             object.object_id%type,    
     io_action_outcome_id               in out         outcome.outcome_id%type
)
is
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_billing_doc_processing';
     v_action_id                        action.action_id%type;
     v_out_action_id                    action.action_id%type;
     v_out_action_object_id             object.object_id%type;
     in_object_cache                    pkg_os_object_cache.t_object_cache;
     v_BilligAccTrxSet_Type_id          object_bv_value.business_variable_value%type;
     v_bats_ui_display_name             object_bv_value.business_variable_value%type;
     v_apply_rule_tf                    char(1);
     v_apply_rule_id                    rule.rule_id%type;
     v_message_list                     pkg_os_message.t_message_list;--OSPRODUCT-15640
     v_context_action_id                object.object_id%type;--OSPRODUCT-15640
     v_context_object_id                object.object_id%type;--OSPRODUCT-15640

begin

     -- Get the batch type
     v_BilligAccTrxSet_Type_id   :=   pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_ba_trx_set_id,
                                             gbv_FITrxSet_BatchType
                                        );  
                                        
     if v_BilligAccTrxSet_Type_id in (7801) then                                  
          -- Get UI Display Name
          v_bats_ui_display_name   :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_ba_trx_set_id,
                                                  gbv_bats_ui_display_name
                                             );  
     end if;                                    
                                        
     if v_session_control.gLogging_Full
     then
          
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Entered Document Processing WF ' || in_ba_trx_set_id ||
               ' BillingAccountTrxSet Type:' || v_BilligAccTrxSet_Type_id ||
               ' UI Diplay Name '||v_bats_ui_display_name
          );

     end if; 
     
     begin 
     
          select 
                 ddp.action_id , ddp.apply_rule
          into 
                 v_action_id , v_apply_rule_id       
          from 
                 db_document_processing ddp,
                 db_transaction_set_type ts
          where  
                 ddp.active_tf = 'T'
          and 
                 ddp.billing_transaction_type =  ts.db_trxset_type_id
          and 
                 ts.db_trxset_enum =v_BilligAccTrxSet_Type_id;
          
          if v_action_id is null
          then
               
               pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Missing Configuration: Please set Action in XXXX table for Bats ' || in_ba_trx_set_id ||
                    ' BillingAccountTrxSet Type:' || v_BilligAccTrxSet_Type_id ||
                    ' io_action_outcome_id : '||io_action_outcome_id
               );

               raise no_data_found;
               
          end if;       
                 
      exception 
          when no_data_found then        
               null; 
          when too_many_rows then 
                pkg_os_logging.sp_log_error
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Missing Configuration: Please set Action in XXXX table for Bats ' || in_ba_trx_set_id ||
                         ' BillingAccountTrxSet Type:' || v_BilligAccTrxSet_Type_id ||
                         ' io_action_outcome_id : '||io_action_outcome_id
                   );

                 raise no_data_found;
     end; 
     
     v_apply_rule_tf := gdoc_processing_ApplyRule_T;   
     
     -- apply_rule
     if v_apply_rule_id is not null
     then  
          v_apply_rule_tf  := pkg_os_exp.fn_evaluate_expression
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_ba_trx_set_id,
                                        v_apply_rule_id
                                   );
                                        
     end if; -- apply_rule        
     
     if v_session_control.gLogging_Full
     then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Calling pkg_db_object.sp_process_action_mini for action id : '||v_action_id ||
                    ' BillingAccountTrxSet Type:' || v_BilligAccTrxSet_Type_id
               );
               
     end if;                                    
                                        
     if  v_BilligAccTrxSet_Type_id is not null and v_action_id is not null and v_apply_rule_tf = gdoc_processing_ApplyRule_T
     then                                     

          pkg_db_object.sp_process_action_mini --OSPRODUCT-15640
          (
               in_session_id                   =>        in_session_id,
               in_transaction_id               =>        in_transaction_id,
               in_action_id                    =>        v_action_id,
               in_action_object_id             =>        in_ba_trx_set_id,
               io_object_cache                 =>        in_object_cache,
               io_message_list                 =>        v_message_list,
               io_action_outcome_id            =>        io_action_outcome_id,
               in_context_action_id            =>        v_context_action_id,
               in_context_object_id            =>        v_context_object_id,
               out_action_id                   =>        v_out_action_id,
               out_action_object_id            =>        v_out_action_object_id
          );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... After executing pkg_db_object.sp_process_action_mini for action id : '||v_action_id||
                    ' out action id : '||v_out_action_id||
                    'out action object id : '||v_out_action_object_id||
                    ' io_action_outcome_id : '||io_action_outcome_id
               );

          end if;
          
     end if; 

end sp_billing_doc_processing;
-- UTPRODUCT-2926
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_create_entityList
(
     in_session_id            in             object.object_id%type,
     in_transaction_id        in             object.object_id%type,
     in_bats_id               in             object.object_id%type,
     in_ptp_id                in             object.object_id%type,
     io_entity_list           in out         pkg_os_object.t_object_list--pkg_os_object.t_object_list
)
is
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_create_entityList';
     v_entity_list                 v_object_list   := gnull_object_list;
     v_tmp_entity_list             v_object_list   := gnull_object_list;
     v_entity_idx                  number;
     v_producing_agency            object.object_id%type;
     v_business_introducer         object.object_id%type;
     v_tax_collection_agency       object.object_id%type;
     v_carrier_branch              object.object_id%type;
     v_writing_company             object.object_id%type;
     v_dept_surcharge              object.object_id%type;
     v_inspection_company          object.object_id%type;
     v_financial_institution       object.object_id%type;
     v_wholesaler_agency           object.object_id%type;
     v_customer_entity             object.object_id%type;
     v_primary_insured             object.object_id%type;
     v_entity_role_id              object.object_id%type;
     v_count                       number    :=   0;
     v_multipayer_entity           object.object_id%type;
     v_multipayer_list             pkg_os_object.t_object_list   :=   pkg_os_object.gnull_object_list;
     v_multipayer_list_index       object.object_id%type;
     v_bats_type                   number                        :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_bats_id,pkg_db_object.gbv_FITrxSet_BatchType);
     v_billing_account             object.object_id%type         :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_bats_id);
     v_entity_billing_account      object.object_id%type;
     v_customer_role_type_list     pkg_os_object.t_object_list   :=   pkg_os_object.gnull_object_list;
     v_customer_role_type_idx      number;
     v_entity_role_type_list       pkg_os_object.t_object_list   :=   pkg_os_object.gnull_object_list;
     v_entity_role_type_idx        number;
     v_role_type                   number;
     v_entity_rule_check           object_bv_value.business_variable_value%type ;
     v_equivalence_check           CHAR;
 

     cursor c_bats_relatedEntity
     is
          select    DRE.DB_TRX_RELATED_ENTITY_ID, DRE.BILLING_TRANSACTION_SET_ID, DRE.ROLE_TYPE_SET_ID
                    , DRE.ELIGIBILITY_RULE_ID, DRE.ENTITY_EVALUATION_RULE_ID 
                    , DRE.EQUIVALENCE_CHECK  , RSV.ROLE_TYPE_ID
          from      DB_TRX_RELATED_ENTITY DRE, ROLE_TYPE_SET_VALUES RSV--, ROLE_TYPE RT 
          where     1=1
          and       DRE.ROLE_TYPE_SET_ID= RSV.ROLE_TYPE_SET_ID
          --and       RSV.ROLE_TYPE_ID    = RT.ROLE_TYPE_ID
          and       pkg_db_credit_apply.fn_batrxset_type_in_set(v_bats_type , billing_transaction_set_id) = 'T' 
          and       nvl(pkg_os_exp.fn_evaluate_expression(in_session_id,in_transaction_id,in_bats_id,ELIGIBILITY_RULE_ID),'T') = 'T'
          and       nvl(active_tf,'T') = 'T';
     
begin
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Entering sp_create_entityList to identify Entities associated to PTP : '||   in_ptp_id ||
                    ' Billing account Trx set id : ' ||  in_bats_id   ||
                    ' TransactionSet type : ' || v_bats_type     ||
                    ' Parent Billing Account ID : ' || v_billing_account
          );
     end if; 
        
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_ptp_id,
          3340048,--EntityRole Object Type ID
          v_customer_role_type_list
     );

     v_customer_role_type_idx      :=   v_customer_role_type_list.first;
                    
     while v_customer_role_type_idx is not null
     loop
          v_entity_role_id         :=   v_customer_role_type_list(v_customer_role_type_idx);
          v_customer_entity        :=   pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,v_entity_role_id);
          if v_customer_entity is not null
          then
               v_entity_list(v_customer_entity)   :=   v_customer_entity;
          end if;
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    ' Customer Entity ID : '   ||   v_customer_entity 
               );
          end if; 
          v_customer_role_type_idx := v_customer_role_type_list.next(v_customer_role_type_idx);
     end loop;
     
     
     pkg_os_object_search.sp_object_children_of_type_get
     (
          in_session_id,
          in_transaction_id,
          in_ptp_id,
          PKG_DB_CONSTANT.gobjType_PTPPayer,
          v_multipayer_list
     );
          
     v_multipayer_list_index := v_multipayer_list.first;
     while v_multipayer_list_index is not null
     loop
          v_multipayer_entity      :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_multipayer_list(v_multipayer_list_index),32714824);
          if not v_entity_list.EXISTS(v_multipayer_entity) and v_multipayer_entity is not null
          then
               v_entity_list(v_multipayer_entity) :=   v_multipayer_entity;
          end if;
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    ' Payer Entity ID : '   ||   v_multipayer_entity 
               );
          end if; 
          v_multipayer_list_index := v_multipayer_list.next(v_multipayer_list_index);
     end loop;
     
     v_producing_agency       :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,gbv_Policy_RefProdAgency);--producing agency
     v_business_introducer    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,32984148);--businessIntroducer
     v_wholesaler_agency      :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,29418113);--wholesaler
     v_inspection_company     :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,29653246);--inspection company
     v_financial_institution  :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,32465346);--financial institute
     v_carrier_branch         :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,PKG_DB_NIGHTLY_PROCESS.gbv_carrier_branch_id);--CarrierBranch
     v_dept_surcharge         :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,32895948);--surcharge
     v_writing_company        :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,gbv_WritingCompany);--WritingCompany          
     v_tax_collection_agency  :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,in_ptp_id,33854146);--tax authority
     v_primary_insured        :=   pkg_os_object_io.fn_object_bv_path_get(in_session_id,in_transaction_id,in_ptp_id,'27360105.29253414');--CustomerEntity(ptp -> ref acc info -> ce)
     
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               ' Producing Agency ID : '          ||        v_producing_agency            || 
               ' Business Indroducer ID : '       ||        v_business_introducer         || 
               ' Wholesaler Agency ID : '         ||        v_wholesaler_agency           || 
               ' Carrier Branch ID : '            ||        v_carrier_branch              || 
               ' Writing Company ID : '           ||        v_writing_company             || 
               ' Financial Insititute ID : '      ||        v_financial_institution       ||
               ' Insepection Company ID : '       ||        v_inspection_company          ||
               ' Dept of Surcharge ID : '         ||        v_dept_surcharge              ||
               ' Tax Collection Agency ID : '     ||        v_tax_collection_agency       ||
               ' Primary Insured ID : '           ||        v_primary_insured
          );
     end if; 
     
     if not v_entity_list.EXISTS(v_producing_agency) and v_producing_agency is not null
     then
          v_entity_list(v_producing_agency) :=   v_producing_agency;
     end if;
     
     if not v_entity_list.EXISTS(v_business_introducer) and v_business_introducer is not null
     then
          v_entity_list(v_business_introducer) :=   v_business_introducer;
     end if;
     
     if not v_entity_list.EXISTS(v_wholesaler_agency) and v_wholesaler_agency is not null
     then
          v_entity_list(v_wholesaler_agency) :=   v_wholesaler_agency;
     end if;
     
     if not v_entity_list.EXISTS(v_inspection_company) and v_inspection_company is not null
     then
          v_entity_list(v_inspection_company) :=   v_inspection_company;
     end if;
     
     if not v_entity_list.EXISTS(v_financial_institution) and v_financial_institution is not null
     then
          v_entity_list(v_financial_institution) :=   v_financial_institution;
     end if;
          
     if not v_entity_list.EXISTS(v_carrier_branch) and v_carrier_branch is not null
     then
          v_entity_list(v_carrier_branch) :=   v_carrier_branch;
     end if;
     
     if not v_entity_list.EXISTS(v_writing_company) and v_writing_company is not null
     then
          v_entity_list(v_writing_company) :=   v_writing_company;
     end if;
     
     if not v_entity_list.EXISTS(v_dept_surcharge) and v_dept_surcharge is not null
     then
          v_entity_list(v_dept_surcharge) :=   v_dept_surcharge;
     end if;
     
     if not v_entity_list.EXISTS(v_tax_collection_agency) and v_tax_collection_agency is not null
     then
          v_entity_list(v_tax_collection_agency) :=   v_tax_collection_agency;
     end if;
          
     if  v_primary_insured is not null and not v_entity_list.EXISTS(v_primary_insured)
     then
          v_entity_list(v_primary_insured) :=   v_primary_insured;
     end if;
     
     
     for r_bats_relatedEntity in c_bats_relatedEntity
     loop
          
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '|||DB Trx Related Entity ID : '||   r_bats_relatedEntity.DB_TRX_RELATED_ENTITY_ID  ||
                    ' Role Type Set ID : ' || r_bats_relatedEntity.ROLE_TYPE_ID
               );
          end if;    
          v_entity_idx := v_entity_list.first;
          while v_entity_idx is not null
          loop          
               if v_tmp_entity_list.EXISTS(v_entity_idx)
               then
                    v_entity_idx             :=   v_entity_list.next(v_entity_idx);
                    continue;
               end if;
               

               
               v_entity_rule_check :=   pkg_os_exp.fn_evaluate_expression(in_session_id,in_transaction_id,v_entity_list(v_entity_idx),r_bats_relatedEntity.ENTITY_EVALUATION_RULE_ID);
               v_entity_billing_account :=   pkg_os_object_search.fn_object_11_child_get(in_session_id,in_transaction_id,v_entity_list(v_entity_idx),gObjType_BillingAccount);
               v_equivalence_check :=   CASE WHEN r_bats_relatedEntity.EQUIVALENCE_CHECK = 'T' and v_billing_account<>v_entity_billing_account
                                        THEN 'F' 
                                        ELSE 'T' 
                                        END;
               
               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '|||||| inside Related Entity Cursor    DB Trx Related Entity ID : '||   r_bats_relatedEntity.DB_TRX_RELATED_ENTITY_ID ||
                         ' checking for entity id : ' || v_entity_list(v_entity_idx) ||
                         ' against rule id : ' || r_bats_relatedEntity.ENTITY_EVALUATION_RULE_ID ||
                         ' Entity Rule Check : ' || v_entity_rule_check ||
                         ' Entity Billing Account : ' || v_entity_billing_account ||
                         ' Equivalence check : ' || v_equivalence_check
                    );
               end if;
               
               if nvl(v_entity_rule_check,'T') ='T' and nvl(v_equivalence_check, 'T') = 'T'
               then
                    
                    v_entity_role_type_list.delete;
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_entity_list(v_entity_idx),
                         3340048,--EntityRole Object Type ID
                         v_entity_role_type_list
                    );
                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              'Found Entity Role count : '||   v_entity_role_type_list.count
                         );
                    end if;  
                    v_entity_role_type_idx      :=   v_entity_role_type_list.first;     
                    while v_entity_role_type_idx is not null
                    loop        
                         v_role_type    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_entity_role_type_list(v_entity_role_type_idx),34026746);
                         if v_session_control.gLogging_Full 
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id, 
                                   in_transaction_id, 
                                   v_procedure_name,
                                   'Entity ID : '      ||   v_entity_list(v_entity_idx)   ||
                                   ' Entity Role ID : '||   v_entity_role_type_list(v_entity_role_type_idx) ||
                                   ' its role type : ' ||   v_role_type    ||
                                   ' In config : '     ||   r_bats_relatedEntity.ROLE_TYPE_ID
                              );
                         end if; 
                         if   r_bats_relatedEntity.ROLE_TYPE_ID  =    v_role_type
                         then
                              io_entity_list(v_count)            :=   v_entity_list(v_entity_idx);
                              v_count                            :=   v_count + 1;  
                              v_tmp_entity_list(v_entity_idx)    :=   v_entity_list(v_entity_idx); 
                              if v_session_control.gLogging_Full 
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        'Matched Entity ID : '      ||   v_entity_list(v_entity_idx)
                                   );
                              end if; 
                              exit;
                         end if;
                         if   v_role_type    =    2146 --primary insured
                         then
                              io_entity_list(v_count)            :=   v_entity_list(v_entity_idx);
                              v_count                            :=   v_count + 1;  
                              v_tmp_entity_list(v_entity_idx)    :=   v_entity_list(v_entity_idx);  
                              if v_session_control.gLogging_Full 
                              then
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id, 
                                        in_transaction_id, 
                                        v_procedure_name,
                                        'Matched Entity ID : '      ||   v_entity_list(v_entity_idx)
                                   );
                              end if;
                              exit;
                         end if;
                         v_entity_role_type_idx := v_entity_role_type_list.next(v_entity_role_type_idx);
                    end loop;
               end if;
               v_entity_idx             :=   v_entity_list.next(v_entity_idx);   
          end loop;
     end loop;
     
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Exiting sp_create_entityList with Entity count : '|| io_entity_list.count
          );
     end if;
end sp_create_entityList;


--UTPRODUCT-3610
procedure sp_create_relatedPolicyEntity
(
     in_session_id               in             object.object_id%type,
     in_transaction_id           in             object.object_id%type,
     in_object_id                in             object.object_id%type,
     in_object_type              in             object.object_id%type default null
)
is
     v_session_control                  pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                   constant system_log.program_name%type   := pkg_name||'sp_create_relatedPolicyEntity';
     v_action_object_type               object_bv_value.business_variable_value%type ;
     
     v_PTP_list                         pkg_os_object.t_object_list   := pkg_os_object.gnull_object_list;
     v_entity_list                      pkg_os_object.t_object_list ;
     v_new_entity_list                  v_object_list;--pkg_os_object.t_object_list  := pkg_os_object.gnull_object_list;
     v_ref_coverage_id                  object.object_id%type;
     v_ref_PolicyTransaction_id         object.object_id%type; 
     v_recent_PolicyTransaction_id      object.object_id%type;
     v_related_entity_id                object.object_id%type;
     v_entity_index                     object.object_id%type;
     v_ptp_index                        object.object_id%type;
     v_index                            number:=0;
     v_bats_parent                      object.object_id%type;
     v_ult_parent                       object.object_id%type;
     v_entity_id                        object.object_id%type;
     v_ult_parent_type                  object_bv_value.business_variable_value%type ;
     v_bats_parent_type                 object_bv_value.business_variable_value%type ;
     v_tmp_entity_list                  v_object_list   := gnull_object_list;
     v_carrier_id                       object.object_id%type;
     v_writing_company                  object.object_id%type;
     v_usersession_exchange_id          object.object_id%type;
     
     cursor c_related_policies
     is
          select    distinct policy_id 
          from      dragon_fichange 
          where     billingaccounttrxset_id  =    in_object_id 
          and       policy_id is not null
          ;

begin

     v_action_object_type     :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id,
                                        pkg_os_constant_bv.gbv_GenObjObjectType
                                   ); 

     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               '|||||| Entering to create related policy entity objects under'||in_object_id
               || ' BATS of type :'||v_action_object_type 
               || 'for objects of type:'|| in_object_type
          );
     end if;     

     if v_action_object_type = pkg_os_constant.gobjType_PolicyTransaction --629
     then

          v_ref_coverage_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               gbv_PolicyTrx_RefCoverages-- ref coverage
          );

          v_PTP_list(0):=v_ref_coverage_id;                         

     elsif v_action_object_type = gObjType_BillingAccountTrxSet 
     then
          v_ref_PolicyTransaction_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_object_id,
               gbv_BillAccTrxSet_RefPolTrx-- ref_PT
          ); --get action object type

          if  v_ref_PolicyTransaction_id is not null 
          then
               v_ref_coverage_id := pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_ref_PolicyTransaction_id,
                    gbv_PolicyTrx_RefCoverages-- ref coverage
               );
               v_PTP_list(0):=v_ref_coverage_id;   
          else
               for r_policies in c_related_policies
               loop
                    v_recent_PolicyTransaction_id :=   pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            r_policies.policy_id,
                                                            pkg_db_constant.gbv_Policy_RefMostRctFuncTrx-- most recent functional transaction
                                                       );

                    v_ref_coverage_id :=     pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_recent_PolicyTransaction_id,
                                                  gbv_PolicyTrx_RefCoverages-- ref coverage
                                             );

                    if v_session_control.gLogging_Full 
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name,
                              '|||||| looping policies picked : policy id: '||r_policies.policy_id||
                              ' most recent processed transaction:'||v_recent_PolicyTransaction_id||
                              'PTP id: '||v_ref_coverage_id
                         );
                    end if;                     
                    v_PTP_list(v_index):=v_ref_coverage_id;
                    v_index := v_index+1; 
               end loop;
          end if;                           
          
     end if;

     if v_PTP_list.count = 0 and in_object_type is null
     then
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    'No PTP associated to the Billing Account Transaction Set.'
               );
          end if;  
          v_usersession_exchange_id     :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_session_id,
                                                  gbv_UserSessionRefConnectedTO
                                             );

          v_carrier_id                  :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_usersession_exchange_id,
                                                  gbv_ExchangeRefSponsorPartner
                                             );

          if v_carrier_id is not null 
          then
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_constant.gObjType_RelatedPolicyEntity,
                    in_object_id,
                    v_related_entity_id
               );

               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '|||||| Entity picked  '|| v_entity_id ||' created object:'||v_related_entity_id
                    );
               end if;  

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_related_entity_id,
                    pkg_db_constant.gbv_RelPolEntity_Ref_Entity,-- ref entity
                    v_carrier_id
               ); 
          end if;
          
          v_writing_company             :=   pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_usersession_exchange_id,
                                                  33907946--writing company
                                             );
          if v_writing_company is not null
          then
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_constant.gObjType_RelatedPolicyEntity,
                    in_object_id,
                    v_related_entity_id
               );

               if v_session_control.gLogging_Full 
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '|||||| Entity picked  '|| v_entity_id ||' created object:'||v_related_entity_id
                    );
               end if;  

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_related_entity_id,
                    pkg_db_constant.gbv_RelPolEntity_Ref_Entity,-- ref entity
                    v_writing_company
               ); 
          end if;
     end if;
     
     v_bats_parent       :=   pkg_os_object.fn_object_parent_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   pkg_os_object.fn_object_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id
                                   )
                              );
     v_bats_parent_type  :=   pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_bats_parent,
                                   pkg_os_constant_bv.gbv_GenObjObjectType
                              );
     if  v_bats_parent_type = 63
     then
          v_entity_id    :=   v_bats_parent;
     else
          v_ult_parent        :=   pkg_os_object_search.fn_object_ultimate_parent_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_object_id
                                   );
          v_ult_parent_type   :=   pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_ult_parent,
                                        pkg_os_constant_bv.gbv_GenObjObjectType
                                   );
          if v_ult_parent_type = 63
          then
               v_entity_id    :=   v_ult_parent;   
          else
               v_entity_id    :=   pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_ult_parent,29253414);
          end if;
     end if;
     
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id, 
               in_transaction_id, 
               v_procedure_name,
               'Entity ID : ' || v_entity_id
          );
     end if;  
     
     if v_entity_id is not null and in_object_type is null
     then     
          
          v_tmp_entity_list(v_entity_id)     :=        v_entity_id;
          
          pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_constant.gObjType_RelatedPolicyEntity,
                    in_object_id,
                    v_related_entity_id
               );

          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '|||||| Entity picked  '|| v_entity_id ||
                    ' created object:'||v_related_entity_id
               );
          end if;  

          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_related_entity_id,
               pkg_db_constant.gbv_RelPolEntity_Ref_Entity,-- ref entity
               v_entity_id
          ); 
     end if;
     
     v_ptp_index := v_PTP_list.first;
     
     while v_ptp_index is not null
     loop

          v_entity_list := pkg_os_object.gnull_object_list;      
          
          if in_object_type is not null
          then
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_PTP_list(v_ptp_index),
                    in_object_type,
                    v_entity_list
               );
          -----------------------------------------------------------------------------------------
          else
               sp_create_entityList(in_session_id,in_transaction_id,in_object_id,v_PTP_list(v_ptp_index),v_entity_list);
          end if;
          -----------------------------------------------------------------------------------------
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id, 
                    in_transaction_id, 
                    v_procedure_name,
                    '|||||| looping policy images picked : For  PTP id: '||v_PTP_list(v_ptp_index)||
                    ' found entities:'||v_entity_list.count
               );

          end if;                   

          v_entity_index := v_entity_list.first;

          while v_entity_index is not null
          loop

               if v_tmp_entity_list.EXISTS(v_entity_list(v_entity_index))
               then
                    v_entity_index := v_entity_list.next(v_entity_index);
                    continue;
               end if;
               
               v_tmp_entity_list(v_entity_list(v_entity_index))  :=   v_entity_list(v_entity_index);
               
               pkg_os_object.sp_object_create
               (
                    in_session_id,
                    in_transaction_id,
                    pkg_db_constant.gObjType_RelatedPolicyEntity,
                    in_object_id,
                    v_related_entity_id
               );

               if v_session_control.gLogging_Full then

                    pkg_os_logging.sp_log
                    (
                         in_session_id, 
                         in_transaction_id, 
                         v_procedure_name,
                         '|||||| looping Entity picked  '||v_entity_list(v_entity_index)||
                         ' created object:'||v_related_entity_id
                    );

               end if;  

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_related_entity_id,
                    pkg_db_constant.gbv_RelPolEntity_Ref_PTP,-- ref coverage
                    v_PTP_list(v_ptp_index)
               );   

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    v_related_entity_id,
                    pkg_db_constant.gbv_RelPolEntity_Ref_Entity,-- ref entity
                    v_entity_list(v_entity_index)
               );              

               v_entity_index := v_entity_list.next(v_entity_index);
          end loop;
          v_ptp_index := v_PTP_list.next(v_ptp_index);
     end loop;

end sp_create_relatedPolicyEntity;
	 
--OSPRODUCT-9914
procedure sp_autonomous_workflow
(
     in_session_id               in             object.object_id%type,
     in_transaction_id           in             object.object_id%type,
     in_action_id                in             object.object_id%type,
     in_action_object_id         in             object.object_id%type,
     in_outcome_id               in             object.object_id%type
)
is
     v_session_control                 pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                  constant system_log.program_name%type   := pkg_name||'sp_autonomous_workflow';
     v_object_cache                    pkg_os_object_cache.t_object_cache;
     v_outcome                         number;
     v_action                          number;
     v_action_object                   number;
     mini_exception                    exception;
     pragma	                        autonomous_transaction;

begin
     
     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Entering to create task with action: ' || in_action_id
          );
     end if;

     pkg_db_object.sp_process_action_mini
     (
          in_session_id,
          in_transaction_id,
          in_action_id,
          in_action_object_id,
          v_object_cache,
          v_outcome,
          v_action,
          v_action_object
     );
     
     if v_outcome <> pkg_os_constant.gOutcome_OK then
          raise mini_exception;
     end if;

     
     if v_session_control.gLogging_Full then
          pkg_os_logging.sp_log_error
          (
               in_session_id, in_transaction_id, v_procedure_name,
               '.. Task created for object: ' || in_action_object_id
          );
     end if;

     
     commit;
     
exception
     when others then
          rollback;

end sp_autonomous_workflow;

--OSPRODUCT-9914

--OSPRODUCT-11365
procedure sp_sync_fininst_acc_to_partner
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_object_id                  in             object.object_id%type,
     io_action_outcome_id          in out         outcome.outcome_id%type
)
is

     v_session_control                            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                             constant system_log.program_name%type   := pkg_name||'sp_sync_fininst_acc_to_partner';
     v_finance_institute_partner_id               object.object_id%type;
     v_partner_creation_date                      date;
     v_finance_institute_account_id               object.object_id%type;
     v_datamart_tf                                char(1)   :=   'T';
     
begin

     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '|||||| Entering for Resyncing Default Financial Institution Partner and Account'
          );

     end if;
     
     v_finance_institute_partner_id     :=   pkg_os_object_io.fn_object_bv_path_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_object_id,
                                                  '21814301.32031319'
                                             );
                                             
     v_partner_creation_date            :=   to_date
                                             (
                                                  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_finance_institute_partner_id,
                                                       pkg_os_constant_bv.gbv_GenObjCreationDate
                                                  )
                                                  ,pkg_os_constant.DragonDateFormatDefault
                                             ); 
                                             
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Default financial institution partner : '||v_finance_institute_partner_id||
               ' creation date : '||to_char(v_partner_creation_date,pkg_os_constant.DragonDateFormatDefault)
          );

     end if;

     begin
          
          select 
               dba.billingaccount_id
          into
               v_finance_institute_account_id
          from 
               dragon_billingaccount dba
          where
               dba.account_type_id = pkg_db_constant.gBillAccType_FinanInst
          and
               dba.partner_name is null
          and
               trunc(dba.creation_date) = trunc(v_partner_creation_date);
               
     exception when others
     then
     
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Unable to find the corresponding billing account for default financial institution partner : '||v_finance_institute_partner_id
          );
          
          io_action_outcome_id := pkg_db_auto_funds_transfer.gOutcome_NoRecordFound;
          
     end;
     
     if v_session_control.gLogging_Full
     then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Found the corresponding billing account : '||v_finance_institute_account_id
          );

     end if;
     
     if v_finance_institute_account_id is not null
     then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               v_finance_institute_account_id,
               gbv_BillingAccountParent,
               v_finance_institute_partner_id
          );

          pkg_os_datamart.sp_datamart_update_row
          (
               in_session_id,
               in_transaction_id,
               v_finance_institute_account_id,
               v_datamart_tf
          );
          
          io_action_outcome_id := pkg_os_constant.gOutcome_OK;
     
     else
     
          pkg_os_logging.sp_log_error
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '... Unable to find the corresponding billing account for default financial institution partner : '||v_finance_institute_partner_id
          );
          
          io_action_outcome_id := pkg_db_auto_funds_transfer.gOutcome_NoRecordFound;     
          
     end if;

end sp_sync_fininst_acc_to_partner; 

--OSPRODUCT-11765
procedure sp_update_next_invoice_date
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_id                  in             object.object_id%type,
     in_policy_term_id             in             object.object_id%type,
     in_bats_id                    in             object.object_id%type--OSPRODUCT-14316
)
is
     v_session_control                            pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_procedure_name                             constant system_log.program_name%type   := pkg_name||'sp_update_next_invoice_date';
     v_datamart_tf                                char(1)   :=   'T';
     v_term_payer_list                            pkg_db_multipayer.t_payer_tab;
     v_idx                                        long;
     v_next_invoice_date                          object_bv_value.business_variable_value%type;
     v_min_next_invoice_create_dt                 object_bv_value.business_variable_value%type;--OSPRODUCT-11804
     v_bill_plan_id                               object.object_id%type; --OSPRODUCT-12255
     v_entity_or_partner                          object.object_id%type;--OSPRODUCT-14316
     v_termpayer_entity                           object.object_id%type;--OSPRODUCT-14316
	v_batch_type_id                              number;
     v_policy_trx_tf                              char(1) := 'F';

begin

	-- OSPRODUCT-14577
     v_batch_type_id := pkg_os_object_io.fn_object_bv_get
                        (
                              in_session_id,
                              in_transaction_id,
                              in_bats_id,
                              gbv_FITrxSet_BatchType
                        );
				    
	if pkg_db_object.fn_batrxset_type_in_set (v_batch_type_id, gPoltrxSetId) = 'T'
     then
          v_policy_trx_tf := 'T';
     end if;

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '...... Updating the Next Invoice Date for Policy ID: '|| in_policy_id||
               ' Policy Term ID: ' || in_policy_term_id ||
               ' Batch Type ID: '  || v_batch_type_id   ||
               ' Policy Transaction?: ' || v_policy_trx_tf
          );

     end if;
     -- end OSPRODUCT-14577

     -- #MP
     if pkg_db_multipayer.fn_multipayer_mode_tf
          (
               in_session_id,
               in_transaction_id,
               in_policy_id
          )
     then

          
          v_entity_or_partner := pkg_os_object.fn_object_parent_get
                                  (
                                       in_session_id,
                                       in_transaction_id,
                                       pkg_os_object.fn_object_parent_get(in_session_id,in_transaction_id,in_bats_id)
                                  );--OSPRODUCT-14316
          
          
          v_term_payer_list.delete;

          --
          -- Get a list of payers from Policy Term level
          --
          pkg_db_multipayer.sp_policy_term_payers_get
          (
               in_session_Id           =>    in_session_id,
               in_transaction_id       =>    in_transaction_id,
               in_policy_term_id       =>    in_policy_term_id,
               io_payer_list           =>    v_term_payer_list,             -- indexed list of payers. List of payer of payer records r_payer inedexed by  in_index_by.
               in_print_list           =>    'Y',
               in_index_by             =>    pkg_db_multipayer.g_PayerGet_idx_BilingAccount
          );

          v_idx := v_term_payer_list.first;

          while v_idx is not null
          loop

               v_termpayer_entity := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id, 
                                          in_transaction_id,
                                          v_term_payer_list(v_idx).PTPayer_object_id, pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr 
                                     );--OSPRODUCT-14316
               
               if v_session_control.gLogging_Full then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.....Entity object ID with which payer is associated: '|| v_termpayer_entity ||
                         ' Entity object ID with which BATS is associated: '|| v_entity_or_partner
                    );
               end if;
               
               v_next_invoice_date :=   pkg_db_stmt_date.fn_get_next_invoice_date
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_policy_id,
                                             in_policy_term_id,
                                             in_payer_id => v_term_payer_list(v_idx).PayerEntity_object_id
                                        );
                                        
               if v_session_control.gLogging_Full then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         ' NID: ' || v_next_invoice_date
                    );
                    
               end if;

               --
               -- Set the value of Next Invoice Create Date Business Variable in Policy Term Payer object
               --
               -- OSPRODUCT-14577 Added the condition
               if v_policy_trx_tf = 'T'
                  or
                  (
                       v_policy_trx_tf = 'F'
                       and
                       v_termpayer_entity = v_entity_or_partner--OSPRODUCT-14316
                  )
               then
                    
                    sp_ba_object_bv_set--pkg_os_object_io.sp_object_bv_set--OSPRODUCT-14316
                    (
                         in_session_id,
                         in_transaction_id,
                         v_term_payer_list(v_idx).PTPayer_object_id,
                         PKG_DB_MULTIPAYER.gbv_PolicyTerm_Payer_NID,
                         v_next_invoice_date
                    );
                    
               end if;
               
               if v_min_next_invoice_create_dt is null
               then
                    
                    v_min_next_invoice_create_dt := v_next_invoice_date;

               else

                    if v_min_next_invoice_create_dt > v_next_invoice_date then --OSPRODUCT-14577
                         
                         v_min_next_invoice_create_dt := v_next_invoice_date;

                    end if ;

               end if;

               --OSPRODUCT-12255
               v_bill_plan_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_term_payer_list(v_idx).PTPayer_object_id, pkg_db_payment_arrangement.gbv_Ref_TermPayerPrefBillPlan);

               pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_bill_plan_id, v_datamart_tf);
               --OSPRODUCT-12255
               
               if v_session_control.gLogging_Full
               then
                    
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...... Updating the Next Invoice Date for BillPlan ID: '|| v_bill_plan_id
                    );
               
               end if;
                       
               v_idx := v_term_payer_list.next(v_idx);
               
          end loop;

          sp_ba_object_bv_set--pkg_os_object_io.sp_object_bv_set--OSPRODUCT-14316
          (
               in_session_id,
               in_transaction_id,
               in_policy_term_id,
               pkg_db_stmt.gbv_PolicyTerm_NextInvoiceDate,
               v_min_next_invoice_create_dt
          );

          v_next_invoice_date := v_min_next_invoice_create_dt;
		-- end OSPRODUCT-14577

     else

          v_next_invoice_date :=   pkg_db_stmt_date.fn_get_next_invoice_date
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_id,
                                        in_policy_term_id
                                   );

          sp_ba_object_bv_set--pkg_os_object_io.sp_object_bv_set--OSPRODUCT-14316
          (
               in_session_id,
               in_transaction_id,
               in_policy_term_id,
               pkg_db_statement.gbv_policyterm_nextinvoicedate,
               v_next_invoice_date
          );

           --OSPRODUCT-12255
           v_bill_plan_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_policy_term_id, pkg_db_payment_arrangement.gbv_Ref_TermCurrentPmntArngmnt);

           pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_bill_plan_id, v_datamart_tf);
           --OSPRODUCT-12255

          if v_session_control.gLogging_Full
          then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...... Next Invoice date logic: in_master_policy_id: '||in_policy_id||
                    ' fn_get_next_invoice_date '||v_next_invoice_date||
                    'v_bill_plan_id ' || v_bill_plan_id ||
                    ' ... Policy Term id# '||in_policy_term_id||
                    ' BV get next invoice date '||pkg_os_object_io.fn_object_bv_path_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_policy_term_id,
                                                       pkg_db_statement.gbv_policyterm_nextinvoicedate
                                                  )
               );

          end if;

     end if;

     begin

          update
               dragon_policy_term
          set
               next_invoice_date = to_char(v_next_invoice_date,pkg_os_constant.DragonDateFormatDefault)
          where
               policy_term_id = in_policy_term_id;

     exception
          when others then

               pkg_os_datamart.sp_datamart_update_row
               (
                    in_session_id,
                    in_transaction_id,
                    in_policy_term_id,
                    v_datamart_tf
               );

     end;

end sp_update_next_invoice_date;

-- OSPRODUCT-8769
procedure sp_ba_lastupdatedate_dm_upd
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type
)
is

     v_procedure_name			system_log.program_name%type	  := pkg_name||'sp_ba_lastupdatedate_dm_upd';   
     
     cursor c_billingaccount is
          select b.billingaccount_id
            from dragon_billingaccount b, object o
           where b.billingaccount_id = o.object_id
             and b.last_updation_date <> to_date(o.last_updated_date,'YYYYMMDDHH24MISS');  
     
     type t_billingaccount is table of c_billingaccount%rowtype index by binary_integer;
     v_billingaccount t_billingaccount;   
     
begin
     
     open c_billingaccount;          
     loop
          
          --fetch the record into the collection with the limit of 5000
          fetch c_billingaccount bulk collect into v_billingaccount limit 500;
          
          ---dbms_output.put_line ('Count: ' || v_billingaccount.count);
          
          --exit loop, if no records returned from the cursor
          exit when v_billingaccount.count = 0;
            
          -- start forall loop to perform DML operation in bulk
          forall i in v_billingaccount.first .. v_billingaccount.last save exceptions
            
               update
               dragon_billingaccount db
               set db.last_updation_date =
                      (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
                         from object o
                        where o.object_id = db.billingaccount_id)
               where db.billingaccount_id = v_billingaccount(i).billingaccount_id;
          
     end loop;
     
     close c_billingaccount;
     
     /*update dragon_billingaccount db
        set last_updation_date =
            (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
               from object o
              where o.object_id = db.billingaccount_id
                and to_date(o.last_updated_date, 'YYYYMMDDHH24MISS') <> db.last_updation_date
                and o.object_type_id = v_object_type_id)
      where exists (select 1
               from object o2
              where o2.object_id = db.billingaccount_id
                and to_date(o2.last_updated_date, 'YYYYMMDDHH24MISS') <> db.last_updation_date
                and o2.object_type_id = v_object_type_id);*/
     
end sp_ba_lastupdatedate_dm_upd;

procedure sp_fitem_lastupdatedate_dm_upd
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type
)
is

	v_procedure_name			system_log.program_name%type	  := pkg_name||'sp_fitem_lastupdatedate_dm_upd';     
     
     cursor c_fitem 
     is
          select fitem_id
            from dragon_fitem f, object o
           where f.fitem_id = o.object_id
             and f.fitem_last_upt_date <> to_date(o.last_updated_date,'YYYYMMDDHH24MISS');
                                     

     type t_fitem is table of c_fitem%rowtype index by binary_integer;
     v_fitem t_fitem;  
     
begin
     
     open c_fitem;
              
     loop 
            
          --fetch the record into the collection with the limit of 5000
          fetch c_fitem bulk collect into v_fitem limit 5000;
          
          --exit loop, if no records returned from the cursor
          exit when v_fitem.count = 0;
            
          -- start forall loop to perform DML operation in bulk
          forall i in v_fitem.first .. v_fitem.last save exceptions
            
               update
               dragon_fitem df
               set fitem_last_upt_date =
                      (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
                         from object o
                        where o.object_id = df.fitem_id)
               where df.fitem_id = v_fitem(i).fitem_id;
          
     end loop;
     
     close c_fitem;
     
     /*update dragon_fitem df
        set fitem_last_upt_date =
            (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
               from object o
              where o.object_id = df.fitem_id
                and to_date(o.last_updated_date, 'YYYYMMDDHH24MISS') <> df.fitem_last_upt_date
                and o.object_type_id = 2365246)
      where exists (select 1
               from object o2
              where o2.object_id = df.fitem_id
                and to_date(o2.last_updated_date, 'YYYYMMDDHH24MISS') <> df.fitem_last_upt_date
                and o2.object_type_id = 2365246);*/
     
end sp_fitem_lastupdatedate_dm_upd;

procedure sp_fic_lastupdatedate_dm_upd
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type
)
is

	v_procedure_name			system_log.program_name%type	  := pkg_name||'sp_fic_lastupdatedate_dm_upd';
     
     cursor c_fichange is
          select fi.fichange_id
            from dragon_fichange fi, object o
           where fi.fichange_id = o.object_id
             and fi.fichange_last_upt_date <> to_date(o.last_updated_date, 'YYYYMMDDHH24MISS');
                                     
     type t_fichange is table of c_fichange%rowtype index by binary_integer;
     v_fichange t_fichange;
     
begin
     
     open c_fichange;          
     loop   
          --fetch the record into the collection with the limit of 5000
          fetch c_fichange bulk collect into v_fichange limit 5000;
          
          --dbms_output.put_line ('Count: ' || v_fichange.count);
          
          --exit loop, if no records returned from the cursor
          exit when v_fichange.count = 0;
            
          -- start forall loop to perform DML operation in bulk
          forall i in v_fichange.first .. v_fichange.last save exceptions
            
               update
               dragon_fichange fi
               set fi.fichange_last_upt_date =
                      (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
                         from object o
                        where o.object_id = fi.fichange_id)
               where fi.fichange_id = v_fichange(i).fichange_id;
        
          --close the loop
          
     end loop;
     
     close c_fichange;
     
end sp_fic_lastupdatedate_dm_upd;

procedure sp_bats_lastupdatedate_dm_upd
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type
)
is

	v_procedure_name			system_log.program_name%type	  := pkg_name||'sp_bats_lastupdatedate_dm_upd';
     
     cursor c_bats is
          select bats.billingaccounttrxset_id
            from dragon_billingaccounttrxset bats, object o
           where bats.billingaccounttrxset_id = o.object_id
             and bats.last_update_date <> to_date(o.last_updated_date, 'YYYYMMDDHH24MISS');
                                     
     type t_bats is table of c_bats%rowtype index by binary_integer;
     v_bats t_bats;
     
begin
     
     open c_bats;          
     loop   
          --fetch the record into the collection with the limit of 5000
          fetch c_bats bulk collect into v_bats limit 1000;
          
          --dbms_output.put_line ('Count: ' || v_bats.count);
          
          --exit loop, if no records returned from the cursor
          exit when v_bats.count = 0;
            
          -- start forall loop to perform DML operation in bulk
          forall i in v_bats.first .. v_bats.last save exceptions
            
               update
               dragon_billingaccounttrxset bats
               set bats.last_update_date =
                      (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
                         from object o
                        where o.object_id = bats.billingaccounttrxset_id)
               where bats.billingaccounttrxset_id = v_bats(i).billingaccounttrxset_id;
          
     end loop;
     
     close c_bats;
     
end sp_bats_lastupdatedate_dm_upd;

procedure sp_fitrx_lastupdatedate_dm_upd
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type
)
is

	v_procedure_name			system_log.program_name%type	  := pkg_name||'sp_fitrx_lastupdatedate_dm_upd';
     
     cursor c_fitrx is     
          select fitrx.fitransaction_id
            from dragon_fitransaction fitrx, object o
           where fitrx.fitransaction_id = o.object_id
             and fitrx.fitransaction_last_upd_dt <> to_date(o.last_updated_date, 'YYYYMMDDHH24MISS');
                                     
     type t_fitrx is table of c_fitrx%rowtype index by binary_integer;
     v_fitrx t_fitrx;  
     
begin
     
     open c_fitrx;          
     loop
          
          --fetch the record into the collection with the limit of 5000
          fetch c_fitrx bulk collect into v_fitrx limit 1000;
          
          --dbms_output.put_line ('Count: ' || v_fitrx.count);
          
          --exit loop, if no records returned from the cursor
          exit when v_fitrx.count = 0;
            
          -- start forall loop to perform DML operation in bulk
          forall i in v_fitrx.first .. v_fitrx.last save exceptions
            
               update
               dragon_fitransaction fitrx
               set fitrx.fitransaction_last_upd_dt =
                      (select to_date(o.last_updated_date, 'YYYYMMDDHH24MISS')
                         from object o
                        where o.object_id = fitrx.fitransaction_id)
               where fitrx.fitransaction_id = v_fitrx(i).fitransaction_id;
          
     end loop;
     
     close c_fitrx;
     
end sp_fitrx_lastupdatedate_dm_upd;
-- OSPRODUCT-8769

-- OSPRODUCT-12390
function fn_default_currency_get(
	in_session_id				in	object.object_id%type,
	in_transaction_id			in	object.object_id%type
)
return currency.currency_id%type
is

     v_procedure_name	     constant system_log.program_name%type := pkg_name||'fn_default_currency_get';

     v_exchange_id            object.object_id%type := pkg_os_wf_session.fn_exchange_get(in_session_id,in_transaction_id);

     v_exchange_currency_id   object_bv_value.business_variable_value%type;

begin

     v_exchange_currency_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          v_exchange_id,
          pkg_os_monetary.gBV_ExchangeDefaultCurrencyID
     );

     if v_exchange_currency_id is null
     then

          -- We cannot hardcode the currency ID since it may be different for each installation.
          raise no_data_found;

     end if;

     return v_exchange_currency_id;

end fn_default_currency_get;

-- UTPRODUCT-4841
procedure sp_intalment_invocie_flag_set
(
     in_session_id               object.object_id%type,
     in_transaction_id           object.object_id%type,
     in_billing_account_id       object.object_id%type,
     in_billingaccounttrxset_id  object.object_id%type,
     in_current_date          in             date default null
)
is

      cursor c_due_fitems
          (
               cin_billingacounttrxset_id         object.object_id%type
          )
          is
               select
                    dc.fitem_id
               from
                    dragon_fichange dc,
                    dragon_scheduled_installment dsi
               where
                    dc.billingaccounttrxset_id =cin_billingacounttrxset_id
               and
                    dc.installment =  dsi.installment_id  -- UTPRODUCT-4851
               and
                    pkg_os_object_io.fn_object_bv_get
                    (
                         in_session_id,
                         in_transaction_id,
                         dsi.installment_id,
                         pkg_db_billing_modify.gbv_Installment_balance
                     )   =  0                -- UTPRODUCT-4851
               and
                    dc.installment >0 ;


     v_fitem_row                        dragon_fitem%rowtype;
     v_recon_index                      varchar2(100);
     io_fitem_list                      pkg_db_stmt.t_fitem_list;
     o_fitem_table                      pkg_db_stmt_acct_rollup.fitem_table;

     -- TBD
     v_statement_rollup_level           object_bv_value.business_variable_value%type;
     v_rollup_level                     number;

begin

     for v_f_rec in c_due_fitems( ---in_billing_account_id,
                                   in_billingaccounttrxset_id )
     loop

          v_fitem_row    :=   pkg_db_object.fn_fitem_row(in_session_id,in_transaction_id,v_f_rec.fitem_id);
          v_recon_index  :=   pkg_db_stmt_acct_rollup.fn_rollup_index_get
                              (
                                   in_session_id,
                                   in_transaction_id ,
                                   v_statement_rollup_level,
                                   v_rollup_level,
                                   v_fitem_row,
                                   in_current_date
                              );

          pkg_db_stmt_acct_rollup.sp_fitem_list_update(io_fitem_list, o_fitem_table,v_fitem_row,v_recon_index );

     end loop;

     pkg_db_stmt_acct_rollup.sp_invoice_financials
     (
          in_session_id,
          in_transaction_id,
          in_billing_account_id,
          in_billingaccounttrxset_id,
          io_fitem_list, -- io Fitem List
          o_fitem_table,
          in_current_date --OSBILLING-4893
     );


end sp_intalment_invocie_flag_set;
-- UTPRODUCT-4841
------------------------------------------------------------------------------------
--OSPRODUCT-13275 start
function fn_subj_basis_image_get
(
     in_session_id                 in             object.object_id%type,
     in_transaction_id             in             object.object_id%type,
     in_policy_id                  in             object.object_id%type,
     in_transaction_class_id       in             number,
     in_effective_date             in             varchar2,
     out_transaction_id            out            object.object_id%type,
     in_after_tf                   in             char,
     in_exclude_transaction_id     in             object.object_id%type
)

return char
is
     v_procedure_name              constant  system_log.program_name%type  := 'fn_subj_basis_image_get';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id) ;
     v_object_list                 pkg_os_object.t_object_list             := pkg_os_object.gnull_object_list;
     v_object_index                number                                  := null;
     v_transaction_id              object.object_id%type                   := null;
     v_trx_type_id                 object_bv_value.business_variable_value%type;
     v_trx_object_state_id         object_bv_value.business_variable_value%type;
     v_trx_effective_date          date;
     v_in_effective_date           date;
     v_subj_count                  number;
     gObj_State_pending            number    :=   31715;
     g_TrxType_Nb                  number    :=   9;
     g_TrxType_Renewal             number    :=   8;
     g_TrxType_Rewrite             number    :=   3604;
     g_TrxType_NbRewrite           number    :=   5099;
     v_pending_cancel_id           object.object_id%type ; 

begin

     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Inside FN_BASIS_IMAGE_GET, For policy ID : '||in_policy_id ||
               ' Transaction Class ID : '||in_transaction_class_id||
               ' After? : '||in_after_tf ||
               ' Effective Date : ' || in_effective_date ||
               ' Exclude Trx ID : ' || in_exclude_transaction_id
          );
     end if;
     
     select    nvl(count(1),0)
     into      v_subj_count
     from      dragon_policy_trx ptrx
     where     ptrx.policy_trx_type_id in (g_TrxType_Nb, g_TrxType_Renewal, g_TrxType_Rewrite, g_TrxType_NbRewrite)
     and       ptrx.policy_trx_object_state_id = gObj_State_pending 
     and       ptrx.policy_id = in_policy_id;
     
     if v_session_control.gLogging_Full 
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Subjectivity Count return(0-No, 1- Yes) : '|| v_subj_count
          );
     end if;
     
     if v_subj_count = 0
     then
          return 'F';
     end if;
     
     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '||| Searching for closest transaction matching ClassID:'||in_transaction_class_id||
               ' Date:'||in_effective_date||
               ' After?:'||in_after_tf
          );

     end if;

     -- Check whether this is cancellation due to late process or not 

     if  pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_exclude_transaction_id, pkg_os_policy_transaction.gbv_PolicyTrxType ) = 2 
     then
         v_pending_cancel_id := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  pkg_os_object.fn_object_parent_get (in_session_id, in_transaction_id, in_exclude_transaction_id),30792946); --_Reference_CurrentPolicyPendingCancellation 

         if v_pending_cancel_id is null 
         then
            return 'F';
          else
            -- Identify whether this pending cancel is by late process of UW
            if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id,  pkg_os_object.fn_object_parent_get (in_session_id, in_transaction_id, v_pending_cancel_id),32884848) is not null --PolicyTransaction Created by UI Indicator
            then
               return 'F';
            end if;

          end if;
          
     end if;
     
	 v_in_effective_date := to_date(in_effective_date, pkg_os_constant.DragonDateFormatDefault);

     --
     --   Make use of the Customized proc for retrieving the Policy Trx list based on
     --   GenObjInstanceNumber + Policy Effective Date .....
     --

     PKG_OS_POLICY_TRANSACTION.sp_policy_transaction_list
     (
          in_session_id,
          in_transaction_id,
          in_policy_id,
          PKG_OS_POLICY_TRANSACTION.gObjType_PolicyTransaction,
          pkg_os_constant_bv.gbv_GenObjInstanceNumber,
          PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxEffectiveDate,
          null,
          v_object_list
     );


     if in_after_tf = 'F' 
     then
          --
          --   If looking for the closest transaction BEFORE, or EQUAL TO, the effective date passed in ...
          --
          if v_session_control.gLogging_Full then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Found Tranasactions:'||v_object_list.count
               );

          end if;

          v_object_index := v_object_list.first;

          while v_object_index is not null loop

               if in_exclude_transaction_id is null or v_object_list( v_object_index ) <> in_exclude_transaction_id then

                    v_trx_effective_date     := to_date(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxEffectiveDate ), pkg_os_constant.DragonDateFormatDefault);
                    v_trx_type_id            := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxType );
                    v_trx_object_state_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), pkg_os_constant_bv.gbv_GenObjObjectState );


                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id, 
                              in_transaction_id, 
                              v_procedure_name, 
                              '... Considering TrxTypeID:'||v_trx_type_id||
                              ' TrxEffDate:'||v_trx_effective_date||
                              ' TrxStateID:'||v_trx_object_state_id 
                         );
                    end if;

                    if       PKG_OS_POLICY_TRANSACTION.fn_transaction_in_class( v_trx_type_id, in_transaction_class_id )
                         and
                              (
                                   pkg_cs_post_nb.fn_transaction_in_state_class( in_session_id, in_transaction_id, v_trx_object_state_id, PKG_OS_POLICY_TRANSACTION.gTrxnStateClass_ClosestByClass )
                                   or
                                   v_trx_object_state_id    =    gObj_State_pending
                              )
                         and
                              v_trx_type_id not in (PKG_OS_POLICY_TRANSACTION.gPolicyTrxType_Audit)


                    then

                         if  trunc(v_trx_effective_date) <= trunc(v_in_effective_date)
                         then

                              v_transaction_id := v_object_list( v_object_index);

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Match ...' );

                              end if;

                         end if;

                    end if;

               end if;

               v_object_index := v_object_list.next( v_object_index );

          end loop;

     else

          --
          --   If looking for the closes transaction AFTER the effective date passed in ...
          --

          v_object_index := v_object_list.last;

          while v_object_index is not null loop

               if in_exclude_transaction_id is null or v_object_list( v_object_index ) <> in_exclude_transaction_id then

                    v_trx_effective_date     := to_date(pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxEffectiveDate ),pkg_os_constant.DragonDateFormatDefault);
                    v_trx_type_id            := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxType );
                    v_trx_object_state_id    := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, v_object_list( v_object_index), pkg_os_constant_bv.gbv_GenObjObjectState );

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Considering TrxTypeID:'||v_trx_type_id||' TrxEffDate:'||v_trx_effective_date||' TrxStateID:'||v_trx_object_state_id );

                    end if;

                    if   PKG_OS_POLICY_TRANSACTION.fn_transaction_in_class( v_trx_type_id, in_transaction_class_id )
                         and
                              (     
                                   pkg_cs_post_nb.fn_transaction_in_state_class( in_session_id, in_transaction_id, v_trx_object_state_id, PKG_OS_POLICY_TRANSACTION.gTrxnStateClass_ClosestByClass )
                                   or
                                   v_trx_object_state_id    =    gObj_State_pending
                              )
                         and
                         v_trx_type_id not in (PKG_OS_POLICY_TRANSACTION.gPolicyTrxType_Audit)
                    then

                         if  trunc(v_trx_effective_date) > trunc(v_in_effective_date) then

                              v_transaction_id := v_object_list( v_object_index);

                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log( in_session_id, in_transaction_id, v_procedure_name, '... Match ...' );

                              end if;

                         end if;

                    end if;

               end if;

               v_object_index := v_object_list.prior( v_object_index );

          end loop;

     end if;

     out_transaction_id  := v_transaction_id;
     if v_transaction_id is not null
     then
          return 'T';
     else
          return 'F';
     end if;
end fn_subj_basis_image_get;

-----------------------------------------------------------------------------------------------------------------------------------------------------
--
--   %NAME
--        sp_fitem_create_offset
--
--   %USAGE
--        This procedure creates a FITEM Object based on the input parameters.
--        its offset FITEM under carrier/writing comany based on the input parameters.
--        and udpates the references that are common to the Fitem universally.
--
--
--   %ALGORITHM
--        1.   Create the FITem object
--        2.   Finanlize the BV table collection variable corresponding to all inputs
--        3.   Update the business variables of FItem object
--
--   %CAUTION
--
--
--   %PARAM             in_session_id                 Session Id
--   %PARAM             in_transaction_id             Transaction Id
--
-----------------------------------------------------------------------------------------------------------------------------------------------------

procedure sp_fitem_create_offset
(
     in_session_id                      in        object.object_id%type,
     in_transaction_id                  in        object.object_id%type,
     in_parent_object_id                in        object.object_id%type default null,
     in_fitem_id                        in        object.object_id%type,
     out_offset_FItem_id                out       object.object_id%type,
     in_fitem_debit_credit               in          lookup_list_value.lookup_enum%type default null,
     in_fitem_category                    in          lookup_list_value.lookup_enum%type default null,
     in_fitem_subcategory                 in          lookup_list_value.lookup_enum%type default null,
     in_fitem_effective_date              in          object_bv_value.business_variable_value%type default null,
     in_fitem_billing_status              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_processing_status           in          lookup_list_value.lookup_enum%type default null,
     in_fitem_bill_status_date           in          object_bv_value.business_variable_value%type default null,
     in_fitem_Earningstatus              in          lookup_list_value.lookup_enum%type default null,
     in_fitem_earned_amount              in          number default null ,
     in_fitem_unearned_amount               in          number default null,
     in_fitem_paid_amount                in          object_bv_value.business_variable_value%type default null,
     in_FItemRefInstallment               in          object.object_id%type default null,
     in_FItemRefPolicy                    in          object.object_id%type default null,
     in_FItemRefPolicyTxn               in          object.object_id%type default null,
     in_FitemRefPolicyTerm              in        object.object_id%type default null,
     in_FItemRefCustomer                    in          object.object_id%type default null,
     in_FItemRefAssWithFItrx               in          object.object_id%type default null,
     in_FItemRefAssetpkg_db_object          in          object.object_id%type default null,
     in_FitemRefActionPolicyTxn         in        object.object_id%type default null,
     in_Fitem_LateFeeDueDate               in          object_bv_value.business_variable_value%type default null,
     in_Fitem_billing_elt_md_id          in          db_billing_element.db_billing_element_id%type default null,
     in_ultimate_template_id            in        object.object_id%type default null
)
is

     v_procedure_name                   constant system_log.program_name%type   :=   pkg_name||'sp_fitem_create_offset';
     v_session_control                  pkg_os_session.r_dragon_session_control :=   pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_carrier_billing_acc_id           object.object_id%type;
     v_writing_company_id               object.object_id%type;
     v_writing_co_billing_acc_id        object.object_id%type;
     v_usersession_exchange_id          object.object_id%type;
     v_exchange_sponsor_partner_id      object.object_id%type;
     v_carrier_writing_entity_id        object.object_id%type;
     v_offset_fitem_credit_debit        lookup_list_value.lookup_enum%type;
     v_parent_object_id                object.object_id%type;
     v_fitem_debit_credit              lookup_list_value.lookup_enum%type;
     v_fitem_category                  lookup_list_value.lookup_enum%type;
     v_fitem_subcategory               lookup_list_value.lookup_enum%type default null;
     v_fitem_effective_date             object_bv_value.business_variable_value%type default null;
     v_fitem_billing_status            lookup_list_value.lookup_enum%type default null;
     v_fitem_processing_status          lookup_list_value.lookup_enum%type default null;
     v_fitem_bill_status_date                object_bv_value.business_variable_value%type default null;
     v_fitem_Earningstatus                      lookup_list_value.lookup_enum%type default null;
     v_fitem_earned_amount                      number default null ;
     v_fitem_unearned_amount                       number default null;
     v_fitem_paid_amount                        object_bv_value.business_variable_value%type default null;
     v_FItemRefInstallment                       object.object_id%type default null;
     v_FItemRefPolicy                            object.object_id%type default null;
     v_FItemRefPolicyTxn                       object.object_id%type default null;
     v_FitemRefPolicyTerm                    object.object_id%type default null;
     v_FItemRefCustomer                            object.object_id%type default null;
     v_FItemRefAssWithFItrx                       object.object_id%type default null;
     v_FItemRefAssetpkg_db_object                  object.object_id%type default null;
     v_FitemRefActionPolicyTxn               object.object_id%type default null;
     v_Fitem_LateFeeDueDate                       object_bv_value.business_variable_value%type default null;
     v_Fitem_billing_elt_md_id                  db_billing_element.db_billing_element_id%type;
     v_ultimate_template_id                  object.object_id%type default null ;    

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, 
               '... Considering offset :'||
               'in_parent_object_id:'||in_parent_object_id||
               'in_fitem_id:'||in_fitem_id||
               'out_offset_FItem_id:'||out_offset_FItem_id||
               'in_fitem_debit_credit:'||in_fitem_debit_credit||
               'in_fitem_category:'||in_fitem_category||
               'in_fitem_subcategory:'||in_fitem_subcategory||
               'in_fitem_effective_date:'||in_fitem_effective_date||
               'in_fitem_billing_status:'||in_fitem_billing_status||
               'in_fitem_processing_status:'||in_fitem_processing_status||
               'in_fitem_bill_status_date:'||in_fitem_bill_status_date||
               'in_fitem_Earningstatus:'||in_fitem_Earningstatus||
               'in_fitem_earned_amount:'||in_fitem_earned_amount||
               'in_fitem_unearned_amount:'||in_fitem_unearned_amount||
               'in_fitem_paid_amount:'||in_fitem_paid_amount||
               'in_FItemRefInstallment:'||in_FItemRefInstallment||
               'in_FItemRefPolicy:'||in_FItemRefPolicy||
               'in_FItemRefPolicyTxn:'||in_FItemRefPolicyTxn||
               'in_FitemRefPolicyTerm:'||in_FitemRefPolicyTerm||
               'in_FItemRefCustomer:'||in_FItemRefCustomer||
               'in_FItemRefAssWithFItrx:'||in_FItemRefAssWithFItrx||
               'in_FItemRefAssetpkg_db_object:'||in_FItemRefAssetpkg_db_object||
               'in_FitemRefActionPolicyTxn:'||in_FitemRefActionPolicyTxn||
               'in_Fitem_LateFeeDueDate:'||in_Fitem_LateFeeDueDate||
               'in_Fitem_billing_elt_md_id:'||in_Fitem_billing_elt_md_id||
               'in_ultimate_template_id:'||in_ultimate_template_id 
          );

     end if;

     
     
     if in_parent_object_id is null then
          
          v_parent_object_id := pkg_os_object.fn_object_parent_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id
          );
     
     else
           v_parent_object_id :=in_parent_object_id;
     end if;

     if v_parent_object_id is null
     then

           -- Arun OSBILLING-7352 - Validation for Debit/Credit mismatch
          --return;

         pkg_os_logging.sp_log_error
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Billing Account ID is null for FItem ' ||in_fitem_id
               );
          raise no_data_found;

     end if;
     
     if in_FItemRefPolicy is null then
          
           v_FItemRefPolicy := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefPolicy
          );
     else
               
          v_FItemRefPolicy := in_FItemRefPolicy;
     end if;
          
     --
     -- Get the Writing Company associated with the Policy
     --

     if v_FItemRefPolicy is not null then
          
          v_writing_company_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               v_FItemRefPolicy,
               gbv_WritingCompany
          );  
          --
          -- Get the Billing Account of the Writing Company
          --

          v_writing_co_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
          (
               in_session_id,
               in_transaction_id,
               v_writing_company_id,
               gObjType_BillingAccount
          );          
          
     end if;


     if v_writing_co_billing_acc_id is null then
          --
          --   1.   Get the exchange, exchange sponsor partner and carrier billing account
          --

          v_exchange_sponsor_partner_id := pkg_os_wf_session.fn_exchange_sponsor_get(in_session_id, in_transaction_id);

          v_carrier_billing_acc_id := pkg_os_object_search.fn_object_11_child_get
          (
               in_session_id,
               in_transaction_id,
               v_exchange_sponsor_partner_id,
               gObjType_BillingAccount
          );
     
     end if;

     v_carrier_writing_entity_id := pkg_os_object_io.fn_object_bv_get
     (
          in_session_id,
          in_transaction_id,
          nvl(v_writing_co_billing_acc_id, v_carrier_billing_acc_id),
          gbv_BillingAccountParent
     );

     --
     -- Create the Offset FItem object
     --

     pkg_os_object.sp_object_create
     (
          in_session_id,
          in_transaction_id,
          gObjType_FItem,
          nvl(v_writing_co_billing_acc_id, v_carrier_billing_acc_id),
          out_offset_FItem_id
     );


     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log(in_session_id, in_transaction_id, v_procedure_name,
               '... Created Offset FItemObject ID: '||out_offset_FItem_id );

     end if;
     
     --
     -- Get the Offset FItem type as debit or credit
     --

     if in_fitem_debit_credit is null then
          
           v_fitem_debit_credit := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_debit_credit
          );
          
     else
          v_fitem_debit_credit :=    in_fitem_debit_credit;  
     end if;     

     if ( v_fitem_debit_credit = gFItem_Debit )
     then

          v_offset_fitem_credit_debit := gFItem_Credit;

     elsif (v_fitem_debit_credit = gFItem_Credit)
     then

          v_offset_fitem_credit_debit := gFItem_Debit;

     end if;
     


     if in_fitem_category is null then
           v_fitem_category := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_category
          );
     else
          v_fitem_category :=    in_fitem_category; 
     end if;  
     
     if in_fitem_subcategory is null then
           v_fitem_subcategory := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_subcategory
          );
     else
          v_fitem_subcategory :=    in_fitem_subcategory; 
                  
     end if;          


     if in_fitem_effective_date is  null
     then
           v_fitem_effective_date := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_effective_date
          );
     else
          v_fitem_effective_date :=    in_fitem_effective_date; 
          
     end if;

     if in_fitem_billing_status is  null
     then
           v_fitem_billing_status := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_billing_status
          );
     else
          v_fitem_billing_status :=    in_fitem_billing_status; 
          
     end if;

     if in_fitem_processing_status is null
     then
           v_fitem_processing_status := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_processing_status
          );
     else
          v_fitem_processing_status :=    in_fitem_processing_status; 
         
     end if;

     if in_fitem_bill_status_date is null
     then
           v_fitem_bill_status_date := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_bill_status_date
          );
     else
          v_fitem_bill_status_date :=    in_fitem_bill_status_date; 
         
     end if;

     if in_fitem_Earningstatus is null
     then
           v_fitem_Earningstatus := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_Earning_Status 
          );
     else
          v_fitem_Earningstatus :=    in_fitem_Earningstatus; 
          
     end if;

     if in_fitem_earned_amount is null
     then
           v_fitem_earned_amount := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_earned_amount 
          );
     else
          v_fitem_earned_amount :=    in_fitem_earned_amount; 
         
     end if;

     if in_fitem_unearned_amount is null
     then
           v_fitem_unearned_amount := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_unearned_amount 
          );
     else
          v_fitem_unearned_amount :=    in_fitem_unearned_amount; 
          
     end if;

     if in_fitem_paid_amount is null
     then
           v_fitem_paid_amount := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_fitem_paid_amount 
          );
     else
          v_fitem_paid_amount :=    in_fitem_paid_amount; 
         
     end if;

     if in_FItemRefInstallment is null
     then
           v_FItemRefInstallment := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefInstallment 
          );
     else
          v_FItemRefInstallment :=    in_FItemRefInstallment; 
          
     end if;



     if in_FItemRefPolicyTxn is null
     then
           v_FItemRefPolicyTxn := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefPolicyTrx 
          );
     else
          v_FItemRefPolicyTxn :=    in_FItemRefPolicyTxn; 
         
     end if;


     if in_FitemRefActionPolicyTxn is null
     then
           v_FitemRefActionPolicyTxn := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefActionPolicyTrx 
          );  
     else
          v_FitemRefActionPolicyTxn :=    in_FitemRefActionPolicyTxn;  
        
     end if;

     if in_FitemRefPolicyTerm is null
     then
           v_FitemRefPolicyTerm := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefPolicyTerm 
          );  
     else
          v_FitemRefPolicyTerm :=    in_FitemRefPolicyTerm;         
          
     end if;

     if in_FItemRefCustomer is null
     then
           v_FItemRefCustomer := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefCustomer 
          ); 
     else
          v_FItemRefCustomer :=    in_FItemRefCustomer;  
          
     end if;



     if in_FItemRefAssWithFItrx is null
     then
           v_FItemRefAssWithFItrx := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefAssWithFItrx 
          );  
     else
          v_FItemRefAssWithFItrx :=    in_FItemRefAssWithFItrx; 
          
     end if;

     if in_FItemRefAssetpkg_db_object is null
     then
           v_FItemRefAssetpkg_db_object := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefAsset 
          );  
     else
          v_FItemRefAssetpkg_db_object :=    in_FItemRefAssetpkg_db_object; 
         
     end if;

     if in_Fitem_LateFeeDueDate is null
     then
           v_Fitem_LateFeeDueDate := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_LocalBilngDueDate  
          );  
     else
          v_Fitem_LateFeeDueDate :=    in_Fitem_LateFeeDueDate; 
                  

     end if;

     if in_ultimate_template_id is null
     then
          v_ultimate_template_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_RefUltimateTempID  
          ); 
     else
          v_ultimate_template_id :=    in_ultimate_template_id;  
     end if;
     
     if in_Fitem_billing_elt_md_id is null
     then
          v_Fitem_billing_elt_md_id := pkg_os_object_io.fn_object_bv_get
          (
               in_session_id,
               in_transaction_id,
               in_fitem_id,
               gbv_FItem_Billing_Elt_MD_ID  
          );  
     else
          v_Fitem_billing_elt_md_id :=    in_Fitem_billing_elt_md_id; 
     end if;     
 
     --
     -- Set the BVs for the created FItem
     --
     sp_fitem_bv_set
     (
            in_session_id ,
            in_transaction_id  ,
            v_offset_fitem_credit_debit,
            v_fitem_category,
            v_fitem_subcategory,
            v_fitem_effective_date,
            v_fitem_billing_status,
            v_fitem_processing_status,
            v_fitem_bill_status_date,
            v_fitem_Earningstatus  ,
            v_fitem_earned_amount,
            v_fitem_unearned_amount,
            v_fitem_paid_amount,
            v_FItemRefInstallment,
            v_FItemRefPolicy,
            v_FItemRefPolicyTxn,
            v_FitemRefPolicyTerm,
            v_FItemRefCustomer,
            v_carrier_writing_entity_id,
            v_FItemRefAssWithFItrx,
            v_FItemRefAssetpkg_db_object,
            v_FitemRefActionPolicyTxn,
            v_Fitem_LateFeeDueDate,
            pkg_os_object_io.gnull_bv_table,
            out_offset_FItem_id,
            v_Fitem_billing_elt_md_id,
            null, -- in_FitemRefCashAssoWithID, -- OSBILLING-3842
            v_ultimate_template_id
     );

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name, 
               '... Created offset :'||
               'v_parent_object_id:'||v_parent_object_id||
               'in_fitem_id:'||in_fitem_id||
               'out_offset_FItem_id:'||out_offset_FItem_id||
               'v_fitem_debit_credit:'||v_fitem_debit_credit||
               'v_fitem_category:'||v_fitem_category||
               'v_fitem_subcategory:'||v_fitem_subcategory||
               'v_fitem_effective_date:'||v_fitem_effective_date||
               'v_fitem_billing_status:'||v_fitem_billing_status||
               'v_fitem_processing_status:'||v_fitem_processing_status||
               'v_fitem_bill_status_date:'||v_fitem_bill_status_date||
               'v_fitem_Earningstatus:'||v_fitem_Earningstatus||
               'v_fitem_earned_amount:'||v_fitem_earned_amount||
               'v_fitem_unearned_amount:'||v_fitem_unearned_amount||
               'v_fitem_paid_amount:'||v_fitem_paid_amount||
               'v_FItemRefInstallment:'||v_FItemRefInstallment||
               'v_FItemRefPolicy:'||v_FItemRefPolicy||
               'v_FItemRefPolicyTxn:'||v_FItemRefPolicyTxn||
               'v_FitemRefPolicyTerm:'||v_FitemRefPolicyTerm||
               'v_FItemRefCustomer:'||v_FItemRefCustomer||
               'v_FItemRefAssWithFItrx:'||v_FItemRefAssWithFItrx||
               'v_FItemRefAssetpkg_db_object:'||v_FItemRefAssetpkg_db_object||
               'v_FitemRefActionPolicyTxn:'||v_FitemRefActionPolicyTxn||
               'v_Fitem_LateFeeDueDate:'||v_Fitem_LateFeeDueDate||
               'v_Fitem_billing_elt_md_id:'||v_Fitem_billing_elt_md_id||
               'v_ultimate_template_id:'||v_ultimate_template_id 
          );

     end if;     
     --
     -- set the Reference Associated FItems
     --

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          out_offset_FItem_id,
          gbv_AssociatedOffsetFitem,
          in_fitem_id -- Reference_Associated Offset Fitem
     );

     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_fitem_id,
          gbv_AssociatedOffsetFitem,
          out_offset_FItem_id -- Reference_Associated Offset Fitem
     );

end sp_fitem_create_offset ;


--OSPRODUCT-17377
procedure sp_roll_back
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_id                       in             object.object_id%type,
     in_to_be_rb_trx_id                 in             object.object_id%type,
     in_basis_ptp_id                    in             object.object_id%type,
     in_basis_payment_plan_id           in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_roll_back';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);


begin

     if in_to_be_rb_trx_id != pkg_os_object_search.fn_object_get_parent_of_type
                              (in_session_id,in_transaction_id, in_basis_ptp_id,pkg_os_constant.gobjType_PolicyTransaction ) 
     then

          -- OSPRODUCT-22697
		  /*pkg_db_profiles.sp_policy_prf_setup_nb_pnbt
          (
               in_session_id,
               in_transaction_id,
               pkg_os_object_search.fn_object_get_parent_of_type(in_session_id,in_transaction_id, in_basis_ptp_id,pkg_os_constant.gobjType_PolicyTransaction ),
               in_basis_ptp_id,
               io_action_outcome_id,
               'T'
          );*/

          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Updating Bill Plan on the term..'
               );
          end if;

          pkg_db_payment_arrangement.sp_bill_plan_update
          (
               in_session_id,
               in_transaction_id,
               in_basis_ptp_id,
               io_action_outcome_id
          );

          --
          -- Update the Consolidated Billing Account Schedule
          --
          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Updating Consolidated Schedule..'
               );
          end if;

          pkg_db_payplan_modify.sp_ba_sched_payment_generate
          (
               in_session_id,
               in_transaction_id,
               in_basis_ptp_id,
               in_basis_payment_plan_id
          );

          if v_session_control.gLogging_Full 
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Updating Billing Account Instament..'
               );
          end if;

          pkg_db_billing_modify.sp_billaccinstallment_create
          (
               in_session_id,
               in_transaction_id,
               in_basis_ptp_id,
               io_action_outcome_id
          );
          -- end OSPRODUCT-2459
     end if;

     
     
end sp_roll_back;

procedure sp_roll_back_post_process
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_id                       in             object.object_id%type,
     in_to_be_rb_trx_id                 in             object.object_id%type,
     in_rb_transaction_id               in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_procedure_name              constant system_log.program_name%type   := pkg_name||'sp_roll_back_post_process';
     v_session_control             pkg_os_session.r_dragon_session_control := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_datamart_tf                 char(1)                       := null;
     v_batrxset_id                 object.object_id%type;
     v_rb_batrxset_id              object.object_id%type;
     v_to_be_rb_trx_type_id        number;
     v_to_be_rb_trx_subtype_id     number; --OSBILLING-6201
     v_billing_method              number; --OSBILLING-5525

     v_ba_bill_plan_enabled_tf          char(1); -- OSPRODUCT-21027
     v_related_reinstate_bats_id        object.object_id%type;
     v_reinstatement_pt_id              object.object_id%type;
     v_reinstatement_rollback_pt_id     object.object_id%type;
     v_reinstate_rlbck_bats_id          object.object_id%type;

begin     
     
     if v_session_control.gLogging_Full
     then
          
          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '... Policy ID: ' || in_policy_id ||
              '... To Be rolled back transaction ID: ' || in_to_be_rb_trx_id ||
              '... Rollback transaction ID: ' || in_rb_transaction_id 
          ); --OSBILLING-6201 --OSBILLING-5525
         
     end if;

     --
     --  Get the associated billingaccounttransactionset of the rollback transcation
     --
     v_batrxset_id := pkg_os_object_io.fn_object_bv_get -- Get the Reference from PolicyTransaction to BillingAccountTransactionSet Object
                      (
                           in_session_id,
                           in_transaction_id,
                           in_rb_transaction_id, -- pol trx id
                           pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet -- 31866546
                      );
                      
     v_to_be_rb_trx_type_id        := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_to_be_rb_trx_id, pkg_os_policy_transaction.gbv_PolicyTrxType );
     v_to_be_rb_trx_subtype_id     := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_to_be_rb_trx_id, gPolicyTrx_SubType ); --OSBILLING-6201
     v_rb_batrxset_id              := pkg_os_object_io.fn_object_bv_get( in_session_id, in_transaction_id, in_to_be_rb_trx_id, pkg_db_billing_modify.gbv_PolTrxRefBillingAccTrxSet ); --OSBILLING-5525

     if v_session_control.gLogging_Full
     then
          
          pkg_os_logging.sp_log
          (
              in_session_id,
              in_transaction_id,
              v_procedure_name,
              '... Rollback Batch ID: ' || v_batrxset_id ||
              '... To Be rolled back transaction Type ID: ' || in_to_be_rb_trx_id ||
              '... To Be rolled back transaction Sub Type ID: ' || v_to_be_rb_trx_subtype_id ||
              '... To Be rolled back batch  ID: ' || v_rb_batrxset_id 
          ); --OSBILLING-6201 --OSBILLING-5525
         
     end if;

     if v_batrxset_id is not null --OSPRODUCT-21027
     then

          --
          --  Invoke aging process to update ageing of the rollback financials
          --
          if v_session_control.gLogging_Full
          then
               
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Processing Aging Update for Rolled-back Billing Transaction:' || v_batrxset_id
               );
               
          end if;

          pkg_db_nightly_process.sp_update_aging_status
          (
               in_session_id,
               in_transaction_id,
               v_batrxset_id
          );

          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '... Processing Auto Credit Apply for Rolled-back Billing Transaction:' || v_batrxset_id ||
                    '.. ' || pkg_os_object_io.fn_object_ref_owner_get(in_session_id,in_transaction_id,v_rb_batrxset_id,pkg_db_billing_modify.gbv_BillAccTrxSet_RefReinstmt) ||
                    '.. ' || pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_rb_batrxset_id, pkg_db_billing_modify.gbv_BillAccTrxSet_RefReinstmt)
               );
               
          end if;
          
          -- pkg_os_object_io.fn_object_ref_owner_get
          
          if v_to_be_rb_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Reinstatement
             and
             -- There is a cacellation to which this reinstatement is linked
             pkg_os_object_io.fn_object_ref_owner_get(in_session_id,in_transaction_id, v_rb_batrxset_id, pkg_db_billing_modify.gbv_BillAccTrxSet_RefReinstmt) is not null            
          then
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Skipping credit apply for reinstatement rollback..'
                    );
                    
               end if;
               
          elsif v_to_be_rb_trx_type_id in (pkg_db_object.gBillTrxType_CancelInsured, pkg_db_object.gBillTrxType_CancelNonPay)
          then
               
               v_related_reinstate_bats_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id, 
                                                    in_transaction_id, 
                                                    v_rb_batrxset_id, 
                                                    pkg_db_billing_modify.gbv_BillAccTrxSet_RefReinstmt
                                               );
                                               
               if v_related_reinstate_bats_id is not null then
               
                    v_reinstatement_pt_id := pkg_os_object_io.fn_object_bv_get
                                             (
                                                    in_session_id, 
                                                    in_transaction_id, 
                                                    v_related_reinstate_bats_id, 
                                                    gbv_BillAccTrxSet_RefPolTrx --32502146
                                             ); 
                    
                    v_reinstatement_rollback_pt_id := pkg_os_object_io.fn_object_bv_get
                                                      (
                                                         in_session_id, 
                                                         in_transaction_id, 
                                                         v_reinstatement_pt_id, 
                                                         gbv_PolicyTrx_RollbackTrx --33478148
                                                      );
                                                      
                    if v_reinstatement_rollback_pt_id is null then
                         
                         v_reinstatement_rollback_pt_id := pkg_os_object_io.fn_object_ref_owner_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id, 
                                                                v_reinstatement_pt_id, 
                                                                pkg_os_policy_transaction.gbv_PolicyTrxRollsBckTrx --27919702
                                                           ); 
                    
                    end if;
                         
                    v_reinstate_rlbck_bats_id := pkg_os_object_io.fn_object_bv_get
                                                      (
                                                         in_session_id, 
                                                         in_transaction_id, 
                                                         v_reinstatement_rollback_pt_id, 
                                                         31866546
                                                      );
                                                            
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Reinstatement batch ID: ' || v_related_reinstate_bats_id || 
                              '... Reinstatement PT ID:'     || v_reinstatement_pt_id ||
                              '... Reinstatement Rollback PT: ' || v_reinstatement_rollback_pt_id ||
                              '... Reinstatement Rollback BATS ID: ' || v_reinstate_rlbck_bats_id
                              
                         );
                         
                    end if;
                    
                    -- Call the reinstatement credit apply now
                    pkg_db_credit_apply.sp_auto_credit_apply
                    (
                         in_session_id,
                         in_transaction_id,
                         v_reinstate_rlbck_bats_id, --pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, v_rb_batrxset_id, pkg_db_billing_modify.gbv_BillAccTrxSet_RefReinstmt),
                         io_action_outcome_id,
                         in_apply_level => 301,
                         in_related_cancel_rlbk_pt_id => in_rb_transaction_id
                    );
                    
               else
                    pkg_db_credit_apply.sp_auto_credit_apply
                    (
                         in_session_id,
                         in_transaction_id,
                         v_batrxset_id,
                         io_action_outcome_id
                    );
                    
               end if;
               
          else
               
               pkg_db_credit_apply.sp_auto_credit_apply
               (
                    in_session_id,
                    in_transaction_id,
                    v_batrxset_id,
                    io_action_outcome_id
               );               
          
          end if;
		  
     end if; --OSPRODUCT-21027

     --OSBILLING-6201 starts
     if ( v_to_be_rb_trx_type_id = gPolicyTrx_EndorsTypeID and v_to_be_rb_trx_subtype_id =  gPolicyTrx_CPPSubTypeID )
     then
         pkg_db_credit_apply.sp_policy_np_credit_handling
         (
               in_session_id,
               in_transaction_id,
               in_policy_id,
               sysdate,
               io_action_outcome_id
         );
     end if;
     --OSBILLING-6201 ends

     --OSBILLING-5525 starts
     if ( v_to_be_rb_trx_type_id = gPolicyTrx_EndorsTypeID  and v_to_be_rb_trx_subtype_id =  pkg_db_billing_modify.gChangeBillingMethod )
     then
          pkg_db_credit_apply.sp_auto_credit_apply
          (
               in_session_id,
               in_transaction_id,
               v_rb_batrxset_id,
               io_action_outcome_id
          );
     end if;
     --OSBILLING-5525 ends

     begin
	     v_ba_bill_plan_enabled_tf := pkg_os_system_attribute.fn_get_system_attribute_value
                                           (
                                           pkg_db_payment_arrangement.g_bill_plan_attribute_name
                                           ); --OPRODUCT-24741
	 
     exception

          when NO_DATA_FOUND then

               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Warning - Payment Arrangement Attribute not setup, hence returning..'
               );

               v_ba_bill_plan_enabled_tf := 'F';

     end;


     if  v_ba_bill_plan_enabled_tf = 'F'-- OSPRODUCT-21027
     then
         
       pkg_db_stmt_profile.sp_statement_profile_rb
       (
            in_session_id,
            in_transaction_id,
            in_rb_transaction_id,
            io_action_outcome_id
       );
     end if; -- OSPRODUCT-21027 
     
     -- LXPRODUCT-449
     -- Set the rollback transaction BV on the to be rolled back transaction
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_to_be_rb_trx_id,
          gbv_PolicyTrx_RollbackTrx,
          in_rb_transaction_id
     );

end sp_roll_back_post_process;


procedure sp_roll_forward
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_rb_ptp_id                       in             object.object_id%type,
     in_rf_ptp_id                       in             object.object_id%type,
     in_rf_trx_id                       in             object.object_id%type,
     in_trx_type_id                     in             object.object_id%type,
     io_action_outcome_id               in out         outcome.outcome_id%type
)
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_roll_forward';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     v_pymntsch_list                    pkg_os_object.t_object_list;
     v_pymntsch_index                   number;
     
     v_rb_payer_id                      object.object_id%type;
     v_rb_payer_modified_payplan_id     object.object_id%type;
     v_rb_payer_mod_payplan_md_id       number;
     v_rf_payer_id                      object.object_id%type;
     v_rf_payer_mod_payplan_id          object.object_id%type;
     
     v_ptp_payer_list                   pkg_os_object.t_object_list;
     v_payer_index                      number;
     v_policy_transaction_id            object.object_id%type;
     v_transaction_type_id              number;
     v_new_term                         number;
     v_billing_account_id               object.object_id%type;
     v_term_id                          object.object_id%type; -- UTPRODUCT-4120
     
     v_bortrx                           number;  --OSPRODUCT-10418 
     
     v_payment_plan_id                  object.object_id%type;
     v_modifying_payment_plan           char(1);
     v_current_payer_date_time          date;
     v_policy_image_id                  object.object_id%type;
     v_rb_payer_chosen_payplan_id       object.object_id%type;
     v_rf_payer_chosen_payplan_id       object.object_id%type;
     v_rb_payer_chosen_payplan_md_id    number;
     v_rb_modified_ind                  number default null;
     v_rb_modified_payplan_id           object.object_id%type;
     v_rf_mod_payplan_id                object.object_id%type;
     v_rb_mod_payplan_md_id             payment_plan.payment_plan_id%type;
     v_current_date_time                date      := pkg_os_time.fn_os_sysdate(in_session_id,in_transaction_id,in_rf_trx_id);
     
     v_rf_ultimate_customer_id          object.object_id%type;
     v_rb_pt_id                         object.object_id%type;
     v_rf_basis_image_id                object.object_id%type;
     v_new_multipayer_enable_tf         number;
     v_rb_multipayer_enable_tf          number;
	 v_rf_billing_account_id            object.object_id%type; -- OSPRODUCT-20220   
     v_rb_chosen_payplan_id             object.object_id%type; -- OSPRODUCT-17852
     v_rb_chosen_payplan_md_id          number; -- OSPRODUCT-17852
     v_rf_chosen_payplan_id             object.object_id%type; -- OSPRODUCT-17852
     v_rf_mod_payplan_md_id             number;  -- UTXPRODUCT-577
     v_rf_payer_ch_payplan_md_id        number;  -- UTXPRODUCT-577
                   
              
begin
     
     -- OSPRODUCT-19889
     v_bortrx := pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_session_id, 32972548);  --OSPRODUCT-10418 
     
     --Added for OSPRODUCT-15144 by Aditya 
     pkg_pc_functions.sp_update_AssetPayerEntity
     (
          in_session_id,
          in_transaction_id,
          in_rf_ptp_id
     );
     --Added for OSPRODUCT-15144 by Aditya   
     
     -- Modified Pay Plan Indicator
     v_rb_modified_ind := pkg_os_object_io.fn_object_bv_get
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_rb_ptp_id,
                                   pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd-- 31867946 --
                              );
                              
     pkg_os_object_io.sp_object_bv_set
     (
          in_session_id,
          in_transaction_id,
          in_rf_ptp_id,
          pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd,--31867946
          v_rb_modified_ind
     );
     
     -- OSPRODUCT-19889                            
     v_rf_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_rf_ptp_id,
                                         pkg_os_constant.gObjType_Customer
                                    );
                                         
     v_rb_pt_id := pkg_os_object.fn_object_parent_get
                   (
                        in_session_id,
                        in_transaction_id,
                        in_rb_ptp_id
                   );
                   
     -- end OSPRODUCT-19889 
                   
     -- UTXPRODUCT-522
     -- Check if the multipayer object model has to be followed
     -- To handle cases where the OOS PNBT changed the object model
     begin
          
          -- Get the MP flag on the rollback image
          v_rb_multipayer_enable_tf := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_rb_ptp_id,
                                             pkg_db_multipayer.gbv_MultiPayerEnabled_PTP-- 31867946 --
                                        );
                                        
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..Multipayer flag on the old image: ' || v_rb_multipayer_enable_tf
               );
          end if;
                                        
          if nvl(v_rb_multipayer_enable_tf,2) = 2 then
                                        
               -- Get the new basis image 
               v_rf_basis_image_id := pkg_os_object_io.fn_object_bv_get
                                      (
                                           in_session_id,
                                           in_transaction_id,
                                           in_rf_trx_id,
                                           21912302 -- reference basis coverage on PT
                                      );
                                      
               -- And the new multipayer flag
               v_new_multipayer_enable_tf := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_rf_basis_image_id,
                                                  pkg_db_multipayer.gbv_MultiPayerEnabled_PTP-- 31867946 --
                                             );
                                             
               v_rb_multipayer_enable_tf := v_new_multipayer_enable_tf;
                                             
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '..Multipayer flag on the new image: ' || v_rb_multipayer_enable_tf ||
                         '..Basis image for the Rollforward: '  || v_rf_basis_image_id
                    );
               end if;
                                        
          end if;
                          
     end;
     -- end UTXPRODUCT-522

     if v_session_control.gLogging_Full
     then
          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               '..Rollback PTP ID: ' || in_rb_ptp_id ||
               '..Rollback PT ID: '  || v_rb_pt_id ||
               '..Rollforward PTP ID: ' || in_rf_ptp_id ||
               '..Rollforward PT ID: '  || in_rf_trx_id ||
               '..Transaction type ID: '|| in_trx_type_id ||
               '..Rollback PTP ID: '   || in_rb_ptp_id    ||
               '..Cuatomer ID: '       || v_rf_ultimate_customer_id ||
               '... BOR workflow: '    || v_bortrx
          );
     end if;
	 
	 -- OSPRODUCT-23929
     if in_trx_type_id = pkg_os_policy_transaction.gPolicyTrxType_Reinstatement then
          
          pkg_os_object_io.sp_object_bv_set
          (
               in_session_id,
               in_transaction_id,
               in_rf_trx_id,
               pkg_db_payplan_modify.gbv_PTOriginalProcessDate, --32630948,
               pkg_os_object_io.fn_object_bv_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_rb_pt_id,
                    pkg_db_payplan_modify.gbv_PTOriginalProcessDate
               )
          );
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..Original Process Date Set for Reinstatement '
               );
          end if;
     
     end if;

     if nvl(v_rb_multipayer_enable_tf, 2) = 2 
     then 
          
          -- OSPRODUCT-17852
          -- Update the chosen payment plan on rollforward PTP 
          if nvl(v_bortrx,0) = 1
             and
             pkg_db_payplan_modify.fn_trx_starts_new_term(in_trx_type_id) = pkg_os_constant.gBoolean_True
          then

               v_rb_chosen_payplan_id := pkg_os_object_io.fn_object_bv_get
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  in_rb_ptp_id,
                                                  pkg_db_payplan_modify.gbv_PolicyRefChosenPlan
                                              );

               v_rb_chosen_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                            (
                                                 in_session_id,
                                                 in_transaction_id,
                                                 v_rb_chosen_payplan_id,
                                                 212015
                                            );

               v_rf_chosen_payplan_id := pkg_os_object_search.fn_child_object_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                in_rf_ptp_id,
                                                pkg_db_payplan_modify.gObjType_PayPlan,
                                                212015,
                                                v_rb_chosen_payplan_md_id
                                           );

               -- UTXPRODUCT-522
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Chosen Pay Plan MD ID on the Rollback Image: ' || v_rb_chosen_payplan_md_id ||
                         '.. Chosen Pay Plan on Rollforward Image: '        || v_rf_chosen_payplan_id
                    );
               end if;

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    pkg_db_payplan_modify.gbv_PolicyRefChosenPlan,
                    v_rf_chosen_payplan_id
               );
               -- end OSPRODUCT-17852

          end if;        
          
          -- Modified Pay Plan ID
          v_rb_modified_payplan_id := pkg_os_object_io.fn_object_bv_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             in_rb_ptp_id,
                                             pkg_db_payplan_modify.gbv_PolicyRefModPayPlan
                                         );
                                   
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Modified Pay Plan on the Rollback Image: ' || v_rb_modified_payplan_id ||
                    '.. Modified Pay Plan Indicator: '             || v_rb_modified_ind
               );
          end if;
          -- end UTXPRODUCT-522

          if ( v_rb_modified_payplan_id is not null )
          then

               v_rb_mod_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                               in_session_id,
                                               in_transaction_id,
                                               v_rb_modified_payplan_id,
                                               212015
                                          );
               
               -- UTXPRODUCT-522
               -- Removed the call to the discarded version

               -- UTXPRODUCT-577 Start
               v_rf_chosen_payplan_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                             in_session_id,
                                             in_transaction_id,
                                             in_rf_ptp_id,
                                             pkg_db_payplan_modify.gbv_PolicyRefChosenPlan
                                         );

               v_rf_mod_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                         (
                                               in_session_id,
                                               in_transaction_id,
                                               v_rf_chosen_payplan_id,
                                               212015
                                          );
                  -- UTXPRODUCT-577 End

               if v_rf_mod_payplan_md_id <> v_rb_mod_payplan_md_id then -- UTXPRODUCT-577

               v_rf_mod_payplan_id := pkg_os_object_search.fn_child_object_get
                                           (
                                                in_session_id,
                                                in_transaction_id,
                                                in_rf_ptp_id,
                                                pkg_db_payplan_modify.gObjType_PayPlan,
                                                212015,
                                                v_rb_mod_payplan_md_id
                                           );

                          -- UTXPRODUCT-577 Start
                     pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_rf_ptp_id,
                              pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd,--31867946
                              v_rb_modified_ind
                         );
                    -- UTXPRODUCT-577 End
               
               -- UTXPRODUCT-522
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Modified Pay Plan MD ID on the Rollback Image: ' || v_rb_mod_payplan_md_id ||
                         '.. Modified Pay Plan on Rollforward Image: '        || v_rf_mod_payplan_id
                    );
               end if;

               pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    pkg_db_payplan_modify.gbv_PolicyRefModPayPlan,
                    v_rf_mod_payplan_id
               );

               --OSPRODUCT-7199 start
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_id,
                    in_transaction_id,
                    v_rf_mod_payplan_id,
                    2297206,
                    v_pymntsch_list
               );

               v_pymntsch_index := v_pymntsch_list.first;

               while v_pymntsch_index is not null loop

                    pkg_os_object.sp_object_delete
                    (
                         in_session_id,
                         in_transaction_id,
                         v_rf_mod_payplan_id,
                         v_pymntsch_list(v_pymntsch_index),
                         2297206,
                         null,
                         false
                    );

                    v_pymntsch_index := v_pymntsch_list.next(v_pymntsch_index);

               end loop;
               
               --UTXPRODUCT-522
               -- Moved in the start as it is common for both SP and MP
               /*pkg_os_object_io.sp_object_bv_set
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd,--31867946
                    v_rb_modified_ind
               );*/

               -- OSPRODUCT-7199 end
               -- CR KR
               -- UTXPRODUCT-522
               -- Verify whether the change payment plan was from start of the term , if yes set the original transaction process date
               -- Moved the code in if block
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '.. Setting up the start of term indicator.. ' 
                    );
               end if;

               if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_rb_ptp_id, pkg_db_payplan_modify.gbv_ptp_cpp_term_start_ind) is not null
               then
                    pkg_os_object_io.sp_object_bv_set
                    (
                        in_session_id,
                        in_transaction_id,
                        in_rf_ptp_id,
                        pkg_db_payplan_modify.gbv_ptp_cpp_term_start_ind,
                        0
                    );

                    pkg_os_object_io.sp_object_bv_set
                    (
                        in_session_id,
                        in_transaction_id,
                        in_rf_trx_id,
                        32630948,
                        pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_rf_trx_id,  '29728801.29749301.212161')
                    );

               end if; -- CR KR
          
          end if;
          
          end if; -- UTXPRODUCT-577

          -- UTXPRODUCT-522
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '.. Starting the schedule generation.. ' 
               );
          end if;
          
          --   Set the BV's
          if ( nvl( v_rf_mod_payplan_id ,2) = 2)
          then
               
               pkg_db_payplan_modify.sp_payment_schedule_update
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    io_action_outcome_id
               );
               
          else
               
               pkg_db_payplan_modify.sp_payment_mod_sched_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    io_action_outcome_id,
                    v_current_date_time,
                    null
               );

          end if;

     else

          -- UTXPRODUCT-522
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (
                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Policy is multipayer..PTP Payer creation started.. ' || 
                    '...Deleting the payer object from rollforward PTP that has template id BV not set..' --                   
               );
          end if;
          
          -- UTXPRODUCT-522
          -- 1. Delete the payer that has template ID bv not set
          -- Why we need this?
          -- As the template ID is null the billing attributes was not captured in the change detail and hence although
          -- the object is created the Billing attributes are not set on the rf payer as was present on the rb payer.
          -- Hence will delete and recreate it with object copy
          declare

               v_object_list               pkg_os_object.t_object_list;
               v_idx                       binary_integer;
               v_template_id               object.object_id%type;
               v_datamart_tf               char(1) := 'T';

          begin
          
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_Id              =>    in_session_id,
                    in_transaction_id          =>    in_transaction_id,
                    in_object_id               =>    in_rf_ptp_id,
                    in_child_object_type_id    =>    pkg_db_multipayer.gObjType_PTPPayer,
                    in_object_list             =>    v_object_list,
                    in_exclude_object_id       =>    null,
                    in_exclude_object_type_id  =>    pkg_db_multipayer.gObjType_PolicyTerm -- KD: in my unit tests PolicyTerm resides under the PTP. Term has Payers that are type of PTPPayer. Need to exclude them.
               );
               
               v_idx := v_object_list.first;

               while v_idx is not null
               loop
                    
                    -- Get the template ID:
                    v_template_id := pkg_os_object_io.fn_object_bv_get
                                     (
                                          in_session_id,
                                          in_transaction_id,
                                          v_object_list(v_idx),
                                          26725501
                                     );
                                     
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Template ID: ' || v_template_id ||
                              '... Payer Object ID:'|| v_object_list(v_idx)
                         );

                    end if;
                    
                    if v_template_id is null then
                    
                         pkg_os_object.sp_object_delete
                         (
                              in_session_id              =>  in_session_id,
                              in_transaction_id          =>  in_transaction_id,
                              in_parent_object_id        =>  NULL,
                              in_object_id               =>  v_object_list(v_idx),
                              in_object_type_id          =>  NULL,
                              in_soft_delete_tf          =>  FALSE -- hard delete
                         );
                         
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Deleted Payer Object ID:'|| v_object_list(v_idx)
                              );

                         end if;
                         
                    else                         
                         
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... Datamart updated..'
                              );

                         end if;
                         
                         pkg_os_datamart.sp_datamart_update_row (in_session_id, in_transaction_id, v_object_list(v_idx), v_datamart_tf );
                         
                    end if;
                    
                    v_idx := v_object_list.next(v_idx);
                    
               end loop;               
          
          end;
                    
          -- UTXPRODUCT-522
          -- 2. Recreate payer that got deleted in the previous step
          v_rb_payer_id := null;
          
          declare

               v_object_list                pkg_os_object.t_object_list;
               v_idx                        binary_integer;
               v_rf_payer_id                object.object_id%type;
               v_entity_id                  object.object_id%type;               
               v_entity_account_type_id     number;
               v_object_copy_excluded_types pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
               v_object_copy_included_types pkg_os_object_copy.t_object_type_list := pkg_os_object_copy.gnull_object_type_list;
               v_object_copy_list           pkg_os_object_copy.t_object_list;
               v_object_copy_counter        number :=1;
               v_entity_ba_id               object.object_id%type;
               v_rf_entity_id               object.object_id%type;
               
          begin
          
               pkg_os_object_search.sp_object_children_of_type_get
               (
                    in_session_Id              =>    in_session_id,
                    in_transaction_id          =>    in_transaction_id,
                    in_object_id               =>    in_rb_ptp_id,
                    in_child_object_type_id    =>    pkg_db_multipayer.gObjType_PTPPayer,
                    in_object_list             =>    v_object_list,
                    in_exclude_object_id       =>    null,
                    in_exclude_object_type_id  =>    pkg_db_multipayer.gObjType_PolicyTerm -- KD: in my unit tests PolicyTerm resides under the PTP. Term has Payers that are type of PTPPayer. Need to exclude them.
               );
               
               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (
                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Child count: ' || v_object_list.count
                    );

               end if;
               
               v_idx := v_object_list.first;

               while v_idx is not null
               loop
                    
                    v_rb_payer_id := v_object_list(v_idx);
                    v_rf_payer_id := null;
                    
                    -- Get the account type of the rb payer
                    -- Get the entity object
                    v_entity_id := pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_rb_payer_id,
                                        pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr --32714824
                                   );                               
                                   
                    v_entity_ba_id := pkg_os_object_search.fn_object_11_child_get
                                        (
                                             in_session_id,
                                             in_transaction_id,
                                             v_entity_id,
                                             pkg_db_object.gObjType_BillingAccount
                                        );
                                        
                    -- Account Type ID
                    v_entity_account_type_id := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      v_entity_ba_id,
                                                      pkg_db_billing_modify.gbv_BillingAccountType
                                                 );
                                        
                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Considering payer: ' || v_rb_payer_id ||
                              '... Entity ID: ' || v_entity_id ||
                              '... BA ID: ' || v_entity_ba_id
                         );

                    end if;
                    
                    -- UTXPRODUCT-522
                    -- 2.1 Get the new payer                         
                    if nvl(v_bortrx, 0) = 0 then
                         
                         begin

                              select
                                   ptp.ptp_payer_id
                              into
                                   v_rf_payer_id
                              from
                                   dragon_ptp_payer ptp
                              where
                                   ptp.ptp_id = in_rf_ptp_id
                              and
                                   ptp.billing_account_id = v_entity_ba_id;
                              
                         exception
                              
                              when others then
                                   v_rf_payer_id := null;
                                   
                         end;

                    else     
                         
						-- Get the corresponding entity id on new customer
                         -- in_rf_ptp_id
                         /*v_ultimate_customer_id := pkg_os_object_search.fn_object_get_parent_of_type
                                                   (
                                                        in_session_id,
                                                        in_transaction_id,
                                                        in_rf_ptp_id,
                                                        pkg_os_constant.gObjType_Customer
                                                   );*/
                         
                         -- OSPRODUCT-20220
                         v_rf_billing_account_id := pkg_db_bor.fn_get_ba_in_bor_customer
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rf_ultimate_customer_id,
                                                         v_entity_ba_id
                                                    );
                                                    
                         v_rf_entity_id := pkg_os_object.fn_object_parent_get
                                                     (
                                                          in_session_id,
                                                          in_transaction_id,
                                                          v_rf_billing_account_id
                                                     );
                                   
                         begin
                                   
                              select p.ptp_payer_id
                                into v_rf_payer_id
                                from dragon_ptp_payer p
                               where p.ptp_id = in_rf_ptp_id
                                 and p.billing_account_id = v_rf_billing_account_id;
                                      
                         exception
                              
                              when others then
                                                                                                                          
                                   v_rf_payer_id := pkg_os_object_search.fn_object_with_attribute_get
                                                    (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_rf_ptp_id,
                                                       pkg_db_multipayer.gObjType_PTPPayer,
                                                       pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr,
                                                       v_rf_entity_id
                                                    );
                                                                      
                         end;   
                         
                              
                    end if;

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Rollforward payer ID: '|| v_rf_payer_id
                         );

                    end if;
                    
                    -- UTXPRODUCT-522
                    -- 2.1 Create it from rb payer
                    if v_rf_payer_id is null then
                    
                         pkg_os_object_copy.sp_object_copy
                         (
                              in_session_id                  =>  in_session_id,
                              in_transaction_id              =>  in_transaction_id,
                              in_from_object_id              =>  v_rb_payer_id,
                              in_to_parent_id                =>  in_rf_ptp_id,                                                             -- in        object.object_id%type,
                              in_excluded_types              =>  v_object_copy_excluded_types,                                                 -- in        t_object_type_list,
                              in_included_types              =>  v_object_copy_included_types,                                                 -- in        t_object_type_list,
                              io_object_map                  =>  v_object_copy_list,                                                           -- in out    nocopy t_object_list,
                              io_counter                     =>  v_object_copy_counter,                                                        -- in out    number,
                              out_object_id                  =>  v_rf_payer_id,                                                     -- out       object.object_id%type,
                              in_reset_utemplate             =>  'F',                                                                          -- in        char default 'F',
                              in_recursive_copy_tf           =>  'T', -- copy inner objects taking into account the in_excluded_types list     -- in        char default 'F',
                              in_bv_copy                     =>  'T',                                                                          -- in        char default 'T',
                              in_object_state_id             =>  NULL, -- NULL does copy object satus values from the source object.           -- in        object.object_state_id%type default null,
                              in_exclude_deleted_objects_tf  =>  TRUE,                                                                         -- in        boolean default  true,
                              in_resolve_references          =>  TRUE, -- DO NOT skip the sp_resolve_references                                -- in        boolean default  false,
                              in_persist_template_tf         =>  'F'                                                                           -- in        char default 'F'  -- OSDRAGON-20875 Add ability to control persistence of template ID
                         );
                                             
                         if v_session_control.gLogging_Full
                         then
                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   '... New Payer ID: '|| v_rf_payer_id ||
                                   '... Account type ID: ' || v_entity_account_type_id
                                   
                              );

                         end if;
                                   
                         -- Reset the entity in case of BOR
                         -- UTXPRODUCT-522
                         if nvl(v_bortrx,0) = 1 -- Yes
                            and
                            v_entity_account_type_id = pkg_db_constant.gBillingAcType_Customer
                         then
                                               
                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_rf_payer_id,
                                   pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr, --32714824
                                   v_rf_entity_id
                              );
                              
                              if v_session_control.gLogging_Full
                              then
                                   
                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Entity reset to: '|| v_rf_entity_id                                        
                                   );

                              end if;
                                      
                         end if;
                         
                    end if;
                    
                    /*-- Add to list to use it later if required
                    -- using the value from the list gave a splat
                    if not v_rf_payer_list.exists(v_rb_payer_id) then
                         v_rf_payer_list(v_rb_payer_id) := v_rf_payer_id;
                    end if;*/
                    
                    v_idx := v_object_list.next(v_idx);
                    
               end loop;               
          
          end;
          
          -- UTXPRODUCT-522
          -- 3. Call image payer create          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (

                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...PTP Payer creation started.. '
               );
          end if;
          
          pkg_db_multipayer.sp_policy_image_payer_create
          (
               in_session_id,
               in_transaction_id,
               in_rf_ptp_id,
               io_action_outcome_id
          );
          
          -- UTXPRODUCT-522
          -- 4. Create term payer. Required for schedule generation
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (

                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Term Payer creation started.. '
               );
               
          end if;
          
          pkg_db_multipayer.sp_policy_term_payer_create
          (
               in_session_id,
               in_transaction_id,
               in_rf_ptp_id,  -- expect this to be a PolicyTerm
               io_action_outcome_id
          );
          
          -- OSPRODUCT-15577
          if io_action_outcome_id <> pkg_os_constant.gOutcome_OK
          then
               
               pkg_os_logging.sp_log_error
               (

                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '..Outcome returned is not OK.. ' || dbms_utility.format_error_backtrace
               );

               return; -- tertminate the process 
               
          end if;
          -- / OSPRODUCT-15577
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (

                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Starting schedule generation.. '
               );
          end if;

          -- UTPRODUCT-3923
          v_policy_transaction_id := null;
          v_new_term := null;
          v_transaction_type_id := null;
          
          for v_rb_payer_rec in (select * from dragon_ptp_payer where ptp_id = in_rb_ptp_id) 
          loop
               
               v_rb_payer_id := v_rb_payer_rec.ptp_payer_id;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (

                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '...Considering roll back payer ID: ' || v_rb_payer_id ||
                         '.. Payer Billing Account: '|| v_rb_payer_rec.billing_account_id 
                    );
               end if;               
               
               -- UTXPRODUCT-522
               -- 4.1 Get the rollforward payer
               begin
                    
                    -- UTXPRODUCT-522                   
                    if nvl(v_bortrx, 0) = 0 then

                         select
                              ptp.ptp_payer_id
                         into
                              v_rf_payer_id
                         from
                              dragon_ptp_payer ptp
                         where
                              ptp.ptp_id = in_rf_ptp_id
                         and
                              ptp.billing_account_id = v_rb_payer_rec.billing_account_id;

                    else
                         
                         v_rf_billing_account_id := pkg_db_bor.fn_get_ba_in_bor_customer
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rf_ultimate_customer_id,
                                                         v_rb_payer_rec.billing_account_id
                                                    );

                         select
                              ptp.ptp_payer_id
                         into
                              v_rf_payer_id
                         from
                              dragon_ptp_payer ptp
                         where
                              ptp.ptp_id = in_rf_ptp_id
                         and
                              ptp.billing_account_id = v_rf_billing_account_id;
     							 
                    end if;

               exception

                    when no_data_found then

                         v_ptp_payer_list.delete;

                         -- Get the payers
                         pkg_os_object_search.sp_object_children_of_type_get
                         (
                              in_session_id              =>    in_session_id,
                              in_transaction_id          =>    in_transaction_id,
                              in_object_id               =>    in_rf_ptp_id,
                              in_child_object_type_id    =>    pkg_db_constant.gobjType_PTPPayer,
                              in_object_list             =>    v_ptp_payer_list
                         );

                         v_payer_index := v_ptp_payer_list.first;

                         -- For each payer
                         while v_payer_index is not null loop

                              -- Get the billing account ID
                              v_billing_account_id := pkg_os_object_search.fn_object_11_child_get
                                                      (
                                                           in_session_id,
                                                           in_transaction_id,
                                                           pkg_os_object_io.fn_object_bv_get
                                                           (
                                                                in_session_id,
                                                                in_transaction_id,
                                                                v_ptp_payer_list(v_payer_index),
                                                                pkg_db_multipayer.gbv_PTPPayer_Ref_CustmrPartnr
                                                           ),
                                                           pkg_db_constant.gObjType_BillingAccount
                                                      );

                              if v_session_control.gLogging_Full
                              then
                                   pkg_os_logging.sp_log
                                   (

                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        '... Considering Payer ID: ' || v_ptp_payer_list(v_payer_index) ||
                                        '... Billing Account ID: '   || v_billing_account_id ||
                                        '... v_bortrx ' || v_bortrx
                                   );

                              end if;
                              
                              -- UTXPRODUCT-522
                              if nvl(v_bortrx,0) = 0 then

                                   if v_billing_account_id = v_rb_payer_rec.billing_account_id then

                                        v_rf_payer_id := v_ptp_payer_list(v_payer_index);

                                        if v_session_control.gLogging_Full
                                        then
                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '...Payer found1: ' || v_rf_payer_id
                                             );
                                        end if;
                                             
                                        exit;
                                             
                                   end if;
                                        
                              else
                                        
                                   if upper(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_billing_account_id,29974846)) =
                                      upper(pkg_os_object_io.fn_object_bv_get(in_session_id,in_transaction_id,v_rb_payer_rec.billing_account_id,29974846))
                                   then

                                        v_rf_payer_id := v_ptp_payer_list(v_payer_index);

                                        if v_session_control.gLogging_Full
                                        then
                                             pkg_os_logging.sp_log
                                             (

                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  '...Payer found: ' || v_rf_payer_id
                                             );

                                        end if;

                                        exit;

                                   end if;

                              end if;

                              v_payer_index := v_ptp_payer_list.next(v_payer_index);

                         end loop;

               end;
               
               if v_rf_payer_id is null then

                    if v_session_control.gLogging_Full
                    then
                         pkg_os_logging.sp_log_error
                         (

                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '...Corresponding Roll forward Payer not found..' || dbms_utility.format_error_backtrace
                         );

                    end if;

                    raise no_data_found;

               end if;

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (

                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '....Corresponding Roll forward Payer: ' || v_rf_payer_id
                    );

               end if;
               
               -- UTXPRODUCT-522
               -- 4.2 Get the chosen pay plan
               -- OSPRODUCT-17852
               v_rb_payer_chosen_payplan_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_rb_payer_id,
                                                    32705024 -- Payer chosen pay plan
                                               );

               v_rf_payer_chosen_payplan_id := pkg_os_object_io.fn_object_bv_get
                                               (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    v_rf_payer_id,
                                                    32705024
                                               );
                                               
               if v_rf_payer_chosen_payplan_id is null 
                    or (
                           nvl(v_bortrx,0) = 1
                           and
                           pkg_db_payplan_modify.fn_trx_starts_new_term(in_trx_type_id) = pkg_os_constant.gBoolean_True
                       )  --- OSPRODUCT-22084
                    then
                    
                    -- if chosen pay plan not set on teh rollforward payer set it with what is set on rollback payer
                    v_rb_payer_chosen_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                                       (
                                                            in_session_id,
                                                            in_transaction_id,
                                                            v_rb_payer_chosen_payplan_id,
                                                            212015 -- MD ID
                                                       );

                    -- UTXPRODUCT-522
                    -- Removed the call to the discarded version
                    v_rf_payer_chosen_payplan_id := pkg_os_object_search.fn_child_object_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rf_payer_id,
                                                         pkg_db_multipayer.gObjType_PTPPayerPaymentPlan,--3348124,
                                                         212015, -- Pay plan MD ID
                                                         v_rb_payer_chosen_payplan_md_id
                                                    );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (

                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Chosen Pay Plan MD ID: ' || v_rb_payer_chosen_payplan_md_id ||
                              '... Rollforward Chosen Pay Plan ID: ' || v_rf_payer_chosen_payplan_id
                         );

                    end if;

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_rf_payer_id,
                         32705024, -- Payer chosen pay plan
                         v_rf_payer_chosen_payplan_id
                    );

               end if;
               
               -- UTXPRODUCT-522
               -- 4.3 Get the modified pay plan
               v_rb_payer_modified_payplan_id := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     v_rb_payer_id,
                                                     32967024 -- Payer modified pay plan
                                                 );

               if v_session_control.gLogging_Full
               then
                    pkg_os_logging.sp_log
                    (

                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,                         
                         '.. Modified Pay plan ID: ' || v_rb_payer_modified_payplan_id
                    );

               end if;

               -- Pay plan modified on rollback payer
               if v_rb_payer_modified_payplan_id is not null then

                    v_rb_payer_mod_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rb_payer_modified_payplan_id,
                                                         212015 -- MD ID
                                                    );
                    
                    -- UTXPRODUCT-577 Start
                    v_rf_payer_chosen_payplan_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rf_payer_id,
                                                         32705024
                                                    );

                    v_rf_payer_ch_payplan_md_id := pkg_os_object_io.fn_object_bv_get
                                                    (
                                                         in_session_id,
                                                         in_transaction_id,
                                                         v_rf_payer_chosen_payplan_id,
                                                         212015 -- MD ID
                                                    );

                    -- UTXPRODUCT-577 End

                         if v_rf_payer_ch_payplan_md_id <> v_rb_payer_mod_payplan_md_id then -- UTXPRODUCT-577

                    -- UTXPRODUCT-522
                    -- Removed the call to the discarded version
                    v_rf_payer_mod_payplan_id := pkg_os_object_search.fn_child_object_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                     v_rf_payer_id,
                                                     pkg_db_multipayer.gObjType_PTPPayerPaymentPlan,--3348124,
                                                     212015, -- Pay plan MD ID
                                                     v_rb_payer_mod_payplan_md_id
                                                 );

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (

                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Mod Pay Plan MD ID: ' || v_rb_payer_mod_payplan_md_id ||
                              '... Rollforward Modified Pay Plan ID: ' || v_rf_payer_mod_payplan_id
                         );

                    end if;

                    pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         v_rf_payer_id,
                         32967024, -- Payer modified pay plan
                         v_rf_payer_mod_payplan_id
                    );

                    --OSPRODUCT-7199 start
                    pkg_os_object_search.sp_object_children_of_type_get
                    (
                         in_session_id,
                         in_transaction_id,
                         v_rf_payer_mod_payplan_id,
                         2297206,
                         v_pymntsch_list
                    );

                    v_pymntsch_index := v_pymntsch_list.first;

                    while v_pymntsch_index is not null loop

                         pkg_os_object.sp_object_delete
                         (
                              in_session_id,
                              in_transaction_id,
                              v_rf_payer_mod_payplan_id,
                              v_pymntsch_list(v_pymntsch_index),
                              pkg_db_payplan_modify.gObjType_ScheduledPayment, --2297206,
                              null,
                              false
                         );

                         v_pymntsch_index := v_pymntsch_list.next(v_pymntsch_index);

                    end loop;
                    
                    -- UTXPRODUCT-522
                    -- Moved in the start as it is common for both SP and MP
                    /*pkg_os_object_io.sp_object_bv_set
                    (
                         in_session_id,
                         in_transaction_id,
                         in_rf_ptp_id,
                         pkg_db_billing_modify.gbv_PTP_ProcessModPayPlanInd,--31867946
                         v_rb_modified_ind
                    );*/

                    -- OSPRODUCT-7199 end
                    -- CR KR
                    -- Verify whether the change payment plan was from start of the term , if yes set the original transaction process date
                    -- UTXPRODUCT-522
                    -- 4.4 Set up the start of the term indicator
                    if pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id, in_rb_ptp_id, pkg_db_payplan_modify.gbv_ptp_cpp_term_start_ind) is not null
                    then

                         pkg_os_object_io.sp_object_bv_set
                         (
                             in_session_id,
                             in_transaction_id,
                             in_rf_ptp_id,
                             pkg_db_payplan_modify.gbv_ptp_cpp_term_start_ind,
                             0
                         );

                         pkg_os_object_io.sp_object_bv_set
                         (
                             in_session_id,
                             in_transaction_id,
                             in_rf_trx_id,
                             32630948,
                             pkg_os_object_io.fn_object_bv_path_get( in_session_id, in_transaction_id, in_rf_trx_id,  '29728801.29749301.212161')
                         );

                    end if; -- CR KR

               end if;

               end if;  -- UTXPRODUCT-577
               --OSPRODUCT-10418 Replaced end if so that schedule generate is exclusive of mod payplan indicator

               -- Generate the schedule
               if v_policy_transaction_id is null then
                   v_policy_transaction_id := pkg_os_object.fn_object_parent_get( in_session_id, in_transaction_id, in_rf_ptp_id );
               end if;

               if v_transaction_type_id is null then
                   v_transaction_type_id := pkg_os_object_io.fn_object_bv_get ( in_session_id, in_transaction_id, v_policy_transaction_id, pkg_os_constant_bv.gbv_PolicyTranType );
               end if;

               if v_new_term is null then
                   v_new_term := pkg_db_payplan_modify.fn_trx_starts_new_term(v_transaction_type_id);
               end if;

               if v_rf_payer_mod_payplan_id is null or v_rf_payer_chosen_payplan_id = v_rf_payer_mod_payplan_id
               then

                    --
                    --   Either I'm generating a payment plan for the first time, or I have not changed the payment plan ...
                    --
                    v_modifying_payment_plan := 'F';
                    v_payment_plan_id := v_rf_payer_chosen_payplan_id;

               else

                    v_modifying_payment_plan := 'T';
                    v_payment_plan_id := v_rf_payer_mod_payplan_id;

               end if;

               --OSBILLING-7831
               v_current_date_time := nvl(
                                         pkg_db_functions.fn_get_processed_date
                                         (
                                              in_session_id,
                                              in_transaction_id,
                                              v_policy_image_id
                                         ), v_current_date_time
                                    );
               -- utproduct-3925
               if v_current_date_time  is not null and pkg_os_object_io.fn_object_bv_get(in_session_id, in_transaction_id , v_policy_image_id, pkg_db_payplan_modify.gbv_ptp_cpp_term_start_ind) is not null then

                    v_current_payer_date_time := to_date( pkg_os_object_io.fn_object_bv_get
                                                          (
                                                               in_session_id,
                                                               in_transaction_id,
                                                               v_rf_payer_id,
                                                               pkg_db_constant.gbv_payer_process_date
                                                          ),pkg_os_constant.DragonDateFormatDefault
                                                        );

                    if v_current_payer_date_time is not null
                    then
                         v_current_date_time :=  v_current_payer_date_time;
                    end if;

               end if;

               if v_modifying_payment_plan = 'F' then

                    if v_session_control.gLogging_Full
                    then

                         pkg_os_logging.sp_log
                         (

                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              '... Rescheduling schedules '
                         );

                    end if;

                    pkg_db_payplan_modify.sp_restore_payment_schedule
                    (
                         in_session_id,
                         in_transaction_id,
                         in_rf_ptp_id,
                         v_rf_payer_id --OSPRODUCT-2459
                    );

               end if;

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (

                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Schedule generation started '
                    );

               end if;

               pkg_db_payplan_modify.sp_payment_schedule_generate
               (
                    in_session_id,
                    in_transaction_id,
                    in_rf_ptp_id,
                    v_new_term,
                    v_payment_plan_id ,
                    v_current_date_time,
                    null,
                    in_change_payplan => v_modifying_payment_plan,
                    io_action_outcome_id => io_action_outcome_id -- OSPRODUCT-15833
               );

               if v_session_control.gLogging_Full
               then

                    pkg_os_logging.sp_log
                    (

                         in_session_id,
                         in_transaction_id,
                         v_procedure_name,
                         '... Schedule generation completed '
                    );

               end if;

          end loop;
          -- end UTPRODUCT-3923

     end if;
     
     -- OSPRODUCT-19889          
     if nvl(v_bortrx, 0) = 1 then -- Yes
          
          if v_session_control.gLogging_Full
          then
               pkg_os_logging.sp_log
               (

                    in_session_id,
                    in_transaction_id,
                    v_procedure_name,
                    '...Pre-setup for profile and bill plan '
               );
          end if;
               
          pkg_db_bor.sp_clone_ctf_to_rewrite_policy
          (
                 in_session_id => in_session_id,
                 in_transaction_id => in_transaction_id,
                 in_old_policy_id => pkg_os_object.fn_object_parent_get(in_session_id, in_transaction_id, v_rb_pt_id),
                 in_new_customer_id => v_rf_ultimate_customer_id,
                 in_new_policy_trx_id => in_rf_trx_id
          );
          
     end if;
     -- end OSPRODUCT-19889
     
end sp_roll_forward;


procedure sp_load_gtt_trx_hist
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billingaccount_id               in             object.object_id%type
)
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_load_gtt_trx_hist';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     
begin

     --empty GTT
     DELETE 
          ba_transaction_history 
     WHERE 
          BILLING_ACCOUNT_ID = in_billingaccount_id 
     AND 
          USER_SESSION_ID = in_session_id;
     
     --Insert new billing_account_id
     insert into ba_transaction_history 
     ( 
          "BILLINGACCOUNTTRXSET_ID","EXTERNAL_BATCH_ID","BATCH_TYPE","BATCH_TYPE_ID","BATCH_ENTRY_METHOD",
          "PARTNER_BILLING_ACCOUNT_NO","BILLING_ACCOUNT_ID",parent_billing_account_id,
          "POLICY_ID","POLICY_NUMBER","POSTED_DATE","PROCESSED_DATE",BATCH_AMOUNT,"CHANGE_AMOUNT",
          "GENERIC_INSTANCE_NUMBER","BATCH_STATUS","BATCH_STATUS_ID","ACCOUNTING_PERIOD",
          "ACCOUNT_BALANCE","LEGACY_ID","OBJECT_SOURCE_DESC","BATCH_SUBTYPE_CODE","RN","USER_SESSION_ID"
     ) 
     SELECT "BILLINGACCOUNTTRXSET_ID","EXTERNAL_BATCH_ID","BATCH_TYPE","BATCH_TYPE_ID","BATCH_ENTRY_METHOD","PARTNER_BILLING_ACCOUNT_NO","BILLING_ACCOUNT_ID",parent_billing_account_id,"POLICY_ID","POLICY_NUMBER","POSTED_DATE","PROCESSED_DATE",DECODE(BILLING_ACCOUNT_ID,parent_billing_account_id,"BATCH_AMOUNT",CHANGE_AMOUNT) as BATCH_AMOUNT,"CHANGE_AMOUNT","GENERIC_INSTANCE_NUMBER","BATCH_STATUS","BATCH_STATUS_ID","ACCOUNTING_PERIOD",DECODE(BILLING_ACCOUNT_ID,parent_billing_account_id,ACCOUNT_BALANCE,null) as "ACCOUNT_BALANCE","LEGACY_ID","OBJECT_SOURCE_DESC","BATCH_SUBTYPE_CODE","RN", IN_SESSION_ID as "USER_SESSION_ID"
     FROM 
     (
          SELECT /* FIRST_ROWS(5) */
                    l_trx.*,
                    rank() over(ORDER BY l_trx.posted_date DESC) rn --OSPRODUCT-30089
          FROM 
          (
               SELECT /*+ INDEX(BTS dragon_batrxset_i16) */
                         bts.billingaccounttrxset_id,
                         bts.external_batch_id,
                         nvl(bts.batch_display_name, bts.batch_type) batch_type,
                         bts.batch_type_id, --OSBILLING-3366
                         bts.batch_entry_method,
                         bts.partner_billing_account_no,
                         --2017-03-30 Cheryl osbilling-3999 add left join back and nvl around billing_account_id
                         bts.parent_billing_account_id AS billing_account_id,
                         bts.parent_billing_account_id,
                         bts.policy_id,
                         bts.policy_number,
						 NVL(bts.posted_date,bts.creation_date) as posted_date,--OSPRODUCT-30089
                         bts.processed_date,
                         bts.batch_amount,
                         0 change_amount,
                         bts.generic_instance_number,
                         bts.batch_status,
                         bts.batch_status_id, --OSBILLING-3366
                         bts.accounting_period,
                         bts.account_balance,
                         bts.legacy_id,
                         bts.object_source_desc,
                         bts.batch_subtype_code,
                         bts.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               FROM 
                    dragon_billingaccounttrxset bts
               WHERE
                         bts.parent_billing_account_id = in_billingaccount_id
               AND
                         batch_type_id not in (6007, 7004)
               and
                         batch_status_id != 23
               GROUP BY 
                         bts.billingaccounttrxset_id,
                         bts.external_batch_id,
                         nvl(bts.batch_display_name, bts.batch_type),
                         bts.batch_type_id,
                         bts.batch_entry_method,
                         bts.partner_billing_account_no,
                         bts.parent_billing_account_id,
                         bts.parent_billing_account_id,
                         bts.policy_id,
                         bts.policy_number,
                         NVL(bts.posted_date,bts.creation_date),--OSPRODUCT-30089  
						 bts.processed_date,
                         bts.batch_amount,
                         bts.generic_instance_number,
                         bts.batch_status,
                         bts.batch_status_id,
                         bts.accounting_period,
                         bts.account_balance,
                         bts.legacy_id,
                         bts.object_source_desc,
                         bts.batch_subtype_code,
                         bts.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               UNION ALL    --OSBILLING-5508 Below code added to include Manual write-off/ Manual Disbursement
               SELECT DISTINCT 
                         BT.BILLINGACCOUNTTRXSET_ID,    --in Referred/ Discarded status under Most recent transaction block
                         BT.EXTERNAL_BATCH_ID,
                         NVL(BT.BATCH_DISPLAY_NAME, BT.BATCH_TYPE) BATCH_TYPE,
                         BT.BATCH_TYPE_ID,
                         BT.BATCH_ENTRY_METHOD,
                         BT.PARTNER_BILLING_ACCOUNT_NO,
                         NVL(BT.PARENT_BILLING_ACCOUNT_ID, 0) AS BILLING_ACCOUNT_ID,
                         bt.parent_billing_account_id AS parent_billing_account_id,
                         BT.POLICY_ID,
                         BT.POLICY_NUMBER,
                         NVL(bt.posted_date,bt.creation_date) AS posted_date,--OSPRODUCT-30089
                         BT.PROCESSED_DATE,
                         BT.BATCH_AMOUNT,
                         0 CHANGE_AMOUNT,
                         BT.GENERIC_INSTANCE_NUMBER,
                         BT.BATCH_STATUS,
                         BT.BATCH_STATUS_ID,
                         BT.ACCOUNTING_PERIOD,
                         BT.ACCOUNT_BALANCE,
                         BT.LEGACY_ID,
                         BT.OBJECT_SOURCE_DESC,
                         BT.BATCH_SUBTYPE_CODE,
                         BT.value_stream              --MUSTDEV-40461  OSPRODUCT-2071
               FROM 
                    DRAGON_BILLINGACCOUNTTRXSET BT
               WHERE 
                    bt.parent_billing_account_id = in_billingaccount_id
               AND    --OSPRODUCT-6725
               (
                    (
                         BT.BATCH_TYPE_ID IN (2101, 2301,7001,6002,6001) --'7001' added as per OSBILLING-5923,6046--for suspension and 5946 for resume as per OSBILLING-7275
                         AND BT.BATCH_STATUS_ID IN (49346, 61546,39946) --39846 added as per OSBILLING-7275
                    )
                    or
                    (
                         BT.BATCH_TYPE_ID IN (6046,5946) --'7001' added as per OSBILLING-5923,6046--for suspension and 5946 for resume as per OSBILLING-7275
                         AND BT.BATCH_STATUS_ID IN (49346, 61546,39946,39846) --39846 added as per OSBILLING-7275
                    )
               )
               AND nvl(bt.VALUE_STREAM,0) <> 2
               UNION ALL
               SELECT DISTINCT 
                         BT.BILLINGACCOUNTTRXSET_ID,    --in Referred/ Discarded status under Most recent transaction block
                         BT.EXTERNAL_BATCH_ID,
                         NVL(BT.BATCH_DISPLAY_NAME, BT.BATCH_TYPE) BATCH_TYPE,
                         BT.BATCH_TYPE_ID,
                         BT.BATCH_ENTRY_METHOD,
                         BT.PARTNER_BILLING_ACCOUNT_NO,
                         NVL(BT.PARENT_BILLING_ACCOUNT_ID, 0) AS BILLING_ACCOUNT_ID,
                         bt.parent_billing_account_id AS parent_billing_account_id,
                         BT.POLICY_ID,
                         BT.POLICY_NUMBER,
                         NVL(bt.posted_date,bt.creation_date) as posted_date, --OSPRODUCT-30089
                         BT.PROCESSED_DATE,
                         BT.BATCH_AMOUNT,
                         0 CHANGE_AMOUNT,
                         BT.GENERIC_INSTANCE_NUMBER,
                         BT.BATCH_STATUS,
                         BT.BATCH_STATUS_ID,
                         BT.ACCOUNTING_PERIOD,
                         BT.ACCOUNT_BALANCE,
                         BT.LEGACY_ID,
                         BT.OBJECT_SOURCE_DESC,
                         BT.BATCH_SUBTYPE_CODE,
                         BT.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               FROM 
                    DRAGON_BILLINGACCOUNTTRXSET BT
               WHERE bt.parent_billing_account_id = in_billingaccount_id
               AND  BT.BATCH_TYPE_ID IN (101,201,301)
               AND  BT.BATCH_STATUS_ID IN (39846)
               AND  nvl(bt.VALUE_STREAM,0) <> 2) l_trx      --'39946' added as per OSBILLING-5979 by Satyam Pradhan on 24th Dec 2018
               ORDER BY billingaccounttrxset_id DESC
     )
     WHERE rn <= 5;

end sp_load_gtt_trx_hist;


procedure sp_load_gtt_rel_trx_hist
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_billingaccount_id               in             object.object_id%type
)
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_load_gtt_rel_trx_hist';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);

     
begin

     --empty GTT
     DELETE 
          ba_transaction_history 
     WHERE 
          BILLING_ACCOUNT_ID = in_billingaccount_id 
     AND 
          USER_SESSION_ID = in_session_id;
     
     --Insert new billing_account_id
     insert into ba_transaction_history 
     ( 
          "BILLINGACCOUNTTRXSET_ID","EXTERNAL_BATCH_ID","BATCH_TYPE","BATCH_TYPE_ID","BATCH_ENTRY_METHOD",
          "PARTNER_BILLING_ACCOUNT_NO","BILLING_ACCOUNT_ID",parent_billing_account_id,
          "POLICY_ID","POLICY_NUMBER","POSTED_DATE","PROCESSED_DATE",BATCH_AMOUNT,"CHANGE_AMOUNT",
          "GENERIC_INSTANCE_NUMBER","BATCH_STATUS","BATCH_STATUS_ID","ACCOUNTING_PERIOD",
          "ACCOUNT_BALANCE","LEGACY_ID","OBJECT_SOURCE_DESC","BATCH_SUBTYPE_CODE","RN","USER_SESSION_ID"
     ) 
     WITH fic AS
     (
          SELECT df.billingaccounttrxset_id,
          df.fitransaction,
          df.billing_account_id,
          df.related_fitem_account_id,
          SUM(action_delta) change_amount
          FROM dragon_fichange df
          WHERE df.billing_account_id = in_billingaccount_id
          GROUP BY df.billing_account_id,
          df.related_fitem_account_id,
          df.billingaccounttrxset_id,
          df.fitransaction
     )
     SELECT "BILLINGACCOUNTTRXSET_ID","EXTERNAL_BATCH_ID","BATCH_TYPE","BATCH_TYPE_ID","BATCH_ENTRY_METHOD","PARTNER_BILLING_ACCOUNT_NO","BILLING_ACCOUNT_ID",parent_billing_account_id,"POLICY_ID","POLICY_NUMBER","POSTED_DATE","PROCESSED_DATE",DECODE(BILLING_ACCOUNT_ID,parent_billing_account_id,"BATCH_AMOUNT",CHANGE_AMOUNT) as BATCH_AMOUNT,"CHANGE_AMOUNT","GENERIC_INSTANCE_NUMBER","BATCH_STATUS","BATCH_STATUS_ID","ACCOUNTING_PERIOD",DECODE(BILLING_ACCOUNT_ID,parent_billing_account_id,ACCOUNT_BALANCE,null) as "ACCOUNT_BALANCE","LEGACY_ID","OBJECT_SOURCE_DESC","BATCH_SUBTYPE_CODE","RN", IN_SESSION_ID as "USER_SESSION_ID"
     FROM 
     (
          SELECT /* FIRST_ROWS(5) */
                    l_trx.*,
                    rank() over(ORDER BY l_trx.billingaccounttrxset_id DESC) rn
          FROM 
          (
               SELECT 
                         bts.billingaccounttrxset_id,
                         bts.external_batch_id,
                         nvl(bts.batch_display_name, bts.batch_type) batch_type,
                         bts.batch_type_id, --OSBILLING-3366
                         bts.batch_entry_method,
                         bts.partner_billing_account_no,
                         --2017-03-30 Cheryl osbilling-3999 add left join back and nvl around billing_account_id
                         nvl(fic.billing_account_id, bts.parent_billing_account_id) AS billing_account_id,
                         bts.parent_billing_account_id,
                         bts.policy_id,
                         bts.policy_number,
                         bts.posted_date,
                         bts.processed_date,
                         bts.batch_amount,
                         0 change_amount,
                         bts.generic_instance_number,
                         bts.batch_status,
                         bts.batch_status_id, --OSBILLING-3366
                         bts.accounting_period,
                         bts.account_balance,
                         bts.legacy_id,
                         bts.object_source_desc,
                         bts.batch_subtype_code,
                         bts.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               FROM 
                    dragon_billingaccounttrxset bts
               INNER JOIN 
                    fic
               ON 
                    (
                         bts.billingaccounttrxset_id =  fic.billingaccounttrxset_id
                    --and  bts.parent_billing_account_id = fic.related_fitem_account_id
                    )
               WHERE
                         batch_type_id not in (6007, 7004)
               and
                         batch_status_id not in ( 23, 24) -- OSPRODUCT-11329
               GROUP BY 
                         bts.billingaccounttrxset_id,
                         bts.external_batch_id,
                         nvl(bts.batch_display_name, bts.batch_type),
                         bts.batch_type_id,
                         bts.batch_entry_method,
                         bts.partner_billing_account_no,
                         nvl(fic.billing_account_id, bts.parent_billing_account_id),
                         bts.parent_billing_account_id,
                         bts.policy_id,
                         bts.policy_number,
                         bts.posted_date,
                         bts.processed_date,
                         bts.batch_amount,
                         bts.generic_instance_number,
                         bts.batch_status,
                         bts.batch_status_id,
                         bts.accounting_period,
                         bts.account_balance,
                         bts.legacy_id,
                         bts.object_source_desc,
                         bts.batch_subtype_code,
                         bts.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               UNION     --OSBILLING-5508 Below code added to include Manual write-off/ Manual Disbursement
               SELECT DISTINCT 
                         BT.BILLINGACCOUNTTRXSET_ID,    --in Referred/ Discarded status under Most recent transaction block
                         BT.EXTERNAL_BATCH_ID,
                         NVL(BT.BATCH_DISPLAY_NAME, BT.BATCH_TYPE) BATCH_TYPE,
                         BT.BATCH_TYPE_ID,
                         BT.BATCH_ENTRY_METHOD,
                         BT.PARTNER_BILLING_ACCOUNT_NO,
                         NVL(BT.PARENT_BILLING_ACCOUNT_ID, 0) AS BILLING_ACCOUNT_ID,
                         bt.parent_billing_account_id AS parent_billing_account_id,
                         BT.POLICY_ID,
                         BT.POLICY_NUMBER,
                         BT.POSTED_DATE,
                         BT.PROCESSED_DATE,
                         BT.BATCH_AMOUNT,
                         0 CHANGE_AMOUNT,
                         BT.GENERIC_INSTANCE_NUMBER,
                         BT.BATCH_STATUS,
                         BT.BATCH_STATUS_ID,
                         BT.ACCOUNTING_PERIOD,
                         BT.ACCOUNT_BALANCE,
                         BT.LEGACY_ID,
                         BT.OBJECT_SOURCE_DESC,
                         BT.BATCH_SUBTYPE_CODE,
                         BT.value_stream              --MUSTDEV-40461  OSPRODUCT-2071
               FROM 
                    DRAGON_BILLINGACCOUNTTRXSET BT
               WHERE 
                    bt.parent_billing_account_id = in_billingaccount_id
               AND    --OSPRODUCT-6725
               (
                    (
                         BT.BATCH_TYPE_ID IN (2101, 2301,7001,6002,6001) --'7001' added as per OSBILLING-5923,6046--for suspension and 5946 for resume as per OSBILLING-7275
                         AND BT.BATCH_STATUS_ID IN (49346, 61546,39946) --39846 added as per OSBILLING-7275
                    )
                    or
                    (
                         BT.BATCH_TYPE_ID IN (6046,5946) --'7001' added as per OSBILLING-5923,6046--for suspension and 5946 for resume as per OSBILLING-7275
                         AND BT.BATCH_STATUS_ID IN (49346, 61546,39946,39846) --39846 added as per OSBILLING-7275
                    )
               )
               AND nvl(bt.VALUE_STREAM,0) <> 2
               UNION
               SELECT DISTINCT 
                         BT.BILLINGACCOUNTTRXSET_ID,    --in Referred/ Discarded status under Most recent transaction block
                         BT.EXTERNAL_BATCH_ID,
                         NVL(BT.BATCH_DISPLAY_NAME, BT.BATCH_TYPE) BATCH_TYPE,
                         BT.BATCH_TYPE_ID,
                         BT.BATCH_ENTRY_METHOD,
                         BT.PARTNER_BILLING_ACCOUNT_NO,
                         NVL(BT.PARENT_BILLING_ACCOUNT_ID, 0) AS BILLING_ACCOUNT_ID,
                         bt.parent_billing_account_id AS parent_billing_account_id,
                         BT.POLICY_ID,
                         BT.POLICY_NUMBER,
                         BT.POSTED_DATE,
                         BT.PROCESSED_DATE,
                         BT.BATCH_AMOUNT,
                         0 CHANGE_AMOUNT,
                         BT.GENERIC_INSTANCE_NUMBER,
                         BT.BATCH_STATUS,
                         BT.BATCH_STATUS_ID,
                         BT.ACCOUNTING_PERIOD,
                         BT.ACCOUNT_BALANCE,
                         BT.LEGACY_ID,
                         BT.OBJECT_SOURCE_DESC,
                         BT.BATCH_SUBTYPE_CODE,
                         BT.value_stream              --MUSTDEV-40461 OSPRODUCT-2071
               FROM 
                    DRAGON_BILLINGACCOUNTTRXSET BT
               WHERE bt.parent_billing_account_id = in_billingaccount_id
               AND  BT.BATCH_TYPE_ID IN (101,201,301)
               AND  BT.BATCH_STATUS_ID IN (39846)
               AND  nvl(bt.VALUE_STREAM,0) <> 2) l_trx      --'39946' added as per OSBILLING-5979 by Satyam Pradhan on 24th Dec 2018
               ORDER BY billingaccounttrxset_id DESC
     )
     WHERE rn <= 5;

end sp_load_gtt_rel_trx_hist;

--UTPRODUCT2-1 start
procedure sp_set_invoice_preference
(
     in_session_id                      in             object.object_id%type,
     in_transaction_id                  in             object.object_id%type,
     in_policy_image_id                 in             object.object_id%type,
     in_policy_transaction_id           in             object.object_id%type,
     in_policy_term_id                  in             object.object_id%type,
     in_policy_id                       in             object.object_id%type,
     in_policy_transaction_type         in             number,
     in_ptp_payer_list                   in             pkg_os_object.t_object_list
)
as
     v_procedure_name                   constant system_log.program_name%type        := pkg_name||'sp_set_invoice_preference';
     v_session_control                  pkg_os_session.r_dragon_session_control      := pkg_os_session.fn_session_control_get(in_session_id, in_transaction_id);
     v_invoice_preference               number;
     v_last_term_id                     object.object_id%type;
     v_basis_trx_id                     object.object_id%type;
     v_related_entity_id                object.object_id%type;
     v_term_payer_id                    object.object_id%type;
     v_rewrite_with_new_policy          number;
     v_datamart_tf                      char(1) := 'T';
     v_idx                              number;
     v_copy_from_prev_term_tf           char;
     -- UTPRODUCT2-58 - Start
     v_bor_initiated_trx_tf             number; 
     v_current_term_id                  object.object_id%type;  
     v_rw_ptp_id                        object.object_id%type; 
     v_rw_pred_ptp_id                   object.object_id%type; 
     v_rw_pred_pt_id                    object.object_id%type; 
     -- UTPRODUCT2-58 - End
     v_policy_trx_type_id               pd_transaction_type.pd_transaction_type_id%type; -- UTPRODUCT2-61 
	 
     cursor c_term_payers is
     select POLICY_TERM_PAYER_ID,INVOICE_PREFERENCE ,PAYER_ENTITY_ID
     from dragon_policy_term_payer
     where policy_term_id=v_last_term_id;

	 --UTPRODUCT2-13     
     cursor c_impacted_account is
     select distinct BILLING_ACCOUNT_ID from dragon_fitem df 
     where df.policy_transaction_id=in_policy_transaction_id
     and FITEM_TYPE_ID=gFItem_Debit
     and FITEM_CATEGORY_ID<>gFItem_Cat_Commission;

begin

     if v_session_control.gLogging_Full then

          pkg_os_logging.sp_log
          (
               in_session_id,
               in_transaction_id,
               v_procedure_name,
               ' Entering procedure with '||
               'image: '|| in_policy_image_id ||
               ' , policy trx:'||in_policy_transaction_id||
               ' , term :'||in_policy_term_id||
               ' , policy :'||in_policy_id||
               ' , trx type:'||in_policy_transaction_type ||
               ' , payer count:'||in_ptp_payer_list.count
          );

     end if;

     --UTPRODUCT2-13
     If nvl(pkg_os_system_attribute.fn_get_system_attribute_value ( 'ENABLE_ACCOUNT_INVOICE_STMT' ),'F') = 'T' then


          if NVL(in_policy_transaction_type,0) in ( pkg_os_policy_transaction.gPolicyTrxType_NewBusiness,pkg_os_policy_transaction.gPolicyTrxType_Renewal, pkg_os_policy_transaction.gPolicyTrxType_NBRewrite,pkg_os_policy_transaction.gPolicyTrxType_Rewrite) then

               if in_policy_transaction_type = ( pkg_os_policy_transaction.gPolicyTrxType_NewBusiness) then

                    v_copy_from_prev_term_tf := 'F';


               elsif in_policy_transaction_type in (pkg_os_policy_transaction.gPolicyTrxType_Renewal, pkg_os_policy_transaction.gPolicyTrxType_NBRewrite) then

                    v_copy_from_prev_term_tf := 'T';

               elsif in_policy_transaction_type = (pkg_os_policy_transaction.gPolicyTrxType_Rewrite)  then

                    -- UTPRODUCT2-58
                    v_bor_initiated_trx_tf := nvl 
                                                ( pkg_os_object_io.fn_object_bv_get 
                                                    (
                                                    in_session_id,
                                                    in_transaction_id,
                                                    in_session_id,
                                                    pkg_db_suspension.gbv_UserSession_BOR_trx
                                                    ), pkg_os_constant_enum.gBoolean_False
                                                );

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' Checking BOR Flag '||v_bor_initiated_trx_tf
                         );

                    end if;

                    If v_bor_initiated_trx_tf = pkg_os_constant_enum.gBoolean_True then
                        v_copy_from_prev_term_tf := 'T';
                    -- UTPRODUCT2-58 - End   
                    Else
                         v_rewrite_with_new_policy := pkg_os_object_io.fn_object_bv_get
                                                 (
                                                      in_session_id,
                                                      in_transaction_id,
                                                      in_policy_transaction_id,
                                                      gbv_PT_Rewrite_New_Policy
                                                 );

                        if( NVL(v_rewrite_with_new_policy,0)= 2) then     -- 2:No

                             v_copy_from_prev_term_tf := 'T';
                        else

                             v_copy_from_prev_term_tf := 'F';

                        end if;
                    end if; -- UTPRODUCT2-58
               end if;

               if v_copy_from_prev_term_tf = 'T' then
                    -- UTPRODUCT2-58 - Start
                    If v_bor_initiated_trx_tf = pkg_os_constant_enum.gBoolean_True then

                        v_current_term_id := pkg_os_object_io.fn_object_bv_get
                                                (
                                                     in_session_id,
                                                     in_transaction_id,
                                                     in_policy_transaction_id,
                                                     gbv_PolicyTrx_RefBelongsTo -- 29728801  
                                                );                                 

                          v_last_term_id := pkg_os_object_io.fn_object_bv_get                
                                            (
                                                in_session_id,
                                                in_transaction_id,
                                                v_current_term_id,
                                                gbv_PolicyTerm_RwPredecessor -- 31531746 
                                            );      

                        if v_session_control.gLogging_Full then

                             pkg_os_logging.sp_log
                             (
                                  in_session_id,
                                  in_transaction_id,
                                  v_procedure_name,
                                  ' BOR Rewrite - Getting Predecessor from Term'
                                  || ' Policy Transaction ID : - ' || in_policy_transaction_id
                                  || ' Current Term ID : - ' || v_current_term_id
                                  || ' Last Term ID : - ' || v_last_term_id
                             );

                        end if;   

                        If v_last_term_id is null then 


                            v_rw_ptp_id := pkg_os_object_io.fn_object_bv_get                
                                            (
                                            in_session_id,
                                            in_transaction_id,
                                            in_policy_transaction_id,
                                            gbv_PolicyTrx_RefCoverages -- 212318 
                                            );            

                            v_rw_pred_ptp_id := pkg_os_object_io.fn_object_bv_get                        
                                                (
                                                in_session_id,
                                                in_transaction_id,
                                                v_rw_ptp_id,
                                                gbv_Policy_RwPredecessor -- 32752248 
                                                 );     

                            v_rw_pred_pt_id :=  pkg_os_object_search.fn_object_get_parent_of_type
                                                (
                                                in_session_id,
                                                in_transaction_id,
                                                v_rw_pred_ptp_id,
                                                pkg_os_constant.gobjType_PolicyTransaction
                                                );    


                            v_last_term_id := pkg_os_object_io.fn_object_bv_get
                                                (
                                                in_session_id,
                                                in_transaction_id,
                                                v_rw_pred_pt_id, 
                                                gbv_PolicyTrx_RefBelongsTo -- 29728801 
                                                );   

                            if v_session_control.gLogging_Full then

                                pkg_os_logging.sp_log
                                (
                                in_session_id,
                                in_transaction_id,
                                v_procedure_name,
                                ' BOR Rewrite - Getting Predecessor from PTP '
                                || ' Policy Transaction ID : - ' || in_policy_transaction_id
                                || ' Rewrite PTP ID : - ' || v_rw_ptp_id
                                || ' RW PTP Predecessor : - ' || v_rw_pred_ptp_id
                                || ' RW PT Predecessor : - ' || v_rw_pred_pt_id                                      
                                || ' Last Term ID : - ' || v_last_term_id
                                );

                            end if;                                                        

                        end if;
                        -- UTPRODUCT2-58 - End
                    Else

                        v_basis_trx_id     :=    pkg_os_object_io.fn_object_bv_get
                        (
                             in_session_id,
                             in_transaction_id,
                             in_policy_transaction_id,
                             PKG_OS_POLICY_TRANSACTION.gbv_PolicyTrxBasisTransaction
                        );
                        v_last_term_id     :=    pkg_os_object_io.fn_object_bv_path_get
                        (
                             in_session_id,
                             in_transaction_id,
                             v_basis_trx_id,
                             PKG_DB_OBJECT.gbv_PolicyTrx_RefPolicyTerm
                        );
                    end if;
                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' As it is Renewal, NB Rewrite or Rewrite transaction with existing policy number, copying invoice pref from LAST TERM: '
                              ||v_last_term_id
                         );

                    end if;

                    if ( nvl ( pkg_os_object_io.fn_object_bv_get
                                    (
                                         in_session_id,
                                         in_transaction_id,
                                         in_policy_image_id,
                                         pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                                    ), pkg_db_multipayer.genum_No) = pkg_db_multipayer.genum_No ) then


                         if v_last_term_id is not null then

                              v_invoice_preference :=  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       v_last_term_id,
                                                       gbv_PTerm_InvoicePref
                                                  );

                         else
                              v_invoice_preference :=  pkg_os_object_io.fn_object_bv_get
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        in_policy_image_id,
                                        gbv_PTP_InvoicePref
                                   );
                         end if;

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'copying invoice pref from PTP: ' ||in_policy_image_id
                                   || ' and last term :'||v_last_term_id
                                   || ' to  Term: '||in_policy_term_id
                                   || ' value :'||v_invoice_preference
                              );

                         end if;

                         if v_invoice_preference is not null then

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_term_id,
                                   gbv_PTerm_InvoicePref,
                                   v_invoice_preference
                              );

                              pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_policy_term_id, v_datamart_tf);

                         end if;

                    else


                         for r_termpayers in c_term_payers loop


                              begin
                                   select POLICY_TERM_PAYER_ID
                                   into v_term_payer_id
                                   from dragon_policy_term_payer
                                   where payer_entity_id = r_termpayers.PAYER_ENTITY_ID
                                   and policy_id=in_policy_id
                                   and policy_term_id=in_policy_term_id;

                              exception
                                   when no_data_found then

                                        if v_session_control.gLogging_Full then

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'Invoice preference is not set because there is no previous for termpayer: ' ||r_termpayers.POLICY_TERM_PAYER_ID
                                                  || ' , entity :'||r_termpayers.PAYER_ENTITY_ID
                                                  || ' , policy :'||in_policy_id
                                                  || ' , term :'||in_policy_term_id
                                             );

                                        end if;


                                  when too_many_rows then
                                        if v_session_control.gLogging_Full then

                                             pkg_os_logging.sp_log
                                             (
                                                  in_session_id,
                                                  in_transaction_id,
                                                  v_procedure_name,
                                                  'Invoice preference is not set because there is multiple payers in curret term for  termpayer: ' ||r_termpayers.POLICY_TERM_PAYER_ID
                                                  || ' , entity :'||r_termpayers.PAYER_ENTITY_ID
                                                  || ' , policy :'||in_policy_id
                                                  || ' , term :'||in_policy_term_id
                                             );

                                        end if;

                              end;


                              if v_session_control.gLogging_Full then

                                   pkg_os_logging.sp_log
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_procedure_name,
                                        'copying invoice pref from term payer entity: ' ||r_termpayers.POLICY_TERM_PAYER_ID
                                        || ' to termpayer :'||v_term_payer_id
                                        || ' value : '||r_termpayers.INVOICE_PREFERENCE
                                   );

                              end if;

                              if r_termpayers.INVOICE_PREFERENCE is not null then

                                   pkg_os_object_io.sp_object_bv_set
                                   (
                                        in_session_id,
                                        in_transaction_id,
                                        v_term_payer_id,
                                        gbv_PTPPayer_InvoicePref,
                                        r_termpayers.INVOICE_PREFERENCE
                                   );

                                   pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, v_term_payer_id, v_datamart_tf);

                              end if;


                         end loop;

                         --reset the invoice preference on term object as it's a multipayer policy

                         pkg_os_object_io.sp_object_bv_set
                         (
                              in_session_id,
                              in_transaction_id,
                              in_policy_term_id,
                              gbv_PTerm_InvoicePref,
                              null
                         );

                         pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_policy_term_id, v_datamart_tf);


                    end if;

             else

                    if v_session_control.gLogging_Full then

                         pkg_os_logging.sp_log
                         (
                              in_session_id,
                              in_transaction_id,
                              v_procedure_name,
                              ' As it is New business or Rewrite transaction with new policy number, copying invoice pref from its own image'
                         );

                    end if;

                    if ( nvl ( pkg_os_object_io.fn_object_bv_get
                               (
                                    in_session_id,
                                    in_transaction_id,
                                    in_policy_image_id,
                                    pkg_db_multipayer.gbv_MultiPayerEnabled_PTP
                               ), pkg_db_multipayer.genum_No) = pkg_db_multipayer.genum_No ) then


                         v_invoice_preference :=  pkg_os_object_io.fn_object_bv_get
                                                  (
                                                       in_session_id,
                                                       in_transaction_id,
                                                       in_policy_image_id,
                                                       gbv_PTP_InvoicePref
                                                  );

                         if v_session_control.gLogging_Full then

                              pkg_os_logging.sp_log
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   v_procedure_name,
                                   'copying invoice pref from PTP: ' ||in_policy_image_id
                                   || ' to  Term: '||in_policy_term_id
                                   || ' value :'||v_invoice_preference
                              );

                         end if;

                         if v_invoice_preference is not null then

                              pkg_os_object_io.sp_object_bv_set
                              (
                                   in_session_id,
                                   in_transaction_id,
                                   in_policy_term_id,
                                   gbv_PTerm_InvoicePref,
                                   v_invoice_preference
                              );

                              pkg_os_datamart.sp_datamart_update_row(in_session_id, in_transaction_id, in_policy_term_id, v_datamart_tf);


                         end if;
                         --commented as while creating termpayer, all ptppayer BVs are copied.

                    end if;

             end if;
             --raise no_data_found;
  
          --UTPRODUCT2-7  
          for r_billing_account in  (select distinct billing_account_id from vw_invoice_preferences where policy_id= in_policy_id)
                  loop
                    pkg_db_stmt_account.sp_create_acct_stmt_profile
                    (
                         in_session_id,
                         in_transaction_id,
                         r_billing_account.billing_account_id
                    );
          end loop;

        end if;

         -- UTPRODUCT2-13: set the adhoc invoice date
       
        -- UTPRODUCT2-61 
        v_policy_trx_type_id      :=  pkg_os_object_io.fn_object_bv_get
                                       (
                                            in_session_id,
                                            in_transaction_id,
                                            in_policy_transaction_id,
                                            pkg_os_policy_transaction.gbv_PolicyTrxType
                                       );
          if    in_policy_transaction_id is not null and
                -- UTPRODUCT2-61
                pkg_os_policy_transaction_type.fn_transaction_type_in_set( v_policy_trx_type_id, g_PdTrxSet_Acc_Stmt_Run_Date) = 'T'       
          then
             for r_impacted_account in  c_impacted_account
                  loop
                    pkg_db_stmt_account.sp_set_adhoc_stmt_run_date
                    (
                         in_session_id,
                         in_transaction_id,
                         in_policy_id,
                         in_policy_term_id,
                         r_impacted_account.billing_account_id
                    );
             end loop;

          end if;



     end if;   
	 
end sp_set_invoice_preference;
------------------------------------------------------------------------------------
end PKG_DB_OBJECT;
/
